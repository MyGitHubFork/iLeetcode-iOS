[
    {
        "leetId": "1",
        "link": "two-sum",
        "title": "Two Sum",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "45.8%",
        "questionDescription": "<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>\r\n\r\n<p>You may assume that each input would have <strong><em>exactly</em></strong> one solution, and you may not use the <em>same</em> element twice.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven nums = [2, 7, 11, 15], target = 9,\r\n\r\nBecause nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9,\r\nreturn [<strong>0</strong>, <strong>1</strong>].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code>&nbsp;\u548c\u4e00\u4e2a\u76ee\u6807\u503c <code>target</code>\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3&nbsp;<strong>\u4e24\u4e2a</strong>&nbsp;\u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u4f60\u4e0d\u80fd\u91cd\u590d\u5229\u7528\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u540c\u6837\u7684\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9\n\n\u56e0\u4e3a nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9\n\u6240\u4ee5\u8fd4\u56de [<strong>0, 1</strong>]\n</pre>\n",
        "titleZh": "\u4e24\u6570\u4e4b\u548c",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Snapchat",
            "Twitter",
            "Goldman Sachs",
            "Oracle",
            "Yelp",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Salesforce",
            "Lyft",
            "Zenefits",
            "Expedia",
            "Paypal",
            "Cisco",
            "Pinterest",
            "Zillow",
            "Pocket Gems",
            "Intuit",
            "Two Sigma",
            "Works Applications",
            "Indeed",
            "Mathworks",
            "Hulu",
            "Nvidia",
            "Palantir",
            "SAP",
            "Visa",
            "Samsung",
            "NetEase",
            "Yandex",
            "Dropbox",
            "Aetion",
            "Quora",
            "IXL",
            "GoDaddy",
            "Coursera",
            "Huawei",
            "JPMorgan",
            "Capital One",
            "Intel",
            "Affirm",
            "IBM",
            "ServiceNow",
            "TripAdvisor",
            "Citrix",
            "Tableau",
            "Epic Systems",
            "Morgan Stanley",
            "Twilio",
            "AppDynamics",
            "Riot Games",
            "Wish",
            "Grab",
            "Box",
            "Groupon",
            "Zappos",
            "Redfin",
            "Booking.com",
            "Zynga",
            "BlackRock",
            "Flipkart",
            "WAP",
            "Alation",
            "MAQ Software",
            "Gilt Groupe",
            "Drawbridge",
            "Symantec",
            "HTC",
            "Deutsche Bank",
            "Fallible",
            "Valve",
            "Helix",
            "Radius",
            "Jane Street",
            "Jump Trading",
            "Lending Club",
            "Blizzard",
            "Sina"
        ]
    },
    {
        "leetId": "2",
        "link": "add-two-numbers",
        "title": "Add Two Numbers",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "33.8%",
        "questionDescription": "<p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The digits are stored in <b>reverse order</b> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\r\n\r\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\r\n<b>Output:</b> 7 -&gt; 0 -&gt; 8\r\n<b>Explanation:</b> 342 + 465 = 807.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e24\u4e2a&nbsp;<strong>\u975e\u7a7a</strong> \u7684\u94fe\u8868\u7528\u6765\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5176\u4e2d\uff0c\u5b83\u4eec\u5404\u81ea\u7684\u4f4d\u6570\u662f\u6309\u7167&nbsp;<strong>\u9006\u5e8f</strong>&nbsp;\u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8&nbsp;<strong>\u4e00\u4f4d</strong>&nbsp;\u6570\u5b57\u3002</p>\n\n<p>\u5982\u679c\uff0c\u6211\u4eec\u5c06\u8fd9\u4e24\u4e2a\u6570\u76f8\u52a0\u8d77\u6765\uff0c\u5219\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u6765\u8868\u793a\u5b83\u4eec\u7684\u548c\u3002</p>\n\n<p>\u60a8\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0&nbsp;\u5f00\u5934\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n<strong>\u8f93\u51fa\uff1a</strong>7 -&gt; 0 -&gt; 8\n<strong>\u539f\u56e0\uff1a</strong>342 + 465 = 807\n</pre>\n",
        "titleZh": "\u4e24\u6570\u76f8\u52a0",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Twitter",
            "Goldman Sachs",
            "Oracle",
            "Yelp",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Salesforce",
            "Lyft",
            "Zenefits",
            "Cisco",
            "Works Applications",
            "Mathworks",
            "Nvidia",
            "SAP",
            "Samsung",
            "NetEase",
            "Yandex",
            "Dropbox",
            "Aetion",
            "Quora",
            "GoDaddy",
            "Capital One",
            "Intel",
            "Affirm",
            "IBM",
            "Tableau",
            "AppDynamics",
            "Riot Games",
            "Grab",
            "Box",
            "Zappos",
            "Redfin",
            "Zynga",
            "Flipkart",
            "WAP",
            "MAQ Software",
            "Gilt Groupe",
            "HTC",
            "EMC"
        ]
    },
    {
        "leetId": "3",
        "link": "longest-substring-without-repeating-characters",
        "title": "Longest Substring Without Repeating Characters",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "29.1%",
        "questionDescription": "<p>Given a string, find the length of the <b>longest substring</b> without repeating characters.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;abcabcbb&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3 \r\n<strong>Explanation:</strong></span> The answer is <code>&quot;abc&quot;</code>, with the length of 3. \r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;bbbbb&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1\r\n</span><span id=\"example-output-1\"><strong>Explanation: </strong>T</span>he answer is <code>&quot;b&quot;</code>, with the length of 1.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;pwwkew&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3\r\n</span><span id=\"example-output-1\"><strong>Explanation: </strong></span>The answer is <code>&quot;wke&quot;</code>, with the length of 3. \r\n             Note that the answer must be a <b>substring</b>, <code>&quot;pwke&quot;</code> is a <i>subsequence</i> and not a substring.\r\n</pre>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684&nbsp;<strong>\u6700\u957f\u5b50\u4e32&nbsp;</strong>\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;abcabcbb&quot;\n<strong>\u8f93\u51fa: </strong>3 \n<strong>\u89e3\u91ca:</strong> \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f <code>&quot;abc&quot;\uff0c\u6240\u4ee5\u5176</code>\u957f\u5ea6\u4e3a 3\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;bbbbb&quot;\n<strong>\u8f93\u51fa: </strong>1\n<strong>\u89e3\u91ca: </strong>\u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f <code>&quot;b&quot;</code>\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 1\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;pwwkew&quot;\n<strong>\u8f93\u51fa: </strong>3\n<strong>\u89e3\u91ca: </strong>\u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f&nbsp;<code>&quot;wke&quot;</code>\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002\n&nbsp;    \u8bf7\u6ce8\u610f\uff0c\u4f60\u7684\u7b54\u6848\u5fc5\u987b\u662f <strong>\u5b50\u4e32 </strong>\u7684\u957f\u5ea6\uff0c<code>&quot;pwke&quot;</code>&nbsp;\u662f\u4e00\u4e2a<em>\u5b50\u5e8f\u5217\uff0c</em>\u4e0d\u662f\u5b50\u4e32\u3002\n</pre>\n",
        "titleZh": "\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Sliding Window",
                "link": "sliding-window",
                "tagZh": null
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Snapchat",
            "Goldman Sachs",
            "Oracle",
            "Yelp",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Expedia",
            "Paypal",
            "Cisco",
            "Pinterest",
            "Works Applications",
            "Hulu",
            "Yandex",
            "Aetion",
            "IXL",
            "Huawei",
            "Epic Systems",
            "Riot Games",
            "Grab",
            "Booking.com",
            "Zynga",
            "BlackRock",
            "Alation",
            "Pure"
        ]
    },
    {
        "leetId": "4",
        "link": "median-of-two-sorted-arrays",
        "title": "Median of Two Sorted Arrays",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "34.6%",
        "questionDescription": "<p>There are two sorted arrays <b>nums1</b> and <b>nums2</b> of size m and n respectively.</p>\r\n\r\n<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\r\n\r\n<p>You may assume <strong>nums1</strong> and <strong>nums2</strong>&nbsp;cannot be both empty.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nnums1 = [1, 3]\r\nnums2 = [2]\r\n\r\nThe median is 2.0\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\nnums1 = [1, 2]\r\nnums2 = [3, 4]\r\n\r\nThe median is (2 + 3)/2 = 2.5\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6709\u5e8f\u6570\u7ec4&nbsp;<code>nums1</code> \u548c&nbsp;<code>nums2</code>\u3002</p>\n\n<p>\u8bf7\u4f60\u627e\u51fa\u8fd9\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\uff0c\u5e76\u4e14\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a&nbsp;O(log(m + n))\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>nums1</code>&nbsp;\u548c&nbsp;<code>nums2</code>&nbsp;\u4e0d\u4f1a\u540c\u65f6\u4e3a\u7a7a\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>nums1 = [1, 3]\nnums2 = [2]\n\n\u5219\u4e2d\u4f4d\u6570\u662f 2.0\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>nums1 = [1, 2]\nnums2 = [3, 4]\n\n\u5219\u4e2d\u4f4d\u6570\u662f (2 + 3)/2 = 2.5\n</pre>\n",
        "titleZh": "\u5bfb\u627e\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            },
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Snapchat",
            "Twitter",
            "Goldman Sachs",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Lyft",
            "Zenefits",
            "Pinterest",
            "Zillow",
            "Pocket Gems",
            "Two Sigma",
            "Nutanix",
            "Works Applications",
            "Hulu",
            "NetEase",
            "Dropbox",
            "Aetion",
            "Rubrik",
            "Cloudera",
            "Zappos",
            "Zynga"
        ]
    },
    {
        "leetId": "5",
        "link": "longest-palindromic-substring",
        "title": "Longest Palindromic Substring",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "24.9%",
        "questionDescription": "<p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;babad&quot;\r\n<strong>Output:</strong> &quot;bab&quot;\r\n<strong>Note:</strong> &quot;aba&quot; is also a valid answer.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;cbbd&quot;\r\n<strong>Output:</strong> &quot;bb&quot;\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>s</code>\uff0c\u627e\u5230 <code>s</code> \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>s</code> \u7684\u6700\u5927\u957f\u5ea6\u4e3a 1000\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;babad&quot;\n<strong>\u8f93\u51fa:</strong> &quot;bab&quot;\n<strong>\u6ce8\u610f:</strong> &quot;aba&quot; \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7b54\u6848\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;cbbd&quot;\n<strong>\u8f93\u51fa:</strong> &quot;bb&quot;\n</pre>\n",
        "titleZh": "\u6700\u957f\u56de\u6587\u5b50\u4e32",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Twitter",
            "Oracle",
            "Yelp",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Salesforce",
            "Lyft",
            "Zenefits",
            "Expedia",
            "Paypal",
            "Cisco",
            "Works Applications",
            "NetEase",
            "Yandex",
            "GoDaddy",
            "Huawei",
            "JPMorgan",
            "Qualtrics",
            "IBM",
            "Pure Storage",
            "Sumologic",
            "Roblox",
            "Goo"
        ]
    },
    {
        "leetId": "6",
        "link": "zigzag-conversion",
        "title": "ZigZag Conversion",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "42.0%",
        "questionDescription": "<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\r\n\r\n<pre>\r\nP   A   H   N\r\nA P L S I I G\r\nY   I   R\r\n</pre>\r\n\r\n<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\r\n\r\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\r\n\r\n<pre>\r\nstring convert(string s, int numRows);</pre>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 3\r\n<strong>Output:</strong> &quot;PAHNAPLSIIGYIR&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows =&nbsp;4\r\n<strong>Output:</strong>&nbsp;&quot;PINALSIGYAHRPI&quot;\r\n<strong>Explanation:</strong>\r\n\r\nP     I    N\r\nA   L S  I G\r\nY A   H R\r\nP     I</pre>\r\n",
        "questionDescriptionZh": "<p>\u5c06\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32\u6839\u636e\u7ed9\u5b9a\u7684\u884c\u6570\uff0c\u4ee5\u4ece\u4e0a\u5f80\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u8fdb\u884c&nbsp;Z \u5b57\u5f62\u6392\u5217\u3002</p>\n\n<p>\u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a <code>&quot;LEETCODEISHIRING&quot;</code>&nbsp;\u884c\u6570\u4e3a 3 \u65f6\uff0c\u6392\u5217\u5982\u4e0b\uff1a</p>\n\n<pre>L   C   I   R\nE T O E S I I G\nE   D   H   N\n</pre>\n\n<p>\u4e4b\u540e\uff0c\u4f60\u7684\u8f93\u51fa\u9700\u8981\u4ece\u5de6\u5f80\u53f3\u9010\u884c\u8bfb\u53d6\uff0c\u4ea7\u751f\u51fa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a<code>&quot;LCIRETOESIIGEDHN&quot;</code>\u3002</p>\n\n<p>\u8bf7\u4f60\u5b9e\u73b0\u8fd9\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570\uff1a</p>\n\n<pre>string convert(string s, int numRows);</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s = &quot;LEETCODEISHIRING&quot;, numRows = 3\n<strong>\u8f93\u51fa:</strong> &quot;LCIRETOESIIGEDHN&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s = &quot;LEETCODEISHIRING&quot;, numRows =&nbsp;4\n<strong>\u8f93\u51fa:</strong>&nbsp;&quot;LDREOEIIECIHNTSG&quot;\n<strong>\u89e3\u91ca:</strong>\n\nL     D     R\nE   O E   I I\nE C   I H   N\nT     S     G</pre>\n",
        "titleZh": "Z \u5b57\u5f62\u53d8\u6362",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Uber",
            "Adobe",
            "Apple",
            "Airbnb",
            "Twitter",
            "Tencent",
            "Zenefits",
            "Paypal",
            "Works Applications"
        ]
    },
    {
        "leetId": "7",
        "link": "reverse-integer",
        "title": "Reverse Integer",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "32.2%",
        "questionDescription": "<p>Given a 32-bit signed integer, reverse digits of an integer.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 123\r\n<strong>Output:</strong> 321\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> -123\r\n<strong>Output:</strong> -321\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 120\r\n<strong>Output:</strong> 21\r\n</pre>\r\n\r\n<p><strong>Note:</strong><br />\r\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u6574\u6570\u4e2d\u6bcf\u4f4d\u4e0a\u7684\u6570\u5b57\u8fdb\u884c\u53cd\u8f6c\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 123\n<strong>\u8f93\u51fa:</strong> 321\n</pre>\n\n<p><strong>&nbsp;\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> -123\n<strong>\u8f93\u51fa:</strong> -321\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 120\n<strong>\u8f93\u51fa:</strong> 21\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<p>\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8\u5f97\u4e0b 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5219\u5176\u6570\u503c\u8303\u56f4\u4e3a&nbsp;[&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]\u3002\u8bf7\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u6574\u6570\u6ea2\u51fa\u90a3\u4e48\u5c31\u8fd4\u56de 0\u3002</p>\n",
        "titleZh": "\u6574\u6570\u53cd\u8f6c",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Twitter",
            "Oracle",
            "eBay",
            "Tencent",
            "Lyft",
            "Paypal",
            "Zillow",
            "Works Applications",
            "NetEase",
            "Aetion",
            "GoDaddy",
            "Huawei",
            "JPMorgan",
            "Epic Systems",
            "WAP",
            "Symantec",
            "HTC"
        ]
    },
    {
        "leetId": "8",
        "link": "string-to-integer-atoi",
        "title": "String to Integer (atoi)",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "16.8%",
        "questionDescription": "<p>Implement <code><span>atoi</span></code> which&nbsp;converts a string to an integer.</p>\r\n\r\n<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\r\n\r\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\r\n\r\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\r\n\r\n<p>If no valid conversion could be performed, a zero value is returned.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Only the space character <code>&#39; &#39;</code> is considered as whitespace character.</li>\r\n\t<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]. If the numerical value is out of the range of representable values, INT_MAX (2<sup>31&nbsp;</sup>&minus; 1) or INT_MIN (&minus;2<sup>31</sup>) is returned.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;42&quot;\r\n<strong>Output:</strong> 42\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;   -42&quot;\r\n<strong>Output:</strong> -42\r\n<strong>Explanation:</strong> The first non-whitespace character is &#39;-&#39;, which is the minus sign.\r\n&nbsp;            Then take as many numerical digits as possible, which gets 42.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;4193 with words&quot;\r\n<strong>Output:</strong> 4193\r\n<strong>Explanation:</strong> Conversion stops at digit &#39;3&#39; as the next character is not a numerical digit.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;words and 987&quot;\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong> The first non-whitespace character is &#39;w&#39;, which is not a numerical \r\n&nbsp;            digit or a +/- sign. Therefore no valid conversion could be performed.</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;-91283472332&quot;\r\n<strong>Output:</strong> -2147483648\r\n<strong>Explanation:</strong> The number &quot;-91283472332&quot; is out of the range of a 32-bit signed integer.\r\n&nbsp;            Thefore INT_MIN (&minus;2<sup>31</sup>) is returned.</pre>\r\n",
        "questionDescriptionZh": "<p>\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a&nbsp;<code>atoi</code>&nbsp;\u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u3002</p>\n\n<p>\u9996\u5148\uff0c\u8be5\u51fd\u6570\u4f1a\u6839\u636e\u9700\u8981\u4e22\u5f03\u65e0\u7528\u7684\u5f00\u5934\u7a7a\u683c\u5b57\u7b26\uff0c\u76f4\u5230\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002</p>\n\n<p>\u5f53\u6211\u4eec\u5bfb\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e3a\u6b63\u6216\u8005\u8d1f\u53f7\u65f6\uff0c\u5219\u5c06\u8be5\u7b26\u53f7\u4e0e\u4e4b\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u4f5c\u4e3a\u8be5\u6574\u6570\u7684\u6b63\u8d1f\u53f7\uff1b\u5047\u5982\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u6574\u6570\u3002</p>\n\n<p>\u8be5\u5b57\u7b26\u4e32\u9664\u4e86\u6709\u6548\u7684\u6574\u6570\u90e8\u5206\u4e4b\u540e\u4e5f\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u4e8e\u51fd\u6570\u4e0d\u5e94\u8be5\u9020\u6210\u5f71\u54cd\u3002</p>\n\n<p>\u6ce8\u610f\uff1a\u5047\u5982\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u6574\u6570\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u4e3a\u7a7a\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4f60\u7684\u51fd\u6570\u4e0d\u9700\u8981\u8fdb\u884c\u8f6c\u6362\u3002</p>\n\n<p>\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u82e5\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u7684\u8f6c\u6362\u65f6\uff0c\u8bf7\u8fd4\u56de 0\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u5927\u5c0f\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u90a3\u4e48\u5176\u6570\u503c\u8303\u56f4\u4e3a&nbsp;[&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]\u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0cqing\u8fd4\u56de &nbsp;INT_MAX (2<sup>31&nbsp;</sup>&minus; 1) \u6216&nbsp;INT_MIN (&minus;2<sup>31</sup>) \u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;42&quot;\n<strong>\u8f93\u51fa:</strong> 42\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;   -42&quot;\n<strong>\u8f93\u51fa:</strong> -42\n<strong>\u89e3\u91ca: </strong>\u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a &#39;-&#39;, \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002\n&nbsp;    \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;4193 with words&quot;\n<strong>\u8f93\u51fa:</strong> 4193\n<strong>\u89e3\u91ca:</strong> \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 &#39;3&#39; \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;words and 987&quot;\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:</strong> \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f &#39;w&#39;, \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002\n     \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;-91283472332&quot;\n<strong>\u8f93\u51fa:</strong> -2147483648\n<strong>\u89e3\u91ca:</strong> \u6570\u5b57 &quot;-91283472332&quot; \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \n&nbsp;    \u56e0\u6b64\u8fd4\u56de INT_MIN (&minus;2<sup>31</sup>) \u3002\n</pre>\n",
        "titleZh": "\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi)",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Goldman Sachs",
            "eBay",
            "Tencent",
            "VMware",
            "Cisco",
            "Zillow",
            "SAP",
            "Huawei",
            "Citrix",
            "Redfin"
        ]
    },
    {
        "leetId": "9",
        "link": "palindrome-number",
        "title": "Palindrome Number",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "55.8%",
        "questionDescription": "<p>Determine whether an integer is a palindrome. An integer&nbsp;is&nbsp;a&nbsp;palindrome when it&nbsp;reads the same backward as forward.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 121\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> -121\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 10\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome.\r\n</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Coud you solve&nbsp;it without converting the integer to a string?</p>\r\n",
        "questionDescriptionZh": "<p>\u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u662f\u56de\u6587\u6570\u3002\u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 121\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> -121\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u4ece\u5de6\u5411\u53f3\u8bfb, \u4e3a -121 \u3002 \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 121- \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 10\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 01 \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002\n</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<p>\u4f60\u80fd\u4e0d\u5c06\u6574\u6570\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f</p>\n",
        "titleZh": "\u56de\u6587\u6570",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Goldman Sachs",
            "Tencent",
            "Cisco",
            "Aetion",
            "GoDaddy",
            "Huawei",
            "JPMorgan",
            "Affirm",
            "BlackRock",
            "MAQ Software"
        ]
    },
    {
        "leetId": "10",
        "link": "regular-expression-matching",
        "title": "Regular Expression Matching",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "22.3%",
        "questionDescription": "<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code>.</p>\r\n\r\n<pre>\r\n&#39;.&#39; Matches any single character.\r\n&#39;*&#39; Matches zero or more of the preceding element.\r\n</pre>\r\n\r\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>s</code>&nbsp;could be empty and contains only lowercase letters <code>a-z</code>.</li>\r\n\t<li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like&nbsp;<code>.</code>&nbsp;or&nbsp;<code>*</code>.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;aa&quot;\r\np = &quot;a&quot;\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;aa&quot;\r\np = &quot;a*&quot;\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; means zero or more of the precedeng&nbsp;element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;ab&quot;\r\np = &quot;.*&quot;\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong>&nbsp;&quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;aab&quot;\r\np = &quot;c*a*b&quot;\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong>&nbsp;c can be repeated 0 times, a can be repeated 1 time. Therefore it matches &quot;aab&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;mississippi&quot;\r\np = &quot;mis*is*p*.&quot;\r\n<strong>Output:</strong> false\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;(<code>s</code>) \u548c\u4e00\u4e2a\u5b57\u7b26\u6a21\u5f0f&nbsp;(<code>p</code>)\u3002\u5b9e\u73b0\u652f\u6301 <code>&#39;.&#39;</code>&nbsp;\u548c&nbsp;<code>&#39;*&#39;</code>&nbsp;\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002</p>\n\n<pre>&#39;.&#39; \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26\u3002\n&#39;*&#39; \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u5143\u7d20\u3002\n</pre>\n\n<p>\u5339\u914d\u5e94\u8be5\u8986\u76d6<strong>\u6574\u4e2a</strong>\u5b57\u7b26\u4e32&nbsp;(<code>s</code>) \uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>s</code>&nbsp;\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece&nbsp;<code>a-z</code>&nbsp;\u7684\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li><code>p</code>&nbsp;\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece&nbsp;<code>a-z</code>&nbsp;\u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26&nbsp;<code>.</code>&nbsp;\u548c&nbsp;<code>*</code>\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;aa&quot;\np = &quot;a&quot;\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> &quot;a&quot; \u65e0\u6cd5\u5339\u914d &quot;aa&quot; \u6574\u4e2a\u5b57\u7b26\u4e32\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;aa&quot;\np = &quot;a*&quot;\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong>&nbsp;&#39;*&#39; \u4ee3\u8868\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u5143\u7d20, \u5373\u53ef\u4ee5\u5339\u914d &#39;a&#39; \u3002\u56e0\u6b64, \u91cd\u590d &#39;a&#39; \u4e00\u6b21, \u5b57\u7b26\u4e32\u53ef\u53d8\u4e3a &quot;aa&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;ab&quot;\np = &quot;.*&quot;\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong>&nbsp;&quot;.*&quot; \u8868\u793a\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a(&#39;*&#39;)\u4efb\u610f\u5b57\u7b26(&#39;.&#39;)\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;aab&quot;\np = &quot;c*a*b&quot;\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong>&nbsp;&#39;c&#39; \u53ef\u4ee5\u4e0d\u88ab\u91cd\u590d, &#39;a&#39; \u53ef\u4ee5\u88ab\u91cd\u590d\u4e00\u6b21\u3002\u56e0\u6b64\u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 &quot;aab&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;mississippi&quot;\np = &quot;mis*is*p*.&quot;\n<strong>\u8f93\u51fa:</strong> false</pre>\n",
        "titleZh": "\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Twitter",
            "Oracle",
            "Yelp",
            "VMware",
            "Pocket Gems",
            "Two Sigma",
            "Palantir Technologies",
            "Yandex",
            "Coursera"
        ]
    },
    {
        "leetId": "11",
        "link": "container-with-most-water",
        "title": "Container With Most Water",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "55.1%",
        "questionDescription": "<p>Given <i>n</i> non-negative integers <i>a<sub>1</sub></i>, <i>a<sub>2</sub></i>, ..., <i>a<sub>n&nbsp;</sub></i>, where each represents a point at coordinate (<i>i</i>, <i>a<sub>i</sub></i>). <i>n</i> vertical lines are drawn such that the two endpoints of line <i>i</i> is at (<i>i</i>, <i>a<sub>i</sub></i>) and (<i>i</i>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>You may not slant the container and <i>n</i> is at least 2.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" /></p>\r\n\r\n<p><small>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain&nbsp;is 49. </small></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,8,6,2,5,4,8,3,7]\r\n<strong>Output:</strong> 49</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a <em>n</em> \u4e2a\u975e\u8d1f\u6574\u6570 <em>a</em><sub>1</sub>\uff0c<em>a</em><sub>2\uff0c</sub>...\uff0c<em>a</em><sub>n\uff0c</sub>\u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9&nbsp;(<em>i</em>,&nbsp;<em>a<sub>i</sub></em>) \u3002\u5728\u5750\u6807\u5185\u753b <em>n</em> \u6761\u5782\u76f4\u7ebf\uff0c\u5782\u76f4\u7ebf <em>i</em>&nbsp;\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a&nbsp;(<em>i</em>,&nbsp;<em>a<sub>i</sub></em>) \u548c (<em>i</em>, 0)\u3002\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e&nbsp;<em>x</em>&nbsp;\u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\uff0c\u4e14&nbsp;<em>n</em>&nbsp;\u7684\u503c\u81f3\u5c11\u4e3a 2\u3002</p>\n\n<p><img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg\" style=\"height: 287px; width: 600px;\"></p>\n\n<p><small>\u56fe\u4e2d\u5782\u76f4\u7ebf\u4ee3\u8868\u8f93\u5165\u6570\u7ec4 [1,8,6,2,5,4,8,3,7]\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u5bb9\u5668\u80fd\u591f\u5bb9\u7eb3\u6c34\uff08\u8868\u793a\u4e3a\u84dd\u8272\u90e8\u5206\uff09\u7684\u6700\u5927\u503c\u4e3a&nbsp;49\u3002</small></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,8,6,2,5,4,8,3,7]\n<strong>\u8f93\u51fa:</strong> 49</pre>\n",
        "titleZh": "\u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Goldman Sachs",
            "Tencent",
            "Walmart Labs",
            "Lyft",
            "Works Applications",
            "Palantir Technologies",
            "Palantir",
            "Samsung",
            "Aetion",
            "Huawei",
            "Intel",
            "Citrix",
            "AppDynamics",
            "Zynga"
        ]
    },
    {
        "leetId": "12",
        "link": "integer-to-roman",
        "title": "Integer to Roman",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "58.5%",
        "questionDescription": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\r\n\r\n<pre>\r\n<strong>Symbol</strong>       <strong>Value</strong>\r\nI             1\r\nV             5\r\nX             10\r\nL             50\r\nC             100\r\nD             500\r\nM             1000</pre>\r\n\r\n<p>For example,&nbsp;two is written as <code>II</code>&nbsp;in Roman numeral, just two one&#39;s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p>\r\n\r\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\r\n\r\n<ul>\r\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\r\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\r\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\r\n</ul>\r\n\r\n<p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;3\r\n<strong>Output:</strong> &quot;III&quot;</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;4\r\n<strong>Output:</strong> &quot;IV&quot;</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;9\r\n<strong>Output:</strong> &quot;IX&quot;</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;58\r\n<strong>Output:</strong> &quot;LVIII&quot;\r\n<strong>Explanation:</strong> L = 50, V = 5, III = 3.\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;1994\r\n<strong>Output:</strong> &quot;MCMXCIV&quot;\r\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.</pre>\r\n",
        "questionDescriptionZh": "<p>\u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a&nbsp;<code>I</code>\uff0c&nbsp;<code>V</code>\uff0c&nbsp;<code>X</code>\uff0c&nbsp;<code>L</code>\uff0c<code>C</code>\uff0c<code>D</code>&nbsp;\u548c&nbsp;<code>M</code>\u3002</p>\n\n<pre><strong>\u5b57\u7b26</strong>          <strong>\u6570\u503c</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>\u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a&nbsp;<code>II</code>&nbsp;\uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a&nbsp;<code>XII</code>&nbsp;\uff0c\u5373\u4e3a&nbsp;<code>X</code>&nbsp;+&nbsp;<code>II</code>&nbsp;\u3002 27 \u5199\u505a&nbsp;&nbsp;<code>XXVII</code>, \u5373\u4e3a&nbsp;<code>XX</code>&nbsp;+&nbsp;<code>V</code>&nbsp;+&nbsp;<code>II</code>&nbsp;\u3002</p>\n\n<p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a&nbsp;<code>IIII</code>\uff0c\u800c\u662f&nbsp;<code>IV</code>\u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a&nbsp;<code>IX</code>\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a</p>\n\n<ul>\n\t<li><code>I</code>&nbsp;\u53ef\u4ee5\u653e\u5728&nbsp;<code>V</code>&nbsp;(5) \u548c&nbsp;<code>X</code>&nbsp;(10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002</li>\n\t<li><code>X</code>&nbsp;\u53ef\u4ee5\u653e\u5728&nbsp;<code>L</code>&nbsp;(50) \u548c&nbsp;<code>C</code>&nbsp;(100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c&nbsp;90\u3002&nbsp;</li>\n\t<li><code>C</code>&nbsp;\u53ef\u4ee5\u653e\u5728&nbsp;<code>D</code>&nbsp;(500) \u548c&nbsp;<code>M</code>&nbsp;(1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a&nbsp;400 \u548c&nbsp;900\u3002</li>\n</ul>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u4e3a\u7f57\u9a6c\u6570\u5b57\u3002\u8f93\u5165\u786e\u4fdd\u5728 1&nbsp;\u5230 3999 \u7684\u8303\u56f4\u5185\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;3\n<strong>\u8f93\u51fa:</strong> &quot;III&quot;</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;4\n<strong>\u8f93\u51fa:</strong> &quot;IV&quot;</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;9\n<strong>\u8f93\u51fa:</strong> &quot;IX&quot;</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;58\n<strong>\u8f93\u51fa:</strong> &quot;LVIII&quot;\n<strong>\u89e3\u91ca:</strong> L = 50, V = 5, III = 3.\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;1994\n<strong>\u8f93\u51fa:</strong> &quot;MCMXCIV&quot;\n<strong>\u89e3\u91ca:</strong> M = 1000, CM = 900, XC = 90, IV = 4.</pre>\n",
        "titleZh": "\u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Twitter",
            "Salesforce",
            "Expedia",
            "Intuit",
            "SAP",
            "GoDaddy",
            "HTC"
        ]
    },
    {
        "leetId": "13",
        "link": "roman-to-integer",
        "title": "Roman to Integer",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "57.3%",
        "questionDescription": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\r\n\r\n<pre>\r\n<strong>Symbol</strong>       <strong>Value</strong>\r\nI             1\r\nV             5\r\nX             10\r\nL             50\r\nC             100\r\nD             500\r\nM             1000</pre>\r\n\r\n<p>For example,&nbsp;two is written as <code>II</code>&nbsp;in Roman numeral, just two one&#39;s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p>\r\n\r\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\r\n\r\n<ul>\r\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\r\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\r\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\r\n</ul>\r\n\r\n<p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;III&quot;\r\n<strong>Output:</strong> 3</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;IV&quot;\r\n<strong>Output:</strong> 4</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;IX&quot;\r\n<strong>Output:</strong> 9</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;LVIII&quot;\r\n<strong>Output:</strong> 58\r\n<strong>Explanation:</strong> L = 50, V= 5, III = 3.\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;MCMXCIV&quot;\r\n<strong>Output:</strong> 1994\r\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.</pre>\r\n",
        "questionDescriptionZh": "<p>\u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26:&nbsp;<code>I</code>\uff0c&nbsp;<code>V</code>\uff0c&nbsp;<code>X</code>\uff0c&nbsp;<code>L</code>\uff0c<code>C</code>\uff0c<code>D</code>&nbsp;\u548c&nbsp;<code>M</code>\u3002</p>\n\n<pre><strong>\u5b57\u7b26</strong>          <strong>\u6570\u503c</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>\u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a&nbsp;<code>II</code>&nbsp;\uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a&nbsp;<code>XII</code>&nbsp;\uff0c\u5373\u4e3a&nbsp;<code>X</code>&nbsp;+&nbsp;<code>II</code>&nbsp;\u3002 27 \u5199\u505a&nbsp;&nbsp;<code>XXVII</code>, \u5373\u4e3a&nbsp;<code>XX</code>&nbsp;+&nbsp;<code>V</code>&nbsp;+&nbsp;<code>II</code>&nbsp;\u3002</p>\n\n<p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a&nbsp;<code>IIII</code>\uff0c\u800c\u662f&nbsp;<code>IV</code>\u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a&nbsp;<code>IX</code>\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a</p>\n\n<ul>\n\t<li><code>I</code>&nbsp;\u53ef\u4ee5\u653e\u5728&nbsp;<code>V</code>&nbsp;(5) \u548c&nbsp;<code>X</code>&nbsp;(10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002</li>\n\t<li><code>X</code>&nbsp;\u53ef\u4ee5\u653e\u5728&nbsp;<code>L</code>&nbsp;(50) \u548c&nbsp;<code>C</code>&nbsp;(100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c&nbsp;90\u3002&nbsp;</li>\n\t<li><code>C</code>&nbsp;\u53ef\u4ee5\u653e\u5728&nbsp;<code>D</code>&nbsp;(500) \u548c&nbsp;<code>M</code>&nbsp;(1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a&nbsp;400 \u548c&nbsp;900\u3002</li>\n</ul>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u7f57\u9a6c\u6570\u5b57\uff0c\u5c06\u5176\u8f6c\u6362\u6210\u6574\u6570\u3002\u8f93\u5165\u786e\u4fdd\u5728 1&nbsp;\u5230 3999 \u7684\u8303\u56f4\u5185\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;&quot;III&quot;\n<strong>\u8f93\u51fa:</strong> 3</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;&quot;IV&quot;\n<strong>\u8f93\u51fa:</strong> 4</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;&quot;IX&quot;\n<strong>\u8f93\u51fa:</strong> 9</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;&quot;LVIII&quot;\n<strong>\u8f93\u51fa:</strong> 58\n<strong>\u89e3\u91ca:</strong> L = 50, V= 5, III = 3.\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;&quot;MCMXCIV&quot;\n<strong>\u8f93\u51fa:</strong> 1994\n<strong>\u89e3\u91ca:</strong> M = 1000, CM = 900, XC = 90, IV = 4.</pre>\n",
        "titleZh": "\u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Goldman Sachs",
            "Oracle",
            "Yelp",
            "Tencent",
            "Zenefits",
            "Expedia",
            "Paypal",
            "Zillow",
            "Pocket Gems",
            "Intuit",
            "Works Applications",
            "Mathworks",
            "Aetion",
            "Coursera",
            "Qualtrics",
            "Pure Storage",
            "Riot Games",
            "Cloudera"
        ]
    },
    {
        "leetId": "14",
        "link": "longest-common-prefix",
        "title": "Longest Common Prefix",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "32.9%",
        "questionDescription": "<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\r\n\r\n<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\r\n<strong>Output:</strong> &quot;fl&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\r\n<strong>Output:</strong> &quot;&quot;\r\n<strong>Explanation:</strong> There is no common prefix among the input strings.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>All given inputs are in lowercase letters <code>a-z</code>.</p>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002</p>\n\n<p>\u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32&nbsp;<code>&quot;&quot;</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\n<strong>\u8f93\u51fa:</strong> &quot;fl&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\n<strong>\u8f93\u51fa:</strong> &quot;&quot;\n<strong>\u89e3\u91ca:</strong> \u8f93\u5165\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u6240\u6709\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd&nbsp;<code>a-z</code>&nbsp;\u3002</p>\n",
        "titleZh": "\u6700\u957f\u516c\u5171\u524d\u7f00",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Oracle",
            "Yelp",
            "Tencent",
            "VMware",
            "Expedia",
            "Pinterest",
            "Visa",
            "Samsung",
            "Aetion",
            "Quora",
            "IXL",
            "Huawei",
            "Citrix",
            "Deutsche Bank"
        ]
    },
    {
        "leetId": "15",
        "link": "3sum",
        "title": "3Sum",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "21.9%",
        "questionDescription": "<p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>The solution set must not contain duplicate triplets.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven array nums = [-1, 0, 1, 2, -1, -4],\r\n\r\nA solution set is:\r\n[\r\n  [-1, 0, 1],\r\n  [-1, -1, 2]\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b <em>n</em> \u4e2a\u6574\u6570\u7684\u6570\u7ec4&nbsp;<code>nums</code>\uff0c\u5224\u65ad&nbsp;<code>nums</code>&nbsp;\u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u5143\u7d20 <em>a\uff0cb\uff0cc \uff0c</em>\u4f7f\u5f97&nbsp;<em>a + b + c = </em>0 \uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002</p>\n\n<pre>\u4f8b\u5982, \u7ed9\u5b9a\u6570\u7ec4 nums = [-1, 0, 1, 2, -1, -4]\uff0c\n\n\u6ee1\u8db3\u8981\u6c42\u7684\u4e09\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n</pre>\n",
        "titleZh": "\u4e09\u6570\u4e4b\u548c",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Snapchat",
            "Goldman Sachs",
            "Yelp",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Salesforce",
            "Expedia",
            "Paypal",
            "Zillow",
            "Intuit",
            "Works Applications",
            "Indeed",
            "Visa",
            "Yandex",
            "Square",
            "Aetion",
            "Quora",
            "Coursera",
            "Qualtrics",
            "Akuna Capital",
            "Box",
            "GE Digital"
        ]
    },
    {
        "leetId": "16",
        "link": "3sum-closest",
        "title": "3Sum Closest",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "39.9%",
        "questionDescription": "<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, find three integers in <code>nums</code>&nbsp;such that the sum is closest to&nbsp;<code>target</code>. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven array nums = [-1, 2, 1, -4], and target = 1.\r\n\r\nThe sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u62ec&nbsp;<em>n</em> \u4e2a\u6574\u6570\u7684\u6570\u7ec4&nbsp;<code>nums</code><em>&nbsp;</em>\u548c \u4e00\u4e2a\u76ee\u6807\u503c&nbsp;<code>target</code>\u3002\u627e\u51fa&nbsp;<code>nums</code><em>&nbsp;</em>\u4e2d\u7684\u4e09\u4e2a\u6574\u6570\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e0e&nbsp;<code>target</code>&nbsp;\u6700\u63a5\u8fd1\u3002\u8fd4\u56de\u8fd9\u4e09\u4e2a\u6570\u7684\u548c\u3002\u5047\u5b9a\u6bcf\u7ec4\u8f93\u5165\u53ea\u5b58\u5728\u552f\u4e00\u7b54\u6848\u3002</p>\n\n<pre>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u6570\u7ec4 nums = [-1\uff0c2\uff0c1\uff0c-4], \u548c target = 1.\n\n\u4e0e target \u6700\u63a5\u8fd1\u7684\u4e09\u4e2a\u6570\u7684\u548c\u4e3a 2. (-1 + 2 + 1 = 2).\n</pre>\n",
        "titleZh": "\u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Alibaba",
            "Airbnb",
            "Goldman Sachs"
        ]
    },
    {
        "leetId": "17",
        "link": "letter-combinations-of-a-phone-number",
        "title": "Letter Combinations of a Phone Number",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "48.7%",
        "questionDescription": "<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent.</p>\r\n\r\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\r\n\r\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png\" /></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;23&quot;\r\n<strong>Output:</strong> [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57&nbsp;<code>2-9</code>&nbsp;\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002</p>\n\n<p>\u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002</p>\n\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png\"></p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;23&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u5c3d\u7ba1\u4e0a\u9762\u7684\u7b54\u6848\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002</p>\n",
        "titleZh": "\u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Snapchat",
            "Oracle",
            "Yelp",
            "eBay",
            "Walmart Labs",
            "VMware",
            "Lyft",
            "Paypal",
            "Pinterest",
            "Dropbox",
            "Square",
            "GoDaddy",
            "JPMorgan",
            "Epic Systems",
            "Morgan Stanley",
            "Groupon",
            "Symantec"
        ]
    },
    {
        "leetId": "18",
        "link": "4sum",
        "title": "4Sum",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "34.8%",
        "questionDescription": "<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>The solution set must not contain duplicate quadruplets.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven array nums = [1, 0, -1, 0, -2, 2], and target = 0.\r\n\r\nA solution set is:\r\n[\r\n  [-1,  0, 0, 1],\r\n  [-2, -1, 1, 2],\r\n  [-2,  0, 0, 2]\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b&nbsp;<em>n</em> \u4e2a\u6574\u6570\u7684\u6570\u7ec4&nbsp;<code>nums</code>&nbsp;\u548c\u4e00\u4e2a\u76ee\u6807\u503c&nbsp;<code>target</code>\uff0c\u5224\u65ad&nbsp;<code>nums</code>&nbsp;\u4e2d\u662f\u5426\u5b58\u5728\u56db\u4e2a\u5143\u7d20 <em>a\uff0c</em><em>b\uff0cc</em>&nbsp;\u548c <em>d</em>&nbsp;\uff0c\u4f7f\u5f97&nbsp;<em>a</em> + <em>b</em> + <em>c</em> + <em>d</em>&nbsp;\u7684\u503c\u4e0e&nbsp;<code>target</code>&nbsp;\u76f8\u7b49\uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<p>\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\u7ed9\u5b9a\u6570\u7ec4 nums = [1, 0, -1, 0, -2, 2]\uff0c\u548c target = 0\u3002\n\n\u6ee1\u8db3\u8981\u6c42\u7684\u56db\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n</pre>\n",
        "titleZh": "\u56db\u6570\u4e4b\u548c",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Adobe",
            "Apple",
            "Alibaba",
            "Airbnb"
        ]
    },
    {
        "leetId": "19",
        "link": "remove-nth-node-from-end-of-list",
        "title": "Remove Nth Node From End of List",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "33.2%",
        "questionDescription": "<p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven linked list: <strong>1-&gt;2-&gt;3-&gt;4-&gt;5</strong>, and <strong><em>n</em> = 2</strong>.\r\n\r\nAfter removing the second node from the end, the linked list becomes <strong>1-&gt;2-&gt;3-&gt;5</strong>.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Given <em>n</em> will always be valid.</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Could you do this in one pass?</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c&nbsp;<em>n&nbsp;</em>\u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: <strong>1-&gt;2-&gt;3-&gt;4-&gt;5</strong>, \u548c <strong><em>n</em> = 2</strong>.\n\n\u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a <strong>1-&gt;2-&gt;3-&gt;5</strong>.\n</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u7ed9\u5b9a\u7684 <em>n</em>&nbsp;\u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<p>\u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f</p>\n",
        "titleZh": "\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Alibaba",
            "Baidu",
            "eBay",
            "Zenefits",
            "Expedia",
            "Cisco",
            "Visa",
            "Aetion",
            "ServiceNow"
        ]
    },
    {
        "leetId": "20",
        "link": "valid-parentheses",
        "title": "Valid Parentheses",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "37.4%",
        "questionDescription": "<p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>\r\n\r\n<p>An input string is valid if:</p>\r\n\r\n<ol>\r\n\t<li>Open brackets must be closed by the same type of brackets.</li>\r\n\t<li>Open brackets must be closed in the correct order.</li>\r\n</ol>\r\n\r\n<p>Note that an empty string is&nbsp;also considered valid.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;()&quot;\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;()[]{}&quot;\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;(]&quot;\r\n<strong>Output:</strong> false\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;([)]&quot;\r\n<strong>Output:</strong> false\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;{[]}&quot;\r\n<strong>Output:</strong> true\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec <code>&#39;(&#39;</code>\uff0c<code>&#39;)&#39;</code>\uff0c<code>&#39;{&#39;</code>\uff0c<code>&#39;}&#39;</code>\uff0c<code>&#39;[&#39;</code>\uff0c<code>&#39;]&#39;</code>&nbsp;\u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002</p>\n\n<p>\u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a</p>\n\n<ol>\n\t<li>\u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002</li>\n\t<li>\u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002</li>\n</ol>\n\n<p>\u6ce8\u610f\u7a7a\u5b57\u7b26\u4e32\u53ef\u88ab\u8ba4\u4e3a\u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;()&quot;\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;()[]{}&quot;\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;(]&quot;\n<strong>\u8f93\u51fa:</strong> false\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;([)]&quot;\n<strong>\u8f93\u51fa:</strong> false\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;{[]}&quot;\n<strong>\u8f93\u51fa:</strong> true</pre>\n",
        "titleZh": "\u6709\u6548\u7684\u62ec\u53f7",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Twitter",
            "Goldman Sachs",
            "Oracle",
            "Yelp",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Lyft",
            "Zenefits",
            "Expedia",
            "Paypal",
            "Cisco",
            "Zillow",
            "Indeed",
            "Mathworks",
            "SAP",
            "Visa",
            "Samsung",
            "Yandex",
            "Aetion",
            "GoDaddy",
            "Huawei",
            "JPMorgan",
            "Capital One",
            "Rubrik",
            "Akuna Capital",
            "Pure Storage",
            "ServiceNow",
            "TripAdvisor",
            "Twilio",
            "Riot Games",
            "Cloudera",
            "Zappos",
            "Booking.com",
            "Zynga",
            "Qualcomm",
            "TripleByte",
            "Gilt Groupe",
            "Yatra",
            "Lending Club",
            "Blizzard"
        ]
    },
    {
        "leetId": "21",
        "link": "merge-two-sorted-lists",
        "title": "Merge Two Sorted Lists",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "54.0%",
        "questionDescription": "<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b> 1->2->4, 1->3->4\r\n<b>Output:</b> 1->1->2->3->4->4\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u5c06\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>1-&gt;2-&gt;4, 1-&gt;3-&gt;4\n<strong>\u8f93\u51fa\uff1a</strong>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4\n</pre>\n",
        "titleZh": "\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Oracle",
            "Yelp",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Salesforce",
            "Expedia",
            "Paypal",
            "Cisco",
            "Intuit",
            "Indeed",
            "Hulu",
            "Samsung",
            "Yandex",
            "Coursera",
            "Huawei",
            "Capital One",
            "IBM",
            "Groupon",
            "Qualcomm",
            "Arista Networks",
            "EMC"
        ]
    },
    {
        "leetId": "22",
        "link": "generate-parentheses",
        "title": "Generate Parentheses",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "69.5%",
        "questionDescription": "<p>\r\nGiven <i>n</i> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\r\n</p>\r\n\r\n<p>\r\nFor example, given <i>n</i> = 3, a solution set is:\r\n</p>\r\n<pre>\r\n[\r\n  \"((()))\",\r\n  \"(()())\",\r\n  \"(())()\",\r\n  \"()(())\",\r\n  \"()()()\"\r\n]\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u51fa&nbsp;<em>n</em>&nbsp;\u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14<strong>\u6709\u6548\u7684</strong>\u62ec\u53f7\u7ec4\u5408\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u7ed9\u51fa&nbsp;<em>n </em>=<em> </em>3\uff0c\u751f\u6210\u7ed3\u679c\u4e3a\uff1a</p>\n\n<pre>[\n  &quot;((()))&quot;,\n  &quot;(()())&quot;,\n  &quot;(())()&quot;,\n  &quot;()(())&quot;,\n  &quot;()()()&quot;\n]\n</pre>\n",
        "titleZh": "\u62ec\u53f7\u751f\u6210",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Snapchat",
            "Yelp",
            "eBay",
            "Walmart Labs",
            "Salesforce",
            "Lyft",
            "Zenefits",
            "Intuit",
            "Works Applications",
            "Nvidia",
            "NetEase",
            "Yandex",
            "Aetion",
            "IBM"
        ]
    },
    {
        "leetId": "23",
        "link": "merge-k-sorted-lists",
        "title": "Merge k Sorted Lists",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "44.9%",
        "questionDescription": "<p>Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n[\r\n&nbsp; 1-&gt;4-&gt;5,\r\n&nbsp; 1-&gt;3-&gt;4,\r\n&nbsp; 2-&gt;6\r\n]\r\n<strong>Output:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u5408\u5e76&nbsp;<em>k&nbsp;</em>\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u6392\u5e8f\u94fe\u8868\u3002\u8bf7\u5206\u6790\u548c\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[\n&nbsp; 1-&gt;4-&gt;5,\n&nbsp; 1-&gt;3-&gt;4,\n&nbsp; 2-&gt;6\n]\n<strong>\u8f93\u51fa:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</pre>\n",
        "titleZh": "\u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            },
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Snapchat",
            "Twitter",
            "Oracle",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Salesforce",
            "Lyft",
            "Paypal",
            "Zillow",
            "Intuit",
            "Nutanix",
            "Indeed",
            "Mathworks",
            "Samsung",
            "Dropbox",
            "IXL",
            "Huawei",
            "Capital One",
            "Coupang",
            "Wish",
            "TinyCo"
        ]
    },
    {
        "leetId": "24",
        "link": "swap-nodes-in-pairs",
        "title": "Swap Nodes in Pairs",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "59.0%",
        "questionDescription": "<p>Given a&nbsp;linked list, swap every two adjacent nodes and return its head.</p>\r\n\r\n<p>You may <strong>not</strong> modify the values in the list&#39;s nodes, only nodes itself may be changed.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven <code>1-&gt;2-&gt;3-&gt;4</code>, you should return the list as <code>2-&gt;1-&gt;4-&gt;3</code>.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002</p>\n\n<p><strong>\u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c</strong>\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\u7ed9\u5b9a <code>1-&gt;2-&gt;3-&gt;4</code>, \u4f60\u5e94\u8be5\u8fd4\u56de <code>2-&gt;1-&gt;4-&gt;3</code>.\n</pre>\n",
        "titleZh": "\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Yahoo",
            "Alibaba",
            "Walmart Labs",
            "Lyft"
        ]
    },
    {
        "leetId": "25",
        "link": "reverse-nodes-in-k-group",
        "title": "Reverse Nodes in k-Group",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "50.9%",
        "questionDescription": "<p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p>\r\n\r\n<p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes in the end should remain as it is.</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p>\r\n\r\n<p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p>\r\n\r\n<p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Only constant extra memory is allowed.</li>\r\n\t<li>You may not alter the values in the list&#39;s nodes, only nodes itself may be changed.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf&nbsp;<em>k&nbsp;</em>\u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u5e76\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u94fe\u8868\u3002</p>\n\n<p><em>k&nbsp;</em>\u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002\u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f&nbsp;<em>k&nbsp;</em>\u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u5c06\u6700\u540e\u5269\u4f59\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002</p>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<p>\u7ed9\u5b9a\u8fd9\u4e2a\u94fe\u8868\uff1a<code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p>\n\n<p>\u5f53&nbsp;<em>k&nbsp;</em>= 2 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p>\n\n<p>\u5f53&nbsp;<em>k&nbsp;</em>= 3 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p>\n\n<p><strong>\u8bf4\u660e :</strong></p>\n\n<ul>\n\t<li>\u4f60\u7684\u7b97\u6cd5\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7684\u989d\u5916\u7a7a\u95f4\u3002</li>\n\t<li><strong>\u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c</strong>\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002</li>\n</ul>\n",
        "titleZh": "k\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "eBay",
            "Tencent",
            "VMware",
            "Paypal",
            "Mathworks",
            "Goo"
        ]
    },
    {
        "leetId": "26",
        "link": "remove-duplicates-from-sorted-array",
        "title": "Remove Duplicates from Sorted Array",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "43.8%",
        "questionDescription": "<p>Given a sorted array <em>nums</em>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that each element appear only <em>once</em> and return the new length.</p>\r\n\r\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\nGiven <em>nums</em> = <strong>[1,1,2]</strong>,\r\n\r\nYour function should return length = <strong><code>2</code></strong>, with the first two elements of <em><code>nums</code></em> being <strong><code>1</code></strong> and <strong><code>2</code></strong> respectively.\r\n\r\nIt doesn&#39;t matter what you leave beyond the returned length.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\nGiven <em>nums</em> = <strong>[0,0,1,1,1,2,2,3,3,4]</strong>,\r\n\r\nYour function should return length = <strong><code>5</code></strong>, with the first five elements of <em><code>nums</code></em> being modified to&nbsp;<strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>2</code></strong>, <strong><code>3</code></strong>, and&nbsp;<strong><code>4</code></strong> respectively.\r\n\r\nIt doesn&#39;t matter what values are set beyond&nbsp;the returned length.\r\n</pre>\r\n\r\n<p><strong>Clarification:</strong></p>\r\n\r\n<p>Confused why the returned value is an integer but your answer is an array?</p>\r\n\r\n<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>\r\n\r\n<p>Internally you can think of this:</p>\r\n\r\n<pre>\r\n// <strong>nums</strong> is passed in by reference. (i.e., without making a copy)\r\nint len = removeDuplicates(nums);\r\n\r\n// any modification to <strong>nums</strong> in your function would be known by the caller.\r\n// using the length returned by your function, it prints the first <strong>len</strong> elements.\r\nfor (int i = 0; i &lt; len; i++) {\r\n&nbsp; &nbsp; print(nums[i]);\r\n}</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728<strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a></strong>\u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002</p>\n\n<p>\u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a>\u4fee\u6539\u8f93\u5165\u6570\u7ec4</strong>\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\u7ed9\u5b9a\u6570\u7ec4 <em>nums</em> = <strong>[1,1,2]</strong>, \n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 <strong>2</strong>, \u5e76\u4e14\u539f\u6570\u7ec4 <em>nums </em>\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a <strong><code>1</code></strong>, <strong><code>2</code></strong>\u3002 \n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\u7ed9\u5b9a<em> nums </em>= <strong>[0,0,1,1,1,2,2,3,3,4]</strong>,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 <strong>5</strong>, \u5e76\u4e14\u539f\u6570\u7ec4 <em>nums </em>\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a <strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>2</code></strong>, <strong><code>3</code></strong>, <strong><code>4</code></strong>\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462?</p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5<strong>&ldquo;\u5f15\u7528&rdquo;</strong>\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b:</p>\n\n<pre>// <strong>nums</strong> \u662f\u4ee5&ldquo;\u5f15\u7528&rdquo;\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d\nint len = removeDuplicates(nums);\n\n// \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n// \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d<strong>\u8be5\u957f\u5ea6\u8303\u56f4\u5185</strong>\u7684\u6240\u6709\u5143\u7d20\u3002\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}\n</pre>\n",
        "titleZh": "\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Cisco",
            "NetEase",
            "Yandex"
        ]
    },
    {
        "leetId": "27",
        "link": "remove-element",
        "title": "Remove Element",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "54.4%",
        "questionDescription": "<p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> and return the new length.</p>\r\n\r\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\r\n\r\n<p>The order of elements can be changed. It doesn&#39;t matter what you leave beyond the new length.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\nGiven <em>nums</em> = <strong>[3,2,2,3]</strong>, <em>val</em> = <strong>3</strong>,\r\n\r\nYour function should return length = <strong>2</strong>, with the first two elements of <em>nums</em> being <strong>2</strong>.\r\n\r\nIt doesn&#39;t matter what you leave beyond the returned length.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\nGiven <em>nums</em> = <strong>[0,1,2,2,3,0,4,2]</strong>, <em>val</em> = <strong>2</strong>,\r\n\r\nYour function should return length = <strong><code>5</code></strong>, with the first five elements of <em><code>nums</code></em> containing&nbsp;<strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>3</code></strong>, <strong><code>0</code></strong>, and&nbsp;<strong>4</strong>.\r\n\r\nNote that the order of those five elements can be arbitrary.\r\n\r\nIt doesn&#39;t matter what values are set beyond&nbsp;the returned length.</pre>\r\n\r\n<p><strong>Clarification:</strong></p>\r\n\r\n<p>Confused why the returned value is an integer but your answer is an array?</p>\r\n\r\n<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>\r\n\r\n<p>Internally you can think of this:</p>\r\n\r\n<pre>\r\n// <strong>nums</strong> is passed in by reference. (i.e., without making a copy)\r\nint len = removeElement(nums, val);\r\n\r\n// any modification to <strong>nums</strong> in your function would be known by the caller.\r\n// using the length returned by your function, it prints the first <strong>len</strong> elements.\r\nfor (int i = 0; i &lt; len; i++) {\r\n&nbsp; &nbsp; print(nums[i]);\r\n}</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 <em>nums&nbsp;</em>\u548c\u4e00\u4e2a\u503c <em>val</em>\uff0c\u4f60\u9700\u8981<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a></strong>\u79fb\u9664\u6240\u6709\u6570\u503c\u7b49\u4e8e&nbsp;<em>val&nbsp;</em>\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002</p>\n\n<p>\u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a>\u4fee\u6539\u8f93\u5165\u6570\u7ec4</strong>\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002</p>\n\n<p>\u5143\u7d20\u7684\u987a\u5e8f\u53ef\u4ee5\u6539\u53d8\u3002\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\u7ed9\u5b9a <em>nums</em> = <strong>[3,2,2,3]</strong>, <em>val</em> = <strong>3</strong>,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 <strong>2</strong>, \u5e76\u4e14 <em>nums </em>\u4e2d\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u5747\u4e3a <strong>2</strong>\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\u7ed9\u5b9a <em>nums</em> = <strong>[0,1,2,2,3,0,4,2]</strong>, <em>val</em> = <strong>2</strong>,\n\n\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 <strong><code>5</code></strong>, \u5e76\u4e14 <em>nums </em>\u4e2d\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u4e3a <strong><code>0</code></strong>, <strong><code>1</code></strong>, <strong><code>3</code></strong>, <strong><code>0</code></strong>, <strong>4</strong>\u3002\n\n\u6ce8\u610f\u8fd9\u4e94\u4e2a\u5143\u7d20\u53ef\u4e3a\u4efb\u610f\u987a\u5e8f\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462?</p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5<strong>&ldquo;\u5f15\u7528&rdquo;</strong>\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b:</p>\n\n<pre>// <strong>nums</strong> \u662f\u4ee5&ldquo;\u5f15\u7528&rdquo;\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u4f5c\u4efb\u4f55\u62f7\u8d1d\nint len = removeElement(nums, val);\n\n// \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n// \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d<strong>\u8be5\u957f\u5ea6\u8303\u56f4\u5185</strong>\u7684\u6240\u6709\u5143\u7d20\u3002\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}\n</pre>\n",
        "titleZh": "\u79fb\u9664\u5143\u7d20",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Adobe"
        ]
    },
    {
        "leetId": "28",
        "link": "implement-strstr",
        "title": "Implement strStr()",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "38.0%",
        "questionDescription": "<p>Implement <a href=\"http://www.cplusplus.com/reference/cstring/strstr/\" target=\"_blank\">strStr()</a>.</p>\r\n\r\n<p>Return the index of the first occurrence of needle in haystack, or <strong>-1</strong> if needle is not part of haystack.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> haystack = &quot;hello&quot;, needle = &quot;ll&quot;\r\n<strong>Output:</strong> 2\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;\r\n<strong>Output:</strong> -1\r\n</pre>\r\n\r\n<p><strong>Clarification:</strong></p>\r\n\r\n<p>What should we return when <code>needle</code> is an empty string? This is a great question to ask during an interview.</p>\r\n\r\n<p>For the purpose of this problem, we will return 0 when <code>needle</code> is an empty string. This is consistent to C&#39;s&nbsp;<a href=\"http://www.cplusplus.com/reference/cstring/strstr/\" target=\"_blank\">strstr()</a> and Java&#39;s&nbsp;<a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)\" target=\"_blank\">indexOf()</a>.</p>\r\n",
        "questionDescriptionZh": "<p>\u5b9e\u73b0&nbsp;<a href=\"https://baike.baidu.com/item/strstr/811469\" target=\"_blank\">strStr()</a>&nbsp;\u51fd\u6570\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;haystack \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a needle \u5b57\u7b26\u4e32\uff0c\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e (\u4ece0\u5f00\u59cb)\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de&nbsp; <strong>-1</strong>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> haystack = &quot;hello&quot;, needle = &quot;ll&quot;\n<strong>\u8f93\u51fa:</strong> 2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;\n<strong>\u8f93\u51fa:</strong> -1\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u5f53&nbsp;<code>needle</code>&nbsp;\u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\uff0c\u6211\u4eec\u5e94\u5f53\u8fd4\u56de\u4ec0\u4e48\u503c\u5462\uff1f\u8fd9\u662f\u4e00\u4e2a\u5728\u9762\u8bd5\u4e2d\u5f88\u597d\u7684\u95ee\u9898\u3002</p>\n\n<p>\u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u5f53&nbsp;<code>needle</code>&nbsp;\u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\u6211\u4eec\u5e94\u5f53\u8fd4\u56de 0 \u3002\u8fd9\u4e0eC\u8bed\u8a00\u7684&nbsp;<a href=\"https://baike.baidu.com/item/strstr/811469\" target=\"_blank\">strstr()</a>&nbsp;\u4ee5\u53ca Java\u7684&nbsp;<a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)\" target=\"_blank\">indexOf()</a>&nbsp;\u5b9a\u4e49\u76f8\u7b26\u3002</p>\n",
        "titleZh": "\u5b9e\u73b0strStr()",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Tencent",
            "Salesforce",
            "Zillow",
            "Pocket Gems"
        ]
    },
    {
        "leetId": "29",
        "link": "divide-two-integers",
        "title": "Divide Two Integers",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "17.9%",
        "questionDescription": "<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers without using multiplication, division and mod operator.</p>\r\n\r\n<p>Return the quotient after dividing <code>dividend</code> by <code>divisor</code>.</p>\r\n\r\n<p>The integer division should truncate toward zero.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> dividend = 10, divisor = 3\r\n<strong>Output:</strong> 3</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> dividend = 7, divisor = -3\r\n<strong>Output:</strong> -2</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Both dividend and divisor&nbsp;will be&nbsp;32-bit&nbsp;signed integers.</li>\r\n\t<li>The divisor will never be 0.</li>\r\n\t<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>, &nbsp;2<sup>31</sup> &minus; 1]. For the purpose of this problem, assume that your function returns 2<sup>31</sup> &minus; 1 when the division result&nbsp;overflows.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u88ab\u9664\u6570&nbsp;<code>dividend</code>&nbsp;\u548c\u9664\u6570&nbsp;<code>divisor</code>\u3002\u5c06\u4e24\u6570\u76f8\u9664\uff0c\u8981\u6c42\u4e0d\u4f7f\u7528\u4e58\u6cd5\u3001\u9664\u6cd5\u548c mod \u8fd0\u7b97\u7b26\u3002</p>\n\n<p>\u8fd4\u56de\u88ab\u9664\u6570&nbsp;<code>dividend</code>&nbsp;\u9664\u4ee5\u9664\u6570&nbsp;<code>divisor</code>&nbsp;\u5f97\u5230\u7684\u5546\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> dividend = 10, divisor = 3\n<strong>\u8f93\u51fa:</strong> 3</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> dividend = 7, divisor = -3\n<strong>\u8f93\u51fa:</strong> -2</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u88ab\u9664\u6570\u548c\u9664\u6570\u5747\u4e3a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002</li>\n\t<li>\u9664\u6570\u4e0d\u4e3a&nbsp;0\u3002</li>\n\t<li>\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]\u3002\u672c\u9898\u4e2d\uff0c\u5982\u679c\u9664\u6cd5\u7ed3\u679c\u6ea2\u51fa\uff0c\u5219\u8fd4\u56de 2<sup>31&nbsp;</sup>&minus; 1\u3002</li>\n</ul>\n",
        "titleZh": "\u4e24\u6570\u76f8\u9664",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Oracle",
            "Riot Games"
        ]
    },
    {
        "leetId": "30",
        "link": "substring-with-concatenation-of-all-words",
        "title": "Substring with Concatenation of All Words",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "25.4%",
        "questionDescription": "<p>You are given a string, <strong>s</strong>, and a list of words, <strong>words</strong>, that are all of the same length. Find all starting indices of substring(s) in <strong>s</strong> that is a concatenation of each word in <strong>words</strong> exactly once and without any intervening characters.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n  s =</strong> &quot;barfoothefoobarman&quot;,\r\n<strong>  words = </strong>[&quot;foo&quot;,&quot;bar&quot;]\r\n<strong>Output:</strong> <code>[0,9]</code>\r\n<strong>Explanation:</strong> Substrings starting at index 0 and 9 are &quot;barfoor&quot; and &quot;foobar&quot; respectively.\r\nThe output order does not matter, returning [9,0] is fine too.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n  s =</strong> &quot;wordgoodgoodgoodbestword&quot;,\r\n<strong>  words = </strong>[&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]\r\n<strong>Output:</strong> <code>[]</code>\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<strong>s&nbsp;</strong>\u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd&nbsp;<strong>words\u3002</strong>\u627e\u51fa <strong>s </strong>\u4e2d\u6070\u597d\u53ef\u4ee5\u7531&nbsp;<strong>words </strong>\u4e2d\u6240\u6709\u5355\u8bcd\u4e32\u8054\u5f62\u6210\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002</p>\n\n<p>\u6ce8\u610f\u5b50\u4e32\u8981\u4e0e&nbsp;<strong>words </strong>\u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651&nbsp;<strong>words&nbsp;</strong>\u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n  s =</strong> &quot;barfoothefoobarman&quot;,\n<strong>  words = </strong>[&quot;foo&quot;,&quot;bar&quot;]\n<strong>\u8f93\u51fa\uff1a</strong><code>[0,9]</code>\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4ece\u7d22\u5f15 0 \u548c 9 \u5f00\u59cb\u7684\u5b50\u4e32\u5206\u522b\u662f &quot;barfoor&quot; \u548c &quot;foobar&quot; \u3002\n\u8f93\u51fa\u7684\u987a\u5e8f\u4e0d\u91cd\u8981, [9,0] \u4e5f\u662f\u6709\u6548\u7b54\u6848\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n  s =</strong> &quot;wordgoodgoodgoodbestword&quot;,\n<strong>  words = </strong>[&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]\n<code><span style=\"\"><strong>\u8f93\u51fa\uff1a</strong></span>[]</code>\n</pre>\n",
        "titleZh": "\u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Adobe",
            "Apple",
            "Tencent"
        ]
    },
    {
        "leetId": "31",
        "link": "next-permutation",
        "title": "Next Permutation",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "30.5%",
        "questionDescription": "<p>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>\r\n\r\n<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>\r\n\r\n<p>The replacement must be <strong><a href=\"http://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> and use only constant&nbsp;extra memory.</p>\r\n\r\n<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p>\r\n\r\n<p><code>1,2,3</code> &rarr; <code>1,3,2</code><br />\r\n<code>3,2,1</code> &rarr; <code>1,2,3</code><br />\r\n<code>1,1,5</code> &rarr; <code>1,5,1</code></p>\r\n",
        "questionDescriptionZh": "<p>\u5b9e\u73b0\u83b7\u53d6\u4e0b\u4e00\u4e2a\u6392\u5217\u7684\u51fd\u6570\uff0c\u7b97\u6cd5\u9700\u8981\u5c06\u7ed9\u5b9a\u6570\u5b57\u5e8f\u5217\u91cd\u65b0\u6392\u5217\u6210\u5b57\u5178\u5e8f\u4e2d\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002</p>\n\n<p>\u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u5219\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5217\u6210\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\u5347\u5e8f\u6392\u5217\uff09\u3002</p>\n\n<p>\u5fc5\u987b<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a></strong>\u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002</p>\n\n<p>\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4f8b\u5b50\uff0c\u8f93\u5165\u4f4d\u4e8e\u5de6\u4fa7\u5217\uff0c\u5176\u76f8\u5e94\u8f93\u51fa\u4f4d\u4e8e\u53f3\u4fa7\u5217\u3002<br>\n<code>1,2,3</code> &rarr; <code>1,3,2</code><br>\n<code>3,2,1</code> &rarr; <code>1,2,3</code><br>\n<code>1,1,5</code> &rarr; <code>1,5,1</code></p>\n",
        "titleZh": "\u4e0b\u4e00\u4e2a\u6392\u5217",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Samsung",
            "Quora",
            "Rubrik",
            "Houzz",
            "Sumologic"
        ]
    },
    {
        "leetId": "32",
        "link": "longest-valid-parentheses",
        "title": "Longest Valid Parentheses",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "26.4%",
        "questionDescription": "<p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;(()&quot;\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> The longest valid parentheses substring is <code>&quot;()&quot;</code>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;<code>)()())</code>&quot;\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> The longest valid parentheses substring is <code>&quot;()()&quot;</code>\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b <code>&#39;(&#39;</code>&nbsp;\u548c <code>&#39;)&#39;</code>&nbsp;\u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u7684\u5305\u542b\u6709\u6548\u62ec\u53f7\u7684\u5b50\u4e32\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;(()&quot;\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a <code>&quot;()&quot;</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;<code>)()())</code>&quot;\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u6700\u957f\u6709\u6548\u62ec\u53f7\u5b50\u4e32\u4e3a <code>&quot;()()&quot;</code>\n</pre>\n",
        "titleZh": "\u6700\u957f\u6709\u6548\u62ec\u53f7",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Adobe",
            "Alibaba",
            "Salesforce",
            "Expedia",
            "Samsung",
            "Coupang"
        ]
    },
    {
        "leetId": "33",
        "link": "search-in-rotated-sorted-array",
        "title": "Search in Rotated Sorted Array",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "36.3%",
        "questionDescription": "<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\r\n\r\n<p>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p>\r\n\r\n<p>You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.</p>\r\n\r\n<p>You may assume no duplicate exists in the array.</p>\r\n\r\n<p>Your algorithm&#39;s runtime complexity must be in the order of&nbsp;<em>O</em>(log&nbsp;<em>n</em>).</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 0\r\n<strong>Output:</strong> 4\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 3\r\n<strong>Output:</strong> -1</pre>\r\n",
        "questionDescriptionZh": "<p>\u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002</p>\n\n<p>( \u4f8b\u5982\uff0c\u6570\u7ec4&nbsp;<code>[0,1,2,4,5,6,7]</code>&nbsp;\u53ef\u80fd\u53d8\u4e3a&nbsp;<code>[4,5,6,7,0,1,2]</code>&nbsp;)\u3002</p>\n\n<p>\u641c\u7d22\u4e00\u4e2a\u7ed9\u5b9a\u7684\u76ee\u6807\u503c\uff0c\u5982\u679c\u6570\u7ec4\u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c\uff0c\u5219\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56de&nbsp;<code>-1</code>&nbsp;\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u3002</p>\n\n<p>\u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f&nbsp;<em>O</em>(log&nbsp;<em>n</em>) \u7ea7\u522b\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 0\n<strong>\u8f93\u51fa:</strong> 4\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 3\n<strong>\u8f93\u51fa:</strong> -1</pre>\n",
        "titleZh": "\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Snapchat",
            "Goldman Sachs",
            "Yelp",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Expedia",
            "Paypal",
            "Cisco",
            "Two Sigma",
            "Nutanix",
            "Mathworks",
            "Palantir Technologies",
            "Nvidia",
            "Palantir",
            "Visa",
            "Samsung",
            "NetEase",
            "Aetion",
            "IXL",
            "Affirm",
            "TripAdvisor"
        ]
    },
    {
        "leetId": "34",
        "link": "find-first-and-last-position-of-element-in-sorted-array",
        "title": "Find First and Last Position of Element in Sorted Array",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "35.9%",
        "questionDescription": "<p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p>\r\n\r\n<p>Your algorithm&#39;s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p>\r\n\r\n<p>If the target is not found in the array, return <code>[-1, -1]</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [<code>5,7,7,8,8,10]</code>, target = 8\r\n<strong>Output:</strong> [3,4]</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [<code>5,7,7,8,8,10]</code>, target = 6\r\n<strong>Output:</strong> [-1,-1]</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 <code>nums</code>\uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c <code>target</code>\u3002\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002</p>\n\n<p>\u4f60\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662f&nbsp;<em>O</em>(log <em>n</em>) \u7ea7\u522b\u3002</p>\n\n<p>\u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c\uff0c\u8fd4\u56de&nbsp;<code>[-1, -1]</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [<code>5,7,7,8,8,10]</code>, target = 8\n<strong>\u8f93\u51fa:</strong> [3,4]</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [<code>5,7,7,8,8,10]</code>, target = 6\n<strong>\u8f93\u51fa:</strong> [-1,-1]</pre>\n",
        "titleZh": "\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "eBay",
            "Qualtrics"
        ]
    },
    {
        "leetId": "35",
        "link": "search-insert-position",
        "title": "Search Insert Position",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "43.3%",
        "questionDescription": "<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\r\n\r\n<p>You may assume no duplicates in the array.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,3,5,6], 5\r\n<strong>Output:</strong> 2\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,3,5,6], 2\r\n<strong>Output:</strong> 1\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,3,5,6], 7\r\n<strong>Output:</strong> 4\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,3,5,6], 0\r\n<strong>Output:</strong> 0\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002\u5982\u679c\u76ee\u6807\u503c\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5b83\u5c06\u4f1a\u88ab\u6309\u987a\u5e8f\u63d2\u5165\u7684\u4f4d\u7f6e\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u65e0\u91cd\u590d\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,3,5,6], 5\n<strong>\u8f93\u51fa:</strong> 2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,3,5,6], 2\n<strong>\u8f93\u51fa:</strong> 1\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,3,5,6], 7\n<strong>\u8f93\u51fa:</strong> 4\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,3,5,6], 0\n<strong>\u8f93\u51fa:</strong> 0\n</pre>\n",
        "titleZh": "\u641c\u7d22\u63d2\u5165\u4f4d\u7f6e",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Yahoo",
            "SAP",
            "Capital One",
            "Tableau"
        ]
    },
    {
        "leetId": "36",
        "link": "valid-sudoku",
        "title": "Valid Sudoku",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "52.3%",
        "questionDescription": "<p>Determine if a&nbsp;9x9 Sudoku board&nbsp;is valid.&nbsp;Only the filled cells need to be validated&nbsp;<strong>according to the following rules</strong>:</p>\r\n\r\n<ol>\r\n\t<li>Each row&nbsp;must contain the&nbsp;digits&nbsp;<code>1-9</code> without repetition.</li>\r\n\t<li>Each column must contain the digits&nbsp;<code>1-9</code>&nbsp;without repetition.</li>\r\n\t<li>Each of the 9 <code>3x3</code> sub-boxes of the grid must contain the digits&nbsp;<code>1-9</code>&nbsp;without repetition.</li>\r\n</ol>\r\n\r\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height:250px; width:250px\" /><br />\r\n<small>A partially filled sudoku which is valid.</small></p>\r\n\r\n<p>The Sudoku board could be partially filled, where empty cells are filled with the character <code>&#39;.&#39;</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n[\r\n  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\r\n  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\r\n  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],\r\n  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],\r\n  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],\r\n  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],\r\n  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],\r\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],\r\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]\r\n]\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n[\r\n&nbsp; [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\r\n&nbsp; [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\r\n&nbsp; [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],\r\n&nbsp; [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],\r\n&nbsp; [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],\r\n&nbsp; [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],\r\n&nbsp; [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],\r\n&nbsp; [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],\r\n&nbsp; [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]\r\n]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> Same as Example 1, except with the <strong>5</strong> in the top left corner being \r\n    modified to <strong>8</strong>. Since there are two 8&#39;s in the top left 3x3 sub-box, it is invalid.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li>\r\n\t<li>Only the filled cells need to be validated according to the mentioned&nbsp;rules.</li>\r\n\t<li>The given board&nbsp;contain only digits <code>1-9</code> and the character <code>&#39;.&#39;</code>.</li>\r\n\t<li>The given board size is always <code>9x9</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5224\u65ad\u4e00\u4e2a&nbsp;9x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981<strong>\u6839\u636e\u4ee5\u4e0b\u89c4\u5219</strong>\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002</p>\n\n<ol>\n\t<li>\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li>\n\t<li>\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li>\n\t<li>\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684&nbsp;<code>3x3</code>&nbsp;\u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li>\n</ol>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height: 250px; width: 250px;\"></p>\n\n<p><small>\u4e0a\u56fe\u662f\u4e00\u4e2a\u90e8\u5206\u586b\u5145\u7684\u6709\u6548\u7684\u6570\u72ec\u3002</small></p>\n\n<p>\u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528&nbsp;<code>&#39;.&#39;</code>&nbsp;\u8868\u793a\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[\n  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],\n  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],\n  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],\n  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],\n  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]\n]\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[\n&nbsp; [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n&nbsp; [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\n&nbsp; [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],\n&nbsp; [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],\n&nbsp; [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],\n&nbsp; [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],\n&nbsp; [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],\n&nbsp; [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],\n&nbsp; [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]\n]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u9664\u4e86\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4ece<strong> 5</strong> \u6539\u4e3a <strong>8 </strong>\u4ee5\u5916\uff0c\u7a7a\u683c\u5185\u5176\u4ed6\u6570\u5b57\u5747\u4e0e \u793a\u4f8b1 \u76f8\u540c\u3002\n     \u4f46\u7531\u4e8e\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 3x3 \u5bab\u5185\u6709\u4e24\u4e2a 8 \u5b58\u5728, \u56e0\u6b64\u8fd9\u4e2a\u6570\u72ec\u662f\u65e0\u6548\u7684\u3002</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u4e00\u4e2a\u6709\u6548\u7684\u6570\u72ec\uff08\u90e8\u5206\u5df2\u88ab\u586b\u5145\uff09\u4e0d\u4e00\u5b9a\u662f\u53ef\u89e3\u7684\u3002</li>\n\t<li>\u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002</li>\n\t<li>\u7ed9\u5b9a\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u548c\u5b57\u7b26&nbsp;<code>&#39;.&#39;</code>&nbsp;\u3002</li>\n\t<li>\u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f&nbsp;<code>9x9</code>&nbsp;\u5f62\u5f0f\u7684\u3002</li>\n</ul>\n",
        "titleZh": "\u6709\u6548\u7684\u6570\u72ec",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "Snapchat",
            "Pinterest",
            "Palantir"
        ]
    },
    {
        "leetId": "37",
        "link": "sudoku-solver",
        "title": "Sudoku Solver",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "52.1%",
        "questionDescription": "<p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>\r\n\r\n<p>A&nbsp;sudoku solution must satisfy <strong>all of&nbsp;the following rules</strong>:</p>\r\n\r\n<ol>\r\n\t<li>Each of the digits&nbsp;<code>1-9</code> must occur exactly&nbsp;once in each row.</li>\r\n\t<li>Each of the digits&nbsp;<code>1-9</code>&nbsp;must occur&nbsp;exactly once in each column.</li>\r\n\t<li>Each of the the digits&nbsp;<code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li>\r\n</ol>\r\n\r\n<p>Empty cells are indicated by the character <code>&#39;.&#39;</code>.</p>\r\n\r\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\" style=\"height:250px; width:250px\" /><br />\r\n<small>A sudoku puzzle...</small></p>\r\n\r\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\" style=\"height:250px; width:250px\" /><br />\r\n<small>...and its solution numbers marked in red.</small></p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The given board&nbsp;contain only digits <code>1-9</code> and the character <code>&#39;.&#39;</code>.</li>\r\n\t<li>You may assume that the given Sudoku puzzle will have a single unique solution.</li>\r\n\t<li>The given board size is always <code>9x9</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u901a\u8fc7\u5df2\u586b\u5145\u7684\u7a7a\u683c\u6765\u89e3\u51b3\u6570\u72ec\u95ee\u9898\u3002</p>\n\n<p>\u4e00\u4e2a\u6570\u72ec\u7684\u89e3\u6cd5\u9700<strong>\u9075\u5faa\u5982\u4e0b\u89c4\u5219</strong>\uff1a</p>\n\n<ol>\n\t<li>\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li>\n\t<li>\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li>\n\t<li>\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684&nbsp;<code>3x3</code>&nbsp;\u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li>\n</ol>\n\n<p>\u7a7a\u767d\u683c\u7528&nbsp;<code>&#39;.&#39;</code>&nbsp;\u8868\u793a\u3002</p>\n\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\"></p>\n\n<p><small>\u4e00\u4e2a\u6570\u72ec\u3002</small></p>\n\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\"></p>\n\n<p><small>\u7b54\u6848\u88ab\u6807\u6210\u7ea2\u8272\u3002</small></p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>\u7ed9\u5b9a\u7684\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57&nbsp;<code>1-9</code>&nbsp;\u548c\u5b57\u7b26&nbsp;<code>&#39;.&#39;</code>&nbsp;\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684\u6570\u72ec\u53ea\u6709\u552f\u4e00\u89e3\u3002</li>\n\t<li>\u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f&nbsp;<code>9x9</code>&nbsp;\u5f62\u5f0f\u7684\u3002</li>\n</ul>\n",
        "titleZh": "\u89e3\u6570\u72ec",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Adobe",
            "Yahoo",
            "Airbnb",
            "Snapchat",
            "VMware",
            "Expedia",
            "Riot Games",
            "Arista Networks"
        ]
    },
    {
        "leetId": "38",
        "link": "count-and-say",
        "title": "Count and Say",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "49.2%",
        "questionDescription": "<p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p>\r\n\r\n<pre>\r\n1.     1\r\n2.     11\r\n3.     21\r\n4.     1211\r\n5.     111221\r\n</pre>\r\n\r\n<p><code>1</code> is read off as <code>&quot;one 1&quot;</code> or <code>11</code>.<br />\r\n<code>11</code> is read off as <code>&quot;two 1s&quot;</code> or <code>21</code>.<br />\r\n<code>21</code> is read off as <code>&quot;one 2</code>, then <code>one 1&quot;</code> or <code>1211</code>.</p>\r\n\r\n<p>Given an integer <i>n</i>&nbsp;where 1 &le; <em>n</em> &le; 30, generate the <i>n</i><sup>th</sup> term of the count-and-say sequence.</p>\r\n\r\n<p>Note: Each term of the sequence of integers will be represented as a string.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 1\r\n<b>Output:</b> &quot;1&quot;\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 4\r\n<b>Output:</b> &quot;1211&quot;</pre>\r\n",
        "questionDescriptionZh": "<p>\u62a5\u6570\u5e8f\u5217\u662f\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u6309\u7167\u5176\u4e2d\u7684\u6574\u6570\u7684\u987a\u5e8f\u8fdb\u884c\u62a5\u6570\uff0c\u5f97\u5230\u4e0b\u4e00\u4e2a\u6570\u3002\u5176\u524d\u4e94\u9879\u5982\u4e0b\uff1a</p>\n\n<pre>1.     1\n2.     11\n3.     21\n4.     1211\n5.     111221\n</pre>\n\n<p><code>1</code>&nbsp;\u88ab\u8bfb\u4f5c&nbsp;&nbsp;<code>&quot;one 1&quot;</code>&nbsp;&nbsp;(<code>&quot;\u4e00\u4e2a\u4e00&quot;</code>) , \u5373&nbsp;<code>11</code>\u3002<br>\n<code>11</code> \u88ab\u8bfb\u4f5c&nbsp;<code>&quot;two 1s&quot;</code>&nbsp;(<code>&quot;\u4e24\u4e2a\u4e00&quot;</code>\uff09, \u5373&nbsp;<code>21</code>\u3002<br>\n<code>21</code> \u88ab\u8bfb\u4f5c&nbsp;<code>&quot;one 2&quot;</code>, &nbsp;&quot;<code>one 1&quot;</code>&nbsp;\uff08<code>&quot;\u4e00\u4e2a\u4e8c&quot;</code>&nbsp;,&nbsp;&nbsp;<code>&quot;\u4e00\u4e2a\u4e00&quot;</code>)&nbsp;, \u5373&nbsp;<code>1211</code>\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 <em>n</em>\uff081 &le;&nbsp;<em>n</em>&nbsp;&le; 30\uff09\uff0c\u8f93\u51fa\u62a5\u6570\u5e8f\u5217\u7684\u7b2c <em>n</em> \u9879\u3002</p>\n\n<p>\u6ce8\u610f\uff1a\u6574\u6570\u987a\u5e8f\u5c06\u8868\u793a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1\n<strong>\u8f93\u51fa:</strong> &quot;1&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 4\n<strong>\u8f93\u51fa:</strong> &quot;1211&quot;\n</pre>\n",
        "titleZh": "\u62a5\u6570",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Airbnb",
            "eBay",
            "VMware",
            "Salesforce",
            "Intuit",
            "Epic Systems"
        ]
    },
    {
        "leetId": "39",
        "link": "combination-sum",
        "title": "Combination Sum",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "63.8%",
        "questionDescription": "<p>Given a <strong>set</strong> of candidate numbers (<code>candidates</code>) <strong>(without duplicates)</strong> and a target number (<code>target</code>), find all unique combinations in <code>candidates</code>&nbsp;where the candidate numbers sums to <code>target</code>.</p>\r\n\r\n<p>The <strong>same</strong> repeated number may be chosen from <code>candidates</code>&nbsp;unlimited number of times.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All numbers (including <code>target</code>) will be positive integers.</li>\r\n\t<li>The solution set must not contain duplicate combinations.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> candidates = <code>[2,3,6,7], </code>target = <code>7</code>,\r\n<strong>A solution set is:</strong>\r\n[\r\n  [7],\r\n  [2,2,3]\r\n]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> candidates = [2,3,5]<code>, </code>target = 8,\r\n<strong>A solution set is:</strong>\r\n[\r\n&nbsp; [2,2,2,2],\r\n&nbsp; [2,3,3],\r\n&nbsp; [3,5]\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u65e0\u91cd\u590d\u5143\u7d20</strong>\u7684\u6570\u7ec4&nbsp;<code>candidates</code>&nbsp;\u548c\u4e00\u4e2a\u76ee\u6807\u6570&nbsp;<code>target</code>&nbsp;\uff0c\u627e\u51fa&nbsp;<code>candidates</code>&nbsp;\u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a&nbsp;<code>target</code>&nbsp;\u7684\u7ec4\u5408\u3002</p>\n\n<p><code>candidates</code>&nbsp;\u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec&nbsp;<code>target</code>\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002</li>\n\t<li>\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002&nbsp;</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> candidates = <code>[2,3,6,7], </code>target = <code>7</code>,\n<strong>\u6240\u6c42\u89e3\u96c6\u4e3a:</strong>\n[\n  [7],\n  [2,2,3]\n]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> candidates = [2,3,5]<code>, </code>target = 8,\n<strong>\u6240\u6c42\u89e3\u96c6\u4e3a:</strong>\n[\n&nbsp; [2,2,2,2],\n&nbsp; [2,3,3],\n&nbsp; [3,5]\n]</pre>\n",
        "titleZh": "\u7ec4\u5408\u603b\u548c",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Airbnb",
            "Baidu",
            "Snapchat",
            "Yelp",
            "VMware",
            "Quora",
            "IXL"
        ]
    },
    {
        "leetId": "40",
        "link": "combination-sum-ii",
        "title": "Combination Sum II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "54.6%",
        "questionDescription": "<p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code>&nbsp;where the candidate numbers sums to <code>target</code>.</p>\r\n\r\n<p>Each number in <code>candidates</code>&nbsp;may only be used <strong>once</strong> in the combination.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All numbers (including <code>target</code>) will be positive integers.</li>\r\n\t<li>The solution set must not contain duplicate combinations.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> candidates =&nbsp;<code>[10,1,2,7,6,1,5]</code>, target =&nbsp;<code>8</code>,\r\n<strong>A solution set is:</strong>\r\n[\r\n  [1, 7],\r\n  [1, 2, 5],\r\n  [2, 6],\r\n  [1, 1, 6]\r\n]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> candidates =&nbsp;[2,5,2,1,2], target =&nbsp;5,\r\n<strong>A solution set is:</strong>\r\n[\r\n&nbsp; [1,2,2],\r\n&nbsp; [5]\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4&nbsp;<code>candidates</code>&nbsp;\u548c\u4e00\u4e2a\u76ee\u6807\u6570&nbsp;<code>target</code>&nbsp;\uff0c\u627e\u51fa&nbsp;<code>candidates</code>&nbsp;\u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a&nbsp;<code>target</code>&nbsp;\u7684\u7ec4\u5408\u3002</p>\n\n<p><code>candidates</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u6570\u5b57\uff08\u5305\u62ec\u76ee\u6807\u6570\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002</li>\n\t<li>\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002&nbsp;</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> candidates =&nbsp;<code>[10,1,2,7,6,1,5]</code>, target =&nbsp;<code>8</code>,\n<strong>\u6240\u6c42\u89e3\u96c6\u4e3a:</strong>\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> candidates =&nbsp;[2,5,2,1,2], target =&nbsp;5,\n<strong>\u6240\u6c42\u89e3\u96c6\u4e3a:</strong>\n[\n&nbsp; [1,2,2],\n&nbsp; [5]\n]</pre>\n",
        "titleZh": "\u7ec4\u5408\u603b\u548c II",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Amazon",
            "Microsoft",
            "Uber",
            "LinkedIn",
            "Snapchat"
        ]
    },
    {
        "leetId": "41",
        "link": "first-missing-positive",
        "title": "First Missing Positive",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "35.3%",
        "questionDescription": "<p>Given an unsorted integer array, find the smallest missing&nbsp;positive integer.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\nInput: [1,2,0]\r\nOutput: 3\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\nInput: [3,4,-1,1]\r\nOutput: 2\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\nInput: [7,8,9,11,12]\r\nOutput: 1\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Your algorithm should run in <em>O</em>(<em>n</em>) time and uses constant extra space.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u51fa\u5176\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u6700\u5c0f\u7684\u6b63\u6574\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\u8f93\u5165: [1,2,0]\n\u8f93\u51fa: 3\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\u8f93\u5165: [3,4,-1,1]\n\u8f93\u51fa: 2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre>\u8f93\u5165: [7,8,9,11,12]\n\u8f93\u51fa: 1\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u4f60\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3aO(<em>n</em>)\uff0c\u5e76\u4e14\u53ea\u80fd\u4f7f\u7528\u5e38\u6570\u7ea7\u522b\u7684\u7a7a\u95f4\u3002</p>\n",
        "titleZh": "\u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "VMware",
            "Expedia",
            "Pocket Gems",
            "Databricks"
        ]
    },
    {
        "leetId": "42",
        "link": "trapping-rain-water",
        "title": "Trapping Rain Water",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "43.3%",
        "questionDescription": "<p>Given <em>n</em> non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png\" style=\"width: 412px; height: 161px;\" /><br />\r\n<small>The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. <strong>Thanks Marcos</strong> for contributing this image!</small></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [0,1,0,2,1,0,1,3,2,1,2,1]\r\n<strong>Output:</strong> 6</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a&nbsp;<em>n</em> \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u5bbd\u5ea6\u4e3a 1 \u7684\u67f1\u5b50\u7684\u9ad8\u5ea6\u56fe\uff0c\u8ba1\u7b97\u6309\u6b64\u6392\u5217\u7684\u67f1\u5b50\uff0c\u4e0b\u96e8\u4e4b\u540e\u80fd\u63a5\u591a\u5c11\u96e8\u6c34\u3002</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png\" style=\"height: 161px; width: 412px;\"></p>\n\n<p><small>\u4e0a\u9762\u662f\u7531\u6570\u7ec4 [0,1,0,2,1,0,1,3,2,1,2,1] \u8868\u793a\u7684\u9ad8\u5ea6\u56fe\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u63a5 6 \u4e2a\u5355\u4f4d\u7684\u96e8\u6c34\uff08\u84dd\u8272\u90e8\u5206\u8868\u793a\u96e8\u6c34\uff09\u3002&nbsp;<strong>\u611f\u8c22 Marcos</strong> \u8d21\u732e\u6b64\u56fe\u3002</small></p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [0,1,0,2,1,0,1,3,2,1,2,1]\n<strong>\u8f93\u51fa:</strong> 6</pre>\n",
        "titleZh": "\u63a5\u96e8\u6c34",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Snapchat",
            "Twitter",
            "Goldman Sachs",
            "Oracle",
            "eBay",
            "Tencent",
            "Salesforce",
            "Lyft",
            "Zenefits",
            "Intuit",
            "Palantir Technologies",
            "Nvidia",
            "Huawei",
            "Qualtrics",
            "Intel",
            "Wish",
            "Grab",
            "Dataminr"
        ]
    },
    {
        "leetId": "43",
        "link": "multiply-strings",
        "title": "Multiply Strings",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "38.2%",
        "questionDescription": "<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> num1 = &quot;2&quot;, num2 = &quot;3&quot;\r\n<strong>Output:</strong> &quot;6&quot;</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> num1 = &quot;123&quot;, num2 = &quot;456&quot;\r\n<strong>Output:</strong> &quot;56088&quot;\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The length of both <code>num1</code> and <code>num2</code> is &lt; 110.</li>\r\n\t<li>Both <code>num1</code> and <code>num2</code> contain&nbsp;only digits <code>0-9</code>.</li>\r\n\t<li>Both <code>num1</code> and <code>num2</code>&nbsp;do not contain any leading zero, except the number 0 itself.</li>\r\n\t<li>You <strong>must not use any built-in BigInteger library</strong> or <strong>convert the inputs to integer</strong> directly.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570&nbsp;<code>num1</code>&nbsp;\u548c&nbsp;<code>num2</code>\uff0c\u8fd4\u56de&nbsp;<code>num1</code>&nbsp;\u548c&nbsp;<code>num2</code>&nbsp;\u7684\u4e58\u79ef\uff0c\u5b83\u4eec\u7684\u4e58\u79ef\u4e5f\u8868\u793a\u4e3a\u5b57\u7b26\u4e32\u5f62\u5f0f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> num1 = &quot;2&quot;, num2 = &quot;3&quot;\n<strong>\u8f93\u51fa:</strong> &quot;6&quot;</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> num1 = &quot;123&quot;, num2 = &quot;456&quot;\n<strong>\u8f93\u51fa:</strong> &quot;56088&quot;</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ol>\n\t<li><code>num1</code>&nbsp;\u548c&nbsp;<code>num2</code>&nbsp;\u7684\u957f\u5ea6\u5c0f\u4e8e110\u3002</li>\n\t<li><code>num1</code> \u548c&nbsp;<code>num2</code> \u53ea\u5305\u542b\u6570\u5b57&nbsp;<code>0-9</code>\u3002</li>\n\t<li><code>num1</code> \u548c&nbsp;<code>num2</code>&nbsp;\u5747\u4e0d\u4ee5\u96f6\u5f00\u5934\uff0c\u9664\u975e\u662f\u6570\u5b57 0 \u672c\u8eab\u3002</li>\n\t<li><strong>\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u6807\u51c6\u5e93\u7684\u5927\u6570\u7c7b\u578b\uff08\u6bd4\u5982 BigInteger\uff09</strong>\u6216<strong>\u76f4\u63a5\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u6574\u6570\u6765\u5904\u7406</strong>\u3002</li>\n</ol>\n",
        "titleZh": "\u5b57\u7b26\u4e32\u76f8\u4e58",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Airbnb",
            "Twitter",
            "Oracle",
            "Tencent",
            "Walmart Labs",
            "Expedia",
            "Zillow",
            "Mathworks",
            "Huawei",
            "Houzz",
            "Redfin"
        ]
    },
    {
        "leetId": "44",
        "link": "wildcard-matching",
        "title": "Wildcard Matching",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "21.8%",
        "questionDescription": "<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>&#39;?&#39;</code> and <code>&#39;*&#39;</code>.</p>\r\n\r\n<pre>\r\n&#39;?&#39; Matches any single character.\r\n&#39;*&#39; Matches any sequence of characters (including the empty sequence).\r\n</pre>\r\n\r\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>s</code>&nbsp;could be empty and contains only lowercase letters <code>a-z</code>.</li>\r\n\t<li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like <code><font face=\"monospace\">?</font></code>&nbsp;or&nbsp;<code>*</code>.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;aa&quot;\r\np = &quot;a&quot;\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;aa&quot;\r\np = &quot;*&quot;\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; matches any sequence.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;cb&quot;\r\np = &quot;?a&quot;\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong>&nbsp;&#39;?&#39; matches &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match &#39;b&#39;.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;adceb&quot;\r\np = &quot;*a*b&quot;\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong>&nbsp;The first &#39;*&#39; matches the empty sequence, while the second &#39;*&#39; matches the substring &quot;dce&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\ns = &quot;acdcb&quot;\r\np = &quot;a*c?b&quot;\r\n<strong>Output:</strong> false\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;(<code>s</code>) \u548c\u4e00\u4e2a\u5b57\u7b26\u6a21\u5f0f&nbsp;(<code>p</code>) \uff0c\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301&nbsp;<code>&#39;?&#39;</code>&nbsp;\u548c&nbsp;<code>&#39;*&#39;</code>&nbsp;\u7684\u901a\u914d\u7b26\u5339\u914d\u3002</p>\n\n<pre>&#39;?&#39; \u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u5355\u4e2a\u5b57\u7b26\u3002\n&#39;*&#39; \u53ef\u4ee5\u5339\u914d\u4efb\u610f\u5b57\u7b26\u4e32\uff08\u5305\u62ec\u7a7a\u5b57\u7b26\u4e32\uff09\u3002\n</pre>\n\n<p>\u4e24\u4e2a\u5b57\u7b26\u4e32<strong>\u5b8c\u5168\u5339\u914d</strong>\u624d\u7b97\u5339\u914d\u6210\u529f\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>s</code>&nbsp;\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece&nbsp;<code>a-z</code>&nbsp;\u7684\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li><code>p</code>&nbsp;\u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece&nbsp;<code>a-z</code>&nbsp;\u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u4ee5\u53ca\u5b57\u7b26&nbsp;<code>?</code>&nbsp;\u548c&nbsp;<code>*</code>\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;aa&quot;\np = &quot;a&quot;\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> &quot;a&quot; \u65e0\u6cd5\u5339\u914d &quot;aa&quot; \u6574\u4e2a\u5b57\u7b26\u4e32\u3002</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;aa&quot;\np = &quot;*&quot;\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong>&nbsp;&#39;*&#39; \u53ef\u4ee5\u5339\u914d\u4efb\u610f\u5b57\u7b26\u4e32\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;cb&quot;\np = &quot;?a&quot;\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong>&nbsp;&#39;?&#39; \u53ef\u4ee5\u5339\u914d &#39;c&#39;, \u4f46\u7b2c\u4e8c\u4e2a &#39;a&#39; \u65e0\u6cd5\u5339\u914d &#39;b&#39;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;adceb&quot;\np = &quot;*a*b&quot;\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong>&nbsp;\u7b2c\u4e00\u4e2a &#39;*&#39; \u53ef\u4ee5\u5339\u914d\u7a7a\u5b57\u7b26\u4e32, \u7b2c\u4e8c\u4e2a &#39;*&#39; \u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 &quot;dce&quot;.\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;acdcb&quot;\np = &quot;a*c?b&quot;\n<strong>\u8f93\u5165:</strong> false</pre>\n",
        "titleZh": "\u901a\u914d\u7b26\u5339\u914d",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Alibaba",
            "Snapchat",
            "Twitter",
            "Two Sigma",
            "Coursera",
            "Citadel"
        ]
    },
    {
        "leetId": "45",
        "link": "jump-game-ii",
        "title": "Jump Game II",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "29.8%",
        "questionDescription": "<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\r\n\r\n<p>Each element in the array represents your maximum jump length at that position.</p>\r\n\r\n<p>Your goal is to reach the last index in the minimum number of jumps.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,3,1,1,4]\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> The minimum number of jumps to reach the last index is 2.\r\n    Jump 1 step from index 0 to 1, then 3 steps to the last index.</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>You can assume that you can always reach the last index.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002</p>\n\n<p>\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002</p>\n\n<p>\u4f60\u7684\u76ee\u6807\u662f\u4f7f\u7528\u6700\u5c11\u7684\u8df3\u8dc3\u6b21\u6570\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,3,1,1,4]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u8df3\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u8df3\u8dc3\u6570\u662f <code>2</code>\u3002\n&nbsp;    \u4ece\u4e0b\u6807\u4e3a 0 \u8df3\u5230\u4e0b\u6807\u4e3a 1 \u7684\u4f4d\u7f6e\uff0c\u8df3&nbsp;<code>1</code>&nbsp;\u6b65\uff0c\u7136\u540e\u8df3&nbsp;<code>3</code>&nbsp;\u6b65\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u5047\u8bbe\u4f60\u603b\u662f\u53ef\u4ee5\u5230\u8fbe\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002</p>\n",
        "titleZh": "\u8df3\u8dc3\u6e38\u620f II",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Adobe",
            "Apple",
            "Alibaba",
            "Snapchat",
            "Goldman Sachs",
            "Expedia",
            "Huawei"
        ]
    },
    {
        "leetId": "46",
        "link": "permutations",
        "title": "Permutations",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "68.0%",
        "questionDescription": "<p>Given a collection of <strong>distinct</strong> integers, return all possible permutations.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3]\r\n<strong>Output:</strong>\r\n[\r\n  [1,2,3],\r\n  [1,3,2],\r\n  [2,1,3],\r\n  [2,3,1],\r\n  [3,1,2],\r\n  [3,2,1]\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u6ca1\u6709\u91cd\u590d</strong>\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3]\n<strong>\u8f93\u51fa:</strong>\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]</pre>\n",
        "titleZh": "\u5168\u6392\u5217",
        "tags": [
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Baidu",
            "Oracle",
            "Yelp",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Salesforce",
            "Paypal",
            "Cisco",
            "Two Sigma",
            "SAP",
            "NetEase",
            "GoDaddy",
            "Epic Systems",
            "Citadel"
        ]
    },
    {
        "leetId": "47",
        "link": "permutations-ii",
        "title": "Permutations II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "51.7%",
        "questionDescription": "<p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,1,2]\r\n<strong>Output:</strong>\r\n[\r\n  [1,1,2],\r\n  [1,2,1],\r\n  [2,1,1]\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,1,2]\n<strong>\u8f93\u51fa:</strong>\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]</pre>\n",
        "titleZh": "\u5168\u6392\u5217 II",
        "tags": [
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "LinkedIn",
            "VMware"
        ]
    },
    {
        "leetId": "48",
        "link": "rotate-image",
        "title": "Rotate Image",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "61.1%",
        "questionDescription": "<p>You are given an <em>n</em> x <em>n</em> 2D matrix representing an image.</p>\r\n\r\n<p>Rotate the image by 90 degrees (clockwise).</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>You have to rotate the image <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\nGiven <strong>input matrix</strong> = \r\n[\r\n  [1,2,3],\r\n  [4,5,6],\r\n  [7,8,9]\r\n],\r\n\r\nrotate the input matrix <strong>in-place</strong> such that it becomes:\r\n[\r\n  [7,4,1],\r\n  [8,5,2],\r\n  [9,6,3]\r\n]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\nGiven <strong>input matrix</strong> =\r\n[\r\n  [ 5, 1, 9,11],\r\n  [ 2, 4, 8,10],\r\n  [13, 3, 6, 7],\r\n  [15,14,12,16]\r\n], \r\n\r\nrotate the input matrix <strong>in-place</strong> such that it becomes:\r\n[\r\n  [15,13, 2, 5],\r\n  [14, 3, 4, 1],\r\n  [12, 6, 8, 9],\r\n  [16, 7,10,11]\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a <em>n&nbsp;</em>&times;&nbsp;<em>n</em> \u7684\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002</p>\n\n<p>\u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u4f60\u5fc5\u987b\u5728<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a></strong>\u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002<strong>\u8bf7\u4e0d\u8981</strong>\u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\u7ed9\u5b9a <strong>matrix</strong> = \n[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n],\n\n<strong>\u539f\u5730</strong>\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a:\n[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\u7ed9\u5b9a <strong>matrix</strong> =\n[\n  [ 5, 1, 9,11],\n  [ 2, 4, 8,10],\n  [13, 3, 6, 7],\n  [15,14,12,16]\n], \n\n<strong>\u539f\u5730</strong>\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a:\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]\n</pre>\n",
        "titleZh": "\u65cb\u8f6c\u56fe\u50cf",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Baidu",
            "Salesforce",
            "Nvidia",
            "Akuna Capital",
            "Houzz",
            "ServiceNow",
            "Epic Systems",
            "Wish"
        ]
    },
    {
        "leetId": "49",
        "link": "group-anagrams",
        "title": "Group Anagrams",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "55.0%",
        "questionDescription": "<p>Given an array of strings, group anagrams together.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>[&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</code>,\r\n<strong>Output:</strong>\r\n[\r\n  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],\r\n  [&quot;nat&quot;,&quot;tan&quot;],\r\n  [&quot;bat&quot;]\r\n]</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All inputs will be in lowercase.</li>\r\n\t<li>The order of your output does not&nbsp;matter.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5c06\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</code>,\n<strong>\u8f93\u51fa:</strong>\n[\n  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],\n  [&quot;nat&quot;,&quot;tan&quot;],\n  [&quot;bat&quot;]\n]</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u8f93\u5165\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li>\u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002</li>\n</ul>\n",
        "titleZh": "\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Twitter",
            "Goldman Sachs",
            "Yelp",
            "eBay",
            "Walmart Labs",
            "VMware",
            "Salesforce",
            "Pinterest",
            "Zillow",
            "Hulu",
            "Yandex",
            "Qualtrics",
            "Affirm",
            "Twilio",
            "Booking.com"
        ]
    },
    {
        "leetId": "50",
        "link": "powx-n",
        "title": "Pow(x, n)",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "32.2%",
        "questionDescription": "<p>Implement <a href=\"http://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(<em>x</em>, <em>n</em>)</a>, which calculates&nbsp;<em>x</em> raised to the power <em>n</em> (x<sup><span style=\"font-size:10.8333px\">n</span></sup>).</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2.00000, 10\r\n<strong>Output:</strong> 1024.00000\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2.10000, 3\r\n<strong>Output:</strong> 9.26100\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2.00000, -2\r\n<strong>Output:</strong> 0.25000\r\n<strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>-100.0 &lt; <em>x</em> &lt; 100.0</li>\r\n\t<li><em>n</em> is a 32-bit signed integer, within the range&nbsp;[&minus;2<sup>31</sup>,&nbsp;2<sup>31&nbsp;</sup>&minus; 1]</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5b9e\u73b0&nbsp;<a href=\"https://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(<em>x</em>, <em>n</em>)</a>&nbsp;\uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 2.00000, 10\n<strong>\u8f93\u51fa:</strong> 1024.00000\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 2.10000, 3\n<strong>\u8f93\u51fa:</strong> 9.26100\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 2.00000, -2\n<strong>\u8f93\u51fa:</strong> 0.25000\n<strong>\u89e3\u91ca:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>-100.0 &lt;&nbsp;<em>x</em>&nbsp;&lt; 100.0</li>\n\t<li><em>n</em>&nbsp;\u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f&nbsp;[&minus;2<sup>31</sup>,&nbsp;2<sup>31&nbsp;</sup>&minus; 1] \u3002</li>\n</ul>\n",
        "titleZh": "Pow(x, n)",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Snapchat",
            "Goldman Sachs",
            "Oracle",
            "Yelp",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Two Sigma"
        ]
    },
    {
        "leetId": "51",
        "link": "n-queens",
        "title": "N-Queens",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "61.3%",
        "questionDescription": "<p>The <em>n</em>-queens puzzle is the problem of placing <em>n</em> queens on an <em>n</em>&times;<em>n</em> chessboard such that no two queens attack each other.</p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/10/12/8-queens.png\" style=\"width: 258px; height: 276px;\" /></p>\r\n\r\n<p>Given an integer <em>n</em>, return all distinct solutions to the <em>n</em>-queens puzzle.</p>\r\n\r\n<p>Each solution contains a distinct board configuration of the <em>n</em>-queens&#39; placement, where <code>&#39;Q&#39;</code> and <code>&#39;.&#39;</code> both indicate a queen and an empty space respectively.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 4\r\n<strong>Output:</strong> [\r\n [&quot;.Q..&quot;,  // Solution 1\r\n  &quot;...Q&quot;,\r\n  &quot;Q...&quot;,\r\n  &quot;..Q.&quot;],\r\n\r\n [&quot;..Q.&quot;,  // Solution 2\r\n  &quot;Q...&quot;,\r\n  &quot;...Q&quot;,\r\n  &quot;.Q..&quot;]\r\n]\r\n<strong>Explanation:</strong> There exist two distinct solutions to the 4-queens puzzle as shown above.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p><em>n&nbsp;</em>\u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 <em>n</em>&nbsp;\u4e2a\u7687\u540e\u653e\u7f6e\u5728 <em>n</em>&times;<em>n</em> \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png\"></p>\n\n<p><small>\u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002</small></p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 <em>n</em>\uff0c\u8fd4\u56de\u6240\u6709\u4e0d\u540c\u7684&nbsp;<em>n&nbsp;</em>\u7687\u540e\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002</p>\n\n<p>\u6bcf\u4e00\u79cd\u89e3\u6cd5\u5305\u542b\u4e00\u4e2a\u660e\u786e\u7684&nbsp;<em>n</em> \u7687\u540e\u95ee\u9898\u7684\u68cb\u5b50\u653e\u7f6e\u65b9\u6848\uff0c\u8be5\u65b9\u6848\u4e2d <code>&#39;Q&#39;</code> \u548c <code>&#39;.&#39;</code> \u5206\u522b\u4ee3\u8868\u4e86\u7687\u540e\u548c\u7a7a\u4f4d\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 4\n<strong>\u8f93\u51fa:</strong> [\n [&quot;.Q..&quot;,  // \u89e3\u6cd5 1\n  &quot;...Q&quot;,\n  &quot;Q...&quot;,\n  &quot;..Q.&quot;],\n\n [&quot;..Q.&quot;,  // \u89e3\u6cd5 2\n  &quot;Q...&quot;,\n  &quot;...Q&quot;,\n  &quot;.Q..&quot;]\n]\n<strong>\u89e3\u91ca:</strong> 4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002\n</pre>\n",
        "titleZh": "N\u7687\u540e",
        "tags": [
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook",
            "Microsoft",
            "Apple",
            "Alibaba",
            "eBay",
            "Two Sigma",
            "Rubrik",
            "Tableau"
        ]
    },
    {
        "leetId": "52",
        "link": "n-queens-ii",
        "title": "N-Queens II",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "72.2%",
        "questionDescription": "<p>The <em>n</em>-queens puzzle is the problem of placing <em>n</em> queens on an <em>n</em>&times;<em>n</em> chessboard such that no two queens attack each other.</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/8-queens.png\" style=\"width: 258px; height: 276px;\" /></p>\r\n\r\n<p>Given an integer&nbsp;<em>n</em>, return the number of&nbsp;distinct solutions to the&nbsp;<em>n</em>-queens puzzle.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 4\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> There are two distinct solutions to the 4-queens puzzle as shown below.\r\n[\r\n&nbsp;[&quot;.Q..&quot;, &nbsp;// Solution 1\r\n&nbsp; &quot;...Q&quot;,\r\n&nbsp; &quot;Q...&quot;,\r\n&nbsp; &quot;..Q.&quot;],\r\n\r\n&nbsp;[&quot;..Q.&quot;, &nbsp;// Solution 2\r\n&nbsp; &quot;Q...&quot;,\r\n&nbsp; &quot;...Q&quot;,\r\n&nbsp; &quot;.Q..&quot;]\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p><em>n&nbsp;</em>\u7687\u540e\u95ee\u9898\u7814\u7a76\u7684\u662f\u5982\u4f55\u5c06 <em>n</em>&nbsp;\u4e2a\u7687\u540e\u653e\u7f6e\u5728 <em>n</em>&times;<em>n</em> \u7684\u68cb\u76d8\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7687\u540e\u5f7c\u6b64\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u653b\u51fb\u3002</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png\" style=\"height: 276px; width: 258px;\"></p>\n\n<p><small>\u4e0a\u56fe\u4e3a 8 \u7687\u540e\u95ee\u9898\u7684\u4e00\u79cd\u89e3\u6cd5\u3002</small></p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 <em>n</em>\uff0c\u8fd4\u56de <em>n</em> \u7687\u540e\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848\u7684\u6570\u91cf\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 4\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> 4 \u7687\u540e\u95ee\u9898\u5b58\u5728\u5982\u4e0b\u4e24\u4e2a\u4e0d\u540c\u7684\u89e3\u6cd5\u3002\n[\n&nbsp;[&quot;.Q..&quot;, &nbsp;// \u89e3\u6cd5 1\n&nbsp; &quot;...Q&quot;,\n&nbsp; &quot;Q...&quot;,\n&nbsp; &quot;..Q.&quot;],\n\n&nbsp;[&quot;..Q.&quot;, &nbsp;// \u89e3\u6cd5 2\n&nbsp; &quot;Q...&quot;,\n&nbsp; &quot;...Q&quot;,\n&nbsp; &quot;.Q..&quot;]\n]\n</pre>\n",
        "titleZh": "N\u7687\u540e II",
        "tags": [
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Facebook",
            "Zenefits",
            "Zillow"
        ]
    },
    {
        "leetId": "53",
        "link": "maximum-subarray",
        "title": "Maximum Subarray",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "44.3%",
        "questionDescription": "<p>Given an integer array <code>nums</code>, find the contiguous subarray&nbsp;(containing at least one number) which has the largest sum and return its sum.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [-2,1,-3,4,-1,2,1,-5,4],\r\n<strong>Output:</strong> 6\r\n<strong>Explanation:</strong>&nbsp;[4,-1,2,1] has the largest sum = 6.\r\n</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>If you have figured out the O(<em>n</em>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code>&nbsp;\uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [-2,1,-3,4,-1,2,1,-5,4],\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong>&nbsp;\u8fde\u7eed\u5b50\u6570\u7ec4&nbsp;[4,-1,2,1] \u7684\u548c\u6700\u5927\uff0c\u4e3a&nbsp;6\u3002\n</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<p>\u5982\u679c\u4f60\u5df2\u7ecf\u5b9e\u73b0\u590d\u6742\u5ea6\u4e3a O(<em>n</em>) \u7684\u89e3\u6cd5\uff0c\u5c1d\u8bd5\u4f7f\u7528\u66f4\u4e3a\u7cbe\u5999\u7684\u5206\u6cbb\u6cd5\u6c42\u89e3\u3002</p>\n",
        "titleZh": "\u6700\u5927\u5b50\u5e8f\u548c",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Goldman Sachs",
            "Oracle",
            "Yelp",
            "eBay",
            "Tencent",
            "Salesforce",
            "Zenefits",
            "Expedia",
            "Paypal",
            "Zillow",
            "Two Sigma",
            "Hulu",
            "Nvidia",
            "SAP",
            "Visa",
            "NetEase",
            "Huawei",
            "JPMorgan",
            "Capital One",
            "Rubrik",
            "Intel",
            "BlackRock"
        ]
    },
    {
        "leetId": "54",
        "link": "spiral-matrix",
        "title": "Spiral Matrix",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "34.8%",
        "questionDescription": "<p>Given a matrix of <em>m</em> x <em>n</em> elements (<em>m</em> rows, <em>n</em> columns), return all elements of the matrix in spiral order.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n[\r\n [ 1, 2, 3 ],\r\n [ 4, 5, 6 ],\r\n [ 7, 8, 9 ]\r\n]\r\n<strong>Output:</strong> [1,2,3,6,9,8,7,4,5]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n<pre>\r\n<strong>Input:</strong>\r\n[\r\n  [1, 2, 3, 4],\r\n  [5, 6, 7, 8],\r\n  [9,10,11,12]\r\n]\r\n<strong>Output:</strong> [1,2,3,4,8,12,11,10,9,5,6,7]\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b&nbsp;<em>m</em> x <em>n</em>&nbsp;\u4e2a\u5143\u7d20\u7684\u77e9\u9635\uff08<em>m</em> \u884c, <em>n</em> \u5217\uff09\uff0c\u8bf7\u6309\u7167\u987a\u65f6\u9488\u87ba\u65cb\u987a\u5e8f\uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n<strong>\u8f93\u51fa:</strong> [1,2,3,6,9,8,7,4,5]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]\n<strong>\u8f93\u51fa:</strong> [1,2,3,4,8,12,11,10,9,5,6,7]\n</pre>\n",
        "titleZh": "\u87ba\u65cb\u77e9\u9635",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Yahoo",
            "Baidu",
            "Yelp",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "Paypal",
            "Cisco",
            "Zillow",
            "Hulu",
            "JPMorgan",
            "ServiceNow",
            "Epic Systems",
            "Redfin",
            "Dataminr"
        ]
    },
    {
        "leetId": "55",
        "link": "jump-game",
        "title": "Jump Game",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "34.6%",
        "questionDescription": "<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\r\n\r\n<p>Each element in the array represents your maximum jump length at that position.</p>\r\n\r\n<p>Determine if you are able to reach the last index.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,3,1,1,4]\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong> Jump 1 step from index 0 to 1, then 3 steps to the last index.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [3,2,1,0,4]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> You will always arrive at index 3 no matter what. Its maximum\r\n&nbsp;            jump length is 0, which makes it impossible to reach the last index.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002</p>\n\n<p>\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002</p>\n\n<p>\u5224\u65ad\u4f60\u662f\u5426\u80fd\u591f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,3,1,1,4]\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong> \u4ece\u4f4d\u7f6e 0 \u5230 1 \u8df3 1 \u6b65, \u7136\u540e\u8df3 3 \u6b65\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [3,2,1,0,4]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u65e0\u8bba\u600e\u6837\uff0c\u4f60\u603b\u4f1a\u5230\u8fbe\u7d22\u5f15\u4e3a 3 \u7684\u4f4d\u7f6e\u3002\u4f46\u8be5\u4f4d\u7f6e\u7684\u6700\u5927\u8df3\u8dc3\u957f\u5ea6\u662f 0 \uff0c \u6240\u4ee5\u4f60\u6c38\u8fdc\u4e0d\u53ef\u80fd\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n</pre>\n",
        "titleZh": "\u8df3\u8dc3\u6e38\u620f",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "Baidu",
            "Snapchat",
            "Visa",
            "Booking.com"
        ]
    },
    {
        "leetId": "56",
        "link": "merge-intervals",
        "title": "Merge Intervals",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "35.4%",
        "questionDescription": "<p>Given a collection of intervals, merge all overlapping intervals.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [[1,3],[2,6],[8,10],[15,18]]\r\n<strong>Output:</strong> [[1,6],[8,10],[15,18]]\r\n<strong>Explanation:</strong> Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [[1,4],[4,5]]\r\n<strong>Output:</strong> [[1,5]]\r\n<strong>Explanation:</strong> Intervals [1,4] and [4,5] are considered overlapping.</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u8bf7\u5408\u5e76\u6240\u6709\u91cd\u53e0\u7684\u533a\u95f4\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[1,3],[2,6],[8,10],[15,18]]\n<strong>\u8f93\u51fa:</strong> [[1,6],[8,10],[15,18]]\n<strong>\u89e3\u91ca:</strong> \u533a\u95f4 [1,3] \u548c [2,6] \u91cd\u53e0, \u5c06\u5b83\u4eec\u5408\u5e76\u4e3a [1,6].\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[1,4],[4,5]]\n<strong>\u8f93\u51fa:</strong> [[1,5]]\n<strong>\u89e3\u91ca:</strong> \u533a\u95f4 [1,4] \u548c [4,5] \u53ef\u88ab\u89c6\u4e3a\u91cd\u53e0\u533a\u95f4\u3002</pre>\n",
        "titleZh": "\u5408\u5e76\u533a\u95f4",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Snapchat",
            "Twitter",
            "Goldman Sachs",
            "Oracle",
            "Yelp",
            "eBay",
            "Walmart Labs",
            "Salesforce",
            "Zenefits",
            "Paypal",
            "Cisco",
            "Pinterest",
            "Intuit",
            "Palantir Technologies",
            "Nvidia",
            "Palantir",
            "SAP",
            "GoDaddy",
            "ServiceNow",
            "Dataminr"
        ]
    },
    {
        "leetId": "57",
        "link": "insert-interval",
        "title": "Insert Interval",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "34.2%",
        "questionDescription": "<p>Given a set of <em>non-overlapping</em> intervals, insert a new interval into the intervals (merge if necessary).</p>\r\n\r\n<p>You may assume that the intervals were initially sorted according to their start times.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> intervals = [[1,3],[6,9]], newInterval = [2,5]\r\n<strong>Output:</strong> [[1,5],[6,9]]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> intervals = <code>[[1,2],[3,5],[6,7],[8,10],[12,16]]</code>, newInterval = <code>[4,8]</code>\r\n<strong>Output:</strong> [[1,2],[3,10],[12,16]]\r\n<strong>Explanation:</strong> Because the new interval <code>[4,8]</code> overlaps with <code>[3,5],[6,7],[8,10]</code>.</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e00\u4e2a<em>\u65e0\u91cd\u53e0\u7684 \uff0c</em>\u6309\u7167\u533a\u95f4\u8d77\u59cb\u7aef\u70b9\u6392\u5e8f\u7684\u533a\u95f4\u5217\u8868\u3002</p>\n\n<p>\u5728\u5217\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u533a\u95f4\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5217\u8868\u4e2d\u7684\u533a\u95f4\u4ecd\u7136\u6709\u5e8f\u4e14\u4e0d\u91cd\u53e0\uff08\u5982\u679c\u6709\u5fc5\u8981\u7684\u8bdd\uff0c\u53ef\u4ee5\u5408\u5e76\u533a\u95f4\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> intervals = [[1,3],[6,9]], newInterval = [2,5]\n<strong>\u8f93\u51fa:</strong> [[1,5],[6,9]]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> intervals = <code>[[1,2],[3,5],[6,7],[8,10],[12,16]]</code>, newInterval = <code>[4,8]</code>\n<strong>\u8f93\u51fa:</strong> [[1,2],[3,10],[12,16]]\n<strong>\u89e3\u91ca:</strong> \u8fd9\u662f\u56e0\u4e3a\u65b0\u7684\u533a\u95f4 <code>[4,8]</code> \u4e0e <code>[3,5],[6,7],[8,10]</code>&nbsp;\u91cd\u53e0\u3002\n</pre>\n",
        "titleZh": "\u63d2\u5165\u533a\u95f4",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Apple",
            "LinkedIn",
            "Twitter",
            "Lyft",
            "Tableau"
        ]
    },
    {
        "leetId": "58",
        "link": "length-of-last-word",
        "title": "Length of Last Word",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "29.5%",
        "questionDescription": "<p>Given a string <i>s</i> consists of upper/lower-case alphabets and empty space characters <code>' '</code>, return the length of last word in the string.</p>\r\n\r\n<p>If the last word does not exist, return 0.</p>\r\n\r\n<p><b>Note:</b> A word is defined as a character sequence consists of non-space characters only.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b> \"Hello World\"\r\n<b>Output:</b> 5\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c&nbsp;<code>&#39; &#39;</code>&nbsp;\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5176\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u3002</p>\n\n<p>\u5982\u679c\u4e0d\u5b58\u5728\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\uff0c\u8bf7\u8fd4\u56de 0&nbsp;\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u4e00\u4e2a\u5355\u8bcd\u662f\u6307\u7531\u5b57\u6bcd\u7ec4\u6210\uff0c\u4f46\u4e0d\u5305\u542b\u4efb\u4f55\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;Hello World&quot;\n<strong>\u8f93\u51fa:</strong> 5\n</pre>\n",
        "titleZh": "\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Adobe",
            "Alibaba"
        ]
    },
    {
        "leetId": "59",
        "link": "spiral-matrix-ii",
        "title": "Spiral Matrix II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "72.3%",
        "questionDescription": "<p>Given a positive integer <em>n</em>, generate a square matrix filled with elements from 1 to <em>n</em><sup>2</sup> in spiral order.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong>\r\n[\r\n [ 1, 2, 3 ],\r\n [ 8, 9, 4 ],\r\n [ 7, 6, 5 ]\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<em>n</em>\uff0c\u751f\u6210\u4e00\u4e2a\u5305\u542b 1 \u5230&nbsp;<em>n</em><sup>2</sup>&nbsp;\u6240\u6709\u5143\u7d20\uff0c\u4e14\u5143\u7d20\u6309\u987a\u65f6\u9488\u987a\u5e8f\u87ba\u65cb\u6392\u5217\u7684\u6b63\u65b9\u5f62\u77e9\u9635\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 3\n<strong>\u8f93\u51fa:</strong>\n[\n [ 1, 2, 3 ],\n [ 8, 9, 4 ],\n [ 7, 6, 5 ]\n]</pre>\n",
        "titleZh": "\u87ba\u65cb\u77e9\u9635 II",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Apple",
            "Snapchat"
        ]
    },
    {
        "leetId": "60",
        "link": "permutation-sequence",
        "title": "Permutation Sequence",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "46.1%",
        "questionDescription": "<p>The set <code>[1,2,3,...,<em>n</em>]</code> contains a total of <em>n</em>! unique permutations.</p>\r\n\r\n<p>By listing and labeling all of the permutations in order, we get the following sequence for <em>n</em> = 3:</p>\r\n\r\n<ol>\r\n\t<li><code>&quot;123&quot;</code></li>\r\n\t<li><code>&quot;132&quot;</code></li>\r\n\t<li><code>&quot;213&quot;</code></li>\r\n\t<li><code>&quot;231&quot;</code></li>\r\n\t<li><code>&quot;312&quot;</code></li>\r\n\t<li><code>&quot;321&quot;</code></li>\r\n</ol>\r\n\r\n<p>Given <em>n</em> and <em>k</em>, return the <em>k</em><sup>th</sup> permutation sequence.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Given <em>n</em> will be between 1 and 9 inclusive.</li>\r\n\t<li>Given&nbsp;<em>k</em>&nbsp;will be between 1 and <em>n</em>! inclusive.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> n = 3, k = 3\r\n<strong>Output:</strong> &quot;213&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> n = 4, k = 9\r\n<strong>Output:</strong> &quot;2314&quot;\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u96c6\u5408&nbsp;<code>[1,2,3,&hellip;,<em>n</em>]</code>\uff0c\u5176\u6240\u6709\u5143\u7d20\u5171\u6709&nbsp;<em>n</em>! \u79cd\u6392\u5217\u3002</p>\n\n<p>\u6309\u5927\u5c0f\u987a\u5e8f\u5217\u51fa\u6240\u6709\u6392\u5217\u60c5\u51b5\uff0c\u5e76\u4e00\u4e00\u6807\u8bb0\uff0c\u5f53&nbsp;<em>n </em>= 3 \u65f6, \u6240\u6709\u6392\u5217\u5982\u4e0b\uff1a</p>\n\n<ol>\n\t<li><code>&quot;123&quot;</code></li>\n\t<li><code>&quot;132&quot;</code></li>\n\t<li><code>&quot;213&quot;</code></li>\n\t<li><code>&quot;231&quot;</code></li>\n\t<li><code>&quot;312&quot;</code></li>\n\t<li><code>&quot;321&quot;</code></li>\n</ol>\n\n<p>\u7ed9\u5b9a&nbsp;<em>n</em> \u548c&nbsp;<em>k</em>\uff0c\u8fd4\u56de\u7b2c&nbsp;<em>k</em>&nbsp;\u4e2a\u6392\u5217\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u7ed9\u5b9a<em> n</em>&nbsp;\u7684\u8303\u56f4\u662f [1, 9]\u3002</li>\n\t<li>\u7ed9\u5b9a <em>k&nbsp;</em>\u7684\u8303\u56f4\u662f[1, &nbsp;<em>n</em>!]\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 3, k = 3\n<strong>\u8f93\u51fa:</strong> &quot;213&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 4, k = 9\n<strong>\u8f93\u51fa:</strong> &quot;2314&quot;\n</pre>\n",
        "titleZh": "\u7b2ck\u4e2a\u6392\u5217",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Twitter"
        ]
    },
    {
        "leetId": "61",
        "link": "rotate-list",
        "title": "Rotate List",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "37.6%",
        "questionDescription": "<p>Given a linked&nbsp;list, rotate the list to the right by <em>k</em> places, where <em>k</em> is non-negative.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2\r\n<strong>Output:</strong> 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL\r\n<strong>Explanation:</strong>\r\nrotate 1 steps to the right: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL\r\nrotate 2 steps to the right: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 0-&gt;1-&gt;2-&gt;NULL, k = 4\r\n<strong>Output:</strong> <code>2-&gt;0-&gt;1-&gt;NULL</code>\r\n<strong>Explanation:</strong>\r\nrotate 1 steps to the right: 2-&gt;0-&gt;1-&gt;NULL\r\nrotate 2 steps to the right: 1-&gt;2-&gt;0-&gt;NULL\r\nrotate 3 steps to the right:&nbsp;<code>0-&gt;1-&gt;2-&gt;NULL</code>\r\nrotate 4 steps to the right:&nbsp;<code>2-&gt;0-&gt;1-&gt;NULL</code></pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u65cb\u8f6c\u94fe\u8868\uff0c\u5c06\u94fe\u8868\u6bcf\u4e2a\u8282\u70b9\u5411\u53f3\u79fb\u52a8&nbsp;<em>k&nbsp;</em>\u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d&nbsp;<em>k&nbsp;</em>\u662f\u975e\u8d1f\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2\n<strong>\u8f93\u51fa:</strong> 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL\n<strong>\u89e3\u91ca:</strong>\n\u5411\u53f3\u65cb\u8f6c 1 \u6b65: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL\n\u5411\u53f3\u65cb\u8f6c 2 \u6b65: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 0-&gt;1-&gt;2-&gt;NULL, k = 4\n<strong>\u8f93\u51fa:</strong> <code>2-&gt;0-&gt;1-&gt;NULL</code>\n<strong>\u89e3\u91ca:</strong>\n\u5411\u53f3\u65cb\u8f6c 1 \u6b65: 2-&gt;0-&gt;1-&gt;NULL\n\u5411\u53f3\u65cb\u8f6c 2 \u6b65: 1-&gt;2-&gt;0-&gt;NULL\n\u5411\u53f3\u65cb\u8f6c 3 \u6b65:&nbsp;<code>0-&gt;1-&gt;2-&gt;NULL</code>\n\u5411\u53f3\u65cb\u8f6c 4 \u6b65:&nbsp;<code>2-&gt;0-&gt;1-&gt;NULL</code></pre>\n",
        "titleZh": "\u65cb\u8f6c\u94fe\u8868",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "Works Applications"
        ]
    },
    {
        "leetId": "62",
        "link": "unique-paths",
        "title": "Unique Paths",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "53.5%",
        "questionDescription": "<p>A robot is located at the top-left corner of a <em>m</em> x <em>n</em> grid (marked &#39;Start&#39; in the diagram below).</p>\r\n\r\n<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &#39;Finish&#39; in the diagram below).</p>\r\n\r\n<p>How many possible unique paths are there?</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\" style=\"width: 400px; height: 183px;\" /><br />\r\n<small>Above is a 7 x 3 grid. How many possible unique paths are there?</small></p>\r\n\r\n<p><strong>Note:</strong> <em>m</em> and <em>n</em> will be at most 100.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> m = 3, n = 2\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong>\r\nFrom the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\r\n1. Right -&gt; Right -&gt; Down\r\n2. Right -&gt; Down -&gt; Right\r\n3. Down -&gt; Right -&gt; Right\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> m = 7, n = 3\r\n<strong>Output:</strong> 28</pre>\r\n",
        "questionDescriptionZh": "<p>\u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a <em>m x n </em>\u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a&ldquo;Start&rdquo; \uff09\u3002</p>\n\n<p>\u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a&ldquo;Finish&rdquo;\uff09\u3002</p>\n\n<p>\u95ee\u603b\u5171\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\"></p>\n\n<p><small>\u4f8b\u5982\uff0c\u4e0a\u56fe\u662f\u4e00\u4e2a7 x 3 \u7684\u7f51\u683c\u3002\u6709\u591a\u5c11\u53ef\u80fd\u7684\u8def\u5f84\uff1f</small></p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong><em>m</em>&nbsp;\u548c <em>n </em>\u7684\u503c\u5747\u4e0d\u8d85\u8fc7 100\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> m = 3, n = 2\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong>\n\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\uff0c\u603b\u5171\u6709 3 \u6761\u8def\u5f84\u53ef\u4ee5\u5230\u8fbe\u53f3\u4e0b\u89d2\u3002\n1. \u5411\u53f3 -&gt; \u5411\u53f3 -&gt; \u5411\u4e0b\n2. \u5411\u53f3 -&gt; \u5411\u4e0b -&gt; \u5411\u53f3\n3. \u5411\u4e0b -&gt; \u5411\u53f3 -&gt; \u5411\u53f3\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> m = 7, n = 3\n<strong>\u8f93\u51fa:</strong> 28</pre>\n",
        "titleZh": "\u4e0d\u540c\u8def\u5f84",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Twitter",
            "Goldman Sachs",
            "Tencent",
            "Walmart Labs",
            "NetEase"
        ]
    },
    {
        "leetId": "63",
        "link": "unique-paths-ii",
        "title": "Unique Paths II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "30.9%",
        "questionDescription": "<p>A robot is located at the top-left corner of a <em>m</em> x <em>n</em> grid (marked &#39;Start&#39; in the diagram below).</p>\r\n\r\n<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &#39;Finish&#39; in the diagram below).</p>\r\n\r\n<p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\" style=\"width: 400px; height: 183px;\" /></p>\r\n\r\n<p>An obstacle and empty space is marked as <code>1</code> and <code>0</code> respectively in the grid.</p>\r\n\r\n<p><strong>Note:</strong> <em>m</em> and <em>n</em> will be at most 100.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong>[\r\n&nbsp; [0,0,0],\r\n&nbsp; [0,1,0],\r\n&nbsp; [0,0,0]\r\n]\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong>\r\nThere is one obstacle in the middle of the 3x3 grid above.\r\nThere are two ways to reach the bottom-right corner:\r\n1. Right -&gt; Right -&gt; Down -&gt; Down\r\n2. Down -&gt; Down -&gt; Right -&gt; Right\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a <em>m x n </em>\u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a&ldquo;Start&rdquo; \uff09\u3002</p>\n\n<p>\u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a&ldquo;Finish&rdquo;\uff09\u3002</p>\n\n<p>\u73b0\u5728\u8003\u8651\u7f51\u683c\u4e2d\u6709\u969c\u788d\u7269\u3002\u90a3\u4e48\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u5c06\u4f1a\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png\" style=\"height: 183px; width: 400px;\"></p>\n\n<p>\u7f51\u683c\u4e2d\u7684\u969c\u788d\u7269\u548c\u7a7a\u4f4d\u7f6e\u5206\u522b\u7528 <code>1</code> \u548c <code>0</code> \u6765\u8868\u793a\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong><em>m</em>&nbsp;\u548c <em>n </em>\u7684\u503c\u5747\u4e0d\u8d85\u8fc7 100\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:\n</strong>[\n&nbsp; [0,0,0],\n&nbsp; [0,1,0],\n&nbsp; [0,0,0]\n]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong>\n3x3 \u7f51\u683c\u7684\u6b63\u4e2d\u95f4\u6709\u4e00\u4e2a\u969c\u788d\u7269\u3002\n\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u4e00\u5171\u6709 <code>2</code> \u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1a\n1. \u5411\u53f3 -&gt; \u5411\u53f3 -&gt; \u5411\u4e0b -&gt; \u5411\u4e0b\n2. \u5411\u4e0b -&gt; \u5411\u4e0b -&gt; \u5411\u53f3 -&gt; \u5411\u53f3\n</pre>\n",
        "titleZh": "\u4e0d\u540c\u8def\u5f84 II",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Goldman Sachs",
            "Lyft",
            "Mathworks",
            "GoDaddy"
        ]
    },
    {
        "leetId": "64",
        "link": "minimum-path-sum",
        "title": "Minimum Path Sum",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "60.0%",
        "questionDescription": "<p>Given a <em>m</em> x <em>n</em> grid filled with non-negative numbers, find a path from top left to bottom right which <em>minimizes</em> the sum of all numbers along its path.</p>\r\n\r\n<p><strong>Note:</strong> You can only move either down or right at any point in time.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n[\r\n&nbsp; [1,3,1],\r\n  [1,5,1],\r\n  [4,2,1]\r\n]\r\n<strong>Output:</strong> 7\r\n<strong>Explanation:</strong> Because the path 1&rarr;3&rarr;1&rarr;1&rarr;1 minimizes the sum.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u975e\u8d1f\u6574\u6570\u7684 <em>m</em>&nbsp;x&nbsp;<em>n</em>&nbsp;\u7f51\u683c\uff0c\u8bf7\u627e\u51fa\u4e00\u6761\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u6570\u5b57\u603b\u548c\u4e3a\u6700\u5c0f\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[\n&nbsp; [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n<strong>\u8f93\u51fa:</strong> 7\n<strong>\u89e3\u91ca:</strong> \u56e0\u4e3a\u8def\u5f84 1&rarr;3&rarr;1&rarr;1&rarr;1 \u7684\u603b\u548c\u6700\u5c0f\u3002\n</pre>\n",
        "titleZh": "\u6700\u5c0f\u8def\u5f84\u548c",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Alibaba",
            "Goldman Sachs",
            "Yelp"
        ]
    },
    {
        "leetId": "65",
        "link": "valid-number",
        "title": "Valid Number",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "14.3%",
        "questionDescription": "<p>Validate if a given string can be interpreted as&nbsp;a decimal number.</p>\r\n\r\n<p>Some examples:<br />\r\n<code>&quot;0&quot;</code> =&gt; <code>true</code><br />\r\n<code>&quot; 0.1 &quot;</code> =&gt; <code>true</code><br />\r\n<code>&quot;abc&quot;</code> =&gt; <code>false</code><br />\r\n<code>&quot;1 a&quot;</code> =&gt; <code>false</code><br />\r\n<code>&quot;2e10&quot;</code> =&gt; <code>true</code><br />\r\n<code>&quot; -90e3&nbsp; &nbsp;&quot;</code> =&gt; <code>true</code><br />\r\n<code>&quot; 1e&quot;</code> =&gt; <code>false</code><br />\r\n<code>&quot;e3&quot;</code> =&gt; <code>false</code><br />\r\n<code>&quot; 6e-1&quot;</code> =&gt; <code>true</code><br />\r\n<code>&quot; 99e2.5&nbsp;&quot;</code> =&gt; <code>false</code><br />\r\n<code>&quot;53.5e93&quot;</code> =&gt; <code>true</code><br />\r\n<code>&quot; --6 &quot;</code> =&gt; <code>false</code><br />\r\n<code>&quot;-+3&quot;</code> =&gt; <code>false</code><br />\r\n<code>&quot;95a54e53&quot;</code> =&gt; <code>false</code></p>\r\n\r\n<p><strong>Note:</strong> It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one. However, here is a list of characters that can be in a valid decimal number:</p>\r\n\r\n<ul>\r\n\t<li>Numbers 0-9</li>\r\n\t<li>Exponent - &quot;e&quot;</li>\r\n\t<li>Positive/negative sign - &quot;+&quot;/&quot;-&quot;</li>\r\n\t<li>Decimal point - &quot;.&quot;</li>\r\n</ul>\r\n\r\n<p>Of course, the context of these characters also matters in the input.</p>\r\n\r\n<p><strong>Update (2015-02-10):</strong><br />\r\nThe signature of the <code>C++</code> function had been updated. If you still see your function signature accepts a <code>const char *</code> argument, please click the reload button to reset your code definition.</p>\r\n",
        "questionDescriptionZh": "<p>\u9a8c\u8bc1\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u662f\u5426\u53ef\u4ee5\u89e3\u91ca\u4e3a\u5341\u8fdb\u5236\u6570\u5b57\u3002</p>\n\n<p>\u4f8b\u5982:</p>\n\n<p><code>&quot;0&quot;</code>&nbsp;=&gt;&nbsp;<code>true</code><br>\n<code>&quot; 0.1 &quot;</code>&nbsp;=&gt;&nbsp;<code>true</code><br>\n<code>&quot;abc&quot;</code>&nbsp;=&gt;&nbsp;<code>false</code><br>\n<code>&quot;1 a&quot;</code>&nbsp;=&gt;&nbsp;<code>false</code><br>\n<code>&quot;2e10&quot;</code>&nbsp;=&gt;&nbsp;<code>true</code><br>\n<code>&quot; -90e3&nbsp; &nbsp;&quot;</code>&nbsp;=&gt;&nbsp;<code>true</code><br>\n<code>&quot; 1e&quot;</code>&nbsp;=&gt;&nbsp;<code>false</code><br>\n<code>&quot;e3&quot;</code>&nbsp;=&gt;&nbsp;<code>false</code><br>\n<code>&quot; 6e-1&quot;</code>&nbsp;=&gt;&nbsp;<code>true</code><br>\n<code>&quot; 99e2.5&nbsp;&quot;</code>&nbsp;=&gt;&nbsp;<code>false</code><br>\n<code>&quot;53.5e93&quot;</code>&nbsp;=&gt;&nbsp;<code>true</code><br>\n<code>&quot; --6 &quot;</code>&nbsp;=&gt;&nbsp;<code>false</code><br>\n<code>&quot;-+3&quot;</code>&nbsp;=&gt;&nbsp;<code>false</code><br>\n<code>&quot;95a54e53&quot;</code>&nbsp;=&gt;&nbsp;<code>false</code></p>\n\n<p><strong>\u8bf4\u660e:</strong>&nbsp;\u6211\u4eec\u6709\u610f\u5c06\u95ee\u9898\u9648\u8ff0\u5730\u6bd4\u8f83\u6a21\u7cca\u3002\u5728\u5b9e\u73b0\u4ee3\u7801\u4e4b\u524d\uff0c\u4f60\u5e94\u5f53\u4e8b\u5148\u601d\u8003\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4efd\u53ef\u80fd\u5b58\u5728\u4e8e\u6709\u6548\u5341\u8fdb\u5236\u6570\u5b57\u4e2d\u7684\u5b57\u7b26\u5217\u8868\uff1a</p>\n\n<ul>\n\t<li>\u6570\u5b57 0-9</li>\n\t<li>\u6307\u6570 - &quot;e&quot;</li>\n\t<li>\u6b63/\u8d1f\u53f7 - &quot;+&quot;/&quot;-&quot;</li>\n\t<li>\u5c0f\u6570\u70b9 - &quot;.&quot;</li>\n</ul>\n\n<p>\u5f53\u7136\uff0c\u5728\u8f93\u5165\u4e2d\uff0c\u8fd9\u4e9b\u5b57\u7b26\u7684\u4e0a\u4e0b\u6587\u4e5f\u5f88\u91cd\u8981\u3002</p>\n\n<p><strong>\u66f4\u65b0\u4e8e 2015-02-10:</strong><br>\n<code>C++</code>\u51fd\u6570\u7684\u5f62\u5f0f\u5df2\u7ecf\u66f4\u65b0\u4e86\u3002\u5982\u679c\u4f60\u4ecd\u7136\u770b\u89c1\u4f60\u7684\u51fd\u6570\u63a5\u6536&nbsp;<code>const char *</code> \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u8bf7\u70b9\u51fb\u91cd\u8f7d\u6309\u94ae\u91cd\u7f6e\u4f60\u7684\u4ee3\u7801\u3002</p>\n",
        "titleZh": "\u6709\u6548\u6570\u5b57",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Zillow"
        ]
    },
    {
        "leetId": "66",
        "link": "plus-one",
        "title": "Plus One",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "38.3%",
        "questionDescription": "<p>Given a <strong>non-empty</strong> array of digits&nbsp;representing a non-negative integer, plus one to the integer.</p>\r\n\r\n<p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.</p>\r\n\r\n<p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3]\r\n<strong>Output:</strong> [1,2,4]\r\n<strong>Explanation:</strong> The array represents the integer 123.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [4,3,2,1]\r\n<strong>Output:</strong> [4,3,2,2]\r\n<strong>Explanation:</strong> The array represents the integer 4321.\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531<strong>\u6574\u6570</strong>\u7ec4\u6210\u7684<strong>\u975e\u7a7a</strong>\u6570\u7ec4\u6240\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u3002</p>\n\n<p>\u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u4e00\u4e2a\u6570\u5b57\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3]\n<strong>\u8f93\u51fa:</strong> [1,2,4]\n<strong>\u89e3\u91ca:</strong> \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [4,3,2,1]\n<strong>\u8f93\u51fa:</strong> [4,3,2,2]\n<strong>\u89e3\u91ca:</strong> \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002\n</pre>\n",
        "titleZh": "\u52a0\u4e00",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Airbnb",
            "eBay",
            "Zillow"
        ]
    },
    {
        "leetId": "67",
        "link": "add-binary",
        "title": "Add Binary",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "47.5%",
        "questionDescription": "<p>Given two binary strings, return their sum (also a binary string).</p>\r\n\r\n<p>The input strings are both <strong>non-empty</strong> and contains only characters <code>1</code> or&nbsp;<code>0</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> a = &quot;11&quot;, b = &quot;1&quot;\r\n<strong>Output:</strong> &quot;100&quot;</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> a = &quot;1010&quot;, b = &quot;1011&quot;\r\n<strong>Output:</strong> &quot;10101&quot;</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u548c\uff08\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u3002</p>\n\n<p>\u8f93\u5165\u4e3a<strong>\u975e\u7a7a</strong>\u5b57\u7b26\u4e32\u4e14\u53ea\u5305\u542b\u6570\u5b57&nbsp;<code>1</code>&nbsp;\u548c&nbsp;<code>0</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> a = &quot;11&quot;, b = &quot;1&quot;\n<strong>\u8f93\u51fa:</strong> &quot;100&quot;</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> a = &quot;1010&quot;, b = &quot;1011&quot;\n<strong>\u8f93\u51fa:</strong> &quot;10101&quot;</pre>\n",
        "titleZh": "\u4e8c\u8fdb\u5236\u6c42\u548c",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Adobe",
            "Alibaba",
            "Intuit"
        ]
    },
    {
        "leetId": "68",
        "link": "text-justification",
        "title": "Text Justification",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "36.9%",
        "questionDescription": "<p>Given an array of words and a width&nbsp;<em>maxWidth</em>, format the text such that each line has exactly <em>maxWidth</em> characters and is fully (left and right) justified.</p>\r\n\r\n<p>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>&#39; &#39;</code> when necessary so that each line has exactly <em>maxWidth</em> characters.</p>\r\n\r\n<p>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</p>\r\n\r\n<p>For the last line of text, it should be left justified and no <strong>extra</strong> space is inserted between words.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>A word is defined as a character sequence consisting&nbsp;of non-space characters only.</li>\r\n\t<li>Each word&#39;s length is&nbsp;guaranteed to be greater than 0 and not exceed <em>maxWidth</em>.</li>\r\n\t<li>The input array <code>words</code>&nbsp;contains at least one word.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nwords = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;]\r\nmaxWidth = 16\r\n<strong>Output:</strong>\r\n[\r\n&nbsp; &nbsp;&quot;This &nbsp; &nbsp;is &nbsp; &nbsp;an&quot;,\r\n&nbsp; &nbsp;&quot;example &nbsp;of text&quot;,\r\n&nbsp; &nbsp;&quot;justification. &nbsp;&quot;\r\n]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nwords = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;]\r\nmaxWidth = 16\r\n<strong>Output:</strong>\r\n[\r\n&nbsp; &quot;What &nbsp; must &nbsp; be&quot;,\r\n&nbsp; &quot;acknowledgment &nbsp;&quot;,\r\n&nbsp; &quot;shall be &nbsp; &nbsp; &nbsp; &nbsp;&quot;\r\n]\r\n<strong>Explanation:</strong> Note that the last line is &quot;shall be    &quot; instead of &quot;shall     be&quot;,\r\n&nbsp;            because the last line must be left-justified instead of fully-justified.\r\n             Note that the second line is also left-justified becase it contains only one word.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nwords = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,\r\n&nbsp;        &quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;]\r\nmaxWidth = 20\r\n<strong>Output:</strong>\r\n[\r\n&nbsp; &quot;Science &nbsp;is &nbsp;what we&quot;,\r\n  &quot;understand &nbsp; &nbsp; &nbsp;well&quot;,\r\n&nbsp; &quot;enough to explain to&quot;,\r\n&nbsp; &quot;a &nbsp;computer. &nbsp;Art is&quot;,\r\n&nbsp; &quot;everything &nbsp;else &nbsp;we&quot;,\r\n&nbsp; &quot;do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\u6570\u7ec4\u548c\u4e00\u4e2a\u957f\u5ea6&nbsp;<em>maxWidth</em>\uff0c\u91cd\u65b0\u6392\u7248\u5355\u8bcd\uff0c\u4f7f\u5176\u6210\u4e3a\u6bcf\u884c\u6070\u597d\u6709&nbsp;<em>maxWidth</em>&nbsp;\u4e2a\u5b57\u7b26\uff0c\u4e14\u5de6\u53f3\u4e24\u7aef\u5bf9\u9f50\u7684\u6587\u672c\u3002</p>\n\n<p>\u4f60\u5e94\u8be5\u4f7f\u7528&ldquo;\u8d2a\u5fc3\u7b97\u6cd5&rdquo;\u6765\u653e\u7f6e\u7ed9\u5b9a\u7684\u5355\u8bcd\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c3d\u53ef\u80fd\u591a\u5730\u5f80\u6bcf\u884c\u4e2d\u653e\u7f6e\u5355\u8bcd\u3002\u5fc5\u8981\u65f6\u53ef\u7528\u7a7a\u683c&nbsp;<code>&#39; &#39;</code>&nbsp;\u586b\u5145\uff0c\u4f7f\u5f97\u6bcf\u884c\u6070\u597d\u6709 <em>maxWidth</em>&nbsp;\u4e2a\u5b57\u7b26\u3002</p>\n\n<p>\u8981\u6c42\u5c3d\u53ef\u80fd\u5747\u5300\u5206\u914d\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u6570\u91cf\u3002\u5982\u679c\u67d0\u4e00\u884c\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u4e0d\u80fd\u5747\u5300\u5206\u914d\uff0c\u5219\u5de6\u4fa7\u653e\u7f6e\u7684\u7a7a\u683c\u6570\u8981\u591a\u4e8e\u53f3\u4fa7\u7684\u7a7a\u683c\u6570\u3002</p>\n\n<p>\u6587\u672c\u7684\u6700\u540e\u4e00\u884c\u5e94\u4e3a\u5de6\u5bf9\u9f50\uff0c\u4e14\u5355\u8bcd\u4e4b\u95f4\u4e0d\u63d2\u5165<strong>\u989d\u5916\u7684</strong>\u7a7a\u683c\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u5355\u8bcd\u662f\u6307\u7531\u975e\u7a7a\u683c\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u5e8f\u5217\u3002</li>\n\t<li>\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u5927\u4e8e 0\uff0c\u5c0f\u4e8e\u7b49\u4e8e&nbsp;<em>maxWidth</em>\u3002</li>\n\t<li>\u8f93\u5165\u5355\u8bcd\u6570\u7ec4 <code>words</code>&nbsp;\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5355\u8bcd\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nwords = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;]\nmaxWidth = 16\n<strong>\u8f93\u51fa:</strong>\n[\n&nbsp; &nbsp;&quot;This &nbsp; &nbsp;is &nbsp; &nbsp;an&quot;,\n&nbsp; &nbsp;&quot;example &nbsp;of text&quot;,\n&nbsp; &nbsp;&quot;justification. &nbsp;&quot;\n]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nwords = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;]\nmaxWidth = 16\n<strong>\u8f93\u51fa:</strong>\n[\n&nbsp; &quot;What &nbsp; must &nbsp; be&quot;,\n&nbsp; &quot;acknowledgment &nbsp;&quot;,\n&nbsp; &quot;shall be &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]\n<strong>\u89e3\u91ca: </strong>\u6ce8\u610f\u6700\u540e\u4e00\u884c\u7684\u683c\u5f0f\u5e94\u4e3a &quot;shall be    &quot; \u800c\u4e0d\u662f &quot;shall     be&quot;,\n&nbsp;    \u56e0\u4e3a\u6700\u540e\u4e00\u884c\u5e94\u4e3a\u5de6\u5bf9\u9f50\uff0c\u800c\u4e0d\u662f\u5de6\u53f3\u4e24\u7aef\u5bf9\u9f50\u3002       \n     \u7b2c\u4e8c\u884c\u540c\u6837\u4e3a\u5de6\u5bf9\u9f50\uff0c\u8fd9\u662f\u56e0\u4e3a\u8fd9\u884c\u53ea\u5305\u542b\u4e00\u4e2a\u5355\u8bcd\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nwords = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,\n&nbsp;        &quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;]\nmaxWidth = 20\n<strong>\u8f93\u51fa:</strong>\n[\n&nbsp; &quot;Science &nbsp;is &nbsp;what we&quot;,\n  &quot;understand &nbsp; &nbsp; &nbsp;well&quot;,\n&nbsp; &quot;enough to explain to&quot;,\n&nbsp; &quot;a &nbsp;computer. &nbsp;Art is&quot;,\n&nbsp; &quot;everything &nbsp;else &nbsp;we&quot;,\n&nbsp; &quot;do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]\n</pre>\n",
        "titleZh": "\u6587\u672c\u5de6\u53f3\u5bf9\u9f50",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Apple",
            "LinkedIn",
            "Airbnb",
            "Snapchat",
            "Twitter",
            "Lyft",
            "Square",
            "Coursera",
            "Box"
        ]
    },
    {
        "leetId": "69",
        "link": "sqrtx",
        "title": "Sqrt(x)",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "35.4%",
        "questionDescription": "<p>Implement <code>int sqrt(int x)</code>.</p>\r\n\r\n<p>Compute and return the square root of <em>x</em>, where&nbsp;<em>x</em>&nbsp;is guaranteed to be a non-negative integer.</p>\r\n\r\n<p>Since the return type&nbsp;is an integer, the decimal digits are truncated and only the integer part of the result&nbsp;is returned.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 4\r\n<strong>Output:</strong> 2\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 8\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> The square root of 8 is 2.82842..., and since \r\n&nbsp;            the decimal part is truncated, 2 is returned.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u5b9e\u73b0&nbsp;<code>int sqrt(int x)</code>&nbsp;\u51fd\u6570\u3002</p>\n\n<p>\u8ba1\u7b97\u5e76\u8fd4\u56de&nbsp;<em>x</em>&nbsp;\u7684\u5e73\u65b9\u6839\uff0c\u5176\u4e2d&nbsp;<em>x </em>\u662f\u975e\u8d1f\u6574\u6570\u3002</p>\n\n<p>\u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u7ed3\u679c\u53ea\u4fdd\u7559\u6574\u6570\u7684\u90e8\u5206\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 4\n<strong>\u8f93\u51fa:</strong> 2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 8\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u8bf4\u660e:</strong> 8 \u7684\u5e73\u65b9\u6839\u662f 2.82842..., \n&nbsp;    \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002\n</pre>\n",
        "titleZh": "x \u7684\u5e73\u65b9\u6839",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "LinkedIn",
            "Alibaba",
            "Salesforce",
            "Hulu",
            "Nvidia"
        ]
    },
    {
        "leetId": "70",
        "link": "climbing-stairs",
        "title": "Climbing Stairs",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "45.0%",
        "questionDescription": "<p>You are climbing a stair case. It takes <em>n</em> steps to reach to the top.</p>\r\n\r\n<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>\r\n\r\n<p><strong>Note:</strong> Given <em>n</em> will be a positive integer.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> There are two ways to climb to the top.\r\n1. 1 step + 1 step\r\n2. 2 steps\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> There are three ways to climb to the top.\r\n1. 1 step + 1 step + 1 step\r\n2. 1 step + 2 steps\r\n3. 2 steps + 1 step\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 <em>n</em>&nbsp;\u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002</p>\n\n<p>\u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u7ed9\u5b9a <em>n</em> \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong> 2\n<strong>\u8f93\u51fa\uff1a</strong> 2\n<strong>\u89e3\u91ca\uff1a</strong> \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002\n1.  1 \u9636 + 1 \u9636\n2.  2 \u9636</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong> 3\n<strong>\u8f93\u51fa\uff1a</strong> 3\n<strong>\u89e3\u91ca\uff1a</strong> \u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002\n1.  1 \u9636 + 1 \u9636 + 1 \u9636\n2.  1 \u9636 + 2 \u9636\n3.  2 \u9636 + 1 \u9636\n</pre>\n",
        "titleZh": "\u722c\u697c\u68af",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Goldman Sachs",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "Zenefits",
            "Nvidia",
            "SAP",
            "NetEase",
            "Aetion"
        ]
    },
    {
        "leetId": "71",
        "link": "simplify-path",
        "title": "Simplify Path",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "35.0%",
        "questionDescription": "<p>Given an <strong>absolute path</strong> for a file (Unix-style), simplify it. Or in other words, convert it to the <strong>canonical path</strong>.</p>\r\n\r\n<p>In a UNIX-style file system, a period <code>.</code>&nbsp;refers to the current directory. Furthermore, a double period <code>..</code>&nbsp;moves the directory up a level. For more information, see:&nbsp;<a href=\"https://www.linuxnix.com/abslute-path-vs-relative-path-in-linuxunix/\" target=\"_blank\">Absolute path&nbsp;vs&nbsp;relative&nbsp;path&nbsp;in&nbsp;Linux/Unix</a></p>\r\n\r\n<p>Note that the returned canonical path must always begin&nbsp;with a slash <code>/</code>, and there must be only a single slash <code>/</code>&nbsp;between two directory names.&nbsp;The last directory name (if it exists) <b>must not</b>&nbsp;end with a trailing <code>/</code>. Also, the canonical path must be the <strong>shortest</strong> string&nbsp;representing the absolute path.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: &quot;</strong><span id=\"example-input-1-1\">/home/&quot;</span>\r\n<strong>Output: &quot;</strong><span id=\"example-output-1\">/home&quot;\r\n<strong>Explanation:</strong> Note that there is no trailing slash after the last directory name.</span>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: &quot;</strong><span id=\"example-input-1-1\">/../&quot;</span>\r\n<strong>Output: &quot;</strong><span id=\"example-output-1\">/&quot;</span>\r\n<strong>Explanation:</strong> Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: &quot;</strong><span id=\"example-input-1-1\">/home//foo/&quot;</span>\r\n<strong>Output: &quot;</strong><span id=\"example-output-1\">/home/foo&quot;</span>\r\n<strong>Explanation: </strong>In the canonical path, multiple consecutive slashes are replaced by a single one.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: &quot;</strong><span id=\"example-input-1-1\">/a/./b/../../c/&quot;</span>\r\n<strong>Output: &quot;</strong><span id=\"example-output-1\">/c&quot;</span>\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: &quot;</strong><span id=\"example-input-1-1\">/a/../../b/../c//.//&quot;</span>\r\n<strong>Output: &quot;</strong><span id=\"example-output-1\">/c&quot;</span>\r\n</pre>\r\n\r\n<p><strong>Example 6:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: &quot;</strong><span id=\"example-input-1-1\">/a//b////c/d//././/..&quot;</span>\r\n<strong>Output: &quot;</strong><span id=\"example-output-1\">/a/b/c&quot;</span>\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u4ee5 Unix \u98ce\u683c\u7ed9\u51fa\u4e00\u4e2a\u6587\u4ef6\u7684<strong>\u7edd\u5bf9\u8def\u5f84</strong>\uff0c\u4f60\u9700\u8981\u7b80\u5316\u5b83\u3002\u6216\u8005\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u89c4\u8303\u8def\u5f84\u3002</p>\n\n<p>\u5728 Unix \u98ce\u683c\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u4e00\u4e2a\u70b9\uff08<code>.</code>\uff09\u8868\u793a\u5f53\u524d\u76ee\u5f55\u672c\u8eab\uff1b\u6b64\u5916\uff0c\u4e24\u4e2a\u70b9 \uff08<code>..</code>\uff09&nbsp;\u8868\u793a\u5c06\u76ee\u5f55\u5207\u6362\u5230\u4e0a\u4e00\u7ea7\uff08\u6307\u5411\u7236\u76ee\u5f55\uff09\uff1b\u4e24\u8005\u90fd\u53ef\u4ee5\u662f\u590d\u6742\u76f8\u5bf9\u8def\u5f84\u7684\u7ec4\u6210\u90e8\u5206\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\uff1a<a href=\"https://blog.csdn.net/u011327334/article/details/50355600\" target=\"_blank\">Linux / Unix\u4e2d\u7684\u7edd\u5bf9\u8def\u5f84 vs \u76f8\u5bf9\u8def\u5f84</a></p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u89c4\u8303\u8def\u5f84\u5fc5\u987b\u59cb\u7ec8\u4ee5\u659c\u6760 <code>/</code> \u5f00\u5934\uff0c\u5e76\u4e14\u4e24\u4e2a\u76ee\u5f55\u540d\u4e4b\u95f4\u5fc5\u987b\u53ea\u6709\u4e00\u4e2a\u659c\u6760 <code>/</code>\u3002\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\u540d\uff08\u5982\u679c\u5b58\u5728\uff09<strong>\u4e0d\u80fd</strong>\u4ee5 <code>/</code> \u7ed3\u5c3e\u3002\u6b64\u5916\uff0c\u89c4\u8303\u8def\u5f84\u5fc5\u987b\u662f\u8868\u793a\u7edd\u5bf9\u8def\u5f84\u7684<strong>\u6700\u77ed</strong>\u5b57\u7b26\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a&quot;</strong>/home/&quot;\n<strong>\u8f93\u51fa\uff1a&quot;</strong>/home&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\u6ce8\u610f\uff0c\u6700\u540e\u4e00\u4e2a\u76ee\u5f55\u540d\u540e\u9762\u6ca1\u6709\u659c\u6760\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a&quot;</strong>/../&quot;\n<strong>\u8f93\u51fa\uff1a&quot;</strong>/&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u6839\u76ee\u5f55\u5411\u4e0a\u4e00\u7ea7\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u56e0\u4e3a\u6839\u662f\u4f60\u53ef\u4ee5\u5230\u8fbe\u7684\u6700\u9ad8\u7ea7\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a&quot;</strong>/home//foo/&quot;\n<strong>\u8f93\u51fa\uff1a&quot;</strong>/home/foo&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\u5728\u89c4\u8303\u8def\u5f84\u4e2d\uff0c\u591a\u4e2a\u8fde\u7eed\u659c\u6760\u9700\u8981\u7528\u4e00\u4e2a\u659c\u6760\u66ff\u6362\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a&quot;</strong>/a/./b/../../c/&quot;\n<strong>\u8f93\u51fa\uff1a&quot;</strong>/c&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a&quot;</strong>/a/../../b/../c//.//&quot;\n<strong>\u8f93\u51fa\uff1a&quot;</strong>/c&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 6\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a&quot;</strong>/a//b////c/d//././/..&quot;\n<strong>\u8f93\u51fa\uff1a&quot;</strong>/a/b/c&quot;</pre>\n",
        "titleZh": "\u7b80\u5316\u8def\u5f84",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe"
        ]
    },
    {
        "leetId": "72",
        "link": "edit-distance",
        "title": "Edit Distance",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "49.1%",
        "questionDescription": "<p>Given two words <em>word1</em> and <em>word2</em>, find the minimum number of operations required to convert <em>word1</em> to <em>word2</em>.</p>\r\n\r\n<p>You have the following 3 operations permitted on a word:</p>\r\n\r\n<ol>\r\n\t<li>Insert a character</li>\r\n\t<li>Delete a character</li>\r\n\t<li>Replace a character</li>\r\n</ol>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> word1 = &quot;horse&quot;, word2 = &quot;ros&quot;\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> \r\nhorse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;)\r\nrorse -&gt; rose (remove &#39;r&#39;)\r\nrose -&gt; ros (remove &#39;e&#39;)\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> word1 = &quot;intention&quot;, word2 = &quot;execution&quot;\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> \r\nintention -&gt; inention (remove &#39;t&#39;)\r\ninention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;)\r\nenention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;)\r\nexention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;)\r\nexection -&gt; execution (insert &#39;u&#39;)\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd&nbsp;<em>word1</em> \u548c&nbsp;<em>word2</em>\uff0c\u8ba1\u7b97\u51fa\u5c06&nbsp;<em>word1</em>&nbsp;\u8f6c\u6362\u6210&nbsp;<em>word2 </em>\u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570&nbsp;\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a</p>\n\n<ol>\n\t<li>\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26</li>\n\t<li>\u5220\u9664\u4e00\u4e2a\u5b57\u7b26</li>\n\t<li>\u66ff\u6362\u4e00\u4e2a\u5b57\u7b26</li>\n</ol>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> word1 = &quot;horse&quot;, word2 = &quot;ros&quot;\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \nhorse -&gt; rorse (\u5c06 &#39;h&#39; \u66ff\u6362\u4e3a &#39;r&#39;)\nrorse -&gt; rose (\u5220\u9664 &#39;r&#39;)\nrose -&gt; ros (\u5220\u9664 &#39;e&#39;)\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> word1 = &quot;intention&quot;, word2 = &quot;execution&quot;\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \nintention -&gt; inention (\u5220\u9664 &#39;t&#39;)\ninention -&gt; enention (\u5c06 &#39;i&#39; \u66ff\u6362\u4e3a &#39;e&#39;)\nenention -&gt; exention (\u5c06 &#39;n&#39; \u66ff\u6362\u4e3a &#39;x&#39;)\nexention -&gt; exection (\u5c06 &#39;n&#39; \u66ff\u6362\u4e3a &#39;c&#39;)\nexection -&gt; execution (\u63d2\u5165 &#39;u&#39;)\n</pre>\n",
        "titleZh": "\u7f16\u8f91\u8ddd\u79bb",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Cisco",
            "NetEase",
            "Square",
            "Huawei",
            "TripleByte"
        ]
    },
    {
        "leetId": "73",
        "link": "set-matrix-zeroes",
        "title": "Set Matrix Zeroes",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "52.5%",
        "questionDescription": "<p>Given a <em>m</em> x <em>n</em> matrix, if an element is 0, set its entire row and column to 0. Do it <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\n[\r\n&nbsp; [1,1,1],\r\n&nbsp; [1,0,1],\r\n&nbsp; [1,1,1]\r\n]\r\n<strong>Output:</strong> \r\n[\r\n&nbsp; [1,0,1],\r\n&nbsp; [0,0,0],\r\n&nbsp; [1,0,1]\r\n]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\n[\r\n&nbsp; [0,1,2,0],\r\n&nbsp; [3,4,5,2],\r\n&nbsp; [1,3,1,5]\r\n]\r\n<strong>Output:</strong> \r\n[\r\n&nbsp; [0,0,0,0],\r\n&nbsp; [0,4,5,0],\r\n&nbsp; [0,3,1,0]\r\n]\r\n</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ul>\r\n\t<li>A straight forward solution using O(<em>m</em><em>n</em>) space is probably a bad idea.</li>\r\n\t<li>A simple improvement uses O(<em>m</em> + <em>n</em>) space, but still not the best solution.</li>\r\n\t<li>Could you devise a constant space solution?</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<em>m</em> x <em>n</em> \u7684\u77e9\u9635\uff0c\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u4e3a 0\uff0c\u5219\u5c06\u5176\u6240\u5728\u884c\u548c\u5217\u7684\u6240\u6709\u5143\u7d20\u90fd\u8bbe\u4e3a 0\u3002\u8bf7\u4f7f\u7528<strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a></strong>\u7b97\u6cd5<strong>\u3002</strong></p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \n[\n&nbsp; [1,1,1],\n&nbsp; [1,0,1],\n&nbsp; [1,1,1]\n]\n<strong>\u8f93\u51fa:</strong> \n[\n&nbsp; [1,0,1],\n&nbsp; [0,0,0],\n&nbsp; [1,0,1]\n]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \n[\n&nbsp; [0,1,2,0],\n&nbsp; [3,4,5,2],\n&nbsp; [1,3,1,5]\n]\n<strong>\u8f93\u51fa:</strong> \n[\n&nbsp; [0,0,0,0],\n&nbsp; [0,4,5,0],\n&nbsp; [0,3,1,0]\n]</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ul>\n\t<li>\u4e00\u4e2a\u76f4\u63a5\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528 &nbsp;O(<em>m</em><em>n</em>)&nbsp;\u7684\u989d\u5916\u7a7a\u95f4\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002</li>\n\t<li>\u4e00\u4e2a\u7b80\u5355\u7684\u6539\u8fdb\u65b9\u6848\u662f\u4f7f\u7528 O(<em>m</em>&nbsp;+&nbsp;<em>n</em>) \u7684\u989d\u5916\u7a7a\u95f4\uff0c\u4f46\u8fd9\u4ecd\u7136\u4e0d\u662f\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002</li>\n\t<li>\u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u5e38\u6570\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u5417\uff1f</li>\n</ul>\n",
        "titleZh": "\u77e9\u9635\u7f6e\u96f6",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Airbnb",
            "Snapchat",
            "Twitter",
            "Oracle",
            "Salesforce",
            "Expedia",
            "Nutanix",
            "TripAdvisor"
        ]
    },
    {
        "leetId": "74",
        "link": "search-a-2d-matrix",
        "title": "Search a 2D Matrix",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "34.2%",
        "questionDescription": "<p>Write an efficient algorithm that searches for a value in an <em>m</em> x <em>n</em> matrix. This matrix has the following properties:</p>\r\n\r\n<ul>\r\n\t<li>Integers in each row are sorted from left to right.</li>\r\n\t<li>The first integer of each row is greater than the last integer of the previous row.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nmatrix = [\r\n  [1,   3,  5,  7],\r\n  [10, 11, 16, 20],\r\n  [23, 30, 34, 50]\r\n]\r\ntarget = 3\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nmatrix = [\r\n  [1,   3,  5,  7],\r\n  [10, 11, 16, 20],\r\n  [23, 30, 34, 50]\r\n]\r\ntarget = 13\r\n<strong>Output:</strong> false</pre>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u5224\u65ad&nbsp;<em>m</em> x <em>n</em>&nbsp;\u77e9\u9635\u4e2d\uff0c\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u76ee\u6807\u503c\u3002\u8be5\u77e9\u9635\u5177\u6709\u5982\u4e0b\u7279\u6027\uff1a</p>\n\n<ul>\n\t<li>\u6bcf\u884c\u4e2d\u7684\u6574\u6570\u4ece\u5de6\u5230\u53f3\u6309\u5347\u5e8f\u6392\u5217\u3002</li>\n\t<li>\u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u5927\u4e8e\u524d\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6574\u6570\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 3\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nmatrix = [\n  [1,   3,  5,  7],\n  [10, 11, 16, 20],\n  [23, 30, 34, 50]\n]\ntarget = 13\n<strong>\u8f93\u51fa:</strong> false</pre>\n",
        "titleZh": "\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Adobe",
            "Apple",
            "Baidu",
            "Twitter",
            "Visa"
        ]
    },
    {
        "leetId": "75",
        "link": "sort-colors",
        "title": "Sort Colors",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "51.7%",
        "questionDescription": "<p>Given an array with <em>n</em> objects colored red, white or blue, sort them <strong><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a>&nbsp;</strong>so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>\r\n\r\n<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;You are not suppose to use the library&#39;s sort function for this problem.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,0,2,1,1,0]\r\n<strong>Output:</strong> [0,0,1,1,2,2]</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ul>\r\n\t<li>A rather straight forward solution is a two-pass algorithm using counting sort.<br />\r\n\tFirst, iterate the array counting number of 0&#39;s, 1&#39;s, and 2&#39;s, then overwrite array with total number of 0&#39;s, then 1&#39;s and followed by 2&#39;s.</li>\r\n\t<li>Could you come up with a&nbsp;one-pass algorithm using only constant space?</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\uff0c\u4e00\u5171&nbsp;<em>n </em>\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a></strong>\u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f\uff0c\u4f7f\u5f97\u76f8\u540c\u989c\u8272\u7684\u5143\u7d20\u76f8\u90bb\uff0c\u5e76\u6309\u7167\u7ea2\u8272\u3001\u767d\u8272\u3001\u84dd\u8272\u987a\u5e8f\u6392\u5217\u3002</p>\n\n<p>\u6b64\u9898\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6574\u6570 0\u3001&nbsp;1 \u548c 2 \u5206\u522b\u8868\u793a\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br>\n\u4e0d\u80fd\u4f7f\u7528\u4ee3\u7801\u5e93\u4e2d\u7684\u6392\u5e8f\u51fd\u6570\u6765\u89e3\u51b3\u8fd9\u9053\u9898\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,0,2,1,1,0]\n<strong>\u8f93\u51fa:</strong> [0,0,1,1,2,2]</pre>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<ul>\n\t<li>\u4e00\u4e2a\u76f4\u89c2\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528\u8ba1\u6570\u6392\u5e8f\u7684\u4e24\u8d9f\u626b\u63cf\u7b97\u6cd5\u3002<br>\n\t\u9996\u5148\uff0c\u8fed\u4ee3\u8ba1\u7b97\u51fa0\u30011 \u548c 2 \u5143\u7d20\u7684\u4e2a\u6570\uff0c\u7136\u540e\u6309\u71670\u30011\u30012\u7684\u6392\u5e8f\uff0c\u91cd\u5199\u5f53\u524d\u6570\u7ec4\u3002</li>\n\t<li>\u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u4ec5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u7684\u4e00\u8d9f\u626b\u63cf\u7b97\u6cd5\u5417\uff1f</li>\n</ul>\n",
        "titleZh": "\u989c\u8272\u5206\u7c7b",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Oracle",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Pocket Gems",
            "Flipkart"
        ]
    },
    {
        "leetId": "76",
        "link": "minimum-window-substring",
        "title": "Minimum Window Substring",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "34.0%",
        "questionDescription": "<p>Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: S</strong> = &quot;ADOBECODEBANC&quot;, <strong>T</strong> = &quot;ABC&quot;\r\n<strong>Output:</strong> &quot;BANC&quot;\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>If there is no such window in S that covers all characters in T, return the empty string <code>&quot;&quot;</code>.</li>\r\n\t<li>If there is such window, you are guaranteed that there will always be only one unique minimum window in S.</li>\r\n</ul>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32 T\uff0c\u8bf7\u5728 S \u4e2d\u627e\u51fa\u5305\u542b T \u6240\u6709\u5b57\u6bcd\u7684\u6700\u5c0f\u5b50\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: S</strong> = &quot;ADOBECODEBANC&quot;, <strong>T</strong> = &quot;ABC&quot;\n<strong>\u8f93\u51fa:</strong> &quot;BANC&quot;</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u5982\u679c S \u4e2d\u4e0d\u5b58\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 <code>&quot;&quot;</code>\u3002</li>\n\t<li>\u5982\u679c S \u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u4fdd\u8bc1\u5b83\u662f\u552f\u4e00\u7684\u7b54\u6848\u3002</li>\n</ul>\n",
        "titleZh": "\u6700\u5c0f\u8986\u76d6\u5b50\u4e32",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Sliding Window",
                "link": "sliding-window",
                "tagZh": null
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Snapchat",
            "Walmart Labs",
            "VMware",
            "LiveRamp",
            "Netsuite"
        ]
    },
    {
        "leetId": "77",
        "link": "combinations",
        "title": "Combinations",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "66.8%",
        "questionDescription": "<p>Given two integers <em>n</em> and <em>k</em>, return all possible combinations of <em>k</em> numbers out of 1 ... <em>n</em>.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;n = 4, k = 2\r\n<strong>Output:</strong>\r\n[\r\n  [2,4],\r\n  [3,4],\r\n  [2,3],\r\n  [1,2],\r\n  [1,3],\r\n  [1,4],\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 <em>n</em> \u548c <em>k</em>\uff0c\u8fd4\u56de 1 ... <em>n </em>\u4e2d\u6240\u6709\u53ef\u80fd\u7684 <em>k</em> \u4e2a\u6570\u7684\u7ec4\u5408\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;n = 4, k = 2\n<strong>\u8f93\u51fa:</strong>\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]</pre>\n",
        "titleZh": "\u7ec4\u5408",
        "tags": [
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft"
        ]
    },
    {
        "leetId": "78",
        "link": "subsets",
        "title": "Subsets",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "72.4%",
        "questionDescription": "<p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets (the power set).</p>\r\n\r\n<p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [1,2,3]\r\n<strong>Output:</strong>\r\n[\r\n  [3],\r\n&nbsp; [1],\r\n&nbsp; [2],\r\n&nbsp; [1,2,3],\r\n&nbsp; [1,3],\r\n&nbsp; [2,3],\r\n&nbsp; [1,2],\r\n&nbsp; []\r\n]</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u7ec4<strong>\u4e0d\u542b\u91cd\u590d\u5143\u7d20</strong>\u7684\u6574\u6570\u6570\u7ec4&nbsp;<em>nums</em>\uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [1,2,3]\n<strong>\u8f93\u51fa:</strong>\n[\n  [3],\n&nbsp; [1],\n&nbsp; [2],\n&nbsp; [1,2,3],\n&nbsp; [1,3],\n&nbsp; [2,3],\n&nbsp; [1,2],\n&nbsp; []\n]</pre>\n",
        "titleZh": "\u5b50\u96c6",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Goldman Sachs",
            "Oracle",
            "Tencent",
            "Walmart Labs",
            "Lyft",
            "Samsung",
            "GoDaddy",
            "Coupang"
        ]
    },
    {
        "leetId": "79",
        "link": "word-search",
        "title": "Word Search",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "36.8%",
        "questionDescription": "<p>Given a 2D board and a word, find if the word exists in the grid.</p>\r\n\r\n<p>The word can be constructed from letters of sequentially adjacent cell, where &quot;adjacent&quot; cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nboard =\r\n[\r\n  [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;E&#39;],\r\n  [&#39;S&#39;,&#39;F&#39;,&#39;C&#39;,&#39;S&#39;],\r\n  [&#39;A&#39;,&#39;D&#39;,&#39;E&#39;,&#39;E&#39;]\r\n]\r\n\r\nGiven word = &quot;<strong>ABCCED</strong>&quot;, return <strong>true</strong>.\r\nGiven word = &quot;<strong>SEE</strong>&quot;, return <strong>true</strong>.\r\nGiven word = &quot;<strong>ABCB</strong>&quot;, return <strong>false</strong>.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c\u548c\u4e00\u4e2a\u5355\u8bcd\uff0c\u627e\u51fa\u8be5\u5355\u8bcd\u662f\u5426\u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\u3002</p>\n\n<p>\u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d&ldquo;\u76f8\u90bb&rdquo;\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>board =\n[\n  [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;E&#39;],\n  [&#39;S&#39;,&#39;F&#39;,&#39;C&#39;,&#39;S&#39;],\n  [&#39;A&#39;,&#39;D&#39;,&#39;E&#39;,&#39;E&#39;]\n]\n\n\u7ed9\u5b9a word = &quot;<strong>ABCCED</strong>&quot;, \u8fd4\u56de <strong>true</strong>.\n\u7ed9\u5b9a word = &quot;<strong>SEE</strong>&quot;, \u8fd4\u56de <strong>true</strong>.\n\u7ed9\u5b9a word = &quot;<strong>ABCB</strong>&quot;, \u8fd4\u56de <strong>false</strong>.</pre>\n",
        "titleZh": "\u5355\u8bcd\u641c\u7d22",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Snapchat",
            "Oracle",
            "Walmart Labs",
            "Lyft",
            "Pinterest",
            "Zillow",
            "Square",
            "JPMorgan",
            "Databricks"
        ]
    },
    {
        "leetId": "80",
        "link": "remove-duplicates-from-sorted-array-ii",
        "title": "Remove Duplicates from Sorted Array II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "48.9%",
        "questionDescription": "<p>Given a sorted array <em>nums</em>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that duplicates appeared at most&nbsp;<em>twice</em> and return the new length.</p>\r\n\r\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\nGiven <em>nums</em> = <strong>[1,1,1,2,2,3]</strong>,\r\n\r\nYour function should return length = <strong><code>5</code></strong>, with the first five elements of <em><code>nums</code></em> being <strong><code>1, 1, 2, 2</code></strong> and <strong>3</strong> respectively.\r\n\r\nIt doesn&#39;t matter what you leave beyond the returned length.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\nGiven <em>nums</em> = <strong>[0,0,1,1,1,1,2,3,3]</strong>,\r\n\r\nYour function should return length = <strong><code>7</code></strong>, with the first seven elements of <em><code>nums</code></em> being modified to&nbsp;<strong><code>0</code></strong>, <strong>0</strong>, <strong>1</strong>, <strong>1</strong>, <strong>2</strong>, <strong>3</strong> and&nbsp;<strong>3</strong> respectively.\r\n\r\nIt doesn&#39;t matter what values are set beyond&nbsp;the returned length.\r\n</pre>\r\n\r\n<p><strong>Clarification:</strong></p>\r\n\r\n<p>Confused why the returned value is an integer but your answer is an array?</p>\r\n\r\n<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>\r\n\r\n<p>Internally you can think of this:</p>\r\n\r\n<pre>\r\n// <strong>nums</strong> is passed in by reference. (i.e., without making a copy)\r\nint len = removeDuplicates(nums);\r\n\r\n// any modification to <strong>nums</strong> in your function would be known by the caller.\r\n// using the length returned by your function, it prints the first <strong>len</strong> elements.\r\nfor (int i = 0; i &lt; len; i++) {\r\n&nbsp; &nbsp; print(nums[i]);\r\n}\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728<strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a></strong>\u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u51fa\u73b0\u4e24\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002</p>\n\n<p>\u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728<strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\" target=\"_blank\">\u539f\u5730</a>\u4fee\u6539\u8f93\u5165\u6570\u7ec4</strong>\u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\u7ed9\u5b9a <em>nums</em> = <strong>[1,1,1,2,2,3]</strong>,\n\n\u51fd\u6570\u5e94\u8fd4\u56de\u65b0\u957f\u5ea6 length = <strong><code>5</code></strong>, \u5e76\u4e14\u539f\u6570\u7ec4\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a <strong><code>1, 1, 2, 2,</code></strong> <strong>3 </strong>\u3002\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\u7ed9\u5b9a <em>nums</em> = <strong>[0,0,1,1,1,1,2,3,3]</strong>,\n\n\u51fd\u6570\u5e94\u8fd4\u56de\u65b0\u957f\u5ea6 length = <strong><code>7</code></strong>, \u5e76\u4e14\u539f\u6570\u7ec4\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a&nbsp;<strong><code>0</code></strong>, <strong>0</strong>, <strong>1</strong>, <strong>1</strong>, <strong>2</strong>, <strong>3</strong>, <strong>3 \u3002</strong>\n\n\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462?</p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5<strong>&ldquo;\u5f15\u7528&rdquo;</strong>\u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b:</p>\n\n<pre>// <strong>nums</strong> \u662f\u4ee5&ldquo;\u5f15\u7528&rdquo;\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d\nint len = removeDuplicates(nums);\n\n// \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002\n// \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d<strong>\u8be5\u957f\u5ea6\u8303\u56f4\u5185</strong>\u7684\u6240\u6709\u5143\u7d20\u3002\nfor (int i = 0; i &lt; len; i++) {\n&nbsp; &nbsp; print(nums[i]);\n}</pre>\n",
        "titleZh": "\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 II",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Bloomberg",
            "Adobe",
            "Baidu"
        ]
    },
    {
        "leetId": "81",
        "link": "search-in-rotated-sorted-array-ii",
        "title": "Search in Rotated Sorted Array II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "33.2%",
        "questionDescription": "<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\r\n\r\n<p>(i.e., <code>[0,0,1,2,2,5,6]</code> might become <code>[2,5,6,0,0,1,2]</code>).</p>\r\n\r\n<p>You are given a target value to search. If found in the array return <code>true</code>, otherwise return <code>false</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [2<code>,5,6,0,0,1,2]</code>, target = 0\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [2<code>,5,6,0,0,1,2]</code>, target = 3\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ul>\r\n\t<li>This is a follow up problem to&nbsp;<a href=\"/problems/search-in-rotated-sorted-array/description/\">Search in Rotated Sorted Array</a>, where <code>nums</code> may contain duplicates.</li>\r\n\t<li>Would this affect the run-time complexity? How and why?</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002</p>\n\n<p>( \u4f8b\u5982\uff0c\u6570\u7ec4&nbsp;<code>[0,0,1,2,2,5,6]</code>&nbsp;\u53ef\u80fd\u53d8\u4e3a&nbsp;<code>[2,5,6,0,0,1,2]</code>&nbsp;)\u3002</p>\n\n<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u7ed9\u5b9a\u7684\u76ee\u6807\u503c\u662f\u5426\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u3002\u82e5\u5b58\u5728\u8fd4\u56de&nbsp;<code>true</code>\uff0c\u5426\u5219\u8fd4\u56de&nbsp;<code>false</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [2<code>,5,6,0,0,1,2]</code>, target = 0\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [2<code>,5,6,0,0,1,2]</code>, target = 3\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ul>\n\t<li>\u8fd9\u662f <a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/description/\">\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4</a>&nbsp;\u7684\u5ef6\u4f38\u9898\u76ee\uff0c\u672c\u9898\u4e2d\u7684&nbsp;<code>nums</code>&nbsp; \u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u3002</li>\n\t<li>\u8fd9\u4f1a\u5f71\u54cd\u5230\u7a0b\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f\u4f1a\u6709\u600e\u6837\u7684\u5f71\u54cd\uff0c\u4e3a\u4ec0\u4e48\uff1f</li>\n</ul>\n",
        "titleZh": "\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 II",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Adobe",
            "LinkedIn",
            "Alibaba",
            "Dropbox"
        ]
    },
    {
        "leetId": "82",
        "link": "remove-duplicates-from-sorted-list-ii",
        "title": "Remove Duplicates from Sorted List II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "40.4%",
        "questionDescription": "<p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only <em>distinct</em> numbers from the original list.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5\r\n<strong>Output:</strong> 1-&gt;2-&gt;5\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;1-&gt;1-&gt;2-&gt;3\r\n<strong>Output:</strong> 2-&gt;3\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u542b\u6709\u91cd\u590d\u6570\u5b57\u7684\u8282\u70b9\uff0c\u53ea\u4fdd\u7559\u539f\u59cb\u94fe\u8868\u4e2d&nbsp;<em>\u6ca1\u6709\u91cd\u590d\u51fa\u73b0&nbsp;</em>\u7684\u6570\u5b57\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5\n<strong>\u8f93\u51fa:</strong> 1-&gt;2-&gt;5\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;1-&gt;1-&gt;2-&gt;3\n<strong>\u8f93\u51fa:</strong> 2-&gt;3</pre>\n",
        "titleZh": "\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 II",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Microsoft",
            "Bloomberg",
            "Salesforce"
        ]
    },
    {
        "leetId": "83",
        "link": "remove-duplicates-from-sorted-list",
        "title": "Remove Duplicates from Sorted List",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "45.2%",
        "questionDescription": "<p>Given a sorted linked list, delete all duplicates such that each element appear only <em>once</em>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;1-&gt;2\r\n<strong>Output:</strong> 1-&gt;2\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;3\r\n<strong>Output:</strong> 1-&gt;2-&gt;3\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;1-&gt;2\n<strong>\u8f93\u51fa:</strong> 1-&gt;2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;3\n<strong>\u8f93\u51fa:</strong> 1-&gt;2-&gt;3</pre>\n",
        "titleZh": "\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Apple",
            "Salesforce",
            "Citrix"
        ]
    },
    {
        "leetId": "84",
        "link": "largest-rectangle-in-histogram",
        "title": "Largest Rectangle in Histogram",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "37.0%",
        "questionDescription": "<p>Given <em>n</em> non-negative integers representing the histogram&#39;s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/histogram.png\" style=\"width: 188px; height: 204px;\" /><br />\r\n<small>Above is a histogram where width of each bar is 1, given height = <code>[2,1,5,6,2,3]</code>.</small></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/histogram_area.png\" style=\"width: 188px; height: 204px;\" /><br />\r\n<small>The largest rectangle is shown in the shaded area, which has area = <code>10</code> unit.</small></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,1,5,6,2,3]\r\n<strong>Output:</strong> 10\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a <em>n</em> \u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u7528\u6765\u8868\u793a\u67f1\u72b6\u56fe\u4e2d\u5404\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u3002\u6bcf\u4e2a\u67f1\u5b50\u5f7c\u6b64\u76f8\u90bb\uff0c\u4e14\u5bbd\u5ea6\u4e3a 1 \u3002</p>\n\n<p>\u6c42\u5728\u8be5\u67f1\u72b6\u56fe\u4e2d\uff0c\u80fd\u591f\u52fe\u52d2\u51fa\u6765\u7684\u77e9\u5f62\u7684\u6700\u5927\u9762\u79ef\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram.png\"></p>\n\n<p><small>\u4ee5\u4e0a\u662f\u67f1\u72b6\u56fe\u7684\u793a\u4f8b\uff0c\u5176\u4e2d\u6bcf\u4e2a\u67f1\u5b50\u7684\u5bbd\u5ea6\u4e3a 1\uff0c\u7ed9\u5b9a\u7684\u9ad8\u5ea6\u4e3a&nbsp;<code>[2,1,5,6,2,3]</code>\u3002</small></p>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram_area.png\"></p>\n\n<p><small>\u56fe\u4e2d\u9634\u5f71\u90e8\u5206\u4e3a\u6240\u80fd\u52fe\u52d2\u51fa\u7684\u6700\u5927\u77e9\u5f62\u9762\u79ef\uff0c\u5176\u9762\u79ef\u4e3a&nbsp;<code>10</code>&nbsp;\u4e2a\u5355\u4f4d\u3002</small></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,1,5,6,2,3]\n<strong>\u8f93\u51fa:</strong> 10</pre>\n",
        "titleZh": "\u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Twitter",
            "Oracle",
            "Walmart Labs",
            "NetEase"
        ]
    },
    {
        "leetId": "85",
        "link": "maximal-rectangle",
        "title": "Maximal Rectangle",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "42.1%",
        "questionDescription": "<p>Given a 2D binary matrix filled with 0&#39;s and 1&#39;s, find the largest rectangle containing only 1&#39;s and return its area.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n[\r\n  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],\r\n  [&quot;1&quot;,&quot;0&quot;,&quot;<strong>1</strong>&quot;,&quot;<strong>1</strong>&quot;,&quot;<strong>1</strong>&quot;],\r\n  [&quot;1&quot;,&quot;1&quot;,&quot;<strong>1</strong>&quot;,&quot;<strong>1</strong>&quot;,&quot;<strong>1</strong>&quot;],\r\n  [&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]\r\n]\r\n<strong>Output:</strong> 6\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b&nbsp;0 \u548c 1 \u7684\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u77e9\u9635\uff0c\u627e\u51fa\u53ea\u5305\u542b 1 \u7684\u6700\u5927\u77e9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[\n  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;0&quot;,&quot;<strong>1</strong>&quot;,&quot;<strong>1</strong>&quot;,&quot;<strong>1</strong>&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;<strong>1</strong>&quot;,&quot;<strong>1</strong>&quot;,&quot;<strong>1</strong>&quot;],\n  [&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]\n]\n<strong>\u8f93\u51fa:</strong> 6</pre>\n",
        "titleZh": "\u6700\u5927\u77e9\u5f62",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Adobe",
            "VMware",
            "Cisco",
            "Intuit",
            "Indeed",
            "Affirm"
        ]
    },
    {
        "leetId": "86",
        "link": "partition-list",
        "title": "Partition List",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "47.4%",
        "questionDescription": "<p>Given a linked list and a value <em>x</em>, partition it such that all nodes less than <em>x</em> come before nodes greater than or equal to <em>x</em>.</p>\r\n\r\n<p>You should preserve the original relative order of the nodes in each of the two partitions.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, <em>x</em> = 3\r\n<strong>Output:</strong> 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u548c\u4e00\u4e2a\u7279\u5b9a\u503c<em> x</em>\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u5206\u9694\uff0c\u4f7f\u5f97\u6240\u6709\u5c0f\u4e8e <em>x</em> \u7684\u8282\u70b9\u90fd\u5728\u5927\u4e8e\u6216\u7b49\u4e8e <em>x</em> \u7684\u8282\u70b9\u4e4b\u524d\u3002</p>\n\n<p>\u4f60\u5e94\u5f53\u4fdd\u7559\u4e24\u4e2a\u5206\u533a\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u521d\u59cb\u76f8\u5bf9\u4f4d\u7f6e\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, <em>x</em> = 3\n<strong>\u8f93\u51fa:</strong> 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5\n</pre>\n",
        "titleZh": "\u5206\u9694\u94fe\u8868",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Amazon",
            "Microsoft"
        ]
    },
    {
        "leetId": "87",
        "link": "scramble-string",
        "title": "Scramble String",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "40.6%",
        "questionDescription": "<p>Given a string <em>s1</em>, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.</p>\r\n\r\n<p>Below is one possible representation of <em>s1</em> = <code>&quot;great&quot;</code>:</p>\r\n\r\n<pre>\r\n    great\r\n   /    \\\r\n  gr    eat\r\n / \\    /  \\\r\ng   r  e   at\r\n           / \\\r\n          a   t\r\n</pre>\r\n\r\n<p>To scramble the string, we may choose any non-leaf node and swap its two children.</p>\r\n\r\n<p>For example, if we choose the node <code>&quot;gr&quot;</code> and swap its two children, it produces a scrambled string <code>&quot;rgeat&quot;</code>.</p>\r\n\r\n<pre>\r\n    rgeat\r\n   /    \\\r\n  rg    eat\r\n / \\    /  \\\r\nr   g  e   at\r\n           / \\\r\n          a   t\r\n</pre>\r\n\r\n<p>We say that <code>&quot;rgeat&quot;</code> is a scrambled string of <code>&quot;great&quot;</code>.</p>\r\n\r\n<p>Similarly, if we continue to swap the children of nodes <code>&quot;eat&quot;</code> and <code>&quot;at&quot;</code>, it produces a scrambled string <code>&quot;rgtae&quot;</code>.</p>\r\n\r\n<pre>\r\n    rgtae\r\n   /    \\\r\n  rg    tae\r\n / \\    /  \\\r\nr   g  ta  e\r\n       / \\\r\n      t   a\r\n</pre>\r\n\r\n<p>We say that <code>&quot;rgtae&quot;</code> is a scrambled string of <code>&quot;great&quot;</code>.</p>\r\n\r\n<p>Given two strings <em>s1</em> and <em>s2</em> of the same length, determine if <em>s2</em> is a scrambled string of <em>s1</em>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s1 = &quot;great&quot;, s2 = &quot;rgeat&quot;\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot;\r\n<strong>Output:</strong> false</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<em>s1</em>\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u9012\u5f52\u5730\u5206\u5272\u6210\u4e24\u4e2a\u975e\u7a7a\u5b50\u5b57\u7b26\u4e32\uff0c\u4ece\u800c\u5c06\u5176\u8868\u793a\u4e3a\u4e8c\u53c9\u6811\u3002</p>\n\n<p>\u4e0b\u56fe\u662f\u5b57\u7b26\u4e32&nbsp;<em>s1</em>&nbsp;=&nbsp;<code>&quot;great&quot;</code>&nbsp;\u7684\u4e00\u79cd\u53ef\u80fd\u7684\u8868\u793a\u5f62\u5f0f\u3002</p>\n\n<pre>    great\n   /    \\\n  gr    eat\n / \\    /  \\\ng   r  e   at\n           / \\\n          a   t\n</pre>\n\n<p>\u5728\u6270\u4e71\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u6311\u9009\u4efb\u4f55\u4e00\u4e2a\u975e\u53f6\u8282\u70b9\uff0c\u7136\u540e\u4ea4\u6362\u5b83\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u6311\u9009\u975e\u53f6\u8282\u70b9&nbsp;<code>&quot;gr&quot;</code>&nbsp;\uff0c\u4ea4\u6362\u5b83\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u5c06\u4f1a\u4ea7\u751f\u6270\u4e71\u5b57\u7b26\u4e32&nbsp;<code>&quot;rgeat&quot;</code>&nbsp;\u3002</p>\n\n<pre>    rgeat\n   /    \\\n  rg    eat\n / \\    /  \\\nr   g  e   at\n           / \\\n          a   t\n</pre>\n\n<p>\u6211\u4eec\u5c06&nbsp;<code>&quot;rgeat&rdquo;</code>&nbsp;\u79f0\u4f5c&nbsp;<code>&quot;great&quot;</code>&nbsp;\u7684\u4e00\u4e2a\u6270\u4e71\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u540c\u6837\u5730\uff0c\u5982\u679c\u6211\u4eec\u7ee7\u7eed\u5c06\u5176\u8282\u70b9&nbsp;<code>&quot;eat&quot;</code>&nbsp;\u548c&nbsp;<code>&quot;at&quot;</code>&nbsp;\u8fdb\u884c\u4ea4\u6362\uff0c\u5c06\u4f1a\u4ea7\u751f\u53e6\u4e00\u4e2a\u65b0\u7684\u6270\u4e71\u5b57\u7b26\u4e32&nbsp;<code>&quot;rgtae&quot;</code>&nbsp;\u3002</p>\n\n<pre>    rgtae\n   /    \\\n  rg    tae\n / \\    /  \\\nr   g  ta  e\n       / \\\n      t   a\n</pre>\n\n<p>\u6211\u4eec\u5c06&nbsp;<code>&quot;rgtae&rdquo;</code>&nbsp;\u79f0\u4f5c&nbsp;<code>&quot;great&quot;</code>&nbsp;\u7684\u4e00\u4e2a\u6270\u4e71\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u7ed9\u51fa\u4e24\u4e2a\u957f\u5ea6\u76f8\u7b49\u7684\u5b57\u7b26\u4e32 <em>s1 </em>\u548c&nbsp;<em>s2</em>\uff0c\u5224\u65ad&nbsp;<em>s2&nbsp;</em>\u662f\u5426\u662f&nbsp;<em>s1&nbsp;</em>\u7684\u6270\u4e71\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s1 = &quot;great&quot;, s2 = &quot;rgeat&quot;\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot;\n<strong>\u8f93\u51fa:</strong> false</pre>\n",
        "titleZh": "\u6270\u4e71\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "88",
        "link": "merge-sorted-array",
        "title": "Merge Sorted Array",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "43.7%",
        "questionDescription": "<p>Given two sorted integer arrays <em>nums1</em> and <em>nums2</em>, merge <em>nums2</em> into <em>nums1</em> as one sorted array.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of elements initialized in <em>nums1</em> and <em>nums2</em> are <em>m</em> and <em>n</em> respectively.</li>\r\n\t<li>You may assume that <em>nums1</em> has enough space (size that is greater or equal to <em>m</em> + <em>n</em>) to hold additional elements from <em>nums2</em>.</li>\r\n</ul>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nnums1 = [1,2,3,0,0,0], m = 3\r\nnums2 = [2,5,6],       n = 3\r\n\r\n<strong>Output:</strong>&nbsp;[1,2,2,3,5,6]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4&nbsp;<em>nums1 </em>\u548c <em>nums2</em>\uff0c\u5c06 <em>nums2 </em>\u5408\u5e76\u5230&nbsp;<em>nums1&nbsp;</em>\u4e2d<em>\uff0c</em>\u4f7f\u5f97&nbsp;<em>num1 </em>\u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u521d\u59cb\u5316&nbsp;<em>nums1</em> \u548c <em>nums2</em> \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a&nbsp;<em>m</em> \u548c <em>n</em>\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<em>nums1&nbsp;</em>\u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e&nbsp;<em>m + n</em>\uff09\u6765\u4fdd\u5b58 <em>nums2</em> \u4e2d\u7684\u5143\u7d20\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n<strong>\u8f93\u51fa:</strong>&nbsp;[1,2,2,3,5,6]</pre>\n",
        "titleZh": "\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Airbnb",
            "Baidu",
            "Goldman Sachs",
            "Yelp",
            "Tencent",
            "Walmart Labs",
            "Expedia",
            "Cisco",
            "Indeed",
            "Intel",
            "IBM",
            "Citrix",
            "Morgan Stanley",
            "Quip"
        ]
    },
    {
        "leetId": "89",
        "link": "gray-code",
        "title": "Gray Code",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "63.9%",
        "questionDescription": "<p>The gray code is a binary numeral system where two successive values differ in only one bit.</p>\r\n\r\n<p>Given a non-negative integer <em>n</em> representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;2\r\n<strong>Output:</strong>&nbsp;<code>[0,1,3,2]</code>\r\n<strong>Explanation:</strong>\r\n00 - 0\r\n01 - 1\r\n11 - 3\r\n10 - 2\r\n\r\nFor a given&nbsp;<em>n</em>, a gray code sequence may not be uniquely defined.\r\nFor example, [0,2,3,1] is also a valid gray code sequence.\r\n\r\n00 - 0\r\n10 - 2\r\n11 - 3\r\n01 - 1\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;0\r\n<strong>Output:</strong>&nbsp;<code>[0]\r\n<strong>Explanation:</strong> We define the gray code sequence to begin with 0.\r\n&nbsp;            A gray code sequence of <em>n</em> has size = 2<sup>n</sup>, which for <em>n</em> = 0 the size is 2<sup>0</sup> = 1.\r\n&nbsp;            Therefore, for <em>n</em> = 0 the gray code sequence is [0].</code>\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u683c\u96f7\u7f16\u7801\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u5b57\u7cfb\u7edf\uff0c\u5728\u8be5\u7cfb\u7edf\u4e2d\uff0c\u4e24\u4e2a\u8fde\u7eed\u7684\u6570\u503c\u4ec5\u6709\u4e00\u4e2a\u4f4d\u6570\u7684\u5dee\u5f02\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u7f16\u7801\u603b\u4f4d\u6570\u7684\u975e\u8d1f\u6574\u6570<em> n</em>\uff0c\u6253\u5370\u5176\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u3002\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u5fc5\u987b\u4ee5 0 \u5f00\u5934\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;2\n<strong>\u8f93\u51fa:</strong>&nbsp;<code>[0,1,3,2]</code>\n<strong>\u89e3\u91ca:</strong>\n00 - 0\n01 - 1\n11 - 3\n10 - 2\n\n\u5bf9\u4e8e\u7ed9\u5b9a\u7684&nbsp;<em>n</em>\uff0c\u5176\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u5e76\u4e0d\u552f\u4e00\u3002\n\u4f8b\u5982\uff0c<code>[0,2,3,1]</code>&nbsp;\u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u3002\n\n00 - 0\n10 - 2\n11 - 3\n01 - 1</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;0\n<strong>\u8f93\u51fa:</strong>&nbsp;<code>[0]\n<strong>\u89e3\u91ca:</strong> \u6211\u4eec\u5b9a\u4e49</code>\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u5fc5\u987b\u4ee5 0 \u5f00\u5934\u3002<code>\n&nbsp;    \u7ed9\u5b9a</code>\u7f16\u7801\u603b\u4f4d\u6570\u4e3a<code> <em>n</em> \u7684\u683c\u96f7\u7f16\u7801\u5e8f\u5217\uff0c\u5176\u957f\u5ea6\u4e3a 2<sup>n</sup></code>\u3002<code>\u5f53 <em>n</em> = 0 \u65f6\uff0c\u957f\u5ea6\u4e3a 2<sup>0</sup> = 1\u3002\n&nbsp;    \u56e0\u6b64\uff0c\u5f53 <em>n</em> = 0 \u65f6\uff0c\u5176\u683c\u96f7\u7f16\u7801\u5e8f\u5217\u4e3a [0]\u3002</code>\n</pre>\n",
        "titleZh": "\u683c\u96f7\u7f16\u7801",
        "tags": [
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft"
        ]
    },
    {
        "leetId": "90",
        "link": "subsets-ii",
        "title": "Subsets II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "53.7%",
        "questionDescription": "<p>Given a collection of integers that might contain duplicates, <strong><em>nums</em></strong>, return all possible subsets (the power set).</p>\r\n\r\n<p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,2]\r\n<strong>Output:</strong>\r\n[\r\n  [2],\r\n  [1],\r\n  [1,2,2],\r\n  [2,2],\r\n  [1,2],\r\n  []\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4 <em><strong>nums</strong></em>\uff0c\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,2]\n<strong>\u8f93\u51fa:</strong>\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]</pre>\n",
        "titleZh": "\u5b50\u96c6 II",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg"
        ]
    },
    {
        "leetId": "91",
        "link": "decode-ways",
        "title": "Decode Ways",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "20.1%",
        "questionDescription": "<p>A message containing letters from <code>A-Z</code> is being encoded to numbers using the following mapping:</p>\r\n\r\n<pre>\r\n&#39;A&#39; -&gt; 1\r\n&#39;B&#39; -&gt; 2\r\n...\r\n&#39;Z&#39; -&gt; 26\r\n</pre>\r\n\r\n<p>Given a <strong>non-empty</strong> string containing only digits, determine the total number of ways to decode it.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;12&quot;\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong>&nbsp;It could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;226&quot;\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong>&nbsp;It could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).</pre>\r\n",
        "questionDescriptionZh": "<p>\u4e00\u6761\u5305\u542b\u5b57\u6bcd&nbsp;<code>A-Z</code> \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a</p>\n\n<pre>&#39;A&#39; -&gt; 1\n&#39;B&#39; -&gt; 2\n...\n&#39;Z&#39; -&gt; 26\n</pre>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684<strong>\u975e\u7a7a</strong>\u5b57\u7b26\u4e32\uff0c\u8bf7\u8ba1\u7b97\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;12&quot;\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong>&nbsp;\u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a &quot;AB&quot;\uff081 2\uff09\u6216\u8005 &quot;L&quot;\uff0812\uff09\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;226&quot;\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong>&nbsp;\u5b83\u53ef\u4ee5\u89e3\u7801\u4e3a &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), \u6216\u8005 &quot;BBF&quot; (2 2 6) \u3002\n</pre>\n",
        "titleZh": "\u89e3\u7801\u65b9\u6cd5",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "Yahoo",
            "Twitter",
            "Goldman Sachs",
            "Salesforce",
            "Expedia",
            "Pinterest",
            "Square",
            "Databricks",
            "LiveRamp"
        ]
    },
    {
        "leetId": "92",
        "link": "reverse-linked-list-ii",
        "title": "Reverse Linked List II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "42.9%",
        "questionDescription": "<p>Reverse a linked list from position <em>m</em> to <em>n</em>. Do it in one-pass.</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>1 &le; <em>m</em> &le; <em>n</em> &le; length of list.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, <em>m</em> = 2, <em>n</em> = 4\r\n<strong>Output:</strong> 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u53cd\u8f6c\u4ece\u4f4d\u7f6e <em>m</em> \u5230 <em>n</em> \u7684\u94fe\u8868\u3002\u8bf7\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b8c\u6210\u53cd\u8f6c\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n1 &le;&nbsp;<em>m</em>&nbsp;&le;&nbsp;<em>n</em>&nbsp;&le; \u94fe\u8868\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, <em>m</em> = 2, <em>n</em> = 4\n<strong>\u8f93\u51fa:</strong> 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</pre>\n",
        "titleZh": "\u53cd\u8f6c\u94fe\u8868 II",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Tencent",
            "VMware",
            "Cisco"
        ]
    },
    {
        "leetId": "93",
        "link": "restore-ip-addresses",
        "title": "Restore IP Addresses",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "43.5%",
        "questionDescription": "<p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;25525511135&quot;\r\n<strong>Output:</strong> <code>[&quot;255.255.11.135&quot;, &quot;255.255.111.35&quot;]\r\n</code></pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u5b57\u7b26\u4e32\uff0c\u590d\u539f\u5b83\u5e76\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684 IP \u5730\u5740\u683c\u5f0f\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;25525511135&quot;\n<strong>\u8f93\u51fa:</strong> <code>[&quot;255.255.11.135&quot;, &quot;255.255.111.35&quot;]</code></pre>\n",
        "titleZh": "\u590d\u539fIP\u5730\u5740",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Baidu",
            "Snapchat",
            "Wish"
        ]
    },
    {
        "leetId": "94",
        "link": "binary-tree-inorder-traversal",
        "title": "Binary Tree Inorder Traversal",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "64.9%",
        "questionDescription": "<p>Given a binary tree, return the <em>inorder</em> traversal of its nodes&#39; values.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,null,2,3]\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   3\r\n\r\n<strong>Output:</strong> [1,3,2]</pre>\r\n\r\n<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684<em>\u4e2d\u5e8f&nbsp;</em>\u904d\u5386\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\n<strong>\u8f93\u51fa:</strong> [1,3,2]</pre>\n\n<p><strong>\u8fdb\u9636:</strong>&nbsp;\u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f</p>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Yahoo",
            "Alibaba",
            "Oracle",
            "eBay",
            "VMware",
            "Palantir Technologies",
            "Palantir"
        ]
    },
    {
        "leetId": "95",
        "link": "unique-binary-search-trees-ii",
        "title": "Unique Binary Search Trees II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "53.0%",
        "questionDescription": "<p>Given an integer <em>n</em>, generate all structurally unique <strong>BST&#39;s</strong> (binary search trees) that store values 1 ...&nbsp;<em>n</em>.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong>\r\n[\r\n&nbsp; [1,null,3,2],\r\n&nbsp; [3,2,null,1],\r\n&nbsp; [3,1,null,null,2],\r\n&nbsp; [2,1,3],\r\n&nbsp; [1,null,2,null,3]\r\n]\r\n<strong>Explanation:</strong>\r\nThe above output corresponds to the 5 unique BST&#39;s shown below:\r\n\r\n   1         3     3      2      1\r\n    \\       /     /      / \\      \\\r\n     3     2     1      1   3      2\r\n    /     /       \\                 \\\r\n   2     1         2                 3\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 <em>n</em>\uff0c\u751f\u6210\u6240\u6709\u7531 1 ...&nbsp;<em>n</em> \u4e3a\u8282\u70b9\u6240\u7ec4\u6210\u7684<strong>\u4e8c\u53c9\u641c\u7d22\u6811</strong>\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 3\n<strong>\u8f93\u51fa:</strong>\n[\n&nbsp; [1,null,3,2],\n&nbsp; [3,2,null,1],\n&nbsp; [3,1,null,null,2],\n&nbsp; [2,1,3],\n&nbsp; [1,null,2,null,3]\n]\n<strong>\u89e3\u91ca:</strong>\n\u4ee5\u4e0a\u7684\u8f93\u51fa\u5bf9\u5e94\u4ee5\u4e0b 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff1a\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n</pre>\n",
        "titleZh": "\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Bloomberg",
            "Adobe",
            "Yahoo"
        ]
    },
    {
        "leetId": "96",
        "link": "unique-binary-search-trees",
        "title": "Unique Binary Search Trees",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "59.2%",
        "questionDescription": "<p>Given <em>n</em>, how many structurally unique <strong>BST&#39;s</strong> (binary search trees) that store values 1 ...&nbsp;<em>n</em>?</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:\r\n</strong>Given <em>n</em> = 3, there are a total of 5 unique BST&#39;s:\r\n\r\n   1         3     3      2      1\r\n    \\       /     /      / \\      \\\r\n     3     2     1      1   3      2\r\n    /     /       \\                 \\\r\n   2     1         2                 3\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 <em>n</em>\uff0c\u6c42\u4ee5&nbsp;1 ...&nbsp;<em>n</em>&nbsp;\u4e3a\u8282\u70b9\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u6709\u591a\u5c11\u79cd\uff1f</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 3\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:\n</strong>\u7ed9\u5b9a <em>n</em> = 3, \u4e00\u5171\u6709 5 \u79cd\u4e0d\u540c\u7ed3\u6784\u7684\u4e8c\u53c9\u641c\u7d22\u6811:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3</pre>\n",
        "titleZh": "\u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Adobe",
            "Snapchat"
        ]
    },
    {
        "leetId": "97",
        "link": "interleaving-string",
        "title": "Interleaving String",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "36.5%",
        "questionDescription": "<p>Given <em>s1</em>, <em>s2</em>, <em>s3</em>, find whether <em>s3</em> is formed by the interleaving of <em>s1</em> and <em>s2</em>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, <em>s3</em> = &quot;aadbbcbcac&quot;\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, <em>s3</em> = &quot;aadbbbaccc&quot;\r\n<strong>Output:</strong> false\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e09\u4e2a\u5b57\u7b26\u4e32&nbsp;<em>s1</em>, <em>s2</em>, <em>s3</em>, \u9a8c\u8bc1&nbsp;<em>s3</em>&nbsp;\u662f\u5426\u662f\u7531&nbsp;<em>s1</em>&nbsp;\u548c&nbsp;<em>s2 </em>\u4ea4\u9519\u7ec4\u6210\u7684\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, <em>s3</em> = &quot;aadbbcbcac&quot;\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s1 = &quot;aabcc&quot;, s2 = &quot;dbbca&quot;, <em>s3</em> = &quot;aadbbbaccc&quot;\n<strong>\u8f93\u51fa:</strong> false</pre>\n",
        "titleZh": "\u4ea4\u9519\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "Nvidia",
            "Aetion"
        ]
    },
    {
        "leetId": "98",
        "link": "validate-binary-search-tree",
        "title": "Validate Binary Search Tree",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "25.3%",
        "questionDescription": "<p>Given a binary tree, determine if it is a valid binary search tree (BST).</p>\r\n\r\n<p>Assume a BST is defined as follows:</p>\r\n\r\n<ul>\r\n\t<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node&#39;s key.</li>\r\n\t<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node&#39;s key.</li>\r\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n    2\r\n   / \\\r\n  1   3\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n    5\r\n   / \\\r\n  1   4\r\n&nbsp;    / \\\r\n&nbsp;   3   6\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> The input is: [5,1,4,null,null,3,6]. The root node&#39;s value\r\n&nbsp;            is 5 but its right child&#39;s value is 4.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p>\n\n<p>\u5047\u8bbe\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a</p>\n\n<ul>\n\t<li>\u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b<strong>\u5c0f\u4e8e</strong>\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002</li>\n\t<li>\u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b<strong>\u5927\u4e8e</strong>\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002</li>\n\t<li>\u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n    2\n   / \\\n  1   3\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:\n</strong>    5\n   / \\\n  1   4\n&nbsp;    / \\\n&nbsp;   3   6\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u8f93\u5165\u4e3a: [5,1,4,null,null,3,6]\u3002\n&nbsp;    \u6839\u8282\u70b9\u7684\u503c\u4e3a 5 \uff0c\u4f46\u662f\u5176\u53f3\u5b50\u8282\u70b9\u503c\u4e3a 4 \u3002\n</pre>\n",
        "titleZh": "\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Snapchat",
            "Goldman Sachs",
            "Walmart Labs",
            "VMware",
            "Zillow",
            "Nutanix",
            "Nvidia",
            "SAP",
            "Visa",
            "Square",
            "Qualtrics",
            "Capital One",
            "TripAdvisor"
        ]
    },
    {
        "leetId": "99",
        "link": "recover-binary-search-tree",
        "title": "Recover Binary Search Tree",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "52.4%",
        "questionDescription": "<p>Two elements of a binary search tree (BST) are swapped by mistake.</p>\r\n\r\n<p>Recover the tree without changing its structure.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,3,null,null,2]\r\n\r\n&nbsp;  1\r\n&nbsp; /\r\n&nbsp;3\r\n&nbsp; \\\r\n&nbsp;  2\r\n\r\n<strong>Output:</strong> [3,1,null,null,2]\r\n\r\n&nbsp;  3\r\n&nbsp; /\r\n&nbsp;1\r\n&nbsp; \\\r\n&nbsp;  2\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [3,1,4,null,null,2]\r\n\r\n  3\r\n / \\\r\n1   4\r\n&nbsp;  /\r\n&nbsp; 2\r\n\r\n<strong>Output:</strong> [2,1,4,null,null,3]\r\n\r\n  2\r\n / \\\r\n1   4\r\n&nbsp;  /\r\n &nbsp;3\r\n</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ul>\r\n\t<li>A solution using O(<em>n</em>) space is pretty straight forward.</li>\r\n\t<li>Could you devise a constant space solution?</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4e24\u4e2a\u8282\u70b9\u88ab\u9519\u8bef\u5730\u4ea4\u6362\u3002</p>\n\n<p>\u8bf7\u5728\u4e0d\u6539\u53d8\u5176\u7ed3\u6784\u7684\u60c5\u51b5\u4e0b\uff0c\u6062\u590d\u8fd9\u68f5\u6811\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,3,null,null,2]\n\n&nbsp;  1\n&nbsp; /\n&nbsp;3\n&nbsp; \\\n&nbsp;  2\n\n<strong>\u8f93\u51fa:</strong> [3,1,null,null,2]\n\n&nbsp;  3\n&nbsp; /\n&nbsp;1\n&nbsp; \\\n&nbsp;  2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [3,1,4,null,null,2]\n\n  3\n / \\\n1   4\n&nbsp;  /\n&nbsp; 2\n\n<strong>\u8f93\u51fa:</strong> [2,1,4,null,null,3]\n\n  2\n / \\\n1   4\n&nbsp;  /\n &nbsp;3</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ul>\n\t<li>\u4f7f\u7528 O(<em>n</em>) \u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5\u5f88\u5bb9\u6613\u5b9e\u73b0\u3002</li>\n\t<li>\u4f60\u80fd\u60f3\u51fa\u4e00\u4e2a\u53ea\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u5417\uff1f</li>\n</ul>\n",
        "titleZh": "\u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Adobe",
            "Palantir Technologies",
            "Palantir"
        ]
    },
    {
        "leetId": "100",
        "link": "same-tree",
        "title": "Same Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "52.4%",
        "questionDescription": "<p>Given two binary trees, write a function to check if they are the same or not.</p>\r\n\r\n<p>Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>     1         1\r\n          / \\       / \\\r\n         2   3     2   3\r\n\r\n        [1,2,3],   [1,2,3]\r\n\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>     1         1\r\n          /           \\\r\n         2             2\r\n\r\n        [1,2],     [1,null,2]\r\n\r\n<strong>Output:</strong> false\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>     1         1\r\n          / \\       / \\\r\n         2   1     1   2\r\n\r\n        [1,2,1],   [1,1,2]\r\n\r\n<strong>Output:</strong> false\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u5b83\u4eec\u662f\u5426\u76f8\u540c\u3002</p>\n\n<p>\u5982\u679c\u4e24\u4e2a\u6811\u5728\u7ed3\u6784\u4e0a\u76f8\u540c\uff0c\u5e76\u4e14\u8282\u70b9\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u5219\u8ba4\u4e3a\u5b83\u4eec\u662f\u76f8\u540c\u7684\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>      1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:  </strong>    1          1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\n<strong>\u8f93\u51fa:</strong> false\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>       1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\n<strong>\u8f93\u51fa:</strong> false\n</pre>\n",
        "titleZh": "\u76f8\u540c\u7684\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "LinkedIn",
            "Cisco"
        ]
    },
    {
        "leetId": "101",
        "link": "symmetric-tree",
        "title": "Symmetric Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "46.0%",
        "questionDescription": "<p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>\r\n\r\n<p>\r\nFor example, this binary tree <code>[1,2,2,3,4,4,3]</code> is symmetric:\r\n<pre>\r\n    1\r\n   / \\\r\n  2   2\r\n / \\ / \\\r\n3  4 4  3\r\n</pre>\r\n</p>\r\n<p>\r\nBut the following <code>[1,2,2,null,3,null,3]</code>  is not:<br />\r\n<pre>\r\n    1\r\n   / \\\r\n  2   2\r\n   \\   \\\r\n   3    3\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b><br />\r\nBonus points if you could solve it both recursively and iteratively.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u4e8c\u53c9\u6811&nbsp;<code>[1,2,2,3,4,4,3]</code> \u662f\u5bf9\u79f0\u7684\u3002</p>\n\n<pre>    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n</pre>\n\n<p>\u4f46\u662f\u4e0b\u9762\u8fd9\u4e2a&nbsp;<code>[1,2,2,null,3,null,3]</code> \u5219\u4e0d\u662f\u955c\u50cf\u5bf9\u79f0\u7684:</p>\n\n<pre>    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u5982\u679c\u4f60\u53ef\u4ee5\u8fd0\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f1a\u5f88\u52a0\u5206\u3002</p>\n",
        "titleZh": "\u5bf9\u79f0\u4e8c\u53c9\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Oracle",
            "Tencent"
        ]
    },
    {
        "leetId": "102",
        "link": "binary-tree-level-order-traversal",
        "title": "Binary Tree Level Order Traversal",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "55.2%",
        "questionDescription": "<p>Given a binary tree, return the <i>level order</i> traversal of its nodes' values. (ie, from left to right, level by level).</p>\r\n\r\n<p>\r\nFor example:<br />\r\nGiven binary tree <code>[3,9,20,null,null,15,7]</code>,<br />\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n</pre>\r\n</p>\r\n<p>\r\nreturn its level order traversal as:<br />\r\n<pre>\r\n[\r\n  [3],\r\n  [9,20],\r\n  [15,7]\r\n]\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u6309\u5c42\u6b21\u904d\u5386\u7684\u8282\u70b9\u503c\u3002 \uff08\u5373\u9010\u5c42\u5730\uff0c\u4ece\u5de6\u5230\u53f3\u8bbf\u95ee\u6240\u6709\u8282\u70b9\uff09\u3002</p>\n\n<p>\u4f8b\u5982:<br>\n\u7ed9\u5b9a\u4e8c\u53c9\u6811:&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n\n<p>\u8fd4\u56de\u5176\u5c42\u6b21\u904d\u5386\u7ed3\u679c\uff1a</p>\n\n<pre>[\n  [3],\n  [9,20],\n  [15,7]\n]\n</pre>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Oracle",
            "eBay",
            "Walmart Labs",
            "Salesforce",
            "Paypal",
            "TripAdvisor"
        ]
    },
    {
        "leetId": "103",
        "link": "binary-tree-zigzag-level-order-traversal",
        "title": "Binary Tree Zigzag Level Order Traversal",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "48.6%",
        "questionDescription": "<p>Given a binary tree, return the <i>zigzag level order</i> traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).</p>\r\n\r\n<p>\r\nFor example:<br />\r\nGiven binary tree <code>[3,9,20,null,null,15,7]</code>,<br />\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n</pre>\r\n</p>\r\n<p>\r\nreturn its zigzag level order traversal as:<br />\r\n<pre>\r\n[\r\n  [3],\r\n  [20,9],\r\n  [15,7]\r\n]\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684\u952f\u9f7f\u5f62\u5c42\u6b21\u904d\u5386\u3002\uff08\u5373\u5148\u4ece\u5de6\u5f80\u53f3\uff0c\u518d\u4ece\u53f3\u5f80\u5de6\u8fdb\u884c\u4e0b\u4e00\u5c42\u904d\u5386\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5c42\u4e0e\u5c42\u4e4b\u95f4\u4ea4\u66ff\u8fdb\u884c\uff09\u3002</p>\n\n<p>\u4f8b\u5982\uff1a<br>\n\u7ed9\u5b9a\u4e8c\u53c9\u6811&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n\n<p>\u8fd4\u56de\u952f\u9f7f\u5f62\u5c42\u6b21\u904d\u5386\u5982\u4e0b\uff1a</p>\n\n<pre>[\n  [3],\n  [20,9],\n  [15,7]\n]\n</pre>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u6b21\u904d\u5386",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Goldman Sachs",
            "Oracle",
            "eBay",
            "Tencent",
            "Pinterest",
            "Nutanix",
            "Nvidia",
            "Qualtrics",
            "ServiceNow",
            "Tableau"
        ]
    },
    {
        "leetId": "104",
        "link": "maximum-depth-of-binary-tree",
        "title": "Maximum Depth of Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "68.5%",
        "questionDescription": "<p>Given a binary tree, find its maximum depth.</p>\r\n\r\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;A leaf is a node with no children.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>\r\n\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7</pre>\r\n\r\n<p>return its depth = 3.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5927\u6df1\u5ea6\u3002</p>\n\n<p>\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong>&nbsp;\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong><br>\n\u7ed9\u5b9a\u4e8c\u53c9\u6811 <code>[3,9,20,null,null,15,7]</code>\uff0c</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre>\n\n<p>\u8fd4\u56de\u5b83\u7684\u6700\u5927\u6df1\u5ea6&nbsp;3 \u3002</p>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Tencent",
            "Lyft"
        ]
    },
    {
        "leetId": "105",
        "link": "construct-binary-tree-from-preorder-and-inorder-traversal",
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "57.2%",
        "questionDescription": "<p>Given preorder and inorder traversal of a tree, construct the binary tree.</p>\r\n\r\n<p><strong>Note:</strong><br />\r\nYou may assume that duplicates do not exist in the tree.</p>\r\n\r\n<p>For example, given</p>\r\n\r\n<pre>\r\npreorder =&nbsp;[3,9,20,15,7]\r\ninorder = [9,3,15,20,7]</pre>\r\n\r\n<p>Return the following binary tree:</p>\r\n\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7</pre>\r\n",
        "questionDescriptionZh": "<p>\u6839\u636e\u4e00\u68f5\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0e\u4e2d\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u7ed9\u51fa</p>\n\n<pre>\u524d\u5e8f\u904d\u5386 preorder =&nbsp;[3,9,20,15,7]\n\u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7]</pre>\n\n<p>\u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre>\n",
        "titleZh": "\u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Walmart Labs",
            "Citadel",
            "Cloudera"
        ]
    },
    {
        "leetId": "106",
        "link": "construct-binary-tree-from-inorder-and-postorder-traversal",
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "59.6%",
        "questionDescription": "<p>Given inorder and postorder traversal of a tree, construct the binary tree.</p>\r\n\r\n<p><strong>Note:</strong><br />\r\nYou may assume that duplicates do not exist in the tree.</p>\r\n\r\n<p>For example, given</p>\r\n\r\n<pre>\r\ninorder =&nbsp;[9,3,15,20,7]\r\npostorder = [9,15,7,20,3]</pre>\r\n\r\n<p>Return the following binary tree:</p>\r\n\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u6839\u636e\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0e\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u7ed9\u51fa</p>\n\n<pre>\u4e2d\u5e8f\u904d\u5386 inorder =&nbsp;[9,3,15,20,7]\n\u540e\u5e8f\u904d\u5386 postorder = [9,15,7,20,3]</pre>\n\n<p>\u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n",
        "titleZh": "\u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook",
            "Microsoft",
            "Adobe"
        ]
    },
    {
        "leetId": "107",
        "link": "binary-tree-level-order-traversal-ii",
        "title": "Binary Tree Level Order Traversal II",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "59.8%",
        "questionDescription": "<p>Given a binary tree, return the <i>bottom-up level order</i> traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).</p>\r\n\r\n<p>\r\nFor example:<br />\r\nGiven binary tree <code>[3,9,20,null,null,15,7]</code>,<br />\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n</pre>\r\n</p>\r\n<p>\r\nreturn its bottom-up level order traversal as:<br />\r\n<pre>\r\n[\r\n  [15,7],\r\n  [9,20],\r\n  [3]\r\n]\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u81ea\u5e95\u5411\u4e0a\u7684\u5c42\u6b21\u904d\u5386\u3002 \uff08\u5373\u6309\u4ece\u53f6\u5b50\u8282\u70b9\u6240\u5728\u5c42\u5230\u6839\u8282\u70b9\u6240\u5728\u7684\u5c42\uff0c\u9010\u5c42\u4ece\u5de6\u5411\u53f3\u904d\u5386\uff09</p>\n\n<p>\u4f8b\u5982\uff1a<br>\n\u7ed9\u5b9a\u4e8c\u53c9\u6811 <code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</pre>\n\n<p>\u8fd4\u56de\u5176\u81ea\u5e95\u5411\u4e0a\u7684\u5c42\u6b21\u904d\u5386\u4e3a\uff1a</p>\n\n<pre>[\n  [15,7],\n  [9,20],\n  [3]\n]\n</pre>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386 II",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Yahoo",
            "Airbnb"
        ]
    },
    {
        "leetId": "108",
        "link": "convert-sorted-array-to-binary-search-tree",
        "title": "Convert Sorted Array to Binary Search Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "62.4%",
        "questionDescription": "<p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>\r\n\r\n<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of <em>every</em> node never differ by more than 1.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven the sorted array: [-10,-3,0,5,9],\r\n\r\nOne possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\r\n\r\n      0\r\n     / \\\r\n   -3   9\r\n   /   /\r\n -10  5\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u5c06\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u8f6c\u6362\u4e3a\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p>\n\n<p>\u672c\u9898\u4e2d\uff0c\u4e00\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u662f\u6307\u4e00\u4e2a\u4e8c\u53c9\u6811<em>\u6bcf\u4e2a\u8282\u70b9&nbsp;</em>\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\u7ed9\u5b9a\u6709\u5e8f\u6570\u7ec4: [-10,-3,0,5,9],\n\n\u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f\uff1a[0,-3,9,-10,null,5]\uff0c\u5b83\u53ef\u4ee5\u8868\u793a\u4e0b\u9762\u8fd9\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff1a\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n</pre>\n",
        "titleZh": "\u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Yahoo",
            "Airbnb",
            "Baidu",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Paypal"
        ]
    },
    {
        "leetId": "109",
        "link": "convert-sorted-list-to-binary-search-tree",
        "title": "Convert Sorted List to Binary Search Tree",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "64.6%",
        "questionDescription": "<p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p>\r\n\r\n<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of <em>every</em> node never differ by more than 1.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven the sorted linked list: [-10,-3,0,5,9],\r\n\r\nOne possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\r\n\r\n      0\r\n     / \\\r\n   -3   9\r\n   /   /\r\n -10  5\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p>\n\n<p>\u672c\u9898\u4e2d\uff0c\u4e00\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u662f\u6307\u4e00\u4e2a\u4e8c\u53c9\u6811<em>\u6bcf\u4e2a\u8282\u70b9&nbsp;</em>\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\u7ed9\u5b9a\u7684\u6709\u5e8f\u94fe\u8868\uff1a [-10, -3, 0, 5, 9],\n\n\u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f\uff1a[0, -3, 9, -10, null, 5], \u5b83\u53ef\u4ee5\u8868\u793a\u4e0b\u9762\u8fd9\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\uff1a\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n</pre>\n",
        "titleZh": "\u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Oracle",
            "Zenefits",
            "Box"
        ]
    },
    {
        "leetId": "110",
        "link": "balanced-binary-tree",
        "title": "Balanced Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "47.1%",
        "questionDescription": "<p>Given a binary tree, determine if it is height-balanced.</p>\r\n\r\n<p>For this problem, a height-balanced binary tree is defined as:</p>\r\n\r\n<blockquote>\r\n<p>a binary tree in which the depth of the two subtrees of <em>every</em> node never differ by more than 1.</p>\r\n</blockquote>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p>Given the following tree <code>[3,9,20,null,null,15,7]</code>:</p>\r\n\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7</pre>\r\n\r\n<p>Return true.<br />\r\n<br />\r\n<strong>Example 2:</strong></p>\r\n\r\n<p>Given the following tree <code>[1,2,2,3,3,null,null,4,4]</code>:</p>\r\n\r\n<pre>\r\n       1\r\n      / \\\r\n     2   2\r\n    / \\\r\n   3   3\r\n  / \\\r\n 4   4\r\n</pre>\r\n\r\n<p>Return false.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002</p>\n\n<p>\u672c\u9898\u4e2d\uff0c\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\uff1a</p>\n\n<blockquote>\n<p>\u4e00\u4e2a\u4e8c\u53c9\u6811<em>\u6bcf\u4e2a\u8282\u70b9&nbsp;</em>\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71\u3002</p>\n</blockquote>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<p>\u7ed9\u5b9a\u4e8c\u53c9\u6811 <code>[3,9,20,null,null,15,7]</code></p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre>\n\n<p>\u8fd4\u56de <code>true</code> \u3002<br>\n<br>\n<strong>\u793a\u4f8b 2:</strong></p>\n\n<p>\u7ed9\u5b9a\u4e8c\u53c9\u6811 <code>[1,2,2,3,3,null,null,4,4]</code></p>\n\n<pre>       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n</pre>\n\n<p>\u8fd4\u56de&nbsp;<code>false</code> \u3002</p>\n",
        "titleZh": "\u5e73\u8861\u4e8c\u53c9\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Paypal",
            "Cisco"
        ]
    },
    {
        "leetId": "111",
        "link": "minimum-depth-of-binary-tree",
        "title": "Minimum Depth of Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "38.1%",
        "questionDescription": "<p>Given a binary tree, find its minimum depth.</p>\r\n\r\n<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;A leaf is a node with no children.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>\r\n\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7</pre>\r\n\r\n<p>return its minimum&nbsp;depth = 2.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002</p>\n\n<p>\u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong>&nbsp;\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<p>\u7ed9\u5b9a\u4e8c\u53c9\u6811&nbsp;<code>[3,9,20,null,null,15,7]</code>,</p>\n\n<pre>    3\n   / \\\n  9  20\n    /  \\\n   15   7</pre>\n\n<p>\u8fd4\u56de\u5b83\u7684\u6700\u5c0f\u6df1\u5ea6 &nbsp;2.</p>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Adobe",
            "Alibaba",
            "Goldman Sachs"
        ]
    },
    {
        "leetId": "112",
        "link": "path-sum",
        "title": "Path Sum",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "45.9%",
        "questionDescription": "<p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;A leaf is a node with no children.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Given the below binary tree and <code>sum = 22</code>,</p>\r\n\r\n<pre>\r\n      <strong>5</strong>\r\n     <strong>/</strong> \\\r\n    <strong>4</strong>   8\r\n   <strong>/</strong>   / \\\r\n  <strong>11</strong>  13  4\r\n /  <strong>\\</strong>      \\\r\n7    <strong>2</strong>      1\r\n</pre>\r\n\r\n<p>return true, as there exist a root-to-leaf path <code>5-&gt;4-&gt;11-&gt;2</code> which sum is 22.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u5224\u65ad\u8be5\u6811\u4e2d\u662f\u5426\u5b58\u5728\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u503c\u76f8\u52a0\u7b49\u4e8e\u76ee\u6807\u548c\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong>&nbsp;\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong>&nbsp;<br>\n\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811\uff0c\u4ee5\u53ca\u76ee\u6807\u548c <code>sum = 22</code>\uff0c</p>\n\n<pre>              <strong>5</strong>\n             / \\\n            <strong>4 </strong>  8\n           /   / \\\n          <strong>11 </strong> 13  4\n         /  \\      \\\n        7    <strong>2</strong>      1\n</pre>\n\n<p>\u8fd4\u56de <code>true</code>, \u56e0\u4e3a\u5b58\u5728\u76ee\u6807\u548c\u4e3a 22 \u7684\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84 <code>5-&gt;4-&gt;11-&gt;2</code>\u3002</p>\n",
        "titleZh": "\u8def\u5f84\u603b\u548c",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Adobe",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "eBay",
            "Zillow"
        ]
    },
    {
        "leetId": "113",
        "link": "path-sum-ii",
        "title": "Path Sum II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "54.2%",
        "questionDescription": "<p>Given a binary tree and a sum, find all root-to-leaf paths where each path&#39;s sum equals the given sum.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;A leaf is a node with no children.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Given the below binary tree and <code>sum = 22</code>,</p>\r\n\r\n<pre>\r\n      <strong>5</strong>\r\n     <strong>/ \\</strong>\r\n    <strong>4   8</strong>\r\n   <strong>/</strong>   / <strong>\\</strong>\r\n  <strong>11</strong>  13  <strong>4</strong>\r\n /  <strong>\\</strong>    <strong>/</strong> \\\r\n7    <strong>2</strong>  <strong>5</strong>   1\r\n</pre>\r\n\r\n<p>Return:</p>\r\n\r\n<pre>\r\n[\r\n   [5,4,11,2],\r\n   [5,8,4,5]\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u627e\u5230\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84\u603b\u548c\u7b49\u4e8e\u7ed9\u5b9a\u76ee\u6807\u548c\u7684\u8def\u5f84\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong>&nbsp;\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong><br>\n\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811\uff0c\u4ee5\u53ca\u76ee\u6807\u548c&nbsp;<code>sum = 22</code>\uff0c</p>\n\n<pre>              <strong>5</strong>\n             / \\\n            <strong>4</strong>   <strong>8</strong>\n           /   / \\\n          <strong>11</strong>  13  <strong>4</strong>\n         /  \\    / \\\n        7    <strong>2</strong>  <strong>5</strong>   1\n</pre>\n\n<p>\u8fd4\u56de:</p>\n\n<pre>[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n</pre>\n",
        "titleZh": "\u8def\u5f84\u603b\u548c II",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "LinkedIn",
            "Tencent",
            "Zillow",
            "Quora",
            "AppDynamics"
        ]
    },
    {
        "leetId": "114",
        "link": "flatten-binary-tree-to-linked-list",
        "title": "Flatten Binary Tree to Linked List",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "59.5%",
        "questionDescription": "<p>Given a binary tree, flatten it to a linked list in-place.</p>\r\n\r\n<p>For example, given the following tree:</p>\r\n\r\n<pre>\r\n    1\r\n   / \\\r\n  2   5\r\n / \\   \\\r\n3   4   6\r\n</pre>\r\n\r\n<p>The flattened tree should look like:</p>\r\n\r\n<pre>\r\n1\r\n \\\r\n  2\r\n   \\\r\n    3\r\n     \\\r\n      4\r\n       \\\r\n        5\r\n         \\\r\n          6\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c<a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95/8010757\" target=\"_blank\">\u539f\u5730</a>\u5c06\u5b83\u5c55\u5f00\u4e3a\u94fe\u8868\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e8c\u53c9\u6811</p>\n\n<pre>    1\n   / \\\n  2   5\n / \\   \\\n3   4   6</pre>\n\n<p>\u5c06\u5176\u5c55\u5f00\u4e3a\uff1a</p>\n\n<pre>1\n \\\n  2\n   \\\n    3\n     \\\n      4\n       \\\n        5\n         \\\n          6</pre>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Alibaba",
            "eBay",
            "Nutanix"
        ]
    },
    {
        "leetId": "115",
        "link": "distinct-subsequences",
        "title": "Distinct Subsequences",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "42.7%",
        "questionDescription": "<p>Given a string <strong>S</strong> and a string <strong>T</strong>, count the number of distinct subsequences of <strong>S</strong> which equals <strong>T</strong>.</p>\r\n\r\n<p>A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, <code>&quot;ACE&quot;</code> is a subsequence of <code>&quot;ABCDE&quot;</code> while <code>&quot;AEC&quot;</code> is not).</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <code>&quot;rabbbit&quot;</code>, T = <code>&quot;rabbit&quot;\r\n<strong>Output:</strong>&nbsp;3\r\n</code><strong>Explanation:\r\n</strong>\r\nAs shown below, there are 3 ways you can generate &quot;rabbit&quot; from S.\r\n(The caret symbol ^ means the chosen letters)\r\n\r\n<code>rabbbit</code>\r\n^^^^ ^^\r\n<code>rabbbit</code>\r\n^^ ^^^^\r\n<code>rabbbit</code>\r\n^^^ ^^^\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <code>&quot;babgbag&quot;</code>, T = <code>&quot;bag&quot;\r\n<strong>Output:</strong>&nbsp;5\r\n</code><strong>Explanation:\r\n</strong>\r\nAs shown below, there are 5 ways you can generate &quot;bag&quot; from S.\r\n(The caret symbol ^ means the chosen letters)\r\n\r\n<code>babgbag</code>\r\n^^ ^\r\n<code>babgbag</code>\r\n^^    ^\r\n<code>babgbag</code>\r\n^    ^^\r\n<code>babgbag</code>\r\n  ^  ^^\r\n<code>babgbag</code>\r\n    ^^^\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<strong>S&nbsp;</strong>\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<strong>T</strong>\uff0c\u8ba1\u7b97\u5728 <strong>S</strong> \u7684\u5b50\u5e8f\u5217\u4e2d <strong>T</strong> \u51fa\u73b0\u7684\u4e2a\u6570\u3002</p>\n\n<p>\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\u662f\u6307\uff0c\u901a\u8fc7\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5b57\u7b26\u4e14\u4e0d\u5e72\u6270\u5269\u4f59\u5b57\u7b26\u76f8\u5bf9\u4f4d\u7f6e\u6240\u7ec4\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002\uff08\u4f8b\u5982\uff0c<code>&quot;ACE&quot;</code>&nbsp;\u662f&nbsp;<code>&quot;ABCDE&quot;</code>&nbsp;\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u800c&nbsp;<code>&quot;AEC&quot;</code>&nbsp;\u4e0d\u662f\uff09</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>S = <code>&quot;rabbbit&quot;</code>, T = <code>&quot;rabbit&quot;\n<strong>\u8f93\u51fa:</strong>&nbsp;3\n</code><strong>\u89e3\u91ca:\n</strong>\n\u5982\u4e0b\u56fe\u6240\u793a, \u6709 3 \u79cd\u53ef\u4ee5\u4ece S \u4e2d\u5f97\u5230 <code>&quot;rabbit&quot; \u7684\u65b9\u6848</code>\u3002\n(\u4e0a\u7bad\u5934\u7b26\u53f7 ^ \u8868\u793a\u9009\u53d6\u7684\u5b57\u6bcd)\n\n<code>rabbbit</code>\n^^^^ ^^\n<code>rabbbit</code>\n^^ ^^^^\n<code>rabbbit</code>\n^^^ ^^^\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>S = <code>&quot;babgbag&quot;</code>, T = <code>&quot;bag&quot;\n<strong>\u8f93\u51fa:</strong>&nbsp;5\n</code><strong>\u89e3\u91ca:\n</strong>\n\u5982\u4e0b\u56fe\u6240\u793a, \u6709 5 \u79cd\u53ef\u4ee5\u4ece S \u4e2d\u5f97\u5230 <code>&quot;bag&quot; \u7684\u65b9\u6848</code>\u3002 \n(\u4e0a\u7bad\u5934\u7b26\u53f7 ^ \u8868\u793a\u9009\u53d6\u7684\u5b57\u6bcd)\n\n<code>babgbag</code>\n^^ ^\n<code>babgbag</code>\n^^    ^\n<code>babgbag</code>\n^    ^^\n<code>babgbag</code>\n  ^  ^^\n<code>babgbag</code>\n    ^^^</pre>\n",
        "titleZh": "\u4e0d\u540c\u7684\u5b50\u5e8f\u5217",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Microsoft",
            "Uber",
            "Apple",
            "JPMorgan"
        ]
    },
    {
        "leetId": "116",
        "link": "populating-next-right-pointers-in-each-node",
        "title": "Populating Next Right Pointers in Each Node",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "38.3%",
        "questionDescription": "<p>You are given a <strong>perfect binary tree</strong>&nbsp;where&nbsp;all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p>\r\n\r\n<pre>\r\nstruct Node {\r\n  int val;\r\n  Node *left;\r\n  Node *right;\r\n  Node *next;\r\n}\r\n</pre>\r\n\r\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\r\n\r\n<p>Initially, all next pointers are set to <code>NULL</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/14/116_sample.png\" style=\"width: 640px; height: 218px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span>{&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:4},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:5},&quot;val&quot;:2},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:6},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;7&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7},&quot;val&quot;:3},&quot;val&quot;:1}</span>\r\n\r\n<strong>Output: </strong><span>{&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7},&quot;right&quot;:null,&quot;val&quot;:6},&quot;right&quot;:null,&quot;val&quot;:5},&quot;right&quot;:null,&quot;val&quot;:4},&quot;next&quot;:{&quot;$id&quot;:&quot;7&quot;,&quot;left&quot;:{&quot;$ref&quot;:&quot;5&quot;},&quot;next&quot;:null,&quot;right&quot;:{&quot;$ref&quot;:&quot;6&quot;},&quot;val&quot;:3},&quot;right&quot;:{&quot;$ref&quot;:&quot;4&quot;},&quot;val&quot;:2},&quot;next&quot;:null,&quot;right&quot;:{&quot;$ref&quot;:&quot;7&quot;},&quot;val&quot;:1}</span>\r\n\r\n<strong>Explanation: </strong>Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>You may only use constant extra space.</li>\r\n\t<li>Recursive approach is fine, implicit stack space does not count as extra space for this problem.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u5b8c\u7f8e\u4e8c\u53c9\u6811</strong>\uff0c\u5176\u6240\u6709\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u540c\u4e00\u5c42\uff0c\u6bcf\u4e2a\u7236\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u3002\u4e8c\u53c9\u6811\u5b9a\u4e49\u5982\u4e0b\uff1a</p>\n\n<pre>struct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}</pre>\n\n<p>\u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u8ba9\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u3002\u5982\u679c\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5219\u5c06 next \u6307\u9488\u8bbe\u7f6e\u4e3a <code>NULL</code>\u3002</p>\n\n<p>\u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u6240\u6709&nbsp;next \u6307\u9488\u90fd\u88ab\u8bbe\u7f6e\u4e3a <code>NULL</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/15/116_sample.png\" style=\"height: 218px; width: 640px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>{&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:4},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:5},&quot;val&quot;:2},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:6},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;7&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7},&quot;val&quot;:3},&quot;val&quot;:1}\n\n<strong>\u8f93\u51fa\uff1a</strong>{&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7},&quot;right&quot;:null,&quot;val&quot;:6},&quot;right&quot;:null,&quot;val&quot;:5},&quot;right&quot;:null,&quot;val&quot;:4},&quot;next&quot;:{&quot;$id&quot;:&quot;7&quot;,&quot;left&quot;:{&quot;$ref&quot;:&quot;5&quot;},&quot;next&quot;:null,&quot;right&quot;:{&quot;$ref&quot;:&quot;6&quot;},&quot;val&quot;:3},&quot;right&quot;:{&quot;$ref&quot;:&quot;4&quot;},&quot;val&quot;:2},&quot;next&quot;:null,&quot;right&quot;:{&quot;$ref&quot;:&quot;7&quot;},&quot;val&quot;:1}\n\n<strong>\u89e3\u91ca\uff1a</strong>\u7ed9\u5b9a\u4e8c\u53c9\u6811\u5982\u56fe A \u6240\u793a\uff0c\u4f60\u7684\u51fd\u6570\u5e94\u8be5\u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u4ee5\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5982\u56fe B \u6240\u793a\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ea\u80fd\u4f7f\u7528\u5e38\u91cf\u7ea7\u989d\u5916\u7a7a\u95f4\u3002</li>\n\t<li>\u4f7f\u7528\u9012\u5f52\u89e3\u9898\u4e5f\u7b26\u5408\u8981\u6c42\uff0c\u672c\u9898\u4e2d\u9012\u5f52\u7a0b\u5e8f\u5360\u7528\u7684\u6808\u7a7a\u95f4\u4e0d\u7b97\u505a\u989d\u5916\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</li>\n</ul>\n",
        "titleZh": "\u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "VMware",
            "Nutanix"
        ]
    },
    {
        "leetId": "117",
        "link": "populating-next-right-pointers-in-each-node-ii",
        "title": "Populating Next Right Pointers in Each Node II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "34.7%",
        "questionDescription": "<p>Given a binary tree</p>\r\n\r\n<pre>\r\nstruct Node {\r\n  int val;\r\n  Node *left;\r\n  Node *right;\r\n  Node *next;\r\n}\r\n</pre>\r\n\r\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\r\n\r\n<p>Initially, all next pointers are set to <code>NULL</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/15/117_sample.png\" style=\"width: 640px; height: 218px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span>{&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:4},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:5},&quot;val&quot;:2},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7},&quot;val&quot;:3},&quot;val&quot;:1}</span>\r\n\r\n<strong>Output: </strong><span>{&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7},&quot;right&quot;:null,&quot;val&quot;:5},&quot;right&quot;:null,&quot;val&quot;:4},&quot;next&quot;:{&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:{&quot;$ref&quot;:&quot;5&quot;},&quot;val&quot;:3},&quot;right&quot;:{&quot;$ref&quot;:&quot;4&quot;},&quot;val&quot;:2},&quot;next&quot;:null,&quot;right&quot;:{&quot;$ref&quot;:&quot;6&quot;},&quot;val&quot;:1}</span>\r\n\r\n<strong>Explanation: </strong>Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>You may only use constant extra space.</li>\r\n\t<li>Recursive approach is fine, implicit stack space does not count as extra space for this problem.</li>\r\n</ul>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811</p>\n\n<pre>struct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}</pre>\n\n<p>\u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u8ba9\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u3002\u5982\u679c\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5219\u5c06 next \u6307\u9488\u8bbe\u7f6e\u4e3a <code>NULL</code>\u3002</p>\n\n<p>\u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u6240\u6709&nbsp;next \u6307\u9488\u90fd\u88ab\u8bbe\u7f6e\u4e3a <code>NULL</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/15/117_sample.png\" style=\"height: 218px; width: 640px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>{&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:4},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:5},&quot;val&quot;:2},&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:{&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7},&quot;val&quot;:3},&quot;val&quot;:1}\n\n<strong>\u8f93\u51fa\uff1a</strong>{&quot;$id&quot;:&quot;1&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;left&quot;:{&quot;$id&quot;:&quot;3&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;4&quot;,&quot;left&quot;:null,&quot;next&quot;:{&quot;$id&quot;:&quot;5&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:null,&quot;val&quot;:7},&quot;right&quot;:null,&quot;val&quot;:5},&quot;right&quot;:null,&quot;val&quot;:4},&quot;next&quot;:{&quot;$id&quot;:&quot;6&quot;,&quot;left&quot;:null,&quot;next&quot;:null,&quot;right&quot;:{&quot;$ref&quot;:&quot;5&quot;},&quot;val&quot;:3},&quot;right&quot;:{&quot;$ref&quot;:&quot;4&quot;},&quot;val&quot;:2},&quot;next&quot;:null,&quot;right&quot;:{&quot;$ref&quot;:&quot;6&quot;},&quot;val&quot;:1}\n\n<strong>\u89e3\u91ca\uff1a</strong>\u7ed9\u5b9a\u4e8c\u53c9\u6811\u5982\u56fe A \u6240\u793a\uff0c\u4f60\u7684\u51fd\u6570\u5e94\u8be5\u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u4ee5\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5982\u56fe B \u6240\u793a\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ea\u80fd\u4f7f\u7528\u5e38\u91cf\u7ea7\u989d\u5916\u7a7a\u95f4\u3002</li>\n\t<li>\u4f7f\u7528\u9012\u5f52\u89e3\u9898\u4e5f\u7b26\u5408\u8981\u6c42\uff0c\u672c\u9898\u4e2d\u9012\u5f52\u7a0b\u5e8f\u5360\u7528\u7684\u6808\u7a7a\u95f4\u4e0d\u7b97\u505a\u989d\u5916\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</li>\n</ul>\n",
        "titleZh": "\u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488 II",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "ServiceNow"
        ]
    },
    {
        "leetId": "118",
        "link": "pascals-triangle",
        "title": "Pascal's Triangle",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "61.3%",
        "questionDescription": "<p>Given a non-negative integer&nbsp;<em>numRows</em>, generate the first <em>numRows</em> of Pascal&#39;s triangle.</p>\r\n\r\n<p><img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" style=\"height:240px; width:260px\" /><br />\r\n<small>In Pascal&#39;s triangle, each number is the sum of the two numbers directly above it.</small></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 5\r\n<strong>Output:</strong>\r\n[\r\n     [1],\r\n    [1,1],\r\n   [1,2,1],\r\n  [1,3,3,1],\r\n [1,4,6,4,1]\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570&nbsp;<em>numRows\uff0c</em>\u751f\u6210\u6768\u8f89\u4e09\u89d2\u7684\u524d&nbsp;<em>numRows&nbsp;</em>\u884c\u3002</p>\n\n<p><img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\"></p>\n\n<p><small>\u5728\u6768\u8f89\u4e09\u89d2\u4e2d\uff0c\u6bcf\u4e2a\u6570\u662f\u5b83\u5de6\u4e0a\u65b9\u548c\u53f3\u4e0a\u65b9\u7684\u6570\u7684\u548c\u3002</small></p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 5\n<strong>\u8f93\u51fa:</strong>\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]</pre>\n",
        "titleZh": "\u6768\u8f89\u4e09\u89d2",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "Twitter",
            "Goldman Sachs",
            "Oracle",
            "Yelp"
        ]
    },
    {
        "leetId": "119",
        "link": "pascals-triangle-ii",
        "title": "Pascal's Triangle II",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "55.1%",
        "questionDescription": "<p>Given a non-negative&nbsp;index <em>k</em>&nbsp;where <em>k</em> &le;&nbsp;33, return the <em>k</em><sup>th</sup>&nbsp;index row of the Pascal&#39;s triangle.</p>\r\n\r\n<p>Note that the row index starts from&nbsp;0.</p>\r\n\r\n<p><img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" /><br />\r\n<small>In Pascal&#39;s triangle, each number is the sum of the two numbers directly above it.</small></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong> [1,3,3,1]\r\n</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Could you optimize your algorithm to use only <em>O</em>(<em>k</em>) extra space?</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u7d22\u5f15&nbsp;<em>k</em>\uff0c\u5176\u4e2d <em>k</em>&nbsp;&le;&nbsp;33\uff0c\u8fd4\u56de\u6768\u8f89\u4e09\u89d2\u7684\u7b2c <em>k </em>\u884c\u3002</p>\n\n<p><img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\"></p>\n\n<p><small>\u5728\u6768\u8f89\u4e09\u89d2\u4e2d\uff0c\u6bcf\u4e2a\u6570\u662f\u5b83\u5de6\u4e0a\u65b9\u548c\u53f3\u4e0a\u65b9\u7684\u6570\u7684\u548c\u3002</small></p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 3\n<strong>\u8f93\u51fa:</strong> [1,3,3,1]\n</pre>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<p>\u4f60\u53ef\u4ee5\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\u5230 <em>O</em>(<em>k</em>) \u7a7a\u95f4\u590d\u6742\u5ea6\u5417\uff1f</p>\n",
        "titleZh": "\u6768\u8f89\u4e09\u89d2 II",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Adobe",
            "Apple",
            "Baidu"
        ]
    },
    {
        "leetId": "120",
        "link": "triangle",
        "title": "Triangle",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "58.5%",
        "questionDescription": "<p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p>\r\n\r\n<p>For example, given the following triangle</p>\r\n\r\n<pre>\r\n[\r\n     [<strong>2</strong>],\r\n    [<strong>3</strong>,4],\r\n   [6,<strong>5</strong>,7],\r\n  [4,<strong>1</strong>,8,3]\r\n]\r\n</pre>\r\n\r\n<p>The minimum path sum from top to bottom is <code>11</code> (i.e., <strong>2</strong> + <strong>3</strong> + <strong>5</strong> + <strong>1</strong> = 11).</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Bonus point if you are able to do this using only <em>O</em>(<em>n</em>) extra space, where <em>n</em> is the total number of rows in the triangle.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u627e\u51fa\u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u3002\u6bcf\u4e00\u6b65\u53ea\u80fd\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u4e2d\u76f8\u90bb\u7684\u7ed3\u70b9\u4e0a\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e09\u89d2\u5f62\uff1a</p>\n\n<pre>[\n     [<strong>2</strong>],\n    [<strong>3</strong>,4],\n   [6,<strong>5</strong>,7],\n  [4,<strong>1</strong>,8,3]\n]\n</pre>\n\n<p>\u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a&nbsp;<code>11</code>\uff08\u5373\uff0c<strong>2&nbsp;</strong>+&nbsp;<strong>3</strong>&nbsp;+&nbsp;<strong>5&nbsp;</strong>+&nbsp;<strong>1</strong>&nbsp;= 11\uff09\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u5982\u679c\u4f60\u53ef\u4ee5\u53ea\u4f7f\u7528 <em>O</em>(<em>n</em>)&nbsp;\u7684\u989d\u5916\u7a7a\u95f4\uff08<em>n</em> \u4e3a\u4e09\u89d2\u5f62\u7684\u603b\u884c\u6570\uff09\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u4f60\u7684\u7b97\u6cd5\u4f1a\u5f88\u52a0\u5206\u3002</p>\n",
        "titleZh": "\u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Yahoo"
        ]
    },
    {
        "leetId": "121",
        "link": "best-time-to-buy-and-sell-stock",
        "title": "Best Time to Buy and Sell Stock",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "49.2%",
        "questionDescription": "<p>Say you have an array for which the <em>i</em><sup>th</sup> element is the price of a given stock on day <em>i</em>.</p>\r\n\r\n<p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>\r\n\r\n<p>Note that you cannot sell a stock before you buy one.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [7,1,5,3,6,4]\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\r\n&nbsp;            Not 7-1 = 6, as selling price needs to be larger than buying price.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [7,6,4,3,1]\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong> In this case, no transaction is done, i.e. max profit = 0.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c&nbsp;<em>i</em> \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c <em>i</em> \u5929\u7684\u4ef7\u683c\u3002</p>\n\n<p>\u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002</p>\n\n<p>\u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [7,1,5,3,6,4]\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca: </strong>\u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002\n     \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [7,6,4,3,1]\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca: </strong>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002\n</pre>\n",
        "titleZh": "\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Snapchat",
            "Goldman Sachs",
            "Oracle",
            "Yelp",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Salesforce",
            "Lyft",
            "Expedia",
            "Paypal",
            "Cisco",
            "Intuit",
            "Palantir Technologies",
            "Hulu",
            "Palantir",
            "NetEase",
            "JPMorgan",
            "Qualtrics",
            "Akuna Capital",
            "Tableau",
            "Citadel",
            "Morgan Stanley",
            "DoorDash",
            "Grab",
            "Deutsche Bank"
        ]
    },
    {
        "leetId": "122",
        "link": "best-time-to-buy-and-sell-stock-ii",
        "title": "Best Time to Buy and Sell Stock II",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "52.7%",
        "questionDescription": "<p>Say you have an array for which the <em>i</em><sup>th</sup> element is the price of a given stock on day <em>i</em>.</p>\r\n\r\n<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p>\r\n\r\n<p><strong>Note:</strong> You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [7,1,5,3,6,4]\r\n<strong>Output:</strong> 7\r\n<strong>Explanation:</strong> Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\r\n&nbsp;            Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3,4,5]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\r\n&nbsp;            Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\r\n&nbsp;            engaging multiple transactions at the same time. You must sell before buying again.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [7,6,4,3,1]\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong> In this case, no transaction is done, i.e. max profit = 0.</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c&nbsp;<em>i</em> \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c <em>i</em> \u5929\u7684\u4ef7\u683c\u3002</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [7,1,5,3,6,4]\n<strong>\u8f93\u51fa:</strong> 7\n<strong>\u89e3\u91ca:</strong> \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002\n&nbsp;    \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3,4,5]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002\n&nbsp;    \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002\n&nbsp;    \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [7,6,4,3,1]\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:</strong> \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002</pre>\n",
        "titleZh": "\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Goldman Sachs",
            "Oracle",
            "Tencent",
            "VMware",
            "Zenefits",
            "Intuit",
            "Palantir Technologies",
            "JPMorgan",
            "Citadel",
            "Morgan Stanley",
            "Grab",
            "Zappos"
        ]
    },
    {
        "leetId": "123",
        "link": "best-time-to-buy-and-sell-stock-iii",
        "title": "Best Time to Buy and Sell Stock III",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "35.9%",
        "questionDescription": "<p>Say you have an array for which the <em>i</em><sup>th</sup> element is the price of a given stock on day <em>i</em>.</p>\r\n\r\n<p>Design an algorithm to find the maximum profit. You may complete at most <em>two</em> transactions.</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [3,3,5,0,0,3,1,4]\r\n<strong>Output:</strong> 6\r\n<strong>Explanation:</strong> Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\r\n&nbsp;            Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3,4,5]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\r\n&nbsp;            Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\r\n&nbsp;            engaging multiple transactions at the same time. You must sell before buying again.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [7,6,4,3,1]\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong> In this case, no transaction is done, i.e. max profit = 0.</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c<em> i</em> \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u7684\u80a1\u7968\u5728\u7b2c <em>i </em>\u5929\u7684\u4ef7\u683c\u3002</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210&nbsp;<em>\u4e24\u7b14&nbsp;</em>\u4ea4\u6613\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong>&nbsp;\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [3,3,5,0,0,3,1,4]\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> \u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 0\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 6 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 3-0 = 3 \u3002\n&nbsp;    \u968f\u540e\uff0c\u5728\u7b2c 7 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 8 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 4\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 4-1 = 3 \u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3,4,5]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 &nbsp; \n&nbsp;    \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 &nbsp; \n&nbsp;    \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [7,6,4,3,1] \n<strong>\u8f93\u51fa:</strong> 0 \n<strong>\u89e3\u91ca:</strong> \u5728\u8fd9\u4e2a\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002</pre>\n",
        "titleZh": "\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Tencent",
            "Two Sigma"
        ]
    },
    {
        "leetId": "124",
        "link": "binary-tree-maximum-path-sum",
        "title": "Binary Tree Maximum Path Sum",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "34.5%",
        "questionDescription": "<p>Given a <strong>non-empty</strong> binary tree, find the maximum path sum.</p>\r\n\r\n<p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain <strong>at least one node</strong> and does not need to go through the root.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3]\r\n\r\n       <strong>1</strong>\r\n      <strong>/ \\</strong>\r\n     <strong>2</strong>   <strong>3</strong>\r\n\r\n<strong>Output:</strong> 6\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [-10,9,20,null,null,15,7]\r\n\r\n&nbsp;  -10\r\n&nbsp; &nbsp;/ \\\r\n&nbsp; 9 &nbsp;<strong>20</strong>\r\n&nbsp; &nbsp; <strong>/ &nbsp;\\</strong>\r\n&nbsp; &nbsp;<strong>15 &nbsp; 7</strong>\r\n\r\n<strong>Output:</strong> 42\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u975e\u7a7a</strong>\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u6700\u5927\u8def\u5f84\u548c\u3002</p>\n\n<p>\u672c\u9898\u4e2d\uff0c\u8def\u5f84\u88ab\u5b9a\u4e49\u4e3a\u4e00\u6761\u4ece\u6811\u4e2d\u4efb\u610f\u8282\u70b9\u51fa\u53d1\uff0c\u8fbe\u5230\u4efb\u610f\u8282\u70b9\u7684\u5e8f\u5217\u3002\u8be5\u8def\u5f84<strong>\u81f3\u5c11\u5305\u542b\u4e00\u4e2a</strong>\u8282\u70b9\uff0c\u4e14\u4e0d\u4e00\u5b9a\u7ecf\u8fc7\u6839\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3]\n\n       <strong>1</strong>\n      <strong>/ \\</strong>\n     <strong>2</strong>   <strong>3</strong>\n\n<strong>\u8f93\u51fa:</strong> 6\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [-10,9,20,null,null,15,7]\n\n&nbsp;  -10\n&nbsp; &nbsp;/ \\\n&nbsp; 9 &nbsp;<strong>20</strong>\n&nbsp; &nbsp; <strong>/ &nbsp;\\</strong>\n&nbsp; &nbsp;<strong>15 &nbsp; 7</strong>\n\n<strong>\u8f93\u51fa:</strong> 42</pre>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Alibaba",
            "Baidu",
            "Snapchat",
            "Twitter",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Pocket Gems",
            "Intuit"
        ]
    },
    {
        "leetId": "125",
        "link": "valid-palindrome",
        "title": "Valid Palindrome",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "39.0%",
        "questionDescription": "<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;For the purpose of this problem, we define empty string as valid palindrome.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;A man, a plan, a canal: Panama&quot;\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;race a car&quot;\r\n<strong>Output:</strong> false\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9a8c\u8bc1\u5b83\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57\u5b57\u7b26\uff0c\u53ef\u4ee5\u5ffd\u7565\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u5c06\u7a7a\u5b57\u7b26\u4e32\u5b9a\u4e49\u4e3a\u6709\u6548\u7684\u56de\u6587\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;A man, a plan, a canal: Panama&quot;\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;race a car&quot;\n<strong>\u8f93\u51fa:</strong> false\n</pre>\n",
        "titleZh": "\u9a8c\u8bc1\u56de\u6587\u4e32",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Adobe",
            "Apple",
            "Airbnb",
            "Snapchat",
            "Zenefits",
            "Yandex",
            "TripAdvisor"
        ]
    },
    {
        "leetId": "126",
        "link": "word-ladder-ii",
        "title": "Word Ladder II",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "25.4%",
        "questionDescription": "<p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary&#39;s word list, find all shortest transformation sequence(s) from <em>beginWord</em> to <em>endWord</em>, such that:</p>\r\n\r\n<ol>\r\n\t<li>Only one letter can be changed at a time</li>\r\n\t<li>Each transformed word must exist in the word list. Note that <em>beginWord</em> is <em>not</em> a transformed word.</li>\r\n</ol>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Return an empty list if there is no such transformation sequence.</li>\r\n\t<li>All words have the same length.</li>\r\n\t<li>All words contain only lowercase alphabetic characters.</li>\r\n\t<li>You may assume no duplicates in the word list.</li>\r\n\t<li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nbeginWord = &quot;hit&quot;,\r\nendWord = &quot;cog&quot;,\r\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\r\n\r\n<strong>Output:</strong>\r\n[\r\n  [&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],\r\n&nbsp; [&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\r\n]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nbeginWord = &quot;hit&quot;\r\nendWord = &quot;cog&quot;\r\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\r\n\r\n<strong>Output: </strong>[]\r\n\r\n<strong>Explanation:</strong>&nbsp;The endWord &quot;cog&quot; is not in wordList, therefore no possible<strong>&nbsp;</strong>transformation.\r\n</pre>\r\n\r\n<ul>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd\uff08<em>beginWord</em> \u548c <em>endWord</em>\uff09\u548c\u4e00\u4e2a\u5b57\u5178 <em>wordList</em>\uff0c\u627e\u51fa\u6240\u6709\u4ece <em>beginWord </em>\u5230 <em>endWord </em>\u7684\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u3002\u8f6c\u6362\u9700\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a</p>\n\n<ol>\n\t<li>\u6bcf\u6b21\u8f6c\u6362\u53ea\u80fd\u6539\u53d8\u4e00\u4e2a\u5b57\u6bcd\u3002</li>\n\t<li>\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u5355\u8bcd\u5fc5\u987b\u662f\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002</li>\n</ol>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5217\u8868\u3002</li>\n\t<li>\u6240\u6709\u5355\u8bcd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002</li>\n\t<li>\u6240\u6709\u5355\u8bcd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n\t<li>\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5355\u8bcd\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe <em>beginWord</em> \u548c <em>endWord </em>\u662f\u975e\u7a7a\u7684\uff0c\u4e14\u4e8c\u8005\u4e0d\u76f8\u540c\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nbeginWord = &quot;hit&quot;,\nendWord = &quot;cog&quot;,\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n\n<strong>\u8f93\u51fa:</strong>\n[\n  [&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],\n&nbsp; [&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nbeginWord = &quot;hit&quot;\nendWord = &quot;cog&quot;\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n\n<strong>\u8f93\u51fa: </strong>[]\n\n<strong>\u89e3\u91ca:</strong>&nbsp;<em>endWord</em> &quot;cog&quot; \u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728\u7b26\u5408\u8981\u6c42\u7684\u8f6c\u6362\u5e8f\u5217\u3002</pre>\n",
        "titleZh": "\u5355\u8bcd\u63a5\u9f99 II",
        "tags": [
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "LinkedIn",
            "Oracle",
            "Yelp",
            "Lyft",
            "Pinterest",
            "Box"
        ]
    },
    {
        "leetId": "127",
        "link": "word-ladder",
        "title": "Word Ladder",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "32.8%",
        "questionDescription": "<p>Given two words (<em>beginWord</em> and <em>endWord</em>), and a dictionary&#39;s word list, find the length of shortest transformation sequence from <em>beginWord</em> to <em>endWord</em>, such that:</p>\r\n\r\n<ol>\r\n\t<li>Only one letter can be changed at a time.</li>\r\n\t<li>Each transformed word must exist in the word list. Note that <em>beginWord</em> is <em>not</em> a transformed word.</li>\r\n</ol>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Return 0 if there is no such transformation sequence.</li>\r\n\t<li>All words have the same length.</li>\r\n\t<li>All words contain only lowercase alphabetic characters.</li>\r\n\t<li>You may assume no duplicates in the word list.</li>\r\n\t<li>You may assume <em>beginWord</em> and <em>endWord</em> are non-empty and are not the same.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nbeginWord = &quot;hit&quot;,\r\nendWord = &quot;cog&quot;,\r\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\r\n\r\n<strong>Output: </strong>5\r\n\r\n<strong>Explanation:</strong> As one shortest transformation is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,\r\nreturn its length 5.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nbeginWord = &quot;hit&quot;\r\nendWord = &quot;cog&quot;\r\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\r\n\r\n<strong>Output:</strong>&nbsp;0\r\n\r\n<strong>Explanation:</strong>&nbsp;The endWord &quot;cog&quot; is not in wordList, therefore no possible<strong>&nbsp;</strong>transformation.\r\n</pre>\r\n\r\n<ul>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd\uff08<em>beginWord&nbsp;</em>\u548c <em>endWord</em>\uff09\u548c\u4e00\u4e2a\u5b57\u5178\uff0c\u627e\u5230\u4ece&nbsp;<em>beginWord</em> \u5230&nbsp;<em>endWord</em> \u7684\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u8f6c\u6362\u9700\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a</p>\n\n<ol>\n\t<li>\u6bcf\u6b21\u8f6c\u6362\u53ea\u80fd\u6539\u53d8\u4e00\u4e2a\u5b57\u6bcd\u3002</li>\n\t<li>\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u5355\u8bcd\u5fc5\u987b\u662f\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002</li>\n</ol>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u8fd4\u56de 0\u3002</li>\n\t<li>\u6240\u6709\u5355\u8bcd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002</li>\n\t<li>\u6240\u6709\u5355\u8bcd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n\t<li>\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5355\u8bcd\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe <em>beginWord</em> \u548c <em>endWord </em>\u662f\u975e\u7a7a\u7684\uff0c\u4e14\u4e8c\u8005\u4e0d\u76f8\u540c\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nbeginWord = &quot;hit&quot;,\nendWord = &quot;cog&quot;,\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n\n<strong>\u8f93\u51fa: </strong>5\n\n<strong>\u89e3\u91ca: </strong>\u4e00\u4e2a\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u662f &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,\n     \u8fd4\u56de\u5b83\u7684\u957f\u5ea6 5\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nbeginWord = &quot;hit&quot;\nendWord = &quot;cog&quot;\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n\n<strong>\u8f93\u51fa:</strong>&nbsp;0\n\n<strong>\u89e3\u91ca:</strong>&nbsp;<em>endWord</em> &quot;cog&quot; \u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fdb\u884c\u8f6c\u6362\u3002</pre>\n",
        "titleZh": "\u5355\u8bcd\u63a5\u9f99",
        "tags": [
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Airbnb",
            "Snapchat",
            "Twitter",
            "Oracle",
            "Yelp",
            "eBay",
            "Salesforce",
            "Lyft",
            "Expedia",
            "Zillow",
            "Two Sigma",
            "Hulu",
            "Square",
            "Affirm"
        ]
    },
    {
        "leetId": "128",
        "link": "longest-consecutive-sequence",
        "title": "Longest Consecutive Sequence",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "42.9%",
        "questionDescription": "<p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.</p>\r\n\r\n<p>Your algorithm should run in O(<em>n</em>) complexity.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;[100, 4, 200, 1, 3, 2]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> The longest consecutive elements sequence is <code>[1, 2, 3, 4]</code>. Therefore its length is 4.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u51fa\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p>\n\n<p>\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a&nbsp;<em>O(n)</em>\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;[100, 4, 200, 1, 3, 2]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u6700\u957f\u8fde\u7eed\u5e8f\u5217\u662f <code>[1, 2, 3, 4]\u3002\u5b83\u7684\u957f\u5ea6\u4e3a 4\u3002</code></pre>\n",
        "titleZh": "\u6700\u957f\u8fde\u7eed\u5e8f\u5217",
        "tags": [
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "LinkedIn",
            "Baidu",
            "Oracle",
            "Pocket Gems"
        ]
    },
    {
        "leetId": "129",
        "link": "sum-root-to-leaf-numbers",
        "title": "Sum Root to Leaf Numbers",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "56.5%",
        "questionDescription": "<p>Given a binary tree containing digits from <code>0-9</code> only, each root-to-leaf path could represent a number.</p>\r\n\r\n<p>An example is the root-to-leaf path <code>1-&gt;2-&gt;3</code> which represents the number <code>123</code>.</p>\r\n\r\n<p>Find the total sum of all root-to-leaf numbers.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;A leaf is a node with no children.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3]\r\n    1\r\n   / \\\r\n  2   3\r\n<strong>Output:</strong> 25\r\n<strong>Explanation:</strong>\r\nThe root-to-leaf path <code>1-&gt;2</code> represents the number <code>12</code>.\r\nThe root-to-leaf path <code>1-&gt;3</code> represents the number <code>13</code>.\r\nTherefore, sum = 12 + 13 = <code>25</code>.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [4,9,0,5,1]\r\n    4\r\n   / \\\r\n  9   0\r\n&nbsp;/ \\\r\n5   1\r\n<strong>Output:</strong> 1026\r\n<strong>Explanation:</strong>\r\nThe root-to-leaf path <code>4-&gt;9-&gt;5</code> represents the number 495.\r\nThe root-to-leaf path <code>4-&gt;9-&gt;1</code> represents the number 491.\r\nThe root-to-leaf path <code>4-&gt;0</code> represents the number 40.\r\nTherefore, sum = 495 + 491 + 40 = <code>1026</code>.</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5b58\u653e\u4e00\u4e2a&nbsp;<code>0-9</code>&nbsp;\u7684\u6570\u5b57\uff0c\u6bcf\u6761\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u90fd\u4ee3\u8868\u4e00\u4e2a\u6570\u5b57\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 <code>1-&gt;2-&gt;3</code> \u4ee3\u8868\u6570\u5b57 <code>123</code>\u3002</p>\n\n<p>\u8ba1\u7b97\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u751f\u6210\u7684\u6240\u6709\u6570\u5b57\u4e4b\u548c\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong>&nbsp;\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3]\n    1\n   / \\\n  2   3\n<strong>\u8f93\u51fa:</strong> 25\n<strong>\u89e3\u91ca:</strong>\n\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 <code>1-&gt;2</code> \u4ee3\u8868\u6570\u5b57 <code>12</code>.\n\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 <code>1-&gt;3</code> \u4ee3\u8868\u6570\u5b57 <code>13</code>.\n\u56e0\u6b64\uff0c\u6570\u5b57\u603b\u548c = 12 + 13 = <code>25</code>.</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [4,9,0,5,1]\n    4\n   / \\\n  9   0\n&nbsp;/ \\\n5   1\n<strong>\u8f93\u51fa:</strong> 1026\n<strong>\u89e3\u91ca:</strong>\n\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 <code>4-&gt;9-&gt;5</code> \u4ee3\u8868\u6570\u5b57 495.\n\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 <code>4-&gt;9-&gt;1</code> \u4ee3\u8868\u6570\u5b57 491.\n\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 <code>4-&gt;0</code> \u4ee3\u8868\u6570\u5b57 40.\n\u56e0\u6b64\uff0c\u6570\u5b57\u603b\u548c = 495 + 491 + 40 = <code>1026</code>.</pre>\n",
        "titleZh": "\u6c42\u6839\u5230\u53f6\u5b50\u8282\u70b9\u6570\u5b57\u4e4b\u548c",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg"
        ]
    },
    {
        "leetId": "130",
        "link": "surrounded-regions",
        "title": "Surrounded Regions",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "34.9%",
        "questionDescription": "<p>Given a 2D board containing <code>&#39;X&#39;</code> and <code>&#39;O&#39;</code> (<strong>the letter O</strong>), capture all regions surrounded by <code>&#39;X&#39;</code>.</p>\r\n\r\n<p>A region is captured by flipping all <code>&#39;O&#39;</code>s into <code>&#39;X&#39;</code>s in that surrounded region.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nX X X X\r\nX O O X\r\nX X O X\r\nX O X X\r\n</pre>\r\n\r\n<p>After running your function, the board should be:</p>\r\n\r\n<pre>\r\nX X X X\r\nX X X X\r\nX X X X\r\nX O X X\r\n</pre>\r\n\r\n<p><strong>Explanation:</strong></p>\r\n\r\n<p>Surrounded regions shouldn&rsquo;t be on the border, which means that any <code>&#39;O&#39;</code>&nbsp;on the border of the board are not flipped to <code>&#39;X&#39;</code>. Any <code>&#39;O&#39;</code>&nbsp;that is not on the border and it is not connected to an <code>&#39;O&#39;</code>&nbsp;on the border will be flipped to <code>&#39;X&#39;</code>. Two cells are connected if they are adjacent cells connected horizontally or vertically.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7684\u77e9\u9635\uff0c\u5305\u542b&nbsp;<code>&#39;X&#39;</code>&nbsp;\u548c&nbsp;<code>&#39;O&#39;</code>\uff08<strong>\u5b57\u6bcd O</strong>\uff09\u3002</p>\n\n<p>\u627e\u5230\u6240\u6709\u88ab <code>&#39;X&#39;</code> \u56f4\u7ed5\u7684\u533a\u57df\uff0c\u5e76\u5c06\u8fd9\u4e9b\u533a\u57df\u91cc\u6240\u6709\u7684&nbsp;<code>&#39;O&#39;</code> \u7528 <code>&#39;X&#39;</code> \u586b\u5145\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>X X X X\nX O O X\nX X O X\nX O X X\n</pre>\n\n<p>\u8fd0\u884c\u4f60\u7684\u51fd\u6570\u540e\uff0c\u77e9\u9635\u53d8\u4e3a\uff1a</p>\n\n<pre>X X X X\nX X X X\nX X X X\nX O X X\n</pre>\n\n<p><strong>\u89e3\u91ca:</strong></p>\n\n<p>\u88ab\u56f4\u7ed5\u7684\u533a\u95f4\u4e0d\u4f1a\u5b58\u5728\u4e8e\u8fb9\u754c\u4e0a\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u4efb\u4f55\u8fb9\u754c\u4e0a\u7684&nbsp;<code>&#39;O&#39;</code>&nbsp;\u90fd\u4e0d\u4f1a\u88ab\u586b\u5145\u4e3a&nbsp;<code>&#39;X&#39;</code>\u3002 \u4efb\u4f55\u4e0d\u5728\u8fb9\u754c\u4e0a\uff0c\u6216\u4e0d\u4e0e\u8fb9\u754c\u4e0a\u7684&nbsp;<code>&#39;O&#39;</code>&nbsp;\u76f8\u8fde\u7684&nbsp;<code>&#39;O&#39;</code>&nbsp;\u6700\u7ec8\u90fd\u4f1a\u88ab\u586b\u5145\u4e3a&nbsp;<code>&#39;X&#39;</code>\u3002\u5982\u679c\u4e24\u4e2a\u5143\u7d20\u5728\u6c34\u5e73\u6216\u5782\u76f4\u65b9\u5411\u76f8\u90bb\uff0c\u5219\u79f0\u5b83\u4eec\u662f&ldquo;\u76f8\u8fde&rdquo;\u7684\u3002</p>\n",
        "titleZh": "\u88ab\u56f4\u7ed5\u7684\u533a\u57df",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Uber",
            "Airbnb"
        ]
    },
    {
        "leetId": "131",
        "link": "palindrome-partitioning",
        "title": "Palindrome Partitioning",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "61.6%",
        "questionDescription": "<p>Given a string <em>s</em>, partition <em>s</em> such that every substring of the partition is a palindrome.</p>\r\n\r\n<p>Return all possible palindrome partitioning of <em>s</em>.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;aab&quot;\r\n<strong>Output:</strong>\r\n[\r\n  [&quot;aa&quot;,&quot;b&quot;],\r\n  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]\r\n]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 <em>s</em>\uff0c\u5c06<em> s </em>\u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\u3002</p>\n\n<p>\u8fd4\u56de <em>s</em> \u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6848\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;&quot;aab&quot;\n<strong>\u8f93\u51fa:</strong>\n[\n  [&quot;aa&quot;,&quot;b&quot;],\n  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]\n]</pre>\n",
        "titleZh": "\u5206\u5272\u56de\u6587\u4e32",
        "tags": [
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Bloomberg",
            "Uber"
        ]
    },
    {
        "leetId": "132",
        "link": "palindrome-partitioning-ii",
        "title": "Palindrome Partitioning II",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "36.9%",
        "questionDescription": "<p>Given a string <em>s</em>, partition <em>s</em> such that every substring of the partition is a palindrome.</p>\r\n\r\n<p>Return the minimum cuts needed for a palindrome partitioning of <em>s</em>.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;&quot;aab&quot;\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong> The palindrome partitioning [&quot;aa&quot;,&quot;b&quot;] could be produced using 1 cut.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 <em>s</em>\uff0c\u5c06 <em>s</em> \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\u3002</p>\n\n<p>\u8fd4\u56de\u7b26\u5408\u8981\u6c42\u7684\u6700\u5c11\u5206\u5272\u6b21\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;&quot;aab&quot;\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca: </strong>\u8fdb\u884c\u4e00\u6b21\u5206\u5272\u5c31\u53ef\u5c06&nbsp;<em>s </em>\u5206\u5272\u6210 [&quot;aa&quot;,&quot;b&quot;] \u8fd9\u6837\u4e24\u4e2a\u56de\u6587\u5b50\u4e32\u3002\n</pre>\n",
        "titleZh": "\u5206\u5272\u56de\u6587\u4e32 II",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Adobe"
        ]
    },
    {
        "leetId": "133",
        "link": "clone-graph",
        "title": "Clone Graph",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "27.1%",
        "questionDescription": "<p>Given&nbsp;a reference of a node in a&nbsp;<strong><a href=\"https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph\" target=\"_blank\">connected</a></strong>&nbsp;undirected graph, return a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> (clone) of the graph. Each node in the graph contains a val (<code>int</code>) and a list (<code>List[Node]</code>) of its neighbors.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/19/113_sample.png\" style=\"width: 200px; height: 149px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong>{&quot;$id&quot;:&quot;1&quot;,&quot;neighbors&quot;:[{&quot;$id&quot;:&quot;2&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;1&quot;},{&quot;$id&quot;:&quot;3&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;2&quot;},{&quot;$id&quot;:&quot;4&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;3&quot;},{&quot;$ref&quot;:&quot;1&quot;}],&quot;val&quot;:4}],&quot;val&quot;:3}],&quot;val&quot;:2},{&quot;$ref&quot;:&quot;4&quot;}],&quot;val&quot;:1}\r\n\r\n<strong>Explanation:</strong>\r\nNode 1&#39;s value is 1, and it has two neighbors: Node 2 and 4.\r\nNode 2&#39;s value is 2, and it has two neighbors: Node 1 and 3.\r\nNode 3&#39;s value is 3, and it has two neighbors: Node 2 and 4.\r\nNode 4&#39;s value is 4, and it has two neighbors: Node 1 and 3.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes will be between 1 and 100.</li>\r\n\t<li>The undirected&nbsp;graph is a <a href=\"https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)#Simple_graph\" target=\"_blank\">simple graph</a>,&nbsp;which means no repeated edges and no self-loops in the graph.</li>\r\n\t<li>Since the graph is undirected, if node <em>p</em>&nbsp;has node <em>q</em>&nbsp;as&nbsp;neighbor, then node <em>q</em>&nbsp;must have node <em>p</em>&nbsp;as neighbor too.</li>\r\n\t<li>You must return the <strong>copy of the given node</strong> as a reference to the cloned graph.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u65e0\u5411<a href=\"https://baike.baidu.com/item/\u8fde\u901a\u56fe/6460995?fr=aladdin\" target=\"_blank\"><strong>\u8fde\u901a</strong></a>\u56fe\u4e2d\u4e00\u4e2a\u8282\u70b9\u7684\u5f15\u7528\uff0c\u8fd4\u56de\u8be5\u56fe\u7684<a href=\"https://baike.baidu.com/item/\u6df1\u62f7\u8d1d/22785317?fr=aladdin\" target=\"_blank\"><strong>\u6df1\u62f7\u8d1d</strong></a>\uff08\u514b\u9686\uff09\u3002\u56fe\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5305\u542b\u5b83\u7684\u503c <code>val</code>\uff08<code>Int</code>\uff09 \u548c\u5176\u90bb\u5c45\u7684\u5217\u8868\uff08<code>list[Node]</code>\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/113_sample.png\" style=\"height: 149px; width: 200px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n</strong>{&quot;$id&quot;:&quot;1&quot;,&quot;neighbors&quot;:[{&quot;$id&quot;:&quot;2&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;1&quot;},{&quot;$id&quot;:&quot;3&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;2&quot;},{&quot;$id&quot;:&quot;4&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;3&quot;},{&quot;$ref&quot;:&quot;1&quot;}],&quot;val&quot;:4}],&quot;val&quot;:3}],&quot;val&quot;:2},{&quot;$ref&quot;:&quot;4&quot;}],&quot;val&quot;:1}\n\n<strong>\u89e3\u91ca\uff1a</strong>\n\u8282\u70b9 1 \u7684\u503c\u662f 1\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 2 \u548c 4 \u3002\n\u8282\u70b9 2 \u7684\u503c\u662f 2\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 1 \u548c 3 \u3002\n\u8282\u70b9 3 \u7684\u503c\u662f 3\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 2 \u548c 4 \u3002\n\u8282\u70b9 4 \u7684\u503c\u662f 4\uff0c\u5b83\u6709\u4e24\u4e2a\u90bb\u5c45\uff1a\u8282\u70b9 1 \u548c 3 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u8282\u70b9\u6570\u4ecb\u4e8e 1 \u5230 100 \u4e4b\u95f4\u3002</li>\n\t<li>\u65e0\u5411\u56fe\u662f\u4e00\u4e2a<a href=\"https://baike.baidu.com/item/\u7b80\u5355\u56fe/1680528?fr=aladdin\" target=\"_blank\">\u7b80\u5355\u56fe</a>\uff0c\u8fd9\u610f\u5473\u7740\u56fe\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\uff0c\u4e5f\u6ca1\u6709\u81ea\u73af\u3002</li>\n\t<li>\u7531\u4e8e\u56fe\u662f\u65e0\u5411\u7684\uff0c\u5982\u679c\u8282\u70b9 <em>p</em> \u662f\u8282\u70b9 <em>q</em> \u7684\u90bb\u5c45\uff0c\u90a3\u4e48\u8282\u70b9 <em>q</em> \u4e5f\u5fc5\u987b\u662f\u8282\u70b9 <em>p</em>&nbsp;\u7684\u90bb\u5c45\u3002</li>\n\t<li>\u5fc5\u987b\u5c06<strong>\u7ed9\u5b9a\u8282\u70b9\u7684\u62f7\u8d1d</strong>\u4f5c\u4e3a\u5bf9\u514b\u9686\u56fe\u7684\u5f15\u7528\u8fd4\u56de\u3002</li>\n</ol>\n",
        "titleZh": "\u514b\u9686\u56fe",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "LinkedIn",
            "Alibaba",
            "Snapchat",
            "Twitter",
            "Pocket Gems"
        ]
    },
    {
        "leetId": "134",
        "link": "gas-station",
        "title": "Gas Station",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "45.8%",
        "questionDescription": "<p>There are <em>N</em> gas stations along a circular route, where the amount of gas at station <em>i</em> is <code>gas[i]</code>.</p>\r\n\r\n<p>You have a car with an unlimited gas tank and it costs <code>cost[i]</code> of gas to travel from station <em>i</em> to its next station (<em>i</em>+1). You begin the journey with an empty tank at one of the gas stations.</p>\r\n\r\n<p>Return the starting gas station&#39;s index if you can travel around the circuit once in the clockwise direction, otherwise return -1.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>If there exists a&nbsp;solution, it is guaranteed to be unique.</li>\r\n\t<li>Both input arrays are non-empty and have the same length.</li>\r\n\t<li>Each element in the input arrays is a non-negative integer.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\ngas  = [1,2,3,4,5]\r\ncost = [3,4,5,1,2]\r\n\r\n<strong>Output:</strong> 3\r\n\r\n<strong>Explanation:\r\n</strong>Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\r\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\r\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\r\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\r\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\r\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\r\nTherefore, return 3 as the starting index.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\ngas  = [2,3,4]\r\ncost = [3,4,3]\r\n\r\n<strong>Output:</strong> -1\r\n\r\n<strong>Explanation:\r\n</strong>You can&#39;t start at station 0 or 1, as there is not enough gas to travel to the next station.\r\nLet&#39;s start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\r\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\r\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\r\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\r\nTherefore, you can&#39;t travel around the circuit once no matter where you start.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e00\u6761\u73af\u8def\u4e0a\u6709&nbsp;<em>N</em>&nbsp;\u4e2a\u52a0\u6cb9\u7ad9\uff0c\u5176\u4e2d\u7b2c&nbsp;<em>i</em>&nbsp;\u4e2a\u52a0\u6cb9\u7ad9\u6709\u6c7d\u6cb9&nbsp;<code>gas[i]</code><em>&nbsp;</em>\u5347\u3002</p>\n\n<p>\u4f60\u6709\u4e00\u8f86\u6cb9\u7bb1\u5bb9\u91cf\u65e0\u9650\u7684\u7684\u6c7d\u8f66\uff0c\u4ece\u7b2c<em> i </em>\u4e2a\u52a0\u6cb9\u7ad9\u5f00\u5f80\u7b2c<em> i+1&nbsp;</em>\u4e2a\u52a0\u6cb9\u7ad9\u9700\u8981\u6d88\u8017\u6c7d\u6cb9&nbsp;<code>cost[i]</code><em>&nbsp;</em>\u5347\u3002\u4f60\u4ece\u5176\u4e2d\u7684\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u5f00\u59cb\u65f6\u6cb9\u7bb1\u4e3a\u7a7a\u3002</p>\n\n<p>\u5982\u679c\u4f60\u53ef\u4ee5\u7ed5\u73af\u8def\u884c\u9a76\u4e00\u5468\uff0c\u5219\u8fd4\u56de\u51fa\u53d1\u65f6\u52a0\u6cb9\u7ad9\u7684\u7f16\u53f7\uff0c\u5426\u5219\u8fd4\u56de -1\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong>&nbsp;</p>\n\n<ul>\n\t<li>\u5982\u679c\u9898\u76ee\u6709\u89e3\uff0c\u8be5\u7b54\u6848\u5373\u4e3a\u552f\u4e00\u7b54\u6848\u3002</li>\n\t<li>\u8f93\u5165\u6570\u7ec4\u5747\u4e3a\u975e\u7a7a\u6570\u7ec4\uff0c\u4e14\u957f\u5ea6\u76f8\u540c\u3002</li>\n\t<li>\u8f93\u5165\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5747\u4e3a\u975e\u8d1f\u6570\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \ngas  = [1,2,3,4,5]\ncost = [3,4,5,1,2]\n\n<strong>\u8f93\u51fa:</strong> 3\n\n<strong>\u89e3\u91ca:\n</strong>\u4ece 3 \u53f7\u52a0\u6cb9\u7ad9(\u7d22\u5f15\u4e3a 3 \u5904)\u51fa\u53d1\uff0c\u53ef\u83b7\u5f97 4 \u5347\u6c7d\u6cb9\u3002\u6b64\u65f6\u6cb9\u7bb1\u6709 = 0 + 4 = 4 \u5347\u6c7d\u6cb9\n\u5f00\u5f80 4 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 4 - 1 + 5 = 8 \u5347\u6c7d\u6cb9\n\u5f00\u5f80 0 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 8 - 2 + 1 = 7 \u5347\u6c7d\u6cb9\n\u5f00\u5f80 1 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 7 - 3 + 2 = 6 \u5347\u6c7d\u6cb9\n\u5f00\u5f80 2 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 6 - 4 + 3 = 5 \u5347\u6c7d\u6cb9\n\u5f00\u5f80 3 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u4f60\u9700\u8981\u6d88\u8017 5 \u5347\u6c7d\u6cb9\uff0c\u6b63\u597d\u8db3\u591f\u4f60\u8fd4\u56de\u5230 3 \u53f7\u52a0\u6cb9\u7ad9\u3002\n\u56e0\u6b64\uff0c3 \u53ef\u4e3a\u8d77\u59cb\u7d22\u5f15\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \ngas  = [2,3,4]\ncost = [3,4,3]\n\n<strong>\u8f93\u51fa:</strong> -1\n\n<strong>\u89e3\u91ca:\n</strong>\u4f60\u4e0d\u80fd\u4ece 0 \u53f7\u6216 1 \u53f7\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u56e0\u4e3a\u6ca1\u6709\u8db3\u591f\u7684\u6c7d\u6cb9\u53ef\u4ee5\u8ba9\u4f60\u884c\u9a76\u5230\u4e0b\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u3002\n\u6211\u4eec\u4ece 2 \u53f7\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u53ef\u4ee5\u83b7\u5f97 4 \u5347\u6c7d\u6cb9\u3002 \u6b64\u65f6\u6cb9\u7bb1\u6709 = 0 + 4 = 4 \u5347\u6c7d\u6cb9\n\u5f00\u5f80 0 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 4 - 3 + 2 = 3 \u5347\u6c7d\u6cb9\n\u5f00\u5f80 1 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u6b64\u65f6\u6cb9\u7bb1\u6709 3 - 3 + 3 = 3 \u5347\u6c7d\u6cb9\n\u4f60\u65e0\u6cd5\u8fd4\u56de 2 \u53f7\u52a0\u6cb9\u7ad9\uff0c\u56e0\u4e3a\u8fd4\u7a0b\u9700\u8981\u6d88\u8017 4 \u5347\u6c7d\u6cb9\uff0c\u4f46\u662f\u4f60\u7684\u6cb9\u7bb1\u53ea\u6709 3 \u5347\u6c7d\u6cb9\u3002\n\u56e0\u6b64\uff0c\u65e0\u8bba\u600e\u6837\uff0c\u4f60\u90fd\u4e0d\u53ef\u80fd\u7ed5\u73af\u8def\u884c\u9a76\u4e00\u5468\u3002</pre>\n",
        "titleZh": "\u52a0\u6cb9\u7ad9",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft"
        ]
    },
    {
        "leetId": "135",
        "link": "candy",
        "title": "Candy",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "38.9%",
        "questionDescription": "<p>There are <em>N</em> children standing in a line. Each child is assigned a rating value.</p>\r\n\r\n<p>You are giving candies to these children subjected to the following requirements:</p>\r\n\r\n<ul>\r\n\t<li>Each child must have at least one candy.</li>\r\n\t<li>Children with a higher rating get more candies than their neighbors.</li>\r\n</ul>\r\n\r\n<p>What is the minimum candies you must give?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,0,2]\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,2]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\r\n             The third child gets 1 candy because it satisfies the above two conditions.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u8001\u5e08\u60f3\u7ed9\u5b69\u5b50\u4eec\u5206\u53d1\u7cd6\u679c\uff0c\u6709 <em>N</em>&nbsp;\u4e2a\u5b69\u5b50\u7ad9\u6210\u4e86\u4e00\u6761\u76f4\u7ebf\uff0c\u8001\u5e08\u4f1a\u6839\u636e\u6bcf\u4e2a\u5b69\u5b50\u7684\u8868\u73b0\uff0c\u9884\u5148\u7ed9\u4ed6\u4eec\u8bc4\u5206\u3002</p>\n\n<p>\u4f60\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u8981\u6c42\uff0c\u5e2e\u52a9\u8001\u5e08\u7ed9\u8fd9\u4e9b\u5b69\u5b50\u5206\u53d1\u7cd6\u679c\uff1a</p>\n\n<ul>\n\t<li>\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u5206\u914d\u5230 1 \u4e2a\u7cd6\u679c\u3002</li>\n\t<li>\u76f8\u90bb\u7684\u5b69\u5b50\u4e2d\uff0c\u8bc4\u5206\u9ad8\u7684\u5b69\u5b50\u5fc5\u987b\u83b7\u5f97\u66f4\u591a\u7684\u7cd6\u679c\u3002</li>\n</ul>\n\n<p>\u90a3\u4e48\u8fd9\u6837\u4e0b\u6765\uff0c\u8001\u5e08\u81f3\u5c11\u9700\u8981\u51c6\u5907\u591a\u5c11\u9897\u7cd6\u679c\u5462\uff1f</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,0,2]\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \u4f60\u53ef\u4ee5\u5206\u522b\u7ed9\u8fd9\u4e09\u4e2a\u5b69\u5b50\u5206\u53d1 2\u30011\u30012 \u9897\u7cd6\u679c\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,2]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u4f60\u53ef\u4ee5\u5206\u522b\u7ed9\u8fd9\u4e09\u4e2a\u5b69\u5b50\u5206\u53d1 1\u30012\u30011 \u9897\u7cd6\u679c\u3002\n     \u7b2c\u4e09\u4e2a\u5b69\u5b50\u53ea\u5f97\u5230 1 \u9897\u7cd6\u679c\uff0c\u8fd9\u5df2\u6ee1\u8db3\u4e0a\u8ff0\u4e24\u4e2a\u6761\u4ef6\u3002</pre>\n",
        "titleZh": "\u5206\u53d1\u7cd6\u679c",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Microsoft",
            "Uber",
            "Snapchat",
            "Palantir"
        ]
    },
    {
        "leetId": "136",
        "link": "single-number",
        "title": "Single Number",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "60.3%",
        "questionDescription": "<p>Given a <strong>non-empty</strong>&nbsp;array of integers, every element appears <em>twice</em> except for one. Find that single one.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,2,1]\r\n<strong>Output:</strong> 1\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [4,1,2,1,2]\r\n<strong>Output:</strong> 4\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u975e\u7a7a</strong>\u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,2,1]\n<strong>\u8f93\u51fa:</strong> 1\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [4,1,2,1,2]\n<strong>\u8f93\u51fa:</strong> 4</pre>\n",
        "titleZh": "\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Adobe",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Oracle",
            "VMware",
            "Expedia",
            "Palantir Technologies",
            "Palantir",
            "SAP",
            "Riot Games",
            "Zappos"
        ]
    },
    {
        "leetId": "137",
        "link": "single-number-ii",
        "title": "Single Number II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "63.1%",
        "questionDescription": "<p>Given a <strong>non-empty</strong>&nbsp;array of integers, every element appears <em>three</em> times except for one, which appears exactly once. Find that single one.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,2,3,2]\r\n<strong>Output:</strong> 3\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [0,1,0,1,0,1,99]\r\n<strong>Output:</strong> 99</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u975e\u7a7a</strong>\u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e86\u4e09\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,2,3,2]\n<strong>\u8f93\u51fa:</strong> 3\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [0,1,0,1,0,1,99]\n<strong>\u8f93\u51fa:</strong> 99</pre>\n",
        "titleZh": "\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 II",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook"
        ]
    },
    {
        "leetId": "138",
        "link": "copy-list-with-random-pointer",
        "title": "Copy List with Random Pointer",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "28.6%",
        "questionDescription": "<p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p>\r\n\r\n<p>Return a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> of the list.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://discuss.leetcode.com/uploads/files/1470150906153-2yxeznm.png\" style=\"width: 375px; height: 129px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong><span id=\"example-input-1-1\">{&quot;$id&quot;:&quot;1&quot;,&quot;next&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;next&quot;:null,&quot;random&quot;:{&quot;$ref&quot;:&quot;2&quot;},&quot;val&quot;:2},&quot;random&quot;:{&quot;$ref&quot;:&quot;2&quot;},&quot;val&quot;:1}\r\n</span>\r\n<b>Explanation:\r\n</b>Node 1&#39;s value is 1, both of its next and random pointer points to Node 2.\r\nNode 2&#39;s value is 2, its next pointer points to null and its random pointer points to itself.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>You must return the <strong>copy of the given head</strong>&nbsp;as a reference to the cloned list.</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u989d\u5916\u589e\u52a0\u7684\u968f\u673a\u6307\u9488\uff0c\u8be5\u6307\u9488\u53ef\u4ee5\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u4f55\u8282\u70b9\u6216\u7a7a\u8282\u70b9\u3002</p>\n\n<p>\u8981\u6c42\u8fd4\u56de\u8fd9\u4e2a\u94fe\u8868\u7684<strong><a href=\"https://baike.baidu.com/item/\u6df1\u62f7\u8d1d/22785317?fr=aladdin\" target=\"_blank\">\u6df1\u62f7\u8d1d</a></strong>\u3002&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/1470150906153-2yxeznm.png\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n</strong>{&quot;$id&quot;:&quot;1&quot;,&quot;next&quot;:{&quot;$id&quot;:&quot;2&quot;,&quot;next&quot;:null,&quot;random&quot;:{&quot;$ref&quot;:&quot;2&quot;},&quot;val&quot;:2},&quot;random&quot;:{&quot;$ref&quot;:&quot;2&quot;},&quot;val&quot;:1}\n\n<strong>\u89e3\u91ca\uff1a\n</strong>\u8282\u70b9 1 \u7684\u503c\u662f 1\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a\u6307\u9488\u548c\u968f\u673a\u6307\u9488\u90fd\u6307\u5411\u8282\u70b9 2 \u3002\n\u8282\u70b9 2 \u7684\u503c\u662f 2\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a\u6307\u9488\u6307\u5411 null\uff0c\u968f\u673a\u6307\u9488\u6307\u5411\u5b83\u81ea\u5df1\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u4f60\u5fc5\u987b\u8fd4\u56de<strong>\u7ed9\u5b9a\u5934\u7684\u62f7\u8d1d</strong>\u4f5c\u4e3a\u5bf9\u514b\u9686\u5217\u8868\u7684\u5f15\u7528\u3002</li>\n</ol>\n",
        "titleZh": "\u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Goldman Sachs",
            "Yelp",
            "eBay",
            "VMware",
            "Expedia",
            "Cisco",
            "Mathworks",
            "Palantir",
            "Visa",
            "Qualtrics",
            "Capital One"
        ]
    },
    {
        "leetId": "139",
        "link": "word-break",
        "title": "Word Break",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "39.9%",
        "questionDescription": "<p>Given a <strong>non-empty</strong> string <em>s</em> and a dictionary <em>wordDict</em> containing a list of <strong>non-empty</strong> words, determine if <em>s</em> can be segmented into a space-separated sequence of one or more dictionary words.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The same word in the dictionary may be reused multiple times in the segmentation.</li>\r\n\t<li>You may assume the dictionary does not contain duplicate words.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong> Return true because <code>&quot;leetcode&quot;</code> can be segmented as <code>&quot;leet code&quot;</code>.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong> Return true because <code>&quot;</code>applepenapple<code>&quot;</code> can be segmented as <code>&quot;</code>apple pen apple<code>&quot;</code>.\r\n&nbsp;            Note that you are allowed to reuse a dictionary word.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]\r\n<strong>Output:</strong> false\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u975e\u7a7a</strong>\u5b57\u7b26\u4e32 <em>s</em> \u548c\u4e00\u4e2a\u5305\u542b<strong>\u975e\u7a7a</strong>\u5355\u8bcd\u5217\u8868\u7684\u5b57\u5178 <em>wordDict</em>\uff0c\u5224\u5b9a&nbsp;<em>s</em> \u662f\u5426\u53ef\u4ee5\u88ab\u7a7a\u683c\u62c6\u5206\u4e3a\u4e00\u4e2a\u6216\u591a\u4e2a\u5728\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u62c6\u5206\u65f6\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u5178\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5355\u8bcd\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong> \u8fd4\u56de true \u56e0\u4e3a &quot;leetcode&quot; \u53ef\u4ee5\u88ab\u62c6\u5206\u6210 &quot;leet code&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong> \u8fd4\u56de true \u56e0\u4e3a <code>&quot;</code>applepenapple<code>&quot;</code> \u53ef\u4ee5\u88ab\u62c6\u5206\u6210 <code>&quot;</code>apple pen apple<code>&quot;</code>\u3002\n&nbsp;    \u6ce8\u610f\u4f60\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]\n<strong>\u8f93\u51fa:</strong> false\n</pre>\n",
        "titleZh": "\u5355\u8bcd\u62c6\u5206",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Snapchat",
            "Twitter",
            "Oracle",
            "Yelp",
            "eBay",
            "Walmart Labs",
            "VMware",
            "Lyft",
            "Zenefits",
            "Paypal",
            "Pinterest",
            "Zillow",
            "Pocket Gems",
            "Square",
            "Qualtrics",
            "Coupang",
            "Twilio"
        ]
    },
    {
        "leetId": "140",
        "link": "word-break-ii",
        "title": "Word Break II",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "36.2%",
        "questionDescription": "<p>Given a <strong>non-empty</strong> string <em>s</em> and a dictionary <em>wordDict</em> containing a list of <strong>non-empty</strong> words, add spaces in <em>s</em> to construct a sentence where each word is a valid dictionary word.&nbsp;Return all such possible sentences.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The same word in the dictionary may be reused multiple times in the segmentation.</li>\r\n\t<li>You may assume the dictionary does not contain duplicate words.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong>s = &quot;<code>catsanddog</code>&quot;\r\nwordDict = <code>[&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</code>\r\n<strong>Output:\r\n</strong><code>[\r\n&nbsp; &quot;cats and dog&quot;,\r\n&nbsp; &quot;cat sand dog&quot;\r\n]</code>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong>s = &quot;pineapplepenapple&quot;\r\nwordDict = [&quot;apple&quot;, &quot;pen&quot;, &quot;applepen&quot;, &quot;pine&quot;, &quot;pineapple&quot;]\r\n<strong>Output:\r\n</strong>[\r\n&nbsp; &quot;pine apple pen apple&quot;,\r\n&nbsp; &quot;pineapple pen apple&quot;,\r\n&nbsp; &quot;pine applepen apple&quot;\r\n]\r\n<strong>Explanation:</strong> Note that you are allowed to reuse a dictionary word.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong>s = &quot;catsandog&quot;\r\nwordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]\r\n<strong>Output:\r\n</strong>[]</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u975e\u7a7a</strong>\u5b57\u7b26\u4e32 <em>s</em> \u548c\u4e00\u4e2a\u5305\u542b<strong>\u975e\u7a7a</strong>\u5355\u8bcd\u5217\u8868\u7684\u5b57\u5178 <em>wordDict</em>\uff0c\u5728\u5b57\u7b26\u4e32\u4e2d\u589e\u52a0\u7a7a\u683c\u6765\u6784\u5efa\u4e00\u4e2a\u53e5\u5b50\uff0c\u4f7f\u5f97\u53e5\u5b50\u4e2d\u6240\u6709\u7684\u5355\u8bcd\u90fd\u5728\u8bcd\u5178\u4e2d\u3002\u8fd4\u56de\u6240\u6709\u8fd9\u4e9b\u53ef\u80fd\u7684\u53e5\u5b50\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u5206\u9694\u65f6\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u5178\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5355\u8bcd\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:\n</strong>s = &quot;<code>catsanddog</code>&quot;\nwordDict = <code>[&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</code>\n<strong>\u8f93\u51fa:\n</strong><code>[\n&nbsp; &quot;cats and dog&quot;,\n&nbsp; &quot;cat sand dog&quot;\n]</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:\n</strong>s = &quot;pineapplepenapple&quot;\nwordDict = [&quot;apple&quot;, &quot;pen&quot;, &quot;applepen&quot;, &quot;pine&quot;, &quot;pineapple&quot;]\n<strong>\u8f93\u51fa:\n</strong>[\n&nbsp; &quot;pine apple pen apple&quot;,\n&nbsp; &quot;pineapple pen apple&quot;,\n&nbsp; &quot;pine applepen apple&quot;\n]\n<strong>\u89e3\u91ca:</strong> \u6ce8\u610f\u4f60\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:\n</strong>s = &quot;catsandog&quot;\nwordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]\n<strong>\u8f93\u51fa:\n</strong>[]\n</pre>\n",
        "titleZh": "\u5355\u8bcd\u62c6\u5206 II",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Snapchat",
            "Twitter",
            "eBay",
            "Zenefits",
            "Pinterest",
            "Dropbox"
        ]
    },
    {
        "leetId": "141",
        "link": "linked-list-cycle",
        "title": "Linked List Cycle",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "38.0%",
        "questionDescription": "<p>Given a linked list, determine if it has a cycle in it.</p>\r\n\r\n<p>To represent a cycle in the given linked list, we use an integer <code>pos</code> which represents the position (0-indexed)&nbsp;in the linked list where tail connects to. If <code>pos</code> is <code>-1</code>, then there is no cycle in the linked list.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>head = <span id=\"example-input-1-1\">[3,2,0,-4]</span>, pos = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true\r\n<strong>Explanation:</strong> There is a cycle in the linked list, where tail connects to the second node.</span>\r\n</pre>\r\n</div>\r\n\r\n<div>\r\n<p><span><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png\" style=\"width: 300px; height: 97px; margin-top: 8px; margin-bottom: 8px;\" /></span></p>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>head = <span id=\"example-input-1-1\">[1,2]</span>, pos = <span id=\"example-input-1-2\">0</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true\r\n<strong>Explanation:</strong> There is a cycle in the linked list, where tail connects to the first node.</span>\r\n</pre>\r\n</div>\r\n\r\n<div>\r\n<p><span><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"width: 141px; height: 74px;\" /></span></p>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>head = <span id=\"example-input-1-1\">[1]</span>, pos = <span id=\"example-input-1-2\">-1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">false\r\n<strong>Explanation:</strong> There is no cycle in the linked list.</span>\r\n</pre>\r\n</div>\r\n\r\n<p><span><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"width: 45px; height: 45px;\" /></span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Can you solve it using <em>O(1)</em> (i.e. constant) memory?</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002</p>\n\n<p>\u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u6211\u4eec\u4f7f\u7528\u6574\u6570 <code>pos</code> \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002 \u5982\u679c <code>pos</code> \u662f <code>-1</code>\uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>head = [3,2,0,-4], pos = 1\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" style=\"height: 97px; width: 300px;\"></p>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>head = [1,2], pos = 0\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"height: 74px; width: 141px;\"></p>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>head = [1], pos = -1\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"height: 45px; width: 45px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<p>\u4f60\u80fd\u7528 <em>O(1)</em>\uff08\u5373\uff0c\u5e38\u91cf\uff09\u5185\u5b58\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f</p>\n",
        "titleZh": "\u73af\u5f62\u94fe\u8868",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Goldman Sachs",
            "Oracle",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "SAP",
            "NetEase",
            "Yandex",
            "Intel",
            "IBM",
            "Morgan Stanley"
        ]
    },
    {
        "leetId": "142",
        "link": "linked-list-cycle-ii",
        "title": "Linked List Cycle II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "37.6%",
        "questionDescription": "<p>Given a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.</p>\r\n\r\n<p>To represent a cycle in the given linked list, we use an integer <code>pos</code> which represents the position (0-indexed)&nbsp;in the linked list where tail connects to. If <code>pos</code> is <code>-1</code>, then there is no cycle in the linked list.</p>\r\n\r\n<p><b>Note:</b> Do not modify the linked list.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>head = [3,2,0,-4], pos = 1\r\n<strong>Output: </strong>tail connects to node index 1\r\n<strong>Explanation:</strong> There is a cycle in the linked list, where tail connects to the second node.\r\n</pre>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png\" style=\"height: 97px; width: 300px;\" /></p>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>head = [1,2], pos = 0\r\n<strong>Output: </strong>tail connects to node index 0\r\n<strong>Explanation:</strong> There is a cycle in the linked list, where tail connects to the first node.\r\n</pre>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"height: 74px; width: 141px;\" /></p>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>head = [1], pos = -1\r\n<strong>Output: </strong>no cycle\r\n<strong>Explanation:</strong> There is no cycle in the linked list.\r\n</pre>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"height: 45px; width: 45px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Follow up</b>:<br />\r\nCan you solve it without using extra space?</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002&nbsp;\u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de&nbsp;<code>null</code>\u3002</p>\n\n<p>\u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u6211\u4eec\u4f7f\u7528\u6574\u6570 <code>pos</code> \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002 \u5982\u679c <code>pos</code> \u662f <code>-1</code>\uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u4e0d\u5141\u8bb8\u4fee\u6539\u7ed9\u5b9a\u7684\u94fe\u8868\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>head = [3,2,0,-4], pos = 1\n<strong>\u8f93\u51fa\uff1a</strong>tail connects to node index 1\n<strong>\u89e3\u91ca\uff1a</strong>\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\" style=\"height: 97px; width: 300px;\"></p>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>head = [1,2], pos = 0\n<strong>\u8f93\u51fa\uff1a</strong>tail connects to node index 0\n<strong>\u89e3\u91ca\uff1a</strong>\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"height: 74px; width: 141px;\"></p>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>head = [1], pos = -1\n<strong>\u8f93\u51fa\uff1a</strong>no cycle\n<strong>\u89e3\u91ca\uff1a</strong>\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002\n</pre>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"height: 45px; width: 45px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br>\n\u4f60\u662f\u5426\u53ef\u4ee5\u4e0d\u7528\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u6b64\u9898\uff1f</p>\n",
        "titleZh": "\u73af\u5f62\u94fe\u8868 II",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Goldman Sachs",
            "Tencent"
        ]
    },
    {
        "leetId": "143",
        "link": "reorder-list",
        "title": "Reorder List",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "48.7%",
        "questionDescription": "<p>Given a singly linked list <em>L</em>: <em>L</em><sub>0</sub>&rarr;<em>L</em><sub>1</sub>&rarr;&hellip;&rarr;<em>L</em><sub><em>n</em>-1</sub>&rarr;<em>L</em><sub>n</sub>,<br />\r\nreorder it to: <em>L</em><sub>0</sub>&rarr;<em>L</em><sub><em>n</em></sub>&rarr;<em>L</em><sub>1</sub>&rarr;<em>L</em><sub><em>n</em>-1</sub>&rarr;<em>L</em><sub>2</sub>&rarr;<em>L</em><sub><em>n</em>-2</sub>&rarr;&hellip;</p>\r\n\r\n<p>You may <strong>not</strong> modify the values in the list&#39;s nodes, only nodes itself may be changed.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\nGiven 1-&gt;2-&gt;3-&gt;4, reorder it to 1-&gt;4-&gt;2-&gt;3.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\nGiven 1-&gt;2-&gt;3-&gt;4-&gt;5, reorder it to 1-&gt;5-&gt;2-&gt;4-&gt;3.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868&nbsp;<em>L</em>\uff1a<em>L</em><sub>0</sub>&rarr;<em>L</em><sub>1</sub>&rarr;&hellip;&rarr;<em>L</em><sub><em>n</em>-1</sub>&rarr;<em>L</em><sub>n \uff0c</sub><br>\n\u5c06\u5176\u91cd\u65b0\u6392\u5217\u540e\u53d8\u4e3a\uff1a <em>L</em><sub>0</sub>&rarr;<em>L</em><sub><em>n</em></sub>&rarr;<em>L</em><sub>1</sub>&rarr;<em>L</em><sub><em>n</em>-1</sub>&rarr;<em>L</em><sub>2</sub>&rarr;<em>L</em><sub><em>n</em>-2</sub>&rarr;&hellip;</p>\n\n<p>\u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\u7ed9\u5b9a\u94fe\u8868 1-&gt;2-&gt;3-&gt;4, \u91cd\u65b0\u6392\u5217\u4e3a 1-&gt;4-&gt;2-&gt;3.</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\u7ed9\u5b9a\u94fe\u8868 1-&gt;2-&gt;3-&gt;4-&gt;5, \u91cd\u65b0\u6392\u5217\u4e3a 1-&gt;5-&gt;2-&gt;4-&gt;3.</pre>\n",
        "titleZh": "\u91cd\u6392\u94fe\u8868",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Cisco",
            "Hulu"
        ]
    },
    {
        "leetId": "144",
        "link": "binary-tree-preorder-traversal",
        "title": "Binary Tree Preorder Traversal",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "58.9%",
        "questionDescription": "<p>Given a binary tree, return the <em>preorder</em> traversal of its nodes&#39; values.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;<code>[1,null,2,3]</code>\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   3\r\n\r\n<strong>Output:</strong>&nbsp;<code>[1,2,3]</code>\r\n</pre>\r\n\r\n<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684&nbsp;<em>\u524d\u5e8f&nbsp;</em>\u904d\u5386\u3002</p>\n\n<p>&nbsp;<strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \n\n<strong>\u8f93\u51fa:</strong> [1,2,3]\n</pre>\n\n<p><strong>\u8fdb\u9636:</strong>&nbsp;\u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f</p>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Facebook",
            "Adobe",
            "Alibaba",
            "Cisco"
        ]
    },
    {
        "leetId": "145",
        "link": "binary-tree-postorder-traversal",
        "title": "Binary Tree Postorder Traversal",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "64.4%",
        "questionDescription": "<p>Given a binary tree, return the <em>postorder</em> traversal of its nodes&#39; values.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;<code>[1,null,2,3]</code>\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   3\r\n\r\n<strong>Output:</strong>&nbsp;<code>[3,2,1]</code>\r\n</pre>\r\n\r\n<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5b83\u7684 <em>\u540e\u5e8f&nbsp;</em>\u904d\u5386\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,null,2,3]  \n   1\n    \\\n     2\n    /\n   3 \n\n<strong>\u8f93\u51fa:</strong> [3,2,1]</pre>\n\n<p><strong>\u8fdb\u9636:</strong>&nbsp;\u9012\u5f52\u7b97\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f</p>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Yahoo",
            "Baidu"
        ]
    },
    {
        "leetId": "146",
        "link": "lru-cache",
        "title": "LRU Cache",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "40.1%",
        "questionDescription": "<p>\r\nDesign and implement a data structure for <a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\" target=\"_blank\">Least Recently Used (LRU) cache</a>. It should support the following operations: <code>get</code> and <code>put</code>.\r\n</p>\r\n\r\n<p>\r\n<code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br>\r\n<code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.\r\n</p>\r\n\r\n<p><b>Follow up:</b><br />\r\nCould you do both operations in <b>O(1)</b> time complexity?</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nLRUCache cache = new LRUCache( 2 /* capacity */ );\r\n\r\ncache.put(1, 1);\r\ncache.put(2, 2);\r\ncache.get(1);       // returns 1\r\ncache.put(3, 3);    // evicts key 2\r\ncache.get(2);       // returns -1 (not found)\r\ncache.put(4, 4);    // evicts key 1\r\ncache.get(1);       // returns -1 (not found)\r\ncache.get(3);       // returns 3\r\ncache.get(4);       // returns 4\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u8fd0\u7528\u4f60\u6240\u638c\u63e1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e00\u4e2a&nbsp; <a href=\"https://baike.baidu.com/item/LRU\" target=\"_blank\">LRU (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) \u7f13\u5b58\u673a\u5236</a>\u3002\u5b83\u5e94\u8be5\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u83b7\u53d6\u6570\u636e <code>get</code> \u548c \u5199\u5165\u6570\u636e <code>put</code> \u3002</p>\n\n<p>\u83b7\u53d6\u6570\u636e <code>get(key)</code> - \u5982\u679c\u5bc6\u94a5 (key) \u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u83b7\u53d6\u5bc6\u94a5\u7684\u503c\uff08\u603b\u662f\u6b63\u6570\uff09\uff0c\u5426\u5219\u8fd4\u56de -1\u3002<br>\n\u5199\u5165\u6570\u636e <code>put(key, value)</code> - \u5982\u679c\u5bc6\u94a5\u4e0d\u5b58\u5728\uff0c\u5219\u5199\u5165\u5176\u6570\u636e\u503c\u3002\u5f53\u7f13\u5b58\u5bb9\u91cf\u8fbe\u5230\u4e0a\u9650\u65f6\uff0c\u5b83\u5e94\u8be5\u5728\u5199\u5165\u65b0\u6570\u636e\u4e4b\u524d\u5220\u9664\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684\u6570\u636e\u503c\uff0c\u4ece\u800c\u4e3a\u65b0\u7684\u6570\u636e\u503c\u7559\u51fa\u7a7a\u95f4\u3002</p>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<p>\u4f60\u662f\u5426\u53ef\u4ee5\u5728&nbsp;<strong>O(1)</strong> \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u8fd9\u4e24\u79cd\u64cd\u4f5c\uff1f</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>LRUCache cache = new LRUCache( 2 /* \u7f13\u5b58\u5bb9\u91cf */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // \u8fd4\u56de  1\ncache.put(3, 3);    // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5bc6\u94a5 2 \u4f5c\u5e9f\ncache.get(2);       // \u8fd4\u56de -1 (\u672a\u627e\u5230)\ncache.put(4, 4);    // \u8be5\u64cd\u4f5c\u4f1a\u4f7f\u5f97\u5bc6\u94a5 1 \u4f5c\u5e9f\ncache.get(1);       // \u8fd4\u56de -1 (\u672a\u627e\u5230)\ncache.get(3);       // \u8fd4\u56de  3\ncache.get(4);       // \u8fd4\u56de  4\n</pre>\n",
        "titleZh": "LRU\u7f13\u5b58\u673a\u5236",
        "tags": [
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Snapchat",
            "Twitter",
            "Goldman Sachs",
            "Oracle",
            "Yelp",
            "eBay",
            "Walmart Labs",
            "VMware",
            "Salesforce",
            "Lyft",
            "Zenefits",
            "Paypal",
            "Cisco",
            "Pinterest",
            "Zillow",
            "Intuit",
            "Two Sigma",
            "Palantir Technologies",
            "Hulu",
            "Nvidia",
            "Palantir",
            "SAP",
            "Visa",
            "Yandex",
            "Dropbox",
            "Quora",
            "GoDaddy",
            "JPMorgan",
            "Affirm",
            "Houzz",
            "Citadel",
            "Twilio",
            "Wish",
            "Grab"
        ]
    },
    {
        "leetId": "147",
        "link": "insertion-sort-list",
        "title": "Insertion Sort List",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "56.5%",
        "questionDescription": "<p>Sort a linked list using insertion sort.</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<p><img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif\" style=\"height:180px; width:300px\" /><br />\r\n<small>A graphical example of insertion sort. The partial sorted list (black) initially contains only the first element in the list.<br />\r\nWith each iteration one element (red) is removed from the input data and inserted in-place into the sorted list</small><br />\r\n&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<p><strong>Algorithm of Insertion Sort:</strong></p>\r\n\r\n<ol>\r\n\t<li>Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list.</li>\r\n\t<li>At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there.</li>\r\n\t<li>It repeats until no input elements remain.</li>\r\n</ol>\r\n\r\n<p><br />\r\n<strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 4-&gt;2-&gt;1-&gt;3\r\n<strong>Output:</strong> 1-&gt;2-&gt;3-&gt;4\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> -1-&gt;5-&gt;3-&gt;4-&gt;0\r\n<strong>Output:</strong> -1-&gt;0-&gt;3-&gt;4-&gt;5\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f\u3002</p>\n\n<p><img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif\"><br>\n<small>\u63d2\u5165\u6392\u5e8f\u7684\u52a8\u753b\u6f14\u793a\u5982\u4e0a\u3002\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u8be5\u94fe\u8868\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u5df2\u7ecf\u90e8\u5206\u6392\u5e8f\uff08\u7528\u9ed1\u8272\u8868\u793a\uff09\u3002<br>\n\u6bcf\u6b21\u8fed\u4ee3\u65f6\uff0c\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u79fb\u9664\u4e00\u4e2a\u5143\u7d20\uff08\u7528\u7ea2\u8272\u8868\u793a\uff09\uff0c\u5e76\u539f\u5730\u5c06\u5176\u63d2\u5165\u5230\u5df2\u6392\u597d\u5e8f\u7684\u94fe\u8868\u4e2d\u3002</small></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\uff1a</strong></p>\n\n<ol>\n\t<li>\u63d2\u5165\u6392\u5e8f\u662f\u8fed\u4ee3\u7684\uff0c\u6bcf\u6b21\u53ea\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u6240\u6709\u5143\u7d20\u53ef\u4ee5\u5f62\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u8f93\u51fa\u5217\u8868\u3002</li>\n\t<li>\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u63d2\u5165\u6392\u5e8f\u53ea\u4ece\u8f93\u5165\u6570\u636e\u4e2d\u79fb\u9664\u4e00\u4e2a\u5f85\u6392\u5e8f\u7684\u5143\u7d20\uff0c\u627e\u5230\u5b83\u5728\u5e8f\u5217\u4e2d\u9002\u5f53\u7684\u4f4d\u7f6e\uff0c\u5e76\u5c06\u5176\u63d2\u5165\u3002</li>\n\t<li>\u91cd\u590d\u76f4\u5230\u6240\u6709\u8f93\u5165\u6570\u636e\u63d2\u5165\u5b8c\u4e3a\u6b62\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 4-&gt;2-&gt;1-&gt;3\n<strong>\u8f93\u51fa:</strong> 1-&gt;2-&gt;3-&gt;4\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> -1-&gt;5-&gt;3-&gt;4-&gt;0\n<strong>\u8f93\u51fa:</strong> -1-&gt;0-&gt;3-&gt;4-&gt;5\n</pre>\n",
        "titleZh": "\u5bf9\u94fe\u8868\u8fdb\u884c\u63d2\u5165\u6392\u5e8f",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Bloomberg",
            "Adobe",
            "Apple",
            "Yahoo",
            "Airbnb"
        ]
    },
    {
        "leetId": "148",
        "link": "sort-list",
        "title": "Sort List",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "59.3%",
        "questionDescription": "<p>Sort a linked list in <em>O</em>(<em>n</em> log <em>n</em>) time using constant space complexity.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 4-&gt;2-&gt;1-&gt;3\r\n<strong>Output:</strong> 1-&gt;2-&gt;3-&gt;4\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> -1-&gt;5-&gt;3-&gt;4-&gt;0\r\n<strong>Output:</strong> -1-&gt;0-&gt;3-&gt;4-&gt;5</pre>\r\n",
        "questionDescriptionZh": "<p>\u5728&nbsp;<em>O</em>(<em>n</em>&nbsp;log&nbsp;<em>n</em>) \u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5e38\u6570\u7ea7\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0b\uff0c\u5bf9\u94fe\u8868\u8fdb\u884c\u6392\u5e8f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 4-&gt;2-&gt;1-&gt;3\n<strong>\u8f93\u51fa:</strong> 1-&gt;2-&gt;3-&gt;4\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> -1-&gt;5-&gt;3-&gt;4-&gt;0\n<strong>\u8f93\u51fa:</strong> -1-&gt;0-&gt;3-&gt;4-&gt;5</pre>\n",
        "titleZh": "\u6392\u5e8f\u94fe\u8868",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Adobe",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Tencent",
            "VMware",
            "Pocket Gems",
            "Hulu",
            "Pony.ai"
        ]
    },
    {
        "leetId": "149",
        "link": "max-points-on-a-line",
        "title": "Max Points on a Line",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "16.4%",
        "questionDescription": "<p>Given <em>n</em> points on a 2D plane, find the maximum number of points that lie on the same straight line.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [[1,1],[2,2],[3,3]]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong>\r\n^\r\n|\r\n| &nbsp; &nbsp; &nbsp; &nbsp;o\r\n| &nbsp; &nbsp; o\r\n| &nbsp;o &nbsp;\r\n+-------------&gt;\r\n0 &nbsp;1 &nbsp;2 &nbsp;3  4\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong>\r\n^\r\n|\r\n|  o\r\n| &nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;&nbsp;      o\r\n| &nbsp;&nbsp;&nbsp;&nbsp;   o\r\n| &nbsp;o &nbsp;      o\r\n+-------------------&gt;\r\n0 &nbsp;1 &nbsp;2 &nbsp;3 &nbsp;4 &nbsp;5 &nbsp;6\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\uff0c\u5e73\u9762\u4e0a\u6709&nbsp;<em>n&nbsp;</em>\u4e2a\u70b9\uff0c\u6c42\u6700\u591a\u6709\u591a\u5c11\u4e2a\u70b9\u5728\u540c\u4e00\u6761\u76f4\u7ebf\u4e0a\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[1,1],[2,2],[3,3]]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong>\n^\n|\n| &nbsp; &nbsp; &nbsp; &nbsp;o\n| &nbsp; &nbsp; o\n| &nbsp;o &nbsp;\n+-------------&gt;\n0 &nbsp;1 &nbsp;2 &nbsp;3  4\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong>\n^\n|\n|  o\n| &nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;&nbsp;      o\n| &nbsp;&nbsp;&nbsp;&nbsp;   o\n| &nbsp;o &nbsp;      o\n+-------------------&gt;\n0 &nbsp;1 &nbsp;2 &nbsp;3 &nbsp;4 &nbsp;5 &nbsp;6</pre>\n",
        "titleZh": "\u76f4\u7ebf\u4e0a\u6700\u591a\u7684\u70b9\u6570",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Alibaba",
            "Twitter",
            "Yandex",
            "TripAdvisor"
        ]
    },
    {
        "leetId": "150",
        "link": "evaluate-reverse-polish-notation",
        "title": "Evaluate Reverse Polish Notation",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "43.3%",
        "questionDescription": "<p>Evaluate the value of an arithmetic expression in <a href=\"http://en.wikipedia.org/wiki/Reverse_Polish_notation\" target=\"_blank\">Reverse Polish Notation</a>.</p>\r\n\r\n<p>Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>. Each operand may be an integer or another expression.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Division between two integers should truncate toward zero.</li>\r\n\t<li>The given RPN expression is always valid. That means the expression would always evaluate to a result and there won&#39;t&nbsp;be any&nbsp;divide&nbsp;by zero operation.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;]\r\n<strong>Output:</strong> 9\r\n<strong>Explanation:</strong> ((2 + 1) * 3) = 9\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;]\r\n<strong>Output:</strong> 6\r\n<strong>Explanation:</strong> (4 + (13 / 5)) = 6\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [&quot;10&quot;, &quot;6&quot;, &quot;9&quot;, &quot;3&quot;, &quot;+&quot;, &quot;-11&quot;, &quot;*&quot;, &quot;/&quot;, &quot;*&quot;, &quot;17&quot;, &quot;+&quot;, &quot;5&quot;, &quot;+&quot;]\r\n<strong>Output:</strong> 22\r\n<strong>Explanation:</strong> \r\n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\r\n= ((10 * (6 / (12 * -11))) + 17) + 5\r\n= ((10 * (6 / -132)) + 17) + 5\r\n= ((10 * 0) + 17) + 5\r\n= (0 + 17) + 5\r\n= 17 + 5\r\n= 22\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u6839\u636e<a href=\"https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437\" target=\"_blank\">\u9006\u6ce2\u5170\u8868\u793a\u6cd5</a>\uff0c\u6c42\u8868\u8fbe\u5f0f\u7684\u503c\u3002</p>\n\n<p>\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u5305\u62ec&nbsp;<code>+</code>,&nbsp;<code>-</code>,&nbsp;<code>*</code>,&nbsp;<code>/</code>&nbsp;\u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u6574\u6570\u9664\u6cd5\u53ea\u4fdd\u7559\u6574\u6570\u90e8\u5206\u3002</li>\n\t<li>\u7ed9\u5b9a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u603b\u662f\u6709\u6548\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8868\u8fbe\u5f0f\u603b\u4f1a\u5f97\u51fa\u6709\u6548\u6570\u503c\u4e14\u4e0d\u5b58\u5728\u9664\u6570\u4e3a 0 \u7684\u60c5\u51b5\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;]\n<strong>\u8f93\u51fa:</strong> 9\n<strong>\u89e3\u91ca:</strong> ((2 + 1) * 3) = 9\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;]\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> (4 + (13 / 5)) = 6\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [&quot;10&quot;, &quot;6&quot;, &quot;9&quot;, &quot;3&quot;, &quot;+&quot;, &quot;-11&quot;, &quot;*&quot;, &quot;/&quot;, &quot;*&quot;, &quot;17&quot;, &quot;+&quot;, &quot;5&quot;, &quot;+&quot;]\n<strong>\u8f93\u51fa:</strong> 22\n<strong>\u89e3\u91ca:</strong> \n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22</pre>\n",
        "titleZh": "\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Uber",
            "Adobe",
            "LinkedIn",
            "Yelp",
            "Two Sigma",
            "Pure Storage"
        ]
    },
    {
        "leetId": "151",
        "link": "reverse-words-in-a-string",
        "title": "Reverse Words in a String",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "23.3%",
        "questionDescription": "<p>Given an input string, reverse the string word by word.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;<code>the sky is blue</code>&quot;\r\n<strong>Output:&nbsp;</strong>&quot;<code>blue is sky the</code>&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot; &nbsp;hello world! &nbsp;&quot;\r\n<strong>Output:&nbsp;</strong>&quot;world! hello&quot;\r\n<strong>Explanation:</strong> Your reversed string should not contain leading or trailing spaces.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;a good &nbsp; example&quot;\r\n<strong>Output:&nbsp;</strong>&quot;example good a&quot;\r\n<strong>Explanation:</strong> You need to reduce multiple spaces between two words to a single space in the reversed string.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>A word is defined as a sequence of non-space characters.</li>\r\n\t<li>Input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.</li>\r\n\t<li>You need to reduce multiple spaces between two words to a single space in the reversed string.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>For C programmers, try to solve it <em>in-place</em> in <em>O</em>(1) extra space.</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9010\u4e2a\u7ffb\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;<code>the sky is blue</code>&quot;\n<strong>\u8f93\u51fa:&nbsp;</strong>&quot;<code>blue is sky the</code>&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot; &nbsp;hello world! &nbsp;&quot;\n<strong>\u8f93\u51fa:&nbsp;</strong>&quot;world! hello&quot;\n<strong>\u89e3\u91ca: </strong>\u8f93\u5165\u5b57\u7b26\u4e32\u53ef\u4ee5\u5728\u524d\u9762\u6216\u8005\u540e\u9762\u5305\u542b\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u4f46\u662f\u53cd\u8f6c\u540e\u7684\u5b57\u7b26\u4e0d\u80fd\u5305\u62ec\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;a good &nbsp; example&quot;\n<strong>\u8f93\u51fa:&nbsp;</strong>&quot;example good a&quot;\n<strong>\u89e3\u91ca: </strong>\u5982\u679c\u4e24\u4e2a\u5355\u8bcd\u95f4\u6709\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u5c06\u53cd\u8f6c\u540e\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u51cf\u5c11\u5230\u53ea\u542b\u4e00\u4e2a\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u65e0\u7a7a\u683c\u5b57\u7b26\u6784\u6210\u4e00\u4e2a\u5355\u8bcd\u3002</li>\n\t<li>\u8f93\u5165\u5b57\u7b26\u4e32\u53ef\u4ee5\u5728\u524d\u9762\u6216\u8005\u540e\u9762\u5305\u542b\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u4f46\u662f\u53cd\u8f6c\u540e\u7684\u5b57\u7b26\u4e0d\u80fd\u5305\u62ec\u3002</li>\n\t<li>\u5982\u679c\u4e24\u4e2a\u5355\u8bcd\u95f4\u6709\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u5c06\u53cd\u8f6c\u540e\u5355\u8bcd\u95f4\u7684\u7a7a\u683c\u51cf\u5c11\u5230\u53ea\u542b\u4e00\u4e2a\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<p>\u8bf7\u9009\u7528 C \u8bed\u8a00\u7684\u7528\u6237\u5c1d\u8bd5\u4f7f\u7528&nbsp;<em>O</em>(1) \u989d\u5916\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u539f\u5730\u89e3\u6cd5\u3002</p>\n",
        "titleZh": "\u7ffb\u8f6c\u5b57\u7b26\u4e32\u91cc\u7684\u5355\u8bcd",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Alibaba",
            "Baidu",
            "Snapchat",
            "Goldman Sachs",
            "Yelp",
            "Walmart Labs",
            "Salesforce",
            "Paypal",
            "Cisco",
            "Zillow",
            "Pocket Gems",
            "Nvidia",
            "Yandex",
            "Huawei",
            "ServiceNow",
            "Qualcomm"
        ]
    },
    {
        "leetId": "152",
        "link": "maximum-product-subarray",
        "title": "Maximum Product Subarray",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "33.3%",
        "questionDescription": "<p>Given an integer array&nbsp;<code>nums</code>, find the contiguous subarray within an array (containing at least one number) which has the largest product.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,3,-2,4]\r\n<strong>Output:</strong> <code>6</code>\r\n<strong>Explanation:</strong>&nbsp;[2,3] has the largest product 6.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [-2,0,-1]\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong>&nbsp;The result cannot be 2, because [-2,-1] is not a subarray.</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code>&nbsp;\uff0c\u627e\u51fa\u4e00\u4e2a\u5e8f\u5217\u4e2d\u4e58\u79ef\u6700\u5927\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\uff08\u8be5\u5e8f\u5217\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6570\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,3,-2,4]\n<strong>\u8f93\u51fa:</strong> <code>6</code>\n<strong>\u89e3\u91ca:</strong>&nbsp;\u5b50\u6570\u7ec4 [2,3] \u6709\u6700\u5927\u4e58\u79ef 6\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [-2,0,-1]\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:</strong>&nbsp;\u7ed3\u679c\u4e0d\u80fd\u4e3a 2, \u56e0\u4e3a [-2,-1] \u4e0d\u662f\u5b50\u6570\u7ec4\u3002</pre>\n",
        "titleZh": "\u4e58\u79ef\u6700\u5927\u5b50\u5e8f\u5217",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Alibaba",
            "Yelp",
            "VMware",
            "Expedia",
            "Pocket Gems"
        ]
    },
    {
        "leetId": "153",
        "link": "find-minimum-in-rotated-sorted-array",
        "title": "Find Minimum in Rotated Sorted Array",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "48.6%",
        "questionDescription": "<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\r\n\r\n<p>(i.e., &nbsp;<code>[0,1,2,4,5,6,7]</code>&nbsp;might become &nbsp;<code>[4,5,6,7,0,1,2]</code>).</p>\r\n\r\n<p>Find the minimum element.</p>\r\n\r\n<p>You may assume no duplicate exists in the array.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [3,4,5,1,2] \r\n<strong>Output:</strong> 1\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [4,5,6,7,0,1,2]\r\n<strong>Output:</strong> 0\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002</p>\n\n<p>( \u4f8b\u5982\uff0c\u6570\u7ec4&nbsp;<code>[0,1,2,4,5,6,7]</code> <strong> </strong>\u53ef\u80fd\u53d8\u4e3a&nbsp;<code>[4,5,6,7,0,1,2]</code>&nbsp;)\u3002</p>\n\n<p>\u8bf7\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [3,4,5,1,2]\n<strong>\u8f93\u51fa:</strong> 1</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [4,5,6,7,0,1,2]\n<strong>\u8f93\u51fa:</strong> 0</pre>\n",
        "titleZh": "\u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Baidu",
            "Twitter",
            "Goldman Sachs",
            "eBay",
            "Salesforce"
        ]
    },
    {
        "leetId": "154",
        "link": "find-minimum-in-rotated-sorted-array-ii",
        "title": "Find Minimum in Rotated Sorted Array II",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "43.7%",
        "questionDescription": "<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\r\n\r\n<p>(i.e., &nbsp;<code>[0,1,2,4,5,6,7]</code>&nbsp;might become &nbsp;<code>[4,5,6,7,0,1,2]</code>).</p>\r\n\r\n<p>Find the minimum element.</p>\r\n\r\n<p>The array may contain duplicates.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,3,5]\r\n<strong>Output:</strong> 1</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,2,2,0,1]\r\n<strong>Output:</strong> 0</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>This is a follow up problem to&nbsp;<a href=\"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/\">Find Minimum in Rotated Sorted Array</a>.</li>\r\n\t<li>Would allow duplicates affect the run-time complexity? How and why?</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5047\u8bbe\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u7684\u6570\u7ec4\u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u70b9\u4e0a\u8fdb\u884c\u4e86\u65cb\u8f6c\u3002</p>\n\n<p>( \u4f8b\u5982\uff0c\u6570\u7ec4&nbsp;<code>[0,1,2,4,5,6,7]</code> <strong> </strong>\u53ef\u80fd\u53d8\u4e3a&nbsp;<code>[4,5,6,7,0,1,2]</code>&nbsp;)\u3002</p>\n\n<p>\u8bf7\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\u3002</p>\n\n<p>\u6ce8\u610f\u6570\u7ec4\u4e2d\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,3,5]\n<strong>\u8f93\u51fa:</strong> 1</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,2,2,0,1]\n<strong>\u8f93\u51fa:</strong> 0</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u8fd9\u9053\u9898\u662f&nbsp;<a href=\"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/description/\">\u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c</a>&nbsp;\u7684\u5ef6\u4f38\u9898\u76ee\u3002</li>\n\t<li>\u5141\u8bb8\u91cd\u590d\u4f1a\u5f71\u54cd\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f\u4f1a\u5982\u4f55\u5f71\u54cd\uff0c\u4e3a\u4ec0\u4e48\uff1f</li>\n</ul>\n",
        "titleZh": "\u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c II",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Uber",
            "Adobe"
        ]
    },
    {
        "leetId": "155",
        "link": "min-stack",
        "title": "Min Stack",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "48.4%",
        "questionDescription": "<p>\r\nDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\r\n<ul>\r\n<li>\r\npush(x) -- Push element x onto stack.\r\n</li>\r\n<li>\r\npop() -- Removes the element on top of the stack.\r\n</li>\r\n<li>\r\ntop() -- Get the top element.\r\n</li>\r\n<li>\r\ngetMin() -- Retrieve the minimum element in the stack.\r\n</li>\r\n</ul>\r\n</p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\nMinStack minStack = new MinStack();\r\nminStack.push(-2);\r\nminStack.push(0);\r\nminStack.push(-3);\r\nminStack.getMin();   --> Returns -3.\r\nminStack.pop();\r\nminStack.top();      --> Returns 0.\r\nminStack.getMin();   --> Returns -2.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 push\uff0cpop\uff0ctop \u64cd\u4f5c\uff0c\u5e76\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u68c0\u7d22\u5230\u6700\u5c0f\u5143\u7d20\u7684\u6808\u3002</p>\n\n<ul>\n\t<li>push(x)&nbsp;-- \u5c06\u5143\u7d20 x \u63a8\u5165\u6808\u4e2d\u3002</li>\n\t<li>pop()&nbsp;-- \u5220\u9664\u6808\u9876\u7684\u5143\u7d20\u3002</li>\n\t<li>top()&nbsp;-- \u83b7\u53d6\u6808\u9876\u5143\u7d20\u3002</li>\n\t<li>getMin() -- \u68c0\u7d22\u6808\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();   --&gt; \u8fd4\u56de -3.\nminStack.pop();\nminStack.top();      --&gt; \u8fd4\u56de 0.\nminStack.getMin();   --&gt; \u8fd4\u56de -2.\n</pre>\n",
        "titleZh": "\u6700\u5c0f\u6808",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Snapchat",
            "Goldman Sachs",
            "eBay",
            "Walmart Labs",
            "Lyft",
            "Zenefits",
            "GoDaddy",
            "JPMorgan",
            "Rubrik"
        ]
    },
    {
        "leetId": "156",
        "link": "binary-tree-upside-down",
        "title": "Binary Tree Upside Down",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "15",
        "questionDescription": "\n<p>Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input: </strong>[1,2,3,4,5]\n\n    1\n   / \\\n  2   3\n / \\\n4   5\n\n<strong>Output:</strong> return the root of the binary tree [4,5,2,#,#,3,1]\n\n   4\n  / \\\n 5   2\n    / \\\n   3   1  \n</pre>\n<p><strong>Clarification:</strong></p>\n<p>Confused what <code>[4,5,2,#,#,3,1<font face=\"monospace\">]</font></code>\u00a0means? Read more below on how binary tree is serialized on OJ.</p>\n<p>The serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below.</p>\n<p>Here's an example:</p>\n<pre>   1\n  / \\\n 2   3\n    /\n   4\n    \\\n     5\n</pre>\n<p>The above binary tree is serialized as <code>[1,2,3,#,#,4,#,#,5]</code>.</p>\n",
        "questionDescriptionZh": "\n<p>Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input: </strong>[1,2,3,4,5]\n\n    1\n   / \\\n  2   3\n / \\\n4   5\n\n<strong>Output:</strong> return the root of the binary tree [4,5,2,#,#,3,1]\n\n   4\n  / \\\n 5   2\n    / \\\n   3   1  \n</pre>\n<p><strong>Clarification:</strong></p>\n<p>Confused what <code>[4,5,2,#,#,3,1<font face=\"monospace\">]</font></code>\u00a0means? Read more below on how binary tree is serialized on OJ.</p>\n<p>The serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below.</p>\n<p>Here's an example:</p>\n<pre>   1\n  / \\\n 2   3\n    /\n   4\n    \\\n     5\n</pre>\n<p>The above binary tree is serialized as <code>[1,2,3,#,#,4,#,#,5]</code>.</p>\n",
        "companies": [
            "Microsoft",
            "LinkedIn"
        ]
    },
    {
        "leetId": "157",
        "link": "read-n-characters-given-read4",
        "title": "Read N Characters Given Read4",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "25",
        "questionDescription": "\n<p>The API: <code>int read4(char *buf)</code> reads 4 characters at a time from a file.</p>\n<p>The return value is the actual number of characters read. For example, it returns 3 if there is only 3 characters left in the file.</p>\n<p>By using the <code>read4</code> API, implement the function <code>int read(char *buf, int n)</code> that reads <i>n</i> characters from the file.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input: </strong>buf =<strong> </strong>\"abc\", n = 4\n<strong>Output:</strong> \"abc\"\n<strong>Explanation:</strong>\u00a0The actual number of characters read is 3, which is \"abc\".\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong>buf = \"abcde\", n = 5 \n<strong>Output: </strong>\"abcde\"\n</pre>\n<p><b>Note:</b><br/>\nThe <code>read</code> function will only be called once for each test case.</p>\n",
        "questionDescriptionZh": "\n<p>The API: <code>int read4(char *buf)</code> reads 4 characters at a time from a file.</p>\n<p>The return value is the actual number of characters read. For example, it returns 3 if there is only 3 characters left in the file.</p>\n<p>By using the <code>read4</code> API, implement the function <code>int read(char *buf, int n)</code> that reads <i>n</i> characters from the file.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input: </strong>buf =<strong> </strong>\"abc\", n = 4\n<strong>Output:</strong> \"abc\"\n<strong>Explanation:</strong>\u00a0The actual number of characters read is 3, which is \"abc\".\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong>buf = \"abcde\", n = 5 \n<strong>Output: </strong>\"abcde\"\n</pre>\n<p><b>Note:</b><br/>\nThe <code>read</code> function will only be called once for each test case.</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Uber"
        ]
    },
    {
        "leetId": "158",
        "link": "read-n-characters-given-read4-ii-call-multiple-times",
        "title": "Read N Characters Given Read4 II - Call multiple times",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "62",
        "questionDescription": "\n<p>The API: <code>int read4(char *buf)</code> reads 4 characters at a time from a file.</p>\n<p>The return value is the actual number of characters read. For example, it returns 3 if there is only 3 characters left in the file.</p>\n<p>By using the <code>read4</code> API, implement the function <code>int read(char *buf, int n)</code> that reads <i>n</i> characters from the file.</p>\n<p><b>Note:</b><br/>\nThe <code>read</code> function may be called multiple times.</p>\n<p><b>Example 1:\u00a0</b></p>\n<pre>Given buf = \"abc\"\nread(\"abc\", 1) // returns \"a\"\nread(\"abc\", 2); // returns \"bc\"\nread(\"abc\", 1); // returns \"\"\n</pre>\n<p><b>Example 2:\u00a0</b></p>\n<pre>Given buf = \"abc\"\nread(\"abc\", 4) // returns \"abc\"\nread(\"abc\", 1); // returns \"\"\n</pre>\n",
        "questionDescriptionZh": "\n<p>The API: <code>int read4(char *buf)</code> reads 4 characters at a time from a file.</p>\n<p>The return value is the actual number of characters read. For example, it returns 3 if there is only 3 characters left in the file.</p>\n<p>By using the <code>read4</code> API, implement the function <code>int read(char *buf, int n)</code> that reads <i>n</i> characters from the file.</p>\n<p><b>Note:</b><br/>\nThe <code>read</code> function may be called multiple times.</p>\n<p><b>Example 1:\u00a0</b></p>\n<pre>Given buf = \"abc\"\nread(\"abc\", 1) // returns \"a\"\nread(\"abc\", 2); // returns \"bc\"\nread(\"abc\", 1); // returns \"\"\n</pre>\n<p><b>Example 2:\u00a0</b></p>\n<pre>Given buf = \"abc\"\nread(\"abc\", 4) // returns \"abc\"\nread(\"abc\", 1); // returns \"\"\n</pre>\n",
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Lyft",
            "Pinterest",
            "Rubrik"
        ]
    },
    {
        "leetId": "159",
        "link": "longest-substring-with-at-most-two-distinct-characters",
        "title": "Longest Substring with At Most Two Distinct Characters",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "42",
        "questionDescription": "\n<p>Given a string <strong><em>s</em></strong> , find the length of the longest substring\u00a0<strong><em>t\u00a0\u00a0</em></strong>that contains <strong>at most </strong>2 distinct characters.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> \"eceba\"\n<strong>Output: </strong>3\n<strong>Explanation: <em>t</em></strong><em> </em>is \"ece\" which its length is 3.\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> \"ccaabbb\"\n<strong>Output: </strong>5\n<strong>Explanation: <em>t</em></strong><em> </em>is \"aabbb\" which its length is 5.\n</pre>\n",
        "questionDescriptionZh": "\n<p>Given a string <strong><em>s</em></strong> , find the length of the longest substring\u00a0<strong><em>t\u00a0\u00a0</em></strong>that contains <strong>at most </strong>2 distinct characters.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> \"eceba\"\n<strong>Output: </strong>3\n<strong>Explanation: <em>t</em></strong><em> </em>is \"ece\" which its length is 3.\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> \"ccaabbb\"\n<strong>Output: </strong>5\n<strong>Explanation: <em>t</em></strong><em> </em>is \"aabbb\" which its length is 5.\n</pre>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft"
        ]
    },
    {
        "leetId": "160",
        "link": "intersection-of-two-linked-lists",
        "title": "Intersection of Two Linked Lists",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "41.0%",
        "questionDescription": "<p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>\r\n\r\n<p>For example, the following two linked lists:</p>\r\n<a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_statement.png\" target=\"_blank\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/13/160_statement.png\" style=\"margin-top: 10px; margin-bottom: 10px; width: 400px; height: 130px;\" /></a>\r\n\r\n<p>begin to intersect at node c1.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n<a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png\" target=\"_blank\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png\" style=\"margin-top: 10px; margin-bottom: 10px; width: 400px; height: 130px;\" /></a>\r\n\r\n<pre>\r\n<strong>Input: </strong>intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\r\n<strong>Output:</strong> Reference of the node with value = 8\r\n<strong>Input Explanation:</strong> The intersected node&#39;s value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n<a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png\" target=\"_blank\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png\" style=\"margin-top: 10px; margin-bottom: 10px; width: 350px; height: 136px;\" /></a>\r\n\r\n<pre>\r\n<strong>Input: </strong>intersectVal&nbsp;= 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\r\n<strong>Output:</strong> Reference of the node with value = 2\r\n<strong>Input Explanation:</strong>&nbsp;The intersected node&#39;s value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [0,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n<a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png\" target=\"_blank\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png\" style=\"margin-top: 10px; margin-bottom: 10px; width: 200px; height: 126px;\" /></a>\r\n\r\n<pre>\r\n<strong>Input: </strong>intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\r\n<strong>Output:</strong> null\r\n<strong>Input Explanation:</strong> From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\r\n<strong>Explanation:</strong> The two lists do not intersect, so return null.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Notes:</b></p>\r\n\r\n<ul>\r\n\t<li>If the two linked lists have no intersection at all, return <code>null</code>.</li>\r\n\t<li>The linked lists must retain their original structure after the function returns.</li>\r\n\t<li>You may assume there are no cycles anywhere in the entire linked structure.</li>\r\n\t<li>Your code should preferably run in O(n) time and use only O(1) memory.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u5230\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002</p>\n\n<p>\u5982\u4e0b\u9762\u7684\u4e24\u4e2a\u94fe\u8868<strong>\uff1a</strong></p>\n\n<p><a href=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\" target=\"_blank\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\" style=\"height: 130px; width: 400px;\"></a></p>\n\n<p>\u5728\u8282\u70b9 c1 \u5f00\u59cb\u76f8\u4ea4\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png\" target=\"_blank\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png\" style=\"height: 130px; width: 400px;\"></a></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n<strong>\u8f93\u51fa\uff1a</strong>Reference of the node with value = 8\n<strong>\u8f93\u5165\u89e3\u91ca\uff1a</strong>\u76f8\u4ea4\u8282\u70b9\u7684\u503c\u4e3a 8 \uff08\u6ce8\u610f\uff0c\u5982\u679c\u4e24\u4e2a\u5217\u8868\u76f8\u4ea4\u5219\u4e0d\u80fd\u4e3a 0\uff09\u3002\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [4,1,8,4,5]\uff0c\u94fe\u8868 B \u4e3a [5,0,1,8,4,5]\u3002\u5728 A \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 2 \u4e2a\u8282\u70b9\uff1b\u5728 B \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 3 \u4e2a\u8282\u70b9\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png\" target=\"_blank\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png\" style=\"height: 136px; width: 350px;\"></a></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>intersectVal&nbsp;= 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n<strong>\u8f93\u51fa\uff1a</strong>Reference of the node with value = 2\n<strong>\u8f93\u5165\u89e3\u91ca\uff1a</strong>\u76f8\u4ea4\u8282\u70b9\u7684\u503c\u4e3a 2 \uff08\u6ce8\u610f\uff0c\u5982\u679c\u4e24\u4e2a\u5217\u8868\u76f8\u4ea4\u5219\u4e0d\u80fd\u4e3a 0\uff09\u3002\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [0,9,1,2,4]\uff0c\u94fe\u8868 B \u4e3a [3,2,4]\u3002\u5728 A \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 3 \u4e2a\u8282\u70b9\uff1b\u5728 B \u4e2d\uff0c\u76f8\u4ea4\u8282\u70b9\u524d\u6709 1 \u4e2a\u8282\u70b9\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;3\uff1a</strong></p>\n\n<p><a href=\"https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png\" target=\"_blank\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png\" style=\"height: 126px; width: 200px;\"></a></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n<strong>\u8f93\u51fa\uff1a</strong>null\n<strong>\u8f93\u5165\u89e3\u91ca\uff1a</strong>\u4ece\u5404\u81ea\u7684\u8868\u5934\u5f00\u59cb\u7b97\u8d77\uff0c\u94fe\u8868 A \u4e3a [2,6,4]\uff0c\u94fe\u8868 B \u4e3a [1,5]\u3002\u7531\u4e8e\u8fd9\u4e24\u4e2a\u94fe\u8868\u4e0d\u76f8\u4ea4\uff0c\u6240\u4ee5 intersectVal \u5fc5\u987b\u4e3a 0\uff0c\u800c skipA \u548c skipB \u53ef\u4ee5\u662f\u4efb\u610f\u503c\u3002\n<strong>\u89e3\u91ca\uff1a</strong>\u8fd9\u4e24\u4e2a\u94fe\u8868\u4e0d\u76f8\u4ea4\uff0c\u56e0\u6b64\u8fd4\u56de null\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li>\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u4ea4\u70b9\uff0c\u8fd4\u56de <code>null</code>.</li>\n\t<li>\u5728\u8fd4\u56de\u7ed3\u679c\u540e\uff0c\u4e24\u4e2a\u94fe\u8868\u4ecd\u987b\u4fdd\u6301\u539f\u6709\u7684\u7ed3\u6784\u3002</li>\n\t<li>\u53ef\u5047\u5b9a\u6574\u4e2a\u94fe\u8868\u7ed3\u6784\u4e2d\u6ca1\u6709\u5faa\u73af\u3002</li>\n\t<li>\u7a0b\u5e8f\u5c3d\u91cf\u6ee1\u8db3 O(<em>n</em>) \u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e14\u4ec5\u7528 O(<em>1</em>) \u5185\u5b58\u3002</li>\n</ul>\n",
        "titleZh": "\u76f8\u4ea4\u94fe\u8868",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Oracle",
            "Tencent",
            "Salesforce",
            "Expedia",
            "SAP",
            "Intel",
            "Qualcomm"
        ]
    },
    {
        "leetId": "161",
        "link": "one-edit-distance",
        "title": "One Edit Distance",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "32",
        "questionDescription": "\n<p>Given two strings <b><i>s</i></b>\u00a0and <b><i>t</i></b>, determine if they are both one edit distance apart.</p>\n<p><strong>Note:</strong>\u00a0</p>\n<p>There are 3 possiblities to satisify one edit distance apart:</p>\n<ol>\n<li>Insert a\u00a0character into <strong><em>s</em></strong>\u00a0to get\u00a0<strong><em>t</em></strong></li>\n<li>Delete a\u00a0character from\u00a0<strong><em>s</em></strong>\u00a0to get\u00a0<strong><em>t</em></strong></li>\n<li>Replace a character of\u00a0<strong><em>s</em></strong>\u00a0to get\u00a0<strong><em>t</em></strong></li>\n</ol>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> <strong><em>s</em></strong> = \"ab\", <strong><em>t</em></strong> = \"acb\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can insert 'c' into <strong><em>s</em></strong>\u00a0to get\u00a0<strong><em>t.</em></strong>\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> <strong><em>s</em></strong> = \"cab\", <strong><em>t</em></strong> = \"ad\"\n<strong>Output:</strong> false\n<strong>Explanation:</strong> We cannot get <strong><em>t </em></strong>from <strong><em>s </em></strong>by only one step.</pre>\n<p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> <strong><em>s</em></strong> = \"1203\", <strong><em>t</em></strong> = \"1213\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can replace '0' with '1' to get\u00a0<strong><em>t.</em></strong></pre>\n",
        "questionDescriptionZh": "\n<p>Given two strings <b><i>s</i></b>\u00a0and <b><i>t</i></b>, determine if they are both one edit distance apart.</p>\n<p><strong>Note:</strong>\u00a0</p>\n<p>There are 3 possiblities to satisify one edit distance apart:</p>\n<ol>\n<li>Insert a\u00a0character into <strong><em>s</em></strong>\u00a0to get\u00a0<strong><em>t</em></strong></li>\n<li>Delete a\u00a0character from\u00a0<strong><em>s</em></strong>\u00a0to get\u00a0<strong><em>t</em></strong></li>\n<li>Replace a character of\u00a0<strong><em>s</em></strong>\u00a0to get\u00a0<strong><em>t</em></strong></li>\n</ol>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> <strong><em>s</em></strong> = \"ab\", <strong><em>t</em></strong> = \"acb\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can insert 'c' into <strong><em>s</em></strong>\u00a0to get\u00a0<strong><em>t.</em></strong>\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> <strong><em>s</em></strong> = \"cab\", <strong><em>t</em></strong> = \"ad\"\n<strong>Output:</strong> false\n<strong>Explanation:</strong> We cannot get <strong><em>t </em></strong>from <strong><em>s </em></strong>by only one step.</pre>\n<p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> <strong><em>s</em></strong> = \"1203\", <strong><em>t</em></strong> = \"1213\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can replace '0' with '1' to get\u00a0<strong><em>t.</em></strong></pre>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Snapchat",
            "Twitter",
            "Yelp"
        ]
    },
    {
        "leetId": "162",
        "link": "find-peak-element",
        "title": "Find Peak Element",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "39.2%",
        "questionDescription": "<p>A peak element is an element that is greater than its neighbors.</p>\r\n\r\n<p>Given an input array <code>nums</code>, where <code>nums[i] &ne; nums[i+1]</code>, find a peak element and return its index.</p>\r\n\r\n<p>The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.</p>\r\n\r\n<p>You may imagine that <code>nums[-1] = nums[n] = -&infin;</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <strong>nums</strong> = <code>[1,2,3,1]</code>\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> 3 is a peak element and your function should return the index number 2.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <strong>nums</strong> = <code>[</code>1,2,1,3,5,6,4]\r\n<strong>Output:</strong> 1 or 5 \r\n<strong>Explanation:</strong> Your function can return either index number 1 where the peak element is 2, \r\n&nbsp;            or index number 5 where the peak element is 6.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Your solution should be in logarithmic complexity.</p>\r\n",
        "questionDescriptionZh": "<p>\u5cf0\u503c\u5143\u7d20\u662f\u6307\u5176\u503c\u5927\u4e8e\u5de6\u53f3\u76f8\u90bb\u503c\u7684\u5143\u7d20\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u8f93\u5165\u6570\u7ec4&nbsp;<code>nums</code>\uff0c\u5176\u4e2d <code>nums[i] &ne; nums[i+1]</code>\uff0c\u627e\u5230\u5cf0\u503c\u5143\u7d20\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002</p>\n\n<p>\u6570\u7ec4\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u5cf0\u503c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd4\u56de\u4efb\u4f55\u4e00\u4e2a\u5cf0\u503c\u6240\u5728\u4f4d\u7f6e\u5373\u53ef\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>nums[-1] = nums[n] = -&infin;</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <strong>nums</strong> = <code>[1,2,3,1]</code>\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca: </strong>3 \u662f\u5cf0\u503c\u5143\u7d20\uff0c\u4f60\u7684\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u5176\u7d22\u5f15 2\u3002</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <strong>nums</strong> = <code>[</code>1,2,1,3,5,6,4]\n<strong>\u8f93\u51fa:</strong> 1 \u6216 5 \n<strong>\u89e3\u91ca:</strong> \u4f60\u7684\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u7d22\u5f15 1\uff0c\u5176\u5cf0\u503c\u5143\u7d20\u4e3a 2\uff1b\n&nbsp;    \u6216\u8005\u8fd4\u56de\u7d22\u5f15 5\uff0c \u5176\u5cf0\u503c\u5143\u7d20\u4e3a 6\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u4f60\u7684\u89e3\u6cd5\u5e94\u8be5\u662f&nbsp;<em>O</em>(<em>logN</em>)<em>&nbsp;</em>\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u3002</p>\n",
        "titleZh": "\u5bfb\u627e\u5cf0\u503c",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Yahoo",
            "Lyft",
            "Palantir Technologies",
            "Quora",
            "IXL",
            "Rubrik",
            "Houzz"
        ]
    },
    {
        "leetId": "163",
        "link": "missing-ranges",
        "title": "Missing Ranges",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "38",
        "questionDescription": "\n<p>Given a sorted integer array <strong><em>nums</em></strong>, where the range of elements are in the <strong>inclusive range</strong><b><strong> </strong>[<i>lower</i>, <i>upper</i>]</b>, return its missing ranges.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> <strong><em>nums</em></strong> = <code>[0, 1, 3, 50, 75]</code>, <strong><i>lower</i></strong> = 0 and <strong><i>upper</i></strong> = 99,\n<strong>Output:</strong> <code>[\"2\", \"4-&gt;49\", \"51-&gt;74\", \"76-&gt;99\"]</code>\n</pre>\n",
        "questionDescriptionZh": "\n<p>Given a sorted integer array <strong><em>nums</em></strong>, where the range of elements are in the <strong>inclusive range</strong><b><strong> </strong>[<i>lower</i>, <i>upper</i>]</b>, return its missing ranges.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> <strong><em>nums</em></strong> = <code>[0, 1, 3, 50, 75]</code>, <strong><i>lower</i></strong> = 0 and <strong><i>upper</i></strong> = 99,\n<strong>Output:</strong> <code>[\"2\", \"4-&gt;49\", \"51-&gt;74\", \"76-&gt;99\"]</code>\n</pre>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Oracle",
            "Two Sigma"
        ]
    },
    {
        "leetId": "164",
        "link": "maximum-gap",
        "title": "Maximum Gap",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "48.6%",
        "questionDescription": "<p>Given an unsorted array, find the maximum difference between the successive elements in its sorted form.</p>\r\n\r\n<p>Return 0 if the array contains less than 2 elements.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [3,6,9,1]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> The sorted form of the array is [1,3,6,9], either\r\n&nbsp;            (3,6) or (6,9) has the maximum difference 3.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [10]\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong> The array contains less than 2 elements, therefore return 0.</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.</li>\r\n\t<li>Try to solve it in linear time/space.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6570\u7ec4\uff0c\u627e\u51fa\u6570\u7ec4\u5728\u6392\u5e8f\u4e4b\u540e\uff0c\u76f8\u90bb\u5143\u7d20\u4e4b\u95f4\u6700\u5927\u7684\u5dee\u503c\u3002</p>\n\n<p>\u5982\u679c\u6570\u7ec4\u5143\u7d20\u4e2a\u6570\u5c0f\u4e8e 2\uff0c\u5219\u8fd4\u56de 0\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [3,6,9,1]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u6392\u5e8f\u540e\u7684\u6570\u7ec4\u662f [1,3,6,9]<strong><em>, </em></strong>\u5176\u4e2d\u76f8\u90bb\u5143\u7d20 (3,6) \u548c (6,9) \u4e4b\u95f4\u90fd\u5b58\u5728\u6700\u5927\u5dee\u503c 3\u3002</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [10]\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:</strong> \u6570\u7ec4\u5143\u7d20\u4e2a\u6570\u5c0f\u4e8e 2\uff0c\u56e0\u6b64\u8fd4\u56de 0\u3002</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u90fd\u662f\u975e\u8d1f\u6574\u6570\uff0c\u4e14\u6570\u503c\u5728 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002</li>\n\t<li>\u8bf7\u5c1d\u8bd5\u5728\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u6761\u4ef6\u4e0b\u89e3\u51b3\u6b64\u95ee\u9898\u3002</li>\n</ul>\n",
        "titleZh": "\u6700\u5927\u95f4\u8ddd",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            }
        ],
        "companies": [
            "Microsoft"
        ]
    },
    {
        "leetId": "165",
        "link": "compare-version-numbers",
        "title": "Compare Version Numbers",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "28.8%",
        "questionDescription": "<p>Compare two version numbers <em>version1</em> and <em>version2</em>.<br />\r\nIf <code><em>version1</em> &gt; <em>version2</em></code> return <code>1;</code>&nbsp;if <code><em>version1</em> &lt; <em>version2</em></code> return <code>-1;</code>otherwise return <code>0</code>.</p>\r\n\r\n<p>You may assume that the version strings are non-empty and contain only digits and the <code>.</code> character.</p>\r\n<p>The <code>.</code> character does not represent a decimal point and is used to separate number sequences.</p>\r\n<p>For instance, <code>2.5</code> is not &quot;two and a half&quot; or &quot;half way to version three&quot;, it is the fifth second-level revision of the second first-level revision.</p>\r\n<p>You may assume the default revision number for each level of a version number to be <code>0</code>. For example, version number <code>3.4</code> has a revision number of <code>3</code> and <code>4</code> for its first and second level revision number. Its third and fourth level revision number are both <code>0</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n<pre>\r\n<strong>Input:</strong> <code><em>version1</em></code> = &quot;0.1&quot;, <code><em>version2</em></code> = &quot;1.1&quot;\r\n<strong>Output:</strong> -1</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n<pre>\r\n<strong>Input: </strong><code><em>version1</em></code> = &quot;1.0.1&quot;, <code><em>version2</em></code> = &quot;1&quot;\r\n<strong>Output:</strong> 1</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n<pre>\r\n<strong>Input:</strong> <code><em>version1</em></code> = &quot;7.5.2.4&quot;, <code><em>version2</em></code> = &quot;7.5.3&quot;\r\n<strong>Output:</strong> -1</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n<pre>\r\n<strong>Input:</strong> <code><em>version1</em></code> = &quot;1.01&quot;, <code><em>version2</em></code> = &quot;1.001&quot;\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong> Ignoring leading zeroes, both \u201c01\u201d and \u201c001\" represent the same number \u201c1\u201d</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n<pre>\r\n<strong>Input:</strong> <code><em>version1</em></code> = &quot;1.0&quot;, <code><em>version2</em></code> = &quot;1.0.0&quot;\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong> The first version number does not have a third level revision number, which means its third level revision number is default to \"0\"</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n<ol>\r\n<li>Version strings are composed of numeric strings separated by dots <code>.</code> and this numeric strings <strong>may</strong> have leading zeroes. </li>\r\n<li>Version strings do not start or end with dots, and they will not be two consecutive dots.</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u6bd4\u8f83\u4e24\u4e2a\u7248\u672c\u53f7 <em>version1&nbsp;</em>\u548c <em>version2</em>\u3002<br>\n\u5982\u679c&nbsp;<code><em>version1&nbsp;</em>&gt;&nbsp;<em>version2</em></code>&nbsp;\u8fd4\u56de&nbsp;<code>1</code>\uff0c\u5982\u679c&nbsp;<code><em>version1&nbsp;</em>&lt;&nbsp;<em>version2</em></code> \u8fd4\u56de <code>-1</code>\uff0c \u9664\u6b64\u4e4b\u5916\u8fd4\u56de <code>0</code>\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u7248\u672c\u5b57\u7b26\u4e32\u975e\u7a7a\uff0c\u5e76\u4e14\u53ea\u5305\u542b\u6570\u5b57\u548c&nbsp;<code>.</code> \u5b57\u7b26\u3002</p>\n\n<p>&nbsp;<code>.</code> \u5b57\u7b26\u4e0d\u4ee3\u8868\u5c0f\u6570\u70b9\uff0c\u800c\u662f\u7528\u4e8e\u5206\u9694\u6570\u5b57\u5e8f\u5217\u3002</p>\n\n<p>\u4f8b\u5982\uff0c<code>2.5</code> \u4e0d\u662f&ldquo;\u4e24\u4e2a\u534a&rdquo;\uff0c\u4e5f\u4e0d\u662f&ldquo;\u5dee\u4e00\u534a\u5230\u4e09&rdquo;\uff0c\u800c\u662f\u7b2c\u4e8c\u7248\u4e2d\u7684\u7b2c\u4e94\u4e2a\u5c0f\u7248\u672c\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u7248\u672c\u53f7\u7684\u6bcf\u4e00\u7ea7\u7684\u9ed8\u8ba4\u4fee\u8ba2\u7248\u53f7\u4e3a <code>0</code>\u3002\u4f8b\u5982\uff0c\u7248\u672c\u53f7 <code>3.4</code> \u7684\u7b2c\u4e00\u7ea7\uff08\u5927\u7248\u672c\uff09\u548c\u7b2c\u4e8c\u7ea7\uff08\u5c0f\u7248\u672c\uff09\u4fee\u8ba2\u53f7\u5206\u522b\u4e3a <code>3</code> \u548c <code>4</code>\u3002\u5176\u7b2c\u4e09\u7ea7\u548c\u7b2c\u56db\u7ea7\u4fee\u8ba2\u53f7\u5747\u4e3a <code>0</code>\u3002<br>\n&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code><em>version1</em></code> = &quot;0.1&quot;, <code><em>version2</em></code> = &quot;1.1&quot;\n<strong>\u8f93\u51fa:</strong> -1</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code><em>version1</em></code> = &quot;1.0.1&quot;, <code><em>version2</em></code> = &quot;1&quot;\n<strong>\u8f93\u51fa:</strong> 1</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code><em>version1</em></code> = &quot;7.5.2.4&quot;, <code><em>version2</em></code> = &quot;7.5.3&quot;\n<strong>\u8f93\u51fa:</strong> -1</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4\uff1a</strong></p>\n\n<pre><code><strong>\u8f93\u5165\uff1a</strong><em>version1</em></code> = &quot;1.01&quot;, <code><em>version2</em></code> = &quot;1.001&quot;\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u5ffd\u7565\u524d\u5bfc\u96f6\uff0c&ldquo;01&rdquo; \u548c &ldquo;001&rdquo; \u8868\u793a\u76f8\u540c\u7684\u6570\u5b57 &ldquo;1&rdquo;\u3002</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><code><strong>\u8f93\u5165\uff1a</strong><em>version1</em></code> = &quot;1.0&quot;, <code><em>version2</em></code> = &quot;1.0.0&quot;\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong><code><em>version1 </em></code>\u6ca1\u6709\u7b2c\u4e09\u7ea7\u4fee\u8ba2\u53f7\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u7684\u7b2c\u4e09\u7ea7\u4fee\u8ba2\u53f7\u9ed8\u8ba4\u4e3a &ldquo;0&rdquo;\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u7248\u672c\u5b57\u7b26\u4e32\u7531\u4ee5\u70b9&nbsp;\uff08<code>.</code>\uff09&nbsp;\u5206\u9694\u7684\u6570\u5b57\u5b57\u7b26\u4e32\u7ec4\u6210\u3002\u8fd9\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32<strong>\u53ef\u80fd</strong>\u6709\u524d\u5bfc\u96f6\u3002</li>\n\t<li>\u7248\u672c\u5b57\u7b26\u4e32\u4e0d\u4ee5\u70b9\u5f00\u59cb\u6216\u7ed3\u675f\uff0c\u5e76\u4e14\u5176\u4e2d\u4e0d\u4f1a\u6709\u4e24\u4e2a\u8fde\u7eed\u7684\u70b9\u3002</li>\n</ol>\n",
        "titleZh": "\u6bd4\u8f83\u7248\u672c\u53f7",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Apple",
            "Intuit",
            "Nutanix",
            "Arista Networks"
        ]
    },
    {
        "leetId": "166",
        "link": "fraction-to-recurring-decimal",
        "title": "Fraction to Recurring Decimal",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "22.9%",
        "questionDescription": "<p>Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.</p>\r\n\r\n<p>If the fractional part is repeating, enclose the repeating part in parentheses.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> numerator = 1, denominator = 2\r\n<strong>Output:</strong> &quot;0.5&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> numerator = 2, denominator = 1\r\n<strong>Output:</strong> &quot;2&quot;</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> numerator = 2, denominator = 3\r\n<strong>Output: </strong>&quot;0.(6)&quot;\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u5206\u6570\u7684\u5206\u5b50&nbsp;numerator \u548c\u5206\u6bcd denominator\uff0c\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8fd4\u56de\u5c0f\u6570\u3002</p>\n\n<p>\u5982\u679c\u5c0f\u6570\u90e8\u5206\u4e3a\u5faa\u73af\u5c0f\u6570\uff0c\u5219\u5c06\u5faa\u73af\u7684\u90e8\u5206\u62ec\u5728\u62ec\u53f7\u5185\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> numerator = 1, denominator = 2\n<strong>\u8f93\u51fa:</strong> &quot;0.5&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> numerator = 2, denominator = 1\n<strong>\u8f93\u51fa:</strong> &quot;2&quot;</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> numerator = 2, denominator = 3\n<strong>\u8f93\u51fa: </strong>&quot;0.(6)&quot;\n</pre>\n",
        "titleZh": "\u5206\u6570\u5230\u5c0f\u6570",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Adobe",
            "Yahoo",
            "Goldman Sachs",
            "IXL",
            "Rubrik"
        ]
    },
    {
        "leetId": "167",
        "link": "two-sum-ii-input-array-is-sorted",
        "title": "Two Sum II - Input array is sorted",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "48.1%",
        "questionDescription": "<p>Given an array of integers that is already <strong><em>sorted in ascending order</em></strong>, find two numbers such that they add up to a specific target number.</p>\r\n\r\n<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Your returned answers (both index1 and index2) are not zero-based.</li>\r\n\t<li>You may assume that each input would have <em>exactly</em> one solution and you may not use the <em>same</em> element twice.</li>\r\n</ul>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> numbers = [2,7,11,15], target = 9\r\n<strong>Output:</strong> [1,2]\r\n<strong>Explanation:</strong> The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5df2\u6309\u7167<strong><em>\u5347\u5e8f\u6392\u5217</em>&nbsp;</strong>\u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u627e\u5230\u4e24\u4e2a\u6570\u4f7f\u5f97\u5b83\u4eec\u76f8\u52a0\u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570\u3002</p>\n\n<p>\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u8fd9\u4e24\u4e2a\u4e0b\u6807\u503c<em> </em>index1 \u548c index2\uff0c\u5176\u4e2d index1&nbsp;\u5fc5\u987b\u5c0f\u4e8e&nbsp;index2<em>\u3002</em></p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u8fd4\u56de\u7684\u4e0b\u6807\u503c\uff08index1 \u548c index2\uff09\u4e0d\u662f\u4ece\u96f6\u5f00\u59cb\u7684\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u8f93\u5165\u53ea\u5bf9\u5e94\u552f\u4e00\u7684\u7b54\u6848\uff0c\u800c\u4e14\u4f60\u4e0d\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u76f8\u540c\u7684\u5143\u7d20\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> numbers = [2, 7, 11, 15], target = 9\n<strong>\u8f93\u51fa:</strong> [1,2]\n<strong>\u89e3\u91ca:</strong> 2 \u4e0e 7 \u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570 9 \u3002\u56e0\u6b64 index1 = 1, index2 = 2 \u3002</pre>\n",
        "titleZh": "\u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Alibaba",
            "Baidu",
            "Goldman Sachs"
        ]
    },
    {
        "leetId": "168",
        "link": "excel-sheet-column-title",
        "title": "Excel Sheet Column Title",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "31.6%",
        "questionDescription": "<p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p>\r\n\r\n<p>For example:</p>\r\n\r\n<pre>\r\n    1 -&gt; A\r\n    2 -&gt; B\r\n    3 -&gt; C\r\n    ...\r\n    26 -&gt; Z\r\n    27 -&gt; AA\r\n    28 -&gt; AB \r\n    ...\r\n</pre>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1\r\n<strong>Output:</strong> &quot;A&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 28\r\n<strong>Output:</strong> &quot;AB&quot;\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 701\r\n<strong>Output:</strong> &quot;ZY&quot;\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8fd4\u56de\u5b83\u5728 Excel \u8868\u4e2d\u76f8\u5bf9\u5e94\u7684\u5217\u540d\u79f0\u3002</p>\n\n<p>\u4f8b\u5982\uff0c</p>\n\n<pre>    1 -&gt; A\n    2 -&gt; B\n    3 -&gt; C\n    ...\n    26 -&gt; Z\n    27 -&gt; AA\n    28 -&gt; AB \n    ...\n</pre>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1\n<strong>\u8f93\u51fa:</strong> &quot;A&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 28\n<strong>\u8f93\u51fa:</strong> &quot;AB&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 701\n<strong>\u8f93\u51fa:</strong> &quot;ZY&quot;\n</pre>\n",
        "titleZh": "Excel\u8868\u5217\u540d\u79f0",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Yahoo",
            "Zenefits",
            "Alation"
        ]
    },
    {
        "leetId": "169",
        "link": "majority-element",
        "title": "Majority Element",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "58.5%",
        "questionDescription": "<p>Given an array of size <i>n</i>, find the majority element. The majority element is the element that appears <b>more than</b> <code>&lfloor; n/2 &rfloor;</code> times.</p>\r\n\r\n<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [3,2,3]\r\n<strong>Output:</strong> 3</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,2,1,1,1,2,2]\r\n<strong>Output:</strong> 2\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a <em>n </em>\u7684\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u7684\u4f17\u6570\u3002\u4f17\u6570\u662f\u6307\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570<strong>\u5927\u4e8e</strong>&nbsp;<code>&lfloor; n/2 &rfloor;</code>&nbsp;\u7684\u5143\u7d20\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u662f\u975e\u7a7a\u7684\uff0c\u5e76\u4e14\u7ed9\u5b9a\u7684\u6570\u7ec4\u603b\u662f\u5b58\u5728\u4f17\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [3,2,3]\n<strong>\u8f93\u51fa:</strong> 3</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,2,1,1,1,2,2]\n<strong>\u8f93\u51fa:</strong> 2\n</pre>\n",
        "titleZh": "\u6c42\u4f17\u6570",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Snapchat",
            "Twitter",
            "Tencent",
            "Zenefits"
        ]
    },
    {
        "leetId": "170",
        "link": "two-sum-iii-data-structure-design",
        "title": "Two Sum III - Data structure design",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "46",
        "questionDescription": "\n<p>Design and implement a TwoSum class. It should support the following operations: <code>add</code> and <code>find</code>.</p>\n<p><code>add</code> - Add the number to an internal data structure.<br/>\n<code>find</code> - Find if there exists any pair of numbers which sum is equal to the value.</p>\n<p><strong>Example 1:</strong></p>\n<pre>add(1); add(3); add(5);\nfind(4) -&gt; true\nfind(7) -&gt; false\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre>add(3); add(1); add(2);\nfind(3) -&gt; true\nfind(6) -&gt; false</pre>\n",
        "questionDescriptionZh": "\n<p>Design and implement a TwoSum class. It should support the following operations: <code>add</code> and <code>find</code>.</p>\n<p><code>add</code> - Add the number to an internal data structure.<br/>\n<code>find</code> - Find if there exists any pair of numbers which sum is equal to the value.</p>\n<p><strong>Example 1:</strong></p>\n<pre>add(1); add(3); add(5);\nfind(4) -&gt; true\nfind(7) -&gt; false\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre>add(3); add(1); add(2);\nfind(3) -&gt; true\nfind(6) -&gt; false</pre>\n",
        "companies": [
            "Facebook",
            "LinkedIn"
        ]
    },
    {
        "leetId": "171",
        "link": "excel-sheet-column-number",
        "title": "Excel Sheet Column Number",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "63.3%",
        "questionDescription": "<p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>\r\n\r\n<p>For example:</p>\r\n\r\n<pre>\r\n    A -&gt; 1\r\n    B -&gt; 2\r\n    C -&gt; 3\r\n    ...\r\n    Z -&gt; 26\r\n    AA -&gt; 27\r\n    AB -&gt; 28 \r\n    ...\r\n</pre>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;A&quot;\r\n<strong>Output:</strong> 1\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;AB&quot;\r\n<strong>Output:</strong> 28\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;ZY&quot;\r\n<strong>Output:</strong> 701\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2aExcel\u8868\u683c\u4e2d\u7684\u5217\u540d\u79f0\uff0c\u8fd4\u56de\u5176\u76f8\u5e94\u7684\u5217\u5e8f\u53f7\u3002</p>\n\n<p>\u4f8b\u5982\uff0c</p>\n\n<pre>    A -&gt; 1\n    B -&gt; 2\n    C -&gt; 3\n    ...\n    Z -&gt; 26\n    AA -&gt; 27\n    AB -&gt; 28 \n    ...\n</pre>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;A&quot;\n<strong>\u8f93\u51fa:</strong> 1\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;AB&quot;\n<strong>\u8f93\u51fa:</strong> 28\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;ZY&quot;\n<strong>\u8f93\u51fa:</strong> 701</pre>\n\n<p><strong>\u81f4\u8c22\uff1a</strong><br>\n\u7279\u522b\u611f\u8c22&nbsp;<a href=\"http://leetcode.com/discuss/user/ts\">@ts</a>&nbsp;\u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002</p>\n",
        "titleZh": "Excel\u8868\u5217\u5e8f\u53f7",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Uber",
            "Apple",
            "Yahoo",
            "Twitter",
            "Intel",
            "Alation"
        ]
    },
    {
        "leetId": "172",
        "link": "factorial-trailing-zeroes",
        "title": "Factorial Trailing Zeroes",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "37.7%",
        "questionDescription": "<p>Given an integer <i>n</i>, return the number of trailing zeroes in <i>n</i>!.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong>&nbsp;3! = 6, no trailing zero.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 5\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong>&nbsp;5! = 120, one trailing zero.</pre>\r\n\r\n<p><b>Note: </b>Your solution should be in logarithmic time complexity.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 <em>n</em>\uff0c\u8fd4\u56de <em>n</em>! \u7ed3\u679c\u5c3e\u6570\u4e2d\u96f6\u7684\u6570\u91cf\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 3\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:</strong>&nbsp;3! = 6, \u5c3e\u6570\u4e2d\u6ca1\u6709\u96f6\u3002</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 5\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong>&nbsp;5! = 120, \u5c3e\u6570\u4e2d\u6709 1 \u4e2a\u96f6.</pre>\n\n<p><strong>\u8bf4\u660e: </strong>\u4f60\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a&nbsp;<em>O</em>(log&nbsp;<em>n</em>)<em>&nbsp;</em>\u3002</p>\n",
        "titleZh": "\u9636\u4e58\u540e\u7684\u96f6",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Nutanix",
            "Samsung",
            "IBM"
        ]
    },
    {
        "leetId": "173",
        "link": "binary-search-tree-iterator",
        "title": "Binary Search Tree Iterator",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "60.1%",
        "questionDescription": "<p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.</p>\r\n\r\n<p>Calling <code>next()</code> will return the next smallest number in the BST.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png\" style=\"width: 189px; height: 178px;\" /></strong></p>\r\n\r\n<pre>\r\nBSTIterator iterator = new BSTIterator(root);\r\niterator.next();    // return 3\r\niterator.next();    // return 7\r\niterator.hasNext(); // return true\r\niterator.next();    // return 9\r\niterator.hasNext(); // return true\r\niterator.next();    // return 15\r\niterator.hasNext(); // return true\r\niterator.next();    // return 20\r\niterator.hasNext(); // return false\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li><code>next()</code> and <code>hasNext()</code> should run in average O(1) time and uses O(<i>h</i>) memory, where <i>h</i> is the height of the tree.</li>\r\n\t<li>You may assume that&nbsp;<code>next()</code>&nbsp;call&nbsp;will always be valid, that is, there will be at least a next smallest number in the BST when <code>next()</code> is called.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5b9e\u73b0\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668\u3002\u4f60\u5c06\u4f7f\u7528\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\u521d\u59cb\u5316\u8fed\u4ee3\u5668\u3002</p>\n\n<p>\u8c03\u7528 <code>next()</code> \u5c06\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/25/bst-tree.png\" style=\"height: 178px; width: 189px;\"></strong></p>\n\n<pre>BSTIterator iterator = new BSTIterator(root);\niterator.next();    // \u8fd4\u56de 3\niterator.next();    // \u8fd4\u56de 7\niterator.hasNext(); // \u8fd4\u56de true\niterator.next();    // \u8fd4\u56de 9\niterator.hasNext(); // \u8fd4\u56de true\niterator.next();    // \u8fd4\u56de 15\niterator.hasNext(); // \u8fd4\u56de true\niterator.next();    // \u8fd4\u56de 20\niterator.hasNext(); // \u8fd4\u56de false</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>next()</code>&nbsp;\u548c&nbsp;<code>hasNext()</code>&nbsp;\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f&nbsp;O(1)\uff0c\u5e76\u4f7f\u7528&nbsp;O(<em>h</em>) \u5185\u5b58\uff0c\u5176\u4e2d&nbsp;<em>h&nbsp;</em>\u662f\u6811\u7684\u9ad8\u5ea6\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>next()</code>&nbsp;\u8c03\u7528\u603b\u662f\u6709\u6548\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u8c03\u7528 <code>next()</code>&nbsp;\u65f6\uff0cBST \u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u4e0b\u4e00\u4e2a\u6700\u5c0f\u7684\u6570\u3002</li>\n</ul>\n",
        "titleZh": "\u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "LinkedIn",
            "Oracle",
            "Cisco",
            "Qualtrics",
            "AppDynamics",
            "Cloudera"
        ]
    },
    {
        "leetId": "174",
        "link": "dungeon-game",
        "title": "Dungeon Game",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "33.2%",
        "questionDescription": "<style type=\"text/css\">table.dungeon, .dungeon th, .dungeon td {\r\n  border:3px solid black;\r\n}\r\n\r\n .dungeon th, .dungeon td {\r\n    text-align: center;\r\n    height: 70px;\r\n    width: 70px;\r\n}\r\n</style>\r\n<p>The demons had captured the princess (<strong>P</strong>) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (<strong>K</strong>) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.</p>\r\n\r\n<p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.</p>\r\n\r\n<p>Some of the rooms are guarded by demons, so the knight loses health (<em>negative</em> integers) upon entering these rooms; other rooms are either empty (<em>0&#39;s</em>) or contain magic orbs that increase the knight&#39;s health (<em>positive</em> integers).</p>\r\n\r\n<p>In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Write a function to determine the knight&#39;s minimum initial health so that he is able to rescue the princess.</strong></p>\r\n\r\n<p>For example, given the dungeon below, the initial health of the knight must be at least <strong>7</strong> if he follows the optimal path <code>RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN</code>.</p>\r\n\r\n<table class=\"dungeon\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>-2 (K)</td>\r\n\t\t\t<td>-3</td>\r\n\t\t\t<td>3</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>-5</td>\r\n\t\t\t<td>-10</td>\r\n\t\t\t<td>1</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>10</td>\r\n\t\t\t<td>30</td>\r\n\t\t\t<td>-5 (P)</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The knight&#39;s health has no upper bound.</li>\r\n\t<li>Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<style>\r\ntable.dungeon, .dungeon th, .dungeon td {\r\n  border:3px solid black;\r\n}\r\n\r\n .dungeon th, .dungeon td {\r\n    text-align: center;\r\n    height: 70px;\r\n    width: 70px;\r\n}\r\n</style>\r\n\r\n<p>\u4e00\u4e9b\u6076\u9b54\u6293\u4f4f\u4e86\u516c\u4e3b\uff08<strong>P</strong>\uff09\u5e76\u5c06\u5979\u5173\u5728\u4e86\u5730\u4e0b\u57ce\u7684\u53f3\u4e0b\u89d2\u3002\u5730\u4e0b\u57ce\u662f\u7531&nbsp;M x N \u4e2a\u623f\u95f4\u7ec4\u6210\u7684\u4e8c\u7ef4\u7f51\u683c\u3002\u6211\u4eec\u82f1\u52c7\u7684\u9a91\u58eb\uff08<strong>K</strong>\uff09\u6700\u521d\u88ab\u5b89\u7f6e\u5728\u5de6\u4e0a\u89d2\u7684\u623f\u95f4\u91cc\uff0c\u4ed6\u5fc5\u987b\u7a7f\u8fc7\u5730\u4e0b\u57ce\u5e76\u901a\u8fc7\u5bf9\u6297\u6076\u9b54\u6765\u62ef\u6551\u516c\u4e3b\u3002</p>\r\n\r\n<p>\u9a91\u58eb\u7684\u521d\u59cb\u5065\u5eb7\u70b9\u6570\u4e3a\u4e00\u4e2a\u6b63\u6574\u6570\u3002\u5982\u679c\u4ed6\u7684\u5065\u5eb7\u70b9\u6570\u5728\u67d0\u4e00\u65f6\u523b\u964d\u81f3 0 \u6216\u4ee5\u4e0b\uff0c\u4ed6\u4f1a\u7acb\u5373\u6b7b\u4ea1\u3002</p>\r\n\r\n<p>\u6709\u4e9b\u623f\u95f4\u7531\u6076\u9b54\u5b88\u536b\uff0c\u56e0\u6b64\u9a91\u58eb\u5728\u8fdb\u5165\u8fd9\u4e9b\u623f\u95f4\u65f6\u4f1a\u5931\u53bb\u5065\u5eb7\u70b9\u6570\uff08\u82e5\u623f\u95f4\u91cc\u7684\u503c\u4e3a<em>\u8d1f\u6574\u6570</em>\uff0c\u5219\u8868\u793a\u9a91\u58eb\u5c06\u635f\u5931\u5065\u5eb7\u70b9\u6570\uff09\uff1b\u5176\u4ed6\u623f\u95f4\u8981\u4e48\u662f\u7a7a\u7684\uff08\u623f\u95f4\u91cc\u7684\u503c\u4e3a <em>0</em>\uff09\uff0c\u8981\u4e48\u5305\u542b\u589e\u52a0\u9a91\u58eb\u5065\u5eb7\u70b9\u6570\u7684\u9b54\u6cd5\u7403\uff08\u82e5\u623f\u95f4\u91cc\u7684\u503c\u4e3a<em>\u6b63\u6574\u6570</em>\uff0c\u5219\u8868\u793a\u9a91\u58eb\u5c06\u589e\u52a0\u5065\u5eb7\u70b9\u6570\uff09\u3002</p>\r\n\r\n<p>\u4e3a\u4e86\u5c3d\u5feb\u5230\u8fbe\u516c\u4e3b\uff0c\u9a91\u58eb\u51b3\u5b9a\u6bcf\u6b21\u53ea\u5411\u53f3\u6216\u5411\u4e0b\u79fb\u52a8\u4e00\u6b65\u3002</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u786e\u4fdd\u9a91\u58eb\u80fd\u591f\u62ef\u6551\u5230\u516c\u4e3b\u6240\u9700\u7684\u6700\u4f4e\u521d\u59cb\u5065\u5eb7\u70b9\u6570\u3002</strong></p>\r\n\r\n<p>\u4f8b\u5982\uff0c\u8003\u8651\u5230\u5982\u4e0b\u5e03\u5c40\u7684\u5730\u4e0b\u57ce\uff0c\u5982\u679c\u9a91\u58eb\u9075\u5faa\u6700\u4f73\u8def\u5f84 <code>\u53f3 -&gt; \u53f3 -&gt; \u4e0b -&gt; \u4e0b</code>\uff0c\u5219\u9a91\u58eb\u7684\u521d\u59cb\u5065\u5eb7\u70b9\u6570\u81f3\u5c11\u4e3a <strong>7</strong>\u3002</p>\r\n\r\n<table class=\"dungeon\">\r\n<tr> \r\n<td>-2 (K)</td> \r\n<td>-3</td> \r\n<td>3</td> \r\n</tr> \r\n<tr> \r\n<td>-5</td> \r\n<td>-10</td> \r\n<td>1</td> \r\n</tr> \r\n<tr> \r\n<td>10</td> \r\n<td>30</td> \r\n<td>-5 (P)</td> \r\n</tr> \r\n</table>\r\n<!---2K   -3  3\r\n-5   -10   1\r\n10 30   5P-->\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u8bf4\u660e:</strong></p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p>\u9a91\u58eb\u7684\u5065\u5eb7\u70b9\u6570\u6ca1\u6709\u4e0a\u9650\u3002</p>\r\n\t</li>\r\n\t<li>\u4efb\u4f55\u623f\u95f4\u90fd\u53ef\u80fd\u5bf9\u9a91\u58eb\u7684\u5065\u5eb7\u70b9\u6570\u9020\u6210\u5a01\u80c1\uff0c\u4e5f\u53ef\u80fd\u589e\u52a0\u9a91\u58eb\u7684\u5065\u5eb7\u70b9\u6570\uff0c\u5305\u62ec\u9a91\u58eb\u8fdb\u5165\u7684\u5de6\u4e0a\u89d2\u623f\u95f4\u4ee5\u53ca\u516c\u4e3b\u88ab\u76d1\u7981\u7684\u53f3\u4e0b\u89d2\u623f\u95f4\u3002</li>\r\n</ul>",
        "titleZh": "\u5730\u4e0b\u57ce\u6e38\u620f",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Amazon",
            "Microsoft"
        ]
    },
    {
        "leetId": "179",
        "link": "largest-number",
        "title": "Largest Number",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "31.0%",
        "questionDescription": "<p>Given a list of non negative integers, arrange them such that they form the largest number.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>[10,2]</code>\r\n<strong>Output:</strong> &quot;<code>210&quot;</code></pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>[3,30,34,5,9]</code>\r\n<strong>Output:</strong> &quot;<code>9534330&quot;</code>\r\n</pre>\r\n\r\n<p><strong>Note:</strong> The result may be very large, so you need to return a string instead of an integer.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u7ec4\u975e\u8d1f\u6574\u6570\uff0c\u91cd\u65b0\u6392\u5217\u5b83\u4eec\u7684\u987a\u5e8f\u4f7f\u4e4b\u7ec4\u6210\u4e00\u4e2a\u6700\u5927\u7684\u6574\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[10,2]</code>\n<strong>\u8f93\u51fa:</strong> <code>210</code></pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[3,30,34,5,9]</code>\n<strong>\u8f93\u51fa:</strong> <code>9534330</code></pre>\n\n<p><strong>\u8bf4\u660e: </strong>\u8f93\u51fa\u7ed3\u679c\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u800c\u4e0d\u662f\u6574\u6570\u3002</p>\n",
        "titleZh": "\u6700\u5927\u6570",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "Alibaba",
            "Goldman Sachs",
            "Yelp",
            "Walmart Labs",
            "Salesforce",
            "Works Applications"
        ]
    },
    {
        "leetId": "186",
        "link": "reverse-words-in-a-string-ii",
        "title": "Reverse Words in a String II",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "45",
        "questionDescription": "\n<p>Given an input string<strong><em>\u00a0</em></strong>, reverse the string word by word.\u00a0</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:  </strong>[\"t\",\"h\",\"e\",\" \",\"s\",\"k\",\"y\",\" \",\"i\",\"s\",\" \",\"b\",\"l\",\"u\",\"e\"]\n<strong>Output: </strong>[\"b\",\"l\",\"u\",\"e\",\" \",\"i\",\"s\",\" \",\"s\",\"k\",\"y\",\" \",\"t\",\"h\",\"e\"]</pre>\n<p><strong>Note:\u00a0</strong></p>\n<ul>\n<li>A word is defined as a sequence of non-space characters.</li>\n<li>The input string does not contain leading or trailing spaces.</li>\n<li>The words are always separated by a single space.</li>\n</ul>\n<p><strong>Follow up:\u00a0</strong>Could you do it <i>in-place</i> without allocating extra space?</p>\n",
        "questionDescriptionZh": "\n<p>Given an input string<strong><em>\u00a0</em></strong>, reverse the string word by word.\u00a0</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:  </strong>[\"t\",\"h\",\"e\",\" \",\"s\",\"k\",\"y\",\" \",\"i\",\"s\",\" \",\"b\",\"l\",\"u\",\"e\"]\n<strong>Output: </strong>[\"b\",\"l\",\"u\",\"e\",\" \",\"i\",\"s\",\" \",\"s\",\"k\",\"y\",\" \",\"t\",\"h\",\"e\"]</pre>\n<p><strong>Note:\u00a0</strong></p>\n<ul>\n<li>A word is defined as a sequence of non-space characters.</li>\n<li>The input string does not contain leading or trailing spaces.</li>\n<li>The words are always separated by a single space.</li>\n</ul>\n<p><strong>Follow up:\u00a0</strong>Could you do it <i>in-place</i> without allocating extra space?</p>\n",
        "companies": [
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Apple",
            "Tencent"
        ]
    },
    {
        "leetId": "187",
        "link": "repeated-dna-sequences",
        "title": "Repeated DNA Sequences",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "41.8%",
        "questionDescription": "<p>All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: &quot;ACGAATTCCG&quot;. When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.</p>\r\n\r\n<p>Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> s = &quot;AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT&quot;\r\n\r\n<strong>Output:</strong> [&quot;AAAAACCCCC&quot;, &quot;CCCCCAAAAA&quot;]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u6240\u6709 DNA \u7531\u4e00\u7cfb\u5217\u7f29\u5199\u4e3a A\uff0cC\uff0cG \u548c T \u7684\u6838\u82f7\u9178\u7ec4\u6210\uff0c\u4f8b\u5982\uff1a&ldquo;ACGAATTCCG&rdquo;\u3002\u5728\u7814\u7a76 DNA \u65f6\uff0c\u8bc6\u522b DNA \u4e2d\u7684\u91cd\u590d\u5e8f\u5217\u6709\u65f6\u4f1a\u5bf9\u7814\u7a76\u975e\u5e38\u6709\u5e2e\u52a9\u3002</p>\n\n<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e DNA \u5206\u5b50\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u591a\u4e00\u6b21\u768410\u4e2a\u5b57\u6bcd\u957f\u7684\u5e8f\u5217\uff08\u5b50\u4e32\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> s = &quot;AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT&quot;\n\n<strong>\u8f93\u51fa:</strong> [&quot;AAAAACCCCC&quot;, &quot;CCCCCAAAAA&quot;]</pre>\n",
        "titleZh": "\u91cd\u590d\u7684DNA\u5e8f\u5217",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "LinkedIn"
        ]
    },
    {
        "leetId": "188",
        "link": "best-time-to-buy-and-sell-stock-iv",
        "title": "Best Time to Buy and Sell Stock IV",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "27.0%",
        "questionDescription": "<p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p>\r\n\r\n<p>Design an algorithm to find the maximum profit. You may complete at most <b>k</b> transactions.</p>\r\n\r\n<p><b>Note:</b><br />\r\nYou may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,4,1], k = 2\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [3,2,6,5,0,3], k = 2\r\n<strong>Output:</strong> 7\r\n<strong>Explanation:</strong> Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4.\r\n&nbsp;            Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c<em> i</em> \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u7684\u80a1\u7968\u5728\u7b2c <em>i </em>\u5929\u7684\u4ef7\u683c\u3002</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210 <strong>k</strong> \u7b14\u4ea4\u6613\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong>&nbsp;\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,4,1], k = 2\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u5728\u7b2c 1 \u5929 (\u80a1\u7968\u4ef7\u683c = 2) \u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 2 \u5929 (\u80a1\u7968\u4ef7\u683c = 4) \u7684\u65f6\u5019\u5356\u51fa\uff0c\u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 4-2 = 2 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [3,2,6,5,0,3], k = 2\n<strong>\u8f93\u51fa:</strong> 7\n<strong>\u89e3\u91ca:</strong> \u5728\u7b2c 2 \u5929 (\u80a1\u7968\u4ef7\u683c = 2) \u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929 (\u80a1\u7968\u4ef7\u683c = 6) \u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-2 = 4 \u3002\n&nbsp;    \u968f\u540e\uff0c\u5728\u7b2c 5 \u5929 (\u80a1\u7968\u4ef7\u683c = 0) \u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 6 \u5929 (\u80a1\u7968\u4ef7\u683c = 3) \u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 3-0 = 3 \u3002\n</pre>\n",
        "titleZh": "\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a IV",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Citadel"
        ]
    },
    {
        "leetId": "189",
        "link": "rotate-array",
        "title": "Rotate Array",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "37.0%",
        "questionDescription": "<p>Given an array, rotate the array to the right by <em>k</em> steps, where&nbsp;<em>k</em>&nbsp;is non-negative.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>[1,2,3,4,5,6,7]</code> and <em>k</em> = 3\r\n<strong>Output:</strong> <code>[5,6,7,1,2,3,4]</code>\r\n<strong>Explanation:</strong>\r\nrotate 1 steps to the right: <code>[7,1,2,3,4,5,6]</code>\r\nrotate 2 steps to the right: <code>[6,7,1,2,3,4,5]\r\n</code>rotate 3 steps to the right: <code>[5,6,7,1,2,3,4]</code>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>[-1,-100,3,99]</code> and <em>k</em> = 2\r\n<strong>Output:</strong> [3,99,-1,-100]\r\n<strong>Explanation:</strong> \r\nrotate 1 steps to the right: [99,-1,-100,3]\r\nrotate 2 steps to the right: [3,99,-1,-100]\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</li>\r\n\t<li>Could you do it in-place with O(1) extra space?</li>\r\n</ul>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5411\u53f3\u79fb\u52a8&nbsp;<em>k&nbsp;</em>\u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d&nbsp;<em>k&nbsp;</em>\u662f\u975e\u8d1f\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[1,2,3,4,5,6,7]</code> \u548c <em>k</em> = 3\n<strong>\u8f93\u51fa:</strong> <code>[5,6,7,1,2,3,4]</code>\n<strong>\u89e3\u91ca:</strong>\n\u5411\u53f3\u65cb\u8f6c 1 \u6b65: <code>[7,1,2,3,4,5,6]</code>\n\u5411\u53f3\u65cb\u8f6c 2 \u6b65: <code>[6,7,1,2,3,4,5]\n</code>\u5411\u53f3\u65cb\u8f6c 3 \u6b65: <code>[5,6,7,1,2,3,4]</code>\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[-1,-100,3,99]</code> \u548c <em>k</em> = 2\n<strong>\u8f93\u51fa:</strong> [3,99,-1,-100]\n<strong>\u89e3\u91ca:</strong> \n\u5411\u53f3\u65cb\u8f6c 1 \u6b65: [99,-1,-100,3]\n\u5411\u53f3\u65cb\u8f6c 2 \u6b65: [3,99,-1,-100]</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u5c3d\u53ef\u80fd\u60f3\u51fa\u66f4\u591a\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u81f3\u5c11\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</li>\n\t<li>\u8981\u6c42\u4f7f\u7528\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a&nbsp;O(1) \u7684\u539f\u5730\u7b97\u6cd5\u3002</li>\n</ul>\n",
        "titleZh": "\u65cb\u8f6c\u6570\u7ec4",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Oracle",
            "Cisco"
        ]
    },
    {
        "leetId": "190",
        "link": "reverse-bits",
        "title": "Reverse Bits",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "38.9%",
        "questionDescription": "<p>Reverse bits of a given 32 bits unsigned integer.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 00000010100101000001111010011100\r\n<strong>Output:</strong> 00111001011110000010100101000000\r\n<strong>Explanation: </strong>The input binary string <b>00000010100101000001111010011100</b> represents the unsigned integer 43261596, so return 964176192 which its binary representation is <b>00111001011110000010100101000000</b>.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 11111111111111111111111111111101\r\n<strong>Output:</strong> 10111111111111111111111111111111\r\n<strong>Explanation: </strong>The input binary string <strong>11111111111111111111111111111101</strong> represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is <strong>10101111110010110010011101101001</strong>.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Note that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.</li>\r\n\t<li>In Java,&nbsp;the compiler represents the signed integers using <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">2&#39;s complement notation</a>. Therefore, in <strong>Example 2</strong>&nbsp;above the input represents the signed integer <code>-3</code>&nbsp;and the output represents the signed integer <code>-1073741825</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Follow up</b>:</p>\r\n\r\n<p>If this function is called many times, how would you optimize it?</p>\r\n",
        "questionDescriptionZh": "<p>\u98a0\u5012\u7ed9\u5b9a\u7684 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u4f4d\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 00000010100101000001111010011100\n<strong>\u8f93\u51fa:</strong> 00111001011110000010100101000000\n<strong>\u89e3\u91ca: </strong>\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 <strong>00000010100101000001111010011100 </strong>\u8868\u793a\u65e0\u7b26\u53f7\u6574\u6570<strong> 43261596</strong><strong>\uff0c\n</strong>      \u56e0\u6b64\u8fd4\u56de 964176192\uff0c\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u4e3a <strong>00111001011110000010100101000000</strong>\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>11111111111111111111111111111101\n<strong>\u8f93\u51fa\uff1a</strong>10111111111111111111111111111111\n<strong>\u89e3\u91ca\uff1a</strong>\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 <strong>11111111111111111111111111111101</strong> \u8868\u793a\u65e0\u7b26\u53f7\u6574\u6570 4294967293\uff0c\n&nbsp;     \u56e0\u6b64\u8fd4\u56de 3221225471 \u5176\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u4e3a <strong>10101111110010110010011101101001\u3002</strong></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u8bf7\u6ce8\u610f\uff0c\u5728\u67d0\u4e9b\u8bed\u8a00\uff08\u5982 Java\uff09\u4e2d\uff0c\u6ca1\u6709\u65e0\u7b26\u53f7\u6574\u6570\u7c7b\u578b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u5c06\u88ab\u6307\u5b9a\u4e3a\u6709\u7b26\u53f7\u6574\u6570\u7c7b\u578b\uff0c\u5e76\u4e14\u4e0d\u5e94\u5f71\u54cd\u60a8\u7684\u5b9e\u73b0\uff0c\u56e0\u4e3a\u65e0\u8bba\u6574\u6570\u662f\u6709\u7b26\u53f7\u7684\u8fd8\u662f\u65e0\u7b26\u53f7\u7684\uff0c\u5176\u5185\u90e8\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u90fd\u662f\u76f8\u540c\u7684\u3002</li>\n\t<li>\u5728 Java \u4e2d\uff0c\u7f16\u8bd1\u5668\u4f7f\u7528<a href=\"https://baike.baidu.com/item/\u4e8c\u8fdb\u5236\u8865\u7801/5295284\" target=\"_blank\">\u4e8c\u8fdb\u5236\u8865\u7801</a>\u8bb0\u6cd5\u6765\u8868\u793a\u6709\u7b26\u53f7\u6574\u6570\u3002\u56e0\u6b64\uff0c\u5728\u4e0a\u9762\u7684&nbsp;<strong>\u793a\u4f8b 2</strong>&nbsp;\u4e2d\uff0c\u8f93\u5165\u8868\u793a\u6709\u7b26\u53f7\u6574\u6570 <code>-3</code>\uff0c\u8f93\u51fa\u8868\u793a\u6709\u7b26\u53f7\u6574\u6570 <code>-1073741825</code>\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636</strong>:<br>\n\u5982\u679c\u591a\u6b21\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f</p>\n",
        "titleZh": "\u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "Airbnb",
            "Samsung"
        ]
    },
    {
        "leetId": "191",
        "link": "number-of-1-bits",
        "title": "Number of 1 Bits",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "51.1%",
        "questionDescription": "<p>Write a function that takes an unsigned integer and return&nbsp;the number of &#39;1&#39;&nbsp;bits it has (also known as the <a href=\"http://en.wikipedia.org/wiki/Hamming_weight\" target=\"_blank\">Hamming weight</a>).</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 00000000000000000000000000001011\r\n<strong>Output:</strong> 3\r\n<strong>Explanation: </strong>The input binary string <code><strong>00000000000000000000000000001011</strong>&nbsp;has a total of three &#39;1&#39; bits.</code>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 00000000000000000000000010000000\r\n<strong>Output:</strong> 1\r\n<strong>Explanation: </strong>The input binary string <strong>00000000000000000000000010000000</strong>&nbsp;has a total of one &#39;1&#39; bit.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 11111111111111111111111111111101\r\n<strong>Output:</strong> 31\r\n<strong>Explanation: </strong>The input binary string <strong>11111111111111111111111111111101</strong> has a total of thirty one &#39;1&#39; bits.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Note that in some languages such as Java, there is no unsigned integer type. In this case, the input will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.</li>\r\n\t<li>In Java,&nbsp;the compiler represents the signed integers using <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">2&#39;s complement notation</a>. Therefore, in <strong>Example 3</strong>&nbsp;above the input represents the signed integer <code>-3</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Follow up</b>:</p>\r\n\r\n<p>If this function is called many times, how would you optimize it?</p>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u8fd4\u56de\u5176\u4e8c\u8fdb\u5236\u8868\u8fbe\u5f0f\u4e2d\u6570\u5b57\u4f4d\u6570\u4e3a &lsquo;1&rsquo;&nbsp;\u7684\u4e2a\u6570\uff08\u4e5f\u88ab\u79f0\u4e3a<a href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F\" target=\"_blank\">\u6c49\u660e\u91cd\u91cf</a>\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>00000000000000000000000000001011\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 <code><strong>00000000000000000000000000001011</strong>&nbsp;\u4e2d\uff0c\u5171\u6709\u4e09\u4f4d\u4e3a &#39;1&#39;\u3002</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>00000000000000000000000010000000\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 <strong>00000000000000000000000010000000</strong>&nbsp;\u4e2d\uff0c\u5171\u6709\u4e00\u4f4d\u4e3a &#39;1&#39;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>11111111111111111111111111111101\n<strong>\u8f93\u51fa\uff1a</strong>31\n<strong>\u89e3\u91ca\uff1a</strong>\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 <strong>11111111111111111111111111111101</strong> \u4e2d\uff0c\u5171\u6709 31 \u4f4d\u4e3a &#39;1&#39;\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u8bf7\u6ce8\u610f\uff0c\u5728\u67d0\u4e9b\u8bed\u8a00\uff08\u5982 Java\uff09\u4e2d\uff0c\u6ca1\u6709\u65e0\u7b26\u53f7\u6574\u6570\u7c7b\u578b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u5c06\u88ab\u6307\u5b9a\u4e3a\u6709\u7b26\u53f7\u6574\u6570\u7c7b\u578b\uff0c\u5e76\u4e14\u4e0d\u5e94\u5f71\u54cd\u60a8\u7684\u5b9e\u73b0\uff0c\u56e0\u4e3a\u65e0\u8bba\u6574\u6570\u662f\u6709\u7b26\u53f7\u7684\u8fd8\u662f\u65e0\u7b26\u53f7\u7684\uff0c\u5176\u5185\u90e8\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u90fd\u662f\u76f8\u540c\u7684\u3002</li>\n\t<li>\u5728 Java \u4e2d\uff0c\u7f16\u8bd1\u5668\u4f7f\u7528<a href=\"https://baike.baidu.com/item/\u4e8c\u8fdb\u5236\u8865\u7801/5295284\" target=\"_blank\">\u4e8c\u8fdb\u5236\u8865\u7801</a>\u8bb0\u6cd5\u6765\u8868\u793a\u6709\u7b26\u53f7\u6574\u6570\u3002\u56e0\u6b64\uff0c\u5728\u4e0a\u9762\u7684&nbsp;<strong>\u793a\u4f8b 3</strong>&nbsp;\u4e2d\uff0c\u8f93\u5165\u8868\u793a\u6709\u7b26\u53f7\u6574\u6570 <code>-3</code>\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636</strong>:<br>\n\u5982\u679c\u591a\u6b21\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f</p>\n",
        "titleZh": "\u4f4d1\u7684\u4e2a\u6570",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "Yahoo",
            "VMware"
        ]
    },
    {
        "leetId": "192",
        "link": "word-frequency",
        "title": "Word Frequency",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "28.7%",
        "questionDescription": "<p>Write a bash script to calculate the frequency of each word in a text file <code>words.txt</code>.</p>\r\n\r\n<p>For simplicity sake, you may assume:</p>\r\n\r\n<ul>\r\n\t<li><code>words.txt</code> contains only lowercase characters and space <code>&#39; &#39;</code> characters.</li>\r\n\t<li>Each word must consist of lowercase characters only.</li>\r\n\t<li>Words are separated by one or more whitespace characters.</li>\r\n</ul>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Assume that <code>words.txt</code> has the following content:</p>\r\n\r\n<pre>\r\nthe day is sunny the the\r\nthe sunny is is\r\n</pre>\r\n\r\n<p>Your script should output the following, sorted by descending frequency:</p>\r\n\r\n<pre>\r\nthe 4\r\nis 3\r\nsunny 2\r\nday 1\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>Don&#39;t worry about handling ties, it is guaranteed that each word&#39;s frequency count is unique.</li>\r\n\t<li>Could you write it in one-line using <a href=\"http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-4.html\">Unix pipes</a>?</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5199\u4e00\u4e2a bash \u811a\u672c\u4ee5\u7edf\u8ba1\u4e00\u4e2a\u6587\u672c\u6587\u4ef6&nbsp;<code>words.txt</code>&nbsp;\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u9891\u7387\u3002</p>\n\n<p>\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u4f60\u53ef\u4ee5\u5047\u8bbe\uff1a</p>\n\n<ul>\n\t<li><code>words.txt</code>\u53ea\u5305\u62ec\u5c0f\u5199\u5b57\u6bcd\u548c&nbsp;<code>&#39; &#39;</code>&nbsp;\u3002</li>\n\t<li>\u6bcf\u4e2a\u5355\u8bcd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n\t<li>\u5355\u8bcd\u95f4\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u7a7a\u683c\u5b57\u7b26\u5206\u9694\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<p>\u5047\u8bbe <code>words.txt</code> \u5185\u5bb9\u5982\u4e0b\uff1a</p>\n\n<pre>the day is sunny the the\nthe sunny is is\n</pre>\n\n<p>\u4f60\u7684\u811a\u672c\u5e94\u5f53\u8f93\u51fa\uff08\u4ee5\u8bcd\u9891\u964d\u5e8f\u6392\u5217\uff09\uff1a</p>\n\n<pre>the 4\nis 3\nsunny 2\nday 1\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u4e0d\u8981\u62c5\u5fc3\u8bcd\u9891\u76f8\u540c\u7684\u5355\u8bcd\u7684\u6392\u5e8f\u95ee\u9898\uff0c\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u9891\u7387\u90fd\u662f\u552f\u4e00\u7684\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u884c&nbsp;<a href=\"http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-4.html\">Unix pipes</a>&nbsp;\u5b9e\u73b0\u5417\uff1f</li>\n</ul>\n",
        "titleZh": "\u7edf\u8ba1\u8bcd\u9891",
        "tags": [],
        "companies": [
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Adobe",
            "Baidu"
        ]
    },
    {
        "leetId": "193",
        "link": "valid-phone-numbers",
        "title": "Valid Phone Numbers",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "23.9%",
        "questionDescription": "<p>Given a text file <code>file.txt</code> that contains list of phone numbers (one per line), write a one liner bash script to print all valid phone numbers.</p>\r\n\r\n<p>You may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)</p>\r\n\r\n<p>You may also assume each line in the text file must not contain leading or trailing white spaces.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Assume that <code>file.txt</code> has the following content:</p>\r\n\r\n<pre>\r\n987-123-4567\r\n123 456 7890\r\n(123) 456-7890\r\n</pre>\r\n\r\n<p>Your script should output the following valid phone numbers:</p>\r\n\r\n<pre>\r\n987-123-4567\r\n(123) 456-7890\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u7535\u8bdd\u53f7\u7801\u5217\u8868\uff08\u4e00\u884c\u4e00\u4e2a\u7535\u8bdd\u53f7\u7801\uff09\u7684\u6587\u672c\u6587\u4ef6 <code>file.txt</code>\uff0c\u5199\u4e00\u4e2a bash \u811a\u672c\u8f93\u51fa\u6240\u6709\u6709\u6548\u7684\u7535\u8bdd\u53f7\u7801\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u4e00\u4e2a\u6709\u6548\u7684\u7535\u8bdd\u53f7\u7801\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u4e24\u79cd\u683c\u5f0f\uff1a (xxx) xxx-xxxx \u6216&nbsp;xxx-xxx-xxxx\u3002\uff08x \u8868\u793a\u4e00\u4e2a\u6570\u5b57\uff09</p>\n\n<p>\u4f60\u4e5f\u53ef\u4ee5\u5047\u8bbe\u6bcf\u884c\u524d\u540e\u6ca1\u6709\u591a\u4f59\u7684\u7a7a\u683c\u5b57\u7b26\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<p>\u5047\u8bbe&nbsp;<code>file.txt</code>&nbsp;\u5185\u5bb9\u5982\u4e0b\uff1a</p>\n\n<pre>987-123-4567\n123 456 7890\n(123) 456-7890\n</pre>\n\n<p>\u4f60\u7684\u811a\u672c\u5e94\u5f53\u8f93\u51fa\u4e0b\u5217\u6709\u6548\u7684\u7535\u8bdd\u53f7\u7801\uff1a</p>\n\n<pre>987-123-4567\n(123) 456-7890\n</pre>\n",
        "titleZh": "\u6709\u6548\u7535\u8bdd\u53f7\u7801",
        "tags": [],
        "companies": [
            "Google",
            "Amazon",
            "Adobe",
            "Airbnb"
        ]
    },
    {
        "leetId": "194",
        "link": "transpose-file",
        "title": "Transpose File",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "32.1%",
        "questionDescription": "<p>Given a text file <code>file.txt</code>, transpose its content.</p>\r\n\r\n<p>You may assume that each row has the same number of columns and each field is separated by the <code>&#39; &#39;</code> character.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>If <code>file.txt</code> has the following content:</p>\r\n\r\n<pre>\r\nname age\r\nalice 21\r\nryan 30\r\n</pre>\r\n\r\n<p>Output the following:</p>\r\n\r\n<pre>\r\nname alice ryan\r\nage 21 30\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6587\u4ef6&nbsp;<code>file.txt</code>\uff0c\u8f6c\u7f6e\u5b83\u7684\u5185\u5bb9\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u884c\u5217\u6570\u76f8\u540c\uff0c\u5e76\u4e14\u6bcf\u4e2a\u5b57\u6bb5\u7531&nbsp;<code>&#39; &#39;</code> \u5206\u9694.</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<p>\u5047\u8bbe&nbsp;<code>file.txt</code>&nbsp;\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a</p>\n\n<pre>name age\nalice 21\nryan 30\n</pre>\n\n<p>\u5e94\u5f53\u8f93\u51fa\uff1a</p>\n\n<pre>name alice ryan\nage 21 30\n</pre>\n",
        "titleZh": "\u8f6c\u7f6e\u6587\u4ef6",
        "tags": []
    },
    {
        "leetId": "195",
        "link": "tenth-line",
        "title": "Tenth Line",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "38.5%",
        "questionDescription": "<p>Given a text file&nbsp;<code>file.txt</code>, print&nbsp;just the 10th line of the&nbsp;file.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Assume that <code>file.txt</code> has the following content:</p>\r\n\r\n<pre>\r\nLine 1\r\nLine 2\r\nLine 3\r\nLine 4\r\nLine 5\r\nLine 6\r\nLine 7\r\nLine 8\r\nLine 9\r\nLine 10\r\n</pre>\r\n\r\n<p>Your script should output the tenth line, which is:</p>\r\n\r\n<pre>\r\nLine 10\r\n</pre>\r\n\r\n<div class=\"spoilers\"><b>Note:</b><br />\r\n1. If the file contains less than 10 lines, what should you output?<br />\r\n2. There&#39;s at least three different solutions. Try to explore all possibilities.</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6587\u672c\u6587\u4ef6&nbsp;<code>file.txt</code>\uff0c\u8bf7\u53ea\u6253\u5370\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u7684\u7b2c\u5341\u884c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<p>\u5047\u8bbe&nbsp;<code>file.txt</code> \u6709\u5982\u4e0b\u5185\u5bb9\uff1a</p>\n\n<pre>Line 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\nLine 7\nLine 8\nLine 9\nLine 10\n</pre>\n\n<p>\u4f60\u7684\u811a\u672c\u5e94\u5f53\u663e\u793a\u7b2c\u5341\u884c\uff1a</p>\n\n<pre>Line 10\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n1. \u5982\u679c\u6587\u4ef6\u5c11\u4e8e\u5341\u884c\uff0c\u4f60\u5e94\u5f53\u8f93\u51fa\u4ec0\u4e48\uff1f<br>\n2. \u81f3\u5c11\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u89e3\u6cd5\uff0c\u8bf7\u5c1d\u8bd5\u5c3d\u53ef\u80fd\u591a\u7684\u65b9\u6cd5\u6765\u89e3\u9898\u3002</p>\n",
        "titleZh": "\u7b2c\u5341\u884c",
        "tags": [],
        "companies": [
            "Google",
            "Facebook",
            "Adobe",
            "Apple",
            "Aetion"
        ]
    },
    {
        "leetId": "198",
        "link": "house-robber",
        "title": "House Robber",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "39.7%",
        "questionDescription": "<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p>\r\n\r\n<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <b>without alerting the police</b>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3,1]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> Rob house 1 (money = 1) and then rob house 3 (money = 3).\r\n&nbsp;            Total amount you can rob = 1 + 3 = 4.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,7,9,3,1]\r\n<strong>Output:</strong> 12\r\n<strong>Explanation:</strong> Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\r\n&nbsp;            Total amount you can rob = 2 + 9 + 1 = 12.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\uff0c\u5f71\u54cd\u4f60\u5077\u7a83\u7684\u552f\u4e00\u5236\u7ea6\u56e0\u7d20\u5c31\u662f\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c<strong>\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66</strong>\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60<strong>\u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b\uff0c</strong>\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3,1]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 1) \uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 3)\u3002\n&nbsp;    \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,7,9,3,1]\n<strong>\u8f93\u51fa:</strong> 12\n<strong>\u89e3\u91ca:</strong> \u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 2), \u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 9)\uff0c\u63a5\u7740\u5077\u7a83 5 \u53f7\u623f\u5c4b (\u91d1\u989d = 1)\u3002\n&nbsp;    \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 2 + 9 + 1 = 12 \u3002\n</pre>\n",
        "titleZh": "\u6253\u5bb6\u52ab\u820d",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Walmart Labs",
            "Pocket Gems",
            "Mathworks",
            "Samsung",
            "Quora"
        ]
    },
    {
        "leetId": "199",
        "link": "binary-tree-right-side-view",
        "title": "Binary Tree Right Side View",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "57.2%",
        "questionDescription": "<p>Given a binary tree, imagine yourself standing on the <em>right</em> side of it, return the values of the nodes you can see ordered from top to bottom.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>&nbsp;[1,2,3,null,5,null,4]\r\n<strong>Output:</strong>&nbsp;[1, 3, 4]\r\n<strong>Explanation:\r\n</strong>\r\n   1            &lt;---\r\n /   \\\r\n2     3         &lt;---\r\n \\     \\\r\n  5     4       &lt;---\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u60f3\u8c61\u81ea\u5df1\u7ad9\u5728\u5b83\u7684\u53f3\u4fa7\uff0c\u6309\u7167\u4ece\u9876\u90e8\u5230\u5e95\u90e8\u7684\u987a\u5e8f\uff0c\u8fd4\u56de\u4ece\u53f3\u4fa7\u6240\u80fd\u770b\u5230\u7684\u8282\u70b9\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>&nbsp;[1,2,3,null,5,null,4]\n<strong>\u8f93\u51fa:</strong>&nbsp;[1, 3, 4]\n<strong>\u89e3\u91ca:\n</strong>\n   1            &lt;---\n /   \\\n2     3         &lt;---\n \\     \\\n  5     4       &lt;---\n</pre>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "eBay",
            "Tencent",
            "Zenefits",
            "Paypal",
            "Mathworks"
        ]
    },
    {
        "leetId": "200",
        "link": "number-of-islands",
        "title": "Number of Islands",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "42.2%",
        "questionDescription": "<p>Given a 2d grid map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n11110\r\n11010\r\n11000\r\n00000\r\n\r\n<strong>Output:</strong>&nbsp;1\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n11000\r\n11000\r\n00100\r\n00011\r\n\r\n<strong>Output: </strong>3\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531&nbsp;<code>&#39;1&#39;</code>\uff08\u9646\u5730\uff09\u548c <code>&#39;0&#39;</code>\uff08\u6c34\uff09\u7ec4\u6210\u7684\u7684\u4e8c\u7ef4\u7f51\u683c\uff0c\u8ba1\u7b97\u5c9b\u5c7f\u7684\u6570\u91cf\u3002\u4e00\u4e2a\u5c9b\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u5b83\u662f\u901a\u8fc7\u6c34\u5e73\u65b9\u5411\u6216\u5782\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u800c\u6210\u7684\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u7f51\u683c\u7684\u56db\u4e2a\u8fb9\u5747\u88ab\u6c34\u5305\u56f4\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n11110\n11010\n11000\n00000\n\n<strong>\u8f93\u51fa:</strong>&nbsp;1\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n11000\n11000\n00100\n00011\n\n<strong>\u8f93\u51fa: </strong>3\n</pre>\n",
        "titleZh": "\u5c9b\u5c7f\u7684\u4e2a\u6570",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Snapchat",
            "Twitter",
            "Goldman Sachs",
            "Oracle",
            "Yelp",
            "eBay",
            "Walmart Labs",
            "Lyft",
            "Zenefits",
            "Expedia",
            "Paypal",
            "Cisco",
            "Pinterest",
            "Zillow",
            "Pocket Gems",
            "Two Sigma",
            "Nutanix",
            "Works Applications",
            "Mathworks",
            "Palantir Technologies",
            "Hulu",
            "Nvidia",
            "Palantir",
            "Visa",
            "Coursera",
            "Qualtrics",
            "Intel",
            "Affirm",
            "Houzz",
            "Citrix",
            "AppDynamics",
            "DoorDash"
        ]
    },
    {
        "leetId": "201",
        "link": "bitwise-and-of-numbers-range",
        "title": "Bitwise AND of Numbers Range",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "38.8%",
        "questionDescription": "<p>Given a range [m, n] where 0 &lt;= m &lt;= n &lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [5,7]\r\n<strong>Output:</strong> 4\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [0,1]\r\n<strong>Output:</strong> 0</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u8303\u56f4 [m, n]\uff0c\u5176\u4e2d 0 &lt;= m &lt;= n &lt;= 2147483647\uff0c\u8fd4\u56de\u6b64\u8303\u56f4\u5185\u6240\u6709\u6570\u5b57\u7684\u6309\u4f4d\u4e0e\uff08\u5305\u542b m, n \u4e24\u7aef\u70b9\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:&nbsp;</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [5,7]\n<strong>\u8f93\u51fa:</strong> 4</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [0,1]\n<strong>\u8f93\u51fa:</strong> 0</pre>\n",
        "titleZh": "\u6570\u5b57\u8303\u56f4\u6309\u4f4d\u4e0e",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ]
    },
    {
        "leetId": "202",
        "link": "happy-number",
        "title": "Happy Number",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "52.5%",
        "questionDescription": "<p>Write an algorithm to determine if a number is &quot;happy&quot;.</p>\r\n\r\n<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>\r\n\r\n<p><strong>Example:&nbsp;</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 19\r\n<strong>Output:</strong> true\r\n<strong>Explanation: \r\n</strong>1<sup>2</sup> + 9<sup>2</sup> = 82\r\n8<sup>2</sup> + 2<sup>2</sup> = 68\r\n6<sup>2</sup> + 8<sup>2</sup> = 100\r\n1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1\r\n</pre>",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u4e0d\u662f&ldquo;\u5feb\u4e50\u6570&rdquo;\u3002</p>\n\n<p>\u4e00\u4e2a&ldquo;\u5feb\u4e50\u6570&rdquo;\u5b9a\u4e49\u4e3a\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u6bcf\u4e00\u6b21\u5c06\u8be5\u6570\u66ff\u6362\u4e3a\u5b83\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\u7684\u5e73\u65b9\u548c\uff0c\u7136\u540e\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\u76f4\u5230\u8fd9\u4e2a\u6570\u53d8\u4e3a 1\uff0c\u4e5f\u53ef\u80fd\u662f\u65e0\u9650\u5faa\u73af\u4f46\u59cb\u7ec8\u53d8\u4e0d\u5230 1\u3002\u5982\u679c\u53ef\u4ee5\u53d8\u4e3a 1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u5c31\u662f\u5feb\u4e50\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b:&nbsp;</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 19\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca: \n</strong>1<sup>2</sup> + 9<sup>2</sup> = 82\n8<sup>2</sup> + 2<sup>2</sup> = 68\n6<sup>2</sup> + 8<sup>2</sup> = 100\n1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1\n</pre>\n",
        "titleZh": "\u5feb\u4e50\u6570",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Bloomberg",
            "Uber",
            "Apple",
            "Airbnb",
            "Twitter",
            "VMware",
            "Pinterest",
            "Nutanix",
            "JPMorgan",
            "Pure Storage"
        ]
    },
    {
        "leetId": "203",
        "link": "remove-linked-list-elements",
        "title": "Remove Linked List Elements",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "40.5%",
        "questionDescription": "<p>Remove all elements from a linked list of integers that have value <b><i>val</i></b>.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>  1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, <em><b>val</b></em> = 6\r\n<b>Output:</b> 1-&gt;2-&gt;3-&gt;4-&gt;5\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u5220\u9664\u94fe\u8868\u4e2d\u7b49\u4e8e\u7ed9\u5b9a\u503c&nbsp;<strong><em>val&nbsp;</em></strong>\u7684\u6240\u6709\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, <em><strong>val</strong></em> = 6\n<strong>\u8f93\u51fa:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5\n</pre>\n",
        "titleZh": "\u79fb\u9664\u94fe\u8868\u5143\u7d20",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Yahoo",
            "Paypal",
            "Pure Storage"
        ]
    },
    {
        "leetId": "204",
        "link": "count-primes",
        "title": "Count Primes",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "27.2%",
        "questionDescription": "<p>Count the number of prime numbers less than a non-negative number, <b><i>n</i></b>.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 10\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7edf\u8ba1\u6240\u6709\u5c0f\u4e8e\u975e\u8d1f\u6574\u6570&nbsp;<em>n&nbsp;</em>\u7684\u8d28\u6570\u7684\u6570\u91cf\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 10\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u5c0f\u4e8e 10 \u7684\u8d28\u6570\u4e00\u5171\u6709 4 \u4e2a, \u5b83\u4eec\u662f 2, 3, 5, 7 \u3002\n</pre>\n",
        "titleZh": "\u8ba1\u6570\u8d28\u6570",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Yahoo",
            "Goldman Sachs",
            "Tencent",
            "Nvidia"
        ]
    },
    {
        "leetId": "205",
        "link": "isomorphic-strings",
        "title": "Isomorphic Strings",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "43.5%",
        "questionDescription": "<p>Given two strings <b><i>s</i></b> and <b><i>t</i></b>, determine if they are isomorphic.</p>\r\n\r\n<p>Two strings are isomorphic if the characters in <b><i>s</i></b> can be replaced to get <b><i>t</i></b>.</p>\r\n\r\n<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <b><i>s</i></b> = <code>&quot;egg&quot;, </code><b><i>t = </i></b><code>&quot;add&quot;</code>\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <b><i>s</i></b> = <code>&quot;foo&quot;, </code><b><i>t = </i></b><code>&quot;bar&quot;</code>\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <b><i>s</i></b> = <code>&quot;paper&quot;, </code><b><i>t = </i></b><code>&quot;title&quot;</code>\r\n<strong>Output:</strong> true</pre>\r\n\r\n<p><b>Note:</b><br />\r\nYou may assume both <b><i>s&nbsp;</i></b>and <b><i>t&nbsp;</i></b>have the same length.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32&nbsp;<em><strong>s&nbsp;</strong></em>\u548c&nbsp;<strong><em>t</em></strong>\uff0c\u5224\u65ad\u5b83\u4eec\u662f\u5426\u662f\u540c\u6784\u7684\u3002</p>\n\n<p>\u5982\u679c&nbsp;<em><strong>s&nbsp;</strong></em>\u4e2d\u7684\u5b57\u7b26\u53ef\u4ee5\u88ab\u66ff\u6362\u5f97\u5230&nbsp;<strong><em>t&nbsp;</em></strong>\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u540c\u6784\u7684\u3002</p>\n\n<p>\u6240\u6709\u51fa\u73b0\u7684\u5b57\u7b26\u90fd\u5fc5\u987b\u7528\u53e6\u4e00\u4e2a\u5b57\u7b26\u66ff\u6362\uff0c\u540c\u65f6\u4fdd\u7559\u5b57\u7b26\u7684\u987a\u5e8f\u3002\u4e24\u4e2a\u5b57\u7b26\u4e0d\u80fd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u7b26\u4e0a\uff0c\u4f46\u5b57\u7b26\u53ef\u4ee5\u6620\u5c04\u81ea\u5df1\u672c\u8eab\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <strong><em>s</em></strong> = <code>&quot;egg&quot;, </code><strong><em>t = </em></strong><code>&quot;add&quot;</code>\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <strong><em>s</em></strong> = <code>&quot;foo&quot;, </code><strong><em>t = </em></strong><code>&quot;bar&quot;</code>\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <strong><em>s</em></strong> = <code>&quot;paper&quot;, </code><strong><em>t = </em></strong><code>&quot;title&quot;</code>\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<em><strong>s&nbsp;</strong></em>\u548c <strong><em>t </em></strong>\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002</p>\n",
        "titleZh": "\u540c\u6784\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "LinkedIn",
            "Yahoo",
            "Yelp",
            "Salesforce",
            "ServiceNow",
            "Wish"
        ]
    },
    {
        "leetId": "206",
        "link": "reverse-linked-list",
        "title": "Reverse Linked List",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "60.3%",
        "questionDescription": "<p>Reverse a singly linked list.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\r\n<strong>Output:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL\r\n</pre>\r\n\r\n<p><b>Follow up:</b></p>\r\n\r\n<p>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>\r\n",
        "questionDescriptionZh": "<p>\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n<strong>\u8f93\u51fa:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</pre>\n\n<p><strong>\u8fdb\u9636:</strong><br>\n\u4f60\u53ef\u4ee5\u8fed\u4ee3\u6216\u9012\u5f52\u5730\u53cd\u8f6c\u94fe\u8868\u3002\u4f60\u80fd\u5426\u7528\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\uff1f</p>\n",
        "titleZh": "\u53cd\u8f6c\u94fe\u8868",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Snapchat",
            "Twitter",
            "Goldman Sachs",
            "Oracle",
            "Yelp",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Zenefits",
            "Expedia",
            "Paypal",
            "Cisco",
            "Intuit",
            "Two Sigma",
            "Nutanix",
            "Mathworks",
            "Nvidia",
            "SAP",
            "Yandex",
            "Intel",
            "Pure Storage",
            "TripAdvisor",
            "Citrix",
            "Morgan Stanley",
            "Zynga",
            "Qualcomm",
            "EMC"
        ]
    },
    {
        "leetId": "207",
        "link": "course-schedule",
        "title": "Course Schedule",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "45.3%",
        "questionDescription": "<p>There are a total of <i>n</i> courses you have to take, labeled from <code>0</code> to <code>n-1</code>.</p>\r\n\r\n<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\r\n\r\n<p>Given the total number of courses and a list of prerequisite <b>pairs</b>, is it possible for you to finish all courses?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2, [[1,0]] \r\n<strong>Output: </strong>true\r\n<strong>Explanation:</strong>&nbsp;There are a total of 2 courses to take. \r\n&nbsp;            To take course 1 you should have finished course 0. So it is possible.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2, [[1,0],[0,1]]\r\n<strong>Output: </strong>false\r\n<strong>Explanation:</strong>&nbsp;There are a total of 2 courses to take. \r\n&nbsp;            To take course 1 you should have finished course 0, and to take course 0 you should\r\n&nbsp;            also have finished course 1. So it is impossible.\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The input prerequisites is a graph represented by <b>a list of edges</b>, not adjacency matrices. Read more about <a href=\"https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs\" target=\"_blank\">how a graph is represented</a>.</li>\r\n\t<li>You may assume that there are no duplicate edges in the input prerequisites.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u73b0\u5728\u4f60\u603b\u5171\u6709 <em>n</em> \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>n-1</code>\u3002</p>\n\n<p>\u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002&nbsp;\u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: <code>[0,1]</code></p>\n\n<p>\u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u5224\u65ad\u662f\u5426\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\u7684\u5b66\u4e60\uff1f</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 2, [[1,0]] \n<strong>\u8f93\u51fa: </strong>true\n<strong>\u89e3\u91ca:</strong>&nbsp;\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u6240\u4ee5\u8fd9\u662f\u53ef\u80fd\u7684\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 2, [[1,0],[0,1]]\n<strong>\u8f93\u51fa: </strong>false\n<strong>\u89e3\u91ca:</strong>&nbsp;\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u5b66\u4e60\u8bfe\u7a0b 1 \u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u200b\u8bfe\u7a0b 0\uff1b\u5e76\u4e14\u5b66\u4e60\u8bfe\u7a0b 0 \u4e4b\u524d\uff0c\u4f60\u8fd8\u5e94\u5148\u5b8c\u6210\u8bfe\u7a0b 1\u3002\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531<strong>\u8fb9\u7f18\u5217\u8868</strong>\u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1<a href=\"http://blog.csdn.net/woaidapaopao/article/details/51732947\" target=\"_blank\">\u56fe\u7684\u8868\u793a\u6cd5</a>\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002</li>\n</ol>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li>\u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002</li>\n\t<li><a href=\"https://www.coursera.org/specializations/algorithms\" target=\"_blank\">\u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f</a> - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002</li>\n\t<li>\n\t<p>\u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7&nbsp;<a href=\"https://baike.baidu.com/item/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/5224802?fr=aladdin&amp;fromid=2148012&amp;fromtitle=%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\" target=\"_blank\">BFS</a>&nbsp;\u5b8c\u6210\u3002</p>\n\t</li>\n</ol>\n",
        "titleZh": "\u8bfe\u7a0b\u8868",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            },
            {
                "tag": "Topological Sort",
                "link": "topological-sort",
                "tagZh": "\u62d3\u6251\u6392\u5e8f"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Apple",
            "LinkedIn",
            "Goldman Sachs",
            "Yelp",
            "eBay",
            "Salesforce",
            "Zenefits",
            "Paypal",
            "Intuit",
            "Nutanix"
        ]
    },
    {
        "leetId": "208",
        "link": "implement-trie-prefix-tree",
        "title": "Implement Trie (Prefix Tree)",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "57.1%",
        "questionDescription": "<p>Implement a trie with <code>insert</code>, <code>search</code>, and <code>startsWith</code> methods.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nTrie trie = new Trie();\r\n\r\ntrie.insert(&quot;apple&quot;);\r\ntrie.search(&quot;apple&quot;);   // returns true\r\ntrie.search(&quot;app&quot;);     // returns false\r\ntrie.startsWith(&quot;app&quot;); // returns true\r\ntrie.insert(&quot;app&quot;);   \r\ntrie.search(&quot;app&quot;);     // returns true\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>You may assume that all inputs are consist of lowercase letters <code>a-z</code>.</li>\r\n\t<li>All inputs are guaranteed to be non-empty strings.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5b9e\u73b0\u4e00\u4e2a Trie (\u524d\u7f00\u6811)\uff0c\u5305\u542b&nbsp;<code>insert</code>,&nbsp;<code>search</code>, \u548c&nbsp;<code>startsWith</code>&nbsp;\u8fd9\u4e09\u4e2a\u64cd\u4f5c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>Trie trie = new Trie();\n\ntrie.insert(&quot;apple&quot;);\ntrie.search(&quot;apple&quot;);   // \u8fd4\u56de true\ntrie.search(&quot;app&quot;);     // \u8fd4\u56de false\ntrie.startsWith(&quot;app&quot;); // \u8fd4\u56de true\ntrie.insert(&quot;app&quot;);   \ntrie.search(&quot;app&quot;);     // \u8fd4\u56de true</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u7684\u8f93\u5165\u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd&nbsp;<code>a-z</code>&nbsp;\u6784\u6210\u7684\u3002</li>\n\t<li>\u4fdd\u8bc1\u6240\u6709\u8f93\u5165\u5747\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\u3002</li>\n</ul>\n",
        "titleZh": "\u5b9e\u73b0 Trie (\u524d\u7f00\u6811)",
        "tags": [
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            },
            {
                "tag": "Trie",
                "link": "trie",
                "tagZh": "\u5b57\u5178\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "LinkedIn",
            "Baidu",
            "Snapchat",
            "Twitter",
            "Yelp",
            "Walmart Labs",
            "Lyft",
            "Zenefits",
            "Paypal"
        ]
    },
    {
        "leetId": "209",
        "link": "minimum-size-subarray-sum",
        "title": "Minimum Size Subarray Sum",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "37.7%",
        "questionDescription": "<p>Given an array of <strong>n</strong> positive integers and a positive integer <strong>s</strong>, find the minimal length of a <b>contiguous</b> subarray of which the sum &ge; <strong>s</strong>. If there isn&#39;t one, return 0 instead.</p>\r\n\r\n<p><strong>Example:&nbsp;</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>s = 7, nums = [2,3,1,2,4,3]</code>\r\n<strong>Output:</strong> 2\r\n<strong>Explanation: </strong>the subarray <code>[4,3]</code> has the minimal length under the problem constraint.</pre>\r\n\r\n<div class=\"spoilers\"><b>Follow up:</b></div>\r\n\r\n<div class=\"spoilers\">If you have figured out the <i>O</i>(<i>n</i>) solution, try coding another solution of which the time complexity is <i>O</i>(<i>n</i> log <i>n</i>).&nbsp;</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709&nbsp;<strong>n&nbsp;</strong>\u4e2a\u6b63\u6574\u6570\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<strong>s \uff0c</strong>\u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u548c<strong> &ge; s </strong>\u7684\u957f\u5ea6\u6700\u5c0f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4<strong>\u3002</strong>\u5982\u679c\u4e0d\u5b58\u5728\u7b26\u5408\u6761\u4ef6\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de 0\u3002</p>\n\n<p><strong>\u793a\u4f8b:&nbsp;</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>s = 7, nums = [2,3,1,2,4,3]</code>\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca: </strong>\u5b50\u6570\u7ec4&nbsp;<code>[4,3]</code>&nbsp;\u662f\u8be5\u6761\u4ef6\u4e0b\u7684\u957f\u5ea6\u6700\u5c0f\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u3002\n</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<p>\u5982\u679c\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86<em>O</em>(<em>n</em>) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5, \u8bf7\u5c1d\u8bd5&nbsp;<em>O</em>(<em>n</em> log <em>n</em>) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u89e3\u6cd5\u3002</p>\n",
        "titleZh": "\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Goldman Sachs"
        ]
    },
    {
        "leetId": "210",
        "link": "course-schedule-ii",
        "title": "Course Schedule II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "46.1%",
        "questionDescription": "<p>There are a total of <em>n</em> courses you have to take, labeled from <code>0</code> to <code>n-1</code>.</p>\r\n\r\n<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\r\n\r\n<p>Given the total number of courses and a list of prerequisite <strong>pairs</strong>, return the ordering of courses you should take to finish all courses.</p>\r\n\r\n<p>There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2, [[1,0]] \r\n<strong>Output: </strong><code>[0,1]</code>\r\n<strong>Explanation:</strong>&nbsp;There are a total of 2 courses to take. To take course 1 you should have finished   \r\n&nbsp;            course 0. So the correct course order is <code>[0,1] .</code></pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 4, [[1,0],[2,0],[3,1],[3,2]]\r\n<strong>Output: </strong><code>[0,1,2,3] or [0,2,1,3]</code>\r\n<strong>Explanation:</strong>&nbsp;There are a total of 4 courses to take. To take course 3 you should have finished both     \r\n             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. \r\n&nbsp;            So one correct course order is <code>[0,1,2,3]</code>. Another correct ordering is <code>[0,2,1,3] .</code></pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The input prerequisites is a graph represented by <strong>a list of edges</strong>, not adjacency matrices. Read more about <a href=\"https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs\" target=\"_blank\">how a graph is represented</a>.</li>\r\n\t<li>You may assume that there are no duplicate edges in the input prerequisites.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u73b0\u5728\u4f60\u603b\u5171\u6709 <em>n</em> \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>n-1</code>\u3002</p>\n\n<p>\u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002&nbsp;\u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0 \uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b&nbsp;1 \uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\u4ed6\u4eec: <code>[0,1]</code></p>\n\n<p>\u7ed9\u5b9a\u8bfe\u7a0b\u603b\u91cf\u4ee5\u53ca\u5b83\u4eec\u7684\u5148\u51b3\u6761\u4ef6\uff0c\u8fd4\u56de\u4f60\u4e3a\u4e86\u5b66\u5b8c\u6240\u6709\u8bfe\u7a0b\u6240\u5b89\u6392\u7684\u5b66\u4e60\u987a\u5e8f\u3002</p>\n\n<p>\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6b63\u786e\u7684\u987a\u5e8f\uff0c\u4f60\u53ea\u8981\u8fd4\u56de\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\u3002\u5982\u679c\u4e0d\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 2, [[1,0]] \n<strong>\u8f93\u51fa: </strong><code>[0,1]</code>\n<strong>\u89e3\u91ca:</strong>&nbsp;\u603b\u5171\u6709 2 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 1\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 0\u3002\u56e0\u6b64\uff0c\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u4e3a <code>[0,1] \u3002</code></pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 4, [[1,0],[2,0],[3,1],[3,2]]\n<strong>\u8f93\u51fa: </strong><code>[0,1,2,3] or [0,2,1,3]</code>\n<strong>\u89e3\u91ca:</strong>&nbsp;\u603b\u5171\u6709 4 \u95e8\u8bfe\u7a0b\u3002\u8981\u5b66\u4e60\u8bfe\u7a0b 3\uff0c\u4f60\u5e94\u8be5\u5148\u5b8c\u6210\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2\u3002\u5e76\u4e14\u8bfe\u7a0b 1 \u548c\u8bfe\u7a0b 2 \u90fd\u5e94\u8be5\u6392\u5728\u8bfe\u7a0b 0 \u4e4b\u540e\u3002\n&nbsp;    \u56e0\u6b64\uff0c\u4e00\u4e2a\u6b63\u786e\u7684\u8bfe\u7a0b\u987a\u5e8f\u662f&nbsp;<code>[0,1,2,3]</code> \u3002\u53e6\u4e00\u4e2a\u6b63\u786e\u7684\u6392\u5e8f\u662f&nbsp;<code>[0,2,1,3]</code> \u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u662f\u7531<strong>\u8fb9\u7f18\u5217\u8868</strong>\u8868\u793a\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u662f\u90bb\u63a5\u77e9\u9635\u3002\u8be6\u60c5\u8bf7\u53c2\u89c1<a href=\"http://blog.csdn.net/woaidapaopao/article/details/51732947\" target=\"_blank\">\u56fe\u7684\u8868\u793a\u6cd5</a>\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u5b9a\u8f93\u5165\u7684\u5148\u51b3\u6761\u4ef6\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u3002</li>\n</ol>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li>\u8fd9\u4e2a\u95ee\u9898\u76f8\u5f53\u4e8e\u67e5\u627e\u4e00\u4e2a\u5faa\u73af\u662f\u5426\u5b58\u5728\u4e8e\u6709\u5411\u56fe\u4e2d\u3002\u5982\u679c\u5b58\u5728\u5faa\u73af\uff0c\u5219\u4e0d\u5b58\u5728\u62d3\u6251\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u53ef\u80fd\u9009\u53d6\u6240\u6709\u8bfe\u7a0b\u8fdb\u884c\u5b66\u4e60\u3002</li>\n\t<li><a href=\"https://www.coursera.org/specializations/algorithms\" target=\"_blank\">\u901a\u8fc7 DFS \u8fdb\u884c\u62d3\u6251\u6392\u5e8f</a> - \u4e00\u4e2a\u5173\u4e8eCoursera\u7684\u7cbe\u5f69\u89c6\u9891\u6559\u7a0b\uff0821\u5206\u949f\uff09\uff0c\u4ecb\u7ecd\u62d3\u6251\u6392\u5e8f\u7684\u57fa\u672c\u6982\u5ff5\u3002</li>\n\t<li>\n\t<p>\u62d3\u6251\u6392\u5e8f\u4e5f\u53ef\u4ee5\u901a\u8fc7&nbsp;<a href=\"https://baike.baidu.com/item/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/5224802?fr=aladdin&amp;fromid=2148012&amp;fromtitle=%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\" target=\"_blank\">BFS</a>&nbsp;\u5b8c\u6210\u3002</p>\n\t</li>\n</ol>\n",
        "titleZh": "\u8bfe\u7a0b\u8868 II",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            },
            {
                "tag": "Topological Sort",
                "link": "topological-sort",
                "tagZh": "\u62d3\u6251\u6392\u5e8f"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "Salesforce",
            "Zenefits",
            "Pinterest",
            "Intuit",
            "Nutanix",
            "Square",
            "DoorDash",
            "Redfin"
        ]
    },
    {
        "leetId": "211",
        "link": "add-and-search-word-data-structure-design",
        "title": "Add and Search Word - Data structure design",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "40.8%",
        "questionDescription": "<p>Design a data structure that supports the following two operations:</p>\r\n\r\n<pre>\r\nvoid addWord(word)\r\nbool search(word)\r\n</pre>\r\n\r\n<p>search(word) can search a literal word or a regular expression string containing only letters <code>a-z</code> or <code>.</code>. A <code>.</code> means it can represent any one letter.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\naddWord(&quot;bad&quot;)\r\naddWord(&quot;dad&quot;)\r\naddWord(&quot;mad&quot;)\r\nsearch(&quot;pad&quot;) -&gt; false\r\nsearch(&quot;bad&quot;) -&gt; true\r\nsearch(&quot;.ad&quot;) -&gt; true\r\nsearch(&quot;b..&quot;) -&gt; true\r\n</pre>\r\n\r\n<p><b>Note:</b><br />\r\nYou may assume that all words are consist of lowercase letters <code>a-z</code>.</p>\r\n",
        "questionDescriptionZh": "<p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a</p>\n\n<pre>void addWord(word)\nbool search(word)\n</pre>\n\n<p>search(word)&nbsp;\u53ef\u4ee5\u641c\u7d22\u6587\u5b57\u6216\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5b57\u6bcd&nbsp;<code>.</code>&nbsp;\u6216&nbsp;<code>a-z</code>&nbsp;\u3002&nbsp;<code>.</code> \u53ef\u4ee5\u8868\u793a\u4efb\u4f55\u4e00\u4e2a\u5b57\u6bcd\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>addWord(&quot;bad&quot;)\naddWord(&quot;dad&quot;)\naddWord(&quot;mad&quot;)\nsearch(&quot;pad&quot;) -&gt; false\nsearch(&quot;bad&quot;) -&gt; true\nsearch(&quot;.ad&quot;) -&gt; true\nsearch(&quot;b..&quot;) -&gt; true\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u5355\u8bcd\u90fd\u662f\u7531\u5c0f\u5199\u5b57\u6bcd <code>a-z</code>&nbsp;\u7ec4\u6210\u7684\u3002</p>\n",
        "titleZh": "\u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd - \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1",
        "tags": [
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            },
            {
                "tag": "Trie",
                "link": "trie",
                "tagZh": "\u5b57\u5178\u6811"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Yahoo",
            "Square"
        ]
    },
    {
        "leetId": "212",
        "link": "word-search-ii",
        "title": "Word Search II",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "31.9%",
        "questionDescription": "<p>Given a 2D board and a list of words from the dictionary, find all words in the board.</p>\r\n\r\n<p>Each word must be constructed from letters of sequentially adjacent cell, where &quot;adjacent&quot; cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\n<b>words</b> = <code>[&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]</code> and <b>board </b>=\r\n[\r\n  [&#39;<span style=\"color:#d70\">o</span>&#39;,&#39;<span style=\"color:#d70\">a</span>&#39;,&#39;a&#39;,&#39;n&#39;],\r\n  [&#39;e&#39;,&#39;<span style=\"color:#d30\">t</span>&#39;,&#39;<span style=\"color:#d00\">a</span>&#39;,&#39;<span style=\"color:#d00\">e</span>&#39;],\r\n  [&#39;i&#39;,&#39;<span style=\"color:#d70\">h</span>&#39;,&#39;k&#39;,&#39;r&#39;],\r\n  [&#39;i&#39;,&#39;f&#39;,&#39;l&#39;,&#39;v&#39;]\r\n]\r\n\r\n<strong>Output:&nbsp;</strong><code>[&quot;eat&quot;,&quot;oath&quot;]</code>\r\n</pre>\r\n\r\n<p><b>Note:</b><br />\r\nYou may assume that all inputs are consist of lowercase letters <code>a-z</code>.</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c&nbsp;<strong>board&nbsp;</strong>\u548c\u4e00\u4e2a\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u5217\u8868 <strong>words</strong>\uff0c\u627e\u51fa\u6240\u6709\u540c\u65f6\u5728\u4e8c\u7ef4\u7f51\u683c\u548c\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u3002</p>\n\n<p>\u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d&ldquo;\u76f8\u90bb&rdquo;\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u5728\u4e00\u4e2a\u5355\u8bcd\u4e2d\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \n<strong>words</strong> = <code>[&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]</code> and <strong>board </strong>=\n[\n  [&#39;<strong>o</strong>&#39;,&#39;<strong>a</strong>&#39;,&#39;a&#39;,&#39;n&#39;],\n  [&#39;e&#39;,&#39;<strong>t</strong>&#39;,&#39;<strong>a</strong>&#39;,&#39;<strong>e</strong>&#39;],\n  [&#39;i&#39;,&#39;<strong>h</strong>&#39;,&#39;k&#39;,&#39;r&#39;],\n  [&#39;i&#39;,&#39;f&#39;,&#39;l&#39;,&#39;v&#39;]\n]\n\n<strong>\u8f93\u51fa:&nbsp;</strong><code>[&quot;eat&quot;,&quot;oath&quot;]</code></pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u7531\u5c0f\u5199\u5b57\u6bcd <code>a-z</code>&nbsp;\u7ec4\u6210\u3002</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ul>\n\t<li>\u4f60\u9700\u8981\u4f18\u5316\u56de\u6eaf\u7b97\u6cd5\u4ee5\u901a\u8fc7\u66f4\u5927\u6570\u636e\u91cf\u7684\u6d4b\u8bd5\u3002\u4f60\u80fd\u5426\u65e9\u70b9\u505c\u6b62\u56de\u6eaf\uff1f</li>\n\t<li>\u5982\u679c\u5f53\u524d\u5355\u8bcd\u4e0d\u5b58\u5728\u4e8e\u6240\u6709\u5355\u8bcd\u7684\u524d\u7f00\u4e2d\uff0c\u5219\u53ef\u4ee5\u7acb\u5373\u505c\u6b62\u56de\u6eaf\u3002\u4ec0\u4e48\u6837\u7684\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u6709\u6548\u5730\u6267\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff1f\u6563\u5217\u8868\u662f\u5426\u53ef\u884c\uff1f\u4e3a\u4ec0\u4e48\uff1f \u524d\u7f00\u6811\u5982\u4f55\uff1f\u5982\u679c\u4f60\u60f3\u5b66\u4e60\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u524d\u7f00\u6811\uff0c\u8bf7\u5148\u67e5\u770b\u8fd9\u4e2a\u95ee\u9898\uff1a <a href=\"/problems/implement-trie-prefix-tree/description/\">\u5b9e\u73b0Trie\uff08\u524d\u7f00\u6811\uff09</a>\u3002</li>\n</ul>\n",
        "titleZh": "\u5355\u8bcd\u641c\u7d22 II",
        "tags": [
            {
                "tag": "Trie",
                "link": "trie",
                "tagZh": "\u5b57\u5178\u6811"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Apple",
            "Yahoo",
            "Airbnb",
            "Snapchat",
            "Oracle",
            "Lyft",
            "Pocket Gems",
            "Houzz"
        ]
    },
    {
        "leetId": "213",
        "link": "house-robber-ii",
        "title": "House Robber II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "32.5%",
        "questionDescription": "<p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle.</strong> That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and&nbsp;<b>it will automatically contact the police if two adjacent houses were broken into on the same night</b>.</p>\r\n\r\n<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,3,2]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> You cannot rob house 1 (money = 2) and then rob house 3 (money = 2),\r\n&nbsp;            because they are adjacent houses.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3,1]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> Rob house 1 (money = 1) and then rob house 3 (money = 3).\r\n&nbsp;            Total amount you can rob = 1 + 3 = 4.</pre>\r\n",
        "questionDescriptionZh": "<p>\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\uff0c\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\u3002\u8fd9\u4e2a\u5730\u65b9\u6240\u6709\u7684\u623f\u5c4b\u90fd<strong>\u56f4\u6210\u4e00\u5708\uff0c</strong>\u8fd9\u610f\u5473\u7740\u7b2c\u4e00\u4e2a\u623f\u5c4b\u548c\u6700\u540e\u4e00\u4e2a\u623f\u5c4b\u662f\u7d27\u6328\u7740\u7684\u3002\u540c\u65f6\uff0c\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c<strong>\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66</strong>\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60<strong>\u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b\uff0c</strong>\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [2,3,2]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u4f60\u4e0d\u80fd\u5148\u5077\u7a83 1 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 2\uff09\uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 2\uff09, \u56e0\u4e3a\u4ed6\u4eec\u662f\u76f8\u90bb\u7684\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3,1]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u4f60\u53ef\u4ee5\u5148\u5077\u7a83 1 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 1\uff09\uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b\uff08\u91d1\u989d = 3\uff09\u3002\n&nbsp;    \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002</pre>\n",
        "titleZh": "\u6253\u5bb6\u52ab\u820d II",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Microsoft",
            "Adobe",
            "Salesforce"
        ]
    },
    {
        "leetId": "214",
        "link": "shortest-palindrome",
        "title": "Shortest Palindrome",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "31.2%",
        "questionDescription": "<p>Given a string <em><b>s</b></em>, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>&quot;aacecaaa&quot;</code>\r\n<strong>Output:</strong> <code>&quot;aaacecaaa&quot;</code>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>&quot;abcd&quot;</code>\r\n<strong>Output:</strong> <code>&quot;dcbabcd&quot;</code></pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 <em><strong>s</strong></em>\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u5b57\u7b26\u4e32\u524d\u9762\u6dfb\u52a0\u5b57\u7b26\u5c06\u5176\u8f6c\u6362\u4e3a\u56de\u6587\u4e32\u3002\u627e\u5230\u5e76\u8fd4\u56de\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u8f6c\u6362\u7684\u6700\u77ed\u56de\u6587\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code>&quot;aacecaaa&quot;</code>\n<strong>\u8f93\u51fa:</strong> <code>&quot;aaacecaaa&quot;</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code>&quot;abcd&quot;</code>\n<strong>\u8f93\u51fa:</strong> <code>&quot;dcbabcd&quot;</code></pre>\n",
        "titleZh": "\u6700\u77ed\u56de\u6587\u4e32",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Alibaba",
            "Walmart Labs",
            "Pocket Gems",
            "Two Sigma"
        ]
    },
    {
        "leetId": "215",
        "link": "kth-largest-element-in-an-array",
        "title": "Kth Largest Element in an Array",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "56.5%",
        "questionDescription": "<p>Find the <strong>k</strong>th largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>[3,2,1,5,6,4] </code>and k = 2\r\n<strong>Output:</strong> 5\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>[3,2,3,1,2,4,5,5,6] </code>and k = 4\r\n<strong>Output:</strong> 4</pre>\r\n\r\n<p><strong>Note: </strong><br />\r\nYou may assume k is always valid, 1 &le; k &le; array&#39;s length.</p>\r\n",
        "questionDescriptionZh": "<p>\u5728\u672a\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u7b2c <strong>k</strong> \u4e2a\u6700\u5927\u7684\u5143\u7d20\u3002\u8bf7\u6ce8\u610f\uff0c\u4f60\u9700\u8981\u627e\u7684\u662f\u6570\u7ec4\u6392\u5e8f\u540e\u7684\u7b2c k \u4e2a\u6700\u5927\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[3,2,1,5,6,4] \u548c</code> k = 2\n<strong>\u8f93\u51fa:</strong> 5\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[3,2,3,1,2,4,5,5,6] \u548c</code> k = 4\n<strong>\u8f93\u51fa:</strong> 4</pre>\n\n<p><strong>\u8bf4\u660e: </strong></p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c\u4e14 1 &le; k &le; \u6570\u7ec4\u7684\u957f\u5ea6\u3002</p>\n",
        "titleZh": "\u6570\u7ec4\u4e2d\u7684\u7b2cK\u4e2a\u6700\u5927\u5143\u7d20",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "LinkedIn",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Snapchat",
            "Twitter",
            "Goldman Sachs",
            "Yelp",
            "eBay",
            "Tencent",
            "VMware",
            "Pocket Gems",
            "Nvidia",
            "IXL"
        ]
    },
    {
        "leetId": "216",
        "link": "combination-sum-iii",
        "title": "Combination Sum III",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "65.5%",
        "questionDescription": "<div>\r\n<p>Find all possible combinations of <i><b>k</b></i> numbers that add up to a number <i><b>n</b></i>, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All numbers will be positive integers.</li>\r\n\t<li>The solution set must not contain duplicate combinations.</li>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <i><b>k</b></i> = 3, <i><b>n</b></i> = 7\r\n<strong>Output:</strong> [[1,2,4]]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <i><b>k</b></i> = 3, <i><b>n</b></i> = 9\r\n<strong>Output:</strong> [[1,2,6], [1,3,5], [2,3,4]]\r\n</pre>\r\n</div>",
        "questionDescriptionZh": "<p>\u627e\u51fa\u6240\u6709\u76f8\u52a0\u4e4b\u548c\u4e3a&nbsp;<em><strong>n</strong> </em>\u7684&nbsp;<strong><em>k&nbsp;</em></strong>\u4e2a\u6570\u7684\u7ec4\u5408<strong><em>\u3002</em></strong>\u7ec4\u5408\u4e2d\u53ea\u5141\u8bb8\u542b\u6709 1 -&nbsp;9 \u7684\u6b63\u6574\u6570\uff0c\u5e76\u4e14\u6bcf\u79cd\u7ec4\u5408\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u6570\u5b57\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u6570\u5b57\u90fd\u662f\u6b63\u6574\u6570\u3002</li>\n\t<li>\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002&nbsp;</li>\n</ul>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <em><strong>k</strong></em> = 3, <em><strong>n</strong></em> = 7\n<strong>\u8f93\u51fa:</strong> [[1,2,4]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <em><strong>k</strong></em> = 3, <em><strong>n</strong></em> = 9\n<strong>\u8f93\u51fa:</strong> [[1,2,6], [1,3,5], [2,3,4]]\n</pre>\n",
        "titleZh": "\u7ec4\u5408\u603b\u548c III",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Microsoft"
        ]
    },
    {
        "leetId": "217",
        "link": "contains-duplicate",
        "title": "Contains Duplicate",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "47.8%",
        "questionDescription": "<p>Given an array of integers, find if the array contains any duplicates.</p>\r\n\r\n<p>Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3,1]\r\n<strong>Output:</strong> true</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,2,3,4]\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,1,1,3,3,4,3,2,4,2]\r\n<strong>Output:</strong> true</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u91cd\u590d\u5143\u7d20\u3002</p>\n\n<p>\u5982\u679c\u4efb\u4f55\u503c\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u81f3\u5c11\u4e24\u6b21\uff0c\u51fd\u6570\u8fd4\u56de true\u3002\u5982\u679c\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e0d\u76f8\u540c\uff0c\u5219\u8fd4\u56de false\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3,1]\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,2,3,4]\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,1,1,3,3,4,3,2,4,2]\n<strong>\u8f93\u51fa:</strong> true</pre>\n",
        "titleZh": "\u5b58\u5728\u91cd\u590d\u5143\u7d20",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Yahoo",
            "Airbnb",
            "Yelp",
            "Palantir Technologies",
            "Palantir"
        ]
    },
    {
        "leetId": "218",
        "link": "the-skyline-problem",
        "title": "The Skyline Problem",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "37.5%",
        "questionDescription": "<p>A city&#39;s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Now suppose you are <b>given the locations and height of all the buildings</b> as shown on a cityscape photo (Figure A), write a program to <b>output the skyline</b> formed by these buildings collectively (Figure B).</p>\r\n<a href=\"/static/images/problemset/skyline1.jpg\" target=\"_blank\"><img alt=\"Buildings\" src=\"https://assets.leetcode.com/uploads/2018/10/22/skyline1.png\" style=\"max-width: 45%; border-width: 0px; border-style: solid;\" /> </a> <a href=\"/static/images/problemset/skyline2.jpg\" target=\"_blank\"> <img alt=\"Skyline Contour\" src=\"https://assets.leetcode.com/uploads/2018/10/22/skyline2.png\" style=\"max-width: 45%; border-width: 0px; border-style: solid;\" /> </a>\r\n\r\n<p>The geometric information of each building is represented by a triplet of integers <code>[Li, Ri, Hi]</code>, where <code>Li</code> and <code>Ri</code> are the x coordinates of the left and right edge of the ith building, respectively, and <code>Hi</code> is its height. It is guaranteed that <code>0 &le; Li, Ri &le; INT_MAX</code>, <code>0 &lt; Hi &le; INT_MAX</code>, and <code>Ri - Li &gt; 0</code>. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.</p>\r\n\r\n<p>For instance, the dimensions of all buildings in Figure A are recorded as: <code>[ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] </code>.</p>\r\n\r\n<p>The output is a list of &quot;<b>key points</b>&quot; (red dots in Figure B) in the format of <code>[ [x1,y1], [x2, y2], [x3, y3], ... ]</code> that uniquely defines a skyline. <b>A key point is the left endpoint of a horizontal line segment</b>. Note that the last key point, where the rightmost building ends, is merely used to mark the termination of the skyline, and always has zero height. Also, the ground in between any two adjacent buildings should be considered part of the skyline contour.</p>\r\n\r\n<p>For instance, the skyline in Figure B should be represented as:<code>[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ]</code>.</p>\r\n\r\n<p><b>Notes:</b></p>\r\n\r\n<ul>\r\n\t<li>The number of buildings in any input list is guaranteed to be in the range <code>[0, 10000]</code>.</li>\r\n\t<li>The input list is already sorted in ascending order by the left x position <code>Li</code>.</li>\r\n\t<li>The output list must be sorted by the x position.</li>\r\n\t<li>There must be no consecutive horizontal lines of equal height in the output skyline. For instance, <code>[...[2 3], [4 5], [7 5], [11 5], [12 7]...]</code> is not acceptable; the three lines of height 5 should be merged into one in the final output as such: <code>[...[2 3], [4 5], [12 7], ...]</code></li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u57ce\u5e02\u7684\u5929\u9645\u7ebf\u662f\u4ece\u8fdc\u5904\u89c2\u770b\u8be5\u57ce\u5e02\u4e2d\u6240\u6709\u5efa\u7b51\u7269\u5f62\u6210\u7684\u8f6e\u5ed3\u7684\u5916\u90e8\u8f6e\u5ed3\u3002\u73b0\u5728\uff0c\u5047\u8bbe\u60a8\u83b7\u5f97\u4e86\u57ce\u5e02\u98ce\u5149\u7167\u7247\uff08\u56feA\uff09\u4e0a<strong>\u663e\u793a\u7684\u6240\u6709\u5efa\u7b51\u7269\u7684\u4f4d\u7f6e\u548c\u9ad8\u5ea6</strong>\uff0c\u8bf7\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u4ee5\u8f93\u51fa\u7531\u8fd9\u4e9b\u5efa\u7b51\u7269<strong>\u5f62\u6210\u7684\u5929\u9645\u7ebf</strong>\uff08\u56feB\uff09\u3002</p>\n\n<p><a href=\"/static/images/problemset/skyline1.jpg\" target=\"_blank\"><img alt=\"Buildings\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/skyline1.png\" style=\"\"> </a> <a href=\"/static/images/problemset/skyline2.jpg\" target=\"_blank\"> <img alt=\"Skyline Contour\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/skyline2.png\" style=\"\"> </a></p>\n\n<p>\u6bcf\u4e2a\u5efa\u7b51\u7269\u7684\u51e0\u4f55\u4fe1\u606f\u7528\u4e09\u5143\u7ec4&nbsp;<code>[Li\uff0cRi\uff0cHi]</code> \u8868\u793a\uff0c\u5176\u4e2d <code>Li</code> \u548c <code>Ri</code> \u5206\u522b\u662f\u7b2c i \u5ea7\u5efa\u7b51\u7269\u5de6\u53f3\u8fb9\u7f18\u7684 x \u5750\u6807\uff0c<code>Hi</code> \u662f\u5176\u9ad8\u5ea6\u3002\u53ef\u4ee5\u4fdd\u8bc1&nbsp;<code>0 &le; Li, Ri &le; INT_MAX</code>,&nbsp;<code>0 &lt; Hi &le; INT_MAX</code> \u548c <code>Ri - Li &gt; 0</code>\u3002\u60a8\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u5efa\u7b51\u7269\u90fd\u662f\u5728\u7edd\u5bf9\u5e73\u5766\u4e14\u9ad8\u5ea6\u4e3a 0 \u7684\u8868\u9762\u4e0a\u7684\u5b8c\u7f8e\u77e9\u5f62\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u56feA\u4e2d\u6240\u6709\u5efa\u7b51\u7269\u7684\u5c3a\u5bf8\u8bb0\u5f55\u4e3a\uff1a<code>[ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] </code>\u3002</p>\n\n<p>\u8f93\u51fa\u662f\u4ee5&nbsp;<code>[ [x1,y1], [x2, y2], [x3, y3], ... ]</code> \u683c\u5f0f\u7684&ldquo;<strong>\u5173\u952e\u70b9</strong>&rdquo;\uff08\u56feB\u4e2d\u7684\u7ea2\u70b9\uff09\u7684\u5217\u8868\uff0c\u5b83\u4eec\u552f\u4e00\u5730\u5b9a\u4e49\u4e86\u5929\u9645\u7ebf\u3002<strong>\u5173\u952e\u70b9\u662f\u6c34\u5e73\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9</strong>\u3002\u8bf7\u6ce8\u610f\uff0c\u6700\u53f3\u4fa7\u5efa\u7b51\u7269\u7684\u6700\u540e\u4e00\u4e2a\u5173\u952e\u70b9\u4ec5\u7528\u4e8e\u6807\u8bb0\u5929\u9645\u7ebf\u7684\u7ec8\u70b9\uff0c\u5e76\u59cb\u7ec8\u4e3a\u96f6\u9ad8\u5ea6\u3002\u6b64\u5916\uff0c\u4efb\u4f55\u4e24\u4e2a\u76f8\u90bb\u5efa\u7b51\u7269\u4e4b\u95f4\u7684\u5730\u9762\u90fd\u5e94\u88ab\u89c6\u4e3a\u5929\u9645\u7ebf\u8f6e\u5ed3\u7684\u4e00\u90e8\u5206\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u56feB\u4e2d\u7684\u5929\u9645\u7ebf\u5e94\u8be5\u8868\u793a\u4e3a\uff1a<code>[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ]</code>\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u4efb\u4f55\u8f93\u5165\u5217\u8868\u4e2d\u7684\u5efa\u7b51\u7269\u6570\u91cf\u4fdd\u8bc1\u5728 <code>[0, 10000]</code>&nbsp;\u8303\u56f4\u5185\u3002</li>\n\t<li>\u8f93\u5165\u5217\u8868\u5df2\u7ecf\u6309\u5de6&nbsp;<code>x</code> \u5750\u6807&nbsp;<code>Li</code>&nbsp; \u8fdb\u884c\u5347\u5e8f\u6392\u5217\u3002</li>\n\t<li>\u8f93\u51fa\u5217\u8868\u5fc5\u987b\u6309 x \u4f4d\u6392\u5e8f\u3002</li>\n\t<li>\u8f93\u51fa\u5929\u9645\u7ebf\u4e2d\u4e0d\u5f97\u6709\u8fde\u7eed\u7684\u76f8\u540c\u9ad8\u5ea6\u7684\u6c34\u5e73\u7ebf\u3002\u4f8b\u5982 <code>[...[2 3], [4 5], [7 5], [11 5], [12 7]...]</code> \u662f\u4e0d\u6b63\u786e\u7684\u7b54\u6848\uff1b\u4e09\u6761\u9ad8\u5ea6\u4e3a 5 \u7684\u7ebf\u5e94\u8be5\u5728\u6700\u7ec8\u8f93\u51fa\u4e2d\u5408\u5e76\u4e3a\u4e00\u4e2a\uff1a<code>[...[2 3], [4 5], [12 7], ...]</code></li>\n</ul>\n",
        "titleZh": "\u5929\u9645\u7ebf\u95ee\u9898",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Binary Indexed Tree",
                "link": "binary-indexed-tree",
                "tagZh": "\u6811\u72b6\u6570\u7ec4"
            },
            {
                "tag": "Segment Tree",
                "link": "segment-tree",
                "tagZh": "\u7ebf\u6bb5\u6811"
            },
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Apple",
            "Twitter",
            "Goldman Sachs",
            "Yelp",
            "Palantir Technologies",
            "Palantir",
            "Pure Storage",
            "Databricks"
        ]
    },
    {
        "leetId": "219",
        "link": "contains-duplicate-ii",
        "title": "Contains Duplicate II",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "33.9%",
        "questionDescription": "<p>Given an array of integers and an integer <i>k</i>, find out whether there are two distinct indices <i>i</i> and <i>j</i> in the array such that <b>nums[i] = nums[j]</b> and the <b>absolute</b> difference between <i>i</i> and <i>j</i> is at most <i>k</i>.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = <span id=\"example-input-1-1\">[1,2,3,1]</span>, k = <span id=\"example-input-1-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = <span id=\"example-input-2-1\">[1,0,1,1]</span>, k = <span id=\"example-input-2-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = <span id=\"example-input-3-1\">[1,2,3,1,2,3]</span>, k = <span id=\"example-input-3-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">false</span>\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570&nbsp;<em>k</em>\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7d22\u5f15<em>&nbsp;i</em>&nbsp;\u548c<em>&nbsp;j</em>\uff0c\u4f7f\u5f97&nbsp;<strong>nums [i] = nums [j]</strong>\uff0c\u5e76\u4e14 <em>i</em> \u548c <em>j</em>&nbsp;\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a <em>k</em>\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [1,2,3,1], k<em> </em>= 3\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums = [1,0,1,1], k<em> </em>=<em> </em>1\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums = [1,2,3,1,2,3], k<em> </em>=<em> </em>2\n<strong>\u8f93\u51fa:</strong> false</pre>\n",
        "titleZh": "\u5b58\u5728\u91cd\u590d\u5143\u7d20 II",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Adobe",
            "Airbnb",
            "Palantir Technologies",
            "Palantir"
        ]
    },
    {
        "leetId": "220",
        "link": "contains-duplicate-iii",
        "title": "Contains Duplicate III",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "23.6%",
        "questionDescription": "<p>Given an array of integers, find out whether there are two distinct indices <i>i</i> and <i>j</i> in the array such that the <b>absolute</b> difference between <b>nums[i]</b> and <b>nums[j]</b> is at most <i>t</i> and the <b>absolute</b> difference between <i>i</i> and <i>j</i> is at most <i>k</i>.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = <span id=\"example-input-1-1\">[1,2,3,1]</span>, k = <span id=\"example-input-1-2\">3</span>, t = <span id=\"example-input-1-3\">0</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = <span id=\"example-input-2-1\">[1,0,1,1]</span>, k = <span id=\"example-input-2-2\">1</span>, t = <span id=\"example-input-2-3\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = <span id=\"example-input-3-1\">[1,5,9,1,5,9]</span>, k = <span id=\"example-input-3-2\">2</span>, t = <span id=\"example-input-3-3\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">false</span>\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u7d22\u5f15 <em>i</em> \u548c <em>j</em>\uff0c\u4f7f\u5f97&nbsp;<strong>nums [i]</strong> \u548c&nbsp;<strong>nums [j]</strong>&nbsp;\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a <em>t</em>\uff0c\u5e76\u4e14 <em>i</em> \u548c <em>j</em> \u4e4b\u95f4\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u6700\u5927\u4e3a <em>\u0137</em>\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = [1,2,3,1], k<em> </em>= 3, t = 0\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums = [1,0,1,1], k<em> </em>=<em> </em>1, t = 2\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums = [1,5,9,1,5,9], k = 2, t = 3\n<strong>\u8f93\u51fa:</strong> false</pre>\n",
        "titleZh": "\u5b58\u5728\u91cd\u590d\u5143\u7d20 III",
        "tags": [
            {
                "tag": "Binary Search Tree",
                "link": "binary-search-tree",
                "tagZh": "\u4e8c\u53c9\u641c\u7d22\u6811"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Airbnb",
            "Palantir Technologies",
            "Palantir"
        ]
    },
    {
        "leetId": "221",
        "link": "maximal-square",
        "title": "Maximal Square",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "36.7%",
        "questionDescription": "<p>Given a 2D binary matrix filled with 0&#39;s and 1&#39;s, find the largest square containing only 1&#39;s and return its area.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong>\r\n1 0 1 0 0\r\n1 0 <font color=\"red\">1</font> <font color=\"red\">1</font> 1\r\n1 1 <font color=\"red\">1</font> <font color=\"red\">1</font> 1\r\n1 0 0 1 0\r\n\r\n<strong>Output: </strong>4\r\n</pre>",
        "questionDescriptionZh": "<p>\u5728\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u4e8c\u7ef4\u77e9\u9635\u5185\uff0c\u627e\u5230\u53ea\u5305\u542b 1 \u7684\u6700\u5927\u6b63\u65b9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165: \n</strong>\n1 0 1 0 0\n1 0 <strong>1 1</strong> 1\n1 1 <strong>1 1 </strong>1\n1 0 0 1 0\n\n<strong>\u8f93\u51fa: </strong>4</pre>\n",
        "titleZh": "\u6700\u5927\u6b63\u65b9\u5f62",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Apple",
            "Alibaba",
            "Airbnb",
            "Yelp",
            "eBay",
            "Zillow"
        ]
    },
    {
        "leetId": "222",
        "link": "count-complete-tree-nodes",
        "title": "Count Complete Tree Nodes",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "45.8%",
        "questionDescription": "<p>Given a <b>complete</b> binary tree, count the number of nodes.</p>\r\n\r\n<p><b>Note: </b></p>\r\n\r\n<p><b><u>Definition of a complete binary tree from <a href=\"http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees\" target=\"_blank\">Wikipedia</a>:</u></b><br />\r\nIn a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2<sup>h</sup> nodes inclusive at the last level h.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\n    1\r\n   / \\\r\n  2   3\r\n / \\  /\r\n4  5 6\r\n\r\n<strong>Output:</strong> 6</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e00\u4e2a<strong>\u5b8c\u5168\u4e8c\u53c9\u6811</strong>\uff0c\u6c42\u51fa\u8be5\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<p><a href=\"https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin\">\u5b8c\u5168\u4e8c\u53c9\u6811</a>\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\u5728\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0c\u9664\u4e86\u6700\u5e95\u5c42\u8282\u70b9\u53ef\u80fd\u6ca1\u586b\u6ee1\u5916\uff0c\u5176\u4f59\u6bcf\u5c42\u8282\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u503c\uff0c\u5e76\u4e14\u6700\u4e0b\u9762\u4e00\u5c42\u7684\u8282\u70b9\u90fd\u96c6\u4e2d\u5728\u8be5\u5c42\u6700\u5de6\u8fb9\u7684\u82e5\u5e72\u4f4d\u7f6e\u3002\u82e5\u6700\u5e95\u5c42\u4e3a\u7b2c h \u5c42\uff0c\u5219\u8be5\u5c42\u5305\u542b 1~&nbsp;2<sup>h</sup>&nbsp;\u4e2a\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \n    1\n   / \\\n  2   3\n / \\  /\n4  5 6\n\n<strong>\u8f93\u51fa:</strong> 6</pre>\n",
        "titleZh": "\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Yahoo"
        ]
    },
    {
        "leetId": "223",
        "link": "rectangle-area",
        "title": "Rectangle Area",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "40.8%",
        "questionDescription": "<p>Find the total area covered by two <strong>rectilinear</strong> rectangles in a <strong>2D</strong> plane.</p>\r\n\r\n<p>Each rectangle is defined by its bottom left corner and top right corner as shown in the figure.</p>\r\n\r\n<p><img alt=\"Rectangle Area\" src=\"https://assets.leetcode.com/uploads/2018/10/22/rectangle_area.png\" style=\"width: 542px; height: 304px;\" /></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">-3</span>, B = <span id=\"example-input-1-2\">0</span>, C = <span id=\"example-input-1-3\">3</span>, D = <span id=\"example-input-1-4\">4</span>, E = <span id=\"example-input-1-5\">0</span>, F = <span id=\"example-input-1-6\">-1</span>, G = <span id=\"example-input-1-7\">9</span>, H = <span id=\"example-input-1-8\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">45</span></pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Assume that the total area is never beyond the maximum possible value of <strong>int</strong>.</p>\r\n",
        "questionDescriptionZh": "<p>\u5728<strong>\u4e8c\u7ef4</strong>\u5e73\u9762\u4e0a\u8ba1\u7b97\u51fa\u4e24\u4e2a<strong>\u7531\u76f4\u7ebf\u6784\u6210\u7684</strong>\u77e9\u5f62\u91cd\u53e0\u540e\u5f62\u6210\u7684\u603b\u9762\u79ef\u3002</p>\n\n<p>\u6bcf\u4e2a\u77e9\u5f62\u7531\u5176\u5de6\u4e0b\u9876\u70b9\u548c\u53f3\u4e0a\u9876\u70b9\u5750\u6807\u8868\u793a\uff0c\u5982\u56fe\u6240\u793a\u3002</p>\n\n<p><img alt=\"Rectangle Area\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_area.png\"></p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> -3, 0, 3, 4, 0, -1, 9, 2\n<strong>\u8f93\u51fa:</strong> 45</pre>\n\n<p><strong>\u8bf4\u660e:</strong> \u5047\u8bbe\u77e9\u5f62\u9762\u79ef\u4e0d\u4f1a\u8d85\u51fa&nbsp;<strong>int&nbsp;</strong>\u7684\u8303\u56f4\u3002</p>\n",
        "titleZh": "\u77e9\u5f62\u9762\u79ef",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft"
        ]
    },
    {
        "leetId": "224",
        "link": "basic-calculator",
        "title": "Basic Calculator",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "31.4%",
        "questionDescription": "<p>Implement a basic calculator to evaluate a simple expression string.</p>\r\n\r\n<p>The expression string may contain open <code>(</code> and closing parentheses <code>)</code>, the plus <code>+</code> or minus sign <code>-</code>, <b>non-negative</b> integers and empty spaces <code> </code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;1 + 1&quot;\r\n<strong>Output:</strong> 2\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot; 2-1 + 2 &quot;\r\n<strong>Output:</strong> 3</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;(1+(4+5+2)-3)+(6+8)&quot;\r\n<strong>Output:</strong> 23</pre>\r\n<b>Note:</b>\r\n\r\n<ul>\r\n\t<li>You may assume that the given expression is always valid.</li>\r\n\t<li><b>Do not</b> use the <code>eval</code> built-in library function.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u8ba1\u7b97\u5668\u6765\u8ba1\u7b97\u4e00\u4e2a\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u7684\u503c\u3002</p>\n\n<p>\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5305\u542b\u5de6\u62ec\u53f7&nbsp;<code>(</code>&nbsp;\uff0c\u53f3\u62ec\u53f7&nbsp;<code>)</code>\uff0c\u52a0\u53f7&nbsp;<code>+</code>&nbsp;\uff0c\u51cf\u53f7&nbsp;<code>-</code>\uff0c<strong>\u975e\u8d1f</strong>\u6574\u6570\u548c\u7a7a\u683c&nbsp;<code>&nbsp;</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;1 + 1&quot;\n<strong>\u8f93\u51fa:</strong> 2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot; 2-1 + 2 &quot;\n<strong>\u8f93\u51fa:</strong> 3</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;(1+(4+5+2)-3)+(6+8)&quot;\n<strong>\u8f93\u51fa:</strong> 23</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u90fd\u662f\u6709\u6548\u7684\u3002</li>\n\t<li>\u8bf7<strong>\u4e0d\u8981</strong>\u4f7f\u7528\u5185\u7f6e\u7684\u5e93\u51fd\u6570 <code>eval</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u57fa\u672c\u8ba1\u7b97\u5668",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Adobe",
            "Airbnb",
            "Paypal",
            "Pinterest",
            "Pocket Gems",
            "Intuit",
            "Indeed",
            "Roblox",
            "Jump Trading"
        ]
    },
    {
        "leetId": "225",
        "link": "implement-stack-using-queues",
        "title": "Implement Stack using Queues",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "57.8%",
        "questionDescription": "<p>Implement the following operations of a stack using queues.</p>\r\n\r\n<ul>\r\n\t<li>push(x) -- Push element x onto stack.</li>\r\n\t<li>pop() -- Removes the element on top of the stack.</li>\r\n\t<li>top() -- Get the top element.</li>\r\n\t<li>empty() -- Return whether the stack is empty.</li>\r\n</ul>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nMyStack stack = new MyStack();\r\n\r\nstack.push(1);\r\nstack.push(2);  \r\nstack.top();   // returns 2\r\nstack.pop();   // returns 2\r\nstack.empty(); // returns false</pre>\r\n\r\n<p><b>Notes:</b></p>\r\n\r\n<ul>\r\n\t<li>You must use <i>only</i> standard operations of a queue -- which means only <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\r\n\t<li>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.</li>\r\n\t<li>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u4f7f\u7528\u961f\u5217\u5b9e\u73b0\u6808\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li>push(x) -- \u5143\u7d20 x \u5165\u6808</li>\n\t<li>pop() -- \u79fb\u9664\u6808\u9876\u5143\u7d20</li>\n\t<li>top() -- \u83b7\u53d6\u6808\u9876\u5143\u7d20</li>\n\t<li>empty() -- \u8fd4\u56de\u6808\u662f\u5426\u4e3a\u7a7a</li>\n</ul>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ea\u80fd\u4f7f\u7528\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c-- \u4e5f\u5c31\u662f&nbsp;<code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, \u548c&nbsp;<code>is empty</code>&nbsp;\u8fd9\u4e9b\u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002</li>\n\t<li>\u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u961f\u5217\u3002&nbsp;\u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u961f\u5217&nbsp;, \u53ea\u8981\u662f\u6807\u51c6\u7684\u961f\u5217\u64cd\u4f5c\u5373\u53ef\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684\uff08\u4f8b\u5982, \u5bf9\u4e00\u4e2a\u7a7a\u7684\u6808\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 top \u64cd\u4f5c\uff09\u3002</li>\n</ul>\n",
        "titleZh": "\u7528\u961f\u5217\u5b9e\u73b0\u6808",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            }
        ],
        "companies": [
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "Yahoo",
            "Oracle",
            "Salesforce",
            "Mathworks",
            "Morgan Stanley",
            "Twilio"
        ]
    },
    {
        "leetId": "226",
        "link": "invert-binary-tree",
        "title": "Invert Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "68.5%",
        "questionDescription": "<p>Invert a binary tree.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Input:</p>\r\n\r\n<pre>\r\n     4\r\n   /   \\\r\n  2     7\r\n / \\   / \\\r\n1   3 6   9</pre>\r\n\r\n<p>Output:</p>\r\n\r\n<pre>\r\n     4\r\n   /   \\\r\n  7     2\r\n / \\   / \\\r\n9   6 3   1</pre>\r\n\r\n<p><strong>Trivia:</strong><br />\r\nThis problem was inspired by <a href=\"https://twitter.com/mxcl/status/608682016205344768\" target=\"_blank\">this original tweet</a> by <a href=\"https://twitter.com/mxcl\" target=\"_blank\">Max Howell</a>:</p>\r\n\r\n<blockquote>Google: 90% of our engineers use the software you wrote (Homebrew), but you can&rsquo;t invert a binary tree on a whiteboard so f*** off.</blockquote>\r\n",
        "questionDescriptionZh": "<p>\u7ffb\u8f6c\u4e00\u68f5\u4e8c\u53c9\u6811\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p>\u8f93\u5165\uff1a</p>\n\n<pre>     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9</pre>\n\n<p>\u8f93\u51fa\uff1a</p>\n\n<pre>     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1</pre>\n\n<p><strong>\u5907\u6ce8:</strong><br>\n\u8fd9\u4e2a\u95ee\u9898\u662f\u53d7\u5230 <a href=\"https://twitter.com/mxcl\" target=\"_blank\">Max Howell </a>\u7684 <a href=\"https://twitter.com/mxcl/status/608682016205344768\" target=\"_blank\">\u539f\u95ee\u9898</a> \u542f\u53d1\u7684 \uff1a</p>\n\n<blockquote>\u8c37\u6b4c\uff1a\u6211\u4eec90\uff05\u7684\u5de5\u7a0b\u5e08\u4f7f\u7528\u60a8\u7f16\u5199\u7684\u8f6f\u4ef6(Homebrew)\uff0c\u4f46\u662f\u60a8\u5374\u65e0\u6cd5\u5728\u9762\u8bd5\u65f6\u5728\u767d\u677f\u4e0a\u5199\u51fa\u7ffb\u8f6c\u4e8c\u53c9\u6811\u8fd9\u9053\u9898\uff0c\u8fd9\u592a\u7cdf\u7cd5\u4e86\u3002</blockquote>\n",
        "titleZh": "\u7ffb\u8f6c\u4e8c\u53c9\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "LinkedIn",
            "Baidu",
            "eBay"
        ]
    },
    {
        "leetId": "227",
        "link": "basic-calculator-ii",
        "title": "Basic Calculator II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "30.9%",
        "questionDescription": "<p>Implement a basic calculator to evaluate a simple expression string.</p>\r\n\r\n<p>The expression string contains only <b>non-negative</b> integers, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> operators and empty spaces <code> </code>. The integer division should truncate toward zero.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;3+2*2&quot;\r\n<strong>Output:</strong> 7\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot; 3/2 &quot;\r\n<strong>Output:</strong> 1</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot; 3+5 / 2 &quot;\r\n<strong>Output:</strong> 5\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>You may assume that the given expression is always valid.</li>\r\n\t<li><b>Do not</b> use the <code>eval</code> built-in library function.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5b9e\u73b0\u4e00\u4e2a\u57fa\u672c\u7684\u8ba1\u7b97\u5668\u6765\u8ba1\u7b97\u4e00\u4e2a\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u7684\u503c\u3002</p>\n\n<p>\u5b57\u7b26\u4e32\u8868\u8fbe\u5f0f\u4ec5\u5305\u542b\u975e\u8d1f\u6574\u6570\uff0c<code>+</code>\uff0c <code>-</code> \uff0c<code>*</code>\uff0c<code>/</code> \u56db\u79cd\u8fd0\u7b97\u7b26\u548c\u7a7a\u683c&nbsp;<code>&nbsp;</code>\u3002 \u6574\u6570\u9664\u6cd5\u4ec5\u4fdd\u7559\u6574\u6570\u90e8\u5206\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;3+2*2&quot;\n<strong>\u8f93\u51fa:</strong> 7\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot; 3/2 &quot;\n<strong>\u8f93\u51fa:</strong> 1</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot; 3+5 / 2 &quot;\n<strong>\u8f93\u51fa:</strong> 5\n</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u90fd\u662f\u6709\u6548\u7684\u3002</li>\n\t<li>\u8bf7<strong>\u4e0d\u8981</strong>\u4f7f\u7528\u5185\u7f6e\u7684\u5e93\u51fd\u6570 <code>eval</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u57fa\u672c\u8ba1\u7b97\u5668 II",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "Airbnb",
            "Baidu",
            "Snapchat",
            "Twitter",
            "Oracle",
            "Yelp",
            "Salesforce",
            "Pocket Gems",
            "Intuit",
            "IXL",
            "DoorDash"
        ]
    },
    {
        "leetId": "228",
        "link": "summary-ranges",
        "title": "Summary Ranges",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "46.7%",
        "questionDescription": "<p>Given a sorted integer array without duplicates, return the summary of its ranges.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>  [0,1,2,4,5,7]\r\n<b>Output:</b> [&quot;0-&gt;2&quot;,&quot;4-&gt;5&quot;,&quot;7&quot;]\r\n<strong>Explanation: </strong>0,1,2 form a continuous range;&nbsp;4,5 form a continuous range.\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>  [0,2,3,4,6,8,9]\r\n<b>Output:</b> [&quot;0&quot;,&quot;2-&gt;4&quot;,&quot;6&quot;,&quot;8-&gt;9&quot;]\r\n<strong>Explanation: </strong>2,3,4 form a continuous range;&nbsp;8,9 form a continuous range.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6709\u5e8f\u6574\u6570\u6570\u7ec4\uff0c\u8fd4\u56de\u6570\u7ec4\u533a\u95f4\u8303\u56f4\u7684\u6c47\u603b\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [0,1,2,4,5,7]\n<strong>\u8f93\u51fa:</strong> [&quot;0-&gt;2&quot;,&quot;4-&gt;5&quot;,&quot;7&quot;]\n<strong>\u89e3\u91ca: </strong>0,1,2 \u53ef\u7ec4\u6210\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4;&nbsp;4,5 \u53ef\u7ec4\u6210\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [0,2,3,4,6,8,9]\n<strong>\u8f93\u51fa:</strong> [&quot;0&quot;,&quot;2-&gt;4&quot;,&quot;6&quot;,&quot;8-&gt;9&quot;]\n<strong>\u89e3\u91ca: </strong>2,3,4 \u53ef\u7ec4\u6210\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4;&nbsp;8,9 \u53ef\u7ec4\u6210\u4e00\u4e2a\u8fde\u7eed\u7684\u533a\u95f4\u3002</pre>\n",
        "titleZh": "\u6c47\u603b\u533a\u95f4",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Indeed",
            "Capital One"
        ]
    },
    {
        "leetId": "229",
        "link": "majority-element-ii",
        "title": "Majority Element II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "39.4%",
        "questionDescription": "<p>Given an integer array of size <i>n</i>, find all elements that appear more than <code>&lfloor; n/3 &rfloor;</code> times.</p>\r\n\r\n<p><strong>Note: </strong>The algorithm should run in linear time and in O(1) space.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [3,2,3]\r\n<strong>Output:</strong> [3]</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,1,1,3,3,2,2,2]\r\n<strong>Output:</strong> [1,2]</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a&nbsp;<em>n&nbsp;</em>\u7684\u6570\u7ec4\uff0c\u627e\u51fa\u5176\u4e2d\u6240\u6709\u51fa\u73b0\u8d85\u8fc7&nbsp;<code>&lfloor; n/3 &rfloor;</code>&nbsp;\u6b21\u7684\u5143\u7d20\u3002</p>\n\n<p><strong>\u8bf4\u660e: </strong>\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [3,2,3]\n<strong>\u8f93\u51fa:</strong> [3]</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,1,1,3,3,2,2,2]\n<strong>\u8f93\u51fa:</strong> [1,2]</pre>\n",
        "titleZh": "\u6c42\u4f17\u6570 II",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Uber",
            "Adobe",
            "Alibaba",
            "Zenefits"
        ]
    },
    {
        "leetId": "230",
        "link": "kth-smallest-element-in-a-bst",
        "title": "Kth Smallest Element in a BST",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "63.2%",
        "questionDescription": "<p>Given a binary search tree, write a function <code>kthSmallest</code> to find the <b>k</b>th smallest element in it.</p>\r\n\r\n<p><b>Note: </b><br />\r\nYou may assume k is always valid, 1 &le; k &le; BST&#39;s total elements.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> root = [3,1,4,null,2], k = 1\r\n   3\r\n  / \\\r\n 1   4\r\n  \\\r\n&nbsp;  2\r\n<strong>Output:</strong> 1</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> root = [5,3,6,2,4,null,null,1], k = 3\r\n       5\r\n      / \\\r\n     3   6\r\n    / \\\r\n   2   4\r\n  /\r\n 1\r\n<strong>Output:</strong> 3\r\n</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nWhat if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570&nbsp;<code>kthSmallest</code>&nbsp;\u6765\u67e5\u627e\u5176\u4e2d\u7b2c&nbsp;<strong>k&nbsp;</strong>\u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe k \u603b\u662f\u6709\u6548\u7684\uff0c1 &le; k &le; \u4e8c\u53c9\u641c\u7d22\u6811\u5143\u7d20\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n&nbsp;  2\n<strong>\u8f93\u51fa:</strong> 1</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n<strong>\u8f93\u51fa:</strong> 3</pre>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br>\n\u5982\u679c\u4e8c\u53c9\u641c\u7d22\u6811\u7ecf\u5e38\u88ab\u4fee\u6539\uff08\u63d2\u5165/\u5220\u9664\u64cd\u4f5c\uff09\u5e76\u4e14\u4f60\u9700\u8981\u9891\u7e41\u5730\u67e5\u627e\u7b2c k \u5c0f\u7684\u503c\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316&nbsp;<code>kthSmallest</code>&nbsp;\u51fd\u6570\uff1f</p>\n",
        "titleZh": "\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Tencent",
            "Walmart Labs",
            "Affirm",
            "Databricks",
            "TripleByte"
        ]
    },
    {
        "leetId": "231",
        "link": "power-of-two",
        "title": "Power of Two",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "44.9%",
        "questionDescription": "<p>Given an integer, write a function to determine if it is a power of two.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1\r\n<strong>Output:</strong> true \r\n<strong>Explanation: </strong>2<sup>0</sup>&nbsp;= 1\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 16\r\n<strong>Output:</strong> true\r\n<strong>Explanation: </strong>2<sup>4</sup>&nbsp;= 16</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 218\r\n<strong>Output:</strong> false</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 2 \u7684\u5e42\u6b21\u65b9\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca: </strong>2<sup>0</sup>&nbsp;= 1</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 16\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca: </strong>2<sup>4</sup>&nbsp;= 16</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 218\n<strong>\u8f93\u51fa:</strong> false</pre>\n",
        "titleZh": "2\u7684\u5e42",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Tencent",
            "IBM"
        ]
    },
    {
        "leetId": "232",
        "link": "implement-queue-using-stacks",
        "title": "Implement Queue using Stacks",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "59.1%",
        "questionDescription": "<p>Implement the following operations of a queue using stacks.</p>\r\n\r\n<ul>\r\n\t<li>push(x) -- Push element x to the back of queue.</li>\r\n\t<li>pop() -- Removes the element from in front of queue.</li>\r\n\t<li>peek() -- Get the front element.</li>\r\n\t<li>empty() -- Return whether the queue is empty.</li>\r\n</ul>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nMyQueue queue = new MyQueue();\r\n\r\nqueue.push(1);\r\nqueue.push(2);  \r\nqueue.peek();  // returns 1\r\nqueue.pop();   // returns 1\r\nqueue.empty(); // returns false</pre>\r\n\r\n<p><b>Notes:</b></p>\r\n\r\n<ul>\r\n\t<li>You must use <i>only</i> standard operations of a stack -- which means only <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, and <code>is empty</code> operations are valid.</li>\r\n\t<li>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.</li>\r\n\t<li>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u4f7f\u7528\u6808\u5b9e\u73b0\u961f\u5217\u7684\u4e0b\u5217\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li>push(x) -- \u5c06\u4e00\u4e2a\u5143\u7d20\u653e\u5165\u961f\u5217\u7684\u5c3e\u90e8\u3002</li>\n\t<li>pop() -- \u4ece\u961f\u5217\u9996\u90e8\u79fb\u9664\u5143\u7d20\u3002</li>\n\t<li>peek() -- \u8fd4\u56de\u961f\u5217\u9996\u90e8\u7684\u5143\u7d20\u3002</li>\n\t<li>empty() -- \u8fd4\u56de\u961f\u5217\u662f\u5426\u4e3a\u7a7a\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>MyQueue queue = new MyQueue();\n\nqueue.push(1);\nqueue.push(2);  \nqueue.peek();  // \u8fd4\u56de 1\nqueue.pop();   // \u8fd4\u56de 1\nqueue.empty(); // \u8fd4\u56de false</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ea\u80fd\u4f7f\u7528\u6807\u51c6\u7684\u6808\u64cd\u4f5c -- \u4e5f\u5c31\u662f\u53ea\u6709&nbsp;<code>push to top</code>,&nbsp;<code>peek/pop from top</code>,&nbsp;<code>size</code>, \u548c&nbsp;<code>is empty</code>&nbsp;\u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002</li>\n\t<li>\u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u6808\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u6808\uff0c\u53ea\u8981\u662f\u6807\u51c6\u7684\u6808\u64cd\u4f5c\u5373\u53ef\u3002</li>\n\t<li>\u5047\u8bbe\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u6709\u6548\u7684 \uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u7a7a\u7684\u961f\u5217\u4e0d\u4f1a\u8c03\u7528 pop \u6216\u8005 peek \u64cd\u4f5c\uff09\u3002</li>\n</ul>\n",
        "titleZh": "\u7528\u6808\u5b9e\u73b0\u961f\u5217",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "eBay",
            "VMware",
            "Salesforce",
            "Mathworks",
            "Yandex"
        ]
    },
    {
        "leetId": "233",
        "link": "number-of-digit-one",
        "title": "Number of Digit One",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "26.9%",
        "questionDescription": "<p>Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 13\r\n<strong>Output:</strong> 6 \r\n<strong>Explanation: </strong>Digit 1 occurred in the following numbers: 1, 10, 11, 12, 13.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n\uff0c\u8ba1\u7b97\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e n \u7684\u975e\u8d1f\u6574\u6570\u4e2d\u6570\u5b57 1 \u51fa\u73b0\u7684\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 13\n<strong>\u8f93\u51fa:</strong> 6 \n<strong>\u89e3\u91ca: </strong>\u6570\u5b57 1 \u51fa\u73b0\u5728\u4ee5\u4e0b\u6570\u5b57\u4e2d: 1, 10, 11, 12, 13 \u3002</pre>\n",
        "titleZh": "\u6570\u5b571\u7684\u4e2a\u6570",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Amazon",
            "Apple"
        ]
    },
    {
        "leetId": "234",
        "link": "palindrome-linked-list",
        "title": "Palindrome Linked List",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "36.1%",
        "questionDescription": "<p>Given a singly linked list, determine if it is a palindrome.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;2\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;2-&gt;2-&gt;1\r\n<strong>Output:</strong> true</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nCould you do it in O(n) time and O(1) space?</p>\r\n",
        "questionDescriptionZh": "<p>\u8bf7\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;2-&gt;1\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br>\n\u4f60\u80fd\u5426\u7528&nbsp;O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f</p>\n",
        "titleZh": "\u56de\u6587\u94fe\u8868",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Alibaba",
            "Twitter",
            "VMware",
            "NetEase",
            "IXL",
            "Intel"
        ]
    },
    {
        "leetId": "235",
        "link": "lowest-common-ancestor-of-a-binary-search-tree",
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "58.1%",
        "questionDescription": "<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p>\r\n\r\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">definition of LCA on Wikipedia</a>: &ldquo;The lowest common ancestor is defined between two nodes p and q&nbsp;as the lowest node in T that has both p and q&nbsp;as descendants (where we allow <b>a node to be a descendant of itself</b>).&rdquo;</p>\r\n\r\n<p>Given binary search tree:&nbsp; root =&nbsp;[6,2,8,0,4,7,9,null,null,3,5]</p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png\" style=\"width: 200px; height: 190px;\" />\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\r\n<strong>Output:</strong> 6\r\n<strong>Explanation: </strong>The LCA of nodes <code>2</code> and <code>8</code> is <code>6</code>.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\r\n<strong>Output:</strong> 2\r\n<strong>Explanation: </strong>The LCA of nodes <code>2</code> and <code>4</code> is <code>2</code>, since a node can be a descendant of itself according to the LCA definition.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All of the nodes&#39; values will be unique.</li>\r\n\t<li>p and q are different and both values will&nbsp;exist in the BST.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002</p>\n\n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\" target=\"_blank\">\u767e\u5ea6\u767e\u79d1</a>\u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a&ldquo;\u5bf9\u4e8e\u6709\u6839\u6811 T \u7684\u4e24\u4e2a\u7ed3\u70b9 p\u3001q\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e3a\u4e00\u4e2a\u7ed3\u70b9 x\uff0c\u6ee1\u8db3 x \u662f p\u3001q \u7684\u7956\u5148\u4e14 x \u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\uff08<strong>\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148</strong>\uff09\u3002&rdquo;</p>\n\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u641c\u7d22\u6811:&nbsp; root =&nbsp;[6,2,8,0,4,7,9,null,null,3,5]</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png\" style=\"height: 190px; width: 200px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n<strong>\u8f93\u51fa:</strong> 6 \n<strong>\u89e3\u91ca: </strong>\u8282\u70b9 <code>2 </code>\u548c\u8282\u70b9 <code>8 </code>\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f <code>6\u3002</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca: </strong>\u8282\u70b9 <code>2</code> \u548c\u8282\u70b9 <code>4</code> \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f <code>2</code>, \u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u8282\u70b9\u672c\u8eab\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002</li>\n\t<li>p\u3001q \u4e3a\u4e0d\u540c\u8282\u70b9\u4e14\u5747\u5b58\u5728\u4e8e\u7ed9\u5b9a\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u3002</li>\n</ul>\n",
        "titleZh": "\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "LinkedIn",
            "Twitter",
            "Tencent",
            "Expedia",
            "Cisco",
            "BlackRock"
        ]
    },
    {
        "leetId": "236",
        "link": "lowest-common-ancestor-of-a-binary-tree",
        "title": "Lowest Common Ancestor of a Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "52.6%",
        "questionDescription": "<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>\r\n\r\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">definition of LCA on Wikipedia</a>: &ldquo;The lowest common ancestor is defined between two nodes p&nbsp;and q&nbsp;as the lowest node in T that has both p&nbsp;and q&nbsp;as descendants (where we allow <b>a node to be a descendant of itself</b>).&rdquo;</p>\r\n\r\n<p>Given the following binary tree:&nbsp; root =&nbsp;[3,5,1,6,2,0,8,null,null,7,4]</p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" style=\"width: 200px; height: 190px;\" />\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\r\n<strong>Output:</strong> 3\r\n<strong>Explanation: </strong>The LCA of nodes <code>5</code> and <code>1</code> is <code>3.</code>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\r\n<strong>Output:</strong> 5\r\n<strong>Explanation: </strong>The LCA of nodes <code>5</code> and <code>4</code> is <code>5</code>, since a node can be a descendant of itself according to the LCA definition.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All of the nodes&#39; values will be unique.</li>\r\n\t<li>p and q are different and both values will&nbsp;exist in the binary tree.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002</p>\n\n<p><a href=\"https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin\" target=\"_blank\">\u767e\u5ea6\u767e\u79d1</a>\u4e2d\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b9a\u4e49\u4e3a\uff1a&ldquo;\u5bf9\u4e8e\u6709\u6839\u6811 T \u7684\u4e24\u4e2a\u7ed3\u70b9 p\u3001q\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\u8868\u793a\u4e3a\u4e00\u4e2a\u7ed3\u70b9 x\uff0c\u6ee1\u8db3 x \u662f p\u3001q \u7684\u7956\u5148\u4e14 x \u7684\u6df1\u5ea6\u5c3d\u53ef\u80fd\u5927\uff08<strong>\u4e00\u4e2a\u8282\u70b9\u4e5f\u53ef\u4ee5\u662f\u5b83\u81ea\u5df1\u7684\u7956\u5148</strong>\uff09\u3002&rdquo;</p>\n\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u4e8c\u53c9\u6811:&nbsp; root =&nbsp;[3,5,1,6,2,0,8,null,null,7,4]</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/binarytree.png\" style=\"height: 190px; width: 200px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca: </strong>\u8282\u70b9 <code>5 </code>\u548c\u8282\u70b9 <code>1 </code>\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 <code>3\u3002</code>\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca: </strong>\u8282\u70b9 <code>5 </code>\u548c\u8282\u70b9 <code>4 </code>\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u662f\u8282\u70b9 <code>5\u3002</code>\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\u6700\u8fd1\u516c\u5171\u7956\u5148\u8282\u70b9\u53ef\u4ee5\u4e3a\u8282\u70b9\u672c\u8eab\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002</li>\n\t<li>p\u3001q \u4e3a\u4e0d\u540c\u8282\u70b9\u4e14\u5747\u5b58\u5728\u4e8e\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e2d\u3002</li>\n</ul>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Snapchat",
            "Goldman Sachs",
            "Oracle",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "Salesforce",
            "Lyft",
            "Paypal",
            "Pinterest",
            "Zillow",
            "Intuit",
            "Visa",
            "Tableau"
        ]
    },
    {
        "leetId": "237",
        "link": "delete-node-in-a-linked-list",
        "title": "Delete Node in a Linked List",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "72.1%",
        "questionDescription": "<p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p>\r\n\r\n<p>Given linked list --&nbsp;head =&nbsp;[4,5,1,9], which looks like following:</p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/28/237_example.png\" style=\"margin-top: 5px; margin-bottom: 5px; width: 300px; height: 49px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> head = [4,5,1,9], node = 5\r\n<strong>Output:</strong> [4,1,9]\r\n<strong>Explanation: </strong>You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> head = [4,5,1,9], node = 1\r\n<strong>Output:</strong> [4,5,9]\r\n<strong>Explanation: </strong>You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The linked list will have at least two elements.</li>\r\n\t<li>All of the nodes&#39; values will be unique.</li>\r\n\t<li>The given node&nbsp;will not be the tail and it will always be a valid node of the linked list.</li>\r\n\t<li>Do not return anything from your function.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\uff09\u8282\u70b9\uff0c\u4f60\u5c06\u53ea\u88ab\u7ed9\u5b9a\u8981\u6c42\u88ab\u5220\u9664\u7684\u8282\u70b9\u3002</p>\n\n<p>\u73b0\u6709\u4e00\u4e2a\u94fe\u8868 --&nbsp;head =&nbsp;[4,5,1,9]\uff0c\u5b83\u53ef\u4ee5\u8868\u793a\u4e3a:</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/237_example.png\" style=\"height: 49px; width: 300px;\"></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> head = [4,5,1,9], node = 5\n<strong>\u8f93\u51fa:</strong> [4,1,9]\n<strong>\u89e3\u91ca: </strong>\u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a&nbsp;5&nbsp;\u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -&gt; 1 -&gt; 9.\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> head = [4,5,1,9], node = 1\n<strong>\u8f93\u51fa:</strong> [4,5,9]\n<strong>\u89e3\u91ca: </strong>\u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a&nbsp;1&nbsp;\u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -&gt; 5 -&gt; 9.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u94fe\u8868\u81f3\u5c11\u5305\u542b\u4e24\u4e2a\u8282\u70b9\u3002</li>\n\t<li>\u94fe\u8868\u4e2d\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002</li>\n\t<li>\u7ed9\u5b9a\u7684\u8282\u70b9\u4e3a\u975e\u672b\u5c3e\u8282\u70b9\u5e76\u4e14\u4e00\u5b9a\u662f\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u6709\u6548\u8282\u70b9\u3002</li>\n\t<li>\u4e0d\u8981\u4ece\u4f60\u7684\u51fd\u6570\u4e2d\u8fd4\u56de\u4efb\u4f55\u7ed3\u679c\u3002</li>\n</ul>\n",
        "titleZh": "\u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Baidu",
            "Tencent",
            "VMware",
            "Paypal",
            "NetEase",
            "Capital One"
        ]
    },
    {
        "leetId": "238",
        "link": "product-of-array-except-self",
        "title": "Product of Array Except Self",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "60.3%",
        "questionDescription": "<p>Given an array <code>nums</code> of <em>n</em> integers where <em>n</em> &gt; 1, &nbsp;return an array <code>output</code> such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>  <code>[1,2,3,4]</code>\r\n<b>Output:</b> <code>[24,12,8,6]</code>\r\n</pre>\r\n\r\n<p><strong>Note: </strong>Please solve it <strong>without division</strong> and in O(<em>n</em>).</p>\r\n\r\n<p><strong>Follow up:</strong><br />\r\nCould you solve it with constant space complexity? (The output array <strong>does not</strong> count as extra space for the purpose of space complexity analysis.)</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u957f\u5ea6\u4e3a&nbsp;<em>n</em>&nbsp;\u7684\u6574\u6570\u6570\u7ec4&nbsp;<code>nums</code>\uff0c\u5176\u4e2d&nbsp;<em>n</em> &gt; 1\uff0c\u8fd4\u56de\u8f93\u51fa\u6570\u7ec4&nbsp;<code>output</code>&nbsp;\uff0c\u5176\u4e2d <code>output[i]</code>&nbsp;\u7b49\u4e8e&nbsp;<code>nums</code>&nbsp;\u4e2d\u9664&nbsp;<code>nums[i]</code>&nbsp;\u4e4b\u5916\u5176\u4f59\u5404\u5143\u7d20\u7684\u4e58\u79ef\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[1,2,3,4]</code>\n<strong>\u8f93\u51fa:</strong> <code>[24,12,8,6]</code></pre>\n\n<p><strong>\u8bf4\u660e: </strong>\u8bf7<strong>\u4e0d\u8981\u4f7f\u7528\u9664\u6cd5\uff0c</strong>\u4e14\u5728&nbsp;O(<em>n</em>) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u6b64\u9898\u3002</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br>\n\u4f60\u53ef\u4ee5\u5728\u5e38\u6570\u7a7a\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u8fd9\u4e2a\u9898\u76ee\u5417\uff1f\uff08 \u51fa\u4e8e\u5bf9\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\u7684\u76ee\u7684\uff0c\u8f93\u51fa\u6570\u7ec4<strong>\u4e0d\u88ab\u89c6\u4e3a</strong>\u989d\u5916\u7a7a\u95f4\u3002\uff09</p>\n",
        "titleZh": "\u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Snapchat",
            "Twitter",
            "Yelp",
            "eBay",
            "Walmart Labs",
            "VMware",
            "Lyft",
            "Zenefits",
            "Expedia",
            "Intuit",
            "Nutanix",
            "Indeed",
            "Hulu",
            "Nvidia",
            "Visa",
            "Intel",
            "Tableau",
            "Groupon",
            "BlackRock"
        ]
    },
    {
        "leetId": "239",
        "link": "sliding-window-maximum",
        "title": "Sliding Window Maximum",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "40.3%",
        "questionDescription": "<p>Given an array <em>nums</em>, there is a sliding window of size <em>k</em> which is moving from the very left of the array to the very right. You can only see the <em>k</em> numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>, and <em>k</em> = 3\r\n<strong>Output: </strong><code>[3,3,5,5,6,7] \r\n<strong>Explanation: \r\n</strong></code>\r\nWindow position                Max\r\n---------------               -----\r\n[1  3  -1] -3  5  3  6  7       <strong>3</strong>\r\n 1 [3  -1  -3] 5  3  6  7       <strong>3</strong>\r\n 1  3 [-1  -3  5] 3  6  7      <strong> 5</strong>\r\n 1  3  -1 [-3  5  3] 6  7       <strong>5</strong>\r\n 1  3  -1  -3 [5  3  6] 7       <strong>6</strong>\r\n 1  3  -1  -3  5 [3  6  7]      <strong>7</strong>\r\n</pre>\r\n\r\n<p><strong>Note: </strong><br />\r\nYou may assume <em>k</em> is always valid, 1 &le; k &le; input array&#39;s size for non-empty array.</p>\r\n\r\n<p><strong>Follow up:</strong><br />\r\nCould you solve it in linear time?</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 <em>nums</em>\uff0c\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a&nbsp;<em>k&nbsp;</em>\u7684\u6ed1\u52a8\u7a97\u53e3\u4ece\u6570\u7ec4\u7684\u6700\u5de6\u4fa7\u79fb\u52a8\u5230\u6570\u7ec4\u7684\u6700\u53f3\u4fa7\u3002\u4f60\u53ea\u53ef\u4ee5\u770b\u5230\u5728\u6ed1\u52a8\u7a97\u53e3 <em>k</em> \u5185\u7684\u6570\u5b57\u3002\u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u53ea\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\u3002</p>\n\n<p>\u8fd4\u56de\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>, \u548c <em>k</em> = 3\n<strong>\u8f93\u51fa: </strong><code>[3,3,5,5,6,7] \n<strong>\u89e3\u91ca: \n</strong></code>\n  \u6ed1\u52a8\u7a97\u53e3\u7684\u4f4d\u7f6e                \u6700\u5927\u503c\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe <em>k </em>\u603b\u662f\u6709\u6548\u7684\uff0c1 &le; k &le;&nbsp;\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u4e14\u8f93\u5165\u6570\u7ec4\u4e0d\u4e3a\u7a7a\u3002</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<p>\u4f60\u80fd\u5728\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u6b64\u9898\u5417\uff1f</p>\n",
        "titleZh": "\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Sliding Window",
                "link": "sliding-window",
                "tagZh": null
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Alibaba",
            "Snapchat",
            "Yelp",
            "eBay",
            "Lyft",
            "Zenefits",
            "Pinterest",
            "Nutanix",
            "Hulu",
            "Coursera",
            "Rubrik",
            "ServiceNow",
            "Citadel"
        ]
    },
    {
        "leetId": "240",
        "link": "search-a-2d-matrix-ii",
        "title": "Search a 2D Matrix II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "36.5%",
        "questionDescription": "<p>Write an efficient algorithm that searches for a value in an <i>m</i> x <i>n</i> matrix. This matrix has the following properties:</p>\r\n\r\n<ul>\r\n\t<li>Integers in each row are sorted in ascending from left to right.</li>\r\n\t<li>Integers in each column are sorted in ascending from top to bottom.</li>\r\n</ul>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Consider the following matrix:</p>\r\n\r\n<pre>\r\n[\r\n  [1,   4,  7, 11, 15],\r\n  [2,   5,  8, 12, 19],\r\n  [3,   6,  9, 16, 22],\r\n  [10, 13, 14, 17, 24],\r\n  [18, 21, 23, 26, 30]\r\n]\r\n</pre>\r\n\r\n<p>Given&nbsp;target&nbsp;=&nbsp;<code>5</code>, return&nbsp;<code>true</code>.</p>\r\n\r\n<p>Given&nbsp;target&nbsp;=&nbsp;<code>20</code>, return&nbsp;<code>false</code>.</p>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22&nbsp;<em>m</em>&nbsp;x&nbsp;<em>n</em>&nbsp;\u77e9\u9635 matrix \u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a</p>\n\n<ul>\n\t<li>\u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002</li>\n\t<li>\u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<p>\u73b0\u6709\u77e9\u9635 matrix \u5982\u4e0b\uff1a</p>\n\n<pre>[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n</pre>\n\n<p>\u7ed9\u5b9a target&nbsp;=&nbsp;<code>5</code>\uff0c\u8fd4\u56de&nbsp;<code>true</code>\u3002</p>\n\n<p>\u7ed9\u5b9a&nbsp;target&nbsp;=&nbsp;<code>20</code>\uff0c\u8fd4\u56de&nbsp;<code>false</code>\u3002</p>\n",
        "titleZh": "\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            },
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Baidu",
            "Goldman Sachs",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "Citadel"
        ]
    },
    {
        "leetId": "241",
        "link": "different-ways-to-add-parentheses",
        "title": "Different Ways to Add Parentheses",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "66.8%",
        "questionDescription": "<p>Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are <code>+</code>, <code>-</code> and <code>*</code>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>&quot;2-1-1&quot;</code>\r\n<b>Output:</b> <code>[0, 2]</code>\r\n<strong>Explanation: </strong>\r\n((2-1)-1) = 0 \r\n(2-(1-1)) = 2</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input: </b><code>&quot;2*3-4*5&quot;</code>\r\n<b>Output:</b> <code>[-34, -14, -10, -10, 10]</code>\r\n<strong>Explanation: \r\n</strong>(2*(3-(4*5))) = -34 \r\n((2*3)-(4*5)) = -14 \r\n((2*(3-4))*5) = -10 \r\n(2*((3-4)*5)) = -10 \r\n(((2*3)-4)*5) = 10<strong>\r\n</strong></pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u4e3a\u8868\u8fbe\u5f0f\u6dfb\u52a0\u62ec\u53f7\uff0c\u6539\u53d8\u5176\u8fd0\u7b97\u4f18\u5148\u7ea7\u4ee5\u6c42\u51fa\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u4f60\u9700\u8981\u7ed9\u51fa\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u7684\u7ed3\u679c\u3002\u6709\u6548\u7684\u8fd0\u7b97\u7b26\u53f7\u5305\u542b <code>+</code>,&nbsp;<code>-</code>&nbsp;\u4ee5\u53ca&nbsp;<code>*</code>&nbsp;\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>&quot;2-1-1&quot;</code>\n<strong>\u8f93\u51fa:</strong> <code>[0, 2]</code>\n<strong>\u89e3\u91ca: </strong>\n((2-1)-1) = 0 \n(2-(1-1)) = 2</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code>&quot;2*3-4*5&quot;</code>\n<strong>\u8f93\u51fa:</strong> <code>[-34, -14, -10, -10, 10]</code>\n<strong>\u89e3\u91ca: \n</strong>(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10</pre>\n",
        "titleZh": "\u4e3a\u8fd0\u7b97\u8868\u8fbe\u5f0f\u8bbe\u8ba1\u4f18\u5148\u7ea7",
        "tags": [
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Adobe",
            "Yelp"
        ]
    },
    {
        "leetId": "242",
        "link": "valid-anagram",
        "title": "Valid Anagram",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "51.9%",
        "questionDescription": "<p>Given two strings <em>s</em> and <em>t&nbsp;</em>, write a function to determine if <em>t</em> is an anagram of <em>s</em>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <em>s</em> = &quot;anagram&quot;, <em>t</em> = &quot;nagaram&quot;\r\n<b>Output:</b> true\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <em>s</em> = &quot;rat&quot;, <em>t</em> = &quot;car&quot;\r\n<b>Output: </b>false\r\n</pre>\r\n\r\n<p><strong>Note:</strong><br />\r\nYou may assume the string contains only lowercase alphabets.</p>\r\n\r\n<p><strong>Follow up:</strong><br />\r\nWhat if the inputs contain unicode characters? How would you adapt your solution to such case?</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 <em>s</em> \u548c <em>t</em> \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad <em>t</em> \u662f\u5426\u662f <em>s</em> \u7684\u4e00\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <em>s</em> = &quot;anagram&quot;, <em>t</em> = &quot;nagaram&quot;\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <em>s</em> = &quot;rat&quot;, <em>t</em> = &quot;car&quot;\n<strong>\u8f93\u51fa: </strong>false</pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n\n<p><strong>\u8fdb\u9636:</strong><br>\n\u5982\u679c\u8f93\u5165\u5b57\u7b26\u4e32\u5305\u542b unicode \u5b57\u7b26\u600e\u4e48\u529e\uff1f\u4f60\u80fd\u5426\u8c03\u6574\u4f60\u7684\u89e3\u6cd5\u6765\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff1f</p>\n",
        "titleZh": "\u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "Yahoo",
            "Snapchat",
            "Goldman Sachs",
            "Oracle",
            "Yelp",
            "VMware",
            "Expedia",
            "Paypal",
            "Cisco",
            "Samsung"
        ]
    },
    {
        "leetId": "243",
        "link": "shortest-word-distance",
        "title": "Shortest Word Distance",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "41",
        "questionDescription": "\n<p>Given a list of words and two words <em>word1</em> and <em>word2</em>, return the shortest distance between these two words in the list.</p>\n<p><strong>Example:</strong><br/>\nAssume that words = <code>[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]</code>.</p>\n<pre><b>Input:</b> <em>word1</em> = <code>\u201ccoding\u201d</code>, <em>word2</em> = <code>\u201cpractice\u201d</code>\n<b>Output:</b> 3\n</pre>\n<pre><b>Input:</b> <em>word1</em> = <code>\"makes\"</code>, <em>word2</em> = <code>\"coding\"</code>\n<b>Output:</b> 1\n</pre>\n<p><strong>Note:</strong><br/>\nYou may assume that <em>word1</em> <strong>does not equal to</strong> <em>word2</em>, and <em>word1</em> and <em>word2</em> are both in the list.</p>\n",
        "questionDescriptionZh": "\n<p>Given a list of words and two words <em>word1</em> and <em>word2</em>, return the shortest distance between these two words in the list.</p>\n<p><strong>Example:</strong><br/>\nAssume that words = <code>[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]</code>.</p>\n<pre><b>Input:</b> <em>word1</em> = <code>\u201ccoding\u201d</code>, <em>word2</em> = <code>\u201cpractice\u201d</code>\n<b>Output:</b> 3\n</pre>\n<pre><b>Input:</b> <em>word1</em> = <code>\"makes\"</code>, <em>word2</em> = <code>\"coding\"</code>\n<b>Output:</b> 1\n</pre>\n<p><strong>Note:</strong><br/>\nYou may assume that <em>word1</em> <strong>does not equal to</strong> <em>word2</em>, and <em>word1</em> and <em>word2</em> are both in the list.</p>\n",
        "companies": [
            "Amazon",
            "Uber",
            "LinkedIn",
            "Indeed"
        ]
    },
    {
        "leetId": "244",
        "link": "shortest-word-distance-ii",
        "title": "Shortest Word Distance II",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "43",
        "questionDescription": "\n<p>Design a class which receives a list of words in the constructor, and implements a method that takes two words <em>word1</em> and <em>word2</em> and return the shortest distance between these two words in the list. Your method will be called <em>repeatedly</em> many times with different parameters.\u00a0</p>\n<p><strong>Example:</strong><br/>\nAssume that words = <code>[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]</code>.</p>\n<pre><b>Input:</b> <em>word1</em> = <code>\u201ccoding\u201d</code>, <em>word2</em> = <code>\u201cpractice\u201d</code>\n<b>Output:</b> 3\n</pre>\n<pre><b>Input:</b> <em>word1</em> = <code>\"makes\"</code>, <em>word2</em> = <code>\"coding\"</code>\n<b>Output:</b> 1</pre>\n<p><strong>Note:</strong><br/>\nYou may assume that <em>word1</em> <strong>does not equal to</strong> <em>word2</em>, and <em>word1</em> and <em>word2</em> are both in the list.</p>\n",
        "questionDescriptionZh": "\n<p>Design a class which receives a list of words in the constructor, and implements a method that takes two words <em>word1</em> and <em>word2</em> and return the shortest distance between these two words in the list. Your method will be called <em>repeatedly</em> many times with different parameters.\u00a0</p>\n<p><strong>Example:</strong><br/>\nAssume that words = <code>[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]</code>.</p>\n<pre><b>Input:</b> <em>word1</em> = <code>\u201ccoding\u201d</code>, <em>word2</em> = <code>\u201cpractice\u201d</code>\n<b>Output:</b> 3\n</pre>\n<pre><b>Input:</b> <em>word1</em> = <code>\"makes\"</code>, <em>word2</em> = <code>\"coding\"</code>\n<b>Output:</b> 1</pre>\n<p><strong>Note:</strong><br/>\nYou may assume that <em>word1</em> <strong>does not equal to</strong> <em>word2</em>, and <em>word1</em> and <em>word2</em> are both in the list.</p>\n",
        "companies": [
            "Bloomberg",
            "Uber",
            "LinkedIn",
            "Indeed"
        ]
    },
    {
        "leetId": "245",
        "link": "shortest-word-distance-iii",
        "title": "Shortest Word Distance III",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "18",
        "questionDescription": "\n<p>Given a list of words and two words <em>word1</em> and <em>word2</em>, return the shortest distance between these two words in the list.</p>\n<p><em>word1</em> and <em>word2</em> may be the same and they represent two individual words in the list.</p>\n<p><strong>Example:</strong><br/>\nAssume that words = <code>[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]</code>.</p>\n<pre><b>Input:</b> <em>word1</em> = <code>\u201cmakes\u201d</code>, <em>word2</em> = <code>\u201ccoding\u201d</code>\n<b>Output:</b> 1\n</pre>\n<pre><b>Input:</b> <em>word1</em> = <code>\"makes\"</code>, <em>word2</em> = <code>\"makes\"</code>\n<b>Output:</b> 3\n</pre>\n<p><strong>Note:</strong><br/>\nYou may assume <em>word1</em> and <em>word2</em> are both in the list.</p>\n",
        "questionDescriptionZh": "\n<p>Given a list of words and two words <em>word1</em> and <em>word2</em>, return the shortest distance between these two words in the list.</p>\n<p><em>word1</em> and <em>word2</em> may be the same and they represent two individual words in the list.</p>\n<p><strong>Example:</strong><br/>\nAssume that words = <code>[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]</code>.</p>\n<pre><b>Input:</b> <em>word1</em> = <code>\u201cmakes\u201d</code>, <em>word2</em> = <code>\u201ccoding\u201d</code>\n<b>Output:</b> 1\n</pre>\n<pre><b>Input:</b> <em>word1</em> = <code>\"makes\"</code>, <em>word2</em> = <code>\"makes\"</code>\n<b>Output:</b> 3\n</pre>\n<p><strong>Note:</strong><br/>\nYou may assume <em>word1</em> and <em>word2</em> are both in the list.</p>\n",
        "companies": [
            "LinkedIn",
            "Indeed"
        ]
    },
    {
        "leetId": "246",
        "link": "strobogrammatic-number",
        "title": "Strobogrammatic Number",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "33",
        "questionDescription": "\n<p>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).</p>\n<p>Write a function to determine if a number is strobogrammatic. The number is represented as a string.</p>\n<p><b>Example 1:</b></p>\n<pre><b>Input:</b>  \"69\"\n<b>Output:</b> true\n</pre>\n<p><b>Example 2:</b></p>\n<pre><b>Input:</b>  \"88\"\n<b>Output:</b> true</pre>\n<p><b>Example 3:</b></p>\n<pre><b>Input:</b>  \"962\"\n<b>Output:</b> false</pre>\n",
        "questionDescriptionZh": "\n<p>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).</p>\n<p>Write a function to determine if a number is strobogrammatic. The number is represented as a string.</p>\n<p><b>Example 1:</b></p>\n<pre><b>Input:</b>  \"69\"\n<b>Output:</b> true\n</pre>\n<p><b>Example 2:</b></p>\n<pre><b>Input:</b>  \"88\"\n<b>Output:</b> true</pre>\n<p><b>Example 3:</b></p>\n<pre><b>Input:</b>  \"962\"\n<b>Output:</b> false</pre>\n",
        "companies": [
            "Google",
            "Facebook",
            "Airbnb"
        ]
    },
    {
        "leetId": "247",
        "link": "strobogrammatic-number-ii",
        "title": "Strobogrammatic Number II",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "31",
        "questionDescription": "\n<p>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).</p>\n<p>Find all strobogrammatic numbers that are of length = n.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:</b>  n = 2\n<b>Output:</b> <code>[\"11\",\"69\",\"88\",\"96\"]</code>\n</pre>\n",
        "questionDescriptionZh": "\n<p>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).</p>\n<p>Find all strobogrammatic numbers that are of length = n.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:</b>  n = 2\n<b>Output:</b> <code>[\"11\",\"69\",\"88\",\"96\"]</code>\n</pre>\n",
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "248",
        "link": "strobogrammatic-number-iii",
        "title": "Strobogrammatic Number III",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "33",
        "questionDescription": "\n<p>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).</p>\n<p>Write a function to count the total strobogrammatic numbers that exist in the range of low &lt;= num &lt;= high.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:</b> low = \"50\", high = \"100\"\n<b>Output:</b> 3 \n<strong>Explanation: </strong>69, 88, and 96 are three strobogrammatic numbers.</pre>\n<p><strong>Note:</strong><br/>\nBecause the range might be a large number, the <em>low</em> and <em>high</em> numbers are represented as string.</p>\n",
        "questionDescriptionZh": "\n<p>A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).</p>\n<p>Write a function to count the total strobogrammatic numbers that exist in the range of low &lt;= num &lt;= high.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:</b> low = \"50\", high = \"100\"\n<b>Output:</b> 3 \n<strong>Explanation: </strong>69, 88, and 96 are three strobogrammatic numbers.</pre>\n<p><strong>Note:</strong><br/>\nBecause the range might be a large number, the <em>low</em> and <em>high</em> numbers are represented as string.</p>\n",
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "249",
        "link": "group-shifted-strings",
        "title": "Group Shifted Strings",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "35",
        "questionDescription": "\n<p>Given a string, we can \"shift\" each of its letter to its successive letter, for example: <code>\"abc\" -&gt; \"bcd\"</code>. We can keep \"shifting\" which forms the sequence:</p>\n<pre>\"abc\" -&gt; \"bcd\" -&gt; ... -&gt; \"xyz\"</pre>\n<p>Given a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:</b> <code>[\"abc\", \"bcd\", \"acef\", \"xyz\", \"az\", \"ba\", \"a\", \"z\"],</code>\n<b>Output:</b> \n[\n  [\"abc\",\"bcd\",\"xyz\"],\n  [\"az\",\"ba\"],\n  [\"acef\"],\n  [\"a\",\"z\"]\n]\n</pre>\n",
        "questionDescriptionZh": "\n<p>Given a string, we can \"shift\" each of its letter to its successive letter, for example: <code>\"abc\" -&gt; \"bcd\"</code>. We can keep \"shifting\" which forms the sequence:</p>\n<pre>\"abc\" -&gt; \"bcd\" -&gt; ... -&gt; \"xyz\"</pre>\n<p>Given a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:</b> <code>[\"abc\", \"bcd\", \"acef\", \"xyz\", \"az\", \"ba\", \"a\", \"z\"],</code>\n<b>Output:</b> \n[\n  [\"abc\",\"bcd\",\"xyz\"],\n  [\"az\",\"ba\"],\n  [\"acef\"],\n  [\"a\",\"z\"]\n]\n</pre>\n",
        "companies": [
            "Google",
            "Facebook",
            "Uber",
            "Apple",
            "Rubrik"
        ]
    },
    {
        "leetId": "250",
        "link": "count-univalue-subtrees",
        "title": "Count Univalue Subtrees",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "41",
        "questionDescription": "\n<p>Given a binary tree, count the number of uni-value subtrees.</p>\n<p>A Uni-value subtree means all nodes of the subtree have the same value.</p>\n<p><b>Example :</b></p>\n<pre><b>Input:</b>  root = [5,1,5,5,5,null,5]\n\n              5\n             / \\\n            1   5\n           / \\   \\\n          5   5   5\n\n<b>Output:</b> 4\n</pre>\n",
        "questionDescriptionZh": "\n<p>Given a binary tree, count the number of uni-value subtrees.</p>\n<p>A Uni-value subtree means all nodes of the subtree have the same value.</p>\n<p><b>Example :</b></p>\n<pre><b>Input:</b>  root = [5,1,5,5,5,null,5]\n\n              5\n             / \\\n            1   5\n           / \\   \\\n          5   5   5\n\n<b>Output:</b> 4\n</pre>\n",
        "companies": [
            "Google",
            "Bloomberg",
            "Box"
        ]
    },
    {
        "leetId": "251",
        "link": "flatten-2d-vector",
        "title": "Flatten 2D Vector",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "42",
        "questionDescription": "\n<p>Implement an iterator to flatten a 2d vector.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:</b> 2d vector =\n[\n  [1,2],\n  [3],\n  [4,5,6]\n]\n<b>Output:</b> <code>[1,2,3,4,5,6]</code>\n<strong>Explanation:</strong>\u00a0By calling <i>next</i> repeatedly until <i>hasNext</i> returns false, \n\u00a0            the order of elements returned by <i>next</i> should be: <code>[1,2,3,4,5,6]</code>.</pre>\n<p><b>Follow up:</b><br/>\nAs an added challenge, try to code it using only <a href=\"http://www.cplusplus.com/reference/iterator/iterator/\" target=\"_blank\">iterators in C++</a> or <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html\" target=\"_blank\">iterators in Java</a>.</p>\n",
        "questionDescriptionZh": "\n<p>Implement an iterator to flatten a 2d vector.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:</b> 2d vector =\n[\n  [1,2],\n  [3],\n  [4,5,6]\n]\n<b>Output:</b> <code>[1,2,3,4,5,6]</code>\n<strong>Explanation:</strong>\u00a0By calling <i>next</i> repeatedly until <i>hasNext</i> returns false, \n\u00a0            the order of elements returned by <i>next</i> should be: <code>[1,2,3,4,5,6]</code>.</pre>\n<p><b>Follow up:</b><br/>\nAs an added challenge, try to code it using only <a href=\"http://www.cplusplus.com/reference/iterator/iterator/\" target=\"_blank\">iterators in C++</a> or <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html\" target=\"_blank\">iterators in Java</a>.</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Uber",
            "Apple",
            "LinkedIn",
            "Airbnb",
            "Twitter",
            "Yelp",
            "Salesforce",
            "Lyft",
            "Zenefits"
        ]
    },
    {
        "leetId": "252",
        "link": "meeting-rooms",
        "title": "Meeting Rooms",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "44",
        "questionDescription": "\n<p>Given an array of meeting time intervals consisting of start and end times <code>[[s1,e1],[s2,e2],...]</code> (s<sub>i</sub> &lt; e<sub>i</sub>), determine if a person could attend all meetings.</p>\n<p><b>Example 1:</b></p>\n<pre><b>Input:</b> <code>[[0,30],[5,10],[15,20]]</code>\n<b>Output:</b> false\n</pre>\n<p><b>Example 2:</b></p>\n<pre><b>Input:</b> [[7,10],[2,4]]\n<b>Output:</b> true\n</pre>\n",
        "questionDescriptionZh": "\n<p>Given an array of meeting time intervals consisting of start and end times <code>[[s1,e1],[s2,e2],...]</code> (s<sub>i</sub> &lt; e<sub>i</sub>), determine if a person could attend all meetings.</p>\n<p><b>Example 1:</b></p>\n<pre><b>Input:</b> <code>[[0,30],[5,10],[15,20]]</code>\n<b>Output:</b> false\n</pre>\n<p><b>Example 2:</b></p>\n<pre><b>Input:</b> [[7,10],[2,4]]\n<b>Output:</b> true\n</pre>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Airbnb",
            "Twitter",
            "Yelp"
        ]
    },
    {
        "leetId": "253",
        "link": "meeting-rooms-ii",
        "title": "Meeting Rooms II",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "71",
        "questionDescription": "\n<p>Given an array of meeting time intervals consisting of start and end times <code>[[s1,e1],[s2,e2],...]</code> (s<sub>i</sub> &lt; e<sub>i</sub>), find the minimum number of conference rooms required.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> <code>[[0, 30],[5, 10],[15, 20]]</code>\n<strong>Output:</strong> 2</pre>\n<p><b>Example 2:</b></p>\n<pre><b>Input:</b> [[7,10],[2,4]]\n<b>Output:</b> 1</pre>\n",
        "questionDescriptionZh": "\n<p>Given an array of meeting time intervals consisting of start and end times <code>[[s1,e1],[s2,e2],...]</code> (s<sub>i</sub> &lt; e<sub>i</sub>), find the minimum number of conference rooms required.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> <code>[[0, 30],[5, 10],[15, 20]]</code>\n<strong>Output:</strong> 2</pre>\n<p><b>Example 2:</b></p>\n<pre><b>Input:</b> [[7,10],[2,4]]\n<b>Output:</b> 1</pre>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "Snapchat",
            "Oracle",
            "Yelp",
            "Cisco"
        ]
    },
    {
        "leetId": "254",
        "link": "factor-combinations",
        "title": "Factor Combinations",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "25",
        "questionDescription": "\n<p>Numbers can be regarded as product of its factors. For example,</p>\n<pre>8 = 2 x 2 x 2;\n  = 2 x 4.\n</pre>\n<p>Write a function that takes an integer <i>n</i> and return all possible combinations of its factors.</p>\n<p><b>Note:</b></p>\n<ol>\n<li>You may assume that <i>n</i> is always positive.</li>\n<li>Factors should be greater than 1 and less than <i>n</i>.</li>\n</ol>\n<p><b>Example\u00a01: </b></p>\n<pre><strong>Input:</strong> <code>1</code>\n<strong>Output:</strong> []\n</pre>\n<p><b>Example\u00a02: </b></p>\n<pre><strong>Input:</strong> <code>37</code>\n<strong>Output:</strong>[]</pre>\n<p><b>Example\u00a03: </b></p>\n<pre><strong>Input:</strong> <code>12</code>\n<strong>Output:</strong>\n[\n  [2, 6],\n  [2, 2, 3],\n  [3, 4]\n]</pre>\n<p><b>Example\u00a04: </b></p>\n<pre><strong>Input:</strong> <code>32</code>\n<strong>Output:</strong>\n[\n  [2, 16],\n  [2, 2, 8],\n  [2, 2, 2, 4],\n  [2, 2, 2, 2, 2],\n  [2, 4, 4],\n  [4, 8]\n]\n</pre>\n",
        "questionDescriptionZh": "\n<p>Numbers can be regarded as product of its factors. For example,</p>\n<pre>8 = 2 x 2 x 2;\n  = 2 x 4.\n</pre>\n<p>Write a function that takes an integer <i>n</i> and return all possible combinations of its factors.</p>\n<p><b>Note:</b></p>\n<ol>\n<li>You may assume that <i>n</i> is always positive.</li>\n<li>Factors should be greater than 1 and less than <i>n</i>.</li>\n</ol>\n<p><b>Example\u00a01: </b></p>\n<pre><strong>Input:</strong> <code>1</code>\n<strong>Output:</strong> []\n</pre>\n<p><b>Example\u00a02: </b></p>\n<pre><strong>Input:</strong> <code>37</code>\n<strong>Output:</strong>[]</pre>\n<p><b>Example\u00a03: </b></p>\n<pre><strong>Input:</strong> <code>12</code>\n<strong>Output:</strong>\n[\n  [2, 6],\n  [2, 2, 3],\n  [3, 4]\n]</pre>\n<p><b>Example\u00a04: </b></p>\n<pre><strong>Input:</strong> <code>32</code>\n<strong>Output:</strong>\n[\n  [2, 16],\n  [2, 2, 8],\n  [2, 2, 2, 4],\n  [2, 2, 2, 2, 2],\n  [2, 4, 4],\n  [4, 8]\n]\n</pre>\n",
        "companies": [
            "Uber",
            "LinkedIn"
        ]
    },
    {
        "leetId": "255",
        "link": "verify-preorder-sequence-in-binary-search-tree",
        "title": "Verify Preorder Sequence in Binary Search Tree",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "19",
        "questionDescription": "\n<p>Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.</p>\n<p>You may assume each number in the sequence is unique.</p>\n<p>Consider the following\u00a0binary search tree:\u00a0</p>\n<pre>     5\n    / \\\n   2   6\n  / \\\n 1   3</pre>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> [5,2,6,1,3]\n<strong>Output:</strong> false</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> [5,2,1,3,6]\n<strong>Output:</strong> true</pre>\n<p><b>Follow up:</b><br/>\nCould you do it using only constant space complexity?</p>\n",
        "questionDescriptionZh": "\n<p>Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.</p>\n<p>You may assume each number in the sequence is unique.</p>\n<p>Consider the following\u00a0binary search tree:\u00a0</p>\n<pre>     5\n    / \\\n   2   6\n  / \\\n 1   3</pre>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> [5,2,6,1,3]\n<strong>Output:</strong> false</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> [5,2,1,3,6]\n<strong>Output:</strong> true</pre>\n<p><b>Follow up:</b><br/>\nCould you do it using only constant space complexity?</p>\n",
        "companies": [
            "Uber",
            "Zenefits",
            "Mathworks"
        ]
    },
    {
        "leetId": "256",
        "link": "paint-house",
        "title": "Paint House",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "41",
        "questionDescription": "\n<p>There are a row of <i>n</i> houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p>\n<p>The cost of painting each house with a certain color is represented by a <code><i>n</i> x <i>3</i></code> cost matrix. For example, <code>costs[0][0]</code> is the cost of painting house 0 with color red; <code>costs[1][2]</code> is the cost of painting house 1 with color green, and so on... Find the minimum cost to paint all houses.</p>\n<p><b>Note:</b><br/>\nAll costs are positive integers.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> [[17,2,17],[16,16,5],[14,3,19]]\n<strong>Output:</strong> 10\n<strong>Explanation: </strong>Paint house 0 into blue, paint house 1 into green, paint house 2 into blue. \n\u00a0            Minimum cost: 2 + 5 + 3 = 10.\n</pre>\n",
        "questionDescriptionZh": "\n<p>There are a row of <i>n</i> houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p>\n<p>The cost of painting each house with a certain color is represented by a <code><i>n</i> x <i>3</i></code> cost matrix. For example, <code>costs[0][0]</code> is the cost of painting house 0 with color red; <code>costs[1][2]</code> is the cost of painting house 1 with color green, and so on... Find the minimum cost to paint all houses.</p>\n<p><b>Note:</b><br/>\nAll costs are positive integers.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> [[17,2,17],[16,16,5],[14,3,19]]\n<strong>Output:</strong> 10\n<strong>Explanation: </strong>Paint house 0 into blue, paint house 1 into green, paint house 2 into blue. \n\u00a0            Minimum cost: 2 + 5 + 3 = 10.\n</pre>\n",
        "companies": [
            "LinkedIn"
        ]
    },
    {
        "leetId": "257",
        "link": "binary-tree-paths",
        "title": "Binary Tree Paths",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "57.9%",
        "questionDescription": "<p>Given a binary tree, return all root-to-leaf paths.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;A leaf is a node with no children.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n\r\n   1\r\n /   \\\r\n2     3\r\n \\\r\n  5\r\n\r\n<strong>Output:</strong> [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]\r\n\r\n<strong>Explanation:</strong> All root-to-leaf paths are: 1-&gt;2-&gt;5, 1-&gt;3\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong>&nbsp;\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n\n   1\n /   \\\n2     3\n \\\n  5\n\n<strong>\u8f93\u51fa:</strong> [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]\n\n<strong>\u89e3\u91ca:</strong> \u6240\u6709\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u4e3a: 1-&gt;2-&gt;5, 1-&gt;3</pre>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Apple",
            "Yandex"
        ]
    },
    {
        "leetId": "258",
        "link": "add-digits",
        "title": "Add Digits",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "63.0%",
        "questionDescription": "<p>Given a non-negative integer <code>num</code>, repeatedly add all its digits until the result has only one digit.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>38</code>\r\n<strong>Output:</strong> 2 \r\n<strong>Explanation: </strong>The process is like: <code>3 + 8 = 11</code>, <code>1 + 1 = 2</code>. \r\n&nbsp;            Since <code>2</code> has only one digit, return it.\r\n</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nCould you do it without any loop/recursion in O(1) runtime?</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 <code>num</code>\uff0c\u53cd\u590d\u5c06\u5404\u4e2a\u4f4d\u4e0a\u7684\u6570\u5b57\u76f8\u52a0\uff0c\u76f4\u5230\u7ed3\u679c\u4e3a\u4e00\u4f4d\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>38</code>\n<strong>\u8f93\u51fa:</strong> 2 \n<strong>\u89e3\u91ca: </strong>\u5404\u4f4d\u76f8\u52a0\u7684\u8fc7\u7a0b\u4e3a<strong>\uff1a</strong><code>3 + 8 = 11</code>, <code>1 + 1 = 2</code>\u3002 \u7531\u4e8e&nbsp;<code>2</code> \u662f\u4e00\u4f4d\u6570\uff0c\u6240\u4ee5\u8fd4\u56de 2\u3002\n</pre>\n\n<p><strong>\u8fdb\u9636:</strong><br>\n\u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u5faa\u73af\u6216\u8005\u9012\u5f52\uff0c\u4e14\u5728 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f</p>\n",
        "titleZh": "\u5404\u4f4d\u76f8\u52a0",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Amazon",
            "Microsoft",
            "Adobe",
            "Apple",
            "Booking.com"
        ]
    },
    {
        "leetId": "259",
        "link": "3sum-smaller",
        "title": "3Sum Smaller",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "17",
        "questionDescription": "\n<p>Given an array of <i>n</i> integers <i>nums</i> and a <i>target</i>, find the number of index triplets <code>i, j, k</code> with <code>0 &lt;= i &lt; j &lt; k &lt; n</code> that satisfy the condition <code>nums[i] + nums[j] + nums[k] &lt; target</code>.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> <i>nums</i> = <code>[-2,0,1,3]</code>, and <i>target</i> = 2\n<strong>Output:</strong> 2 \n<strong>Explanation:</strong>\u00a0Because there are two triplets which sums are less than 2:\n\u00a0            [-2,0,1]\n             [-2,0,3]\n</pre>\n<p><b style='font-family: sans-serif, Arial, Verdana, \"Trebuchet MS\";'>Follow up:</b> Could you solve it in <i>O</i>(<i>n</i><sup>2</sup>) runtime?</p>\n",
        "questionDescriptionZh": "\n<p>Given an array of <i>n</i> integers <i>nums</i> and a <i>target</i>, find the number of index triplets <code>i, j, k</code> with <code>0 &lt;= i &lt; j &lt; k &lt; n</code> that satisfy the condition <code>nums[i] + nums[j] + nums[k] &lt; target</code>.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> <i>nums</i> = <code>[-2,0,1,3]</code>, and <i>target</i> = 2\n<strong>Output:</strong> 2 \n<strong>Explanation:</strong>\u00a0Because there are two triplets which sums are less than 2:\n\u00a0            [-2,0,1]\n             [-2,0,3]\n</pre>\n<p><b style='font-family: sans-serif, Arial, Verdana, \"Trebuchet MS\";'>Follow up:</b> Could you solve it in <i>O</i>(<i>n</i><sup>2</sup>) runtime?</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Coursera"
        ]
    },
    {
        "leetId": "260",
        "link": "single-number-iii",
        "title": "Single Number III",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "63.6%",
        "questionDescription": "<p>Given an array of numbers <code>nums</code>, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>  <code>[1,2,1,3,2,5]</code>\r\n<strong>Output:</strong> <code>[3,5]</code></pre>\r\n\r\n<p><b>Note</b>:</p>\r\n\r\n<ol>\r\n\t<li>The order of the result is not important. So in the above example, <code>[5, 3]</code> is also correct.</li>\r\n\t<li>Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>nums</code>\uff0c\u5176\u4e2d\u6070\u597d\u6709\u4e24\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5176\u4f59\u6240\u6709\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002 \u627e\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u90a3\u4e24\u4e2a\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[1,2,1,3,2,5]</code>\n<strong>\u8f93\u51fa:</strong> <code>[3,5]</code></pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed3\u679c\u8f93\u51fa\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\uff0c\u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c&nbsp;<code>[5, 3]</code>&nbsp;\u4e5f\u662f\u6b63\u786e\u7b54\u6848\u3002</li>\n\t<li>\u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528\u5e38\u6570\u7a7a\u95f4\u590d\u6742\u5ea6\u6765\u5b9e\u73b0\uff1f</li>\n</ol>\n",
        "titleZh": "\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 III",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ],
        "companies": [
            "Facebook",
            "Adobe",
            "Apple",
            "Yahoo"
        ]
    },
    {
        "leetId": "261",
        "link": "graph-valid-tree",
        "title": "Graph Valid Tree",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "32",
        "questionDescription": "\n<p>Given <code>n</code> nodes labeled from <code>0</code> to <code>n-1</code> and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> <code>n = 5</code>, and <code>edges = [[0,1], [0,2], [0,3], [1,4]]</code>\n<strong>Output:</strong> true</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> <code>n = 5, </code>and <code>edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]</code>\n<strong>Output:</strong> false</pre>\n<p><b>Note</b>: you can assume that no duplicate edges will appear in <code>edges</code>. Since all edges are undirected, <code>[0,1]</code> is the same as <code>[1,0]</code> and thus will not appear together in <code>edges</code>.</p>\n",
        "questionDescriptionZh": "\n<p>Given <code>n</code> nodes labeled from <code>0</code> to <code>n-1</code> and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> <code>n = 5</code>, and <code>edges = [[0,1], [0,2], [0,3], [1,4]]</code>\n<strong>Output:</strong> true</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> <code>n = 5, </code>and <code>edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]</code>\n<strong>Output:</strong> false</pre>\n<p><b>Note</b>: you can assume that no duplicate edges will appear in <code>edges</code>. Since all edges are undirected, <code>[0,1]</code> is the same as <code>[1,0]</code> and thus will not appear together in <code>edges</code>.</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Apple",
            "LinkedIn",
            "Zenefits"
        ]
    },
    {
        "leetId": "263",
        "link": "ugly-number",
        "title": "Ugly Number",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "45.8%",
        "questionDescription": "<p>Write a program to check whether a given number is an ugly number.</p>\r\n\r\n<p>Ugly numbers are <strong>positive numbers</strong> whose prime factors only include <code>2, 3, 5</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 6\r\n<strong>Output:</strong> true\r\n<strong>Explanation: </strong>6 = 2 &times;&nbsp;3</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 8\r\n<strong>Output:</strong> true\r\n<strong>Explanation: </strong>8 = 2 &times; 2 &times;&nbsp;2\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 14\r\n<strong>Output:</strong> false \r\n<strong>Explanation: </strong><code>14</code> is not ugly since it includes another prime factor <code>7</code>.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1</code> is typically treated as an ugly number.</li>\r\n\t<li>Input is within the 32-bit signed integer range:&nbsp;[&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1].</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u7ed9\u5b9a\u7684\u6570\u662f\u5426\u4e3a\u4e11\u6570\u3002</p>\n\n<p>\u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570&nbsp;<code>2, 3, 5</code>&nbsp;\u7684<strong>\u6b63\u6574\u6570</strong>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 6\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca: </strong>6 = 2 &times;&nbsp;3</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 8\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca: </strong>8 = 2 &times; 2 &times;&nbsp;2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 14\n<strong>\u8f93\u51fa:</strong> false \n<strong>\u89e3\u91ca: </strong><code>14</code> \u4e0d\u662f\u4e11\u6570\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u4e86\u53e6\u5916\u4e00\u4e2a\u8d28\u56e0\u6570&nbsp;<code>7</code>\u3002</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ol>\n\t<li><code>1</code>&nbsp;\u662f\u4e11\u6570\u3002</li>\n\t<li>\u8f93\u5165\u4e0d\u4f1a\u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4:&nbsp;[&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]\u3002</li>\n</ol>\n",
        "titleZh": "\u4e11\u6570",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Amazon",
            "Adobe"
        ]
    },
    {
        "leetId": "264",
        "link": "ugly-number-ii",
        "title": "Ugly Number II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "42.7%",
        "questionDescription": "<p>Write a program to find the <code>n</code>-th ugly number.</p>\r\n\r\n<p>Ugly numbers are<strong> positive numbers</strong> whose prime factors only include <code>2, 3, 5</code>.&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> n = 10\r\n<strong>Output:</strong> 12\r\n<strong>Explanation: </strong><code>1, 2, 3, 4, 5, 6, 8, 9, 10, 12</code> is the sequence of the first <code>10</code> ugly numbers.</pre>\r\n\r\n<p><strong>Note: </strong>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li><code>1</code> is typically treated as an ugly number.</li>\r\n\t<li><code>n</code> <b>does not exceed 1690</b>.</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u627e\u51fa\u7b2c <code>n</code> \u4e2a\u4e11\u6570\u3002</p>\n\n<p>\u4e11\u6570\u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570&nbsp;<code>2, 3, 5</code> \u7684<strong>\u6b63\u6574\u6570</strong>\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 10\n<strong>\u8f93\u51fa:</strong> 12\n<strong>\u89e3\u91ca: </strong><code>1, 2, 3, 4, 5, 6, 8, 9, 10, 12</code> \u662f\u524d 10 \u4e2a\u4e11\u6570\u3002</pre>\n\n<p><strong>\u8bf4\u660e:&nbsp;</strong>&nbsp;</p>\n\n<ol>\n\t<li><code>1</code>&nbsp;\u662f\u4e11\u6570\u3002</li>\n\t<li><code>n</code>&nbsp;<strong>\u4e0d\u8d85\u8fc7</strong>1690\u3002</li>\n</ol>\n",
        "titleZh": "\u4e11\u6570 II",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Bloomberg",
            "Adobe",
            "eBay"
        ]
    },
    {
        "leetId": "265",
        "link": "paint-house-ii",
        "title": "Paint House II",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "41",
        "questionDescription": "\n<p>There are a row of <i>n</i> houses, each house can be painted with one of the <i>k</i> colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p>\n<p>The cost of painting each house with a certain color is represented by a <code><i>n</i> x <i>k</i></code> cost matrix. For example, <code>costs[0][0]</code> is the cost of painting house 0 with color 0; <code>costs[1][2]</code> is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.</p>\n<p><b>Note:</b><br/>\nAll costs are positive integers.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> [[1,5,3],[2,9,4]]\n<strong>Output:</strong> 5\n<strong>Explanation: </strong>Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; \n\u00a0            Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5. \n</pre>\n<p><b>Follow up:</b><br/>\nCould you solve it in <i>O</i>(<i>nk</i>) runtime?</p>\n",
        "questionDescriptionZh": "\n<p>There are a row of <i>n</i> houses, each house can be painted with one of the <i>k</i> colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p>\n<p>The cost of painting each house with a certain color is represented by a <code><i>n</i> x <i>k</i></code> cost matrix. For example, <code>costs[0][0]</code> is the cost of painting house 0 with color 0; <code>costs[1][2]</code> is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.</p>\n<p><b>Note:</b><br/>\nAll costs are positive integers.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> [[1,5,3],[2,9,4]]\n<strong>Output:</strong> 5\n<strong>Explanation: </strong>Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; \n\u00a0            Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5. \n</pre>\n<p><b>Follow up:</b><br/>\nCould you solve it in <i>O</i>(<i>nk</i>) runtime?</p>\n",
        "companies": [
            "Google",
            "Facebook",
            "LinkedIn"
        ]
    },
    {
        "leetId": "266",
        "link": "palindrome-permutation",
        "title": "Palindrome Permutation",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "41",
        "questionDescription": "\n<p>Given a string, determine if a permutation of the string could form a palindrome.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> <code>\"code\"</code>\n<strong>Output:</strong> false</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> <code>\"aab\"</code>\n<strong>Output:</strong> true</pre>\n<p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> <code>\"carerac\"</code>\n<strong>Output:</strong> true</pre>\n",
        "questionDescriptionZh": "\n<p>Given a string, determine if a permutation of the string could form a palindrome.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> <code>\"code\"</code>\n<strong>Output:</strong> false</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> <code>\"aab\"</code>\n<strong>Output:</strong> true</pre>\n<p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> <code>\"carerac\"</code>\n<strong>Output:</strong> true</pre>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber"
        ]
    },
    {
        "leetId": "267",
        "link": "palindrome-permutation-ii",
        "title": "Palindrome Permutation II",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "22",
        "questionDescription": "\n<p>Given a string <code>s</code>, return all the palindromic permutations (without duplicates) of it. Return an empty list if no palindromic permutation could be form.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> <code>\"aabb\"</code>\n<strong>Output:</strong> <code>[\"abba\", \"baab\"]</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> <code>\"abc\"</code>\n<strong>Output:</strong> <code>[]</code></pre>\n",
        "questionDescriptionZh": "\n<p>Given a string <code>s</code>, return all the palindromic permutations (without duplicates) of it. Return an empty list if no palindromic permutation could be form.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> <code>\"aabb\"</code>\n<strong>Output:</strong> <code>[\"abba\", \"baab\"]</code></pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> <code>\"abc\"</code>\n<strong>Output:</strong> <code>[]</code></pre>\n",
        "companies": [
            "Uber"
        ]
    },
    {
        "leetId": "268",
        "link": "missing-number",
        "title": "Missing Number",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "49.5%",
        "questionDescription": "<p>Given an array containing <i>n</i> distinct numbers taken from <code>0, 1, 2, ..., n</code>, find the one that is missing from the array.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [3,0,1]\r\n<b>Output:</b> 2\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [9,6,4,2,3,5,7,0,1]\r\n<b>Output:</b> 8\r\n</pre>\r\n\r\n<p><b>Note</b>:<br />\r\nYour algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b <code>0, 1, 2, ..., n</code>&nbsp;\u4e2d&nbsp;<em>n</em>&nbsp;\u4e2a\u6570\u7684\u5e8f\u5217\uff0c\u627e\u51fa 0 .. <em>n</em>&nbsp;\u4e2d\u6ca1\u6709\u51fa\u73b0\u5728\u5e8f\u5217\u4e2d\u7684\u90a3\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [3,0,1]\n<strong>\u8f93\u51fa:</strong> 2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [9,6,4,2,3,5,7,0,1]\n<strong>\u8f93\u51fa:</strong> 8\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u4f60\u7684\u7b97\u6cd5\u5e94\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u6765\u5b9e\u73b0?</p>\n",
        "titleZh": "\u7f3a\u5931\u6570\u5b57",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Yahoo",
            "Oracle",
            "Cisco",
            "Zillow",
            "JPMorgan",
            "IBM",
            "Morgan Stanley",
            "Qualcomm",
            "Arista Networks"
        ]
    },
    {
        "leetId": "269",
        "link": "alien-dictionary",
        "title": "Alien Dictionary",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "62",
        "questionDescription": "\n<p>There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of <b>non-empty</b> words from the dictionary, where <b>words are sorted lexicographically by the rules of this new language</b>. Derive the order of letters in this language.</p>\n<p><b>Example 1:</b></p>\n<pre><strong>Input:</strong>\n[\n  \"wrt\",\n  \"wrf\",\n  \"er\",\n  \"ett\",\n  \"rftt\"\n]\n\n<strong>Output: </strong><code>\"wertf\"</code>\n</pre>\n<p><b>Example 2:</b></p>\n<pre><strong>Input:</strong>\n[\n  \"z\",\n  \"x\"\n]\n\n<strong>Output: </strong><code>\"zx\"</code>\n</pre>\n<p><b>Example 3:</b></p>\n<pre><strong>Input:</strong>\n[\n  \"z\",\n  \"x\",\n  \"z\"\n] \n\n<strong>Output:</strong> <code>\"\"</code>\u00a0\n\n<strong>Explanation:</strong> The order is invalid, so return <code>\"\"</code>.\n</pre>\n<p><b>Note:</b></p>\n<ol>\n<li>You may assume all letters are in lowercase.</li>\n<li>You may assume that if a is a prefix of b, then a must appear before b in the given dictionary.</li>\n<li>If the order is invalid, return an empty string.</li>\n<li>There may be multiple valid order of letters, return any one of them is fine.</li>\n</ol>\n",
        "questionDescriptionZh": "\n<p>There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of <b>non-empty</b> words from the dictionary, where <b>words are sorted lexicographically by the rules of this new language</b>. Derive the order of letters in this language.</p>\n<p><b>Example 1:</b></p>\n<pre><strong>Input:</strong>\n[\n  \"wrt\",\n  \"wrf\",\n  \"er\",\n  \"ett\",\n  \"rftt\"\n]\n\n<strong>Output: </strong><code>\"wertf\"</code>\n</pre>\n<p><b>Example 2:</b></p>\n<pre><strong>Input:</strong>\n[\n  \"z\",\n  \"x\"\n]\n\n<strong>Output: </strong><code>\"zx\"</code>\n</pre>\n<p><b>Example 3:</b></p>\n<pre><strong>Input:</strong>\n[\n  \"z\",\n  \"x\",\n  \"z\"\n] \n\n<strong>Output:</strong> <code>\"\"</code>\u00a0\n\n<strong>Explanation:</strong> The order is invalid, so return <code>\"\"</code>.\n</pre>\n<p><b>Note:</b></p>\n<ol>\n<li>You may assume all letters are in lowercase.</li>\n<li>You may assume that if a is a prefix of b, then a must appear before b in the given dictionary.</li>\n<li>If the order is invalid, return an empty string.</li>\n<li>There may be multiple valid order of letters, return any one of them is fine.</li>\n</ol>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "Yahoo",
            "Airbnb",
            "Snapchat",
            "Twitter",
            "Oracle",
            "Lyft",
            "Pinterest",
            "Pocket Gems",
            "Rubrik"
        ]
    },
    {
        "leetId": "270",
        "link": "closest-binary-search-tree-value",
        "title": "Closest Binary Search Tree Value",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "33",
        "questionDescription": "\n<p>Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.</p>\n<p><b>Note:</b></p>\n<ul>\n<li>Given target value is a floating point.</li>\n<li>You are guaranteed to have only one unique value in the BST that is closest to the target.</li>\n</ul>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> root = [4,2,5,1,3], target = 3.714286\n\n    4\n   / \\\n  2   5\n / \\\n1   3\n\n<strong>Output:</strong> 4\n</pre>\n",
        "questionDescriptionZh": "\n<p>Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.</p>\n<p><b>Note:</b></p>\n<ul>\n<li>Given target value is a floating point.</li>\n<li>You are guaranteed to have only one unique value in the BST that is closest to the target.</li>\n</ul>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> root = [4,2,5,1,3], target = 3.714286\n\n    4\n   / \\\n  2   5\n / \\\n1   3\n\n<strong>Output:</strong> 4\n</pre>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "LinkedIn",
            "Snapchat",
            "eBay"
        ]
    },
    {
        "leetId": "271",
        "link": "encode-and-decode-strings",
        "title": "Encode and Decode Strings",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "37",
        "questionDescription": "\n<p>\nDesign an algorithm to encode <b>a list of strings</b> to <b>a string</b>. The encoded string is then sent over the network and is decoded back to the original list of strings.</p>\n<p>\nMachine 1 (sender) has the function:\n</p><pre>string encode(vector&lt;string&gt; strs) {\n  // ... your code\n  return encoded_string;\n}</pre>\n\nMachine 2 (receiver) has the function:\n<pre>vector&lt;string&gt; decode(string s) {\n  //... your code\n  return strs;\n}</pre>\n<p></p>\n<p>\nSo Machine 1 does:\n</p><pre>string encoded_string = encode(strs);</pre>\n<p></p>\n<p>\nand Machine 2 does:\n</p><pre>vector&lt;string&gt; strs2 = decode(encoded_string);</pre>\n<p></p>\n<p>\n<code>strs2</code> in Machine 2 should be the same as <code>strs</code> in Machine 1.\n</p>\n<p>Implement the <code>encode</code> and <code>decode</code> methods.\n</p>\n<p><b>Note:</b><br/>\n</p><ul>\n<li>The string may contain any possible characters out of 256 valid ascii characters. Your algorithm should be generalized enough to work on any possible characters.</li>\n<li>Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.</li>\n<li>Do not rely on any library method such as <code>eval</code> or serialize methods. You should implement your own encode/decode algorithm.</li>\n</ul><p></p>\n",
        "questionDescriptionZh": "\n<p>\nDesign an algorithm to encode <b>a list of strings</b> to <b>a string</b>. The encoded string is then sent over the network and is decoded back to the original list of strings.</p>\n<p>\nMachine 1 (sender) has the function:\n</p><pre>string encode(vector&lt;string&gt; strs) {\n  // ... your code\n  return encoded_string;\n}</pre>\n\nMachine 2 (receiver) has the function:\n<pre>vector&lt;string&gt; decode(string s) {\n  //... your code\n  return strs;\n}</pre>\n<p></p>\n<p>\nSo Machine 1 does:\n</p><pre>string encoded_string = encode(strs);</pre>\n<p></p>\n<p>\nand Machine 2 does:\n</p><pre>vector&lt;string&gt; strs2 = decode(encoded_string);</pre>\n<p></p>\n<p>\n<code>strs2</code> in Machine 2 should be the same as <code>strs</code> in Machine 1.\n</p>\n<p>Implement the <code>encode</code> and <code>decode</code> methods.\n</p>\n<p><b>Note:</b><br/>\n</p><ul>\n<li>The string may contain any possible characters out of 256 valid ascii characters. Your algorithm should be generalized enough to work on any possible characters.</li>\n<li>Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.</li>\n<li>Do not rely on any library method such as <code>eval</code> or serialize methods. You should implement your own encode/decode algorithm.</li>\n</ul><p></p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Twitter",
            "eBay",
            "Palantir Technologies",
            "Palantir",
            "Square"
        ]
    },
    {
        "leetId": "272",
        "link": "closest-binary-search-tree-value-ii",
        "title": "Closest Binary Search Tree Value II",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "57",
        "questionDescription": "\n<p>Given a non-empty binary search tree and a target value, find <i>k</i> values in the BST that are closest to the target.</p>\n<p><b>Note:</b></p>\n<ul>\n<li>Given target value is a floating point.</li>\n<li>You may assume <i>k</i> is always valid, that is: <i>k</i> \u2264 total nodes.</li>\n<li>You are guaranteed to have only one unique set of <i>k</i> values in the BST that are closest to the target.</li>\n</ul>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> root = [4,2,5,1,3], target = 3.714286, and <em>k</em> = 2\n\n    4\n   / \\\n  2   5\n / \\\n1   3\n\n<strong>Output:</strong> [4,3]</pre>\n<p><b>Follow up:</b><br/>\nAssume that the BST is balanced, could you solve it in less than <i>O</i>(<i>n</i>) runtime (where <i>n</i> = total nodes)?</p>\n",
        "questionDescriptionZh": "\n<p>Given a non-empty binary search tree and a target value, find <i>k</i> values in the BST that are closest to the target.</p>\n<p><b>Note:</b></p>\n<ul>\n<li>Given target value is a floating point.</li>\n<li>You may assume <i>k</i> is always valid, that is: <i>k</i> \u2264 total nodes.</li>\n<li>You are guaranteed to have only one unique set of <i>k</i> values in the BST that are closest to the target.</li>\n</ul>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> root = [4,2,5,1,3], target = 3.714286, and <em>k</em> = 2\n\n    4\n   / \\\n  2   5\n / \\\n1   3\n\n<strong>Output:</strong> [4,3]</pre>\n<p><b>Follow up:</b><br/>\nAssume that the BST is balanced, could you solve it in less than <i>O</i>(<i>n</i>) runtime (where <i>n</i> = total nodes)?</p>\n",
        "companies": [
            "Google",
            "LinkedIn",
            "ForUsAll"
        ]
    },
    {
        "leetId": "273",
        "link": "integer-to-english-words",
        "title": "Integer to English Words",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "20.8%",
        "questionDescription": "<p>Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 2<sup>31</sup> - 1.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 123\r\n<b>Output:</b> &quot;One Hundred Twenty Three&quot;\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 12345\r\n<b>Output:</b> &quot;Twelve Thousand Three Hundred Forty Five&quot;</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 1234567\r\n<b>Output:</b> &quot;One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven&quot;\r\n</pre>\r\n\r\n<p><b>Example 4:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 1234567891\r\n<b>Output:</b> &quot;One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One&quot;\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u5c06\u975e\u8d1f\u6574\u6570\u8f6c\u6362\u4e3a\u5176\u5bf9\u5e94\u7684\u82f1\u6587\u8868\u793a\u3002\u53ef\u4ee5\u4fdd\u8bc1\u7ed9\u5b9a\u8f93\u5165\u5c0f\u4e8e&nbsp;2<sup>31</sup> - 1 \u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 123\n<strong>\u8f93\u51fa:</strong> &quot;One Hundred Twenty Three&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 12345\n<strong>\u8f93\u51fa:</strong> &quot;Twelve Thousand Three Hundred Forty Five&quot;</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1234567\n<strong>\u8f93\u51fa:</strong> &quot;One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven&quot;</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1234567891\n<strong>\u8f93\u51fa:</strong> &quot;One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One&quot;</pre>\n",
        "titleZh": "\u6574\u6570\u8f6c\u6362\u82f1\u6587\u8868\u793a",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "LinkedIn",
            "Yahoo",
            "Airbnb",
            "Snapchat",
            "Oracle",
            "Yelp",
            "Paypal",
            "Zillow",
            "Palantir Technologies",
            "Palantir",
            "SAP",
            "Coursera",
            "JPMorgan",
            "Capital One",
            "IBM",
            "Citrix",
            "Tableau",
            "Coupang"
        ]
    },
    {
        "leetId": "274",
        "link": "h-index",
        "title": "H-Index",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "33.9%",
        "questionDescription": "<p>Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher&#39;s h-index.</p>\r\n\r\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/H-index\" target=\"_blank\">definition of h-index on Wikipedia</a>: &quot;A scientist has index <i>h</i> if <i>h</i> of his/her <i>N</i> papers have <b>at least</b> <i>h</i> citations each, and the other <i>N &minus; h</i> papers have <b>no more than</b> <i>h</i> citations each.&quot;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>citations = [3,0,6,1,5]</code>\r\n<b>Output:</b> 3 \r\n<strong>Explanation: </strong><code>[3,0,6,1,5] </code>means the researcher has <code>5</code> papers in total and each of them had \r\n             received <code>3, 0, 6, 1, 5</code> citations respectively. \r\n&nbsp;            Since the researcher has <code>3</code> papers with <b>at least</b> <code>3</code> citations each and the remaining \r\n&nbsp;            two with <b>no more than</b> <code>3</code> citations each, her h-index is <code>3</code>.</pre>\r\n\r\n<p><strong>Note:&nbsp;</strong>If there are several possible values for <em>h</em>, the maximum one is taken as the h-index.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4f4d\u7814\u7a76\u8005\u8bba\u6587\u88ab\u5f15\u7528\u6b21\u6570\u7684\u6570\u7ec4\uff08\u88ab\u5f15\u7528\u6b21\u6570\u662f\u975e\u8d1f\u6574\u6570\uff09\u3002\u7f16\u5199\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8ba1\u7b97\u51fa\u7814\u7a76\u8005\u7684 <em>h&nbsp;</em>\u6307\u6570\u3002</p>\n\n<p><a href=\"https://baike.baidu.com/item/h-index/3991452?fr=aladdin\" target=\"_blank\">h \u6307\u6570\u7684\u5b9a\u4e49</a>: &ldquo;h \u4ee3\u8868&ldquo;\u9ad8\u5f15\u7528\u6b21\u6570&rdquo;\uff08high citations\uff09\uff0c\u4e00\u540d\u79d1\u7814\u4eba\u5458\u7684 h \u6307\u6570\u662f\u6307\u4ed6\uff08\u5979\uff09\u7684 \uff08N \u7bc7\u8bba\u6587\u4e2d\uff09<strong>\u81f3\u591a</strong>\u6709 h \u7bc7\u8bba\u6587\u5206\u522b\u88ab\u5f15\u7528\u4e86<strong>\u81f3\u5c11</strong> h \u6b21\u3002\uff08\u5176\u4f59\u7684&nbsp;<em>N - h&nbsp;</em>\u7bc7\u8bba\u6587\u6bcf\u7bc7\u88ab\u5f15\u7528\u6b21\u6570<strong>\u4e0d\u591a\u4e8e </strong><em>h </em>\u6b21\u3002\uff09&rdquo;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>citations = [3,0,6,1,5]</code>\n<strong>\u8f93\u51fa:</strong> 3 \n<strong>\u89e3\u91ca: </strong>\u7ed9\u5b9a\u6570\u7ec4\u8868\u793a\u7814\u7a76\u8005\u603b\u5171\u6709 <code>5</code> \u7bc7\u8bba\u6587\uff0c\u6bcf\u7bc7\u8bba\u6587\u76f8\u5e94\u7684\u88ab\u5f15\u7528\u4e86 <code>3, 0, 6, 1, 5</code> \u6b21\u3002\n&nbsp;    \u7531\u4e8e\u7814\u7a76\u8005\u6709 <code>3 </code>\u7bc7\u8bba\u6587\u6bcf\u7bc7<strong>\u81f3\u5c11</strong>\u88ab\u5f15\u7528\u4e86 <code>3</code> \u6b21\uff0c\u5176\u4f59\u4e24\u7bc7\u8bba\u6587\u6bcf\u7bc7\u88ab\u5f15\u7528<strong>\u4e0d\u591a\u4e8e</strong> <code>3</code> \u6b21\uff0c\u6240\u4ee5\u5979\u7684 <em>h </em>\u6307\u6570\u662f <code>3</code>\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:&nbsp;</strong>\u5982\u679c <em>h </em>\u6709\u591a\u79cd\u53ef\u80fd\u7684\u503c\uff0c<em>h</em> \u6307\u6570\u662f\u5176\u4e2d\u6700\u5927\u7684\u90a3\u4e2a\u3002</p>\n",
        "titleZh": "H\u6307\u6570",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Bloomberg",
            "Yahoo",
            "Alation"
        ]
    },
    {
        "leetId": "275",
        "link": "h-index-ii",
        "title": "H-Index II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "37.3%",
        "questionDescription": "<p>Given an array of citations <strong>sorted&nbsp;in ascending order </strong>(each citation is a non-negative integer) of a researcher, write a function to compute the researcher&#39;s h-index.</p>\r\n\r\n<p>According to the&nbsp;<a href=\"https://en.wikipedia.org/wiki/H-index\" target=\"_blank\">definition of h-index on Wikipedia</a>: &quot;A scientist has index&nbsp;<i>h</i>&nbsp;if&nbsp;<i>h</i>&nbsp;of his/her&nbsp;<i>N</i>&nbsp;papers have&nbsp;<b>at least</b>&nbsp;<i>h</i>&nbsp;citations each, and the other&nbsp;<i>N &minus; h</i>&nbsp;papers have&nbsp;<b>no more than</b>&nbsp;<i>h&nbsp;</i>citations each.&quot;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>citations = [0,1,3,5,6]</code>\r\n<b>Output:</b> 3 \r\n<strong>Explanation: </strong><code>[0,1,3,5,6] </code>means the researcher has <code>5</code> papers in total and each of them had \r\n             received 0<code>, 1, 3, 5, 6</code> citations respectively. \r\n&nbsp;            Since the researcher has <code>3</code> papers with <b>at least</b> <code>3</code> citations each and the remaining \r\n&nbsp;            two with <b>no more than</b> <code>3</code> citations each, her h-index is <code>3</code>.</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>If there are several possible values for&nbsp;<em>h</em>, the maximum one is taken as the h-index.</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ul>\r\n\t<li>This is a follow up problem to&nbsp;<a href=\"/problems/h-index/description/\">H-Index</a>, where <code>citations</code> is now guaranteed to be sorted in ascending order.</li>\r\n\t<li>Could you solve it in logarithmic time complexity?</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4f4d\u7814\u7a76\u8005\u8bba\u6587\u88ab\u5f15\u7528\u6b21\u6570\u7684\u6570\u7ec4\uff08\u88ab\u5f15\u7528\u6b21\u6570\u662f\u975e\u8d1f\u6574\u6570\uff09\uff0c\u6570\u7ec4\u5df2\u7ecf\u6309\u7167<strong>\u5347\u5e8f\u6392\u5217</strong>\u3002\u7f16\u5199\u4e00\u4e2a\u65b9\u6cd5\uff0c\u8ba1\u7b97\u51fa\u7814\u7a76\u8005\u7684 <em>h</em> \u6307\u6570\u3002</p>\n\n<p><a href=\"https://baike.baidu.com/item/h-index/3991452?fr=aladdin\">h \u6307\u6570\u7684\u5b9a\u4e49</a>: &ldquo;h \u4ee3\u8868&ldquo;\u9ad8\u5f15\u7528\u6b21\u6570&rdquo;\uff08high citations\uff09\uff0c\u4e00\u540d\u79d1\u7814\u4eba\u5458\u7684 h \u6307\u6570\u662f\u6307\u4ed6\uff08\u5979\uff09\u7684 \uff08N \u7bc7\u8bba\u6587\u4e2d\uff09<strong>\u81f3\u591a</strong>\u6709 h \u7bc7\u8bba\u6587\u5206\u522b\u88ab\u5f15\u7528\u4e86<strong>\u81f3\u5c11</strong> h \u6b21\u3002\uff08\u5176\u4f59\u7684&nbsp;<em>N - h&nbsp;</em>\u7bc7\u8bba\u6587\u6bcf\u7bc7\u88ab\u5f15\u7528\u6b21\u6570<strong>\u4e0d\u591a\u4e8e </strong><em>h </em>\u6b21\u3002\uff09&quot;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>citations = [0,1,3,5,6]</code>\n<strong>\u8f93\u51fa:</strong> 3 \n<strong>\u89e3\u91ca: </strong>\u7ed9\u5b9a\u6570\u7ec4\u8868\u793a\u7814\u7a76\u8005\u603b\u5171\u6709 <code>5</code> \u7bc7\u8bba\u6587\uff0c\u6bcf\u7bc7\u8bba\u6587\u76f8\u5e94\u7684\u88ab\u5f15\u7528\u4e86 0<code>, 1, 3, 5, 6</code> \u6b21\u3002\n&nbsp;    \u7531\u4e8e\u7814\u7a76\u8005\u6709 <code>3 </code>\u7bc7\u8bba\u6587\u6bcf\u7bc7<strong>\u81f3\u5c11</strong>\u88ab\u5f15\u7528\u4e86 <code>3</code> \u6b21\uff0c\u5176\u4f59\u4e24\u7bc7\u8bba\u6587\u6bcf\u7bc7\u88ab\u5f15\u7528<strong>\u4e0d\u591a\u4e8e</strong> <code>3</code> \u6b21\uff0c\u6240\u4ee5\u5979\u7684<em> h </em>\u6307\u6570\u662f <code>3</code>\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>\u5982\u679c <em>h </em>\u6709\u591a\u6709\u79cd\u53ef\u80fd\u7684\u503c \uff0c<em>h</em> \u6307\u6570\u662f\u5176\u4e2d\u6700\u5927\u7684\u90a3\u4e2a\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<ul>\n\t<li>\u8fd9\u662f&nbsp;<a href=\"/problems/h-index/description/\">H\u6307\u6570</a>&nbsp;\u7684\u5ef6\u4f38\u9898\u76ee\uff0c\u672c\u9898\u4e2d\u7684&nbsp;<code>citations</code>&nbsp;\u6570\u7ec4\u662f\u4fdd\u8bc1\u6709\u5e8f\u7684\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\u5230\u5bf9\u6570\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f</li>\n</ul>\n",
        "titleZh": "H\u6307\u6570 II",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Facebook"
        ]
    },
    {
        "leetId": "276",
        "link": "paint-fence",
        "title": "Paint Fence",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "6",
        "questionDescription": "\n<p>There is a fence with n posts, each post can be painted with one of the k colors.</p>\n<p>You have to paint all the posts such that no more than two adjacent fence posts have the same color.</p>\n<p>Return the total number of ways you can paint the fence.</p>\n<p><b>Note:</b><br/>\nn and k are non-negative integers.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:</b> n = 3, k = 2\n<b>Output:</b> 6\n<strong>Explanation: </strong>Take c1 as color 1, c2 as color 2. All possible ways are:\n\n\u00a0           post1  post2  post3      \n -----      -----  -----  -----       \n   1         c1     c1     c2 \n\u00a0  2         c1     c2     c1 \n\u00a0  3         c1     c2     c2 \n\u00a0  4         c2     c1     c1\u00a0 \n   5         c2     c1     c2\n\u00a0  6         c2     c2     c1\n</pre>\n",
        "questionDescriptionZh": "\n<p>There is a fence with n posts, each post can be painted with one of the k colors.</p>\n<p>You have to paint all the posts such that no more than two adjacent fence posts have the same color.</p>\n<p>Return the total number of ways you can paint the fence.</p>\n<p><b>Note:</b><br/>\nn and k are non-negative integers.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:</b> n = 3, k = 2\n<b>Output:</b> 6\n<strong>Explanation: </strong>Take c1 as color 1, c2 as color 2. All possible ways are:\n\n\u00a0           post1  post2  post3      \n -----      -----  -----  -----       \n   1         c1     c1     c2 \n\u00a0  2         c1     c2     c1 \n\u00a0  3         c1     c2     c2 \n\u00a0  4         c2     c1     c1\u00a0 \n   5         c2     c1     c2\n\u00a0  6         c2     c2     c1\n</pre>\n",
        "companies": [
            "Google",
            "Yahoo"
        ]
    },
    {
        "leetId": "277",
        "link": "find-the-celebrity",
        "title": "Find the Celebrity",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "52",
        "questionDescription": "\n<p>\nSuppose you are at a party with <code>n</code> people (labeled from <code>0</code> to <code>n - 1</code>) and among them, there may exist one celebrity. The definition of a celebrity is that all the other <code>n - 1</code> people know him/her but he/she does not know any of them.\n</p>\n<p>\nNow you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: \"Hi, A. Do you know B?\" to get information of whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).\n</p>\n<p>\nYou are given a helper function <code>bool knows(a, b)</code> which tells you whether A knows B. Implement a function <code>int findCelebrity(n)</code>, your function should minimize the number of calls to <code>knows</code>.\n</p>\n<p>\n<b>Note</b>: There will be exactly one celebrity if he/she is in the party. Return the celebrity's label if there is a celebrity in the party. If there is no celebrity, return <code>-1</code>.\n</p>\n",
        "questionDescriptionZh": "\n<p>\nSuppose you are at a party with <code>n</code> people (labeled from <code>0</code> to <code>n - 1</code>) and among them, there may exist one celebrity. The definition of a celebrity is that all the other <code>n - 1</code> people know him/her but he/she does not know any of them.\n</p>\n<p>\nNow you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: \"Hi, A. Do you know B?\" to get information of whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).\n</p>\n<p>\nYou are given a helper function <code>bool knows(a, b)</code> which tells you whether A knows B. Implement a function <code>int findCelebrity(n)</code>, your function should minimize the number of calls to <code>knows</code>.\n</p>\n<p>\n<b>Note</b>: There will be exactly one celebrity if he/she is in the party. Return the celebrity's label if there is a celebrity in the party. If there is no celebrity, return <code>-1</code>.\n</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Airbnb",
            "Pinterest"
        ]
    },
    {
        "leetId": "278",
        "link": "first-bad-version",
        "title": "First Bad Version",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "30.4%",
        "questionDescription": "<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p>\r\n\r\n<p>Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad.</p>\r\n\r\n<p>You are given an API <code>bool isBadVersion(version)</code> which will return whether <code>version</code> is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nGiven n = 5, and version = 4 is the first bad version.\r\n\r\n<code>call isBadVersion(3) -&gt; false\r\ncall isBadVersion(5)&nbsp;-&gt; true\r\ncall isBadVersion(4)&nbsp;-&gt; true\r\n\r\nThen 4 is the first bad version.&nbsp;</code>\r\n</pre>",
        "questionDescriptionZh": "<p>\u4f60\u662f\u4ea7\u54c1\u7ecf\u7406\uff0c\u76ee\u524d\u6b63\u5728\u5e26\u9886\u4e00\u4e2a\u56e2\u961f\u5f00\u53d1\u65b0\u7684\u4ea7\u54c1\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4f60\u7684\u4ea7\u54c1\u7684\u6700\u65b0\u7248\u672c\u6ca1\u6709\u901a\u8fc7\u8d28\u91cf\u68c0\u6d4b\u3002\u7531\u4e8e\u6bcf\u4e2a\u7248\u672c\u90fd\u662f\u57fa\u4e8e\u4e4b\u524d\u7684\u7248\u672c\u5f00\u53d1\u7684\uff0c\u6240\u4ee5\u9519\u8bef\u7684\u7248\u672c\u4e4b\u540e\u7684\u6240\u6709\u7248\u672c\u90fd\u662f\u9519\u7684\u3002</p>\n\n<p>\u5047\u8bbe\u4f60\u6709 <code>n</code> \u4e2a\u7248\u672c <code>[1, 2, ..., n]</code>\uff0c\u4f60\u60f3\u627e\u51fa\u5bfc\u81f4\u4e4b\u540e\u6240\u6709\u7248\u672c\u51fa\u9519\u7684\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528&nbsp;<code>bool isBadVersion(version)</code>&nbsp;\u63a5\u53e3\u6765\u5224\u65ad\u7248\u672c\u53f7 <code>version</code> \u662f\u5426\u5728\u5355\u5143\u6d4b\u8bd5\u4e2d\u51fa\u9519\u3002\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002\u4f60\u5e94\u8be5\u5c3d\u91cf\u51cf\u5c11\u5bf9\u8c03\u7528 API \u7684\u6b21\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\u7ed9\u5b9a n = 5\uff0c\u5e76\u4e14 version = 4 \u662f\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002\n\n<code>\u8c03\u7528 isBadVersion(3) -&gt; false\n\u8c03\u7528 isBadVersion(5)&nbsp;-&gt; true\n\u8c03\u7528 isBadVersion(4)&nbsp;-&gt; true\n\n\u6240\u4ee5\uff0c4 \u662f\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002&nbsp;</code></pre>\n",
        "titleZh": "\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Bloomberg"
        ]
    },
    {
        "leetId": "279",
        "link": "perfect-squares",
        "title": "Perfect Squares",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "48.8%",
        "questionDescription": "<p>Given a positive integer <i>n</i>, find the least number of perfect square numbers (for example, <code>1, 4, 9, 16, ...</code>) which sum to <i>n</i>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <i>n</i> = <code>12</code>\r\n<b>Output:</b> 3 \r\n<strong>Explanation: </strong><code>12 = 4 + 4 + 4.</code></pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <i>n</i> = <code>13</code>\r\n<b>Output:</b> 2\r\n<strong>Explanation: </strong><code>13 = 4 + 9.</code></pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u6b63\u6574\u6570&nbsp;<em>n</em>\uff0c\u627e\u5230\u82e5\u5e72\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff08\u6bd4\u5982&nbsp;<code>1, 4, 9, 16, ...</code>\uff09\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u7b49\u4e8e<em> n</em>\u3002\u4f60\u9700\u8981\u8ba9\u7ec4\u6210\u548c\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u4e2a\u6570\u6700\u5c11\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <em>n</em> = <code>12</code>\n<strong>\u8f93\u51fa:</strong> 3 \n<strong>\u89e3\u91ca: </strong><code>12 = 4 + 4 + 4.</code></pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <em>n</em> = <code>13</code>\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca: </strong><code>13 = 4 + 9.</code></pre>\n",
        "titleZh": "\u5b8c\u5168\u5e73\u65b9\u6570",
        "tags": [
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Adobe",
            "Apple",
            "eBay",
            "Lyft",
            "GoDaddy"
        ]
    },
    {
        "leetId": "280",
        "link": "wiggle-sort",
        "title": "Wiggle Sort",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "50",
        "questionDescription": "\n<p>Given an unsorted array <code>nums</code>, reorder it <b>in-place</b> such that <code>nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]...</code>.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:</b> <code>nums = [3,5,2,1,6,4]</code>\n<b>Output:</b> One possible answer is [3,5,1,6,2,4]</pre>\n",
        "questionDescriptionZh": "\n<p>Given an unsorted array <code>nums</code>, reorder it <b>in-place</b> such that <code>nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]...</code>.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:</b> <code>nums = [3,5,2,1,6,4]</code>\n<b>Output:</b> One possible answer is [3,5,1,6,2,4]</pre>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Baidu",
            "Akuna Capital"
        ]
    },
    {
        "leetId": "281",
        "link": "zigzag-iterator",
        "title": "Zigzag Iterator",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "40",
        "questionDescription": "\n<p>Given two 1d vectors, implement an iterator to return their elements alternately.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong>\nv1 = [1,2]\nv2 = [3,4,5,6] \n\n<strong>Output:</strong> <code>[1,3,2,4,5,6]\n\n<strong>Explanation:</strong></code>\u00a0By calling <i>next</i> repeatedly until <i>hasNext</i> returns <code>false</code>, \n\u00a0            the order of elements returned by <i>next</i> should be: <code>[1,3,2,4,5,6]</code>.</pre>\n<p><b>Follow up</b>: What if you are given <code>k</code> 1d vectors? How well can your code be extended to such cases?</p>\n<p><strong>Clarification </strong><b>for the follow up question</b><strong>:</strong><br/>\nThe \"Zigzag\" order is not clearly defined and is ambiguous for <code>k &gt; 2</code> cases. If \"Zigzag\" does not look right to you, replace \"Zigzag\" with \"Cyclic\". For example:</p>\n<pre><strong>Input:</strong>\n[1,2,3]\n[4,5,6,7]\n[8,9]\n\n<strong>Output: </strong><code>[1,4,8,2,5,9,3,6,7]</code>.\n</pre>\n",
        "questionDescriptionZh": "\n<p>Given two 1d vectors, implement an iterator to return their elements alternately.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong>\nv1 = [1,2]\nv2 = [3,4,5,6] \n\n<strong>Output:</strong> <code>[1,3,2,4,5,6]\n\n<strong>Explanation:</strong></code>\u00a0By calling <i>next</i> repeatedly until <i>hasNext</i> returns <code>false</code>, \n\u00a0            the order of elements returned by <i>next</i> should be: <code>[1,3,2,4,5,6]</code>.</pre>\n<p><b>Follow up</b>: What if you are given <code>k</code> 1d vectors? How well can your code be extended to such cases?</p>\n<p><strong>Clarification </strong><b>for the follow up question</b><strong>:</strong><br/>\nThe \"Zigzag\" order is not clearly defined and is ambiguous for <code>k &gt; 2</code> cases. If \"Zigzag\" does not look right to you, replace \"Zigzag\" with \"Cyclic\". For example:</p>\n<pre><strong>Input:</strong>\n[1,2,3]\n[4,5,6,7]\n[8,9]\n\n<strong>Output: </strong><code>[1,4,8,2,5,9,3,6,7]</code>.\n</pre>\n",
        "companies": [
            "Google",
            "Facebook",
            "Apple",
            "Groupon"
        ]
    },
    {
        "leetId": "282",
        "link": "expression-add-operators",
        "title": "Expression Add Operators",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "31.0%",
        "questionDescription": "<p>Given a string that contains only digits <code>0-9</code> and a target value, return all possibilities to add <b>binary</b> operators (not unary) <code>+</code>, <code>-</code>, or <code>*</code> between the digits so they evaluate to the target value.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code><em>num</em> = </code>&quot;123&quot;, <em>target</em> = 6\r\n<b>Output: </b>[&quot;1+2+3&quot;, &quot;1*2*3&quot;] \r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code><em>num</em> = </code>&quot;232&quot;, <em>target</em> = 8\r\n<b>Output: </b>[&quot;2*3+2&quot;, &quot;2+3*2&quot;]</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code><em>num</em> = </code>&quot;105&quot;, <em>target</em> = 5\r\n<b>Output: </b>[&quot;1*0+5&quot;,&quot;10-5&quot;]</pre>\r\n\r\n<p><b>Example 4:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code><em>num</em> = </code>&quot;00&quot;, <em>target</em> = 0\r\n<b>Output: </b>[&quot;0+0&quot;, &quot;0-0&quot;, &quot;0*0&quot;]\r\n</pre>\r\n\r\n<p><b>Example 5:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code><em>num</em> = </code>&quot;3456237490&quot;, <em>target</em> = 9191\r\n<b>Output: </b>[]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57&nbsp;<code>0-9</code>&nbsp;\u7684\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u5b57\u4e4b\u95f4\u6dfb\u52a0<strong>\u4e8c\u5143</strong>\u8fd0\u7b97\u7b26\uff08\u4e0d\u662f\u4e00\u5143\uff09<code>+</code>\u3001<code>-</code>&nbsp;\u6216&nbsp;<code>*</code>&nbsp;\uff0c\u8fd4\u56de\u6240\u6709\u80fd\u591f\u5f97\u5230\u76ee\u6807\u503c\u7684\u8868\u8fbe\u5f0f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code><em>num</em> = </code>&quot;123&quot;, <em>target</em> = 6\n<strong>\u8f93\u51fa: </strong>[&quot;1+2+3&quot;, &quot;1*2*3&quot;] \n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code><em>num</em> = </code>&quot;232&quot;, <em>target</em> = 8\n<strong>\u8f93\u51fa: </strong>[&quot;2*3+2&quot;, &quot;2+3*2&quot;]</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code><em>num</em> = </code>&quot;105&quot;, <em>target</em> = 5\n<strong>\u8f93\u51fa: </strong>[&quot;1*0+5&quot;,&quot;10-5&quot;]</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code><em>num</em> = </code>&quot;00&quot;, <em>target</em> = 0\n<strong>\u8f93\u51fa: </strong>[&quot;0+0&quot;, &quot;0-0&quot;, &quot;0*0&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code><em>num</em> = </code>&quot;3456237490&quot;, <em>target</em> = 9191\n<strong>\u8f93\u51fa: </strong>[]\n</pre>\n",
        "titleZh": "\u7ed9\u8868\u8fbe\u5f0f\u6dfb\u52a0\u8fd0\u7b97\u7b26",
        "tags": [
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Apple",
            "LinkedIn"
        ]
    },
    {
        "leetId": "283",
        "link": "move-zeroes",
        "title": "Move Zeroes",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "53.6%",
        "questionDescription": "<p>Given an array <code>nums</code>, write a function to move all <code>0</code>&#39;s to the end of it while maintaining the relative order of the non-zero elements.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[0,1,0,3,12]</code>\r\n<b>Output:</b> <code>[1,3,12,0,0]</code></pre>\r\n\r\n<p><b>Note</b>:</p>\r\n\r\n<ol>\r\n\t<li>You must do this <b>in-place</b> without making a copy of the array.</li>\r\n\t<li>Minimize the total number of operations.</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 <code>nums</code>\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u6240\u6709 <code>0</code> \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[0,1,0,3,12]</code>\n<strong>\u8f93\u51fa:</strong> <code>[1,3,12,0,0]</code></pre>\n\n<p><strong>\u8bf4\u660e</strong>:</p>\n\n<ol>\n\t<li>\u5fc5\u987b\u5728\u539f\u6570\u7ec4\u4e0a\u64cd\u4f5c\uff0c\u4e0d\u80fd\u62f7\u8d1d\u989d\u5916\u7684\u6570\u7ec4\u3002</li>\n\t<li>\u5c3d\u91cf\u51cf\u5c11\u64cd\u4f5c\u6b21\u6570\u3002</li>\n</ol>\n",
        "titleZh": "\u79fb\u52a8\u96f6",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Yahoo",
            "Baidu",
            "Oracle",
            "eBay",
            "Walmart Labs",
            "Lyft",
            "Paypal",
            "SAP"
        ]
    },
    {
        "leetId": "284",
        "link": "peeking-iterator",
        "title": "Peeking Iterator",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "66.5%",
        "questionDescription": "<p>Given an Iterator class interface with methods: <code>next()</code> and <code>hasNext()</code>, design and implement a PeekingIterator that support the <code>peek()</code> operation -- it essentially peek() at the element that will be returned by the next call to next().</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nAssume that the iterator is initialized to the beginning of the list: <strong><code>[1,2,3]</code></strong>.\r\n\r\nCall <strong><code>next()</code></strong> gets you <strong>1</strong>, the first element in the list.\r\nNow you call <strong><code>peek()</code></strong> and it returns <strong>2</strong>, the next element. Calling <strong><code>next()</code></strong> after that <i><b>still</b></i> return <strong>2</strong>. \r\nYou call <strong><code>next()</code></strong> the final time and it returns <strong>3</strong>, the last element. \r\nCalling <strong><code>hasNext()</code></strong> after that should return <strong>false</strong>.\r\n</pre>\r\n\r\n<p><b>Follow up</b>: How would you extend your design to be generic and work with all types, not just integer?</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u8fed\u4ee3\u5668\u7c7b\u7684\u63a5\u53e3\uff0c\u63a5\u53e3\u5305\u542b\u4e24\u4e2a\u65b9\u6cd5\uff1a&nbsp;<code>next()</code>&nbsp;\u548c&nbsp;<code>hasNext()</code>\u3002\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301&nbsp;<code>peek()</code>&nbsp;\u64cd\u4f5c\u7684\u9876\u7aef\u8fed\u4ee3\u5668 -- \u5176\u672c\u8d28\u5c31\u662f\u628a\u539f\u672c\u5e94\u7531&nbsp;<code>next()</code>&nbsp;\u65b9\u6cd5\u8fd4\u56de\u7684\u5143\u7d20&nbsp;<code>peek()</code>&nbsp;\u51fa\u6765\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\u5047\u8bbe\u8fed\u4ee3\u5668\u88ab\u521d\u59cb\u5316\u4e3a\u5217\u8868&nbsp;<strong><code>[1,2,3]</code></strong>\u3002\n\n\u8c03\u7528&nbsp;<strong><code>next() </code></strong>\u8fd4\u56de <strong>1</strong>\uff0c\u5f97\u5230\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\n\u73b0\u5728\u8c03\u7528&nbsp;<strong><code>peek()</code></strong>&nbsp;\u8fd4\u56de <strong>2</strong>\uff0c\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u5728\u6b64\u4e4b\u540e\u8c03\u7528&nbsp;<strong><code>next() </code></strong>\u4ecd\u7136\u8fd4\u56de <strong>2</strong>\u3002\n\u6700\u540e\u4e00\u6b21\u8c03\u7528&nbsp;<strong><code>next()</code></strong>&nbsp;\u8fd4\u56de <strong>3</strong>\uff0c\u672b\u5c3e\u5143\u7d20\u3002\u5728\u6b64\u4e4b\u540e\u8c03\u7528&nbsp;<strong><code>hasNext()</code></strong>&nbsp;\u5e94\u8be5\u8fd4\u56de <strong>false</strong>\u3002\n</pre>\n\n<p><strong>\u8fdb\u9636\uff1a</strong>\u4f60\u5c06\u5982\u4f55\u62d3\u5c55\u4f60\u7684\u8bbe\u8ba1\uff1f\u4f7f\u4e4b\u53d8\u5f97\u901a\u7528\u5316\uff0c\u4ece\u800c\u9002\u5e94\u6240\u6709\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u53ea\u662f\u6574\u6570\u578b\uff1f</p>\n",
        "titleZh": "\u9876\u7aef\u8fed\u4ee3\u5668",
        "tags": [
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Apple",
            "Yahoo",
            "Walmart Labs",
            "Paypal",
            "Square"
        ]
    },
    {
        "leetId": "285",
        "link": "inorder-successor-in-bst",
        "title": "Inorder Successor in BST",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "43",
        "questionDescription": "\n<p>Given a binary search tree and a node in it, find the in-order successor of that node in the BST.</p>\n<p><b>Note</b>: If the given node has no in-order successor in the tree, return <code>null</code>.</p>\n<p><b>Example 1:</b></p>\n<pre><b>Input:</b> root = <code>[2,1,3], p = 1\n\n  2\n / \\\n1   3\n</code>\n<b>Output:</b> 2</pre>\n<p><b>Example 2:</b></p>\n<pre><b>Input:</b> root = <code>[5,3,6,2,4,null,null,1], p = 6\n\n      5\n     / \\\n    3   6\n   / \\\n  2   4\n /   \n1\n</code>\n<b>Output:</b> null</pre>\n",
        "questionDescriptionZh": "\n<p>Given a binary search tree and a node in it, find the in-order successor of that node in the BST.</p>\n<p><b>Note</b>: If the given node has no in-order successor in the tree, return <code>null</code>.</p>\n<p><b>Example 1:</b></p>\n<pre><b>Input:</b> root = <code>[2,1,3], p = 1\n\n  2\n / \\\n1   3\n</code>\n<b>Output:</b> 2</pre>\n<p><b>Example 2:</b></p>\n<pre><b>Input:</b> root = <code>[5,3,6,2,4,null,null,1], p = 6\n\n      5\n     / \\\n    3   6\n   / \\\n  2   4\n /   \n1\n</code>\n<b>Output:</b> null</pre>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Pocket Gems",
            "Palantir Technologies",
            "Arista Networks"
        ]
    },
    {
        "leetId": "286",
        "link": "walls-and-gates",
        "title": "Walls and Gates",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "15",
        "questionDescription": "\n<p>You are given a <i>m x n</i> 2D grid initialized with these three possible values.</p>\n<ol>\n<li><code>-1</code> - A wall or an obstacle.</li>\n<li><code>0</code> - A gate.</li>\n<li><code>INF</code> - Infinity means an empty room. We use the value <code>2<sup>31</sup> - 1 = 2147483647</code> to represent <code>INF</code> as you may assume that the distance to a gate is less than <code>2147483647</code>.</li>\n</ol>\n<p>Fill each empty room with the distance to its <i>nearest</i> gate. If it is impossible to reach a gate, it should be filled with <code>INF</code>.</p>\n<p><strong>Example:\u00a0</strong></p>\n<p>Given the 2D grid:</p>\n<pre>INF  -1  0  INF\nINF INF INF  -1\nINF  -1 INF  -1\n  0  -1 INF INF\n</pre>\n<p>After running your function, the 2D grid should be:</p>\n<pre>  3  -1   0   1\n  2   2   1  -1\n  1  -1   2  -1\n  0  -1   3   4\n</pre>\n",
        "questionDescriptionZh": "\n<p>You are given a <i>m x n</i> 2D grid initialized with these three possible values.</p>\n<ol>\n<li><code>-1</code> - A wall or an obstacle.</li>\n<li><code>0</code> - A gate.</li>\n<li><code>INF</code> - Infinity means an empty room. We use the value <code>2<sup>31</sup> - 1 = 2147483647</code> to represent <code>INF</code> as you may assume that the distance to a gate is less than <code>2147483647</code>.</li>\n</ol>\n<p>Fill each empty room with the distance to its <i>nearest</i> gate. If it is impossible to reach a gate, it should be filled with <code>INF</code>.</p>\n<p><strong>Example:\u00a0</strong></p>\n<p>Given the 2D grid:</p>\n<pre>INF  -1  0  INF\nINF INF INF  -1\nINF  -1 INF  -1\n  0  -1 INF INF\n</pre>\n<p>After running your function, the 2D grid should be:</p>\n<pre>  3  -1   0   1\n  2   2   1  -1\n  1  -1   2  -1\n  0  -1   3   4\n</pre>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber"
        ]
    },
    {
        "leetId": "287",
        "link": "find-the-duplicate-number",
        "title": "Find the Duplicate Number",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "58.5%",
        "questionDescription": "<p>Given an array <i>nums</i> containing <i>n</i> + 1 integers where each integer is between 1 and <i>n</i> (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[1,3,4,2,2]</code>\r\n<b>Output:</b> 2\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [3,1,3,4,2]\r\n<b>Output:</b> 3</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>You <b>must not</b> modify the array (assume the array is read only).</li>\r\n\t<li>You must use only constant, <i>O</i>(1) extra space.</li>\r\n\t<li>Your runtime complexity should be less than <em>O</em>(<em>n</em><sup>2</sup>).</li>\r\n\t<li>There is only one duplicate number in the array, but it could be repeated more than once.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b&nbsp;<em>n</em> + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4&nbsp;<em>nums</em>\uff0c\u5176\u6570\u5b57\u90fd\u5728 1 \u5230 <em>n&nbsp;</em>\u4e4b\u95f4\uff08\u5305\u62ec 1 \u548c <em>n</em>\uff09\uff0c\u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002\u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u627e\u51fa\u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[1,3,4,2,2]</code>\n<strong>\u8f93\u51fa:</strong> 2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [3,1,3,4,2]\n<strong>\u8f93\u51fa:</strong> 3\n</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ol>\n\t<li><strong>\u4e0d\u80fd</strong>\u66f4\u6539\u539f\u6570\u7ec4\uff08\u5047\u8bbe\u6570\u7ec4\u662f\u53ea\u8bfb\u7684\uff09\u3002</li>\n\t<li>\u53ea\u80fd\u4f7f\u7528\u989d\u5916\u7684 <em>O</em>(1) \u7684\u7a7a\u95f4\u3002</li>\n\t<li>\u65f6\u95f4\u590d\u6742\u5ea6\u5c0f\u4e8e <em>O</em>(<em>n</em><sup>2</sup>) \u3002</li>\n\t<li>\u6570\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\uff0c\u4f46\u5b83\u53ef\u80fd\u4e0d\u6b62\u91cd\u590d\u51fa\u73b0\u4e00\u6b21\u3002</li>\n</ol>\n",
        "titleZh": "\u5bfb\u627e\u91cd\u590d\u6570",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Yahoo",
            "Twitter",
            "Oracle",
            "Cisco",
            "Morgan Stanley"
        ]
    },
    {
        "leetId": "288",
        "link": "unique-word-abbreviation",
        "title": "Unique Word Abbreviation",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "19",
        "questionDescription": "\n<p>An abbreviation of a word follows the form &lt;first letter&gt;&lt;number&gt;&lt;last letter&gt;. Below are some examples of word abbreviations:</p>\n<pre>a) it                      --&gt; it    (no abbreviation)\n\n     1\n     \u2193\nb) d|o|g                   --&gt; d1g\n\n              1    1  1\n     1---5----0----5--8\n     \u2193   \u2193    \u2193    \u2193  \u2193    \nc) i|nternationalizatio|n  --&gt; i18n\n\n              1\n     1---5----0\n\u00a0    \u2193   \u2193    \u2193\nd) l|ocalizatio|n          --&gt; l10n\n</pre>\n<p>Assume you have a dictionary and given a word, find whether its abbreviation is unique in the dictionary. A word's abbreviation is unique if no <i>other</i> word from the dictionary has the same abbreviation.</p>\n<p><strong>Example:</strong></p>\n<pre>Given dictionary = [ \"deer\", \"door\", \"cake\", \"card\" ]\n\nisUnique(\"dear\") -&gt; <code>false</code>\nisUnique(\"cart\") -&gt; <code>true</code>\nisUnique(\"cane\") -&gt; <code>false</code>\nisUnique(\"make\") -&gt; <code>true</code>\n</pre>\n",
        "questionDescriptionZh": "\n<p>An abbreviation of a word follows the form &lt;first letter&gt;&lt;number&gt;&lt;last letter&gt;. Below are some examples of word abbreviations:</p>\n<pre>a) it                      --&gt; it    (no abbreviation)\n\n     1\n     \u2193\nb) d|o|g                   --&gt; d1g\n\n              1    1  1\n     1---5----0----5--8\n     \u2193   \u2193    \u2193    \u2193  \u2193    \nc) i|nternationalizatio|n  --&gt; i18n\n\n              1\n     1---5----0\n\u00a0    \u2193   \u2193    \u2193\nd) l|ocalizatio|n          --&gt; l10n\n</pre>\n<p>Assume you have a dictionary and given a word, find whether its abbreviation is unique in the dictionary. A word's abbreviation is unique if no <i>other</i> word from the dictionary has the same abbreviation.</p>\n<p><strong>Example:</strong></p>\n<pre>Given dictionary = [ \"deer\", \"door\", \"cake\", \"card\" ]\n\nisUnique(\"dear\") -&gt; <code>false</code>\nisUnique(\"cart\") -&gt; <code>true</code>\nisUnique(\"cane\") -&gt; <code>false</code>\nisUnique(\"make\") -&gt; <code>true</code>\n</pre>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "289",
        "link": "game-of-life",
        "title": "Game of Life",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "61.4%",
        "questionDescription": "<p>According to the <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\">Wikipedia&#39;s article</a>: &quot;The <b>Game of Life</b>, also known simply as <b>Life</b>, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.&quot;</p>\r\n\r\n<p>Given a <i>board</i> with <i>m</i> by <i>n</i> cells, each cell has an initial state <i>live</i> (1) or <i>dead</i> (0). Each cell interacts with its <a href=\"https://en.wikipedia.org/wiki/Moore_neighborhood\" target=\"_blank\">eight neighbors</a> (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):</p>\r\n\r\n<ol>\r\n\t<li>Any live cell with fewer than two live neighbors dies, as if caused by under-population.</li>\r\n\t<li>Any live cell with two or three live neighbors lives on to the next generation.</li>\r\n\t<li>Any live cell with more than three live neighbors dies, as if by over-population..</li>\r\n\t<li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>\r\n</ol>\r\n\r\n<p>Write a function to compute the next state (after one update) of the board given its current state.&nbsp;<span>The next state is created by applying the above rules simultaneously to every cell in the current state, where&nbsp;births and deaths occur simultaneously.</span></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-1-1\">[\r\n&nbsp; [0,1,0],\r\n&nbsp; [0,0,1],\r\n&nbsp; [1,1,1],\r\n&nbsp; [0,0,0]\r\n]</span>\r\n<strong>Output: \r\n</strong><span id=\"example-output-1\">[\r\n&nbsp; [0,0,0],\r\n&nbsp; [1,0,1],\r\n&nbsp; [0,1,1],\r\n&nbsp; [0,1,0]\r\n]</span>\r\n</pre>\r\n\r\n<p><b>Follow up</b>:</p>\r\n\r\n<ol>\r\n\t<li>Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.</li>\r\n\t<li>In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u6839\u636e<a href=\"https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin\" target=\"_blank\">\u767e\u5ea6\u767e\u79d1</a>\uff0c\u751f\u547d\u6e38\u620f\uff0c\u7b80\u79f0\u4e3a\u751f\u547d\uff0c\u662f\u82f1\u56fd\u6570\u5b66\u5bb6\u7ea6\u7ff0&middot;\u4f55\u987f&middot;\u5eb7\u5a01\u57281970\u5e74\u53d1\u660e\u7684\u7ec6\u80de\u81ea\u52a8\u673a\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b m &times; n \u4e2a\u683c\u5b50\u7684\u9762\u677f\uff0c\u6bcf\u4e00\u4e2a\u683c\u5b50\u90fd\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2a\u7ec6\u80de\u3002\u6bcf\u4e2a\u7ec6\u80de\u5177\u6709\u4e00\u4e2a\u521d\u59cb\u72b6\u6001 <em>live</em>\uff081\uff09\u5373\u4e3a\u6d3b\u7ec6\u80de\uff0c \u6216 <em>dead</em>\uff080\uff09\u5373\u4e3a\u6b7b\u7ec6\u80de\u3002\u6bcf\u4e2a\u7ec6\u80de\u4e0e\u5176\u516b\u4e2a\u76f8\u90bb\u4f4d\u7f6e\uff08\u6c34\u5e73\uff0c\u5782\u76f4\uff0c\u5bf9\u89d2\u7ebf\uff09\u7684\u7ec6\u80de\u90fd\u9075\u5faa\u4ee5\u4e0b\u56db\u6761\u751f\u5b58\u5b9a\u5f8b\uff1a</p>\n\n<ol>\n\t<li>\u5982\u679c\u6d3b\u7ec6\u80de\u5468\u56f4\u516b\u4e2a\u4f4d\u7f6e\u7684\u6d3b\u7ec6\u80de\u6570\u5c11\u4e8e\u4e24\u4e2a\uff0c\u5219\u8be5\u4f4d\u7f6e\u6d3b\u7ec6\u80de\u6b7b\u4ea1\uff1b</li>\n\t<li>\u5982\u679c\u6d3b\u7ec6\u80de\u5468\u56f4\u516b\u4e2a\u4f4d\u7f6e\u6709\u4e24\u4e2a\u6216\u4e09\u4e2a\u6d3b\u7ec6\u80de\uff0c\u5219\u8be5\u4f4d\u7f6e\u6d3b\u7ec6\u80de\u4ecd\u7136\u5b58\u6d3b\uff1b</li>\n\t<li>\u5982\u679c\u6d3b\u7ec6\u80de\u5468\u56f4\u516b\u4e2a\u4f4d\u7f6e\u6709\u8d85\u8fc7\u4e09\u4e2a\u6d3b\u7ec6\u80de\uff0c\u5219\u8be5\u4f4d\u7f6e\u6d3b\u7ec6\u80de\u6b7b\u4ea1\uff1b</li>\n\t<li>\u5982\u679c\u6b7b\u7ec6\u80de\u5468\u56f4\u6b63\u597d\u6709\u4e09\u4e2a\u6d3b\u7ec6\u80de\uff0c\u5219\u8be5\u4f4d\u7f6e\u6b7b\u7ec6\u80de\u590d\u6d3b\uff1b</li>\n</ol>\n\n<p>\u6839\u636e\u5f53\u524d\u72b6\u6001\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u9762\u677f\u4e0a\u7ec6\u80de\u7684\u4e0b\u4e00\u4e2a\uff08\u4e00\u6b21\u66f4\u65b0\u540e\u7684\uff09\u72b6\u6001\u3002\u4e0b\u4e00\u4e2a\u72b6\u6001\u662f\u901a\u8fc7\u5c06\u4e0a\u8ff0\u89c4\u5219\u540c\u65f6\u5e94\u7528\u4e8e\u5f53\u524d\u72b6\u6001\u4e0b\u7684\u6bcf\u4e2a\u7ec6\u80de\u6240\u5f62\u6210\u7684\uff0c\u5176\u4e2d\u7ec6\u80de\u7684\u51fa\u751f\u548c\u6b7b\u4ea1\u662f\u540c\u65f6\u53d1\u751f\u7684\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165: \n</strong>[\n&nbsp; [0,1,0],\n&nbsp; [0,0,1],\n&nbsp; [1,1,1],\n&nbsp; [0,0,0]\n]\n<strong>\u8f93\u51fa: \n</strong>[\n&nbsp; [0,0,0],\n&nbsp; [1,0,1],\n&nbsp; [0,1,1],\n&nbsp; [0,1,0]\n]</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u89e3\u51b3\u672c\u9898\u5417\uff1f\u8bf7\u6ce8\u610f\uff0c\u9762\u677f\u4e0a\u6240\u6709\u683c\u5b50\u9700\u8981\u540c\u65f6\u88ab\u66f4\u65b0\uff1a\u4f60\u4e0d\u80fd\u5148\u66f4\u65b0\u67d0\u4e9b\u683c\u5b50\uff0c\u7136\u540e\u4f7f\u7528\u5b83\u4eec\u7684\u66f4\u65b0\u540e\u7684\u503c\u518d\u66f4\u65b0\u5176\u4ed6\u683c\u5b50\u3002</li>\n\t<li>\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e8c\u7ef4\u6570\u7ec4\u6765\u8868\u793a\u9762\u677f\u3002\u539f\u5219\u4e0a\uff0c\u9762\u677f\u662f\u65e0\u9650\u7684\uff0c\u4f46\u5f53\u6d3b\u7ec6\u80de\u4fb5\u5360\u4e86\u9762\u677f\u8fb9\u754c\u65f6\u4f1a\u9020\u6210\u95ee\u9898\u3002\u4f60\u5c06\u5982\u4f55\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff1f</li>\n</ul>\n",
        "titleZh": "\u751f\u547d\u6e38\u620f",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "Baidu",
            "Snapchat",
            "Two Sigma",
            "Dropbox",
            "Square",
            "Booking.com"
        ]
    },
    {
        "leetId": "290",
        "link": "word-pattern",
        "title": "Word Pattern",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "38.5%",
        "questionDescription": "<p>Given a <code>pattern</code> and a string <code>str</code>, find if <code>str</code> follows the same pattern.</p>\r\n\r\n<p>Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> word in <code>str</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code>\r\n<strong>Output:</strong> true</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat fish&quot;</code>\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> pattern = <code>&quot;aaaa&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code>\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog dog dog dog&quot;</code>\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><b>Notes:</b><br />\r\nYou may assume <code>pattern</code> contains only lowercase letters, and <code>str</code> contains lowercase letters that may be separated by a single space.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u79cd <code>pattern(\u6a21\u5f0f)</code>&nbsp;\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<code>str</code>&nbsp;\uff0c\u5224\u65ad <code>str</code> \u662f\u5426\u9075\u5faa\u76f8\u540c\u7684\u6a21\u5f0f\u3002</p>\n\n<p>\u8fd9\u91cc\u7684<strong>\u9075\u5faa</strong>\u6307\u5b8c\u5168\u5339\u914d\uff0c\u4f8b\u5982\uff0c&nbsp;<code>pattern</code>&nbsp;\u91cc\u7684\u6bcf\u4e2a\u5b57\u6bcd\u548c\u5b57\u7b26\u4e32&nbsp;<code>str</code><strong>&nbsp;</strong>\u4e2d\u7684\u6bcf\u4e2a\u975e\u7a7a\u5355\u8bcd\u4e4b\u95f4\u5b58\u5728\u7740\u53cc\u5411\u8fde\u63a5\u7684\u5bf9\u5e94\u6a21\u5f0f\u3002</p>\n\n<p><strong>\u793a\u4f8b1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code>\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat fish&quot;</code>\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> pattern = <code>&quot;aaaa&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code>\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog dog dog dog&quot;</code>\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>pattern</code>&nbsp;\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\uff0c&nbsp;<code>str</code>&nbsp;\u5305\u542b\u4e86\u7531\u5355\u4e2a\u7a7a\u683c\u5206\u9694\u7684\u5c0f\u5199\u5b57\u6bcd\u3002&nbsp; &nbsp;&nbsp;</p>\n",
        "titleZh": "\u5355\u8bcd\u6a21\u5f0f",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Microsoft",
            "Uber",
            "Dropbox",
            "Capital One"
        ]
    },
    {
        "leetId": "291",
        "link": "word-pattern-ii",
        "title": "Word Pattern II",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "35",
        "questionDescription": "\n<p>Given a <code>pattern</code> and a string <code>str</code>, find if <code>str</code> follows the same pattern.</p>\n<p>Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> substring in <code>str</code>.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input: </strong>pattern = <code>\"abab\"</code>, str = <code>\"redblueredblue\"</code>\n<strong>Output:</strong> true</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong>pattern = pattern = <code>\"aaaa\"</code>, str = <code>\"asdasdasdasd\"</code>\n<strong>Output:</strong> true</pre>\n<p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> pattern = <code>\"aabb\"</code>, str = <code>\"xyzabcxzyabc\"</code>\n<strong>Output:</strong> false\n</pre>\n<p><b>Notes:</b><br/>\nYou may assume both <code>pattern</code> and <code>str</code> contains only lowercase letters.</p>\n",
        "questionDescriptionZh": "\n<p>Given a <code>pattern</code> and a string <code>str</code>, find if <code>str</code> follows the same pattern.</p>\n<p>Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> substring in <code>str</code>.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input: </strong>pattern = <code>\"abab\"</code>, str = <code>\"redblueredblue\"</code>\n<strong>Output:</strong> true</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong>pattern = pattern = <code>\"aaaa\"</code>, str = <code>\"asdasdasdasd\"</code>\n<strong>Output:</strong> true</pre>\n<p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> pattern = <code>\"aabb\"</code>, str = <code>\"xyzabcxzyabc\"</code>\n<strong>Output:</strong> false\n</pre>\n<p><b>Notes:</b><br/>\nYou may assume both <code>pattern</code> and <code>str</code> contains only lowercase letters.</p>\n",
        "companies": [
            "Facebook",
            "Uber",
            "Airbnb",
            "Dropbox"
        ]
    },
    {
        "leetId": "292",
        "link": "nim-game",
        "title": "Nim Game",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "67.5%",
        "questionDescription": "<p>You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.</p>\r\n\r\n<p>Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>4</code>\r\n<strong>Output:</strong> false \r\n<strong>Explanation: </strong>If there are 4 stones in the heap, then you will never win the game;\r\n&nbsp;            No matter 1, 2, or 3 stones you remove, the last stone will always be \r\n&nbsp;            removed by your friend.</pre>",
        "questionDescriptionZh": "<p>\u4f60\u548c\u4f60\u7684\u670b\u53cb\uff0c\u4e24\u4e2a\u4eba\u4e00\u8d77\u73a9&nbsp;<a href=\"https://baike.baidu.com/item/Nim\u6e38\u620f/6737105\" target=\"_blank\">Nim\u6e38\u620f</a>\uff1a\u684c\u5b50\u4e0a\u6709\u4e00\u5806\u77f3\u5934\uff0c\u6bcf\u6b21\u4f60\u4eec\u8f6e\u6d41\u62ff\u6389&nbsp;1 - 3 \u5757\u77f3\u5934\u3002 \u62ff\u6389\u6700\u540e\u4e00\u5757\u77f3\u5934\u7684\u4eba\u5c31\u662f\u83b7\u80dc\u8005\u3002\u4f60\u4f5c\u4e3a\u5148\u624b\u3002</p>\n\n<p>\u4f60\u4eec\u662f\u806a\u660e\u4eba\uff0c\u6bcf\u4e00\u6b65\u90fd\u662f\u6700\u4f18\u89e3\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6765\u5224\u65ad\u4f60\u662f\u5426\u53ef\u4ee5\u5728\u7ed9\u5b9a\u77f3\u5934\u6570\u91cf\u7684\u60c5\u51b5\u4e0b\u8d62\u5f97\u6e38\u620f\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>4</code>\n<strong>\u8f93\u51fa:</strong> false \n<strong>\u89e3\u91ca: </strong>\u5982\u679c\u5806\u4e2d\u6709 4 \u5757\u77f3\u5934\uff0c\u90a3\u4e48\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u8d62\u5f97\u6bd4\u8d5b\uff1b\n&nbsp;    \u56e0\u4e3a\u65e0\u8bba\u4f60\u62ff\u8d70 1 \u5757\u30012 \u5757 \u8fd8\u662f 3 \u5757\u77f3\u5934\uff0c\u6700\u540e\u4e00\u5757\u77f3\u5934\u603b\u662f\u4f1a\u88ab\u4f60\u7684\u670b\u53cb\u62ff\u8d70\u3002\n</pre>\n",
        "titleZh": "Nim\u6e38\u620f",
        "tags": [
            {
                "tag": "Brainteaser",
                "link": "brainteaser",
                "tagZh": "\u8111\u7b4b\u6025\u8f6c\u5f2f"
            },
            {
                "tag": "Minimax",
                "link": "minimax",
                "tagZh": "\u6781\u5c0f\u5316\u6781\u5927"
            }
        ],
        "companies": [
            "Adobe"
        ]
    },
    {
        "leetId": "293",
        "link": "flip-game",
        "title": "Flip Game",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "12",
        "questionDescription": "\n<p>You are playing the following Flip Game with your friend: Given a string that contains only these two characters: <code>+</code> and <code>-</code>, you and your friend take turns to flip two <b>consecutive</b> <code>\"++\"</code> into <code>\"--\"</code>. The game ends when a person can no longer make a move and therefore the other person will be the winner.</p>\n<p>Write a function to compute all possible states of the string after one valid move.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> <code>s = \"++++\"</code>\n<strong>Output:</strong> \n[\n  \"--++\",\n  \"+--+\",\n  \"++--\"\n]\n</pre>\n<p><strong>Note: </strong>If there is no valid move, return an empty list <code>[]</code>.</p>\n",
        "questionDescriptionZh": "\n<p>You are playing the following Flip Game with your friend: Given a string that contains only these two characters: <code>+</code> and <code>-</code>, you and your friend take turns to flip two <b>consecutive</b> <code>\"++\"</code> into <code>\"--\"</code>. The game ends when a person can no longer make a move and therefore the other person will be the winner.</p>\n<p>Write a function to compute all possible states of the string after one valid move.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> <code>s = \"++++\"</code>\n<strong>Output:</strong> \n[\n  \"--++\",\n  \"+--+\",\n  \"++--\"\n]\n</pre>\n<p><strong>Note: </strong>If there is no valid move, return an empty list <code>[]</code>.</p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "294",
        "link": "flip-game-ii",
        "title": "Flip Game II",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "6",
        "questionDescription": "\n<p>You are playing the following Flip Game with your friend: Given a string that contains only these two characters: <code>+</code> and <code>-</code>, you and your friend take turns to flip two <b>consecutive</b> <code>\"++\"</code> into <code>\"--\"</code>. The game ends when a person can no longer make a move and therefore the other person will be the winner.</p>\n<p>Write a function to determine if the starting player can guarantee a win.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> <code>s = \"++++\"</code>\n<strong>Output:</strong> true \n<strong>Explanation: </strong>The starting player can guarantee a win by flipping the middle <code>\"++\"</code> to become <code>\"+--+\"</code>.\n</pre>\n<p><b>Follow up:</b><br/>\nDerive your algorithm's runtime complexity.</p>\n",
        "questionDescriptionZh": "\n<p>You are playing the following Flip Game with your friend: Given a string that contains only these two characters: <code>+</code> and <code>-</code>, you and your friend take turns to flip two <b>consecutive</b> <code>\"++\"</code> into <code>\"--\"</code>. The game ends when a person can no longer make a move and therefore the other person will be the winner.</p>\n<p>Write a function to determine if the starting player can guarantee a win.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> <code>s = \"++++\"</code>\n<strong>Output:</strong> true \n<strong>Explanation: </strong>The starting player can guarantee a win by flipping the middle <code>\"++\"</code> to become <code>\"+--+\"</code>.\n</pre>\n<p><b>Follow up:</b><br/>\nDerive your algorithm's runtime complexity.</p>\n",
        "companies": [
            "Google",
            "Rubrik"
        ]
    },
    {
        "leetId": "295",
        "link": "find-median-from-data-stream",
        "title": "Find Median from Data Stream",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "33.8%",
        "questionDescription": "<p>Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.</p>\r\nFor example,\r\n\r\n<p><code>[2,3,4]</code>, the median is <code>3</code></p>\r\n\r\n<p><code>[2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code></p>\r\n\r\n<p>Design a data structure that supports the following two operations:</p>\r\n\r\n<ul>\r\n\t<li>void addNum(int num) - Add a integer number from the data stream to the data structure.</li>\r\n\t<li>double findMedian() - Return the median of all elements so far.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\naddNum(1)\r\naddNum(2)\r\nfindMedian() -&gt; 1.5\r\naddNum(3) \r\nfindMedian() -&gt; 2\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ol>\r\n\t<li>If all integer numbers from the stream are between 0&nbsp;and 100, how would you optimize it?</li>\r\n\t<li>If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u4e2d\u4f4d\u6570\u662f\u6709\u5e8f\u5217\u8868\u4e2d\u95f4\u7684\u6570\u3002\u5982\u679c\u5217\u8868\u957f\u5ea6\u662f\u5076\u6570\uff0c\u4e2d\u4f4d\u6570\u5219\u662f\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002</p>\n\n<p>\u4f8b\u5982\uff0c</p>\n\n<p>[2,3,4]&nbsp;\u7684\u4e2d\u4f4d\u6570\u662f 3</p>\n\n<p>[2,3] \u7684\u4e2d\u4f4d\u6570\u662f (2 + 3) / 2 = 2.5</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a</p>\n\n<ul>\n\t<li>void addNum(int num) - \u4ece\u6570\u636e\u6d41\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6574\u6570\u5230\u6570\u636e\u7ed3\u6784\u4e2d\u3002</li>\n\t<li>double findMedian() - \u8fd4\u56de\u76ee\u524d\u6240\u6709\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>addNum(1)\naddNum(2)\nfindMedian() -&gt; 1.5\naddNum(3) \nfindMedian() -&gt; 2</pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ol>\n\t<li>\u5982\u679c\u6570\u636e\u6d41\u4e2d\u6240\u6709\u6574\u6570\u90fd\u5728 0 \u5230 100 \u8303\u56f4\u5185\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f</li>\n\t<li>\u5982\u679c\u6570\u636e\u6d41\u4e2d 99% \u7684\u6574\u6570\u90fd\u5728 0 \u5230 100 \u8303\u56f4\u5185\uff0c\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f</li>\n</ol>\n",
        "titleZh": "\u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "Yahoo",
            "Snapchat",
            "Twitter",
            "Oracle",
            "eBay",
            "Walmart Labs",
            "Expedia",
            "Pinterest",
            "Zillow",
            "Two Sigma",
            "Akuna Capital"
        ]
    },
    {
        "leetId": "296",
        "link": "best-meeting-point",
        "title": "Best Meeting Point",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "41",
        "questionDescription": "\n<p>A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using <a href=\"http://en.wikipedia.org/wiki/Taxicab_geometry\" target=\"_blank\">Manhattan Distance</a>, where distance(p1, p2) = <code>|p2.x - p1.x| + |p2.y - p1.y|</code>.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> \n\n1 - 0 - 0 - 0 - 1\n|   |   |   |   |\n0 - 0 - 0 - 0 - 0\n|   |   |   |   |\n0 - 0 - 1 - 0 - 0\n\n<strong>Output: 6 \n\nExplanation: </strong>Given three people living at <code>(0,0)</code>, <code>(0,4)</code>, and <code>(2,2)</code>:\n\u00a0            The point <code>(0,2)</code> is an ideal meeting point, as the total travel distance \n\u00a0            of 2+2+2=6 is minimal. So return 6.</pre>\n",
        "questionDescriptionZh": "\n<p>A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using <a href=\"http://en.wikipedia.org/wiki/Taxicab_geometry\" target=\"_blank\">Manhattan Distance</a>, where distance(p1, p2) = <code>|p2.x - p1.x| + |p2.y - p1.y|</code>.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> \n\n1 - 0 - 0 - 0 - 1\n|   |   |   |   |\n0 - 0 - 0 - 0 - 0\n|   |   |   |   |\n0 - 0 - 1 - 0 - 0\n\n<strong>Output: 6 \n\nExplanation: </strong>Given three people living at <code>(0,0)</code>, <code>(0,4)</code>, and <code>(2,2)</code>:\n\u00a0            The point <code>(0,2)</code> is an ideal meeting point, as the total travel distance \n\u00a0            of 2+2+2=6 is minimal. So return 6.</pre>\n",
        "companies": [
            "Google",
            "Facebook",
            "LinkedIn",
            "Yahoo",
            "Twitter"
        ]
    },
    {
        "leetId": "297",
        "link": "serialize-and-deserialize-binary-tree",
        "title": "Serialize and Deserialize Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "38.0%",
        "questionDescription": "<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\r\n\r\n<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\r\n\r\n<p><strong>Example:&nbsp;</strong></p>\r\n\r\n<pre>\r\nYou may serialize the following tree:\r\n\r\n    1\r\n   / \\\r\n  2   3\r\n     / \\\r\n    4   5\r\n\r\nas <code>&quot;[1,2,3,null,null,4,5]&quot;</code>\r\n</pre>\r\n\r\n<p><strong>Clarification:</strong> The above format is the same as <a href=\"/faq/#binary-tree\">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.</p>\r\n",
        "questionDescriptionZh": "<p>\u5e8f\u5217\u5316\u662f\u5c06\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6216\u8005\u5bf9\u8c61\u8f6c\u6362\u4e3a\u8fde\u7eed\u7684\u6bd4\u7279\u4f4d\u7684\u64cd\u4f5c\uff0c\u8fdb\u800c\u53ef\u4ee5\u5c06\u8f6c\u6362\u540e\u7684\u6570\u636e\u5b58\u50a8\u5728\u4e00\u4e2a\u6587\u4ef6\u6216\u8005\u5185\u5b58\u4e2d\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u5230\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\uff0c\u91c7\u53d6\u76f8\u53cd\u65b9\u5f0f\u91cd\u6784\u5f97\u5230\u539f\u6570\u636e\u3002</p>\n\n<p>\u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5b9e\u73b0\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u3002\u8fd9\u91cc\u4e0d\u9650\u5b9a\u4f60\u7684\u5e8f\u5217 / \u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u6267\u884c\u903b\u8f91\uff0c\u4f60\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2a\u4e8c\u53c9\u6811\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u4e14\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u539f\u59cb\u7684\u6811\u7ed3\u6784\u3002</p>\n\n<p><strong>\u793a\u4f8b:&nbsp;</strong></p>\n\n<pre>\u4f60\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4e8c\u53c9\u6811\uff1a\n\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n\n\u5e8f\u5217\u5316\u4e3a <code>&quot;[1,2,3,null,null,4,5]&quot;</code></pre>\n\n<p><strong>\u63d0\u793a:&nbsp;</strong>\u8fd9\u4e0e LeetCode \u76ee\u524d\u4f7f\u7528\u7684\u65b9\u5f0f\u4e00\u81f4\uff0c\u8be6\u60c5\u8bf7\u53c2\u9605&nbsp;<a href=\"/faq/#binary-tree\">LeetCode \u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u7684\u683c\u5f0f</a>\u3002\u4f60\u5e76\u975e\u5fc5\u987b\u91c7\u53d6\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u91c7\u7528\u5176\u4ed6\u7684\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p>\n\n<p><strong>\u8bf4\u660e:&nbsp;</strong>\u4e0d\u8981\u4f7f\u7528\u7c7b\u7684\u6210\u5458 / \u5168\u5c40 / \u9759\u6001\u53d8\u91cf\u6765\u5b58\u50a8\u72b6\u6001\uff0c\u4f60\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u5e94\u8be5\u662f\u65e0\u72b6\u6001\u7684\u3002</p>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Oracle",
            "VMware",
            "Salesforce",
            "Intuit",
            "Indeed",
            "Quora",
            "Tableau",
            "Groupon"
        ]
    },
    {
        "leetId": "298",
        "link": "binary-tree-longest-consecutive-sequence",
        "title": "Binary Tree Longest Consecutive Sequence",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "19",
        "questionDescription": "\n<p>Given a binary tree, find the length of the longest consecutive sequence path.</p>\n<p>The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong>\n\n   1\n    \\\n     3\n    / \\\n   2   4\n        \\\n         5\n\n<strong>Output:</strong> <code>3</code>\n\n<strong>Explanation: </strong>Longest consecutive sequence path is <code>3-4-5</code><span style='font-family: sans-serif, Arial, Verdana, \"Trebuchet MS\";'>, so return </span><code>3</code><span style='font-family: sans-serif, Arial, Verdana, \"Trebuchet MS\";'>.</span></pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:\n\n</strong>   2\n    \\\n     3\n    / \n   2    \n  / \n 1\n\n<strong>Output: 2 \n\nExplanation: </strong>Longest consecutive sequence path is <code>2-3</code><span style='font-family: sans-serif, Arial, Verdana, \"Trebuchet MS\";'>, not </span><code>3-2-1</code><span style='font-family: sans-serif, Arial, Verdana, \"Trebuchet MS\";'>, so return </span><code>2</code><span style='font-family: sans-serif, Arial, Verdana, \"Trebuchet MS\";'>.</span></pre>\n",
        "questionDescriptionZh": "\n<p>Given a binary tree, find the length of the longest consecutive sequence path.</p>\n<p>The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong>\n\n   1\n    \\\n     3\n    / \\\n   2   4\n        \\\n         5\n\n<strong>Output:</strong> <code>3</code>\n\n<strong>Explanation: </strong>Longest consecutive sequence path is <code>3-4-5</code><span style='font-family: sans-serif, Arial, Verdana, \"Trebuchet MS\";'>, so return </span><code>3</code><span style='font-family: sans-serif, Arial, Verdana, \"Trebuchet MS\";'>.</span></pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:\n\n</strong>   2\n    \\\n     3\n    / \n   2    \n  / \n 1\n\n<strong>Output: 2 \n\nExplanation: </strong>Longest consecutive sequence path is <code>2-3</code><span style='font-family: sans-serif, Arial, Verdana, \"Trebuchet MS\";'>, not </span><code>3-2-1</code><span style='font-family: sans-serif, Arial, Verdana, \"Trebuchet MS\";'>, so return </span><code>2</code><span style='font-family: sans-serif, Arial, Verdana, \"Trebuchet MS\";'>.</span></pre>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook"
        ]
    },
    {
        "leetId": "299",
        "link": "bulls-and-cows",
        "title": "Bulls and Cows",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "43.8%",
        "questionDescription": "<p>You are playing the following <a href=\"https://en.wikipedia.org/wiki/Bulls_and_Cows\" target=\"_blank\">Bulls and Cows</a> game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called &quot;bulls&quot;) and how many digits match the secret number but locate in the wrong position (called &quot;cows&quot;). Your friend will use successive guesses and hints to eventually derive the secret number.</p>\r\n\r\n<p>Write a function to return a hint according to the secret number and friend&#39;s guess, use <code>A</code> to indicate the bulls and <code>B</code> to indicate the cows.&nbsp;</p>\r\n\r\n<p>Please note that both secret number and friend&#39;s guess may contain duplicate digits.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> secret = &quot;1807&quot;, guess = &quot;7810&quot;\r\n\r\n<strong>Output:</strong> &quot;1A3B&quot;\r\n\r\n<strong>Explanation:</strong> <code>1</code><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\"> bull and </span><code>3</code><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\"> cows. The bull is </span><code>8</code><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">, the cows are </span><code>0</code><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">, </span><code>1</code><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\"> and </span><code>7<font face=\"sans-serif, Arial, Verdana, Trebuchet MS\">.</font></code></pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> secret = &quot;1123&quot;, guess = &quot;0111&quot;\r\n\r\n<strong>Output:</strong> &quot;1A1B&quot;\r\n\r\n<strong>Explanation: </strong>The 1st <code>1 </code><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">in friend&#39;s guess is a bull, the 2nd or 3rd </span><code>1</code><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\"> is a cow</span><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">.</span></pre>\r\n\r\n<p><strong>Note: </strong>You may assume that the secret number and your friend&#39;s guess only contain digits, and their lengths are always equal.</p>",
        "questionDescriptionZh": "<p>\u4f60\u6b63\u5728\u548c\u4f60\u7684\u670b\u53cb\u73a9&nbsp;<a href=\"https://baike.baidu.com/item/%E7%8C%9C%E6%95%B0%E5%AD%97/83200?fromtitle=Bulls+and+Cows&amp;fromid=12003488&amp;fr=aladdin\" target=\"_blank\">\u731c\u6570\u5b57\uff08Bulls and Cows\uff09</a>\u6e38\u620f\uff1a\u4f60\u5199\u4e0b\u4e00\u4e2a\u6570\u5b57\u8ba9\u4f60\u7684\u670b\u53cb\u731c\u3002\u6bcf\u6b21\u4ed6\u731c\u6d4b\u540e\uff0c\u4f60\u7ed9\u4ed6\u4e00\u4e2a\u63d0\u793a\uff0c\u544a\u8bc9\u4ed6\u6709\u591a\u5c11\u4f4d\u6570\u5b57\u548c\u786e\u5207\u4f4d\u7f6e\u90fd\u731c\u5bf9\u4e86\uff08\u79f0\u4e3a&ldquo;Bulls&rdquo;, \u516c\u725b\uff09\uff0c\u6709\u591a\u5c11\u4f4d\u6570\u5b57\u731c\u5bf9\u4e86\u4f46\u662f\u4f4d\u7f6e\u4e0d\u5bf9\uff08\u79f0\u4e3a&ldquo;Cows&rdquo;, \u5976\u725b\uff09\u3002\u4f60\u7684\u670b\u53cb\u5c06\u4f1a\u6839\u636e\u63d0\u793a\u7ee7\u7eed\u731c\uff0c\u76f4\u5230\u731c\u51fa\u79d8\u5bc6\u6570\u5b57\u3002</p>\n\n<p>\u8bf7\u5199\u51fa\u4e00\u4e2a\u6839\u636e\u79d8\u5bc6\u6570\u5b57\u548c\u670b\u53cb\u7684\u731c\u6d4b\u6570\u8fd4\u56de\u63d0\u793a\u7684\u51fd\u6570\uff0c\u7528 <code>A</code> \u8868\u793a\u516c\u725b\uff0c\u7528&nbsp;<code>B</code>&nbsp;\u8868\u793a\u5976\u725b\u3002</p>\n\n<p>\u8bf7\u6ce8\u610f\u79d8\u5bc6\u6570\u5b57\u548c\u670b\u53cb\u7684\u731c\u6d4b\u6570\u90fd\u53ef\u80fd\u542b\u6709\u91cd\u590d\u6570\u5b57\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> secret = &quot;1807&quot;, guess = &quot;7810&quot;\n\n<strong>\u8f93\u51fa:</strong> &quot;1A3B&quot;\n\n<strong>\u89e3\u91ca:</strong> <code>1</code>&nbsp;\u516c\u725b\u548c&nbsp;<code>3</code>&nbsp;\u5976\u725b\u3002\u516c\u725b\u662f <code>8</code>\uff0c\u5976\u725b\u662f <code>0</code>, <code>1</code>&nbsp;\u548c <code>7</code>\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> secret = &quot;1123&quot;, guess = &quot;0111&quot;\n\n<strong>\u8f93\u51fa:</strong> &quot;1A1B&quot;\n\n<strong>\u89e3\u91ca: </strong>\u670b\u53cb\u731c\u6d4b\u6570\u4e2d\u7684\u7b2c\u4e00\u4e2a <code>1</code>&nbsp;\u662f\u516c\u725b\uff0c\u7b2c\u4e8c\u4e2a\u6216\u7b2c\u4e09\u4e2a <code>1</code>&nbsp;\u53ef\u88ab\u89c6\u4e3a\u5976\u725b\u3002</pre>\n\n<p><strong>\u8bf4\u660e: </strong>\u4f60\u53ef\u4ee5\u5047\u8bbe\u79d8\u5bc6\u6570\u5b57\u548c\u670b\u53cb\u7684\u731c\u6d4b\u6570\u90fd\u53ea\u5305\u542b\u6570\u5b57\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u957f\u5ea6\u6c38\u8fdc\u76f8\u7b49\u3002</p>\n",
        "titleZh": "\u731c\u6570\u5b57\u6e38\u620f",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Zillow"
        ]
    },
    {
        "leetId": "300",
        "link": "longest-increasing-subsequence",
        "title": "Longest Increasing Subsequence",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "40.6%",
        "questionDescription": "<p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[10,9,2,5,3,7,101,18]\r\n</code><b>Output: </b>4 \r\n<strong>Explanation: </strong>The longest increasing subsequence is <code>[2,3,7,101]</code>, therefore the length is <code>4</code>. </pre>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li>There may be more than one LIS combination, it is only necessary for you to return the length.</li>\r\n\t<li>Your algorithm should run in O(<i>n<sup>2</sup></i>) complexity.</li>\r\n</ul>\r\n\r\n<p><b>Follow up:</b> Could you improve it to O(<i>n</i> log <i>n</i>) time complexity?</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[10,9,2,5,3,7,101,18]\n</code><strong>\u8f93\u51fa: </strong>4 \n<strong>\u89e3\u91ca: </strong>\u6700\u957f\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u662f&nbsp;<code>[2,3,7,101]\uff0c</code>\u5b83\u7684\u957f\u5ea6\u662f <code>4</code>\u3002</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u53ef\u80fd\u4f1a\u6709\u591a\u79cd\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u7ec4\u5408\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u5bf9\u5e94\u7684\u957f\u5ea6\u5373\u53ef\u3002</li>\n\t<li>\u4f60\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a&nbsp;O(<em>n<sup>2</sup></em>) \u3002</li>\n</ul>\n\n<p><strong>\u8fdb\u9636:</strong> \u4f60\u80fd\u5c06\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230&nbsp;O(<em>n</em> log <em>n</em>) \u5417?</p>\n",
        "titleZh": "\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Airbnb",
            "Twitter",
            "Yelp",
            "VMware",
            "Salesforce",
            "Pocket Gems",
            "Wish"
        ]
    },
    {
        "leetId": "301",
        "link": "remove-invalid-parentheses",
        "title": "Remove Invalid Parentheses",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "38.7%",
        "questionDescription": "<p>Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;The input string may contain letters other than the parentheses <code>(</code> and <code>)</code>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;()())()&quot;\r\n<b>Output:</b> [&quot;()()()&quot;, &quot;(())()&quot;]\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;(a)())()&quot;\r\n<b>Output:</b> [&quot;(a)()()&quot;, &quot;(a())()&quot;]\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;)(&quot;\r\n<b>Output: </b>[&quot;&quot;]\r\n</pre>",
        "questionDescriptionZh": "<p>\u5220\u9664\u6700\u5c0f\u6570\u91cf\u7684\u65e0\u6548\u62ec\u53f7\uff0c\u4f7f\u5f97\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u6709\u6548\uff0c\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong> \u8f93\u5165\u53ef\u80fd\u5305\u542b\u4e86\u9664&nbsp;<code>(</code>&nbsp;\u548c&nbsp;<code>)</code>&nbsp;\u4ee5\u5916\u7684\u5b57\u7b26\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;()())()&quot;\n<strong>\u8f93\u51fa:</strong> [&quot;()()()&quot;, &quot;(())()&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;(a)())()&quot;\n<strong>\u8f93\u51fa:</strong> [&quot;(a)()()&quot;, &quot;(a())()&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;)(&quot;\n<strong>\u8f93\u51fa: </strong>[&quot;&quot;]</pre>\n",
        "titleZh": "\u5220\u9664\u65e0\u6548\u7684\u62ec\u53f7",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Uber"
        ]
    },
    {
        "leetId": "302",
        "link": "smallest-rectangle-enclosing-black-pixels",
        "title": "Smallest Rectangle Enclosing Black Pixels",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "19",
        "questionDescription": "\n<p>An image is represented by a binary matrix with <code>0</code> as a white pixel and <code>1</code> as a black pixel. The black pixels are connected, i.e., there is only one black region. Pixels are connected horizontally and vertically. Given the location <code>(x, y)</code> of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong>\n[\n  \"0010\",\n  \"0110\",\n  \"0100\"\n]\nand <code>x = 0<font face=\"sans-serif, Arial, Verdana, Trebuchet MS\">, </font></code><code>y = 2</code>\n\n<strong>Output:</strong> 6\n</pre>\n",
        "questionDescriptionZh": "\n<p>An image is represented by a binary matrix with <code>0</code> as a white pixel and <code>1</code> as a black pixel. The black pixels are connected, i.e., there is only one black region. Pixels are connected horizontally and vertically. Given the location <code>(x, y)</code> of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong>\n[\n  \"0010\",\n  \"0110\",\n  \"0100\"\n]\nand <code>x = 0<font face=\"sans-serif, Arial, Verdana, Trebuchet MS\">, </font></code><code>y = 2</code>\n\n<strong>Output:</strong> 6\n</pre>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "303",
        "link": "range-sum-query-immutable",
        "title": "Range Sum Query - Immutable",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "52.7%",
        "questionDescription": "<p>Given an integer array <i>nums</i>, find the sum of the elements between indices <i>i</i> and <i>j</i> (<i>i</i> &le; <i>j</i>), inclusive.</p>\r\n\r\n<p><b>Example:</b><br>\r\n<pre>\r\nGiven nums = [-2, 0, 3, -5, 2, -1]\r\n\r\nsumRange(0, 2) -> 1\r\nsumRange(2, 5) -> -1\r\nsumRange(0, 5) -> -3\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>You may assume that the array does not change.</li>\r\n<li>There are many calls to <i>sumRange</i> function.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 &nbsp;<em>nums</em>\uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15&nbsp;<em>i&nbsp;</em>\u5230&nbsp;<em>j&nbsp;&nbsp;</em>(<em>i</em>&nbsp;&le;&nbsp;<em>j</em>) \u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b&nbsp;<em>i,&nbsp; j&nbsp;</em>\u4e24\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\u7ed9\u5b9a nums = [-2, 0, 3, -5, 2, -1]\uff0c\u6c42\u548c\u51fd\u6570\u4e3a sumRange()\n\nsumRange(0, 2) -&gt; 1\nsumRange(2, 5) -&gt; -1\nsumRange(0, 5) -&gt; -3</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e0d\u53ef\u53d8\u3002</li>\n\t<li>\u4f1a\u591a\u6b21\u8c03\u7528&nbsp;<em>sumRange</em>&nbsp;\u65b9\u6cd5\u3002</li>\n</ol>\n",
        "titleZh": "\u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u4e0d\u53ef\u53d8",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Adobe",
            "Palantir Technologies",
            "Palantir"
        ]
    },
    {
        "leetId": "304",
        "link": "range-sum-query-2d-immutable",
        "title": "Range Sum Query 2D - Immutable",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "39.1%",
        "questionDescription": "<p>Given a 2D matrix <i>matrix</i>, find the sum of the elements inside the rectangle defined by its upper left corner (<i>row</i>1, <i>col</i>1) and lower right corner (<i>row</i>2, <i>col</i>2).</p>\r\n\r\n<p>\r\n<img src=\"/static/images/courses/range_sum_query_2d.png\" border=\"0\" alt=\"Range Sum Query 2D\" /><br />\r\n<small>The above rectangle (with the red border) is defined by (row1, col1) = <b>(2, 1)</b> and (row2, col2) = <b>(4, 3)</b>, which contains sum = <b>8</b>.</small>\r\n</p>\r\n\r\n<p><b>Example:</b><br>\r\n<pre>\r\nGiven matrix = [\r\n  [3, 0, 1, 4, 2],\r\n  [5, 6, 3, 2, 1],\r\n  [1, 2, 0, 1, 5],\r\n  [4, 1, 0, 1, 7],\r\n  [1, 0, 3, 0, 5]\r\n]\r\n\r\nsumRegion(2, 1, 4, 3) -> 8\r\nsumRegion(1, 1, 2, 2) -> 11\r\nsumRegion(1, 2, 2, 4) -> 12\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>You may assume that the matrix does not change.</li>\r\n<li>There are many calls to <i>sumRegion</i> function.</li>\r\n<li>You may assume that <i>row</i>1 &le; <i>row</i>2 and <i>col</i>1 &le; <i>col</i>2.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635\uff0c\u8ba1\u7b97\u5176\u5b50\u77e9\u5f62\u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u8be5\u5b50\u77e9\u9635\u7684\u5de6\u4e0a\u89d2\u4e3a (<em>row</em>1,&nbsp;<em>col</em>1) \uff0c\u53f3\u4e0b\u89d2\u4e3a (<em>row</em>2,&nbsp;<em>col</em>2)\u3002</p>\n\n<p><img alt=\"Range Sum Query 2D\" src=\"/static/images/courses/range_sum_query_2d.png\"><br>\n<small>\u4e0a\u56fe\u5b50\u77e9\u9635\u5de6\u4e0a\u89d2&nbsp;(row1, col1) = <strong>(2, 1)</strong>&nbsp;\uff0c\u53f3\u4e0b\u89d2(row2, col2) = <strong>(4, 3)\uff0c</strong>\u8be5\u5b50\u77e9\u5f62\u5185\u5143\u7d20\u7684\u603b\u548c\u4e3a 8\u3002</small></p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\u7ed9\u5b9a matrix = [\n  [3, 0, 1, 4, 2],\n  [5, 6, 3, 2, 1],\n  [1, 2, 0, 1, 5],\n  [4, 1, 0, 1, 7],\n  [1, 0, 3, 0, 5]\n]\n\nsumRegion(2, 1, 4, 3) -&gt; 8\nsumRegion(1, 1, 2, 2) -&gt; 11\nsumRegion(1, 2, 2, 4) -&gt; 12\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u77e9\u9635\u4e0d\u53ef\u53d8\u3002</li>\n\t<li>\u4f1a\u591a\u6b21\u8c03\u7528&nbsp;<em>sumRegion&nbsp;</em>\u65b9\u6cd5<em>\u3002</em></li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<em>row</em>1 &le; <em>row</em>2 \u4e14&nbsp;<em>col</em>1 &le; <em>col</em>2\u3002</li>\n</ol>\n",
        "titleZh": "\u4e8c\u7ef4\u533a\u57df\u548c\u68c0\u7d22 - \u77e9\u9635\u4e0d\u53ef\u53d8",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Baidu",
            "Houzz"
        ]
    },
    {
        "leetId": "305",
        "link": "number-of-islands-ii",
        "title": "Number of Islands II",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "31",
        "questionDescription": "\n<p>A 2d grid map of <code>m</code> rows and <code>n</code> columns is initially filled with water. We may perform an <i>addLand</i> operation which turns the water at position (row, col) into a land. Given a list of positions to operate, <b>count the number of islands after each <i>addLand</i> operation</b>. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:</b> m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]]\n<b>Output:</b> [1,1,2,3]\n</pre>\n<p><b>Explanation:</b></p>\n<p>Initially, the 2d grid <code>grid</code> is filled with water. (Assume 0 represents water and 1 represents land).</p>\n<pre>0 0 0\n0 0 0\n0 0 0\n</pre>\n<p>Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land.</p>\n<pre>1 0 0\n0 0 0   Number of islands = 1\n0 0 0\n</pre>\n<p>Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land.</p>\n<pre>1 1 0\n0 0 0   Number of islands = 1\n0 0 0\n</pre>\n<p>Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land.</p>\n<pre>1 1 0\n0 0 1   Number of islands = 2\n0 0 0\n</pre>\n<p>Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land.</p>\n<pre>1 1 0\n0 0 1   Number of islands = 3\n0 1 0\n</pre>\n<p><b>Follow up:</b></p>\n<p>Can you do it in time complexity O(k log mn), where k is the length of the <code>positions</code>?</p>\n",
        "questionDescriptionZh": "\n<p>A 2d grid map of <code>m</code> rows and <code>n</code> columns is initially filled with water. We may perform an <i>addLand</i> operation which turns the water at position (row, col) into a land. Given a list of positions to operate, <b>count the number of islands after each <i>addLand</i> operation</b>. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:</b> m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]]\n<b>Output:</b> [1,1,2,3]\n</pre>\n<p><b>Explanation:</b></p>\n<p>Initially, the 2d grid <code>grid</code> is filled with water. (Assume 0 represents water and 1 represents land).</p>\n<pre>0 0 0\n0 0 0\n0 0 0\n</pre>\n<p>Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land.</p>\n<pre>1 0 0\n0 0 0   Number of islands = 1\n0 0 0\n</pre>\n<p>Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land.</p>\n<pre>1 1 0\n0 0 0   Number of islands = 1\n0 0 0\n</pre>\n<p>Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land.</p>\n<pre>1 1 0\n0 0 1   Number of islands = 2\n0 0 0\n</pre>\n<p>Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land.</p>\n<pre>1 1 0\n0 0 1   Number of islands = 3\n0 1 0\n</pre>\n<p><b>Follow up:</b></p>\n<p>Can you do it in time complexity O(k log mn), where k is the length of the <code>positions</code>?</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Uber",
            "Snapchat"
        ]
    },
    {
        "leetId": "306",
        "link": "additive-number",
        "title": "Additive Number",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "29.6%",
        "questionDescription": "<p>Additive number is a string whose digits can form additive sequence.</p>\r\n\r\n<p>A valid additive sequence should contain <b>at least</b> three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.</p>\r\n\r\n<p>Given a string containing only digits <code>&#39;0&#39;-&#39;9&#39;</code>, write a function to determine if it&#39;s an additive number.</p>\r\n\r\n<p><b>Note:</b> Numbers in the additive sequence <b>cannot</b> have leading zeros, so sequence <code>1, 2, 03</code> or <code>1, 02, 3</code> is invalid.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>&quot;112358&quot;</code>\r\n<b>Output:</b> true \r\n<strong>Explanation: </strong>The digits can form an additive sequence: <code>1, 1, 2, 3, 5, 8</code>. \r\n&nbsp;            1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>&quot;199100199&quot;</code>\r\n<b>Output:</b> true \r\n<strong>Explanation: </strong>The additive sequence is: <code>1, 99, 100, 199</code><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">.</span>&nbsp;\r\n&nbsp;            1 + 99 = 100, 99 + 100 = 199</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nHow would you handle overflow for very large input integers?</p>",
        "questionDescriptionZh": "<p>\u7d2f\u52a0\u6570\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7ec4\u6210\u5b83\u7684\u6570\u5b57\u53ef\u4ee5\u5f62\u6210\u7d2f\u52a0\u5e8f\u5217\u3002</p>\n\n<p>\u4e00\u4e2a\u6709\u6548\u7684\u7d2f\u52a0\u5e8f\u5217\u5fc5\u987b<strong>\u81f3\u5c11</strong>\u5305\u542b 3 \u4e2a\u6570\u3002\u9664\u4e86\u6700\u5f00\u59cb\u7684\u4e24\u4e2a\u6570\u4ee5\u5916\uff0c\u5b57\u7b26\u4e32\u4e2d\u7684\u5176\u4ed6\u6570\u90fd\u7b49\u4e8e\u5b83\u4e4b\u524d\u4e24\u4e2a\u6570\u76f8\u52a0\u7684\u548c\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57&nbsp;<code>&#39;0&#39;-&#39;9&#39;</code>&nbsp;\u7684\u5b57\u7b26\u4e32\uff0c\u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u6765\u5224\u65ad\u7ed9\u5b9a\u8f93\u5165\u662f\u5426\u662f\u7d2f\u52a0\u6570\u3002</p>\n\n<p><strong>\u8bf4\u660e:&nbsp;</strong>\u7d2f\u52a0\u5e8f\u5217\u91cc\u7684\u6570\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\uff0c\u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0&nbsp;<code>1, 2, 03</code> \u6216\u8005&nbsp;<code>1, 02, 3</code>&nbsp;\u7684\u60c5\u51b5\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>&quot;112358&quot;</code>\n<strong>\u8f93\u51fa:</strong> true \n<strong>\u89e3\u91ca: </strong>\u7d2f\u52a0\u5e8f\u5217\u4e3a: <code>1, 1, 2, 3, 5, 8 </code>\u30021 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>&quot;199100199&quot;</code>\n<strong>\u8f93\u51fa:</strong> true \n<strong>\u89e3\u91ca: </strong>\u7d2f\u52a0\u5e8f\u5217\u4e3a: <code>1, 99, 100, 199\u3002</code>1 + 99 = 100, 99 + 100 = 199</pre>\n\n<p><strong>\u8fdb\u9636:</strong><br>\n\u4f60\u5982\u4f55\u5904\u7406\u4e00\u4e2a\u6ea2\u51fa\u7684\u8fc7\u5927\u7684\u6574\u6570\u8f93\u5165?</p>\n",
        "titleZh": "\u7d2f\u52a0\u6570",
        "tags": [
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Epic Systems"
        ]
    },
    {
        "leetId": "307",
        "link": "range-sum-query-mutable",
        "title": "Range Sum Query - Mutable",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "49.0%",
        "questionDescription": "<p>Given an integer array <i>nums</i>, find the sum of the elements between indices <i>i</i> and <i>j</i> (<i>i</i> &le; <i>j</i>), inclusive.</p>\r\n\r\n<p>The <i>update(i, val)</i> function modifies <i>nums</i> by updating the element at index <i>i</i> to <i>val</i>.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nGiven nums = [1, 3, 5]\r\n\r\nsumRange(0, 2) -&gt; 9\r\nupdate(1, 2)\r\nsumRange(0, 2) -&gt; 8\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The array is only modifiable by the <i>update</i> function.</li>\r\n\t<li>You may assume the number of calls to <i>update</i> and <i>sumRange</i> function is distributed evenly.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 &nbsp;<em>nums</em>\uff0c\u6c42\u51fa\u6570\u7ec4\u4ece\u7d22\u5f15&nbsp;<em>i&nbsp;</em>\u5230&nbsp;<em>j&nbsp;&nbsp;</em>(<em>i</em>&nbsp;&le;&nbsp;<em>j</em>) \u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u5305\u542b&nbsp;<em>i,&nbsp; j&nbsp;</em>\u4e24\u70b9\u3002</p>\n\n<p><em>update(i, val)</em> \u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e0b\u6807\u4e3a&nbsp;<em>i&nbsp;</em>\u7684\u6570\u503c\u66f4\u65b0\u4e3a&nbsp;<em>val</em>\uff0c\u4ece\u800c\u5bf9\u6570\u5217\u8fdb\u884c\u4fee\u6539\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>Given nums = [1, 3, 5]\n\nsumRange(0, 2) -&gt; 9\nupdate(1, 2)\nsumRange(0, 2) -&gt; 8\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u6570\u7ec4\u4ec5\u53ef\u4ee5\u5728&nbsp;<em>update&nbsp;</em>\u51fd\u6570\u4e0b\u8fdb\u884c\u4fee\u6539\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe <em>update</em> \u51fd\u6570\u4e0e <em>sumRange</em> \u51fd\u6570\u7684\u8c03\u7528\u6b21\u6570\u662f\u5747\u5300\u5206\u5e03\u7684\u3002</li>\n</ol>\n",
        "titleZh": "\u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u53ef\u4fee\u6539",
        "tags": [
            {
                "tag": "Binary Indexed Tree",
                "link": "binary-indexed-tree",
                "tagZh": "\u6811\u72b6\u6570\u7ec4"
            },
            {
                "tag": "Segment Tree",
                "link": "segment-tree",
                "tagZh": "\u7ebf\u6bb5\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Twitter",
            "Pocket Gems"
        ]
    },
    {
        "leetId": "308",
        "link": "range-sum-query-2d-mutable",
        "title": "Range Sum Query 2D - Mutable",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "32",
        "questionDescription": "\n<p>Given a 2D matrix <i>matrix</i>, find the sum of the elements inside the rectangle defined by its upper left corner (<i>row</i>1, <i>col</i>1) and lower right corner (<i>row</i>2, <i>col</i>2).</p>\n<p>\n<img alt=\"Range Sum Query 2D\" border=\"0\" src=\"/static/images/courses/range_sum_query_2d.png\"/><br/>\n<small>The above rectangle (with the red border) is defined by (row1, col1) = <b>(2, 1)</b> and (row2, col2) = <b>(4, 3)</b>, which contains sum = <b>8</b>.</small>\n</p>\n<p><b>Example:</b><br/>\n</p><pre>Given matrix = [\n  [3, 0, 1, 4, 2],\n  [5, 6, 3, 2, 1],\n  [1, 2, 0, 1, 5],\n  [4, 1, 0, 1, 7],\n  [1, 0, 3, 0, 5]\n]\n\nsumRegion(2, 1, 4, 3) -&gt; 8\nupdate(3, 2, 2)\nsumRegion(2, 1, 4, 3) -&gt; 10\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The matrix is only modifiable by the <i>update</i> function.</li>\n<li>You may assume the number of calls to <i>update</i> and <i>sumRegion</i> function is distributed evenly.</li>\n<li>You may assume that <i>row</i>1 \u2264 <i>row</i>2 and <i>col</i>1 \u2264 <i>col</i>2.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a 2D matrix <i>matrix</i>, find the sum of the elements inside the rectangle defined by its upper left corner (<i>row</i>1, <i>col</i>1) and lower right corner (<i>row</i>2, <i>col</i>2).</p>\n<p>\n<img alt=\"Range Sum Query 2D\" border=\"0\" src=\"/static/images/courses/range_sum_query_2d.png\"/><br/>\n<small>The above rectangle (with the red border) is defined by (row1, col1) = <b>(2, 1)</b> and (row2, col2) = <b>(4, 3)</b>, which contains sum = <b>8</b>.</small>\n</p>\n<p><b>Example:</b><br/>\n</p><pre>Given matrix = [\n  [3, 0, 1, 4, 2],\n  [5, 6, 3, 2, 1],\n  [1, 2, 0, 1, 5],\n  [4, 1, 0, 1, 7],\n  [1, 0, 3, 0, 5]\n]\n\nsumRegion(2, 1, 4, 3) -&gt; 8\nupdate(3, 2, 2)\nsumRegion(2, 1, 4, 3) -&gt; 10\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The matrix is only modifiable by the <i>update</i> function.</li>\n<li>You may assume the number of calls to <i>update</i> and <i>sumRegion</i> function is distributed evenly.</li>\n<li>You may assume that <i>row</i>1 \u2264 <i>row</i>2 and <i>col</i>1 \u2264 <i>col</i>2.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "309",
        "link": "best-time-to-buy-and-sell-stock-with-cooldown",
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "45.7%",
        "questionDescription": "<p>Say you have an array for which the <i>i</i><sup>th</sup> element is the price of a given stock on day <i>i</i>.</p>\r\n\r\n<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:</p>\r\n\r\n<ul>\r\n\t<li>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</li>\r\n\t<li>After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)</li>\r\n</ul>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3,0,2]\r\n<strong>Output: </strong>3 \r\n<strong>Explanation:</strong> transactions = [buy, sell, cooldown, buy, sell]\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c<em>&nbsp;i</em>&nbsp;\u4e2a\u5143\u7d20\u4ee3\u8868\u4e86\u7b2c&nbsp;<em>i</em>&nbsp;\u5929\u7684\u80a1\u7968\u4ef7\u683c \u3002\u200b</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u8ba1\u7b97\u51fa\u6700\u5927\u5229\u6da6\u3002\u5728\u6ee1\u8db3\u4ee5\u4e0b\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09:</p>\n\n<ul>\n\t<li>\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</li>\n\t<li>\u5356\u51fa\u80a1\u7968\u540e\uff0c\u4f60\u65e0\u6cd5\u5728\u7b2c\u4e8c\u5929\u4e70\u5165\u80a1\u7968 (\u5373\u51b7\u51bb\u671f\u4e3a 1 \u5929)\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3,0,2]\n<strong>\u8f93\u51fa: </strong>3 \n<strong>\u89e3\u91ca:</strong> \u5bf9\u5e94\u7684\u4ea4\u6613\u72b6\u6001\u4e3a: [\u4e70\u5165, \u5356\u51fa, \u51b7\u51bb\u671f, \u4e70\u5165, \u5356\u51fa]</pre>\n",
        "titleZh": "\u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Alibaba"
        ]
    },
    {
        "leetId": "310",
        "link": "minimum-height-trees",
        "title": "Minimum Height Trees",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "33.8%",
        "questionDescription": "<p>For an undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.</p>\r\n\r\n<p><b>Format</b><br />\r\nThe graph contains <code>n</code> nodes which are labeled from <code>0</code> to <code>n - 1</code>. You will be given the number <code>n</code> and a list of undirected <code>edges</code> (each edge is a pair of labels).</p>\r\n\r\n<p>You can assume that no duplicate edges will appear in <code>edges</code>. Since all edges are undirected, <code>[0, 1]</code> is the same as <code>[1, 0]</code> and thus will not appear together in <code>edges</code>.</p>\r\n\r\n<p><b>Example 1 :</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>n = 4</code>, <code>edges = [[1, 0], [1, 2], [1, 3]]</code>\r\n\r\n        0\r\n        |\r\n        1\r\n       / \\\r\n      2   3 \r\n\r\n<strong>Output:</strong> <code>[1]</code>\r\n</pre>\r\n\r\n<p><b>Example 2 :</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>n = 6</code>, <code>edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]</code>\r\n\r\n     0  1  2\r\n      \\ | /\r\n        3\r\n        |\r\n        4\r\n        |\r\n        5 \r\n\r\n<strong>Output:</strong> <code>[3, 4]</code></pre>\r\n\r\n<p><b>Note</b>:</p>\r\n\r\n<ul>\r\n\t<li>According to the <a href=\"https://en.wikipedia.org/wiki/Tree_(graph_theory)\" target=\"_blank\">definition of tree on Wikipedia</a>: &ldquo;a tree is an undirected graph in which any two vertices are connected by <i>exactly</i> one path. In other words, any connected graph without simple cycles is a tree.&rdquo;</li>\r\n\t<li>The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5bf9\u4e8e\u4e00\u4e2a\u5177\u6709\u6811\u7279\u5f81\u7684\u65e0\u5411\u56fe\uff0c\u6211\u4eec\u53ef\u9009\u62e9\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u6839\u3002\u56fe\u56e0\u6b64\u53ef\u4ee5\u6210\u4e3a\u6811\uff0c\u5728\u6240\u6709\u53ef\u80fd\u7684\u6811\u4e2d\uff0c\u5177\u6709\u6700\u5c0f\u9ad8\u5ea6\u7684\u6811\u88ab\u79f0\u4e3a\u6700\u5c0f\u9ad8\u5ea6\u6811\u3002\u7ed9\u51fa\u8fd9\u6837\u7684\u4e00\u4e2a\u56fe\uff0c\u5199\u51fa\u4e00\u4e2a\u51fd\u6570\u627e\u5230\u6240\u6709\u7684\u6700\u5c0f\u9ad8\u5ea6\u6811\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6839\u8282\u70b9\u3002</p>\n\n<p><strong>\u683c\u5f0f</strong></p>\n\n<p>\u8be5\u56fe\u5305\u542b&nbsp;<code>n</code>&nbsp;\u4e2a\u8282\u70b9\uff0c\u6807\u8bb0\u4e3a&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>n - 1</code>\u3002\u7ed9\u5b9a\u6570\u5b57&nbsp;<code>n</code>&nbsp;\u548c\u4e00\u4e2a\u65e0\u5411\u8fb9&nbsp;<code>edges</code>&nbsp;\u5217\u8868\uff08\u6bcf\u4e00\u4e2a\u8fb9\u90fd\u662f\u4e00\u5bf9\u6807\u7b7e\uff09\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6ca1\u6709\u91cd\u590d\u7684\u8fb9\u4f1a\u51fa\u73b0\u5728&nbsp;<code>edges</code>&nbsp;\u4e2d\u3002\u7531\u4e8e\u6240\u6709\u7684\u8fb9\u90fd\u662f\u65e0\u5411\u8fb9\uff0c <code>[0, 1]</code>\u548c&nbsp;<code>[1, 0]</code>&nbsp;\u662f\u76f8\u540c\u7684\uff0c\u56e0\u6b64\u4e0d\u4f1a\u540c\u65f6\u51fa\u73b0\u5728&nbsp;<code>edges</code>&nbsp;\u91cc\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>n = 4</code>, <code>edges = [[1, 0], [1, 2], [1, 3]]</code>\n\n        0\n        |\n        1\n       / \\\n      2   3 \n\n<strong>\u8f93\u51fa:</strong> <code>[1]</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>n = 6</code>, <code>edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]</code>\n\n     0  1  2\n      \\ | /\n        3\n        |\n        4\n        |\n        5 \n\n<strong>\u8f93\u51fa:</strong> <code>[3, 4]</code></pre>\n\n<p><strong>\u8bf4\u660e</strong>:</p>\n\n<ul>\n\t<li>&nbsp;\u6839\u636e<a href=\"https://baike.baidu.com/item/%E6%A0%91/2699484?fromtitle=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84+%E6%A0%91&amp;fromid=12062173&amp;fr=aladdin\" target=\"_blank\">\u6811\u7684\u5b9a\u4e49</a>\uff0c\u6811\u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5176\u4e2d\u4efb\u4f55\u4e24\u4e2a\u9876\u70b9\u53ea\u901a\u8fc7\u4e00\u6761\u8def\u5f84\u8fde\u63a5\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a\u4efb\u4f55\u6ca1\u6709\u7b80\u5355\u73af\u8def\u7684\u8fde\u901a\u56fe\u90fd\u662f\u4e00\u68f5\u6811\u3002</li>\n\t<li>\u6811\u7684\u9ad8\u5ea6\u662f\u6307\u6839\u8282\u70b9\u548c\u53f6\u5b50\u8282\u70b9\u4e4b\u95f4\u6700\u957f\u5411\u4e0b\u8def\u5f84\u4e0a\u8fb9\u7684\u6570\u91cf\u3002</li>\n</ul>\n",
        "titleZh": "\u6700\u5c0f\u9ad8\u5ea6\u6811",
        "tags": [
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "311",
        "link": "sparse-matrix-multiplication",
        "title": "Sparse Matrix Multiplication",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "34",
        "questionDescription": "\n<p>Given two <a href=\"https://en.wikipedia.org/wiki/Sparse_matrix\" target=\"_blank\">sparse matrices</a> <b>A</b> and <b>B</b>, return the result of <b>AB</b>.</p>\n<p>You may assume that <b>A</b>'s column number is equal to <b>B</b>'s row number.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:\n\n</b><strong>A</strong> = [\n  [ 1, 0, 0],\n  [-1, 0, 3]\n]\n\n<strong>B</strong> = [\n  [ 7, 0, 0 ],\n  [ 0, 0, 0 ],\n  [ 0, 0, 1 ]\n]\n\n<strong>Output:</strong>\n\n     |  1 0 0 |   | 7 0 0 |   |  7 0 0 |\n<b>AB</b> = | -1 0 3 | x | 0 0 0 | = | -7 0 3 |\n                  | 0 0 1 |\n</pre>\n",
        "questionDescriptionZh": "\n<p>Given two <a href=\"https://en.wikipedia.org/wiki/Sparse_matrix\" target=\"_blank\">sparse matrices</a> <b>A</b> and <b>B</b>, return the result of <b>AB</b>.</p>\n<p>You may assume that <b>A</b>'s column number is equal to <b>B</b>'s row number.</p>\n<p><b>Example:</b></p>\n<pre><b>Input:\n\n</b><strong>A</strong> = [\n  [ 1, 0, 0],\n  [-1, 0, 3]\n]\n\n<strong>B</strong> = [\n  [ 7, 0, 0 ],\n  [ 0, 0, 0 ],\n  [ 0, 0, 1 ]\n]\n\n<strong>Output:</strong>\n\n     |  1 0 0 |   | 7 0 0 |   |  7 0 0 |\n<b>AB</b> = | -1 0 3 | x | 0 0 0 | = | -7 0 3 |\n                  | 0 0 1 |\n</pre>\n",
        "companies": [
            "Google",
            "Facebook",
            "Bloomberg",
            "Apple",
            "LinkedIn",
            "Goldman Sachs"
        ]
    },
    {
        "leetId": "312",
        "link": "burst-balloons",
        "title": "Burst Balloons",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "51.7%",
        "questionDescription": "<p>Given <code>n</code> balloons, indexed from <code>0</code> to <code>n-1</code>. Each balloon is painted with a number on it represented by array <code>nums</code>. You are asked to burst all the balloons. If the you burst balloon <code>i</code> you will get <code>nums[left] * nums[i] * nums[right]</code> coins. Here <code>left</code> and <code>right</code> are adjacent indices of <code>i</code>. After the burst, the <code>left</code> and <code>right</code> then becomes adjacent.</p>\r\n\r\n<p>Find the maximum coins you can collect by bursting the balloons wisely.</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>You may imagine <code>nums[-1] = nums[n] = 1</code>. They are not real therefore you can not burst them.</li>\r\n\t<li>0 &le; <code>n</code> &le; 500, 0 &le; <code>nums[i]</code> &le; 100</li>\r\n</ul>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[3,1,5,8]</code>\r\n<b>Output:</b> <code>167 \r\n<strong>Explanation: </strong></code>nums = [3,1,5,8] --&gt; [3,5,8] --&gt;   [3,8]   --&gt;  [8]  --&gt; []\r\n&nbsp;            coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167\r\n</pre>",
        "questionDescriptionZh": "<p>\u6709 <code>n</code> \u4e2a\u6c14\u7403\uff0c\u7f16\u53f7\u4e3a<code>0</code> \u5230 <code>n-1</code>\uff0c\u6bcf\u4e2a\u6c14\u7403\u4e0a\u90fd\u6807\u6709\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd9\u4e9b\u6570\u5b57\u5b58\u5728\u6570\u7ec4&nbsp;<code>nums</code>&nbsp;\u4e2d\u3002</p>\n\n<p>\u73b0\u5728\u8981\u6c42\u4f60\u6233\u7834\u6240\u6709\u7684\u6c14\u7403\u3002\u6bcf\u5f53\u4f60\u6233\u7834\u4e00\u4e2a\u6c14\u7403 <code>i</code> \u65f6\uff0c\u4f60\u53ef\u4ee5\u83b7\u5f97&nbsp;<code>nums[left] * nums[i] * nums[right]</code>&nbsp;\u4e2a\u786c\u5e01\u3002&nbsp;\u8fd9\u91cc\u7684&nbsp;<code>left</code>&nbsp;\u548c&nbsp;<code>right</code>&nbsp;\u4ee3\u8868\u548c&nbsp;<code>i</code>&nbsp;\u76f8\u90bb\u7684\u4e24\u4e2a\u6c14\u7403\u7684\u5e8f\u53f7\u3002\u6ce8\u610f\u5f53\u4f60\u6233\u7834\u4e86\u6c14\u7403 <code>i</code> \u540e\uff0c\u6c14\u7403&nbsp;<code>left</code>&nbsp;\u548c\u6c14\u7403&nbsp;<code>right</code>&nbsp;\u5c31\u53d8\u6210\u4e86\u76f8\u90bb\u7684\u6c14\u7403\u3002</p>\n\n<p>\u6c42\u6240\u80fd\u83b7\u5f97\u786c\u5e01\u7684\u6700\u5927\u6570\u91cf\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>nums[-1] = nums[n] = 1</code>\uff0c\u4f46\u6ce8\u610f\u5b83\u4eec\u4e0d\u662f\u771f\u5b9e\u5b58\u5728\u7684\u6240\u4ee5\u5e76\u4e0d\u80fd\u88ab\u6233\u7834\u3002</li>\n\t<li>0 &le; <code>n</code> &le; 500, 0 &le; <code>nums[i]</code> &le; 100</li>\n</ul>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[3,1,5,8]</code>\n<strong>\u8f93\u51fa:</strong> <code>167 \n<strong>\u89e3\u91ca: </strong></code>nums = [3,1,5,8] --&gt; [3,5,8] --&gt;   [3,8]   --&gt;  [8]  --&gt; []\n&nbsp;    coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167\n</pre>\n",
        "titleZh": "\u6233\u6c14\u7403",
        "tags": [
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Adobe",
            "Alibaba",
            "Snapchat",
            "Samsung"
        ]
    },
    {
        "leetId": "313",
        "link": "super-ugly-number",
        "title": "Super Ugly Number",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "54.3%",
        "questionDescription": "<p>Write a program to find the <code>n<sup>th</sup></code> super ugly number.</p>\r\n\r\n<p>Super ugly numbers are positive numbers whose all prime factors are in the given prime list <code>primes</code> of size <code>k</code>.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> n = 12, <code>primes</code> = <code>[2,7,13,19]</code>\r\n<b>Output:</b> 32 \r\n<strong>Explanation: </strong><code>[1,2,4,7,8,13,14,16,19,26,28,32] </code>is the sequence of the first 12 \r\n             super ugly numbers given <code>primes</code> = <code>[2,7,13,19]</code> of size 4.</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li><code>1</code> is a super ugly number for any given <code>primes</code>.</li>\r\n\t<li>The given numbers in <code>primes</code> are in ascending order.</li>\r\n\t<li>0 &lt; <code>k</code> &le; 100, 0 &lt; <code>n</code> &le; 10<sup>6</sup>, 0 &lt; <code>primes[i]</code> &lt; 1000.</li>\r\n\t<li>The n<sup>th</sup> super ugly number is guaranteed to fit in a 32-bit signed integer.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u6bb5\u7a0b\u5e8f\u6765\u67e5\u627e\u7b2c <code><em>n</em></code> \u4e2a\u8d85\u7ea7\u4e11\u6570\u3002</p>\n\n<p>\u8d85\u7ea7\u4e11\u6570\u662f\u6307\u5176\u6240\u6709\u8d28\u56e0\u6570\u90fd\u662f\u957f\u5ea6\u4e3a&nbsp;<code>k</code>&nbsp;\u7684\u8d28\u6570\u5217\u8868&nbsp;<code>primes</code>&nbsp;\u4e2d\u7684\u6b63\u6574\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 12, <code>primes</code> = <code>[2,7,13,19]</code>\n<strong>\u8f93\u51fa:</strong> 32 \n<strong>\u89e3\u91ca: </strong>\u7ed9\u5b9a\u957f\u5ea6\u4e3a 4 \u7684\u8d28\u6570\u5217\u8868 primes = [2,7,13,19]\uff0c\u524d 12 \u4e2a\u8d85\u7ea7\u4e11\u6570\u5e8f\u5217\u4e3a\uff1a[1,2,4,7,8,13,14,16,19,26,28,32] \u3002</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>1</code>&nbsp;\u662f\u4efb\u4f55\u7ed9\u5b9a&nbsp;<code>primes</code>&nbsp;\u7684\u8d85\u7ea7\u4e11\u6570\u3002</li>\n\t<li>&nbsp;\u7ed9\u5b9a&nbsp;<code>primes</code>&nbsp;\u4e2d\u7684\u6570\u5b57\u4ee5\u5347\u5e8f\u6392\u5217\u3002</li>\n\t<li>0 &lt; <code>k</code> &le; 100, 0 &lt; <code>n</code> &le; 10<sup>6</sup>, 0 &lt; <code>primes[i]</code> &lt; 1000 \u3002</li>\n\t<li>\u7b2c&nbsp;<code>n</code>&nbsp;\u4e2a\u8d85\u7ea7\u4e11\u6570\u786e\u4fdd\u5728 32 \u4f4d\u6709\u7b26\u6574\u6570\u8303\u56f4\u5185\u3002</li>\n</ul>\n",
        "titleZh": "\u8d85\u7ea7\u4e11\u6570",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon"
        ]
    },
    {
        "leetId": "314",
        "link": "binary-tree-vertical-order-traversal",
        "title": "Binary Tree Vertical Order Traversal",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "46",
        "questionDescription": "\n<p>Given a binary tree, return the <i>vertical order</i> traversal of its nodes' values. (ie, from top to bottom, column by column).</p>\n<p>If two nodes are in the same row and column, the order should be from <b>left to right</b>.</p>\n<p><b>Examples 1:</b></p>\n<pre><strong>Input:</strong> <code>[3,9,20,null,null,15,7]\n</code>\n   3\n  /\\\n /  \\\n 9  20\n    /\\\n   /  \\\n  15   7 \n\n<strong>Output:</strong>\n\n[\n  [9],\n  [3,15],\n  [20],\n  [7]\n]\n</pre>\n<p><b>Examples 2:</b></p>\n<pre><strong>Input: </strong><code>[3,9,8,4,0,1,7]\n\n</code>     3\n    /\\\n   /  \\\n   9   8\n  /\\  /\\\n /  \\/  \\\n 4  01   7 \n\n<strong>Output:</strong>\n\n[\n  [4],\n  [9],\n  [3,0,1],\n  [8],\n  [7]\n]\n</pre>\n<p><b>Examples 3:</b></p>\n<pre><strong>Input:</strong> <code>[3,9,8,4,0,1,7,null,null,null,2,5]</code> (0's right child is 2 and 1's left child is 5)\n\n     3\n    /\\\n   /  \\\n   9   8\n  /\\  /\\\n /  \\/  \\\n 4  01   7\n    /\\\n   /  \\\n   5   2\n\n<strong>Output:</strong>\n\n[\n  [4],\n  [9,5],\n  [3,0,1],\n  [8,2],\n  [7]\n]\n</pre>\n",
        "questionDescriptionZh": "\n<p>Given a binary tree, return the <i>vertical order</i> traversal of its nodes' values. (ie, from top to bottom, column by column).</p>\n<p>If two nodes are in the same row and column, the order should be from <b>left to right</b>.</p>\n<p><b>Examples 1:</b></p>\n<pre><strong>Input:</strong> <code>[3,9,20,null,null,15,7]\n</code>\n   3\n  /\\\n /  \\\n 9  20\n    /\\\n   /  \\\n  15   7 \n\n<strong>Output:</strong>\n\n[\n  [9],\n  [3,15],\n  [20],\n  [7]\n]\n</pre>\n<p><b>Examples 2:</b></p>\n<pre><strong>Input: </strong><code>[3,9,8,4,0,1,7]\n\n</code>     3\n    /\\\n   /  \\\n   9   8\n  /\\  /\\\n /  \\/  \\\n 4  01   7 \n\n<strong>Output:</strong>\n\n[\n  [4],\n  [9],\n  [3,0,1],\n  [8],\n  [7]\n]\n</pre>\n<p><b>Examples 3:</b></p>\n<pre><strong>Input:</strong> <code>[3,9,8,4,0,1,7,null,null,null,2,5]</code> (0's right child is 2 and 1's left child is 5)\n\n     3\n    /\\\n   /  \\\n   9   8\n  /\\  /\\\n /  \\/  \\\n 4  01   7\n    /\\\n   /  \\\n   5   2\n\n<strong>Output:</strong>\n\n[\n  [4],\n  [9,5],\n  [3,0,1],\n  [8,2],\n  [7]\n]\n</pre>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Snapchat",
            "Oracle"
        ]
    },
    {
        "leetId": "315",
        "link": "count-of-smaller-numbers-after-self",
        "title": "Count of Smaller Numbers After Self",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "37.8%",
        "questionDescription": "<p>You are given an integer array <i>nums</i> and you have to return a new <i>counts</i> array. The <i>counts</i> array has the property where <code>counts[i]</code> is the number of smaller elements to the right of <code>nums[i]</code>.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [5,2,6,1]\r\n<strong>Output:</strong> <code>[2,1,1,0] \r\n<strong>Explanation:</strong></code>\r\nTo the right of 5 there are <b>2</b> smaller elements (2 and 1).\r\nTo the right of 2 there is only <b>1</b> smaller element (1).\r\nTo the right of 6 there is <b>1</b> smaller element (1).\r\nTo the right of 1 there is <b>0</b> smaller element.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <em>nums</em>\uff0c\u6309\u8981\u6c42\u8fd4\u56de\u4e00\u4e2a\u65b0\u6570\u7ec4&nbsp;<em>counts</em>\u3002\u6570\u7ec4 <em>counts</em> \u6709\u8be5\u6027\u8d28\uff1a <code>counts[i]</code> \u7684\u503c\u662f&nbsp; <code>nums[i]</code> \u53f3\u4fa7\u5c0f\u4e8e&nbsp;<code>nums[i]</code> \u7684\u5143\u7d20\u7684\u6570\u91cf\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [5,2,6,1]\n<strong>\u8f93\u51fa:</strong> <code>[2,1,1,0] \n<strong>\u89e3\u91ca:</strong></code>\n5 \u7684\u53f3\u4fa7\u6709 <strong>2 </strong>\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (2 \u548c 1).\n2 \u7684\u53f3\u4fa7\u4ec5\u6709 <strong>1 </strong>\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1).\n6 \u7684\u53f3\u4fa7\u6709 <strong>1 </strong>\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1).\n1 \u7684\u53f3\u4fa7\u6709 <strong>0 </strong>\u4e2a\u66f4\u5c0f\u7684\u5143\u7d20.\n</pre>\n",
        "titleZh": "\u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570",
        "tags": [
            {
                "tag": "Binary Indexed Tree",
                "link": "binary-indexed-tree",
                "tagZh": "\u6811\u72b6\u6570\u7ec4"
            },
            {
                "tag": "Segment Tree",
                "link": "segment-tree",
                "tagZh": "\u7ebf\u6bb5\u6811"
            },
            {
                "tag": "Binary Search Tree",
                "link": "binary-search-tree",
                "tagZh": "\u4e8c\u53c9\u641c\u7d22\u6811"
            },
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Adobe",
            "Apple",
            "Dropbox"
        ]
    },
    {
        "leetId": "316",
        "link": "remove-duplicate-letters",
        "title": "Remove Duplicate Letters",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "29.2%",
        "questionDescription": "<p>Given a string which contains only lowercase letters, remove duplicate letters so that every letter appear once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>&quot;bcabc&quot;</code>\r\n<b>Output:</b> <code>&quot;abc&quot;</code>\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>&quot;cbacdcbc&quot;</code>\r\n<b>Output:</b> <code>&quot;acdb&quot;</code>\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u53bb\u9664\u5b57\u7b26\u4e32\u4e2d\u91cd\u590d\u7684\u5b57\u6bcd\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5b57\u6bcd\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\u9700\u4fdd\u8bc1\u8fd4\u56de\u7ed3\u679c\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\uff08\u8981\u6c42\u4e0d\u80fd\u6253\u4e71\u5176\u4ed6\u5b57\u7b26\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>&quot;bcabc&quot;</code>\n<strong>\u8f93\u51fa:</strong> <code>&quot;abc&quot;</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>&quot;cbacdcbc&quot;</code>\n<strong>\u8f93\u51fa:</strong> <code>&quot;acdb&quot;</code></pre>\n",
        "titleZh": "\u53bb\u9664\u91cd\u590d\u5b57\u6bcd",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Microsoft",
            "Bloomberg"
        ]
    },
    {
        "leetId": "317",
        "link": "shortest-distance-from-all-buildings",
        "title": "Shortest Distance from All Buildings",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "46",
        "questionDescription": "\n<p>You want to build a house on an <i>empty</i> land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values <b>0</b>, <b>1</b> or <b>2</b>, where:</p>\n<ul>\n<li>Each <b>0</b> marks an empty land which you can pass by freely.</li>\n<li>Each <b>1</b> marks a building which you cannot pass through.</li>\n<li>Each <b>2</b> marks an obstacle which you cannot pass through.</li>\n</ul>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]\n\n1 - 0 - 2 - 0 - 1\n|   |   |   |   |\n0 - 0 - 0 - 0 - 0\n|   |   |   |   |\n0 - 0 - 1 - 0 - 0\n\n<strong>Output:</strong> 7 \n\n<strong>Explanation:</strong> Given three buildings at <code>(0,0)</code>, <code>(0,4)</code>, <code>(2,2)</code>, and an obstacle at <code>(0,2),\n             t</code>he point <code>(1,2)</code> is an ideal empty land to build a house, as the total \n\u00a0            travel distance of 3+3+1=7 is minimal. So return 7.</pre>\n<p><b>Note:</b><br/>\nThere will be at least one building. If it is not possible to build such house according to the above rules, return -1.</p>\n",
        "questionDescriptionZh": "\n<p>You want to build a house on an <i>empty</i> land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values <b>0</b>, <b>1</b> or <b>2</b>, where:</p>\n<ul>\n<li>Each <b>0</b> marks an empty land which you can pass by freely.</li>\n<li>Each <b>1</b> marks a building which you cannot pass through.</li>\n<li>Each <b>2</b> marks an obstacle which you cannot pass through.</li>\n</ul>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]\n\n1 - 0 - 2 - 0 - 1\n|   |   |   |   |\n0 - 0 - 0 - 0 - 0\n|   |   |   |   |\n0 - 0 - 1 - 0 - 0\n\n<strong>Output:</strong> 7 \n\n<strong>Explanation:</strong> Given three buildings at <code>(0,0)</code>, <code>(0,4)</code>, <code>(2,2)</code>, and an obstacle at <code>(0,2),\n             t</code>he point <code>(1,2)</code> is an ideal empty land to build a house, as the total \n\u00a0            travel distance of 3+3+1=7 is minimal. So return 7.</pre>\n<p><b>Note:</b><br/>\nThere will be at least one building. If it is not possible to build such house according to the above rules, return -1.</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Zenefits"
        ]
    },
    {
        "leetId": "318",
        "link": "maximum-product-of-word-lengths",
        "title": "Maximum Product of Word Lengths",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "55.5%",
        "questionDescription": "<p>Given a string array <code>words</code>, find the maximum value of <code>length(word[i]) * length(word[j])</code> where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[&quot;abcw&quot;,&quot;baz&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;xtfn&quot;,&quot;abcdef&quot;]</code>\r\n<b>Output: </b><code>16 \r\n<strong>Explanation: </strong></code>The two words can be <code>&quot;abcw&quot;, &quot;xtfn&quot;</code><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">.</span></pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[&quot;a&quot;,&quot;ab&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;cd&quot;,&quot;bcd&quot;,&quot;abcd&quot;]</code>\r\n<b>Output: </b><code>4 \r\n<strong>Explanation: </strong></code>The two words can be <code>&quot;ab&quot;, &quot;cd&quot;</code><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">.</span></pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;]</code>\r\n<b>Output: </b><code>0 \r\n<strong>Explanation: </strong></code>No such pair of words.\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4&nbsp;<code>words</code>\uff0c\u627e\u5230&nbsp;<code>length(word[i]) * length(word[j])</code>&nbsp;\u7684\u6700\u5927\u503c\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e0d\u542b\u6709\u516c\u5171\u5b57\u6bcd\u3002\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u4e2a\u5355\u8bcd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u8fd4\u56de 0\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[&quot;abcw&quot;,&quot;baz&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;xtfn&quot;,&quot;abcdef&quot;]</code>\n<strong>\u8f93\u51fa: </strong><code>16 \n<strong>\u89e3\u91ca:</strong> \u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e3a<strong> </strong></code><code>&quot;abcw&quot;, &quot;xtfn&quot;</code>\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[&quot;a&quot;,&quot;ab&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;cd&quot;,&quot;bcd&quot;,&quot;abcd&quot;]</code>\n<strong>\u8f93\u51fa: </strong><code>4 \n<strong>\u89e3\u91ca: </strong></code>\u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e3a <code>&quot;ab&quot;, &quot;cd&quot;</code>\u3002</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>[&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;]</code>\n<strong>\u8f93\u51fa: </strong><code>0 \n<strong>\u89e3\u91ca: </strong>\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u4e24\u4e2a\u5355\u8bcd\u3002</code></pre>\n",
        "titleZh": "\u6700\u5927\u5355\u8bcd\u957f\u5ea6\u4e58\u79ef",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ],
        "companies": [
            "Google",
            "Works Applications"
        ]
    },
    {
        "leetId": "319",
        "link": "bulb-switcher",
        "title": "Bulb Switcher",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "39.4%",
        "questionDescription": "<p>There are <i>n</i> bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it&#39;s off or turning off if it&#39;s on). For the <i>i</i>-th round, you toggle every <i>i</i> bulb. For the <i>n</i>-th round, you only toggle the last bulb. Find how many bulbs are on after <i>n</i> rounds.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>3\r\n<strong>Output:</strong> 1 \r\n<strong>Explanation:</strong> \r\nAt first, the three bulbs are <b>[off, off, off]</b>.\r\nAfter first round, the three bulbs are <b>[on, on, on]</b>.\r\nAfter second round, the three bulbs are <b>[on, off, on]</b>.\r\nAfter third round, the three bulbs are <b>[on, off, off]</b>. \r\n\r\nSo you should return 1, because there is only one bulb is on.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u521d\u59cb\u65f6\u6709&nbsp;<em>n&nbsp;</em>\u4e2a\u706f\u6ce1\u5173\u95ed\u3002 \u7b2c 1 \u8f6e\uff0c\u4f60\u6253\u5f00\u6240\u6709\u7684\u706f\u6ce1\u3002 \u7b2c 2 \u8f6e\uff0c\u6bcf\u4e24\u4e2a\u706f\u6ce1\u4f60\u5173\u95ed\u4e00\u6b21\u3002 \u7b2c 3 \u8f6e\uff0c\u6bcf\u4e09\u4e2a\u706f\u6ce1\u5207\u6362\u4e00\u6b21\u5f00\u5173\uff08\u5982\u679c\u5173\u95ed\u5219\u5f00\u542f\uff0c\u5982\u679c\u5f00\u542f\u5219\u5173\u95ed\uff09\u3002\u7b2c&nbsp;<em>i</em> \u8f6e\uff0c\u6bcf&nbsp;<em>i&nbsp;</em>\u4e2a\u706f\u6ce1\u5207\u6362\u4e00\u6b21\u5f00\u5173\u3002 \u5bf9\u4e8e\u7b2c&nbsp;<em>n&nbsp;</em>\u8f6e\uff0c\u4f60\u53ea\u5207\u6362\u6700\u540e\u4e00\u4e2a\u706f\u6ce1\u7684\u5f00\u5173\u3002 \u627e\u51fa&nbsp;<em>n&nbsp;</em>\u8f6e\u540e\u6709\u591a\u5c11\u4e2a\u4eae\u7740\u7684\u706f\u6ce1\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>3\n<strong>\u8f93\u51fa:</strong> 1 \n<strong>\u89e3\u91ca:</strong> \n\u521d\u59cb\u65f6, \u706f\u6ce1\u72b6\u6001 <strong>[\u5173\u95ed, \u5173\u95ed, \u5173\u95ed]</strong>.\n\u7b2c\u4e00\u8f6e\u540e, \u706f\u6ce1\u72b6\u6001 <strong>[\u5f00\u542f, \u5f00\u542f, \u5f00\u542f]</strong>.\n\u7b2c\u4e8c\u8f6e\u540e, \u706f\u6ce1\u72b6\u6001 <strong>[\u5f00\u542f, \u5173\u95ed, \u5f00\u542f]</strong>.\n\u7b2c\u4e09\u8f6e\u540e, \u706f\u6ce1\u72b6\u6001 <strong>[\u5f00\u542f, \u5173\u95ed, \u5173\u95ed]</strong>. \n\n\u4f60\u5e94\u8be5\u8fd4\u56de 1\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u706f\u6ce1\u8fd8\u4eae\u7740\u3002\n</pre>\n",
        "titleZh": "\u706f\u6ce1\u5f00\u5173",
        "tags": [
            {
                "tag": "Brainteaser",
                "link": "brainteaser",
                "tagZh": "\u8111\u7b4b\u6025\u8f6c\u5f2f"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "LinkedIn",
            "Mathworks"
        ]
    },
    {
        "leetId": "320",
        "link": "generalized-abbreviation",
        "title": "Generalized Abbreviation",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "26",
        "questionDescription": "\n<p>Write a function to generate the generalized abbreviations of a word.\u00a0</p>\n<p><strong>Note:\u00a0</strong>The order of the output does not matter.</p>\n<p><b>Example:</b></p>\n<pre><strong>Input:</strong> <code>\"word\"</code>\n<strong>Output:</strong>\n[\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"]\n</pre>\n<p>\u00a0</p>\n",
        "questionDescriptionZh": "\n<p>Write a function to generate the generalized abbreviations of a word.\u00a0</p>\n<p><strong>Note:\u00a0</strong>The order of the output does not matter.</p>\n<p><b>Example:</b></p>\n<pre><strong>Input:</strong> <code>\"word\"</code>\n<strong>Output:</strong>\n[\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"]\n</pre>\n<p>\u00a0</p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "321",
        "link": "create-maximum-number",
        "title": "Create Maximum Number",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "25.3%",
        "questionDescription": "<p>Given two arrays of length <code>m</code> and <code>n</code> with digits <code>0-9</code> representing two numbers. Create the maximum number of length <code>k &lt;= m + n</code> from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the <code>k</code> digits.</p>\r\n\r\n<p><strong>Note: </strong>You should try to optimize your time and space complexity.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nnums1 = <code>[3, 4, 6, 5]</code>\r\nnums2 = <code>[9, 1, 2, 5, 8, 3]</code>\r\nk = <code>5</code>\r\n<strong>Output:</strong>\r\n<code>[9, 8, 6, 5, 3]</code></pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nnums1 = <code>[6, 7]</code>\r\nnums2 = <code>[6, 0, 4]</code>\r\nk = <code>5</code>\r\n<strong>Output:</strong>\r\n<code>[6, 7, 6, 0, 4]</code></pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nnums1 = <code>[3, 9]</code>\r\nnums2 = <code>[8, 9]</code>\r\nk = <code>3</code>\r\n<strong>Output:</strong>\r\n<code>[9, 8, 9]</code>\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u957f\u5ea6\u5206\u522b\u4e3a&nbsp;<code>m</code>&nbsp;\u548c&nbsp;<code>n</code>&nbsp;\u7684\u4e24\u4e2a\u6570\u7ec4\uff0c\u5176\u5143\u7d20\u7531&nbsp;<code>0-9</code>&nbsp;\u6784\u6210\uff0c\u8868\u793a\u4e24\u4e2a\u81ea\u7136\u6570\u5404\u4f4d\u4e0a\u7684\u6570\u5b57\u3002\u73b0\u5728\u4ece\u8fd9\u4e24\u4e2a\u6570\u7ec4\u4e2d\u9009\u51fa <code>k (k &lt;= m + n)</code>&nbsp;\u4e2a\u6570\u5b57\u62fc\u63a5\u6210\u4e00\u4e2a\u65b0\u7684\u6570\uff0c\u8981\u6c42\u4ece\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u53d6\u51fa\u7684\u6570\u5b57\u4fdd\u6301\u5176\u5728\u539f\u6570\u7ec4\u4e2d\u7684\u76f8\u5bf9\u987a\u5e8f\u3002</p>\n\n<p>\u6c42\u6ee1\u8db3\u8be5\u6761\u4ef6\u7684\u6700\u5927\u6570\u3002\u7ed3\u679c\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8be5\u6700\u5927\u6570\u7684\u957f\u5ea6\u4e3a&nbsp;<code>k</code>&nbsp;\u7684\u6570\u7ec4\u3002</p>\n\n<p><strong>\u8bf4\u660e: </strong>\u8bf7\u5c3d\u53ef\u80fd\u5730\u4f18\u5316\u4f60\u7b97\u6cd5\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nnums1 = <code>[3, 4, 6, 5]</code>\nnums2 = <code>[9, 1, 2, 5, 8, 3]</code>\nk = <code>5</code>\n<strong>\u8f93\u51fa:</strong>\n<code>[9, 8, 6, 5, 3]</code></pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nnums1 = <code>[6, 7]</code>\nnums2 = <code>[6, 0, 4]</code>\nk = <code>5</code>\n<strong>\u8f93\u51fa:</strong>\n<code>[6, 7, 6, 0, 4]</code></pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nnums1 = <code>[3, 9]</code>\nnums2 = <code>[8, 9]</code>\nk = <code>3</code>\n<strong>\u8f93\u51fa:</strong>\n<code>[9, 8, 9]</code></pre>\n",
        "titleZh": "\u62fc\u63a5\u6700\u5927\u6570",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "322",
        "link": "coin-change",
        "title": "Coin Change",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "31.0%",
        "questionDescription": "<p>You are given coins of different denominations and a total amount of money <i>amount</i>. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>coins = <code>[1, 2, 5]</code>, amount = <code>11</code>\r\n<strong>Output: </strong><code>3</code> \r\n<strong>Explanation:</strong> 11 = 5 + 5 + 1</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>coins = <code>[2]</code>, amount = <code>3</code>\r\n<strong>Output: </strong>-1\r\n</pre>\r\n\r\n<p><b>Note</b>:<br />\r\nYou may assume that you have an infinite number of each kind of coin.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e0d\u540c\u9762\u989d\u7684\u786c\u5e01 coins \u548c\u4e00\u4e2a\u603b\u91d1\u989d amount\u3002\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\u6240\u9700\u7684\u6700\u5c11\u7684\u786c\u5e01\u4e2a\u6570\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u4e00\u79cd\u786c\u5e01\u7ec4\u5408\u80fd\u7ec4\u6210\u603b\u91d1\u989d\uff0c\u8fd4\u56de&nbsp;<code>-1</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>coins = <code>[1, 2, 5]</code>, amount = <code>11</code>\n<strong>\u8f93\u51fa: </strong><code>3</code> \n<strong>\u89e3\u91ca:</strong> 11 = 5 + 5 + 1</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>coins = <code>[2]</code>, amount = <code>3</code>\n<strong>\u8f93\u51fa: </strong>-1</pre>\n\n<p><strong>\u8bf4\u660e</strong>:<br>\n\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u79cd\u786c\u5e01\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\u3002</p>\n",
        "titleZh": "\u96f6\u94b1\u5151\u6362",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Airbnb",
            "Goldman Sachs",
            "eBay",
            "Walmart Labs",
            "VMware",
            "Hulu",
            "SAP",
            "Visa",
            "JPMorgan",
            "Qualtrics",
            "Capital One",
            "Groupon"
        ]
    },
    {
        "leetId": "323",
        "link": "number-of-connected-components-in-an-undirected-graph",
        "title": "Number of Connected Components in an Undirected Graph",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "30",
        "questionDescription": "\n<p>Given <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code> and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.</p>\n<p><b>Example 1:</b></p>\n<pre><strong>Input: </strong><code>n = 5</code> and <code>edges = [[0, 1], [1, 2], [3, 4]]</code>\n\n     0          3\n     |          |\n     1 --- 2    4 \n\n<strong>Output: </strong>2\n</pre>\n<p><b>Example 2:</b></p>\n<pre><strong>Input: </strong><code>n = 5</code> and <code>edges = [[0, 1], [1, 2], [2, 3], [3, 4]]</code>\n\n     0           4\n     |           |\n     1 --- 2 --- 3\n\n<strong>Output:\u00a0\u00a0</strong>1\n</pre>\n<p><b>Note:</b><br/>\nYou can assume that no duplicate edges will appear in <code>edges</code>. Since all edges are undirected, <code>[0, 1]</code> is the same as <code>[1, 0]</code> and thus will not appear together in <code>edges</code>.</p>\n",
        "questionDescriptionZh": "\n<p>Given <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code> and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.</p>\n<p><b>Example 1:</b></p>\n<pre><strong>Input: </strong><code>n = 5</code> and <code>edges = [[0, 1], [1, 2], [3, 4]]</code>\n\n     0          3\n     |          |\n     1 --- 2    4 \n\n<strong>Output: </strong>2\n</pre>\n<p><b>Example 2:</b></p>\n<pre><strong>Input: </strong><code>n = 5</code> and <code>edges = [[0, 1], [1, 2], [2, 3], [3, 4]]</code>\n\n     0           4\n     |           |\n     1 --- 2 --- 3\n\n<strong>Output:\u00a0\u00a0</strong>1\n</pre>\n<p><b>Note:</b><br/>\nYou can assume that no duplicate edges will appear in <code>edges</code>. Since all edges are undirected, <code>[0, 1]</code> is the same as <code>[1, 0]</code> and thus will not appear together in <code>edges</code>.</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "LinkedIn",
            "Twitter"
        ]
    },
    {
        "leetId": "324",
        "link": "wiggle-sort-ii",
        "title": "Wiggle Sort II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "30.6%",
        "questionDescription": "<p>Given an unsorted array <code>nums</code>, reorder it such that <code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>nums = [1, 5, 1, 1, 6, 4]</code>\r\n<strong>Output: </strong>One possible answer is <code>[1, 4, 1, 5, 1, 6]</code>.</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>nums = [1, 3, 2, 2, 3, 1]</code>\r\n<strong>Output:</strong> One possible answer is <code>[2, 3, 1, 3, 1, 2]</code>.</pre>\r\n\r\n<p><b>Note:</b><br />\r\nYou may assume all input has valid answer.</p>\r\n\r\n<p><b>Follow Up:</b><br />\r\nCan you do it in O(n) time and/or in-place with O(1) extra space?</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5e8f\u7684\u6570\u7ec4&nbsp;<code>nums</code>\uff0c\u5c06\u5b83\u91cd\u65b0\u6392\u5217\u6210&nbsp;<code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>&nbsp;\u7684\u987a\u5e8f\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code>nums = [1, 5, 1, 1, 6, 4]</code>\n<strong>\u8f93\u51fa: </strong>\u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f <code>[1, 4, 1, 5, 1, 6]</code></pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code>nums = [1, 3, 2, 2, 3, 1]</code>\n<strong>\u8f93\u51fa:</strong> \u4e00\u4e2a\u53ef\u80fd\u7684\u7b54\u6848\u662f <code>[2, 3, 1, 3, 1, 2]</code></pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u4f1a\u5f97\u5230\u6709\u6548\u7684\u7ed3\u679c\u3002</p>\n\n<p><strong>\u8fdb\u9636:</strong><br>\n\u4f60\u80fd\u7528&nbsp;O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c / \u6216\u539f\u5730 O(1) \u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f</p>\n",
        "titleZh": "\u6446\u52a8\u6392\u5e8f II",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Airbnb",
            "Akuna Capital"
        ]
    },
    {
        "leetId": "325",
        "link": "maximum-size-subarray-sum-equals-k",
        "title": "Maximum Size Subarray Sum Equals k",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "42",
        "questionDescription": "\n<p>Given an array <i>nums</i> and a target value <i>k</i>, find the maximum length of a subarray that sums to <i>k</i>. If there isn't one, return 0 instead.</p>\n<p><b>Note:</b><br/>\nThe sum of the entire <i>nums</i> array is guaranteed to fit within the 32-bit signed integer range.</p>\n<p><b>Example 1:</b></p>\n<pre><strong>Input: </strong><i>nums</i> = <code>[1, -1, 5, -2, 3]</code>, <i>k</i> = <code>3</code>\n<strong>Output: </strong>4 \n<strong>Explanation: </strong>The subarray <code>[1, -1, 5, -2]</code> sums to 3 and is the longest.\n</pre>\n<p><b>Example 2:</b></p>\n<pre><strong>Input: </strong><i>nums</i> = <code>[-2, -1, 2, 1]</code>, <i>k</i> = <code>1</code>\n<strong>Output: </strong>2 <strong>\nExplanation: </strong>The subarray <code>[-1, 2]</code> sums to 1 and is the longest.</pre>\n<p><b>Follow Up:</b><br/>\nCan you do it in O(<i>n</i>) time?</p>\n",
        "questionDescriptionZh": "\n<p>Given an array <i>nums</i> and a target value <i>k</i>, find the maximum length of a subarray that sums to <i>k</i>. If there isn't one, return 0 instead.</p>\n<p><b>Note:</b><br/>\nThe sum of the entire <i>nums</i> array is guaranteed to fit within the 32-bit signed integer range.</p>\n<p><b>Example 1:</b></p>\n<pre><strong>Input: </strong><i>nums</i> = <code>[1, -1, 5, -2, 3]</code>, <i>k</i> = <code>3</code>\n<strong>Output: </strong>4 \n<strong>Explanation: </strong>The subarray <code>[1, -1, 5, -2]</code> sums to 3 and is the longest.\n</pre>\n<p><b>Example 2:</b></p>\n<pre><strong>Input: </strong><i>nums</i> = <code>[-2, -1, 2, 1]</code>, <i>k</i> = <code>1</code>\n<strong>Output: </strong>2 <strong>\nExplanation: </strong>The subarray <code>[-1, 2]</code> sums to 1 and is the longest.</pre>\n<p><b>Follow Up:</b><br/>\nCan you do it in O(<i>n</i>) time?</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Palantir Technologies",
            "Palantir"
        ]
    },
    {
        "leetId": "326",
        "link": "power-of-three",
        "title": "Power of Three",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "43.4%",
        "questionDescription": "<p>Given an integer, write a function to determine if it is a power of three.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 27\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 0\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 9\r\n<strong>Output:</strong> true</pre>\r\n\r\n<p><b>Example 4:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 45\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nCould you do it without using any loop / recursion?</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 3&nbsp;\u7684\u5e42\u6b21\u65b9\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 27\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 0\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 9\n<strong>\u8f93\u51fa:</strong> true</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 45\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br>\n\u4f60\u80fd\u4e0d\u4f7f\u7528\u5faa\u73af\u6216\u8005\u9012\u5f52\u6765\u5b8c\u6210\u672c\u9898\u5417\uff1f</p>\n",
        "titleZh": "3\u7684\u5e42",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Apple"
        ]
    },
    {
        "leetId": "327",
        "link": "count-of-range-sum",
        "title": "Count of Range Sum",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "32.5%",
        "questionDescription": "<p>Given an integer array <code>nums</code>, return the number of range sums that lie in <code>[lower, upper]</code> inclusive.<br />\r\nRange sum <code>S(i, j)</code> is defined as the sum of the elements in <code>nums</code> between indices <code>i</code> and <code>j</code> (<code>i</code> &le; <code>j</code>), inclusive.</p>\r\n\r\n<p><b>Note:</b><br />\r\nA naive algorithm of <i>O</i>(<i>n</i><sup>2</sup>) is trivial. You MUST do better than that.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><i>nums</i> = <code>[-2,5,-1]</code>, <i>lower</i> = <code>-2</code>, <i>upper</i> = <code>2</code>,\r\n<strong>Output: </strong>3 \r\n<strong>Explanation: </strong>The three ranges are : <code>[0,0]</code>, <code>[2,2]</code>, <code>[0,2]</code> and their respective sums are: <code>-2, -1, 2</code>.\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>nums</code>\uff0c\u8fd4\u56de\u533a\u95f4\u548c\u5728&nbsp;<code>[lower, upper]</code>&nbsp;\u4e4b\u95f4\u7684\u4e2a\u6570\uff0c\u5305\u542b&nbsp;<code>lower</code>&nbsp;\u548c&nbsp;<code>upper</code>\u3002<br>\n\u533a\u95f4\u548c&nbsp;<code>S(i, j)</code>&nbsp;\u8868\u793a\u5728&nbsp;<code>nums</code>&nbsp;\u4e2d\uff0c\u4f4d\u7f6e\u4ece&nbsp;<code>i</code>&nbsp;\u5230&nbsp;<code>j</code>&nbsp;\u7684\u5143\u7d20\u4e4b\u548c\uff0c\u5305\u542b&nbsp;<code>i</code>&nbsp;\u548c&nbsp;<code>j</code>&nbsp;(<code>i</code> &le; <code>j</code>)\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u6700\u76f4\u89c2\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u662f&nbsp;<em>O</em>(<em>n</em><sup>2</sup>) \uff0c\u8bf7\u5728\u6b64\u57fa\u7840\u4e0a\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><em>nums</em> = <code>[-2,5,-1]</code>, <em>lower</em> = <code>-2</code>, <em>upper</em> = <code>2</code>,\n<strong>\u8f93\u51fa: </strong>3 \n<strong>\u89e3\u91ca: </strong>3\u4e2a\u533a\u95f4\u5206\u522b\u662f: <code>[0,0]</code>, <code>[2,2]</code>, <code>[0,2]\uff0c</code>\u5b83\u4eec\u8868\u793a\u7684\u548c\u5206\u522b\u4e3a: <code>-2, -1, 2\u3002</code>\n</pre>\n",
        "titleZh": "\u533a\u95f4\u548c\u7684\u4e2a\u6570",
        "tags": [
            {
                "tag": "Binary Search Tree",
                "link": "binary-search-tree",
                "tagZh": "\u4e8c\u53c9\u641c\u7d22\u6811"
            },
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "328",
        "link": "odd-even-linked-list",
        "title": "Odd Even Linked List",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "55.5%",
        "questionDescription": "<p>Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.</p>\r\n\r\n<p>You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code>\r\n<strong>Output: </strong><code>1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</code>\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>2<code>-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL</code>\r\n<strong>Output: </strong><code>2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</code>\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>The relative order inside both the even and odd groups should remain as it was in the input.</li>\r\n\t<li>The first node is considered odd, the second node even and so on ...</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002</p>\n\n<p>\u8bf7\u5c1d\u8bd5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes \u4e3a\u8282\u70b9\u603b\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n<strong>\u8f93\u51fa:</strong> 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL \n<strong>\u8f93\u51fa:</strong> 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u5e94\u5f53\u4fdd\u6301\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u7684\u76f8\u5bf9\u987a\u5e8f\u3002</li>\n\t<li>\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u89c6\u4e3a\u5947\u6570\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u89c6\u4e3a\u5076\u6570\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</li>\n</ul>\n",
        "titleZh": "\u5947\u5076\u94fe\u8868",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "eBay",
            "Capital One",
            "Groupon"
        ]
    },
    {
        "leetId": "329",
        "link": "longest-increasing-path-in-a-matrix",
        "title": "Longest Increasing Path in a Matrix",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "37.2%",
        "questionDescription": "<p>Given an integer matrix, find the length of the longest increasing path.</p>\r\n\r\n<p>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = \r\n[\r\n  [<font color=\"red\">9</font>,9,4],\r\n  [<font color=\"red\">6</font>,6,8],\r\n  [<font color=\"red\">2</font>,<font color=\"red\">1</font>,1]\r\n] \r\n<strong>Output:</strong> 4 \r\n<strong>Explanation:</strong> The longest increasing path is <code>[1, 2, 6, 9]</code>.\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = \r\n[\r\n  [<font color=\"red\">3</font>,<font color=\"red\">4</font>,<font color=\"red\">5</font>],\r\n  [3,2,<font color=\"red\">6</font>],\r\n  [2,2,1]\r\n] \r\n<strong>Output: </strong>4 \r\n<strong>Explanation: </strong>The longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u77e9\u9635\uff0c\u627e\u51fa\u6700\u957f\u9012\u589e\u8def\u5f84\u7684\u957f\u5ea6\u3002</p>\n\n<p>\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u5143\u683c\uff0c\u4f60\u53ef\u4ee5\u5f80\u4e0a\uff0c\u4e0b\uff0c\u5de6\uff0c\u53f3\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u3002 \u4f60\u4e0d\u80fd\u5728\u5bf9\u89d2\u7ebf\u65b9\u5411\u4e0a\u79fb\u52a8\u6216\u79fb\u52a8\u5230\u8fb9\u754c\u5916\uff08\u5373\u4e0d\u5141\u8bb8\u73af\u7ed5\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums = \n[\n  [<strong>9</strong>,9,4],\n  [<strong>6</strong>,6,8],\n  [<strong>2</strong>,<strong>1</strong>,1]\n] \n<strong>\u8f93\u51fa:</strong> 4 \n<strong>\u89e3\u91ca:</strong> \u6700\u957f\u9012\u589e\u8def\u5f84\u4e3a&nbsp;<code>[1, 2, 6, 9]</code>\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums = \n[\n  [<strong>3</strong>,<strong>4</strong>,<strong>5</strong>],\n  [3,2,<strong>6</strong>],\n  [2,2,1]\n] \n<strong>\u8f93\u51fa: </strong>4 \n<strong>\u89e3\u91ca: </strong>\u6700\u957f\u9012\u589e\u8def\u5f84\u662f&nbsp;<code>[3, 4, 5, 6]</code>\u3002\u6ce8\u610f\u4e0d\u5141\u8bb8\u5728\u5bf9\u89d2\u7ebf\u65b9\u5411\u4e0a\u79fb\u52a8\u3002\n</pre>\n",
        "titleZh": "\u77e9\u9635\u4e2d\u7684\u6700\u957f\u9012\u589e\u8def\u5f84",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Topological Sort",
                "link": "topological-sort",
                "tagZh": "\u62d3\u6251\u6392\u5e8f"
            },
            {
                "tag": "Memoization",
                "link": "memoization",
                "tagZh": "\u8bb0\u5fc6\u5316"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Pinterest"
        ]
    },
    {
        "leetId": "330",
        "link": "patching-array",
        "title": "Patching Array",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "37.9%",
        "questionDescription": "<p>Given a sorted positive integer array <i>nums</i> and an integer <i>n</i>, add/patch elements to the array such that any number in range <code>[1, n]</code> inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><i>nums</i> = <code>[1,3]</code>, <i>n</i> = <code>6</code>\r\n<strong>Output: </strong>1 \r\n<strong>Explanation:</strong>\r\nCombinations of <i>nums</i> are <code>[1], [3], [1,3]</code>, which form possible sums of: <code>1, 3, 4</code>.\r\nNow if we add/patch <code>2</code> to <i>nums</i>, the combinations are: <code>[1], [2], [3], [1,3], [2,3], [1,2,3]</code>.\r\nPossible sums are <code>1, 2, 3, 4, 5, 6</code>, which now covers the range <code>[1, 6]</code>.\r\nSo we only need <code>1</code> patch.</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><i>nums</i> = <code>[1,5,10]</code>, <i>n</i> = <code>20</code>\r\n<strong>Output:</strong> 2\r\n<strong>Explanation: </strong>The two patches can be <code>[2, 4]</code>.\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><i>nums</i> = <code>[1,2,2]</code>, <i>n</i> = <code>5</code>\r\n<strong>Output:</strong> 0\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5df2\u6392\u5e8f\u7684\u6b63\u6574\u6570\u6570\u7ec4 <em>nums\uff0c</em>\u548c\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<em>n \u3002</em>\u4ece&nbsp;<code>[1, n]</code>&nbsp;\u533a\u95f4\u5185\u9009\u53d6\u4efb\u610f\u4e2a\u6570\u5b57\u8865\u5145\u5230&nbsp;<em>nums&nbsp;</em>\u4e2d\uff0c\u4f7f\u5f97&nbsp;<code>[1, n]</code>&nbsp;\u533a\u95f4\u5185\u7684\u4efb\u4f55\u6570\u5b57\u90fd\u53ef\u4ee5\u7528&nbsp;<em>nums&nbsp;</em>\u4e2d\u67d0\u51e0\u4e2a\u6570\u5b57\u7684\u548c\u6765\u8868\u793a\u3002\u8bf7\u8f93\u51fa\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42\u7684\u6700\u5c11\u9700\u8981\u8865\u5145\u7684\u6570\u5b57\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><em>nums</em> = <code>[1,3]</code>, <em>n</em> = <code>6</code>\n<strong>\u8f93\u51fa: </strong>1 \n<strong>\u89e3\u91ca:</strong>\n\u6839\u636e<em> nums&nbsp;</em>\u91cc\u73b0\u6709\u7684\u7ec4\u5408&nbsp;<code>[1], [3], [1,3]</code>\uff0c\u53ef\u4ee5\u5f97\u51fa&nbsp;<code>1, 3, 4</code>\u3002\n\u73b0\u5728\u5982\u679c\u6211\u4eec\u5c06&nbsp;<code>2</code>&nbsp;\u6dfb\u52a0\u5230&nbsp;<em>nums \u4e2d\uff0c</em>&nbsp;\u7ec4\u5408\u53d8\u4e3a: <code>[1], [2], [3], [1,3], [2,3], [1,2,3]</code>\u3002\n\u5176\u548c\u53ef\u4ee5\u8868\u793a\u6570\u5b57&nbsp;<code>1, 2, 3, 4, 5, 6</code>\uff0c\u80fd\u591f\u8986\u76d6&nbsp;<code>[1, 6]</code>&nbsp;\u533a\u95f4\u91cc\u6240\u6709\u7684\u6570\u3002\n\u6240\u4ee5\u6211\u4eec\u6700\u5c11\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u6570\u5b57\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><em>nums</em> = <code>[1,5,10]</code>, <em>n</em> = <code>20</code>\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca: </strong>\u6211\u4eec\u9700\u8981\u6dfb\u52a0&nbsp;<code>[2, 4]</code>\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><em>nums</em> = <code>[1,2,2]</code>, <em>n</em> = <code>5</code>\n<strong>\u8f93\u51fa:</strong> 0\n</pre>\n",
        "titleZh": "\u6309\u8981\u6c42\u8865\u9f50\u6570\u7ec4",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "331",
        "link": "verify-preorder-serialization-of-a-binary-tree",
        "title": "Verify Preorder Serialization of a Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "40.8%",
        "questionDescription": "<p>One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node&#39;s value. If it is a null node, we record using a sentinel value such as <code>#</code>.</p>\r\n\r\n<pre>\r\n     _9_\r\n    /   \\\r\n   3     2\r\n  / \\   / \\\r\n 4   1  #  6\r\n/ \\ / \\   / \\\r\n# # # #   # #\r\n</pre>\r\n\r\n<p>For example, the above binary tree can be serialized to the string <code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>, where <code>#</code> represents a null node.</p>\r\n\r\n<p>Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.</p>\r\n\r\n<p>Each comma separated value in the string must be either an integer or a character <code>&#39;#&#39;</code> representing <code>null</code> pointer.</p>\r\n\r\n<p>You may assume that the input format is always valid, for example it could never contain two consecutive commas such as <code>&quot;1,,3&quot;</code>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>\r\n<strong>Output: </strong><code>true</code></pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>&quot;1,#&quot;</code>\r\n<strong>Output: </strong><code>false</code>\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>&quot;9,#,#,1&quot;</code>\r\n<strong>Output: </strong><code>false</code></pre>",
        "questionDescriptionZh": "<p>\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u524d\u5e8f\u904d\u5386\u3002\u5f53\u6211\u4eec\u9047\u5230\u4e00\u4e2a\u975e\u7a7a\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u4e0b\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\u3002\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u7a7a\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6807\u8bb0\u503c\u8bb0\u5f55\uff0c\u4f8b\u5982 <code>#</code>\u3002</p>\n\n<pre>     _9_\n    /   \\\n   3     2\n  / \\   / \\\n 4   1  #  6\n/ \\ / \\   / \\\n# # # #   # #\n</pre>\n\n<p>\u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u4e8c\u53c9\u6811\u53ef\u4ee5\u88ab\u5e8f\u5217\u5316\u4e3a\u5b57\u7b26\u4e32 <code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>\uff0c\u5176\u4e2d <code>#</code> \u4ee3\u8868\u4e00\u4e2a\u7a7a\u8282\u70b9\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e32\u4ee5\u9017\u53f7\u5206\u9694\u7684\u5e8f\u5217\uff0c\u9a8c\u8bc1\u5b83\u662f\u5426\u662f\u6b63\u786e\u7684\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316\u3002\u7f16\u5199\u4e00\u4e2a\u5728\u4e0d\u91cd\u6784\u6811\u7684\u6761\u4ef6\u4e0b\u7684\u53ef\u884c\u7b97\u6cd5\u3002</p>\n\n<p>\u6bcf\u4e2a\u4ee5\u9017\u53f7\u5206\u9694\u7684\u5b57\u7b26\u6216\u4e3a\u4e00\u4e2a\u6574\u6570\u6216\u4e3a\u4e00\u4e2a\u8868\u793a <code>null</code> \u6307\u9488\u7684 <code>&#39;#&#39;</code> \u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8f93\u5165\u683c\u5f0f\u603b\u662f\u6709\u6548\u7684\uff0c\u4f8b\u5982\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u5305\u542b\u4e24\u4e2a\u8fde\u7eed\u7684\u9017\u53f7\uff0c\u6bd4\u5982&nbsp;<code>&quot;1,,3&quot;</code> \u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>\n<strong>\u8f93\u51fa: </strong><code>true</code></pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code>&quot;1,#&quot;</code>\n<strong>\u8f93\u51fa: </strong><code>false</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong><code>&quot;9,#,#,1&quot;</code>\n<strong>\u8f93\u51fa: </strong><code>false</code></pre>\n",
        "titleZh": "\u9a8c\u8bc1\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u5e8f\u5217\u5316",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            }
        ],
        "companies": [
            "Google",
            "Yahoo"
        ]
    },
    {
        "leetId": "332",
        "link": "reconstruct-itinerary",
        "title": "Reconstruct Itinerary",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "30.1%",
        "questionDescription": "<p>Given a list of airline tickets represented by pairs of departure and arrival airports <code>[from, to]</code>, reconstruct the itinerary in order. All of the tickets belong to a man who departs from <code>JFK</code>. Thus, the itinerary must begin with <code>JFK</code>.</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary <code>[&quot;JFK&quot;, &quot;LGA&quot;]</code> has a smaller lexical order than <code>[&quot;JFK&quot;, &quot;LGB&quot;]</code>.</li>\r\n\t<li>All airports are represented by three capital letters (IATA code).</li>\r\n\t<li>You may assume all tickets form at least one valid itinerary.</li>\r\n</ol>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<code><strong>Input: </strong></code><code>[[&quot;MUC&quot;, &quot;LHR&quot;], [&quot;JFK&quot;, &quot;MUC&quot;], [&quot;SFO&quot;, &quot;SJC&quot;], [&quot;LHR&quot;, &quot;SFO&quot;]]</code>\r\n<strong>Output: </strong><code>[&quot;JFK&quot;, &quot;MUC&quot;, &quot;LHR&quot;, &quot;SFO&quot;, &quot;SJC&quot;]</code>\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<code><strong>Input: </strong></code><code>[[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]</code>\r\n<strong>Output: </strong><code>[&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]</code>\r\n<strong>Explanation: </strong>Another possible reconstruction is <code>[&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;]</code>.\r\n&nbsp;            But it is larger in lexical order.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u673a\u7968\u7684\u5b57\u7b26\u4e32\u4e8c\u7ef4\u6570\u7ec4 <code>[from, to]</code>\uff0c\u5b50\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6210\u5458\u5206\u522b\u8868\u793a\u98de\u673a\u51fa\u53d1\u548c\u964d\u843d\u7684\u673a\u573a\u5730\u70b9\uff0c\u5bf9\u8be5\u884c\u7a0b\u8fdb\u884c\u91cd\u65b0\u89c4\u5212\u6392\u5e8f\u3002\u6240\u6709\u8fd9\u4e9b\u673a\u7968\u90fd\u5c5e\u4e8e\u4e00\u4e2a\u4eceJFK\uff08\u80af\u5c3c\u8fea\u56fd\u9645\u673a\u573a\uff09\u51fa\u53d1\u7684\u5148\u751f\uff0c\u6240\u4ee5\u8be5\u884c\u7a0b\u5fc5\u987b\u4ece JFK \u51fa\u53d1\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u5982\u679c\u5b58\u5728\u591a\u79cd\u6709\u6548\u7684\u884c\u7a0b\uff0c\u4f60\u53ef\u4ee5\u6309\u5b57\u7b26\u81ea\u7136\u6392\u5e8f\u8fd4\u56de\u6700\u5c0f\u7684\u884c\u7a0b\u7ec4\u5408\u3002\u4f8b\u5982\uff0c\u884c\u7a0b [&quot;JFK&quot;, &quot;LGA&quot;] \u4e0e [&quot;JFK&quot;, &quot;LGB&quot;] \u76f8\u6bd4\u5c31\u66f4\u5c0f\uff0c\u6392\u5e8f\u66f4\u9760\u524d</li>\n\t<li>\u6240\u6709\u7684\u673a\u573a\u90fd\u7528\u4e09\u4e2a\u5927\u5199\u5b57\u6bcd\u8868\u793a\uff08\u673a\u573a\u4ee3\u7801\uff09\u3002</li>\n\t<li>\u5047\u5b9a\u6240\u6709\u673a\u7968\u81f3\u5c11\u5b58\u5728\u4e00\u79cd\u5408\u7406\u7684\u884c\u7a0b\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><code><strong>\u8f93\u5165: </strong></code><code>[[&quot;MUC&quot;, &quot;LHR&quot;], [&quot;JFK&quot;, &quot;MUC&quot;], [&quot;SFO&quot;, &quot;SJC&quot;], [&quot;LHR&quot;, &quot;SFO&quot;]]</code>\n<strong>\u8f93\u51fa: </strong><code>[&quot;JFK&quot;, &quot;MUC&quot;, &quot;LHR&quot;, &quot;SFO&quot;, &quot;SJC&quot;]</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><code><strong>\u8f93\u5165: </strong></code><code>[[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]</code>\n<strong>\u8f93\u51fa: </strong><code>[&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]</code>\n<strong>\u89e3\u91ca: </strong>\u53e6\u4e00\u79cd\u6709\u6548\u7684\u884c\u7a0b\u662f&nbsp;<code>[&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;]</code>\u3002\u4f46\u662f\u5b83\u81ea\u7136\u6392\u5e8f\u66f4\u5927\u66f4\u9760\u540e\u3002</pre>\n",
        "titleZh": "\u91cd\u65b0\u5b89\u6392\u884c\u7a0b",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Snapchat",
            "Yelp",
            "Intuit",
            "TripAdvisor"
        ]
    },
    {
        "leetId": "333",
        "link": "largest-bst-subtree",
        "title": "Largest BST Subtree",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "23",
        "questionDescription": "\n<p>Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number of nodes in it.</p>\n<p><b>Note:</b><br/>\nA subtree must include all of its descendants.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input: </strong>[10,5,15,1,8,null,7]\n\n   10 \n   / \\ \n<font color=\"red\">  5</font>  15 \n<font color=\"red\"> / \\</font>   \\ \n<font color=\"red\">1   8</font>   7\n\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>The Largest BST Subtree in this case is the highlighted one.\n             The return value is the subtree's size, which is 3.\n</pre>\n<p><b>Follow up:</b><br/>\nCan you figure out ways to solve it with O(n) time complexity?</p>\n",
        "questionDescriptionZh": "\n<p>Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number of nodes in it.</p>\n<p><b>Note:</b><br/>\nA subtree must include all of its descendants.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input: </strong>[10,5,15,1,8,null,7]\n\n   10 \n   / \\ \n<font color=\"red\">  5</font>  15 \n<font color=\"red\"> / \\</font>   \\ \n<font color=\"red\">1   8</font>   7\n\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>The Largest BST Subtree in this case is the highlighted one.\n             The return value is the subtree's size, which is 3.\n</pre>\n<p><b>Follow up:</b><br/>\nCan you figure out ways to solve it with O(n) time complexity?</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Microsoft"
        ]
    },
    {
        "leetId": "334",
        "link": "increasing-triplet-subsequence",
        "title": "Increasing Triplet Subsequence",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "33.2%",
        "questionDescription": "<p>Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.</p>\r\n\r\n<p>Formally the function should:</p>\r\n\r\n<blockquote>Return true if there exists <i>i, j, k </i><br />\r\nsuch that <i>arr[i]</i> &lt; <i>arr[j]</i> &lt; <i>arr[k]</i> given 0 &le; <i>i</i> &lt; <i>j</i> &lt; <i>k</i> &le; <i>n</i>-1 else return false.</blockquote>\r\n\r\n<p><strong>Note: </strong>Your algorithm should run in O(<i>n</i>) time complexity and O(<i>1</i>) space complexity.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3,4,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[5,4,3,2,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6570\u7ec4\uff0c\u5224\u65ad\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u957f\u5ea6\u4e3a 3 \u7684\u9012\u589e\u5b50\u5e8f\u5217\u3002</p>\n\n<p>\u6570\u5b66\u8868\u8fbe\u5f0f\u5982\u4e0b:</p>\n\n<blockquote>\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684&nbsp;<em>i, j, k,&nbsp;</em>&nbsp;\u4e14\u6ee1\u8db3&nbsp;0 &le; <em>i</em> &lt; <em>j</em> &lt; <em>k</em> &le; <em>n</em>-1\uff0c<br>\n\u4f7f\u5f97&nbsp;<em>arr[i]</em> &lt; <em>arr[j]</em> &lt; <em>arr[k] </em>\uff0c\u8fd4\u56de true ;&nbsp;\u5426\u5219\u8fd4\u56de false \u3002</blockquote>\n\n<p><strong>\u8bf4\u660e:</strong> \u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(<em>n</em>)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(<em>1</em>) \u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,2,3,4,5]\n<strong>\u8f93\u51fa: </strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[5,4,3,2,1]\n<strong>\u8f93\u51fa: </strong>false</pre>\n",
        "titleZh": "\u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217",
        "tags": [],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Airbnb"
        ]
    },
    {
        "leetId": "335",
        "link": "self-crossing",
        "title": "Self Crossing",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "26.9%",
        "questionDescription": "<p>You are given an array <i>x</i> of <code>n</code> positive numbers. You start at point <code>(0,0)</code> and moves <code>x[0]</code> metres to the north, then <code>x[1]</code> metres to the west, <code>x[2]</code> metres to the south, <code>x[3]</code> metres to the east and so on. In other words, after each move your direction changes counter-clockwise.</p>\r\n\r\n<p>Write a one-pass algorithm with <code>O(1)</code> extra space to determine, if your path crosses itself, or not.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>\u250c\u2500\u2500\u2500\u2510\r\n\u2502 &nbsp; \u2502\r\n\u2514\u2500\u2500\u2500\u253c\u2500\u2500&gt;\r\n&nbsp; &nbsp; \u2502\r\n\r\nInput: </strong><code>[2,1,1,2]</code>\r\n<strong>Output: </strong>true\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 &nbsp; &nbsp; &nbsp;\u2502\r\n\u2502\r\n\u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\r\n\r\nInput:</strong> <code>[1,2,3,4]</code>\r\n<strong>Output: </strong>false \r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<strong>\u250c\u2500\u2500\u2500\u2510\r\n\u2502 &nbsp; \u2502\r\n\u2514\u2500\u2500\u2500\u253c&gt;\r\n\r\nInput:</strong> <code>[1,1,1,1]</code>\r\n<strong>Output:</strong> true \r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709&nbsp;<code>n</code>&nbsp;\u4e2a\u6b63\u6570\u7684\u6570\u7ec4&nbsp;<em>x</em>\u3002\u4ece\u70b9&nbsp;<code>(0,0)</code>&nbsp;\u5f00\u59cb\uff0c\u5148\u5411\u5317\u79fb\u52a8&nbsp;<code>x[0]</code>&nbsp;\u7c73\uff0c\u7136\u540e\u5411\u897f\u79fb\u52a8&nbsp;<code>x[1]</code>&nbsp;\u7c73\uff0c\u5411\u5357\u79fb\u52a8&nbsp;<code>x[2]</code>&nbsp;\u7c73\uff0c\u5411\u4e1c\u79fb\u52a8&nbsp;<code>x[3]</code>&nbsp;\u7c73\uff0c\u6301\u7eed\u79fb\u52a8\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u6b21\u79fb\u52a8\u540e\u4f60\u7684\u65b9\u4f4d\u4f1a\u53d1\u751f\u9006\u65f6\u9488\u53d8\u5316\u3002</p>\n\n<p>\u7f16\u5199\u4e00\u4e2a&nbsp;<code>O(1)</code>&nbsp;\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u4e00\u8d9f\u626b\u63cf\u7b97\u6cd5\uff0c\u5224\u65ad\u4f60\u6240\u7ecf\u8fc7\u7684\u8def\u5f84\u662f\u5426\u76f8\u4ea4\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u250c\u2500\u2500\u2500\u2510\n\u2502 &nbsp; \u2502\n\u2514\u2500\u2500\u2500\u253c\u2500\u2500&gt;\n&nbsp; &nbsp; \u2502\n\n\u8f93\u5165: </strong><code>[2,1,1,2]</code>\n<strong>\u8f93\u51fa:</strong> true \n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 &nbsp; &nbsp; &nbsp;\u2502\n\u2502\n\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\n\n\u8f93\u5165: </strong><code>[1,2,3,4]</code>\n<strong>\u8f93\u51fa: </strong>false \n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u250c\u2500\u2500\u2500\u2510\n\u2502 &nbsp; \u2502\n\u2514\u2500\u2500\u2500\u253c&gt;\n\n\u8f93\u5165:</strong> <code>[1,1,1,1]</code>\n<strong>\u8f93\u51fa:</strong> true \n</pre>\n",
        "titleZh": "\u8def\u5f84\u4ea4\u53c9",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ]
    },
    {
        "leetId": "336",
        "link": "palindrome-pairs",
        "title": "Palindrome Pairs",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "26.7%",
        "questionDescription": "<p>Given a list of <b>unique</b> words, find all pairs of <b><i>distinct</i></b> indices <code>(i, j)</code> in the given list, so that the concatenation of the two words, i.e. <code>words[i] + words[j]</code> is a palindrome.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[0,1],[1,0],[3,2],[2,4]] \r\n<strong>E</strong></span><strong>xplanation<span>: </span></strong>The palindromes are <code>[&quot;dcbaabcd&quot;,&quot;abcddcba&quot;,&quot;slls&quot;,&quot;llssssll&quot;]</code>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[[0,1],[1,0]] \r\n</span><span id=\"example-output-1\"><strong>E</strong></span><strong>xplanation<span>: </span></strong>The palindromes are <code>[&quot;battab&quot;,&quot;tabbat&quot;]</code>\r\n</pre>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u7ec4<strong>\u552f\u4e00</strong>\u7684\u5355\u8bcd\uff0c \u627e\u51fa\u6240\u6709<strong><em>\u4e0d\u540c&nbsp;</em></strong>\u7684\u7d22\u5f15\u5bf9<code>(i, j)</code>\uff0c\u4f7f\u5f97\u5217\u8868\u4e2d\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c&nbsp;<code>words[i] + words[j]</code>&nbsp;\uff0c\u53ef\u62fc\u63a5\u6210\u56de\u6587\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;]\n<strong>\u8f93\u51fa: </strong>[[0,1],[1,0],[3,2],[2,4]] \n<strong>\u89e3\u91ca: </strong>\u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a <code>[&quot;dcbaabcd&quot;,&quot;abcddcba&quot;,&quot;slls&quot;,&quot;llssssll&quot;]</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;]\n<strong>\u8f93\u51fa: </strong>[[0,1],[1,0]] \n<strong>\u89e3\u91ca: </strong>\u53ef\u62fc\u63a5\u6210\u7684\u56de\u6587\u4e32\u4e3a <code>[&quot;battab&quot;,&quot;tabbat&quot;]</code></pre>\n",
        "titleZh": "\u56de\u6587\u5bf9",
        "tags": [
            {
                "tag": "Trie",
                "link": "trie",
                "tagZh": "\u5b57\u5178\u6811"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Uber",
            "Apple",
            "Airbnb"
        ]
    },
    {
        "leetId": "337",
        "link": "house-robber-iii",
        "title": "House Robber III",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "53.1%",
        "questionDescription": "<p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the &quot;root.&quot; Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that &quot;all houses in this place forms a binary tree&quot;. It will automatically contact the police if two directly-linked houses were broken into on the same night.</p>\r\n\r\n<p>Determine the maximum amount of money the thief can rob tonight without alerting the police.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[3,2,3,null,3,null,1]\r\n\r\n     <font color=\"red\">3</font>\r\n    / \\\r\n   2   3\r\n    \\   \\ \r\n     <font color=\"red\">3   1\r\n</font>\r\n<strong>Output:</strong> 7 \r\n<strong>Explanation:</strong>&nbsp;Maximum amount of money the thief can rob = <font color=\"red\" style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">3</font><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\"> + </span><font color=\"red\" style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">3</font><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\"> + </span><font color=\"red\" style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">1</font><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\"> = </span><b style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">7</b><span style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;;\">.</span></pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[3,4,5,1,3,null,1]\r\n\r\n&nbsp;    3\r\n    / \\\r\n   <font color=\"red\">4</font>   <font color=\"red\">5</font>\r\n  / \\   \\ \r\n 1   3   1\r\n\r\n<strong>Output:</strong> 9\r\n<strong>Explanation:</strong>&nbsp;Maximum amount of money the thief can rob = <font color=\"red\">4</font> + <font color=\"red\">5</font> = <b>9</b>.\r\n</pre>",
        "questionDescriptionZh": "<p>\u5728\u4e0a\u6b21\u6253\u52ab\u5b8c\u4e00\u6761\u8857\u9053\u4e4b\u540e\u548c\u4e00\u5708\u623f\u5c4b\u540e\uff0c\u5c0f\u5077\u53c8\u53d1\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u53ef\u884c\u7a83\u7684\u5730\u533a\u3002\u8fd9\u4e2a\u5730\u533a\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a&ldquo;\u6839&rdquo;\u3002 \u9664\u4e86&ldquo;\u6839&rdquo;\u4e4b\u5916\uff0c\u6bcf\u680b\u623f\u5b50\u6709\u4e14\u53ea\u6709\u4e00\u4e2a&ldquo;\u7236&ldquo;\u623f\u5b50\u4e0e\u4e4b\u76f8\u8fde\u3002\u4e00\u756a\u4fa6\u5bdf\u4e4b\u540e\uff0c\u806a\u660e\u7684\u5c0f\u5077\u610f\u8bc6\u5230&ldquo;\u8fd9\u4e2a\u5730\u65b9\u7684\u6240\u6709\u623f\u5c4b\u7684\u6392\u5217\u7c7b\u4f3c\u4e8e\u4e00\u68f5\u4e8c\u53c9\u6811&rdquo;\u3002 \u5982\u679c\u4e24\u4e2a\u76f4\u63a5\u76f8\u8fde\u7684\u623f\u5b50\u5728\u540c\u4e00\u5929\u665a\u4e0a\u88ab\u6253\u52ab\uff0c\u623f\u5c4b\u5c06\u81ea\u52a8\u62a5\u8b66\u3002</p>\n\n<p>\u8ba1\u7b97\u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u7684\u60c5\u51b5\u4e0b\uff0c\u5c0f\u5077\u4e00\u665a\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[3,2,3,null,3,null,1]\n\n     <strong>3</strong>\n    / \\\n   2   3\n    \\   \\ \n     <strong>3</strong>   <strong>1</strong>\n\n<strong>\u8f93\u51fa:</strong> 7 \n<strong>\u89e3\u91ca:</strong>&nbsp;\u5c0f\u5077\u4e00\u665a\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d = 3 + 3 + 1 = <strong>7</strong>.</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[3,4,5,1,3,null,1]\n\n&nbsp;    3\n    / \\\n   <strong>4</strong>   <strong>5</strong>\n  / \\   \\ \n 1   3   1\n\n<strong>\u8f93\u51fa:</strong> 9\n<strong>\u89e3\u91ca:</strong>&nbsp;\u5c0f\u5077\u4e00\u665a\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d&nbsp;= <strong>4</strong> + <strong>5</strong> = <strong>9</strong>.\n</pre>\n",
        "titleZh": "\u6253\u5bb6\u52ab\u820d III",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Uber",
            "Yahoo"
        ]
    },
    {
        "leetId": "338",
        "link": "counting-bits",
        "title": "Counting Bits",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "71.2%",
        "questionDescription": "<p>Given a non negative integer number <b>num</b>. For every numbers <b>i</b> in the range <b>0 &le; i &le; num</b> calculate the number of 1&#39;s in their binary representation and return them as an array.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,1,1]</span></pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">5</span>\r\n<strong>Output: </strong><code>[0,1,1,2,1,2]</code>\r\n</pre>\r\n\r\n<p><b>Follow up:</b></p>\r\n\r\n<ul>\r\n\t<li>It is very easy to come up with a solution with run time <b>O(n*sizeof(integer))</b>. But can you do it in linear time <b>O(n)</b> /possibly in a single pass?</li>\r\n\t<li>Space complexity should be <b>O(n)</b>.</li>\r\n\t<li>Can you do it like a boss? Do it without using any builtin function like <b>__builtin_popcount</b> in c++ or in any other language.</li>\r\n</ul>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570&nbsp;<strong>num</strong>\u3002\u5bf9\u4e8e&nbsp;<strong>0 &le; i &le; num </strong>\u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57&nbsp;<strong>i&nbsp;</strong>\uff0c\u8ba1\u7b97\u5176\u4e8c\u8fdb\u5236\u6570\u4e2d\u7684 1 \u7684\u6570\u76ee\u5e76\u5c06\u5b83\u4eec\u4f5c\u4e3a\u6570\u7ec4\u8fd4\u56de\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>2\n<strong>\u8f93\u51fa: </strong>[0,1,1]</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>5\n<strong>\u8f93\u51fa: </strong><code>[0,1,1,2,1,2]</code></pre>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ul>\n\t<li>\u7ed9\u51fa\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<strong>O(n*sizeof(integer))</strong>\u7684\u89e3\u7b54\u975e\u5e38\u5bb9\u6613\u3002\u4f46\u4f60\u53ef\u4ee5\u5728\u7ebf\u6027\u65f6\u95f4<strong>O(n)</strong>\u5185\u7528\u4e00\u8d9f\u626b\u63cf\u505a\u5230\u5417\uff1f</li>\n\t<li>\u8981\u6c42\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a<strong>O(n)</strong>\u3002</li>\n\t<li>\u4f60\u80fd\u8fdb\u4e00\u6b65\u5b8c\u5584\u89e3\u6cd5\u5417\uff1f\u8981\u6c42\u5728C++\u6216\u4efb\u4f55\u5176\u4ed6\u8bed\u8a00\u4e2d\u4e0d\u4f7f\u7528\u4efb\u4f55\u5185\u7f6e\u51fd\u6570\uff08\u5982 C++ \u4e2d\u7684&nbsp;<strong>__builtin_popcount</strong>\uff09\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002</li>\n</ul>\n",
        "titleZh": "\u6bd4\u7279\u4f4d\u8ba1\u6570",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Microsoft",
            "Apple",
            "Mathworks"
        ]
    },
    {
        "leetId": "339",
        "link": "nested-list-weight-sum",
        "title": "Nested List Weight Sum",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "46",
        "questionDescription": "\n<p>Given a nested list of integers, return the sum of all integers in the list weighted by their depth.</p>\n<p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p>\n<div>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input: </strong><span id=\"example-input-1-1\">[[1,1],2,[1,1]]</span>\n<strong>Output: </strong><span id=\"example-output-1\">10 </span>\n<strong>Explanation: </strong>Four 1's at depth 2, one 2 at depth 1.</pre>\n<div>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong><span id=\"example-input-2-1\">[1,[4,[6]]]</span>\n<strong>Output: </strong><span id=\"example-output-2\">27 </span>\n<strong>Explanation: </strong>One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3; 1 + 4*2 + 6*3 = 27.</pre>\n</div>\n</div>\n",
        "questionDescriptionZh": "\n<p>Given a nested list of integers, return the sum of all integers in the list weighted by their depth.</p>\n<p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p>\n<div>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input: </strong><span id=\"example-input-1-1\">[[1,1],2,[1,1]]</span>\n<strong>Output: </strong><span id=\"example-output-1\">10 </span>\n<strong>Explanation: </strong>Four 1's at depth 2, one 2 at depth 1.</pre>\n<div>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong><span id=\"example-input-2-1\">[1,[4,[6]]]</span>\n<strong>Output: </strong><span id=\"example-output-2\">27 </span>\n<strong>Explanation: </strong>One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3; 1 + 4*2 + 6*3 = 27.</pre>\n</div>\n</div>\n",
        "companies": [
            "Amazon",
            "Facebook",
            "LinkedIn",
            "Snapchat"
        ]
    },
    {
        "leetId": "340",
        "link": "longest-substring-with-at-most-k-distinct-characters",
        "title": "Longest Substring with At Most K Distinct Characters",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "48",
        "questionDescription": "\n<p>Given a string, find the length of the longest substring T that contains at most <i>k</i> distinct characters.</p>\n<p><strong>Example 1:</strong></p>\n<div>\n<pre><strong>Input: </strong>s = <span id=\"example-input-1-1\">\"eceba\"</span>, k = <span id=\"example-input-1-2\">2</span>\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\n<strong>Explanation: </strong>T is \"ece\" which its length is 3.</pre>\n<div>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong>s = <span id=\"example-input-2-1\">\"aa\"</span>, k = <span id=\"example-input-2-2\">1</span>\n<strong>Output: </strong>2\n<strong>Explanation: </strong>T is \"aa\" which its length is 2.\n</pre>\n</div>\n</div>\n",
        "questionDescriptionZh": "\n<p>Given a string, find the length of the longest substring T that contains at most <i>k</i> distinct characters.</p>\n<p><strong>Example 1:</strong></p>\n<div>\n<pre><strong>Input: </strong>s = <span id=\"example-input-1-1\">\"eceba\"</span>, k = <span id=\"example-input-1-2\">2</span>\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\n<strong>Explanation: </strong>T is \"ece\" which its length is 3.</pre>\n<div>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong>s = <span id=\"example-input-2-1\">\"aa\"</span>, k = <span id=\"example-input-2-2\">1</span>\n<strong>Output: </strong>2\n<strong>Explanation: </strong>T is \"aa\" which its length is 2.\n</pre>\n</div>\n</div>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Quora",
            "Coupang",
            "AppDynamics"
        ]
    },
    {
        "leetId": "341",
        "link": "flatten-nested-list-iterator",
        "title": "Flatten Nested List Iterator",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "57.7%",
        "questionDescription": "<p>Given a nested list of integers, implement an iterator to flatten it.</p>\r\n\r\n<p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[1,1],2,[1,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,1,2,1,1]\r\n</span><strong>Explanation: </strong>By calling <i>next</i> repeatedly until <i>hasNext</i> returns false, \r\n&nbsp;            the order of elements returned by <i>next</i> should be: <code>[1,1,2,1,1]</code>.</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,[4,[6]]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[1,4,6]\r\n</span><strong>Explanation: </strong>By calling <i>next</i> repeatedly until <i>hasNext</i> returns false, \r\n&nbsp;            the order of elements returned by <i>next</i> should be: <code>[1,4,6]</code>.\r\n</pre>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5d4c\u5957\u7684\u6574\u578b\u5217\u8868\u3002\u8bbe\u8ba1\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f7f\u5176\u80fd\u591f\u904d\u5386\u8fd9\u4e2a\u6574\u578b\u5217\u8868\u4e2d\u7684\u6240\u6709\u6574\u6570\u3002</p>\n\n<p>\u5217\u8868\u4e2d\u7684\u9879\u6216\u8005\u4e3a\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u662f\u53e6\u4e00\u4e2a\u5217\u8868\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[[1,1],2,[1,1]]\n<strong>\u8f93\u51fa: </strong>[1,1,2,1,1]\n<strong>\u89e3\u91ca: </strong>\u901a\u8fc7\u91cd\u590d\u8c03\u7528&nbsp;<em>next </em>\u76f4\u5230&nbsp;<em>hasNex</em>t \u8fd4\u56defalse\uff0c<em>next&nbsp;</em>\u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: <code>[1,1,2,1,1]</code>\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,[4,[6]]]\n<strong>\u8f93\u51fa: </strong>[1,4,6]\n<strong>\u89e3\u91ca: </strong>\u901a\u8fc7\u91cd\u590d\u8c03\u7528&nbsp;<em>next&nbsp;</em>\u76f4\u5230&nbsp;<em>hasNex</em>t \u8fd4\u56defalse\uff0c<em>next&nbsp;</em>\u8fd4\u56de\u7684\u5143\u7d20\u7684\u987a\u5e8f\u5e94\u8be5\u662f: <code>[1,4,6]</code>\u3002\n</pre>\n",
        "titleZh": "\u6241\u5e73\u5316\u5d4c\u5957\u5217\u8868\u8fed\u4ee3\u5668",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "LinkedIn",
            "Airbnb",
            "Snapchat",
            "Twitter",
            "Yelp",
            "Hulu",
            "AppDynamics"
        ]
    },
    {
        "leetId": "342",
        "link": "power-of-four",
        "title": "Power of Four",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "45.2%",
        "questionDescription": "<p>Given an integer (signed 32 bits), write a function to check whether it is a power of 4.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">16</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span></pre>\r\n</div>\r\n\r\n<p><b>Follow up</b>: Could you solve it without loops/recursion?</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 (32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570)\uff0c\u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 4&nbsp;\u7684\u5e42\u6b21\u65b9\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>16\n<strong>\u8f93\u51fa: </strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>5\n<strong>\u8f93\u51fa: </strong>false</pre>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br>\n\u4f60\u80fd\u4e0d\u4f7f\u7528\u5faa\u73af\u6216\u8005\u9012\u5f52\u6765\u5b8c\u6210\u672c\u9898\u5417\uff1f</p>\n",
        "titleZh": "4\u7684\u5e42",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ],
        "companies": [
            "Uber",
            "Two Sigma"
        ]
    },
    {
        "leetId": "343",
        "link": "integer-break",
        "title": "Integer Break",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "49.6%",
        "questionDescription": "<p>Given a positive integer <i>n</i>, break it into the sum of <b>at least</b> two positive integers and maximize the product of those integers. Return the maximum product you can get.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>2 = 1 + 1, 1 &times; 1 = 1.</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">36</span>\r\n<strong>Explanation: </strong>10 = 3 + 3 + 4, 3 &times;&nbsp;3 &times;&nbsp;4 = 36.</pre>\r\n\r\n<p><b>Note</b>: You may assume that <i>n</i> is not less than 2 and not larger than 58.</p>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<em>n</em>\uff0c\u5c06\u5176\u62c6\u5206\u4e3a<strong>\u81f3\u5c11</strong>\u4e24\u4e2a\u6b63\u6574\u6570\u7684\u548c\uff0c\u5e76\u4f7f\u8fd9\u4e9b\u6574\u6570\u7684\u4e58\u79ef\u6700\u5927\u5316\u3002 \u8fd4\u56de\u4f60\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>2\n<strong>\u8f93\u51fa: </strong>1\n<strong>\u89e3\u91ca: </strong>2 = 1 + 1, 1 &times; 1 = 1\u3002</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>10\n<strong>\u8f93\u51fa: </strong>36\n<strong>\u89e3\u91ca: </strong>10 = 3 + 3 + 4, 3 &times;&nbsp;3 &times;&nbsp;4 = 36\u3002</pre>\n\n<p><strong>\u8bf4\u660e: </strong>\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<em>n&nbsp;</em>\u4e0d\u5c0f\u4e8e 2 \u4e14\u4e0d\u5927\u4e8e 58\u3002</p>\n",
        "titleZh": "\u6574\u6570\u62c6\u5206",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Tencent"
        ]
    },
    {
        "leetId": "344",
        "link": "reverse-string",
        "title": "Reverse String",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "65.8%",
        "questionDescription": "<p>Write a function that reverses a string. The input string is given as an array of characters <code>char[]</code>.</p>\r\n\r\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array&nbsp;<a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\r\n\r\n<p>You may assume all the characters consist of <a href=\"https://en.wikipedia.org/wiki/ASCII#Printable_characters\" target=\"_blank\">printable ascii characters</a>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span>\r\n</pre>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u662f\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\u8fc7\u6765\u3002\u8f93\u5165\u5b57\u7b26\u4e32\u4ee5\u5b57\u7b26\u6570\u7ec4 <code>char[]</code> \u7684\u5f62\u5f0f\u7ed9\u51fa\u3002</p>\n\n<p>\u4e0d\u8981\u7ed9\u53e6\u5916\u7684\u6570\u7ec4\u5206\u914d\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b<strong><a href=\"https://baike.baidu.com/item/\u539f\u5730\u7b97\u6cd5\" target=\"_blank\">\u539f\u5730</a>\u4fee\u6539\u8f93\u5165\u6570\u7ec4</strong>\u3001\u4f7f\u7528 O(1) \u7684\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u662f <a href=\"https://baike.baidu.com/item/ASCII\" target=\"_blank\">ASCII</a> \u7801\u8868\u4e2d\u7684\u53ef\u6253\u5370\u5b57\u7b26\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</pre>\n",
        "titleZh": "\u53cd\u8f6c\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Goldman Sachs",
            "eBay",
            "Tencent",
            "Walmart Labs",
            "VMware",
            "Cisco",
            "GoDaddy",
            "Huawei"
        ]
    },
    {
        "leetId": "345",
        "link": "reverse-vowels-of-a-string",
        "title": "Reverse Vowels of a String",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "46.0%",
        "questionDescription": "<p>Write a function that takes a string as input and reverse only the vowels of a string.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;hello&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;holle&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;leetcode&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;leotcede&quot;</span></pre>\r\n</div>\r\n\r\n<p><b>Note:</b><br />\r\nThe vowels does not include the letter &quot;y&quot;.</p>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4ee5\u5b57\u7b26\u4e32\u4f5c\u4e3a\u8f93\u5165\uff0c\u53cd\u8f6c\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;hello&quot;\n<strong>\u8f93\u51fa: </strong>&quot;holle&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;leetcode&quot;\n<strong>\u8f93\u51fa: </strong>&quot;leotcede&quot;</pre>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u5143\u97f3\u5b57\u6bcd\u4e0d\u5305\u542b\u5b57\u6bcd&quot;y&quot;\u3002</p>\n",
        "titleZh": "\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Microsoft"
        ]
    },
    {
        "leetId": "346",
        "link": "moving-average-from-data-stream",
        "title": "Moving Average from Data Stream",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "47",
        "questionDescription": "\n<p>Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.</p>\n<p><strong>Example:</strong></p>\n<pre>MovingAverage m = new MovingAverage(3);\nm.next(1) = 1\nm.next(10) = (1 + 10) / 2\nm.next(3) = (1 + 10 + 3) / 3\nm.next(5) = (10 + 3 + 5) / 3\n</pre>\n<p>\u00a0</p>\n",
        "questionDescriptionZh": "\n<p>Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.</p>\n<p><strong>Example:</strong></p>\n<pre>MovingAverage m = new MovingAverage(3);\nm.next(1) = 1\nm.next(10) = (1 + 10) / 2\nm.next(3) = (1 + 10 + 3) / 3\nm.next(5) = (10 + 3 + 5) / 3\n</pre>\n<p>\u00a0</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Twitter",
            "Indeed"
        ]
    },
    {
        "leetId": "347",
        "link": "top-k-frequent-elements",
        "title": "Top K Frequent Elements",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "55.4%",
        "questionDescription": "<p>Given a non-empty array of integers, return the <b><i>k</i></b> most frequent elements.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = <span id=\"example-input-1-1\">[1,1,1,2,2,3]</span>, k = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = <span id=\"example-input-2-1\">[1]</span>, k = <span id=\"example-input-2-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[1]</span></pre>\r\n</div>\r\n\r\n<p><b>Note: </b></p>\r\n\r\n<ul>\r\n\t<li>You may assume <i>k</i> is always valid, 1 &le; <i>k</i> &le; number of unique elements.</li>\r\n\t<li>Your algorithm&#39;s time complexity <b>must be</b> better than O(<i>n</i> log <i>n</i>), where <i>n</i> is the array&#39;s size.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u4e2d\u51fa\u73b0\u9891\u7387\u524d&nbsp;<strong><em>k&nbsp;</em></strong>\u9ad8\u7684\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums = [1,1,1,2,2,3], k = 2\n<strong>\u8f93\u51fa: </strong>[1,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums = [1], k = 1\n<strong>\u8f93\u51fa: </strong>[1]</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684&nbsp;<em>k&nbsp;</em>\u603b\u662f\u5408\u7406\u7684\uff0c\u4e14 1 &le; k &le; \u6570\u7ec4\u4e2d\u4e0d\u76f8\u540c\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002</li>\n\t<li>\u4f60\u7684\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6<strong>\u5fc5\u987b</strong>\u4f18\u4e8e O(<em>n</em> log <em>n</em>) ,&nbsp;<em>n&nbsp;</em>\u662f\u6570\u7ec4\u7684\u5927\u5c0f\u3002</li>\n</ul>\n",
        "titleZh": "\u524dK\u4e2a\u9ad8\u9891\u5143\u7d20",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Baidu",
            "Twitter",
            "Yelp",
            "Pocket Gems",
            "Nutanix",
            "Dropbox",
            "Twilio"
        ]
    },
    {
        "leetId": "348",
        "link": "design-tic-tac-toe",
        "title": "Design Tic-Tac-Toe",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "57",
        "questionDescription": "\n<p>Design a Tic-tac-toe game that is played between two players on a <i>n</i> x <i>n</i> grid.\n</p>\n<p>You may assume the following rules:\n</p><ol>\n<li>A move is guaranteed to be valid and is placed on an empty block.</li>\n<li>Once a winning condition is reached, no more moves is allowed.</li>\n<li>A player who succeeds in placing <i>n</i> of their marks in a horizontal, vertical, or diagonal row wins the game.</li>\n</ol>\n<p></p>\n<p><b>Example:</b><br/>\n</p><pre>Given <i>n</i> = 3, assume that player 1 is \"X\" and player 2 is \"O\" in the board.\n\nTicTacToe toe = new TicTacToe(3);\n\ntoe.move(0, 0, 1); -&gt; Returns 0 (no one wins)\n|X| | |\n| | | |    // Player 1 makes a move at (0, 0).\n| | | |\n\ntoe.move(0, 2, 2); -&gt; Returns 0 (no one wins)\n|X| |O|\n| | | |    // Player 2 makes a move at (0, 2).\n| | | |\n\ntoe.move(2, 2, 1); -&gt; Returns 0 (no one wins)\n|X| |O|\n| | | |    // Player 1 makes a move at (2, 2).\n| | |X|\n\ntoe.move(1, 1, 2); -&gt; Returns 0 (no one wins)\n|X| |O|\n| |O| |    // Player 2 makes a move at (1, 1).\n| | |X|\n\ntoe.move(2, 0, 1); -&gt; Returns 0 (no one wins)\n|X| |O|\n| |O| |    // Player 1 makes a move at (2, 0).\n|X| |X|\n\ntoe.move(1, 0, 2); -&gt; Returns 0 (no one wins)\n|X| |O|\n|O|O| |    // Player 2 makes a move at (1, 0).\n|X| |X|\n\ntoe.move(2, 1, 1); -&gt; Returns 1 (player 1 wins)\n|X| |O|\n|O|O| |    // Player 1 makes a move at (2, 1).\n|X|X|X|\n</pre>\n<p></p>\n<p><b>Follow up:</b><br/>\nCould you do better than O(<i>n</i><sup>2</sup>) per <code>move()</code> operation?\n</p>\n",
        "questionDescriptionZh": "\n<p>Design a Tic-tac-toe game that is played between two players on a <i>n</i> x <i>n</i> grid.\n</p>\n<p>You may assume the following rules:\n</p><ol>\n<li>A move is guaranteed to be valid and is placed on an empty block.</li>\n<li>Once a winning condition is reached, no more moves is allowed.</li>\n<li>A player who succeeds in placing <i>n</i> of their marks in a horizontal, vertical, or diagonal row wins the game.</li>\n</ol>\n<p></p>\n<p><b>Example:</b><br/>\n</p><pre>Given <i>n</i> = 3, assume that player 1 is \"X\" and player 2 is \"O\" in the board.\n\nTicTacToe toe = new TicTacToe(3);\n\ntoe.move(0, 0, 1); -&gt; Returns 0 (no one wins)\n|X| | |\n| | | |    // Player 1 makes a move at (0, 0).\n| | | |\n\ntoe.move(0, 2, 2); -&gt; Returns 0 (no one wins)\n|X| |O|\n| | | |    // Player 2 makes a move at (0, 2).\n| | | |\n\ntoe.move(2, 2, 1); -&gt; Returns 0 (no one wins)\n|X| |O|\n| | | |    // Player 1 makes a move at (2, 2).\n| | |X|\n\ntoe.move(1, 1, 2); -&gt; Returns 0 (no one wins)\n|X| |O|\n| |O| |    // Player 2 makes a move at (1, 1).\n| | |X|\n\ntoe.move(2, 0, 1); -&gt; Returns 0 (no one wins)\n|X| |O|\n| |O| |    // Player 1 makes a move at (2, 0).\n|X| |X|\n\ntoe.move(1, 0, 2); -&gt; Returns 0 (no one wins)\n|X| |O|\n|O|O| |    // Player 2 makes a move at (1, 0).\n|X| |X|\n\ntoe.move(2, 1, 1); -&gt; Returns 1 (player 1 wins)\n|X| |O|\n|O|O| |    // Player 1 makes a move at (2, 1).\n|X|X|X|\n</pre>\n<p></p>\n<p><b>Follow up:</b><br/>\nCould you do better than O(<i>n</i><sup>2</sup>) per <code>move()</code> operation?\n</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Apple",
            "Twitter",
            "TripleByte"
        ]
    },
    {
        "leetId": "349",
        "link": "intersection-of-two-arrays",
        "title": "Intersection of Two Arrays",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "61.8%",
        "questionDescription": "<p>Given two arrays, write a function to compute their intersection.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = <span id=\"example-input-1-1\">[1,2,2,1]</span>, nums2 = <span id=\"example-input-1-2\">[2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = <span id=\"example-input-2-1\">[4,9,5]</span>, nums2 = <span id=\"example-input-2-2\">[9,4,9,8,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[9,4]</span></pre>\r\n</div>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>Each element in the result must be unique.</li>\r\n\t<li>The result can be in any order.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>\u8f93\u51fa: </strong>[2]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>\u8f93\u51fa: </strong>[9,4]</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u8f93\u51fa\u7ed3\u679c\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e00\u5b9a\u662f\u552f\u4e00\u7684\u3002</li>\n\t<li>\u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002</li>\n</ul>\n",
        "titleZh": "\u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Oracle",
            "Yelp",
            "Tencent",
            "Lyft",
            "Two Sigma",
            "Indeed"
        ]
    },
    {
        "leetId": "350",
        "link": "intersection-of-two-arrays-ii",
        "title": "Intersection of Two Arrays II",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "40.7%",
        "questionDescription": "<p>Given two arrays, write a function to compute their intersection.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = <span id=\"example-input-1-1\">[1,2,2,1]</span>, nums2 = <span id=\"example-input-1-2\">[2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = <span id=\"example-input-2-1\">[4,9,5]</span>, nums2 = <span id=\"example-input-2-2\">[9,4,9,8,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[4,9]</span></pre>\r\n</div>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>Each element in the result should appear as many times as it shows in both arrays.</li>\r\n\t<li>The result can be in any order.</li>\r\n</ul>\r\n\r\n<p><b>Follow up:</b></p>\r\n\r\n<ul>\r\n\t<li>What if the given array is already sorted? How would you optimize your algorithm?</li>\r\n\t<li>What if <i>nums1</i>&#39;s size is small compared to <i>nums2</i>&#39;s size? Which algorithm is better?</li>\r\n\t<li>What if elements of <i>nums2</i> are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>\u8f93\u51fa: </strong>[2,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>\u8f93\u51fa: </strong>[4,9]</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u8f93\u51fa\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e94\u4e0e\u5143\u7d20\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u4e00\u81f4\u3002</li>\n\t<li>\u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002</li>\n</ul>\n\n<p><strong><strong>\u8fdb\u9636:</strong></strong></p>\n\n<ul>\n\t<li>\u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u5df2\u7ecf\u6392\u597d\u5e8f\u5462\uff1f\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f</li>\n\t<li>\u5982\u679c&nbsp;<em>nums1&nbsp;</em>\u7684\u5927\u5c0f\u6bd4&nbsp;<em>nums2&nbsp;</em>\u5c0f\u5f88\u591a\uff0c\u54ea\u79cd\u65b9\u6cd5\u66f4\u4f18\uff1f</li>\n\t<li>\u5982\u679c&nbsp;<em>nums2&nbsp;</em>\u7684\u5143\u7d20\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u78c1\u76d8\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u5e76\u4e14\u4f60\u4e0d\u80fd\u4e00\u6b21\u52a0\u8f7d\u6240\u6709\u7684\u5143\u7d20\u5230\u5185\u5b58\u4e2d\uff0c\u4f60\u8be5\u600e\u4e48\u529e\uff1f</li>\n</ul>\n",
        "titleZh": "\u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Uber",
            "Alibaba",
            "Oracle",
            "Yelp"
        ]
    },
    {
        "leetId": "351",
        "link": "android-unlock-patterns",
        "title": "Android Unlock Patterns",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "7",
        "questionDescription": "\n<p>Given an Android <b>3x3</b> key lock screen and two integers <b>m</b> and <b>n</b>, where 1 \u2264 m \u2264 n \u2264 9, count the total number of unlock patterns of the Android lock screen, which consist of minimum of <b>m</b> keys and maximum <b>n</b> keys.</p>\n<p><b>Rules for a valid pattern:</b></p>\n<ol>\n<li>Each pattern must connect at least <b>m</b> keys and at most <b>n</b> keys.</li>\n<li>All the keys must be distinct.</li>\n<li>If the line connecting two consecutive keys in the pattern passes through any other keys, the other keys must have previously selected in the pattern. No jumps through non selected key is allowed.</li>\n<li>The order of keys used matters.</li>\n</ol>\n<p>\u00a0</p>\n<img src=\"https://leetcode.com/static/images/problemset/android-unlock.png\"/>\n<p><b>Explanation:</b></p>\n<pre>| 1 | 2 | 3 |\n| 4 | 5 | 6 |\n| 7 | 8 | 9 |</pre>\n<p><b>Invalid move:</b> <code>4 - 1 - 3 - 6 </code><br/>\nLine 1 - 3 passes through key 2 which had not been selected in the pattern.</p>\n<p><b>Invalid move:</b> <code>4 - 1 - 9 - 2</code><br/>\nLine 1 - 9 passes through key 5 which had not been selected in the pattern.</p>\n<p><b>Valid move:</b> <code>2 - 4 - 1 - 3 - 6</code><br/>\nLine 1 - 3 is valid because it passes through key 2, which had been selected in the pattern</p>\n<p><b>Valid move:</b> <code>6 - 5 - 4 - 1 - 9 - 2</code><br/>\nLine 1 - 9 is valid because it passes through key 5, which had been selected in the pattern.</p>\n<p><strong>Example:</strong></p>\n<div>\n<pre><strong>Input: </strong>m = <span id=\"example-input-1-1\">1</span>, n = <span id=\"example-input-1-2\">1</span>\n<strong>Output: </strong><span id=\"example-output-1\">9</span>\n</pre>\n</div>\n",
        "questionDescriptionZh": "\n<p>Given an Android <b>3x3</b> key lock screen and two integers <b>m</b> and <b>n</b>, where 1 \u2264 m \u2264 n \u2264 9, count the total number of unlock patterns of the Android lock screen, which consist of minimum of <b>m</b> keys and maximum <b>n</b> keys.</p>\n<p><b>Rules for a valid pattern:</b></p>\n<ol>\n<li>Each pattern must connect at least <b>m</b> keys and at most <b>n</b> keys.</li>\n<li>All the keys must be distinct.</li>\n<li>If the line connecting two consecutive keys in the pattern passes through any other keys, the other keys must have previously selected in the pattern. No jumps through non selected key is allowed.</li>\n<li>The order of keys used matters.</li>\n</ol>\n<p>\u00a0</p>\n<img src=\"https://leetcode.com/static/images/problemset/android-unlock.png\"/>\n<p><b>Explanation:</b></p>\n<pre>| 1 | 2 | 3 |\n| 4 | 5 | 6 |\n| 7 | 8 | 9 |</pre>\n<p><b>Invalid move:</b> <code>4 - 1 - 3 - 6 </code><br/>\nLine 1 - 3 passes through key 2 which had not been selected in the pattern.</p>\n<p><b>Invalid move:</b> <code>4 - 1 - 9 - 2</code><br/>\nLine 1 - 9 passes through key 5 which had not been selected in the pattern.</p>\n<p><b>Valid move:</b> <code>2 - 4 - 1 - 3 - 6</code><br/>\nLine 1 - 3 is valid because it passes through key 2, which had been selected in the pattern</p>\n<p><b>Valid move:</b> <code>6 - 5 - 4 - 1 - 9 - 2</code><br/>\nLine 1 - 9 is valid because it passes through key 5, which had been selected in the pattern.</p>\n<p><strong>Example:</strong></p>\n<div>\n<pre><strong>Input: </strong>m = <span id=\"example-input-1-1\">1</span>, n = <span id=\"example-input-1-2\">1</span>\n<strong>Output: </strong><span id=\"example-output-1\">9</span>\n</pre>\n</div>\n",
        "companies": [
            "Google",
            "Microsoft",
            "Apple",
            "Snapchat"
        ]
    },
    {
        "leetId": "352",
        "link": "data-stream-as-disjoint-intervals",
        "title": "Data Stream as Disjoint Intervals",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "52.2%",
        "questionDescription": "<p>Given a data stream input of non-negative integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>, ..., summarize the numbers seen so far as a list of disjoint intervals.</p>\r\n\r\n<p>For example, suppose the integers from the data stream are 1, 3, 7, 2, 6, ..., then the summary will be:</p>\r\n\r\n<pre>\r\n[1, 1]\r\n[1, 1], [3, 3]\r\n[1, 1], [3, 3], [7, 7]\r\n[1, 3], [7, 7]\r\n[1, 3], [6, 7]\r\n</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nWhat if there are lots of merges and the number of disjoint intervals are small compared to the data stream&#39;s size?</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u7684\u6570\u636e\u6d41\u8f93\u5165 a<sub>1</sub>\uff0ca<sub>2</sub>\uff0c&hellip;\uff0ca<sub>n\uff0c</sub>&hellip;\uff0c\u5c06\u5230\u76ee\u524d\u4e3a\u6b62\u770b\u5230\u7684\u6570\u5b57\u603b\u7ed3\u4e3a\u4e0d\u76f8\u4ea4\u7684\u533a\u95f4\u5217\u8868\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5047\u8bbe\u6570\u636e\u6d41\u4e2d\u7684\u6574\u6570\u4e3a 1\uff0c3\uff0c7\uff0c2\uff0c6\uff0c&hellip;\uff0c\u6bcf\u6b21\u7684\u603b\u7ed3\u4e3a\uff1a</p>\n\n<pre>[1, 1]\n[1, 1], [3, 3]\n[1, 1], [3, 3], [7, 7]\n[1, 3], [7, 7]\n[1, 3], [6, 7]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br>\n\u5982\u679c\u6709\u5f88\u591a\u5408\u5e76\uff0c\u5e76\u4e14\u4e0e\u6570\u636e\u6d41\u7684\u5927\u5c0f\u76f8\u6bd4\uff0c\u4e0d\u76f8\u4ea4\u533a\u95f4\u7684\u6570\u91cf\u5f88\u5c0f\uff0c\u8be5\u600e\u4e48\u529e?</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong><br>\n\u7279\u522b\u611f\u8c22 <a href=\"https://discuss.leetcode.com/user/yunhong\">@yunhong</a> \u63d0\u4f9b\u4e86\u672c\u95ee\u9898\u548c\u5176\u6d4b\u8bd5\u7528\u4f8b\u3002</p>\n",
        "titleZh": "\u5c06\u6570\u636e\u6d41\u53d8\u4e3a\u591a\u4e2a\u4e0d\u76f8\u4ea4\u533a\u95f4",
        "tags": [
            {
                "tag": "Binary Search Tree",
                "link": "binary-search-tree",
                "tagZh": "\u4e8c\u53c9\u641c\u7d22\u6811"
            }
        ],
        "companies": [
            "Apple",
            "LinkedIn"
        ]
    },
    {
        "leetId": "353",
        "link": "design-snake-game",
        "title": "Design Snake Game",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "40",
        "questionDescription": "\n<p>Design a <a href=\"https://en.wikipedia.org/wiki/Snake_(video_game)\" target=\"_blank\">Snake game</a> that is played on a device with screen size = <i>width</i> x <i>height</i>. <a href=\"http://patorjk.com/games/snake/\" target=\"_blank\">Play the game online</a> if you are not familiar with the game.</p>\n<p>The snake is initially positioned at the top left corner (0,0) with length = 1 unit.</p>\n<p>You are given a list of food's positions in row-column order. When a snake eats the food, its length and the game's score both increase by 1.</p>\n<p>Each food appears one by one on the screen. For example, the second food will not appear until the first food was eaten by the snake.</p>\n<p>When a food does appear on the screen, it is guaranteed that it will not appear on a block occupied by the snake.</p>\n<p><b>Example:</b></p>\n<pre>Given width = 3, height = 2, and food = [[1,2],[0,1]].\n\nSnake snake = new Snake(width, height, food);\n\nInitially the snake appears at position (0,0) and the food at (1,2).\n\n|S| | |\n| | |F|\n\nsnake.move(\"R\"); -&gt; Returns 0\n\n| |S| |\n| | |F|\n\nsnake.move(\"D\"); -&gt; Returns 0\n\n| | | |\n| |S|F|\n\nsnake.move(\"R\"); -&gt; Returns 1 (Snake eats the first food and right after that, the second food appears at (0,1) )\n\n| |F| |\n| |S|S|\n\nsnake.move(\"U\"); -&gt; Returns 1\n\n| |F|S|\n| | |S|\n\nsnake.move(\"L\"); -&gt; Returns 2 (Snake eats the second food)\n\n| |S|S|\n| | |S|\n\nsnake.move(\"U\"); -&gt; Returns -1 (Game over because snake collides with border)\n</pre>\n",
        "questionDescriptionZh": "\n<p>Design a <a href=\"https://en.wikipedia.org/wiki/Snake_(video_game)\" target=\"_blank\">Snake game</a> that is played on a device with screen size = <i>width</i> x <i>height</i>. <a href=\"http://patorjk.com/games/snake/\" target=\"_blank\">Play the game online</a> if you are not familiar with the game.</p>\n<p>The snake is initially positioned at the top left corner (0,0) with length = 1 unit.</p>\n<p>You are given a list of food's positions in row-column order. When a snake eats the food, its length and the game's score both increase by 1.</p>\n<p>Each food appears one by one on the screen. For example, the second food will not appear until the first food was eaten by the snake.</p>\n<p>When a food does appear on the screen, it is guaranteed that it will not appear on a block occupied by the snake.</p>\n<p><b>Example:</b></p>\n<pre>Given width = 3, height = 2, and food = [[1,2],[0,1]].\n\nSnake snake = new Snake(width, height, food);\n\nInitially the snake appears at position (0,0) and the food at (1,2).\n\n|S| | |\n| | |F|\n\nsnake.move(\"R\"); -&gt; Returns 0\n\n| |S| |\n| | |F|\n\nsnake.move(\"D\"); -&gt; Returns 0\n\n| | | |\n| |S|F|\n\nsnake.move(\"R\"); -&gt; Returns 1 (Snake eats the first food and right after that, the second food appears at (0,1) )\n\n| |F| |\n| |S|S|\n\nsnake.move(\"U\"); -&gt; Returns 1\n\n| |F|S|\n| | |S|\n\nsnake.move(\"L\"); -&gt; Returns 2 (Snake eats the second food)\n\n| |S|S|\n| | |S|\n\nsnake.move(\"U\"); -&gt; Returns -1 (Game over because snake collides with border)\n</pre>\n",
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Uber",
            "Zillow"
        ]
    },
    {
        "leetId": "354",
        "link": "russian-doll-envelopes",
        "title": "Russian Doll Envelopes",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "31.9%",
        "questionDescription": "<p>You have a number of envelopes with widths and heights given as a pair of integers <code>(w, h)</code>. One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.</p>\r\n\r\n<p>What is the maximum number of envelopes can you Russian doll? (put one inside other)</p>\r\n\r\n<p><b>Note:</b><br />\r\nRotation is not allowed.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[5,4],[6,4],[6,7],[2,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3 \r\n<strong>Explanation: T</strong></span>he maximum number of envelopes you can Russian doll is <code>3</code> ([2,3] =&gt; [5,4] =&gt; [6,7]).\r\n</pre>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e9b\u6807\u8bb0\u4e86\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u7684\u4fe1\u5c01\uff0c\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u4ee5\u6574\u6570\u5bf9\u5f62\u5f0f&nbsp;<code>(w, h)</code>&nbsp;\u51fa\u73b0\u3002\u5f53\u53e6\u4e00\u4e2a\u4fe1\u5c01\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u90fd\u6bd4\u8fd9\u4e2a\u4fe1\u5c01\u5927\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u4fe1\u5c01\u5c31\u53ef\u4ee5\u653e\u8fdb\u53e6\u4e00\u4e2a\u4fe1\u5c01\u91cc\uff0c\u5982\u540c\u4fc4\u7f57\u65af\u5957\u5a03\u4e00\u6837\u3002</p>\n\n<p>\u8bf7\u8ba1\u7b97\u6700\u591a\u80fd\u6709\u591a\u5c11\u4e2a\u4fe1\u5c01\u80fd\u7ec4\u6210\u4e00\u7ec4&ldquo;\u4fc4\u7f57\u65af\u5957\u5a03&rdquo;\u4fe1\u5c01\uff08\u5373\u53ef\u4ee5\u628a\u4e00\u4e2a\u4fe1\u5c01\u653e\u5230\u53e6\u4e00\u4e2a\u4fe1\u5c01\u91cc\u9762\uff09\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong><br>\n\u4e0d\u5141\u8bb8\u65cb\u8f6c\u4fe1\u5c01\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> envelopes = <code>[[5,4],[6,4],[6,7],[2,3]]</code>\n<strong>\u8f93\u51fa:</strong> 3 \n<strong>\u89e3\u91ca:</strong> \u6700\u591a\u4fe1\u5c01\u7684\u4e2a\u6570\u4e3a <code>3, \u7ec4\u5408\u4e3a: </code>[2,3] =&gt; [5,4] =&gt; [6,7]\u3002\n</pre>\n",
        "titleZh": "\u4fc4\u7f57\u65af\u5957\u5a03\u4fe1\u5c01\u95ee\u9898",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Uber",
            "Quora"
        ]
    },
    {
        "leetId": "355",
        "link": "design-twitter",
        "title": "Design Twitter",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "32.1%",
        "questionDescription": "<p>Design a simplified version of Twitter where users can post tweets, follow/unfollow another user and is able to see the 10 most recent tweets in the user's news feed. Your design should support the following methods:</p>\r\n\r\n<p>\r\n<ol>\r\n<li><b>postTweet(userId, tweetId)</b>: Compose a new tweet.</li>\r\n<li><b>getNewsFeed(userId)</b>: Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent.</li>\r\n<li><b>follow(followerId, followeeId)</b>: Follower follows a followee.</li>\r\n<li><b>unfollow(followerId, followeeId)</b>: Follower unfollows a followee.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nTwitter twitter = new Twitter();\r\n\r\n// User 1 posts a new tweet (id = 5).\r\ntwitter.postTweet(1, 5);\r\n\r\n// User 1's news feed should return a list with 1 tweet id -> [5].\r\ntwitter.getNewsFeed(1);\r\n\r\n// User 1 follows user 2.\r\ntwitter.follow(1, 2);\r\n\r\n// User 2 posts a new tweet (id = 6).\r\ntwitter.postTweet(2, 6);\r\n\r\n// User 1's news feed should return a list with 2 tweet ids -> [6, 5].\r\n// Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\r\ntwitter.getNewsFeed(1);\r\n\r\n// User 1 unfollows user 2.\r\ntwitter.unfollow(1, 2);\r\n\r\n// User 1's news feed should return a list with 1 tweet id -> [5],\r\n// since user 1 is no longer following user 2.\r\ntwitter.getNewsFeed(1);\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u8bbe\u8ba1\u4e00\u4e2a\u7b80\u5316\u7248\u7684\u63a8\u7279(Twitter)\uff0c\u53ef\u4ee5\u8ba9\u7528\u6237\u5b9e\u73b0\u53d1\u9001\u63a8\u6587\uff0c\u5173\u6ce8/\u53d6\u6d88\u5173\u6ce8\u5176\u4ed6\u7528\u6237\uff0c\u80fd\u591f\u770b\u89c1\u5173\u6ce8\u4eba\uff08\u5305\u62ec\u81ea\u5df1\uff09\u7684\u6700\u8fd1\u5341\u6761\u63a8\u6587\u3002\u4f60\u7684\u8bbe\u8ba1\u9700\u8981\u652f\u6301\u4ee5\u4e0b\u7684\u51e0\u4e2a\u529f\u80fd\uff1a</p>\n\n<ol>\n\t<li><strong>postTweet(userId, tweetId)</strong>: \u521b\u5efa\u4e00\u6761\u65b0\u7684\u63a8\u6587</li>\n\t<li><strong>getNewsFeed(userId)</strong>: \u68c0\u7d22\u6700\u8fd1\u7684\u5341\u6761\u63a8\u6587\u3002\u6bcf\u4e2a\u63a8\u6587\u90fd\u5fc5\u987b\u662f\u7531\u6b64\u7528\u6237\u5173\u6ce8\u7684\u4eba\u6216\u8005\u662f\u7528\u6237\u81ea\u5df1\u53d1\u51fa\u7684\u3002\u63a8\u6587\u5fc5\u987b\u6309\u7167\u65f6\u95f4\u987a\u5e8f\u7531\u6700\u8fd1\u7684\u5f00\u59cb\u6392\u5e8f\u3002</li>\n\t<li><strong>follow(followerId, followeeId)</strong>: \u5173\u6ce8\u4e00\u4e2a\u7528\u6237</li>\n\t<li><strong>unfollow(followerId, followeeId)</strong>: \u53d6\u6d88\u5173\u6ce8\u4e00\u4e2a\u7528\u6237</li>\n</ol>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\nTwitter twitter = new Twitter();\n\n// \u7528\u62371\u53d1\u9001\u4e86\u4e00\u6761\u65b0\u63a8\u6587 (\u7528\u6237id = 1, \u63a8\u6587id = 5).\ntwitter.postTweet(1, 5);\n\n// \u7528\u62371\u7684\u83b7\u53d6\u63a8\u6587\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2aid\u4e3a5\u7684\u63a8\u6587.\ntwitter.getNewsFeed(1);\n\n// \u7528\u62371\u5173\u6ce8\u4e86\u7528\u62372.\ntwitter.follow(1, 2);\n\n// \u7528\u62372\u53d1\u9001\u4e86\u4e00\u4e2a\u65b0\u63a8\u6587 (\u63a8\u6587id = 6).\ntwitter.postTweet(2, 6);\n\n// \u7528\u62371\u7684\u83b7\u53d6\u63a8\u6587\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u5305\u542b\u4e24\u4e2a\u63a8\u6587\uff0cid\u5206\u522b\u4e3a -&gt; [6, 5].\n// \u63a8\u6587id6\u5e94\u5f53\u5728\u63a8\u6587id5\u4e4b\u524d\uff0c\u56e0\u4e3a\u5b83\u662f\u57285\u4e4b\u540e\u53d1\u9001\u7684.\ntwitter.getNewsFeed(1);\n\n// \u7528\u62371\u53d6\u6d88\u5173\u6ce8\u4e86\u7528\u62372.\ntwitter.unfollow(1, 2);\n\n// \u7528\u62371\u7684\u83b7\u53d6\u63a8\u6587\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2aid\u4e3a5\u7684\u63a8\u6587.\n// \u56e0\u4e3a\u7528\u62371\u5df2\u7ecf\u4e0d\u518d\u5173\u6ce8\u7528\u62372.\ntwitter.getNewsFeed(1);\n</pre>\n",
        "titleZh": "\u8bbe\u8ba1\u63a8\u7279",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Amazon",
            "Twitter"
        ]
    },
    {
        "leetId": "356",
        "link": "line-reflection",
        "title": "Line Reflection",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "14",
        "questionDescription": "\n<p>Given n points on a 2D plane, find if there is such a line parallel to y-axis that reflect the given points.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input: </strong><span id=\"example-input-1-1\">[[1,1],[-1,1]]</span>\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\n</pre>\n<div>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong><span id=\"example-input-2-1\">[[1,1],[-1,-1]]</span>\n<strong>Output: </strong><span id=\"example-output-2\">false</span></pre>\n</div>\n<p><b>Follow up:</b><br/>\nCould you do better than O(<i>n</i><sup>2</sup>) ?</p>\n",
        "questionDescriptionZh": "\n<p>Given n points on a 2D plane, find if there is such a line parallel to y-axis that reflect the given points.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input: </strong><span id=\"example-input-1-1\">[[1,1],[-1,1]]</span>\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\n</pre>\n<div>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong><span id=\"example-input-2-1\">[[1,1],[-1,-1]]</span>\n<strong>Output: </strong><span id=\"example-output-2\">false</span></pre>\n</div>\n<p><b>Follow up:</b><br/>\nCould you do better than O(<i>n</i><sup>2</sup>) ?</p>\n",
        "companies": [
            "Google",
            "Microsoft",
            "Apple"
        ]
    },
    {
        "leetId": "357",
        "link": "count-numbers-with-unique-digits",
        "title": "Count Numbers with Unique Digits",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "44.4%",
        "questionDescription": "<p>Given a <b>non-negative</b> integer n, count all numbers with unique digits, x, where 0 &le; x &lt; 10<sup>n</sup>.</p>\r\n\r\n<div>\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">91 \r\n<strong>Explanation: </strong></span>The answer should be the total numbers in the range of 0 &le; x &lt; 100, \r\n&nbsp;            excluding <code>11,22,33,44,55,66,77,88,99</code>\r\n</pre>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u975e\u8d1f</strong>\u6574\u6570 n\uff0c\u8ba1\u7b97\u5404\u4f4d\u6570\u5b57\u90fd\u4e0d\u540c\u7684\u6570\u5b57 x \u7684\u4e2a\u6570\uff0c\u5176\u4e2d 0 &le; x &lt; 10<sup>n&nbsp;</sup>\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>2\n<strong>\u8f93\u51fa: </strong>91 \n<strong>\u89e3\u91ca: </strong>\u7b54\u6848\u5e94\u4e3a\u9664\u53bb <code>11,22,33,44,55,66,77,88,99 </code>\u5916\uff0c\u5728 [0,100) \u533a\u95f4\u5185\u7684\u6240\u6709\u6570\u5b57\u3002\n</pre>\n",
        "titleZh": "\u8ba1\u7b97\u5404\u4e2a\u4f4d\u6570\u4e0d\u540c\u7684\u6570\u5b57\u4e2a\u6570",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "358",
        "link": "rearrange-string-k-distance-apart",
        "title": "Rearrange String k Distance Apart",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "24",
        "questionDescription": "\n<p>Given a non-empty string <b>s</b> and an integer <b>k</b>, rearrange the string such that the same characters are at least distance <b>k</b> from each other.</p>\n<p>All input strings are given in lowercase letters. If it is not possible to rearrange the string, return an empty string <code>\"\"</code>.</p>\n<p><strong>Example 1:</strong></p>\n<div>\n<pre><strong>Input: </strong>s = <span id=\"example-input-1-1\">\"aabbcc\"</span>, k = <span id=\"example-input-1-2\">3</span>\n<strong>Output: </strong><span id=\"example-output-1\">\"abcabc\" \n<strong>Explanation: </strong></span>The same letters are at least distance 3 from each other.\n</pre>\n<div>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong>s = <span id=\"example-input-2-1\">\"aaabc\"</span>, k = <span id=\"example-input-2-2\">3</span>\n<strong>Output: </strong><span id=\"example-output-2\">\"\" \n<strong>Explanation:</strong> </span>It is not possible to rearrange the string.\n</pre>\n<div>\n<p><strong>Example 3:</strong></p>\n<pre><strong>Input: </strong>s = <span id=\"example-input-3-1\">\"aaadbbcc\"</span>, k = <span id=\"example-input-3-2\">2</span>\n<strong>Output: </strong><span id=\"example-output-3\">\"abacabcd\"\n</span><span id=\"example-output-2\"><strong>Explanation:</strong> </span>The same letters are at least distance 2 from each other.\n</pre>\n</div>\n</div>\n</div>\n",
        "questionDescriptionZh": "\n<p>Given a non-empty string <b>s</b> and an integer <b>k</b>, rearrange the string such that the same characters are at least distance <b>k</b> from each other.</p>\n<p>All input strings are given in lowercase letters. If it is not possible to rearrange the string, return an empty string <code>\"\"</code>.</p>\n<p><strong>Example 1:</strong></p>\n<div>\n<pre><strong>Input: </strong>s = <span id=\"example-input-1-1\">\"aabbcc\"</span>, k = <span id=\"example-input-1-2\">3</span>\n<strong>Output: </strong><span id=\"example-output-1\">\"abcabc\" \n<strong>Explanation: </strong></span>The same letters are at least distance 3 from each other.\n</pre>\n<div>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong>s = <span id=\"example-input-2-1\">\"aaabc\"</span>, k = <span id=\"example-input-2-2\">3</span>\n<strong>Output: </strong><span id=\"example-output-2\">\"\" \n<strong>Explanation:</strong> </span>It is not possible to rearrange the string.\n</pre>\n<div>\n<p><strong>Example 3:</strong></p>\n<pre><strong>Input: </strong>s = <span id=\"example-input-3-1\">\"aaadbbcc\"</span>, k = <span id=\"example-input-3-2\">2</span>\n<strong>Output: </strong><span id=\"example-output-3\">\"abacabcd\"\n</span><span id=\"example-output-2\"><strong>Explanation:</strong> </span>The same letters are at least distance 2 from each other.\n</pre>\n</div>\n</div>\n</div>\n",
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "359",
        "link": "logger-rate-limiter",
        "title": "Logger Rate Limiter",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "35",
        "questionDescription": "\n<p>Design a logger system that receive stream of messages along with its timestamps, each message should be printed if and only if it is <b>not printed in the last 10 seconds</b>.</p>\n<p>Given a message and a timestamp (in seconds granularity), return true if the message should be printed in the given timestamp, otherwise returns false.</p>\n<p>It is possible that several messages arrive roughly at the same time.</p>\n<p><b>Example:</b></p>\n<pre>Logger logger = new Logger();\n\n// logging string \"foo\" at timestamp 1\nlogger.shouldPrintMessage(1, \"foo\"); returns true; \n\n// logging string \"bar\" at timestamp 2\nlogger.shouldPrintMessage(2,\"bar\"); returns true;\n\n// logging string \"foo\" at timestamp 3\nlogger.shouldPrintMessage(3,\"foo\"); returns false;\n\n// logging string \"bar\" at timestamp 8\nlogger.shouldPrintMessage(8,\"bar\"); returns false;\n\n// logging string \"foo\" at timestamp 10\nlogger.shouldPrintMessage(10,\"foo\"); returns false;\n\n// logging string \"foo\" at timestamp 11\nlogger.shouldPrintMessage(11,\"foo\"); returns true;\n</pre>\n",
        "questionDescriptionZh": "\n<p>Design a logger system that receive stream of messages along with its timestamps, each message should be printed if and only if it is <b>not printed in the last 10 seconds</b>.</p>\n<p>Given a message and a timestamp (in seconds granularity), return true if the message should be printed in the given timestamp, otherwise returns false.</p>\n<p>It is possible that several messages arrive roughly at the same time.</p>\n<p><b>Example:</b></p>\n<pre>Logger logger = new Logger();\n\n// logging string \"foo\" at timestamp 1\nlogger.shouldPrintMessage(1, \"foo\"); returns true; \n\n// logging string \"bar\" at timestamp 2\nlogger.shouldPrintMessage(2,\"bar\"); returns true;\n\n// logging string \"foo\" at timestamp 3\nlogger.shouldPrintMessage(3,\"foo\"); returns false;\n\n// logging string \"bar\" at timestamp 8\nlogger.shouldPrintMessage(8,\"bar\"); returns false;\n\n// logging string \"foo\" at timestamp 10\nlogger.shouldPrintMessage(10,\"foo\"); returns false;\n\n// logging string \"foo\" at timestamp 11\nlogger.shouldPrintMessage(11,\"foo\"); returns true;\n</pre>\n",
        "companies": [
            "Google",
            "Bloomberg",
            "Uber",
            "Yelp"
        ]
    },
    {
        "leetId": "360",
        "link": "sort-transformed-array",
        "title": "Sort Transformed Array",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "34",
        "questionDescription": "\n<p>Given a <b>sorted</b> array of integers <i>nums</i> and integer values <i>a</i>, <i>b</i> and <i>c</i>. Apply a quadratic function of the form f(<i>x</i>) = <i>ax</i><sup>2</sup> + <i>bx</i> + <i>c</i> to each element <i>x</i> in the array.</p>\n<p>The returned array must be in <b>sorted order</b>.</p>\n<p>Expected time complexity: <b>O(<i>n</i>)</b></p>\n<div>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input: </strong>nums = <span id=\"example-input-1-1\">[-4,-2,2,4]</span>, a = <span id=\"example-input-1-2\">1</span>, b = <span id=\"example-input-1-3\">3</span>, c = <span id=\"example-input-1-4\">5</span>\n<strong>Output: </strong><span id=\"example-output-1\">[3,9,15,33]</span>\n</pre>\n<div>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong>nums = <span id=\"example-input-2-1\">[-4,-2,2,4]</span>, a = <span id=\"example-input-2-2\">-1</span>, b = <span id=\"example-input-2-3\">3</span>, c = <span id=\"example-input-2-4\">5</span>\n<strong>Output: </strong><span id=\"example-output-2\">[-23,-5,1,7]</span>\n</pre>\n</div>\n</div>\n",
        "questionDescriptionZh": "\n<p>Given a <b>sorted</b> array of integers <i>nums</i> and integer values <i>a</i>, <i>b</i> and <i>c</i>. Apply a quadratic function of the form f(<i>x</i>) = <i>ax</i><sup>2</sup> + <i>bx</i> + <i>c</i> to each element <i>x</i> in the array.</p>\n<p>The returned array must be in <b>sorted order</b>.</p>\n<p>Expected time complexity: <b>O(<i>n</i>)</b></p>\n<div>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input: </strong>nums = <span id=\"example-input-1-1\">[-4,-2,2,4]</span>, a = <span id=\"example-input-1-2\">1</span>, b = <span id=\"example-input-1-3\">3</span>, c = <span id=\"example-input-1-4\">5</span>\n<strong>Output: </strong><span id=\"example-output-1\">[3,9,15,33]</span>\n</pre>\n<div>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input: </strong>nums = <span id=\"example-input-2-1\">[-4,-2,2,4]</span>, a = <span id=\"example-input-2-2\">-1</span>, b = <span id=\"example-input-2-3\">3</span>, c = <span id=\"example-input-2-4\">5</span>\n<strong>Output: </strong><span id=\"example-output-2\">[-23,-5,1,7]</span>\n</pre>\n</div>\n</div>\n",
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "361",
        "link": "bomb-enemy",
        "title": "Bomb Enemy",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "22",
        "questionDescription": "\n<p>Given a 2D grid, each cell is either a wall <code>'W'</code>, an enemy <code>'E'</code> or empty <code>'0'</code> (the number zero), return the maximum enemies you can kill using one bomb.<br/>\nThe bomb kills all the enemies in the same row and column from the planted point until it hits the wall since the wall is too strong to be destroyed.<br/>\n<strong>Note: </strong>You can only put the bomb at an empty cell.</p>\n<p><strong>Example:</strong></p>\n<div>\n<pre><strong>Input: </strong><span id=\"example-input-1-1\">[[\"0\",\"E\",\"0\",\"0\"],[\"E\",\"0\",\"W\",\"E\"],[\"0\",\"E\",\"0\",\"0\"]]</span>\n<strong>Output: </strong><span id=\"example-output-1\">3 \n<strong>Explanation: </strong></span>For the given grid,\n\n0 E 0 0 \nE 0 W E \n0 E 0 0\n\nPlacing a bomb at (1,1) kills 3 enemies.\n</pre>\n</div>\n",
        "questionDescriptionZh": "\n<p>Given a 2D grid, each cell is either a wall <code>'W'</code>, an enemy <code>'E'</code> or empty <code>'0'</code> (the number zero), return the maximum enemies you can kill using one bomb.<br/>\nThe bomb kills all the enemies in the same row and column from the planted point until it hits the wall since the wall is too strong to be destroyed.<br/>\n<strong>Note: </strong>You can only put the bomb at an empty cell.</p>\n<p><strong>Example:</strong></p>\n<div>\n<pre><strong>Input: </strong><span id=\"example-input-1-1\">[[\"0\",\"E\",\"0\",\"0\"],[\"E\",\"0\",\"W\",\"E\"],[\"0\",\"E\",\"0\",\"0\"]]</span>\n<strong>Output: </strong><span id=\"example-output-1\">3 \n<strong>Explanation: </strong></span>For the given grid,\n\n0 E 0 0 \nE 0 W E \n0 E 0 0\n\nPlacing a bomb at (1,1) kills 3 enemies.\n</pre>\n</div>\n",
        "companies": [
            "Google",
            "Facebook",
            "Uber"
        ]
    },
    {
        "leetId": "362",
        "link": "design-hit-counter",
        "title": "Design Hit Counter",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "40",
        "questionDescription": "\n<p>Design a hit counter which counts the number of hits received in the past 5 minutes.</p>\n<p>Each function accepts a timestamp parameter (in seconds granularity) and you may assume that calls are being made to the system in chronological order (ie, the timestamp is monotonically increasing). You may assume that the earliest timestamp starts at 1.</p>\n<p>It is possible that several hits arrive roughly at the same time.</p>\n<p><b>Example:</b></p>\n<pre>HitCounter counter = new HitCounter();\n\n// hit at timestamp 1.\ncounter.hit(1);\n\n// hit at timestamp 2.\ncounter.hit(2);\n\n// hit at timestamp 3.\ncounter.hit(3);\n\n// get hits at timestamp 4, should return 3.\ncounter.getHits(4);\n\n// hit at timestamp 300.\ncounter.hit(300);\n\n// get hits at timestamp 300, should return 4.\ncounter.getHits(300);\n\n// get hits at timestamp 301, should return 3.\ncounter.getHits(301); \n</pre>\n<p><b>Follow up:</b><br/>\nWhat if the number of hits per second could be very large? Does your design scale?</p>\n",
        "questionDescriptionZh": "\n<p>Design a hit counter which counts the number of hits received in the past 5 minutes.</p>\n<p>Each function accepts a timestamp parameter (in seconds granularity) and you may assume that calls are being made to the system in chronological order (ie, the timestamp is monotonically increasing). You may assume that the earliest timestamp starts at 1.</p>\n<p>It is possible that several hits arrive roughly at the same time.</p>\n<p><b>Example:</b></p>\n<pre>HitCounter counter = new HitCounter();\n\n// hit at timestamp 1.\ncounter.hit(1);\n\n// hit at timestamp 2.\ncounter.hit(2);\n\n// hit at timestamp 3.\ncounter.hit(3);\n\n// get hits at timestamp 4, should return 3.\ncounter.getHits(4);\n\n// hit at timestamp 300.\ncounter.hit(300);\n\n// get hits at timestamp 300, should return 4.\ncounter.getHits(300);\n\n// get hits at timestamp 301, should return 3.\ncounter.getHits(301); \n</pre>\n<p><b>Follow up:</b><br/>\nWhat if the number of hits per second could be very large? Does your design scale?</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "Yahoo",
            "Oracle",
            "Yelp",
            "Pinterest",
            "Zillow",
            "Dropbox",
            "Quip"
        ]
    },
    {
        "leetId": "363",
        "link": "max-sum-of-rectangle-no-larger-than-k",
        "title": "Max Sum of Rectangle No Larger Than K",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "31.3%",
        "questionDescription": "<p>Given a non-empty 2D matrix <i>matrix</i> and an integer <i>k</i>, find the max sum of a rectangle in the <i>matrix</i> such that its sum is no larger than <i>k</i>.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>matrix = <span id=\"example-input-1-1\">[[1,0,1],[0,-2,3]]</span>, k = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2 \r\n<strong>Explanation:</strong></span>&nbsp;Because the sum of rectangle <code>[[0, 1], [-2, 3]]</code> is 2,\r\n&nbsp;            and 2 is the max number no larger than k (k = 2).</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The rectangle inside the matrix must have an area &gt; 0.</li>\r\n\t<li>What if the number of rows is much larger than the number of columns?</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u4e8c\u7ef4\u77e9\u9635&nbsp;<em>matrix&nbsp;</em>\u548c\u4e00\u4e2a\u6574\u6570<em> k</em>\uff0c\u627e\u5230\u8fd9\u4e2a\u77e9\u9635\u5185\u90e8\u4e0d\u5927\u4e8e <em>k</em> \u7684\u6700\u5927\u77e9\u5f62\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>matrix = [[1,0,1],[0,-2,3]], k = 2\n<strong>\u8f93\u51fa: </strong>2 \n<strong>\u89e3\u91ca:</strong>&nbsp;\u77e9\u5f62\u533a\u57df&nbsp;<code>[[0, 1], [-2, 3]]</code>&nbsp;\u7684\u6570\u503c\u548c\u662f 2\uff0c\u4e14 2 \u662f\u4e0d\u8d85\u8fc7 k \u7684\u6700\u5927\u6570\u5b57\uff08k = 2\uff09\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ol>\n\t<li>\u77e9\u9635\u5185\u7684\u77e9\u5f62\u533a\u57df\u9762\u79ef\u5fc5\u987b\u5927\u4e8e 0\u3002</li>\n\t<li>\u5982\u679c\u884c\u6570\u8fdc\u5927\u4e8e\u5217\u6570\uff0c\u4f60\u5c06\u5982\u4f55\u89e3\u7b54\u5462\uff1f</li>\n</ol>\n",
        "titleZh": "\u77e9\u5f62\u533a\u57df\u4e0d\u8d85\u8fc7 K \u7684\u6700\u5927\u6570\u503c\u548c",
        "tags": [
            {
                "tag": "Queue",
                "link": "queue",
                "tagZh": "\u961f\u5217"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft"
        ]
    },
    {
        "leetId": "364",
        "link": "nested-list-weight-sum-ii",
        "title": "Nested List Weight Sum II",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "60",
        "questionDescription": "\n<p>Given a nested list of integers, return the sum of all integers in the list weighted by their depth.</p>\n<p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p>\n<p>Different from the <a href=\"https://leetcode.com/problems/nested-list-weight-sum/\">previous question</a> where weight is increasing from root to leaf, now the weight is defined from bottom up. i.e., the leaf level integers have weight 1, and the root level integers have the largest weight.</p>\n<p><b>Example 1:</b><br/>\nGiven the list <code>[[1,1],2,[1,1]]</code>, return <b>8</b>. (four 1's at depth 1, one 2 at depth 2)</p>\n<p><b>Example 2:</b><br/>\nGiven the list <code>[1,[4,[6]]]</code>, return <b>17</b>. (one 1 at depth 3, one 4 at depth 2, and one 6 at depth 1; 1*3 + 4*2 + 6*1 = 17)\n</p>\n",
        "questionDescriptionZh": "\n<p>Given a nested list of integers, return the sum of all integers in the list weighted by their depth.</p>\n<p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p>\n<p>Different from the <a href=\"https://leetcode.com/problems/nested-list-weight-sum/\">previous question</a> where weight is increasing from root to leaf, now the weight is defined from bottom up. i.e., the leaf level integers have weight 1, and the root level integers have the largest weight.</p>\n<p><b>Example 1:</b><br/>\nGiven the list <code>[[1,1],2,[1,1]]</code>, return <b>8</b>. (four 1's at depth 1, one 2 at depth 2)</p>\n<p><b>Example 2:</b><br/>\nGiven the list <code>[1,[4,[6]]]</code>, return <b>17</b>. (one 1 at depth 3, one 4 at depth 2, and one 6 at depth 1; 1*3 + 4*2 + 6*1 = 17)\n</p>\n",
        "companies": [
            "LinkedIn"
        ]
    },
    {
        "leetId": "365",
        "link": "water-and-jug-problem",
        "title": "Water and Jug Problem",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "25.6%",
        "questionDescription": "<p>You are given two jugs with capacities <i>x</i> and <i>y</i> litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly <i>z</i> litres using these two jugs.</p>\r\n\r\n<p>If <i>z</i> liters of water is measurable, you must have <i>z</i> liters of water contained within <b>one or both buckets</b> by the end.</p>\r\n\r\n<p>Operations allowed:</p>\r\n\r\n<ul>\r\n\t<li>Fill any of the jugs completely with water.</li>\r\n\t<li>Empty any of the jugs.</li>\r\n\t<li>Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.</li>\r\n</ul>\r\n\r\n<p><b>Example 1:</b> (From the famous <a href=\"https://www.youtube.com/watch?v=BVtQNK_ZUJg\" target=\"_blank\"><i>&quot;Die Hard&quot;</i> example</a>)</p>\r\n\r\n<pre>\r\nInput: x = 3, y = 5, z = 4\r\nOutput: True\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\nInput: x = 2, y = 6, z = 5\r\nOutput: False\r\n</pre>",
        "questionDescriptionZh": "<p>\u6709\u4e24\u4e2a\u5bb9\u91cf\u5206\u522b\u4e3a&nbsp;<em>x</em>\u5347 \u548c<em> y</em>\u5347 \u7684\u6c34\u58f6\u4ee5\u53ca\u65e0\u9650\u591a\u7684\u6c34\u3002\u8bf7\u5224\u65ad\u80fd\u5426\u901a\u8fc7\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6c34\u58f6\uff0c\u4ece\u800c\u53ef\u4ee5\u5f97\u5230\u6070\u597d&nbsp;<em>z</em>\u5347 \u7684\u6c34\uff1f</p>\n\n<p>\u5982\u679c\u53ef\u4ee5\uff0c\u6700\u540e\u8bf7\u7528\u4ee5\u4e0a\u6c34\u58f6\u4e2d\u7684\u4e00\u6216\u4e24\u4e2a\u6765\u76db\u653e\u53d6\u5f97\u7684&nbsp;<em>z\u5347&nbsp;</em>\u6c34\u3002</p>\n\n<p>\u4f60\u5141\u8bb8\uff1a</p>\n\n<ul>\n\t<li>\u88c5\u6ee1\u4efb\u610f\u4e00\u4e2a\u6c34\u58f6</li>\n\t<li>\u6e05\u7a7a\u4efb\u610f\u4e00\u4e2a\u6c34\u58f6</li>\n\t<li>\u4ece\u4e00\u4e2a\u6c34\u58f6\u5411\u53e6\u5916\u4e00\u4e2a\u6c34\u58f6\u5012\u6c34\uff0c\u76f4\u5230\u88c5\u6ee1\u6216\u8005\u5012\u7a7a</li>\n</ul>\n\n<p><strong>\u793a\u4f8b 1:</strong> (From the famous <a href=\"https://www.youtube.com/watch?v=BVtQNK_ZUJg\"><em>&quot;Die Hard&quot;</em> example</a>)</p>\n\n<pre>\u8f93\u5165: x = 3, y = 5, z = 4\n\u8f93\u51fa: True\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\u8f93\u5165: x = 2, y = 6, z = 5\n\u8f93\u51fa: False\n</pre>\n",
        "titleZh": "\u6c34\u58f6\u95ee\u9898",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Microsoft"
        ]
    },
    {
        "leetId": "366",
        "link": "find-leaves-of-binary-tree",
        "title": "Find Leaves of Binary Tree",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "31",
        "questionDescription": "\n<p>Given a binary tree, collect a tree's nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.\n</p>\n<p>\n<b>Example:</b><br/>\nGiven binary tree <br/>\n</p><pre>          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n</pre>\n<p></p>\n<p>\nReturns <code>[4, 5, 3], [2], [1]</code>.\n</p>\n<p>\n<b>Explanation:</b><br/>\n</p><p>\n1. Removing the leaves <code>[4, 5, 3]</code> would result in this tree:\n</p><pre>          1\n         / \n        2          \n</pre>\n<p></p>\n<p>\n2. Now removing the leaf <code>[2]</code> would result in this tree:\n</p><pre>          1          \n</pre>\n<p></p>\n<p>\n3. Now removing the leaf <code>[1]</code> would result in the empty tree:\n</p><pre>          []         \n</pre>\n<p></p>\n<p></p>\n<p>\nReturns <code>[4, 5, 3], [2], [1]</code>.\n</p><p>\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://discuss.leetcode.com/user/elmirap\">@elmirap</a> for adding this problem and creating all test cases.</p>\n",
        "questionDescriptionZh": "\n<p>Given a binary tree, collect a tree's nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.\n</p>\n<p>\n<b>Example:</b><br/>\nGiven binary tree <br/>\n</p><pre>          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n</pre>\n<p></p>\n<p>\nReturns <code>[4, 5, 3], [2], [1]</code>.\n</p>\n<p>\n<b>Explanation:</b><br/>\n</p><p>\n1. Removing the leaves <code>[4, 5, 3]</code> would result in this tree:\n</p><pre>          1\n         / \n        2          \n</pre>\n<p></p>\n<p>\n2. Now removing the leaf <code>[2]</code> would result in this tree:\n</p><pre>          1          \n</pre>\n<p></p>\n<p>\n3. Now removing the leaf <code>[1]</code> would result in the empty tree:\n</p><pre>          []         \n</pre>\n<p></p>\n<p></p>\n<p>\nReturns <code>[4, 5, 3], [2], [1]</code>.\n</p><p>\n</p><p><b>Credits:</b><br/>Special thanks to <a href=\"https://discuss.leetcode.com/user/elmirap\">@elmirap</a> for adding this problem and creating all test cases.</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Bloomberg",
            "LinkedIn",
            "Pocket Gems"
        ]
    },
    {
        "leetId": "367",
        "link": "valid-perfect-square",
        "title": "Valid Perfect Square",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "40.2%",
        "questionDescription": "<p>Given a positive integer <i>num</i>, write a function which returns True if <i>num</i> is a perfect square else False.</p>\r\n\r\n<p><b>Note:</b> <b>Do not</b> use any built-in library function such as <code>sqrt</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">16</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">14</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 <em>num</em>\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5982\u679c <em>num</em> \u662f\u4e00\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u4e0d\u8981\u4f7f\u7528\u4efb\u4f55\u5185\u7f6e\u7684\u5e93\u51fd\u6570\uff0c\u5982&nbsp; <code>sqrt</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>16\n<strong>\u8f93\u51fa\uff1a</strong>True</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>14\n<strong>\u8f93\u51fa\uff1a</strong>False\n</pre>\n",
        "titleZh": "\u6709\u6548\u7684\u5b8c\u5168\u5e73\u65b9\u6570",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Microsoft",
            "LinkedIn"
        ]
    },
    {
        "leetId": "368",
        "link": "largest-divisible-subset",
        "title": "Largest Divisible Subset",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "32.6%",
        "questionDescription": "<p>Given a set of <b>distinct</b> positive integers, find the largest subset such that every pair (S<sub>i</sub>, S<sub>j</sub>) of elements in this subset satisfies:</p>\r\n\r\n<p>S<sub>i</sub> % S<sub>j</sub> = 0 or S<sub>j</sub> % S<sub>i</sub> = 0.</p>\r\n\r\n<p>If there are multiple solutions, return any subset is fine.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2] </span>(of course, [1,3] will also be ok)\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,2,4,8]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[1,2,4,8]</span>\r\n</pre>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e00\u4e2a\u7531<strong>\u65e0\u91cd\u590d\u7684</strong>\u6b63\u6574\u6570\u7ec4\u6210\u7684\u96c6\u5408\uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5927\u7684\u6574\u9664\u5b50\u96c6\uff0c\u5b50\u96c6\u4e2d\u4efb\u610f\u4e00\u5bf9 (S<sub>i\uff0c</sub>S<sub>j</sub>) \u90fd\u8981\u6ee1\u8db3\uff1aS<sub>i</sub> % S<sub>j</sub> = 0 \u6216 S<sub>j</sub> % S<sub>i</sub> = 0\u3002</p>\n\n<p>\u5982\u679c\u6709\u591a\u4e2a\u76ee\u6807\u5b50\u96c6\uff0c\u8fd4\u56de\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5747\u53ef\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,3]\n<strong>\u8f93\u51fa:</strong> [1,2] (\u5f53\u7136, [1,3] \u4e5f\u6b63\u786e)\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2,4,8]\n<strong>\u8f93\u51fa:</strong> [1,2,4,8]\n</pre>\n",
        "titleZh": "\u6700\u5927\u6574\u9664\u5b50\u96c6",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Adobe"
        ]
    },
    {
        "leetId": "369",
        "link": "plus-one-linked-list",
        "title": "Plus One Linked List",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "22",
        "questionDescription": "\n<p>Given a non-negative integer represented as <b>non-empty</b> a singly linked list of digits, plus one to the integer.</p>\n<p>You may assume the integer do not contain any leading zero, except the number 0 itself.</p>\n<p>The digits are stored such that the most significant digit is at the head of the list.</p>\n<p><b>Example:</b><br/>\n</p><pre>Input:\n1-&gt;2-&gt;3\n\nOutput:\n1-&gt;2-&gt;4\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a non-negative integer represented as <b>non-empty</b> a singly linked list of digits, plus one to the integer.</p>\n<p>You may assume the integer do not contain any leading zero, except the number 0 itself.</p>\n<p>The digits are stored such that the most significant digit is at the head of the list.</p>\n<p><b>Example:</b><br/>\n</p><pre>Input:\n1-&gt;2-&gt;3\n\nOutput:\n1-&gt;2-&gt;4\n</pre>\n<p></p>\n",
        "companies": [
            "Google",
            "Amazon"
        ]
    },
    {
        "leetId": "370",
        "link": "range-addition",
        "title": "Range Addition",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "19",
        "questionDescription": "\n<p>Assume you have an array of length <b><i>n</i></b> initialized with all <b>0</b>'s and are given <b><i>k</i></b> update operations.</p>\n<p>Each operation is represented as a triplet: <b>[startIndex, endIndex, inc]</b> which increments each element of subarray <b>A[startIndex ... endIndex]</b> (startIndex and endIndex inclusive) with <b>inc</b>.</p>\n<p>Return the modified array after all <b><i>k</i></b> operations were executed.</p>\n<p><b>Example:</b>\n</p><pre>Given:\n\n    length = 5,\n    updates = [\n        [1,  3,  2],\n        [2,  4,  3],\n        [0,  2, -2]\n    ]\n\nOutput:\n\n    [-2, 0, 3, 5, 3]\n</pre>\n<p></p>\n<p><b>Explanation:</b>\n</p><pre>Initial state:\n[ 0, 0, 0, 0, 0 ]\n\nAfter applying operation [1, 3, 2]:\n[ 0, 2, 2, 2, 0 ]\n\nAfter applying operation [2, 4, 3]:\n[ 0, 2, 5, 5, 3 ]\n\nAfter applying operation [0, 2, -2]:\n[-2, 0, 3, 5, 3 ]\n</pre>\n<p></p>\n<p><b>Credits:</b><br/>Special thanks to <a href=\"https://discuss.leetcode.com/user/vinod23\">@vinod23</a> for adding this problem and creating all test cases.</p>\n",
        "questionDescriptionZh": "\n<p>Assume you have an array of length <b><i>n</i></b> initialized with all <b>0</b>'s and are given <b><i>k</i></b> update operations.</p>\n<p>Each operation is represented as a triplet: <b>[startIndex, endIndex, inc]</b> which increments each element of subarray <b>A[startIndex ... endIndex]</b> (startIndex and endIndex inclusive) with <b>inc</b>.</p>\n<p>Return the modified array after all <b><i>k</i></b> operations were executed.</p>\n<p><b>Example:</b>\n</p><pre>Given:\n\n    length = 5,\n    updates = [\n        [1,  3,  2],\n        [2,  4,  3],\n        [0,  2, -2]\n    ]\n\nOutput:\n\n    [-2, 0, 3, 5, 3]\n</pre>\n<p></p>\n<p><b>Explanation:</b>\n</p><pre>Initial state:\n[ 0, 0, 0, 0, 0 ]\n\nAfter applying operation [1, 3, 2]:\n[ 0, 2, 2, 2, 0 ]\n\nAfter applying operation [2, 4, 3]:\n[ 0, 2, 5, 5, 3 ]\n\nAfter applying operation [0, 2, -2]:\n[-2, 0, 3, 5, 3 ]\n</pre>\n<p></p>\n<p><b>Credits:</b><br/>Special thanks to <a href=\"https://discuss.leetcode.com/user/vinod23\">@vinod23</a> for adding this problem and creating all test cases.</p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "371",
        "link": "sum-of-two-integers",
        "title": "Sum of Two Integers",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "52.8%",
        "questionDescription": "<p>Calculate the sum of two integers <i>a</i> and <i>b</i>, but you are <b>not allowed</b> to use the operator <code>+</code> and <code>-</code>.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>a = <span id=\"example-input-1-1\">1</span>, b = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>a = -<span id=\"example-input-2-1\">2</span>, b = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong>1\r\n</pre>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p><strong>\u4e0d\u4f7f\u7528</strong>\u8fd0\u7b97\u7b26&nbsp;<code>+</code> \u548c&nbsp;<code>-</code>&nbsp;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\uff0c\u8ba1\u7b97\u4e24\u6574\u6570&nbsp;\u200b\u200b\u200b\u200b\u200b\u200b\u200b<code>a</code>&nbsp;\u3001<code>b</code>&nbsp;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u4e4b\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>a = 1, b = 2\n<strong>\u8f93\u51fa: </strong>3\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>a = -2, b = 3\n<strong>\u8f93\u51fa: </strong>1</pre>\n",
        "titleZh": "\u4e24\u6574\u6570\u4e4b\u548c",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Adobe",
            "Hulu",
            "Nvidia"
        ]
    },
    {
        "leetId": "372",
        "link": "super-pow",
        "title": "Super Pow",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "32.1%",
        "questionDescription": "<p>Your task is to calculate <i>a</i><sup><i>b</i></sup> mod 1337 where <i>a</i> is a positive integer and <i>b</i> is an extremely large positive integer given in the form of an array.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong>a = <span id=\"example-input-1-1\">2</span>, b = <span id=\"example-input-1-2\">[3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">8</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>a = <span id=\"example-input-2-1\">2</span>, b = <span id=\"example-input-2-2\">[1,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1024</span>\r\n</pre>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97&nbsp;<em>a</em><sup><em>b</em></sup>&nbsp;\u5bf9&nbsp;1337 \u53d6\u6a21\uff0c<em>a</em> \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c<em>b</em> \u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6b63\u6574\u6570\u4e14\u4f1a\u4ee5\u6570\u7ec4\u5f62\u5f0f\u7ed9\u51fa\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>a = 2, b = [3]\n<strong>\u8f93\u51fa: </strong>8\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>a = 2, b = [1,0]\n<strong>\u8f93\u51fa: </strong>1024</pre>\n",
        "titleZh": "\u8d85\u7ea7\u6b21\u65b9",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ]
    },
    {
        "leetId": "373",
        "link": "find-k-pairs-with-smallest-sums",
        "title": "Find K Pairs with Smallest Sums",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "34.8%",
        "questionDescription": "<p>You are given two integer arrays <b>nums1</b> and <b>nums2</b> sorted in ascending order and an integer <b>k</b>.</p>\r\n\r\n<p>Define a pair <b>(u,v)</b> which consists of one element from the first array and one element from the second array.</p>\r\n\r\n<p>Find the k pairs <b>(u<sub>1</sub>,v<sub>1</sub>),(u<sub>2</sub>,v<sub>2</sub>) ...(u<sub>k</sub>,v<sub>k</sub>)</b> with the smallest sums.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = <span id=\"example-input-1-1\">[1,7,11]</span>, nums2 = <span id=\"example-input-1-2\">[2,4,6]</span>, k = <span id=\"example-input-1-3\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[1,2],[1,4],[1,6]] \r\n<strong>Explanation: </strong></span>The first 3 pairs are returned from the sequence: \r\n&nbsp;            [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = [1,1,2], nums2 = [1,2,3], k = 2\r\n<strong>Output: </strong>[1,1],[1,1]<span>\r\n<strong>Explanation: </strong></span>The first 2 pairs are returned from the sequence: \r\n&nbsp;            [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums1 = [1,2], nums2 = [3], k = 3\r\n<strong>Output: </strong>[1,3],[2,3]<span>\r\n<strong>Explanation: </strong></span>All possible pairs are returned from the sequence: [1,3],[2,3]\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u4ee5\u5347\u5e8f\u6392\u5217\u7684\u6574\u5f62\u6570\u7ec4 <strong>nums1</strong> \u548c <strong>nums2</strong>, \u4ee5\u53ca\u4e00\u4e2a\u6574\u6570 <strong>k</strong>\u3002</p>\n\n<p>\u5b9a\u4e49\u4e00\u5bf9\u503c&nbsp;<strong>(u,v)</strong>\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u6765\u81ea&nbsp;<strong>nums1</strong>\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u6765\u81ea <strong>nums2</strong>\u3002</p>\n\n<p>\u627e\u5230\u548c\u6700\u5c0f\u7684 k \u5bf9\u6570\u5b57&nbsp;<strong>(u<sub>1</sub>,v<sub>1</sub>), (u<sub>2</sub>,v<sub>2</sub>) ... (u<sub>k</sub>,v<sub>k</sub>)</strong>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n<strong>\u8f93\u51fa:</strong> [1,2],[1,4],[1,6]\n<strong>\u89e3\u91ca: </strong>\u8fd4\u56de\u5e8f\u5217\u4e2d\u7684\u524d 3 \u5bf9\u6570\uff1a\n     [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n<strong>\u8f93\u51fa: </strong>[1,1],[1,1]\n<strong>\u89e3\u91ca: </strong>\u8fd4\u56de\u5e8f\u5217\u4e2d\u7684\u524d 2 \u5bf9\u6570\uff1a\n&nbsp;    [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>nums1 = [1,2], nums2 = [3], k = 3 \n<strong>\u8f93\u51fa:</strong> [1,3],[2,3]\n<strong>\u89e3\u91ca: </strong>\u4e5f\u53ef\u80fd\u5e8f\u5217\u4e2d\u6240\u6709\u7684\u6570\u5bf9\u90fd\u88ab\u8fd4\u56de:[1,3],[2,3]\n</pre>\n",
        "titleZh": "\u67e5\u627e\u548c\u6700\u5c0f\u7684K\u5bf9\u6570\u5b57",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Uber",
            "LinkedIn"
        ]
    },
    {
        "leetId": "374",
        "link": "guess-number-higher-or-lower",
        "title": "Guess Number Higher or Lower",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "37.3%",
        "questionDescription": "<p>We are playing the Guess Game. The game is as follows:</p>\r\n\r\n<p>I pick a number from <b>1</b> to <b><i>n</i></b>. You have to guess which number I picked.</p>\r\n\r\n<p>Every time you guess wrong, I&#39;ll tell you whether the number is higher or lower.</p>\r\n\r\n<p>You call a pre-defined API <code>guess(int num)</code> which returns 3 possible results (<code>-1</code>, <code>1</code>, or <code>0</code>):</p>\r\n\r\n<pre>\r\n-1 : My number is lower\r\n 1 : My number is higher\r\n 0 : Congrats! You got it!\r\n</pre>\r\n\r\n<p><strong>Example :</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong>n = <span id=\"example-input-1-1\">10</span>, pick = <span id=\"example-input-1-2\">6</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">6</span>\r\n</pre>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u6b63\u5728\u73a9\u4e00\u4e2a\u731c\u6570\u5b57\u6e38\u620f\u3002 \u6e38\u620f\u89c4\u5219\u5982\u4e0b\uff1a<br>\n\u6211\u4ece&nbsp;<strong>1</strong>&nbsp;\u5230&nbsp;<em><strong>n</strong></em>&nbsp;\u9009\u62e9\u4e00\u4e2a\u6570\u5b57\u3002 \u4f60\u9700\u8981\u731c\u6211\u9009\u62e9\u4e86\u54ea\u4e2a\u6570\u5b57\u3002<br>\n\u6bcf\u6b21\u4f60\u731c\u9519\u4e86\uff0c\u6211\u4f1a\u544a\u8bc9\u4f60\u8fd9\u4e2a\u6570\u5b57\u662f\u5927\u4e86\u8fd8\u662f\u5c0f\u4e86\u3002<br>\n\u4f60\u8c03\u7528\u4e00\u4e2a\u9884\u5148\u5b9a\u4e49\u597d\u7684\u63a5\u53e3&nbsp;<code>guess(int num)</code>\uff0c\u5b83\u4f1a\u8fd4\u56de 3 \u4e2a\u53ef\u80fd\u7684\u7ed3\u679c\uff08<code>-1</code>\uff0c<code>1</code>&nbsp;\u6216 <code>0</code>\uff09\uff1a</p>\n\n<pre>-1 : \u6211\u7684\u6570\u5b57\u6bd4\u8f83\u5c0f\n 1 : \u6211\u7684\u6570\u5b57\u6bd4\u8f83\u5927\n 0 : \u606d\u559c\uff01\u4f60\u731c\u5bf9\u4e86\uff01\n</pre>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>n = 10, pick = 6\n<strong>\u8f93\u51fa: </strong>6</pre>\n",
        "titleZh": "\u731c\u6570\u5b57\u5927\u5c0f",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "375",
        "link": "guess-number-higher-or-lower-ii",
        "title": "Guess Number Higher or Lower II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "30.8%",
        "questionDescription": "<p>We are playing the Guess Game. The game is as follows:</p>\r\n\r\n<p>I pick a number from <strong>1</strong> to <strong>n</strong>. You have to guess which number I picked.</p>\r\n\r\n<p>Every time you guess wrong, I&#39;ll tell you whether the number I picked is higher or lower.</p>\r\n\r\n<p>However, when you guess a particular number x, and you guess wrong, you pay <b>$x</b>. You win the game when you guess the number I picked.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nn = 10, I pick 8.\r\n\r\nFirst round:  You guess 5, I tell you that it&#39;s higher. You pay $5.\r\nSecond round: You guess 7, I tell you that it&#39;s higher. You pay $7.\r\nThird round:  You guess 9, I tell you that it&#39;s lower. You pay $9.\r\n\r\nGame over. 8 is the number I picked.\r\n\r\nYou end up paying $5 + $7 + $9 = $21.\r\n</pre>\r\n\r\n<p>Given a particular <strong>n &ge; 1</strong>, find out how much money you need to have to guarantee a <b>win</b>.</p>",
        "questionDescriptionZh": "<p>\u6211\u4eec\u6b63\u5728\u73a9\u4e00\u4e2a\u731c\u6570\u6e38\u620f\uff0c\u6e38\u620f\u89c4\u5219\u5982\u4e0b\uff1a</p>\n\n<p>\u6211\u4ece&nbsp;<strong>1&nbsp;</strong>\u5230 <strong>n</strong> \u4e4b\u95f4\u9009\u62e9\u4e00\u4e2a\u6570\u5b57\uff0c\u4f60\u6765\u731c\u6211\u9009\u4e86\u54ea\u4e2a\u6570\u5b57\u3002</p>\n\n<p>\u6bcf\u6b21\u4f60\u731c\u9519\u4e86\uff0c\u6211\u90fd\u4f1a\u544a\u8bc9\u4f60\uff0c\u6211\u9009\u7684\u6570\u5b57\u6bd4\u4f60\u7684\u5927\u4e86\u6216\u8005\u5c0f\u4e86\u3002</p>\n\n<p>\u7136\u800c\uff0c\u5f53\u4f60\u731c\u4e86\u6570\u5b57 x \u5e76\u4e14\u731c\u9519\u4e86\u7684\u65f6\u5019\uff0c\u4f60\u9700\u8981\u652f\u4ed8\u91d1\u989d\u4e3a x \u7684\u73b0\u91d1\u3002\u76f4\u5230\u4f60\u731c\u5230\u6211\u9009\u7684\u6570\u5b57\uff0c\u4f60\u624d\u7b97\u8d62\u5f97\u4e86\u8fd9\u4e2a\u6e38\u620f\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>n = 10, \u6211\u9009\u62e9\u4e868.\n\n\u7b2c\u4e00\u8f6e: \u4f60\u731c\u6211\u9009\u62e9\u7684\u6570\u5b57\u662f5\uff0c\u6211\u4f1a\u544a\u8bc9\u4f60\uff0c\u6211\u7684\u6570\u5b57\u66f4\u5927\u4e00\u4e9b\uff0c\u7136\u540e\u4f60\u9700\u8981\u652f\u4ed85\u5757\u3002\n\u7b2c\u4e8c\u8f6e: \u4f60\u731c\u662f7\uff0c\u6211\u544a\u8bc9\u4f60\uff0c\u6211\u7684\u6570\u5b57\u66f4\u5927\u4e00\u4e9b\uff0c\u4f60\u652f\u4ed87\u5757\u3002\n\u7b2c\u4e09\u8f6e: \u4f60\u731c\u662f9\uff0c\u6211\u544a\u8bc9\u4f60\uff0c\u6211\u7684\u6570\u5b57\u66f4\u5c0f\u4e00\u4e9b\uff0c\u4f60\u652f\u4ed89\u5757\u3002\n\n\u6e38\u620f\u7ed3\u675f\u30028 \u5c31\u662f\u6211\u9009\u7684\u6570\u5b57\u3002\n\n\u4f60\u6700\u7ec8\u8981\u652f\u4ed8 5 + 7 + 9 = 21 \u5757\u94b1\u3002\n</pre>\n\n<p>\u7ed9\u5b9a&nbsp;<strong>n &ge; 1\uff0c</strong>\u8ba1\u7b97\u4f60\u81f3\u5c11\u9700\u8981\u62e5\u6709\u591a\u5c11\u73b0\u91d1\u624d\u80fd\u786e\u4fdd\u4f60\u80fd\u8d62\u5f97\u8fd9\u4e2a\u6e38\u620f\u3002</p>\n",
        "titleZh": "\u731c\u6570\u5b57\u5927\u5c0f II",
        "tags": [
            {
                "tag": "Minimax",
                "link": "minimax",
                "tagZh": "\u6781\u5c0f\u5316\u6781\u5927"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "376",
        "link": "wiggle-subsequence",
        "title": "Wiggle Subsequence",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "36.3%",
        "questionDescription": "<p>A sequence of numbers is called a <strong>wiggle sequence</strong> if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.</p>\r\n\r\n<p>For example, <code>[1,7,4,9,2,5]</code> is a wiggle sequence because the differences <code>(6,-3,5,-7,3)</code> are alternately positive and negative. In contrast, <code>[1,4,7,2,5]</code> and <code>[1,7,4,5,5]</code> are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.</p>\r\n\r\n<p>Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,7,4,9,2,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">6\r\n<strong>Explanation:</strong> </span>The entire sequence is a wiggle sequence.</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,17,5,10,13,15,10,5,16,8]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">7\r\n</span><span id=\"example-output-1\"><strong>Explanation: </strong></span>There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,2,3,4,5,6,7,8,9]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2</span></pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nCan you do it in O(<i>n</i>) time?</p>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5982\u679c\u8fde\u7eed\u6570\u5b57\u4e4b\u95f4\u7684\u5dee\u4e25\u683c\u5730\u5728\u6b63\u6570\u548c\u8d1f\u6570\u4e4b\u95f4\u4ea4\u66ff\uff0c\u5219\u6570\u5b57\u5e8f\u5217\u79f0\u4e3a<strong>\u6446\u52a8\u5e8f\u5217\u3002</strong>\u7b2c\u4e00\u4e2a\u5dee\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09\u53ef\u80fd\u662f\u6b63\u6570\u6216\u8d1f\u6570\u3002\u5c11\u4e8e\u4e24\u4e2a\u5143\u7d20\u7684\u5e8f\u5217\u4e5f\u662f\u6446\u52a8\u5e8f\u5217\u3002</p>\n\n<p>\u4f8b\u5982\uff0c&nbsp;<code>[1,7,4,9,2,5]</code> \u662f\u4e00\u4e2a\u6446\u52a8\u5e8f\u5217\uff0c\u56e0\u4e3a\u5dee\u503c <code>(6,-3,5,-7,3)</code>&nbsp;\u662f\u6b63\u8d1f\u4ea4\u66ff\u51fa\u73b0\u7684\u3002\u76f8\u53cd, <code>[1,4,7,2,5]</code>&nbsp;\u548c&nbsp;<code>[1,7,4,5,5]</code> \u4e0d\u662f\u6446\u52a8\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u662f\u56e0\u4e3a\u5b83\u7684\u524d\u4e24\u4e2a\u5dee\u503c\u90fd\u662f\u6b63\u6570\uff0c\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u56e0\u4e3a\u5b83\u7684\u6700\u540e\u4e00\u4e2a\u5dee\u503c\u4e3a\u96f6\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u8fd4\u56de\u4f5c\u4e3a\u6446\u52a8\u5e8f\u5217\u7684\u6700\u957f\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u901a\u8fc7\u4ece\u539f\u59cb\u5e8f\u5217\u4e2d\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5143\u7d20\u6765\u83b7\u5f97\u5b50\u5e8f\u5217\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u4fdd\u6301\u5176\u539f\u59cb\u987a\u5e8f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,7,4,9,2,5]\n<strong>\u8f93\u51fa: </strong>6 \n<strong>\u89e3\u91ca: </strong>\u6574\u4e2a\u5e8f\u5217\u5747\u4e3a\u6446\u52a8\u5e8f\u5217\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,17,5,10,13,15,10,5,16,8]\n<strong>\u8f93\u51fa: </strong>7\n<strong>\u89e3\u91ca: </strong>\u8fd9\u4e2a\u5e8f\u5217\u5305\u542b\u51e0\u4e2a\u957f\u5ea6\u4e3a 7 \u6446\u52a8\u5e8f\u5217\uff0c\u5176\u4e2d\u4e00\u4e2a\u53ef\u4e3a[1,17,10,13,10,16,8]\u3002</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,2,3,4,5,6,7,8,9]\n<strong>\u8f93\u51fa: </strong>2</pre>\n\n<p><strong>\u8fdb\u9636:</strong><br>\n\u4f60\u80fd\u5426\u7528&nbsp;O(<em>n</em>) \u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u6210\u6b64\u9898?</p>\n",
        "titleZh": "\u6446\u52a8\u5e8f\u5217",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ]
    },
    {
        "leetId": "377",
        "link": "combination-sum-iv",
        "title": "Combination Sum IV",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "40.6%",
        "questionDescription": "<p>Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<i><b>nums</b></i> = [1, 2, 3]\r\n<i><b>target</b></i> = 4\r\n\r\nThe possible combination ways are:\r\n(1, 1, 1, 1)\r\n(1, 1, 2)\r\n(1, 2, 1)\r\n(1, 3)\r\n(2, 1, 1)\r\n(2, 2)\r\n(3, 1)\r\n\r\nNote that different sequences are counted as different combinations.\r\n\r\nTherefore the output is <i><b>7</b></i>.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Follow up:</b><br />\r\nWhat if negative numbers are allowed in the given array?<br />\r\nHow does it change the problem?<br />\r\nWhat limitation we need to add to the question to allow negative numbers?</p>\r\n\r\n<p><b>Credits:</b><br />\r\nSpecial thanks to <a href=\"https://leetcode.com/pbrother/\">@pbrother</a> for adding this problem and creating all test cases.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6b63\u6574\u6570\u7ec4\u6210\u4e14\u4e0d\u5b58\u5728\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4\uff0c\u627e\u51fa\u548c\u4e3a\u7ed9\u5b9a\u76ee\u6807\u6b63\u6574\u6570\u7684\u7ec4\u5408\u7684\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<em><strong>nums</strong></em> = [1, 2, 3]\n<em><strong>target</strong></em> = 4\n\n\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\u4e3a\uff1a\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\n\n\u8bf7\u6ce8\u610f\uff0c\u987a\u5e8f\u4e0d\u540c\u7684\u5e8f\u5217\u88ab\u89c6\u4f5c\u4e0d\u540c\u7684\u7ec4\u5408\u3002\n\n\u56e0\u6b64\u8f93\u51fa\u4e3a <strong>7</strong>\u3002\n</pre>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br />\n\u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u4e2d\u542b\u6709\u8d1f\u6570\u4f1a\u600e\u4e48\u6837\uff1f<br />\n\u95ee\u9898\u4f1a\u4ea7\u751f\u4ec0\u4e48\u53d8\u5316\uff1f<br />\n\u6211\u4eec\u9700\u8981\u5728\u9898\u76ee\u4e2d\u6dfb\u52a0\u4ec0\u4e48\u9650\u5236\u6765\u5141\u8bb8\u8d1f\u6570\u7684\u51fa\u73b0\uff1f</p>\n\n<p><strong>\u81f4\u8c22\uff1a</strong><br />\n\u7279\u522b\u611f\u8c22&nbsp;<a href=\"https://leetcode.com/pbrother/\">@pbrother</a>&nbsp;\u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002</p>\n",
        "titleZh": "\u7ec4\u5408\u603b\u548c \u2163",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Uber",
            "LinkedIn",
            "Snapchat",
            "Visa"
        ]
    },
    {
        "leetId": "378",
        "link": "kth-smallest-element-in-a-sorted-matrix",
        "title": "Kth Smallest Element in a Sorted Matrix",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "53.9%",
        "questionDescription": "<p>Given a <i>n</i> x <i>n</i> matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.</p>\r\n\r\n<p>\r\nNote that it is the kth smallest element in the sorted order, not the kth distinct element.\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nmatrix = [\r\n   [ 1,  5,  9],\r\n   [10, 11, 13],\r\n   [12, 13, 15]\r\n],\r\nk = 8,\r\n\r\nreturn 13.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note: </b><br>\r\nYou may assume k is always valid, 1 &le; k &le; n<sup>2</sup>.</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<em>n x n&nbsp;</em>\u77e9\u9635\uff0c\u5176\u4e2d\u6bcf\u884c\u548c\u6bcf\u5217\u5143\u7d20\u5747\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u627e\u5230\u77e9\u9635\u4e2d\u7b2ck\u5c0f\u7684\u5143\u7d20\u3002<br />\n\u8bf7\u6ce8\u610f\uff0c\u5b83\u662f\u6392\u5e8f\u540e\u7684\u7b2ck\u5c0f\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2ck\u4e2a\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\nmatrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\n\n\u8fd4\u56de 13\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e: </strong><br />\n\u4f60\u53ef\u4ee5\u5047\u8bbe k \u7684\u503c\u6c38\u8fdc\u662f\u6709\u6548\u7684, 1 &le; k &le; n<sup>2&nbsp;</sup>\u3002</p>\n",
        "titleZh": "\u6709\u5e8f\u77e9\u9635\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "Twitter"
        ]
    },
    {
        "leetId": "379",
        "link": "design-phone-directory",
        "title": "Design Phone Directory",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "35",
        "questionDescription": "\n<p>Design a Phone Directory which supports the following operations:</p>\n<p>\n</p><ol>\n<li><code>get</code>: Provide a number which is not assigned to anyone.</li>\n<li><code>check</code>: Check if a number is available or not.</li>\n<li><code>release</code>: Recycle or release a number.</li>\n</ol>\n<p></p>\n<p><b>Example:</b>\n</p><pre>// Init a phone directory containing a total of 3 numbers: 0, 1, and 2.\nPhoneDirectory directory = new PhoneDirectory(3);\n\n// It can return any available phone number. Here we assume it returns 0.\ndirectory.get();\n\n// Assume it returns 1.\ndirectory.get();\n\n// The number 2 is available, so return true.\ndirectory.check(2);\n\n// It returns 2, the only number that is left.\ndirectory.get();\n\n// The number 2 is no longer available, so return false.\ndirectory.check(2);\n\n// Release number 2 back to the pool.\ndirectory.release(2);\n\n// Number 2 is available again, return true.\ndirectory.check(2);\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Design a Phone Directory which supports the following operations:</p>\n<p>\n</p><ol>\n<li><code>get</code>: Provide a number which is not assigned to anyone.</li>\n<li><code>check</code>: Check if a number is available or not.</li>\n<li><code>release</code>: Recycle or release a number.</li>\n</ol>\n<p></p>\n<p><b>Example:</b>\n</p><pre>// Init a phone directory containing a total of 3 numbers: 0, 1, and 2.\nPhoneDirectory directory = new PhoneDirectory(3);\n\n// It can return any available phone number. Here we assume it returns 0.\ndirectory.get();\n\n// Assume it returns 1.\ndirectory.get();\n\n// The number 2 is available, so return true.\ndirectory.check(2);\n\n// It returns 2, the only number that is left.\ndirectory.get();\n\n// The number 2 is no longer available, so return false.\ndirectory.check(2);\n\n// Release number 2 back to the pool.\ndirectory.release(2);\n\n// Number 2 is available again, return true.\ndirectory.check(2);\n</pre>\n<p></p>\n",
        "companies": [
            "Google",
            "Bloomberg",
            "Dropbox"
        ]
    },
    {
        "leetId": "380",
        "link": "insert-delete-getrandom-o1",
        "title": "Insert Delete GetRandom O(1)",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "43.1%",
        "questionDescription": "<p>Design a data structure that supports all following operations in <i>average</i> <b>O(1)</b> time.</p>\r\n\r\n<p>\r\n<ol>\r\n<li><code>insert(val)</code>: Inserts an item val to the set if not already present.</li>\r\n<li><code>remove(val)</code>: Removes an item val from the set if present.</li>\r\n<li><code>getRandom</code>: Returns a random element from current set of elements. Each element must have the <b>same probability</b> of being returned.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n// Init an empty set.\r\nRandomizedSet randomSet = new RandomizedSet();\r\n\r\n// Inserts 1 to the set. Returns true as 1 was inserted successfully.\r\nrandomSet.insert(1);\r\n\r\n// Returns false as 2 does not exist in the set.\r\nrandomSet.remove(2);\r\n\r\n// Inserts 2 to the set, returns true. Set now contains [1,2].\r\nrandomSet.insert(2);\r\n\r\n// getRandom should return either 1 or 2 randomly.\r\nrandomSet.getRandom();\r\n\r\n// Removes 1 from the set, returns true. Set now contains [2].\r\nrandomSet.remove(1);\r\n\r\n// 2 was already in the set, so return false.\r\nrandomSet.insert(2);\r\n\r\n// Since 2 is the only number in the set, getRandom always return 2.\r\nrandomSet.getRandom();\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u5728<em>\u5e73\u5747&nbsp;</em>\u65f6\u95f4\u590d\u6742\u5ea6 <strong>O(1)</strong>&nbsp;\u4e0b\uff0c\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u3002</p>\n\n<ol>\n\t<li><code>insert(val)</code>\uff1a\u5f53\u5143\u7d20 val \u4e0d\u5b58\u5728\u65f6\uff0c\u5411\u96c6\u5408\u4e2d\u63d2\u5165\u8be5\u9879\u3002</li>\n\t<li><code>remove(val)</code>\uff1a\u5143\u7d20 val \u5b58\u5728\u65f6\uff0c\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u8be5\u9879\u3002</li>\n\t<li><code>getRandom</code>\uff1a\u968f\u673a\u8fd4\u56de\u73b0\u6709\u96c6\u5408\u4e2d\u7684\u4e00\u9879\u3002\u6bcf\u4e2a\u5143\u7d20\u5e94\u8be5\u6709<strong>\u76f8\u540c\u7684\u6982\u7387</strong>\u88ab\u8fd4\u56de\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre>\n// \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684\u96c6\u5408\u3002\nRandomizedSet randomSet = new RandomizedSet();\n\n// \u5411\u96c6\u5408\u4e2d\u63d2\u5165 1 \u3002\u8fd4\u56de true \u8868\u793a 1 \u88ab\u6210\u529f\u5730\u63d2\u5165\u3002\nrandomSet.insert(1);\n\n// \u8fd4\u56de false \uff0c\u8868\u793a\u96c6\u5408\u4e2d\u4e0d\u5b58\u5728 2 \u3002\nrandomSet.remove(2);\n\n// \u5411\u96c6\u5408\u4e2d\u63d2\u5165 2 \u3002\u8fd4\u56de true \u3002\u96c6\u5408\u73b0\u5728\u5305\u542b [1,2] \u3002\nrandomSet.insert(2);\n\n// getRandom \u5e94\u968f\u673a\u8fd4\u56de 1 \u6216 2 \u3002\nrandomSet.getRandom();\n\n// \u4ece\u96c6\u5408\u4e2d\u79fb\u9664 1 \uff0c\u8fd4\u56de true \u3002\u96c6\u5408\u73b0\u5728\u5305\u542b [2] \u3002\nrandomSet.remove(1);\n\n// 2 \u5df2\u5728\u96c6\u5408\u4e2d\uff0c\u6240\u4ee5\u8fd4\u56de false \u3002\nrandomSet.insert(2);\n\n// \u7531\u4e8e 2 \u662f\u96c6\u5408\u4e2d\u552f\u4e00\u7684\u6570\u5b57\uff0cgetRandom \u603b\u662f\u8fd4\u56de 2 \u3002\nrandomSet.getRandom();\n</pre>\n",
        "titleZh": "\u5e38\u6570\u65f6\u95f4\u63d2\u5165\u3001\u5220\u9664\u548c\u83b7\u53d6\u968f\u673a\u5143\u7d20",
        "tags": [
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "LinkedIn",
            "Twitter",
            "Yelp",
            "Walmart Labs",
            "Pocket Gems",
            "Two Sigma",
            "Indeed",
            "Quora",
            "Databricks"
        ]
    },
    {
        "leetId": "381",
        "link": "insert-delete-getrandom-o1-duplicates-allowed",
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "30.7%",
        "questionDescription": "<p>Design a data structure that supports all following operations in <i>average</i> <b>O(1)</b> time.</p>\r\n<b>Note: Duplicate elements are allowed.</b>\r\n<p>\r\n<ol>\r\n<li><code>insert(val)</code>: Inserts an item val to the collection.</li>\r\n<li><code>remove(val)</code>: Removes an item val from the collection if present.</li>\r\n<li><code>getRandom</code>: Returns a random element from current collection of elements. The probability of each element being returned is <b>linearly related</b> to the number of same value the collection contains.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n// Init an empty collection.\r\nRandomizedCollection collection = new RandomizedCollection();\r\n\r\n// Inserts 1 to the collection. Returns true as the collection did not contain 1.\r\ncollection.insert(1);\r\n\r\n// Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].\r\ncollection.insert(1);\r\n\r\n// Inserts 2 to the collection, returns true. Collection now contains [1,1,2].\r\ncollection.insert(2);\r\n\r\n// getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.\r\ncollection.getRandom();\r\n\r\n// Removes 1 from the collection, returns true. Collection now contains [1,2].\r\ncollection.remove(1);\r\n\r\n// getRandom should return 1 and 2 both equally likely.\r\ncollection.getRandom();\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u5728<em>\u5e73\u5747&nbsp;</em>\u65f6\u95f4\u590d\u6742\u5ea6&nbsp;<strong>O(1)&nbsp;</strong>\u4e0b<strong>\uff0c&nbsp;</strong>\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u3002</p>\n\n<p><strong>\u6ce8\u610f: \u5141\u8bb8\u51fa\u73b0\u91cd\u590d\u5143\u7d20\u3002</strong></p>\n\n<ol>\n\t<li><code>insert(val)</code>\uff1a\u5411\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20 val\u3002</li>\n\t<li><code>remove(val)</code>\uff1a\u5f53 val \u5b58\u5728\u65f6\uff0c\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u4e00\u4e2a val\u3002</li>\n\t<li><code>getRandom</code>\uff1a\u4ece\u73b0\u6709\u96c6\u5408\u4e2d\u968f\u673a\u83b7\u53d6\u4e00\u4e2a\u5143\u7d20\u3002\u6bcf\u4e2a\u5143\u7d20\u88ab\u8fd4\u56de\u7684\u6982\u7387\u5e94\u8be5\u4e0e\u5176\u5728\u96c6\u5408\u4e2d\u7684\u6570\u91cf\u5448\u7ebf\u6027\u76f8\u5173\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>// \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u7684\u96c6\u5408\u3002\nRandomizedCollection collection = new RandomizedCollection();\n\n// \u5411\u96c6\u5408\u4e2d\u63d2\u5165 1 \u3002\u8fd4\u56de true \u8868\u793a\u96c6\u5408\u4e0d\u5305\u542b 1 \u3002\ncollection.insert(1);\n\n// \u5411\u96c6\u5408\u4e2d\u63d2\u5165\u53e6\u4e00\u4e2a 1 \u3002\u8fd4\u56de false \u8868\u793a\u96c6\u5408\u5305\u542b 1 \u3002\u96c6\u5408\u73b0\u5728\u5305\u542b [1,1] \u3002\ncollection.insert(1);\n\n// \u5411\u96c6\u5408\u4e2d\u63d2\u5165 2 \uff0c\u8fd4\u56de true \u3002\u96c6\u5408\u73b0\u5728\u5305\u542b [1,1,2] \u3002\ncollection.insert(2);\n\n// getRandom \u5e94\u5f53\u6709 2/3 \u7684\u6982\u7387\u8fd4\u56de 1 \uff0c1/3 \u7684\u6982\u7387\u8fd4\u56de 2 \u3002\ncollection.getRandom();\n\n// \u4ece\u96c6\u5408\u4e2d\u5220\u9664 1 \uff0c\u8fd4\u56de true \u3002\u96c6\u5408\u73b0\u5728\u5305\u542b [1,2] \u3002\ncollection.remove(1);\n\n// getRandom \u5e94\u6709\u76f8\u540c\u6982\u7387\u8fd4\u56de 1 \u548c 2 \u3002\ncollection.getRandom();\n</pre>\n",
        "titleZh": "O(1) \u65f6\u95f4\u63d2\u5165\u3001\u5220\u9664\u548c\u83b7\u53d6\u968f\u673a\u5143\u7d20 - \u5141\u8bb8\u91cd\u590d",
        "tags": [
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Uber",
            "LinkedIn",
            "Yelp",
            "Two Sigma",
            "Affirm"
        ]
    },
    {
        "leetId": "382",
        "link": "linked-list-random-node",
        "title": "Linked List Random Node",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "51.5%",
        "questionDescription": "<p>Given a singly linked list, return a random node's value from the linked list. Each node must have the <b>same probability</b> of being chosen.</p>\r\n\r\n<p><b>Follow up:</b><br />\r\nWhat if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n// Init a singly linked list [1,2,3].\r\nListNode head = new ListNode(1);\r\nhead.next = new ListNode(2);\r\nhead.next.next = new ListNode(3);\r\nSolution solution = new Solution(head);\r\n\r\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\r\nsolution.getRandom();\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u968f\u673a\u9009\u62e9\u94fe\u8868\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u76f8\u5e94\u7684\u8282\u70b9\u503c\u3002\u4fdd\u8bc1\u6bcf\u4e2a\u8282\u70b9<strong>\u88ab\u9009\u7684\u6982\u7387\u4e00\u6837</strong>\u3002</p>\n\n<p><strong>\u8fdb\u9636:</strong><br />\n\u5982\u679c\u94fe\u8868\u5341\u5206\u5927\u4e14\u957f\u5ea6\u672a\u77e5\uff0c\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1f\u4f60\u80fd\u5426\u4f7f\u7528\u5e38\u6570\u7ea7\u7a7a\u95f4\u590d\u6742\u5ea6\u5b9e\u73b0\uff1f</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n// \u521d\u59cb\u5316\u4e00\u4e2a\u5355\u94fe\u8868 [1,2,3].\nListNode head = new ListNode(1);\nhead.next = new ListNode(2);\nhead.next.next = new ListNode(3);\nSolution solution = new Solution(head);\n\n// getRandom()\u65b9\u6cd5\u5e94\u968f\u673a\u8fd4\u56de1,2,3\u4e2d\u7684\u4e00\u4e2a\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u5143\u7d20\u88ab\u8fd4\u56de\u7684\u6982\u7387\u76f8\u7b49\u3002\nsolution.getRandom();\n</pre>\n",
        "titleZh": "\u94fe\u8868\u968f\u673a\u8282\u70b9",
        "tags": [
            {
                "tag": "Reservoir Sampling",
                "link": "reservoir-sampling",
                "tagZh": "\u84c4\u6c34\u6c60\u62bd\u6837"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Tencent"
        ]
    },
    {
        "leetId": "383",
        "link": "ransom-note",
        "title": "Ransom Note",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "46.6%",
        "questionDescription": "<p>\r\nGiven an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom \r\nnote can be constructed from the magazines ; otherwise, it will return false. \r\n</p>\r\n<p>\r\nEach letter in the magazine string can only be used once in your ransom note.\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\nYou may assume that both strings contain only lowercase letters.\r\n</p>\r\n\r\n<pre>\r\ncanConstruct(\"a\", \"b\") -> false\r\ncanConstruct(\"aa\", \"ab\") -> false\r\ncanConstruct(\"aa\", \"aab\") -> true\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u8d4e\u91d1\u4fe1 (ransom) \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u6742\u5fd7(magazine)\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32ransom\u80fd\u4e0d\u80fd\u7531\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32magazines\u91cc\u9762\u7684\u5b57\u7b26\u6784\u6210\u3002\u5982\u679c\u53ef\u4ee5\u6784\u6210\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\u8fd4\u56de false\u3002</p>\n\n<p>(\u9898\u76ee\u8bf4\u660e\uff1a\u4e3a\u4e86\u4e0d\u66b4\u9732\u8d4e\u91d1\u4fe1\u5b57\u8ff9\uff0c\u8981\u4ece\u6742\u5fd7\u4e0a\u641c\u7d22\u5404\u4e2a\u9700\u8981\u7684\u5b57\u6bcd\uff0c\u7ec4\u6210\u5355\u8bcd\u6765\u8868\u8fbe\u610f\u601d\u3002)</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u4e24\u4e2a\u5b57\u7b26\u4e32\u5747\u53ea\u542b\u6709\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n\n<pre>\ncanConstruct(&quot;a&quot;, &quot;b&quot;) -&gt; false\ncanConstruct(&quot;aa&quot;, &quot;ab&quot;) -&gt; false\ncanConstruct(&quot;aa&quot;, &quot;aab&quot;) -&gt; true\n</pre>\n",
        "titleZh": "\u8d4e\u91d1\u4fe1",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Apple",
            "Hulu"
        ]
    },
    {
        "leetId": "384",
        "link": "shuffle-an-array",
        "title": "Shuffle an Array",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "44.6%",
        "questionDescription": "<p>Shuffle a set of numbers without duplicates.\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n// Init an array with set 1, 2, and 3.\r\nint[] nums = {1,2,3};\r\nSolution solution = new Solution(nums);\r\n\r\n// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.\r\nsolution.shuffle();\r\n\r\n// Resets the array back to its original configuration [1,2,3].\r\nsolution.reset();\r\n\r\n// Returns the random shuffling of array [1,2,3].\r\nsolution.shuffle();\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u6253\u4e71\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n// \u4ee5\u6570\u5b57\u96c6\u5408 1, 2 \u548c 3 \u521d\u59cb\u5316\u6570\u7ec4\u3002\nint[] nums = {1,2,3};\nSolution solution = new Solution(nums);\n\n// \u6253\u4e71\u6570\u7ec4 [1,2,3] \u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u4efb\u4f55 [1,2,3]\u7684\u6392\u5217\u8fd4\u56de\u7684\u6982\u7387\u5e94\u8be5\u76f8\u540c\u3002\nsolution.shuffle();\n\n// \u91cd\u8bbe\u6570\u7ec4\u5230\u5b83\u7684\u521d\u59cb\u72b6\u6001[1,2,3]\u3002\nsolution.reset();\n\n// \u968f\u673a\u8fd4\u56de\u6570\u7ec4[1,2,3]\u6253\u4e71\u540e\u7684\u7ed3\u679c\u3002\nsolution.shuffle();\n</pre>\n",
        "titleZh": "\u6253\u4e71\u6570\u7ec4",
        "tags": [],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Salesforce",
            "Cisco"
        ]
    },
    {
        "leetId": "385",
        "link": "mini-parser",
        "title": "Mini Parser",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "36.9%",
        "questionDescription": "<p>Given a nested list of integers represented as a string, implement a parser to deserialize it.</p>\r\n\r\n<p>Each element is either an integer, or a list -- whose elements may also be integers or other lists.</p>\r\n\r\n<p><b>Note:</b>\r\nYou may assume that the string is well-formed:\r\n<ul>\r\n<li>String is non-empty.</li>\r\n<li>String does not contain white spaces.</li>\r\n<li>String contains only digits <code>0-9</code>, <code>[</code>, <code>-</code> <code>,</code>, <code>]</code>.</li>\r\n</ul>\r\n</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\nGiven s = \"324\",\r\n\r\nYou should return a NestedInteger object which contains a single integer 324.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\nGiven s = \"[123,[456,[789]]]\",\r\n\r\nReturn a NestedInteger object containing a nested list with 2 elements:\r\n\r\n1. An integer containing value 123.\r\n2. A nested list containing two elements:\r\n    i.  An integer containing value 456.\r\n    ii. A nested list with one element:\r\n         a. An integer containing value 789.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7528\u5b57\u7b26\u4e32\u8868\u793a\u7684\u6574\u6570\u7684\u5d4c\u5957\u5217\u8868\uff0c\u5b9e\u73b0\u4e00\u4e2a\u89e3\u6790\u5b83\u7684\u8bed\u6cd5\u5206\u6790\u5668\u3002</p>\n\n<p>\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u53ea\u53ef\u80fd\u662f\u6574\u6570\u6216\u6574\u6570\u5d4c\u5957\u5217\u8868</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong>\u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd9\u4e9b\u5b57\u7b26\u4e32\u90fd\u662f\u683c\u5f0f\u826f\u597d\u7684\uff1a</p>\n\n<ul>\n\t<li>\u5b57\u7b26\u4e32\u975e\u7a7a</li>\n\t<li>\u5b57\u7b26\u4e32\u4e0d\u5305\u542b\u7a7a\u683c</li>\n\t<li>\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u6570\u5b57<code>0-9</code>, <code>[</code>, <code>-</code> <code>,</code>, <code>]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n\u7ed9\u5b9a s = &quot;324&quot;,\n\n\u4f60\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a NestedInteger \u5bf9\u8c61\uff0c\u5176\u4e2d\u53ea\u5305\u542b\u6574\u6570\u503c 324\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n\u7ed9\u5b9a s = &quot;[123,[456,[789]]]&quot;,\n\n\u8fd4\u56de\u4e00\u4e2a NestedInteger \u5bf9\u8c61\u5305\u542b\u4e00\u4e2a\u6709\u4e24\u4e2a\u5143\u7d20\u7684\u5d4c\u5957\u5217\u8868\uff1a\n\n1. \u4e00\u4e2a integer \u5305\u542b\u503c 123\n2. \u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684\u5d4c\u5957\u5217\u8868\uff1a\n    i.  \u4e00\u4e2a integer \u5305\u542b\u503c 456\n    ii. \u4e00\u4e2a\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u7684\u5d4c\u5957\u5217\u8868\n         a. \u4e00\u4e2a integer \u5305\u542b\u503c 789\n</pre>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u8ff7\u4f60\u8bed\u6cd5\u5206\u6790\u5668",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Airbnb"
        ]
    },
    {
        "leetId": "386",
        "link": "lexicographical-numbers",
        "title": "Lexicographical Numbers",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "55.1%",
        "questionDescription": "<p>Given an integer <i>n</i>, return 1 - <i>n</i> in lexicographical order.</p>\r\n\r\n<p>For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].</p>\r\n\r\n<p>Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570&nbsp;<em>n</em>, \u8fd4\u56de\u4ece&nbsp;<em>1&nbsp;</em>\u5230&nbsp;<em>n&nbsp;</em>\u7684\u5b57\u5178\u987a\u5e8f\u3002</p>\n\n<p>\u4f8b\u5982\uff0c</p>\n\n<p>\u7ed9\u5b9a <em>n</em> =1 3\uff0c\u8fd4\u56de [1,10,11,12,13,2,3,4,5,6,7,8,9] \u3002</p>\n\n<p>\u8bf7\u5c3d\u53ef\u80fd\u7684\u4f18\u5316\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002 \u8f93\u5165\u7684\u6570\u636e&nbsp;<em>n&nbsp;</em>\u5c0f\u4e8e\u7b49\u4e8e&nbsp;5,000,000\u3002</p>\n",
        "titleZh": "\u5b57\u5178\u5e8f\u6392\u6570",
        "tags": [],
        "companies": [
            "Google",
            "Facebook",
            "Bloomberg",
            "Adobe",
            "Baidu"
        ]
    },
    {
        "leetId": "387",
        "link": "first-unique-character-in-a-string",
        "title": "First Unique Character in a String",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "37.4%",
        "questionDescription": "<p>\r\nGiven a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.\r\n</p>\r\n<p><b>Examples:</b>\r\n<pre>\r\ns = \"leetcode\"\r\nreturn 0.\r\n\r\ns = \"loveleetcode\",\r\nreturn 2.\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b> You may assume the string contain only lowercase letters.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u5b83\u7684\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\uff0c\u5e76\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1\u3002</p>\n\n<p><strong>\u6848\u4f8b:</strong></p>\n\n<pre>\ns = &quot;leetcode&quot;\n\u8fd4\u56de 0.\n\ns = &quot;loveleetcode&quot;,\n\u8fd4\u56de 2.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f\u4e8b\u9879\uff1a</strong>\u60a8\u53ef\u4ee5\u5047\u5b9a\u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n",
        "titleZh": "\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Airbnb",
            "Goldman Sachs",
            "Oracle",
            "Zillow",
            "SAP",
            "Flipkart"
        ]
    },
    {
        "leetId": "388",
        "link": "longest-absolute-file-path",
        "title": "Longest Absolute File Path",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "43.0%",
        "questionDescription": "<p>Suppose we abstract our file system by a string in the following manner:</p>\r\n\r\n<p>The string <code>\"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"</code> represents:</p>\r\n\r\n<pre>dir\r\n    subdir1\r\n    subdir2\r\n        file.ext\r\n</pre>\r\n\r\n<p>The directory <code>dir</code> contains an empty sub-directory <code>subdir1</code> and a sub-directory <code>subdir2</code> containing a file <code>file.ext</code>.</p>\r\n\r\n<p>The string <code>\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"</code> represents:</p>\r\n\r\n<pre>dir\r\n    subdir1\r\n        file1.ext\r\n        subsubdir1\r\n    subdir2\r\n        subsubdir2\r\n            file2.ext\r\n</pre>\r\n\r\n<p>The directory <code>dir</code> contains two sub-directories <code>subdir1</code> and <code>subdir2</code>. <code>subdir1</code> contains a file <code>file1.ext</code> and an empty second-level sub-directory <code>subsubdir1</code>. <code>subdir2</code> contains a second-level sub-directory <code>subsubdir2</code> containing a file <code>file2.ext</code>.</p>\r\n\r\n<p>We are interested in finding the longest (number of characters) absolute path to a file within our file system. For example, in the second example above, the longest absolute path is <code>\"dir/subdir2/subsubdir2/file2.ext\"</code>, and its length is <code>32</code> (not including the double quotes).</p>\r\n\r\n<p>Given a string representing the file system in the above format, return the length of the longest absolute path to file in the abstracted file system. If there is no file in the system, return <code>0</code>.</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ul>\r\n<li>The name of a file contains at least a <code>.</code> and an extension.</li>\r\n<li>The name of a directory or sub-directory will not contain a <code>.</code>.</li>\r\n</ul>\r\n</p>\r\n\r\n<p>Time complexity required: <code>O(n)</code> where <code>n</code> is the size of the input string.</p>\r\n\r\n<p>Notice that <code>a/aa/aaa/file1.txt</code> is not the longest file path, if there is another path <code>aaaaaaaaaaaaaaaaaaaaa/sth.png</code>.</p>",
        "questionDescriptionZh": "<p>\u5047\u8bbe\u6211\u4eec\u4ee5\u4e0b\u8ff0\u65b9\u5f0f\u5c06\u6211\u4eec\u7684\u6587\u4ef6\u7cfb\u7edf\u62bd\u8c61\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32:</p>\n\n<p>\u5b57\u7b26\u4e32&nbsp;<code>&quot;dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext&quot;</code> \u8868\u793a:</p>\n\n<pre>\ndir\n    subdir1\n    subdir2\n        file.ext\n</pre>\n\n<p>\u76ee\u5f55&nbsp;<code>dir</code> \u5305\u542b\u4e00\u4e2a\u7a7a\u7684\u5b50\u76ee\u5f55&nbsp;<code>subdir1</code> \u548c\u4e00\u4e2a\u5305\u542b\u4e00\u4e2a\u6587\u4ef6&nbsp;<code>file.ext</code>&nbsp;\u7684\u5b50\u76ee\u5f55&nbsp;<code>subdir2</code> \u3002</p>\n\n<p>\u5b57\u7b26\u4e32&nbsp;<code>&quot;dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext&quot;</code> \u8868\u793a:</p>\n\n<pre>\ndir\n    subdir1\n        file1.ext\n        subsubdir1\n    subdir2\n        subsubdir2\n            file2.ext\n</pre>\n\n<p>\u76ee\u5f55&nbsp;<code>dir</code> \u5305\u542b\u4e24\u4e2a\u5b50\u76ee\u5f55 <code>subdir1</code> \u548c&nbsp;<code>subdir2</code>\u3002&nbsp;<code>subdir1</code> \u5305\u542b\u4e00\u4e2a\u6587\u4ef6&nbsp;<code>file1.ext</code> \u548c\u4e00\u4e2a\u7a7a\u7684\u4e8c\u7ea7\u5b50\u76ee\u5f55 <code>subsubdir1</code>\u3002<code>subdir2</code> \u5305\u542b\u4e00\u4e2a\u4e8c\u7ea7\u5b50\u76ee\u5f55&nbsp;<code>subsubdir2</code> \uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u6587\u4ef6&nbsp;<code>file2.ext</code>\u3002</p>\n\n<p>\u6211\u4eec\u81f4\u529b\u4e8e\u5bfb\u627e\u6211\u4eec\u6587\u4ef6\u7cfb\u7edf\u4e2d\u6587\u4ef6\u7684\u6700\u957f (\u6309\u5b57\u7b26\u7684\u6570\u91cf\u7edf\u8ba1) \u7edd\u5bf9\u8def\u5f84\u3002\u4f8b\u5982\uff0c\u5728\u4e0a\u8ff0\u7684\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6700\u957f\u8def\u5f84\u4e3a&nbsp;<code>&quot;dir/subdir2/subsubdir2/file2.ext&quot;</code>\uff0c\u5176\u957f\u5ea6\u4e3a&nbsp;<code>32</code> (\u4e0d\u5305\u542b\u53cc\u5f15\u53f7)\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee5\u4e0a\u8ff0\u683c\u5f0f\u8868\u793a\u6587\u4ef6\u7cfb\u7edf\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6587\u4ef6\u7cfb\u7edf\u4e2d\u6587\u4ef6\u7684\u6700\u957f\u7edd\u5bf9\u8def\u5f84\u7684\u957f\u5ea6\u3002 \u5982\u679c\u7cfb\u7edf\u4e2d\u6ca1\u6709\u6587\u4ef6\uff0c\u8fd4\u56de&nbsp;<code>0</code>\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u6587\u4ef6\u540d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a&nbsp;<code>.</code> \u548c\u4e00\u4e2a\u6269\u5c55\u540d\u3002</li>\n\t<li>\u76ee\u5f55\u6216\u8005\u5b50\u76ee\u5f55\u7684\u540d\u5b57\u4e0d\u80fd\u5305\u542b&nbsp;<code>.</code>\u3002</li>\n</ul>\n\n<p>\u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a&nbsp;<code>O(n)</code>&nbsp;\uff0c\u5176\u4e2d&nbsp;<code>n</code> \u662f\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\u3002</p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u5b58\u5728\u8def\u5f84&nbsp;<code>aaaaaaaaaaaaaaaaaaaaa/sth.png</code>&nbsp;\u7684\u8bdd\uff0c\u90a3\u4e48&nbsp;&nbsp;<code>a/aa/aaa/file1.txt</code>&nbsp;\u5c31\u4e0d\u662f\u4e00\u4e2a\u6700\u957f\u7684\u8def\u5f84\u3002</p>\n",
        "titleZh": "\u6587\u4ef6\u7684\u6700\u957f\u7edd\u5bf9\u8def\u5f84",
        "tags": [],
        "companies": [
            "Google",
            "Bloomberg",
            "Uber"
        ]
    },
    {
        "leetId": "389",
        "link": "find-the-difference",
        "title": "Find the Difference",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "55.5%",
        "questionDescription": "<p>\r\nGiven two strings <b><i>s</i></b> and <b><i>t</i></b> which consist of only lowercase letters.</p>\r\n\r\n<p>String <b><i>t</i></b> is generated by random shuffling string <b><i>s</i></b> and then add one more letter at a random position.</p>\r\n\r\n<p>Find the letter that was added in <b><i>t</i></b>.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nInput:\r\ns = \"abcd\"\r\nt = \"abcde\"\r\n\r\nOutput:\r\ne\r\n\r\nExplanation:\r\n'e' is the letter that was added.\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 <em><strong>s</strong></em> \u548c <em><strong>t</strong></em>\uff0c\u5b83\u4eec\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n\n<p>\u5b57\u7b26\u4e32&nbsp;<strong><em>t</em></strong>&nbsp;\u7531\u5b57\u7b26\u4e32&nbsp;<strong><em>s</em></strong>&nbsp;\u968f\u673a\u91cd\u6392\uff0c\u7136\u540e\u5728\u968f\u673a\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u3002</p>\n\n<p>\u8bf7\u627e\u51fa\u5728 <em><strong>t</strong></em> \u4e2d\u88ab\u6dfb\u52a0\u7684\u5b57\u6bcd\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\u8f93\u5165\uff1a\ns = &quot;abcd&quot;\nt = &quot;abcde&quot;\n\n\u8f93\u51fa\uff1a\ne\n\n\u89e3\u91ca\uff1a\n&#39;e&#39; \u662f\u90a3\u4e2a\u88ab\u6dfb\u52a0\u7684\u5b57\u6bcd\u3002\n</pre>\n",
        "titleZh": "\u627e\u4e0d\u540c",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Adobe"
        ]
    },
    {
        "leetId": "390",
        "link": "elimination-game",
        "title": "Elimination Game",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "36.5%",
        "questionDescription": "<p>\r\nThere is a list of sorted integers from 1 to <i>n</i>. Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.</p>\r\n\r\n<p>Repeat the previous step again, but this time from right to left, remove the right most number and every other number from the remaining numbers.</p>\r\n\r\n<p>We keep repeating the steps again, alternating left to right and right to left, until a single number remains.</p>\r\n\r\n<p>Find the last number that remains starting with a list of length <i>n</i>.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nInput:\r\nn = 9,\r\n<u>1</u> 2 <u>3</u> 4 <u>5</u> 6 <u>7</u> 8 <u>9</u>\r\n2 <u>4</u> 6 <u>8</u>\r\n<u>2</u> 6\r\n6\r\n\r\nOutput:\r\n6\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ece1 \u5230 n \u6392\u5e8f\u7684\u6574\u6570\u5217\u8868\u3002<br />\n\u9996\u5148\uff0c\u4ece\u5de6\u5230\u53f3\uff0c\u4ece\u7b2c\u4e00\u4e2a\u6570\u5b57\u5f00\u59cb\uff0c\u6bcf\u9694\u4e00\u4e2a\u6570\u5b57\u8fdb\u884c\u5220\u9664\uff0c\u76f4\u5230\u5217\u8868\u7684\u672b\u5c3e\u3002<br />\n\u7b2c\u4e8c\u6b65\uff0c\u5728\u5269\u4e0b\u7684\u6570\u5b57\u4e2d\uff0c\u4ece\u53f3\u5230\u5de6\uff0c\u4ece\u5012\u6570\u7b2c\u4e00\u4e2a\u6570\u5b57\u5f00\u59cb\uff0c\u6bcf\u9694\u4e00\u4e2a\u6570\u5b57\u8fdb\u884c\u5220\u9664\uff0c\u76f4\u5230\u5217\u8868\u5f00\u5934\u3002<br />\n\u6211\u4eec\u4e0d\u65ad\u91cd\u590d\u8fd9\u4e24\u6b65\uff0c\u4ece\u5de6\u5230\u53f3\u548c\u4ece\u53f3\u5230\u5de6\u4ea4\u66ff\u8fdb\u884c\uff0c\u76f4\u5230\u53ea\u5269\u4e0b\u4e00\u4e2a\u6570\u5b57\u3002<br />\n\u8fd4\u56de\u957f\u5ea6\u4e3a n \u7684\u5217\u8868\u4e2d\uff0c\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\nn = 9,\n<u>1</u> 2 <u>3</u> 4 <u>5</u> 6 <u>7</u> 8 <u>9</u>\n2 <u>4</u> 6 <u>8</u>\n<u>2</u> 6\n6\n\n<strong>\u8f93\u51fa:</strong>\n6</pre>\n",
        "titleZh": "\u6d88\u9664\u6e38\u620f",
        "tags": [],
        "companies": [
            "Bloomberg"
        ]
    },
    {
        "leetId": "391",
        "link": "perfect-rectangle",
        "title": "Perfect Rectangle",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "19.8%",
        "questionDescription": "<p>Given N axis-aligned rectangles where N &gt; 0, determine if they all together form an exact cover of a rectangular region.</p>\r\n\r\n<p>Each rectangle is represented as a bottom-left point and a top-right point. For example, a unit square is represented as [1,1,2,2]. (coordinate of bottom-left point is (1, 1) and top-right point is (2, 2)).</p>\r\n\r\n<div style=\"float:right\"><img src=\"https://assets.leetcode.com/uploads/2018/10/22/rectangle_perfect.gif\" style=\"width: 249px; height: 250px;\" /></div>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nrectangles = [\r\n  [1,1,3,3],\r\n  [3,1,4,2],\r\n  [3,2,4,4],\r\n  [1,3,2,4],\r\n  [2,3,3,4]\r\n]\r\n\r\nReturn true. All 5 rectangles together form an exact cover of a rectangular region.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"clear:both\">&nbsp;</div>\r\n\r\n<div style=\"float:right\"><img src=\"https://assets.leetcode.com/uploads/2018/10/22/rectangle_separated.gif\" style=\"width: 249px; height: 250px;\" /></div>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\nrectangles = [\r\n  [1,1,2,3],\r\n  [1,3,2,4],\r\n  [3,1,4,2],\r\n  [3,2,4,4]\r\n]\r\n\r\nReturn false. Because there is a gap between the two rectangular regions.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"clear:both\">&nbsp;</div>\r\n\r\n<div style=\"float:right\"><img src=\"https://assets.leetcode.com/uploads/2018/10/22/rectangle_hole.gif\" style=\"width: 249px; height: 250px;\" /></div>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\nrectangles = [\r\n  [1,1,3,3],\r\n  [3,1,4,2],\r\n  [1,3,2,4],\r\n  [3,2,4,4]\r\n]\r\n\r\nReturn false. Because there is a gap in the top center.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div style=\"clear:both\">&nbsp;</div>\r\n\r\n<div style=\"float:right\"><img src=\"https://assets.leetcode.com/uploads/2018/10/22/rectangle_intersect.gif\" style=\"width: 249px; height: 250px;\" /></div>\r\n\r\n<p><b>Example 4:</b></p>\r\n\r\n<pre>\r\nrectangles = [\r\n  [1,1,3,3],\r\n  [3,1,4,2],\r\n  [1,3,2,4],\r\n  [2,2,4,4]\r\n]\r\n\r\nReturn false. Because two of the rectangles overlap with each other.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u6709 N \u4e2a\u4e0e\u5750\u6807\u8f74\u5bf9\u9f50\u7684\u77e9\u5f62, \u5176\u4e2d N &gt; 0, \u5224\u65ad\u5b83\u4eec\u662f\u5426\u80fd\u7cbe\u786e\u5730\u8986\u76d6\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u3002</p>\n\n<p>\u6bcf\u4e2a\u77e9\u5f62\u7528\u5de6\u4e0b\u89d2\u7684\u70b9\u548c\u53f3\u4e0a\u89d2\u7684\u70b9\u7684\u5750\u6807\u6765\u8868\u793a\u3002\u4f8b\u5982\uff0c&nbsp;\u4e00\u4e2a\u5355\u4f4d\u6b63\u65b9\u5f62\u53ef\u4ee5\u8868\u793a\u4e3a [1,1,2,2]\u3002&nbsp;( \u5de6\u4e0b\u89d2\u7684\u70b9\u7684\u5750\u6807\u4e3a (1, 1) \u4ee5\u53ca\u53f3\u4e0a\u89d2\u7684\u70b9\u7684\u5750\u6807\u4e3a (2, 2) )\u3002</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_perfect.gif\"></p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [3,2,4,4],\n  [1,3,2,4],\n  [2,3,3,4]\n]\n\n\u8fd4\u56de true\u30025\u4e2a\u77e9\u5f62\u4e00\u8d77\u53ef\u4ee5\u7cbe\u786e\u5730\u8986\u76d6\u4e00\u4e2a\u77e9\u5f62\u533a\u57df\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_separated.gif\"></p>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>rectangles = [\n  [1,1,2,3],\n  [1,3,2,4],\n  [3,1,4,2],\n  [3,2,4,4]\n]\n\n\u8fd4\u56de false\u3002\u4e24\u4e2a\u77e9\u5f62\u4e4b\u95f4\u6709\u95f4\u9694\uff0c\u65e0\u6cd5\u8986\u76d6\u6210\u4e00\u4e2a\u77e9\u5f62\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_hole.gif\"></p>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [1,3,2,4],\n  [3,2,4,4]\n]\n\n\u8fd4\u56de false\u3002\u56fe\u5f62\u9876\u7aef\u7559\u6709\u95f4\u9694\uff0c\u65e0\u6cd5\u8986\u76d6\u6210\u4e00\u4e2a\u77e9\u5f62\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rectangle_intersect.gif\"></p>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre>rectangles = [\n  [1,1,3,3],\n  [3,1,4,2],\n  [1,3,2,4],\n  [2,2,4,4]\n]\n\n\u8fd4\u56de false\u3002\u56e0\u4e3a\u4e2d\u95f4\u6709\u76f8\u4ea4\u533a\u57df\uff0c\u867d\u7136\u5f62\u6210\u4e86\u77e9\u5f62\uff0c\u4f46\u4e0d\u662f\u7cbe\u786e\u8986\u76d6\u3002\n</pre>\n",
        "titleZh": "\u5b8c\u7f8e\u77e9\u5f62",
        "tags": [],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "392",
        "link": "is-subsequence",
        "title": "Is Subsequence",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "46.7%",
        "questionDescription": "<p>\r\nGiven a string <b>s</b> and a string <b>t</b>, check if <b>s</b> is subsequence of <b>t</b>.\r\n</p>\r\n\r\n<p>\r\nYou may assume that there is only lower case English letters in both <b>s</b> and <b>t</b>. <b>t</b> is potentially a very long (length ~= 500,000) string, and <b>s</b> is a short string (<=100).\r\n</p>\r\n\r\n<p>\r\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code> while <code>\"aec\"</code> is not).\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<b>s</b> = <code>\"abc\"</code>, <b>t</b> = <code>\"ahbgdc\"</code>\r\n</p>\r\n<p>\r\nReturn <code>true</code>.\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<b>s</b> = <code>\"axc\"</code>, <b>t</b> = <code>\"ahbgdc\"</code>\r\n</p>\r\n<p>\r\nReturn <code>false</code>.\r\n</p>\r\n\r\n<p><b>Follow up:</b><br />\r\nIf there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?</p>\r\n\r\n<p><b>Credits:</b><br />Special thanks to <a href=\"https://leetcode.com/pbrother/\">@pbrother</a> for adding this problem and creating all test cases.</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u5b57\u7b26\u4e32 <strong>s</strong> \u548c <strong>t</strong> \uff0c\u5224\u65ad <strong>s</strong> \u662f\u5426\u4e3a <strong>t</strong> \u7684\u5b50\u5e8f\u5217\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u8ba4\u4e3a <strong>s</strong> \u548c <strong>t</strong> \u4e2d\u4ec5\u5305\u542b\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\u3002\u5b57\u7b26\u4e32 <strong>t</strong> \u53ef\u80fd\u4f1a\u5f88\u957f\uff08\u957f\u5ea6 ~= 500,000\uff09\uff0c\u800c <strong>s</strong> \u662f\u4e2a\u77ed\u5b57\u7b26\u4e32\uff08\u957f\u5ea6 &lt;=100\uff09\u3002</p>\n\n<p>\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5b57\u7b26\u800c\u4e0d\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u76f8\u5bf9\u4f4d\u7f6e\u5f62\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002\uff08\u4f8b\u5982\uff0c<code>&quot;ace&quot;</code>\u662f<code>&quot;abcde&quot;</code>\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u800c<code>&quot;aec&quot;</code>\u4e0d\u662f\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong><br />\n<strong>s</strong> = <code>&quot;abc&quot;</code>, <strong>t</strong> = <code>&quot;ahbgdc&quot;</code></p>\n\n<p>\u8fd4\u56de&nbsp;<code>true</code>.</p>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong><br />\n<strong>s</strong> = <code>&quot;axc&quot;</code>, <strong>t</strong> = <code>&quot;ahbgdc&quot;</code></p>\n\n<p>\u8fd4\u56de&nbsp;<code>false</code>.</p>\n\n<p><strong>\u540e\u7eed\u6311\u6218</strong> <strong>:</strong></p>\n\n<p>\u5982\u679c\u6709\u5927\u91cf\u8f93\u5165\u7684 S\uff0c\u79f0\u4f5cS1, S2, ... , Sk \u5176\u4e2d k &gt;= 10\u4ebf\uff0c\u4f60\u9700\u8981\u4f9d\u6b21\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u4e3a T \u7684\u5b50\u5e8f\u5217\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4f1a\u600e\u6837\u6539\u53d8\u4ee3\u7801\uff1f</p>\n\n<p><strong>\u81f4\u8c22:</strong></p>\n\n<p>\u7279\u522b\u611f\u8c22<strong> </strong><a href=\"https://leetcode.com/pbrother/\">@pbrother&nbsp;</a>\u6dfb\u52a0\u6b64\u95ee\u9898\u5e76\u4e14\u521b\u5efa\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u3002</p>\n",
        "titleZh": "\u5224\u65ad\u5b50\u5e8f\u5217",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Adobe",
            "Snapchat",
            "Pinterest"
        ]
    },
    {
        "leetId": "393",
        "link": "utf-8-validation",
        "title": "UTF-8 Validation",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "34.9%",
        "questionDescription": "<p>A character in UTF8 can be from <b>1 to 4 bytes</b> long, subjected to the following rules:</p>\r\n<ol>\r\n<li>For 1-byte character, the first bit is a 0, followed by its unicode code.</li>\r\n<li>For n-bytes character, the first n-bits are all one's, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.</li>\r\n</ol>\r\n<p>This is how the UTF-8 encoding would work:</p>\r\n\r\n<pre><code>   Char. number range  |        UTF-8 octet sequence\r\n      (hexadecimal)    |              (binary)\r\n   --------------------+---------------------------------------------\r\n   0000 0000-0000 007F | 0xxxxxxx\r\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\r\n   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\r\n   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n</code></pre>\r\n<p>\r\nGiven an array of integers representing the data, return whether it is a valid utf-8 encoding.\r\n</p>\r\n<p>\r\n<b>Note:</b><br />\r\nThe input is an array of integers. Only the <b>least significant 8 bits</b> of each integer is used to store the data. This means each integer represents only 1 byte of data.\r\n</p>\r\n\r\n<p>\r\n<b>Example 1:</b>\r\n<pre>\r\ndata = [197, 130, 1], which represents the octet sequence: <b>11000101 10000010 00000001</b>.\r\n\r\nReturn <b>true</b>.\r\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Example 2:</b>\r\n<pre>\r\ndata = [235, 140, 4], which represented the octet sequence: <b>11101011 10001100 00000100</b>.\r\n\r\nReturn <b>false</b>.\r\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\r\nThe next byte is a continuation byte which starts with 10 and that's correct.\r\nBut the second continuation byte does not start with 10, so it is invalid.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>UTF-8 \u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u53ef\u80fd\u7684\u957f\u5ea6\u4e3a <strong>1 \u5230 4 \u5b57\u8282</strong>\uff0c\u9075\u5faa\u4ee5\u4e0b\u7684\u89c4\u5219\uff1a</p>\n\n<ol>\n\t<li>\u5bf9\u4e8e 1 \u5b57\u8282\u7684\u5b57\u7b26\uff0c\u5b57\u8282\u7684\u7b2c\u4e00\u4f4d\u8bbe\u4e3a0\uff0c\u540e\u97627\u4f4d\u4e3a\u8fd9\u4e2a\u7b26\u53f7\u7684unicode\u7801\u3002</li>\n\t<li>\u5bf9\u4e8e n \u5b57\u8282\u7684\u5b57\u7b26 (n &gt; 1)\uff0c\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u524d n \u4f4d\u90fd\u8bbe\u4e3a1\uff0c\u7b2c n+1 \u4f4d\u8bbe\u4e3a0\uff0c\u540e\u9762\u5b57\u8282\u7684\u524d\u4e24\u4f4d\u4e00\u5f8b\u8bbe\u4e3a10\u3002\u5269\u4e0b\u7684\u6ca1\u6709\u63d0\u53ca\u7684\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5168\u90e8\u4e3a\u8fd9\u4e2a\u7b26\u53f7\u7684unicode\u7801\u3002</li>\n</ol>\n\n<p>\u8fd9\u662f UTF-8 \u7f16\u7801\u7684\u5de5\u4f5c\u65b9\u5f0f\uff1a</p>\n\n<pre>\n<code>   Char. number range  |        UTF-8 octet sequence\n      (hexadecimal)    |              (binary)\n   --------------------+---------------------------------------------\n   0000 0000-0000 007F | 0xxxxxxx\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n</code></pre>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u793a\u6570\u636e\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8fd4\u56de\u5b83\u662f\u5426\u4e3a\u6709\u6548\u7684 utf-8 \u7f16\u7801\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br />\n\u8f93\u5165\u662f\u6574\u6570\u6570\u7ec4\u3002\u53ea\u6709\u6bcf\u4e2a\u6574\u6570\u7684<strong>\u6700\u4f4e 8 \u4e2a\u6709\u6548\u4f4d</strong>\u7528\u6765\u5b58\u50a8\u6570\u636e\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u6574\u6570\u53ea\u8868\u793a 1 \u5b57\u8282\u7684\u6570\u636e\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\ndata = [197, 130, 1], \u8868\u793a 8 \u4f4d\u7684\u5e8f\u5217: <strong>11000101 10000010 00000001</strong>.\n\n\u8fd4\u56de <strong>true </strong>\u3002\n\u8fd9\u662f\u6709\u6548\u7684 utf-8 \u7f16\u7801\uff0c\u4e3a\u4e00\u4e2a2\u5b57\u8282\u5b57\u7b26\uff0c\u8ddf\u7740\u4e00\u4e2a1\u5b57\u8282\u5b57\u7b26\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\ndata = [235, 140, 4], \u8868\u793a 8 \u4f4d\u7684\u5e8f\u5217: <strong>11101011 10001100 00000100</strong>.\n\n\u8fd4\u56de<strong> false</strong> \u3002\n\u524d 3 \u4f4d\u90fd\u662f 1 \uff0c\u7b2c 4 \u4f4d\u4e3a 0 \u8868\u793a\u5b83\u662f\u4e00\u4e2a3\u5b57\u8282\u5b57\u7b26\u3002\n\u4e0b\u4e00\u4e2a\u5b57\u8282\u662f\u5f00\u5934\u4e3a 10 \u7684\u5ef6\u7eed\u5b57\u8282\uff0c\u8fd9\u662f\u6b63\u786e\u7684\u3002\n\u4f46\u7b2c\u4e8c\u4e2a\u5ef6\u7eed\u5b57\u8282\u4e0d\u4ee5 10 \u5f00\u5934\uff0c\u6240\u4ee5\u662f\u4e0d\u7b26\u5408\u89c4\u5219\u7684\u3002\n</pre>\n",
        "titleZh": "UTF-8 \u7f16\u7801\u9a8c\u8bc1",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Uber",
            "Apple",
            "Palantir Technologies",
            "Nvidia",
            "Palantir"
        ]
    },
    {
        "leetId": "394",
        "link": "decode-string",
        "title": "Decode String",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "41.9%",
        "questionDescription": "<p>\r\nGiven an encoded string, return it's decoded string.\r\n</p>\r\n<p>\r\nThe encoding rule is: <code>k[encoded_string]</code>, where the <i>encoded_string</i> inside the square brackets is being repeated exactly <i>k</i> times. Note that <i>k</i> is guaranteed to be a positive integer.</p>\r\n\r\n<p>\r\nYou may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p>\r\n\r\n<p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <i>k</i>. For example, there won't be input like <code>3a</code> or <code>2[4]</code>.\r\n</p>\r\n\r\n<p><b>Examples:</b>\r\n<pre>\r\ns = \"3[a]2[bc]\", return \"aaabcbc\".\r\ns = \"3[a2[c]]\", return \"accaccacc\".\r\ns = \"2[abc]3[cd]ef\", return \"abcabccdcdcdef\".\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7ecf\u8fc7\u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5b83\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u7f16\u7801\u89c4\u5219\u4e3a: <code>k[encoded_string]</code>\uff0c\u8868\u793a\u5176\u4e2d\u65b9\u62ec\u53f7\u5185\u90e8\u7684 <em>encoded_string</em> \u6b63\u597d\u91cd\u590d <em>k</em> \u6b21\u3002\u6ce8\u610f <em>k</em> \u4fdd\u8bc1\u4e3a\u6b63\u6574\u6570\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8f93\u5165\u5b57\u7b26\u4e32\u603b\u662f\u6709\u6548\u7684\uff1b\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u989d\u5916\u7684\u7a7a\u683c\uff0c\u4e14\u8f93\u5165\u7684\u65b9\u62ec\u53f7\u603b\u662f\u7b26\u5408\u683c\u5f0f\u8981\u6c42\u7684\u3002</p>\n\n<p>\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u539f\u59cb\u6570\u636e\u4e0d\u5305\u542b\u6570\u5b57\uff0c\u6240\u6709\u7684\u6570\u5b57\u53ea\u8868\u793a\u91cd\u590d\u7684\u6b21\u6570 <em>k</em> \uff0c\u4f8b\u5982\u4e0d\u4f1a\u51fa\u73b0\u50cf&nbsp;<code>3a</code>&nbsp;\u6216&nbsp;<code>2[4]</code>&nbsp;\u7684\u8f93\u5165\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\ns = &quot;3[a]2[bc]&quot;, \u8fd4\u56de &quot;aaabcbc&quot;.\ns = &quot;3[a2[c]]&quot;, \u8fd4\u56de &quot;accaccacc&quot;.\ns = &quot;2[abc]3[cd]ef&quot;, \u8fd4\u56de &quot;abcabccdcdcdef&quot;.\n</pre>\n",
        "titleZh": "\u5b57\u7b26\u4e32\u89e3\u7801",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "Yahoo",
            "Snapchat",
            "Oracle",
            "Yelp",
            "Works Applications",
            "Coupang",
            "AppDynamics"
        ]
    },
    {
        "leetId": "395",
        "link": "longest-substring-with-at-least-k-repeating-characters",
        "title": "Longest Substring with At Least K Repeating Characters",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "37.6%",
        "questionDescription": "<p>\r\nFind the length of the longest substring <b><i>T</i></b> of a given string (consists of lowercase letters only) such that every character in <b><i>T</i></b> appears no less than <i>k</i> times.\r\n</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\nInput:\r\ns = \"aaabb\", k = 3\r\n\r\nOutput:\r\n3\r\n\r\nThe longest substring is \"aaa\", as 'a' is repeated 3 times.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\nInput:\r\ns = \"ababbc\", k = 2\r\n\r\nOutput:\r\n5\r\n\r\nThe longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u627e\u5230\u7ed9\u5b9a\u5b57\u7b26\u4e32\uff08\u7531\u5c0f\u5199\u5b57\u7b26\u7ec4\u6210\uff09\u4e2d\u7684\u6700\u957f\u5b50\u4e32 <strong><em>T</em></strong> \uff0c&nbsp;\u8981\u6c42&nbsp;<strong><em>T</em></strong>&nbsp;\u4e2d\u7684\u6bcf\u4e00\u5b57\u7b26\u51fa\u73b0\u6b21\u6570\u90fd\u4e0d\u5c11\u4e8e <em>k</em> \u3002\u8f93\u51fa <strong><em>T&nbsp;</em></strong>\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n\u8f93\u5165:\ns = &quot;aaabb&quot;, k = 3\n\n\u8f93\u51fa:\n3\n\n\u6700\u957f\u5b50\u4e32\u4e3a &quot;aaa&quot; \uff0c\u5176\u4e2d &#39;a&#39; \u91cd\u590d\u4e86 3 \u6b21\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n\u8f93\u5165:\ns = &quot;ababbc&quot;, k = 2\n\n\u8f93\u51fa:\n5\n\n\u6700\u957f\u5b50\u4e32\u4e3a &quot;ababb&quot; \uff0c\u5176\u4e2d &#39;a&#39; \u91cd\u590d\u4e86 2 \u6b21\uff0c &#39;b&#39; \u91cd\u590d\u4e86 3 \u6b21\u3002\n</pre>\n",
        "titleZh": "\u81f3\u5c11\u6709K\u4e2a\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32",
        "tags": [],
        "companies": [
            "Google",
            "Facebook",
            "Uber",
            "Baidu"
        ]
    },
    {
        "leetId": "396",
        "link": "rotate-function",
        "title": "Rotate Function",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "36.1%",
        "questionDescription": "<p>\r\nGiven an array of integers <code>A</code> and let <i>n</i> to be its length.\r\n</p>\r\n\r\n<p>\r\nAssume <code>B<sub>k</sub></code> to be an array obtained by rotating the array <code>A</code> <i>k</i> positions clock-wise, we define a \"rotation function\" <code>F</code> on <code>A</code> as follow:\r\n</p>\r\n\r\n<p>\r\n<code>F(k) = 0 * B<sub>k</sub>[0] + 1 * B<sub>k</sub>[1] + ... + (n-1) * B<sub>k</sub>[n-1]</code>.</p>\r\n\r\n<p>Calculate the maximum value of <code>F(0), F(1), ..., F(n-1)</code>. \r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\n<i>n</i> is guaranteed to be less than 10<sup>5</sup>.\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nA = [4, 3, 2, 6]\r\n\r\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\r\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\r\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\r\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\r\n\r\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a <em>n</em> \u7684\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u3002</p>\n\n<p>\u5047\u8bbe&nbsp;<code>B<sub>k</sub></code>&nbsp;\u662f\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u987a\u65f6\u9488\u65cb\u8f6c <em>k</em> \u4e2a\u4f4d\u7f6e\u540e\u7684\u6570\u7ec4\uff0c\u6211\u4eec\u5b9a\u4e49&nbsp;<code>A</code>&nbsp;\u7684&ldquo;\u65cb\u8f6c\u51fd\u6570&rdquo;&nbsp;<code>F</code>&nbsp;\u4e3a\uff1a</p>\n\n<p><code>F(k) = 0 * B<sub>k</sub>[0] + 1 * B<sub>k</sub>[1] + ... + (n-1) * B<sub>k</sub>[n-1]</code>\u3002</p>\n\n<p>\u8ba1\u7b97<code>F(0), F(1), ..., F(n-1)</code>\u4e2d\u7684\u6700\u5927\u503c\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br />\n\u53ef\u4ee5\u8ba4\u4e3a<em> n</em> \u7684\u503c\u5c0f\u4e8e 10<sup>5</sup>\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\nA = [4, 3, 2, 6]\n\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\n\n\u6240\u4ee5 F(0), F(1), F(2), F(3) \u4e2d\u7684\u6700\u5927\u503c\u662f F(3) = 26 \u3002\n</pre>\n",
        "titleZh": "\u65cb\u8f6c\u51fd\u6570",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "397",
        "link": "integer-replacement",
        "title": "Integer Replacement",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "29.5%",
        "questionDescription": "<p>\r\nGiven a positive integer <i>n</i> and you can do operations as follow:\r\n</p>\r\n\r\n<p>\r\n<ol>\r\n<li>If <i>n</i> is even, replace <i>n</i> with <code><i>n</i>/2</code>.</li>\r\n<li>If <i>n</i> is odd, you can replace <i>n</i> with either <code><i>n</i> + 1</code> or <code><i>n</i> - 1</code>.</li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\nWhat is the minimum number of replacements needed for <i>n</i> to become 1?\r\n</p>\r\n\r\n</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\n<b>Input:</b>\r\n8\r\n\r\n<b>Output:</b>\r\n3\r\n\r\n<b>Explanation:</b>\r\n8 -> 4 -> 2 -> 1\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\n<b>Input:</b>\r\n7\r\n\r\n<b>Output:</b>\r\n4\r\n\r\n<b>Explanation:</b>\r\n7 -> 8 -> 4 -> 2 -> 1\r\nor\r\n7 -> 6 -> 3 -> 2 -> 1\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<em>n</em>\uff0c\u4f60\u53ef\u4ee5\u505a\u5982\u4e0b\u64cd\u4f5c\uff1a</p>\n\n<p>1. \u5982\u679c&nbsp;<em>n&nbsp;</em>\u662f\u5076\u6570\uff0c\u5219\u7528&nbsp;<code>n / 2</code>\u66ff\u6362&nbsp;<em>n</em>\u3002<br />\n2. \u5982\u679c&nbsp;<em>n&nbsp;</em>\u662f\u5947\u6570\uff0c\u5219\u53ef\u4ee5\u7528&nbsp;<code>n + 1</code>\u6216<code>n - 1</code>\u66ff\u6362&nbsp;<em>n</em>\u3002<br />\n<em>n&nbsp;</em>\u53d8\u4e3a 1 \u6240\u9700\u7684\u6700\u5c0f\u66ff\u6362\u6b21\u6570\u662f\u591a\u5c11\uff1f</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n8\n\n<strong>\u8f93\u51fa:</strong>\n3\n\n<strong>\u89e3\u91ca:</strong>\n8 -&gt; 4 -&gt; 2 -&gt; 1\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n7\n\n<strong>\u8f93\u51fa:</strong>\n4\n\n<strong>\u89e3\u91ca:</strong>\n7 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1\n\u6216\n7 -&gt; 6 -&gt; 3 -&gt; 2 -&gt; 1\n</pre>\n",
        "titleZh": "\u6574\u6570\u66ff\u6362",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Baidu"
        ]
    },
    {
        "leetId": "398",
        "link": "random-pick-index",
        "title": "Random Pick Index",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "50.9%",
        "questionDescription": "<p>Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.</p>\r\n\r\n<p><b>Note:</b><br />\r\nThe array size can be very large. Solution that uses too much extra space will not pass the judge.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nint[] nums = new int[] {1,2,3,3,3};\r\nSolution solution = new Solution(nums);\r\n\r\n// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\r\nsolution.pick(3);\r\n\r\n// pick(1) should return 0. Since in the array only nums[0] is equal to 1.\r\nsolution.pick(1);\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u80fd\u542b\u6709\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\uff0c\u8981\u6c42\u968f\u673a\u8f93\u51fa\u7ed9\u5b9a\u7684\u6570\u5b57\u7684\u7d22\u5f15\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u7ed9\u5b9a\u7684\u6570\u5b57\u4e00\u5b9a\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong><br />\n\u6570\u7ec4\u5927\u5c0f\u53ef\u80fd\u975e\u5e38\u5927\u3002 \u4f7f\u7528\u592a\u591a\u989d\u5916\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u5c06\u4e0d\u4f1a\u901a\u8fc7\u6d4b\u8bd5\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\nint[] nums = new int[] {1,2,3,3,3};\nSolution solution = new Solution(nums);\n\n// pick(3) \u5e94\u8be5\u8fd4\u56de\u7d22\u5f15 2,3 \u6216\u8005 4\u3002\u6bcf\u4e2a\u7d22\u5f15\u7684\u8fd4\u56de\u6982\u7387\u5e94\u8be5\u76f8\u7b49\u3002\nsolution.pick(3);\n\n// pick(1) \u5e94\u8be5\u8fd4\u56de 0\u3002\u56e0\u4e3a\u53ea\u6709nums[0]\u7b49\u4e8e1\u3002\nsolution.pick(1);\n</pre>\n",
        "titleZh": "\u968f\u673a\u6570\u7d22\u5f15",
        "tags": [
            {
                "tag": "Reservoir Sampling",
                "link": "reservoir-sampling",
                "tagZh": "\u84c4\u6c34\u6c60\u62bd\u6837"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Bloomberg",
            "Uber"
        ]
    },
    {
        "leetId": "399",
        "link": "evaluate-division",
        "title": "Evaluate Division",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "47.7%",
        "questionDescription": "<p>\r\nEquations are given in the format <code>A / B = k</code>, where  <code>A</code> and <code>B</code> are variables represented as strings, and <code>k</code> is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return <code>-1.0</code>.\r\n</p>\r\n<p><b>Example:</b><br/>\r\nGiven <code> a / b = 2.0, b / c = 3.0.</code> <br/>queries are: <code> a / c = ?,  b / a = ?, a / e = ?,  a / a = ?, x / x = ? .</code> <br/>return <code> [6.0, 0.5, -1.0, 1.0, -1.0 ].</code>\r\n</p>\r\n<p>\r\nThe input is: <code> vector&lt;pair&lt;string, string&gt;&gt; equations, vector&lt;double&gt;&amp; values, vector&lt;pair&lt;string, string&gt;&gt; queries </code>, where <code>equations.size() == values.size()</code>, and the values are positive. This represents the equations. Return <code> vector&lt;double&gt;</code>.\r\n</p>\r\n\r\n<p>According to the example above:\r\n<pre>equations = [ [\"a\", \"b\"], [\"b\", \"c\"] ],\r\nvalues = [2.0, 3.0],\r\nqueries = [ [\"a\", \"c\"], [\"b\", \"a\"], [\"a\", \"e\"], [\"a\", \"a\"], [\"x\", \"x\"] ]. </pre>\r\n</p>\r\n\r\n<p>\r\nThe input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u65b9\u7a0b\u5f0f&nbsp;<code>A / B = k</code>, \u5176\u4e2d&nbsp;<code>A</code> \u548c&nbsp;<code>B</code> \u5747\u4e3a\u4ee3\u8868\u5b57\u7b26\u4e32\u7684\u53d8\u91cf\uff0c&nbsp;<code>k</code> \u662f\u4e00\u4e2a\u6d6e\u70b9\u578b\u6570\u5b57\u3002\u6839\u636e\u5df2\u77e5\u65b9\u7a0b\u5f0f\u6c42\u89e3\u95ee\u9898\uff0c\u5e76\u8fd4\u56de\u8ba1\u7b97\u7ed3\u679c\u3002\u5982\u679c\u7ed3\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de&nbsp;<code>-1.0</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b :</strong><br />\n\u7ed9\u5b9a&nbsp;<code>a / b = 2.0, b / c = 3.0</code><br />\n\u95ee\u9898: <code> a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?&nbsp;</code><br />\n\u8fd4\u56de&nbsp;<code>[6.0, 0.5, -1.0, 1.0, -1.0 ]</code></p>\n\n<p>\u8f93\u5165\u4e3a: <code> vector&lt;pair&lt;string, string&gt;&gt; equations, vector&lt;double&gt;&amp; values, vector&lt;pair&lt;string, string&gt;&gt; queries</code>(\u65b9\u7a0b\u5f0f\uff0c\u65b9\u7a0b\u5f0f\u7ed3\u679c\uff0c\u95ee\u9898\u65b9\u7a0b\u5f0f)\uff0c&nbsp;\u5176\u4e2d&nbsp;<code>equations.size() == values.size()</code>\uff0c\u5373\u65b9\u7a0b\u5f0f\u7684\u957f\u5ea6\u4e0e\u65b9\u7a0b\u5f0f\u7ed3\u679c\u957f\u5ea6\u76f8\u7b49\uff08\u7a0b\u5f0f\u4e0e\u7ed3\u679c\u4e00\u4e00\u5bf9\u5e94\uff09\uff0c\u5e76\u4e14\u7ed3\u679c\u503c\u5747\u4e3a\u6b63\u6570\u3002\u4ee5\u4e0a\u4e3a\u65b9\u7a0b\u5f0f\u7684\u63cf\u8ff0\u3002&nbsp;\u8fd4\u56de<code>vector&lt;double&gt;</code>\u7c7b\u578b\u3002</p>\n\n<p>\u57fa\u4e8e\u4e0a\u8ff0\u4f8b\u5b50\uff0c\u8f93\u5165\u5982\u4e0b\uff1a</p>\n\n<pre>\nequations(\u65b9\u7a0b\u5f0f) = [ [&quot;a&quot;, &quot;b&quot;], [&quot;b&quot;, &quot;c&quot;] ],\nvalues(\u65b9\u7a0b\u5f0f\u7ed3\u679c) = [2.0, 3.0],\nqueries(\u95ee\u9898\u65b9\u7a0b\u5f0f) = [ [&quot;a&quot;, &quot;c&quot;], [&quot;b&quot;, &quot;a&quot;], [&quot;a&quot;, &quot;e&quot;], [&quot;a&quot;, &quot;a&quot;], [&quot;x&quot;, &quot;x&quot;] ]. \n</pre>\n\n<p>\u8f93\u5165\u603b\u662f\u6709\u6548\u7684\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u6cd5\u8fd0\u7b97\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u9664\u6570\u4e3a0\u7684\u60c5\u51b5\uff0c\u4e14\u4e0d\u5b58\u5728\u4efb\u4f55\u77db\u76fe\u7684\u7ed3\u679c\u3002</p>\n",
        "titleZh": "\u9664\u6cd5\u6c42\u503c",
        "tags": [
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Uber",
            "Adobe"
        ]
    },
    {
        "leetId": "400",
        "link": "nth-digit",
        "title": "Nth Digit",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "30.8%",
        "questionDescription": "<p>Find the <i>n</i><sup>th</sup> digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... </p>\r\n\r\n<p><b>Note:</b><br />\r\n<i>n</i> is positive and will fit within the range of a 32-bit signed integer (<i>n</i> < 2<sup>31</sup>).\r\n</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\n<b>Input:</b>\r\n3\r\n\r\n<b>Output:</b>\r\n3\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\n<b>Input:</b>\r\n11\r\n\r\n<b>Output:</b>\r\n0\r\n\r\n<b>Explanation:</b>\r\nThe 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u5728\u65e0\u9650\u7684\u6574\u6570\u5e8f\u5217&nbsp;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...\u4e2d\u627e\u5230\u7b2c&nbsp;<em>n&nbsp;</em>\u4e2a\u6570\u5b57\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br />\n<em>n&nbsp;</em>\u662f\u6b63\u6570\u4e14\u572832\u4e3a\u6574\u5f62\u8303\u56f4\u5185&nbsp;(&nbsp;<em>n</em> &lt; 2<sup>31</sup>)\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n3\n\n<strong>\u8f93\u51fa:</strong>\n3\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n11\n\n<strong>\u8f93\u51fa:</strong>\n0\n\n<strong>\u8bf4\u660e:</strong>\n\u7b2c11\u4e2a\u6570\u5b57\u5728\u5e8f\u5217 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... \u91cc\u662f<strong>0</strong>\uff0c\u5b83\u662f10\u7684\u4e00\u90e8\u5206\u3002\n</pre>\n",
        "titleZh": "\u7b2cN\u4e2a\u6570\u5b57",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Adobe",
            "Works Applications"
        ]
    },
    {
        "leetId": "401",
        "link": "binary-watch",
        "title": "Binary Watch",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "46.0%",
        "questionDescription": "<p>A binary watch has 4 LEDs on the top which represent the <b>hours</b> (<b>0-11</b>), and the 6 LEDs on the bottom represent the <b>minutes</b> (<b>0-59</b>).</p>\r\n<p>Each LED represents a zero or one, with the least significant bit on the right.</p>\r\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8b/Binary_clock_samui_moon.jpg\" height=\"300\" />\r\n<p>For example, the above binary watch reads \"3:25\".</p>\r\n\r\n<p>Given a non-negative integer <i>n</i> which represents the number of LEDs that are currently on, return all possible times the watch could represent.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>Input: n = 1<br>Return: [\"1:00\", \"2:00\", \"4:00\", \"8:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\"]</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ul>\r\n<li>The order of output does not matter.</li>\r\n<li>The hour must not contain a leading zero, for example \"01:00\" is not valid, it should be \"1:00\".</li>\r\n<li>The minute must be consist of two digits and may contain a leading zero, for example \"10:2\" is not valid, it should be \"10:02\".</li>\r\n</ul>\r\n</p>",
        "questionDescriptionZh": "<p>\u4e8c\u8fdb\u5236\u624b\u8868\u9876\u90e8\u6709 4 \u4e2a LED \u4ee3\u8868<strong>\u5c0f\u65f6\uff080-11\uff09</strong>\uff0c\u5e95\u90e8\u7684 6 \u4e2a LED \u4ee3\u8868<strong>\u5206\u949f\uff080-59\uff09</strong>\u3002</p>\n\n<p>\u6bcf\u4e2a LED \u4ee3\u8868\u4e00\u4e2a 0 \u6216 1\uff0c\u6700\u4f4e\u4f4d\u5728\u53f3\u4fa7\u3002</p>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8b/Binary_clock_samui_moon.jpg\" style=\"height:300px\" /></p>\n\n<p>\u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u4e8c\u8fdb\u5236\u624b\u8868\u8bfb\u53d6 &ldquo;3:25&rdquo;\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 <em>n&nbsp;</em>\u4ee3\u8868\u5f53\u524d LED \u4eae\u7740\u7684\u6570\u91cf\uff0c\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684\u65f6\u95f4\u3002</p>\n\n<p><strong>\u6848\u4f8b:</strong></p>\n\n<pre>\n\u8f93\u5165: n = 1\n\u8fd4\u56de: [&quot;1:00&quot;, &quot;2:00&quot;, &quot;4:00&quot;, &quot;8:00&quot;, &quot;0:01&quot;, &quot;0:02&quot;, &quot;0:04&quot;, &quot;0:08&quot;, &quot;0:16&quot;, &quot;0:32&quot;]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f\u4e8b\u9879:</strong></p>\n\n<ul>\n\t<li>\u8f93\u51fa\u7684\u987a\u5e8f\u6ca1\u6709\u8981\u6c42\u3002</li>\n\t<li>\u5c0f\u65f6\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\uff0c\u6bd4\u5982 &ldquo;01:00&rdquo;&nbsp;\u662f\u4e0d\u5141\u8bb8\u7684\uff0c\u5e94\u4e3a &ldquo;1:00&rdquo;\u3002</li>\n\t<li>\u5206\u949f\u5fc5\u987b\u7531\u4e24\u4f4d\u6570\u7ec4\u6210\uff0c\u53ef\u80fd\u4f1a\u4ee5\u96f6\u5f00\u5934\uff0c\u6bd4\u5982 &ldquo;10:2&rdquo;&nbsp;\u662f\u65e0\u6548\u7684\uff0c\u5e94\u4e3a &ldquo;10:02&rdquo;\u3002</li>\n</ul>\n",
        "titleZh": "\u4e8c\u8fdb\u5236\u624b\u8868",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "402",
        "link": "remove-k-digits",
        "title": "Remove K Digits",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "24.8%",
        "questionDescription": "<p>Given a non-negative integer <i>num</i> represented as a string, remove <i>k</i> digits from the number so that the new number is the smallest possible.\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ul>\r\n<li>The length of <i>num</i> is less than 10002 and will be &ge; <i>k</i>.</li>\r\n<li>The given <i>num</i> does not contain any leading zero.</li>\r\n</ul>\r\n</b>\r\n</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\nInput: num = \"1432219\", k = 3\r\nOutput: \"1219\"\r\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\nInput: num = \"10200\", k = 1\r\nOutput: \"200\"\r\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b>\r\n<pre>\r\nInput: num = \"10\", k = 2\r\nOutput: \"0\"\r\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee5\u5b57\u7b26\u4e32\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570&nbsp;<em>num</em>\uff0c\u79fb\u9664\u8fd9\u4e2a\u6570\u4e2d\u7684 <em>k </em>\u4f4d\u6570\u5b57\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u6570\u5b57\u6700\u5c0f\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><em>num</em> \u7684\u957f\u5ea6\u5c0f\u4e8e 10002 \u4e14&nbsp;&ge; <em>k\u3002</em></li>\n\t<li><em>num</em> \u4e0d\u4f1a\u5305\u542b\u4efb\u4f55\u524d\u5bfc\u96f6\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b 1 :</strong></p>\n\n<pre>\n\u8f93\u5165: num = &quot;1432219&quot;, k = 3\n\u8f93\u51fa: &quot;1219&quot;\n\u89e3\u91ca: \u79fb\u9664\u6389\u4e09\u4e2a\u6570\u5b57 4, 3, \u548c 2 \u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u6700\u5c0f\u7684\u6570\u5b57 1219\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2 :</strong></p>\n\n<pre>\n\u8f93\u5165: num = &quot;10200&quot;, k = 1\n\u8f93\u51fa: &quot;200&quot;\n\u89e3\u91ca: \u79fb\u6389\u9996\u4f4d\u7684 1 \u5269\u4e0b\u7684\u6570\u5b57\u4e3a 200. \u6ce8\u610f\u8f93\u51fa\u4e0d\u80fd\u6709\u4efb\u4f55\u524d\u5bfc\u96f6\u3002\n</pre>\n\n<p>\u793a\u4f8b<strong> 3 :</strong></p>\n\n<pre>\n\u8f93\u5165: num = &quot;10&quot;, k = 2\n\u8f93\u51fa: &quot;0&quot;\n\u89e3\u91ca: \u4ece\u539f\u6570\u5b57\u79fb\u9664\u6240\u6709\u7684\u6570\u5b57\uff0c\u5269\u4f59\u4e3a\u7a7a\u5c31\u662f0\u3002\n</pre>\n",
        "titleZh": "\u79fb\u6389K\u4f4d\u6570\u5b57",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Snapchat",
            "Nutanix",
            "Drawbridge"
        ]
    },
    {
        "leetId": "403",
        "link": "frog-jump",
        "title": "Frog Jump",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "26.2%",
        "questionDescription": "<p>A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.</p>\r\n\r\n<p>Given a list of stones' positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit.\r\n</p>\r\n\r\n<p>If the frog's last jump was <i>k</i> units, then its next jump must be either <i>k</i> - 1, <i>k</i>, or <i>k</i> + 1 units. Note that the frog can only jump in the forward direction.</p>\r\n\r\n<p><b>Note:</b>\r\n<ul>\r\n<li>The number of stones is &ge; 2 and is < 1,100.</li>\r\n<li>Each stone's position will be a non-negative integer < 2<sup>31</sup>.</li>\r\n<li>The first stone's position is always 0.</li>\r\n</ul>\r\n</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\n<b>[0,1,3,5,6,8,12,17]</b>\r\n\r\nThere are a total of 8 stones.\r\nThe first stone at the 0th unit, second stone at the 1st unit,\r\nthird stone at the 3rd unit, and so on...\r\nThe last stone at the 17th unit.\r\n\r\n<b>Return true</b>. The frog can jump to the last stone by jumping \r\n1 unit to the 2nd stone, then 2 units to the 3rd stone, then \r\n2 units to the 4th stone, then 3 units to the 6th stone, \r\n4 units to the 7th stone, and 5 units to the 8th stone.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\n<b>[0,1,2,3,4,8,9,11]</b>\r\n\r\n<b>Return false</b>. There is no way to jump to the last stone as \r\nthe gap between the 5th and 6th stone is too large.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u4e00\u53ea\u9752\u86d9\u60f3\u8981\u8fc7\u6cb3\u3002 \u5047\u5b9a\u6cb3\u6d41\u88ab\u7b49\u5206\u4e3a&nbsp;x<em>&nbsp;</em>\u4e2a\u5355\u5143\u683c\uff0c\u5e76\u4e14\u5728\u6bcf\u4e00\u4e2a\u5355\u5143\u683c\u5185\u90fd\u6709\u53ef\u80fd\u653e\u6709\u4e00\u77f3\u5b50\uff08\u4e5f\u6709\u53ef\u80fd\u6ca1\u6709\uff09\u3002 \u9752\u86d9\u53ef\u4ee5\u8df3\u4e0a\u77f3\u5934\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u8df3\u5165\u6c34\u4e2d\u3002</p>\n\n<p>\u7ed9\u5b9a\u77f3\u5b50\u7684\u4f4d\u7f6e\u5217\u8868\uff08\u7528\u5355\u5143\u683c\u5e8f\u53f7\u5347\u5e8f\u8868\u793a\uff09\uff0c&nbsp;<strong>\u8bf7\u5224\u5b9a\u9752\u86d9\u80fd\u5426\u6210\u529f\u8fc7\u6cb3</strong>\uff08\u5373\u80fd\u5426\u5728\u6700\u540e\u4e00\u6b65\u8df3\u81f3\u6700\u540e\u4e00\u4e2a\u77f3\u5b50\u4e0a\uff09\u3002&nbsp;\u5f00\u59cb\u65f6\uff0c&nbsp;\u9752\u86d9\u9ed8\u8ba4\u5df2\u7ad9\u5728\u7b2c\u4e00\u4e2a\u77f3\u5b50\u4e0a\uff0c\u5e76\u53ef\u4ee5\u5047\u5b9a\u5b83\u7b2c\u4e00\u6b65\u53ea\u80fd\u8df3\u8dc3\u4e00\u4e2a\u5355\u4f4d\uff08\u5373\u53ea\u80fd\u4ece\u5355\u5143\u683c1\u8df3\u81f3\u5355\u5143\u683c2\uff09\u3002</p>\n\n<p>\u5982\u679c\u9752\u86d9\u4e0a\u4e00\u6b65\u8df3\u8dc3\u4e86&nbsp;<em>k&nbsp;</em>\u4e2a\u5355\u4f4d\uff0c\u90a3\u4e48\u5b83\u63a5\u4e0b\u6765\u7684\u8df3\u8dc3\u8ddd\u79bb\u53ea\u80fd\u9009\u62e9\u4e3a&nbsp;<em>k - 1</em>\u3001<em>k&nbsp;</em>\u6216&nbsp;<em>k + 1</em>\u4e2a\u5355\u4f4d\u3002&nbsp;\u53e6\u8bf7\u6ce8\u610f\uff0c\u9752\u86d9\u53ea\u80fd\u5411\u524d\u65b9\uff08\u7ec8\u70b9\u7684\u65b9\u5411\uff09\u8df3\u8dc3\u3002</p>\n\n<p><strong>\u8bf7\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li>\u77f3\u5b50\u7684\u6570\u91cf &ge; 2 \u4e14&nbsp;&lt; 1100\uff1b</li>\n\t<li>\u6bcf\u4e00\u4e2a\u77f3\u5b50\u7684\u4f4d\u7f6e\u5e8f\u53f7\u90fd\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u4e14\u5176 &lt; 2<sup>31</sup>\uff1b</li>\n\t<li>\u7b2c\u4e00\u4e2a\u77f3\u5b50\u7684\u4f4d\u7f6e\u6c38\u8fdc\u662f0\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>[0,1,3,5,6,8,12,17]</strong>\n\n\u603b\u5171\u67098\u4e2a\u77f3\u5b50\u3002\n\u7b2c\u4e00\u4e2a\u77f3\u5b50\u5904\u4e8e\u5e8f\u53f7\u4e3a0\u7684\u5355\u5143\u683c\u7684\u4f4d\u7f6e, \u7b2c\u4e8c\u4e2a\u77f3\u5b50\u5904\u4e8e\u5e8f\u53f7\u4e3a1\u7684\u5355\u5143\u683c\u7684\u4f4d\u7f6e,\n\u7b2c\u4e09\u4e2a\u77f3\u5b50\u5728\u5e8f\u53f7\u4e3a3\u7684\u5355\u5143\u683c\u7684\u4f4d\u7f6e\uff0c \u4ee5\u6b64\u5b9a\u4e49\u6574\u4e2a\u6570\u7ec4...\n\u6700\u540e\u4e00\u4e2a\u77f3\u5b50\u5904\u4e8e\u5e8f\u53f7\u4e3a17\u7684\u5355\u5143\u683c\u7684\u4f4d\u7f6e\u3002\n\n\u8fd4\u56de <strong>true</strong>\u3002\u5373\u9752\u86d9\u53ef\u4ee5\u6210\u529f\u8fc7\u6cb3\uff0c\u6309\u7167\u5982\u4e0b\u65b9\u6848\u8df3\u8dc3\uff1a \n\u8df31\u4e2a\u5355\u4f4d\u5230\u7b2c2\u5757\u77f3\u5b50, \u7136\u540e\u8df32\u4e2a\u5355\u4f4d\u5230\u7b2c3\u5757\u77f3\u5b50, \u63a5\u7740 \n\u8df32\u4e2a\u5355\u4f4d\u5230\u7b2c4\u5757\u77f3\u5b50, \u7136\u540e\u8df33\u4e2a\u5355\u4f4d\u5230\u7b2c6\u5757\u77f3\u5b50, \n\u8df34\u4e2a\u5355\u4f4d\u5230\u7b2c7\u5757\u77f3\u5b50, \u6700\u540e\uff0c\u8df35\u4e2a\u5355\u4f4d\u5230\u7b2c8\u4e2a\u77f3\u5b50\uff08\u5373\u6700\u540e\u4e00\u5757\u77f3\u5b50\uff09\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>[0,1,2,3,4,8,9,11]</strong>\n\n\u8fd4\u56de <strong>false\u3002</strong>\u9752\u86d9\u6ca1\u6709\u529e\u6cd5\u8fc7\u6cb3\u3002 \n\u8fd9\u662f\u56e0\u4e3a\u7b2c5\u548c\u7b2c6\u4e2a\u77f3\u5b50\u4e4b\u95f4\u7684\u95f4\u8ddd\u592a\u5927\uff0c\u6ca1\u6709\u53ef\u9009\u7684\u65b9\u6848\u4f9b\u9752\u86d9\u8df3\u8dc3\u8fc7\u53bb\u3002\n</pre>\n",
        "titleZh": "\u9752\u86d9\u8fc7\u6cb3",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Apple",
            "Snapchat",
            "Oracle"
        ]
    },
    {
        "leetId": "404",
        "link": "sum-of-left-leaves",
        "title": "Sum of Left Leaves",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "49.4%",
        "questionDescription": "<p>Find the sum of all left leaves in a given binary tree.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n\r\nThere are two left leaves in the binary tree, with values <b>9</b> and <b>15</b> respectively. Return <b>24</b>.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u8ba1\u7b97\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u6240\u6709\u5de6\u53f6\u5b50\u4e4b\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n\u5728\u8fd9\u4e2a\u4e8c\u53c9\u6811\u4e2d\uff0c\u6709\u4e24\u4e2a\u5de6\u53f6\u5b50\uff0c\u5206\u522b\u662f 9 \u548c 15\uff0c\u6240\u4ee5\u8fd4\u56de 24</pre>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u5de6\u53f6\u5b50\u4e4b\u548c",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Mathworks"
        ]
    },
    {
        "leetId": "405",
        "link": "convert-a-number-to-hexadecimal",
        "title": "Convert a Number to Hexadecimal",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "45.1%",
        "questionDescription": "<p>\r\nGiven an integer, write an algorithm to convert it to hexadecimal. For negative integer, <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">two\u2019s complement</a> method is used.\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<ol>\r\n<li>All letters in hexadecimal (<code>a-f</code>) must be in lowercase.</li>\r\n<li>The hexadecimal string must not contain extra leading <code>0</code>s. If the number is zero, it is represented by a single zero character <code>'0'</code>; otherwise, the first character in the hexadecimal string will not be the zero character.</li>\r\n<li>The given number is guaranteed to fit within the range of a 32-bit signed integer.</li>\r\n<li>You <b>must not use <i>any</i> method provided by the library</b> which converts/formats the number to hex directly.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\nInput:\r\n26\r\n\r\nOutput:\r\n\"1a\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\nInput:\r\n-1\r\n\r\nOutput:\r\n\"ffffffff\"\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u5c06\u8fd9\u4e2a\u6570\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570\u3002\u5bf9\u4e8e\u8d1f\u6574\u6570\uff0c\u6211\u4eec\u901a\u5e38\u4f7f\u7528&nbsp;<a href=\"https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81/6854613?fr=aladdin\">\u8865\u7801\u8fd0\u7b97</a>&nbsp;\u65b9\u6cd5\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u5341\u516d\u8fdb\u5236\u4e2d\u6240\u6709\u5b57\u6bcd(<code>a-f</code>)\u90fd\u5fc5\u987b\u662f\u5c0f\u5199\u3002</li>\n\t<li>\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u4e0d\u80fd\u5305\u542b\u591a\u4f59\u7684\u524d\u5bfc\u96f6\u3002\u5982\u679c\u8981\u8f6c\u5316\u7684\u6570\u4e3a0\uff0c\u90a3\u4e48\u4ee5\u5355\u4e2a\u5b57\u7b26<code>&#39;0&#39;</code>\u6765\u8868\u793a\uff1b\u5bf9\u4e8e\u5176\u4ed6\u60c5\u51b5\uff0c\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5c06\u4e0d\u4f1a\u662f0\u5b57\u7b26\u3002&nbsp;</li>\n\t<li>\u7ed9\u5b9a\u7684\u6570\u786e\u4fdd\u572832\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002</li>\n\t<li><strong>\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u7531\u5e93\u63d0\u4f9b\u7684\u5c06\u6570\u5b57\u76f4\u63a5\u8f6c\u6362\u6216\u683c\u5f0f\u5316\u4e3a\u5341\u516d\u8fdb\u5236\u7684\u65b9\u6cd5\u3002</strong></li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n\u8f93\u5165:\n26\n\n\u8f93\u51fa:\n&quot;1a&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n\u8f93\u5165:\n-1\n\n\u8f93\u51fa:\n&quot;ffffffff&quot;\n</pre>\n",
        "titleZh": "\u6570\u5b57\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ],
        "companies": [
            "Facebook"
        ]
    },
    {
        "leetId": "406",
        "link": "queue-reconstruction-by-height",
        "title": "Queue Reconstruction by Height",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "59.9%",
        "questionDescription": "<p>Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers <code>(h, k)</code>, where <code>h</code> is the height of the person and <code>k</code> is the number of people in front of this person who have a height greater than or equal to <code>h</code>. Write an algorithm to reconstruct the queue.\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\nThe number of people is less than 1,100.\r\n</p>\r\n\r\n<br />\r\n\r\n<p><b>Example</b>\r\n<pre>\r\nInput:\r\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\r\n\r\nOutput:\r\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u5047\u8bbe\u6709\u6253\u4e71\u987a\u5e8f\u7684\u4e00\u7fa4\u4eba\u7ad9\u6210\u4e00\u4e2a\u961f\u5217\u3002 \u6bcf\u4e2a\u4eba\u7531\u4e00\u4e2a\u6574\u6570\u5bf9<code>(h, k)</code>\u8868\u793a\uff0c\u5176\u4e2d<code>h</code>\u662f\u8fd9\u4e2a\u4eba\u7684\u8eab\u9ad8\uff0c<code>k</code>\u662f\u6392\u5728\u8fd9\u4e2a\u4eba\u524d\u9762\u4e14\u8eab\u9ad8\u5927\u4e8e\u6216\u7b49\u4e8e<code>h</code>\u7684\u4eba\u6570\u3002 \u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u6765\u91cd\u5efa\u8fd9\u4e2a\u961f\u5217\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong><br />\n\u603b\u4eba\u6570\u5c11\u4e8e1100\u4eba\u3002</p>\n\n<p><strong>\u793a\u4f8b</strong></p>\n\n<pre>\n\u8f93\u5165:\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\n\n\u8f93\u51fa:\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\n</pre>\n",
        "titleZh": "\u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon"
        ]
    },
    {
        "leetId": "407",
        "link": "trapping-rain-water-ii",
        "title": "Trapping Rain Water II",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "28.2%",
        "questionDescription": "<p>Given an <code>m x n</code> matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<p>Both <i>m</i> and <i>n</i> are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\nGiven the following 3x6 height map:\r\n[\r\n  [1,4,3,1,3,2],\r\n  [3,2,1,3,2,4],\r\n  [2,3,3,2,3,1]\r\n]\r\n\r\nReturn 4.\r\n</pre>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/13/rainwater_empty.png\" style=\"width: 100%; max-width: 500px;\" /></p>\r\n\r\n<p>The above image represents the elevation map <code>[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]</code> before the rain.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/13/rainwater_fill.png\" style=\"width: 100%; max-width: 500px;\" /></p>\r\n\r\n<p>After the rain, water is trapped between the blocks. The total volume of water trapped is 4.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a <code>m x n</code>&nbsp;\u7684\u77e9\u9635\uff0c\u5176\u4e2d\u7684\u503c\u5747\u4e3a\u6b63\u6574\u6570\uff0c\u4ee3\u8868\u4e8c\u7ef4\u9ad8\u5ea6\u56fe\u6bcf\u4e2a\u5355\u5143\u7684\u9ad8\u5ea6\uff0c\u8bf7\u8ba1\u7b97\u56fe\u4e2d\u5f62\u72b6\u6700\u591a\u80fd\u63a5\u591a\u5c11\u4f53\u79ef\u7684\u96e8\u6c34\u3002</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u8bf4\u660e:</strong></p>\r\n\r\n<p><em>m&nbsp;</em>\u548c <em>n&nbsp;</em>\u90fd\u662f\u5c0f\u4e8e110\u7684\u6574\u6570\u3002\u6bcf\u4e00\u4e2a\u5355\u4f4d\u7684\u9ad8\u5ea6\u90fd\u5927\u4e8e0 \u4e14\u5c0f\u4e8e 20000\u3002</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\r\n\r\n<pre>\u7ed9\u51fa\u5982\u4e0b 3x6 \u7684\u9ad8\u5ea6\u56fe:\r\n[\r\n  [1,4,3,1,3,2],\r\n  [3,2,1,3,2,4],\r\n  [2,3,3,2,3,1]\r\n]\r\n\r\n\u8fd4\u56de 4\u3002\r\n</pre>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/rainwater_empty.png\" style=\"width: 100%; max-width: 500px;\"></p>\r\n\r\n<p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8fd9\u662f\u4e0b\u96e8\u524d\u7684\u9ad8\u5ea6\u56fe<code>[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]</code> \u7684\u72b6\u6001\u3002</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/rainwater_fill.png\" style=\"width: 100%; max-width: 500px;\"></p>\r\n\r\n<p>\u4e0b\u96e8\u540e\uff0c\u96e8\u6c34\u5c06\u4f1a\u88ab\u5b58\u50a8\u5728\u8fd9\u4e9b\u65b9\u5757\u4e2d\u3002\u603b\u7684\u63a5\u96e8\u6c34\u91cf\u662f4\u3002</p>",
        "titleZh": "\u63a5\u96e8\u6c34 II",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Microsoft",
            "Twitter"
        ]
    },
    {
        "leetId": "408",
        "link": "valid-word-abbreviation",
        "title": "Valid Word Abbreviation",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "17",
        "questionDescription": "\n<p>\nGiven a <b>non-empty</b> string <code>s</code> and an abbreviation <code>abbr</code>, return whether the string matches with the given abbreviation.\n</p>\n<p>A string such as <code>\"word\"</code> contains only the following valid abbreviations:</p>\n<pre>[\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"]\n</pre>\n<p>Notice that only the above abbreviations are valid abbreviations of the string <code>\"word\"</code>. Any other string is not a valid abbreviation of <code>\"word\"</code>.</p>\n<p><b>Note:</b><br/>\nAssume <code>s</code> contains only lowercase letters and <code>abbr</code> contains only lowercase letters and digits.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre>Given <b>s</b> = \"internationalization\", <b>abbr</b> = \"i12iz4n\":\n\nReturn true.\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre>Given <b>s</b> = \"apple\", <b>abbr</b> = \"a2e\":\n\nReturn false.\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>\nGiven a <b>non-empty</b> string <code>s</code> and an abbreviation <code>abbr</code>, return whether the string matches with the given abbreviation.\n</p>\n<p>A string such as <code>\"word\"</code> contains only the following valid abbreviations:</p>\n<pre>[\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"]\n</pre>\n<p>Notice that only the above abbreviations are valid abbreviations of the string <code>\"word\"</code>. Any other string is not a valid abbreviation of <code>\"word\"</code>.</p>\n<p><b>Note:</b><br/>\nAssume <code>s</code> contains only lowercase letters and <code>abbr</code> contains only lowercase letters and digits.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre>Given <b>s</b> = \"internationalization\", <b>abbr</b> = \"i12iz4n\":\n\nReturn true.\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre>Given <b>s</b> = \"apple\", <b>abbr</b> = \"a2e\":\n\nReturn false.\n</pre>\n<p></p>\n",
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "409",
        "link": "longest-palindrome",
        "title": "Longest Palindrome",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "47.1%",
        "questionDescription": "<p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>\r\n\r\n<p>This is case sensitive, for example <code>\"Aa\"</code> is not considered a palindrome here.</p>\r\n\r\n<p><b>Note:</b><br />\r\nAssume the length of given string will not exceed 1,010.\r\n</p>\r\n\r\n<p><b>Example: </b>\r\n<pre>\r\nInput:\r\n\"abccccdd\"\r\n\r\nOutput:\r\n7\r\n\r\nExplanation:\r\nOne longest palindrome that can be built is \"dccaccd\", whose length is 7.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u5927\u5199\u5b57\u6bcd\u548c\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u901a\u8fc7\u8fd9\u4e9b\u5b57\u6bcd\u6784\u9020\u6210\u7684\u6700\u957f\u7684\u56de\u6587\u4e32\u3002</p>\n\n<p>\u5728\u6784\u9020\u8fc7\u7a0b\u4e2d\uff0c\u8bf7\u6ce8\u610f\u533a\u5206\u5927\u5c0f\u5199\u3002\u6bd4\u5982&nbsp;<code>&quot;Aa&quot;</code>&nbsp;\u4e0d\u80fd\u5f53\u505a\u4e00\u4e2a\u56de\u6587\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br />\n\u5047\u8bbe\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 1010\u3002</p>\n\n<p><strong>\u793a\u4f8b 1: </strong></p>\n\n<pre>\n\u8f93\u5165:\n&quot;abccccdd&quot;\n\n\u8f93\u51fa:\n7\n\n\u89e3\u91ca:\n\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u7684\u6700\u957f\u7684\u56de\u6587\u4e32\u662f&quot;dccaccd&quot;, \u5b83\u7684\u957f\u5ea6\u662f 7\u3002\n</pre>\n",
        "titleZh": "\u6700\u957f\u56de\u6587\u4e32",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft"
        ]
    },
    {
        "leetId": "410",
        "link": "split-array-largest-sum",
        "title": "Split Array Largest Sum",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "35.5%",
        "questionDescription": "<p>Given an array which consists of non-negative integers and an integer <i>m</i>, you can split the array into <i>m</i> non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these <i>m</i> subarrays.\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\nIf <i>n</i> is the length of array, assume the following constraints are satisfied:\r\n<ul>\r\n<li>1 &le; <i>n</i> &le; 1000</li>\r\n<li>1 &le; <i>m</i> &le; min(50, <i>n</i>)</li>\r\n</ul>\r\n</p>\r\n\r\n<p><b>Examples: </b>\r\n<pre>\r\nInput:\r\n<b>nums</b> = [7,2,5,10,8]\r\n<b>m</b> = 2\r\n\r\nOutput:\r\n18\r\n\r\nExplanation:\r\nThere are four ways to split <b>nums</b> into two subarrays.\r\nThe best way is to split it into <b>[7,2,5]</b> and <b>[10,8]</b>,\r\nwhere the largest sum among the two subarrays is only 18.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570&nbsp;<em>m</em>\uff0c\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u6210&nbsp;<em>m&nbsp;</em>\u4e2a\u975e\u7a7a\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u3002\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u4f7f\u5f97\u8fd9&nbsp;<em>m&nbsp;</em>\u4e2a\u5b50\u6570\u7ec4\u5404\u81ea\u548c\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br />\n\u6570\u7ec4\u957f\u5ea6&nbsp;<em>n&nbsp;</em>\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6:</p>\n\n<ul>\n\t<li>1 &le; <em>n</em> &le; 1000</li>\n\t<li>1 &le; <em>m</em> &le; min(50, <em>n</em>)</li>\n</ul>\n\n<p><strong>\u793a\u4f8b: </strong></p>\n\n<pre>\n\u8f93\u5165:\n<strong>nums</strong> = [7,2,5,10,8]\n<strong>m</strong> = 2\n\n\u8f93\u51fa:\n18\n\n\u89e3\u91ca:\n\u4e00\u5171\u6709\u56db\u79cd\u65b9\u6cd5\u5c06<strong>nums</strong>\u5206\u5272\u4e3a2\u4e2a\u5b50\u6570\u7ec4\u3002\n\u5176\u4e2d\u6700\u597d\u7684\u65b9\u5f0f\u662f\u5c06\u5176\u5206\u4e3a<strong>[7,2,5]</strong> \u548c <strong>[10,8]</strong>\uff0c\n\u56e0\u4e3a\u6b64\u65f6\u8fd9\u4e24\u4e2a\u5b50\u6570\u7ec4\u5404\u81ea\u7684\u548c\u7684\u6700\u5927\u503c\u4e3a18\uff0c\u5728\u6240\u6709\u60c5\u51b5\u4e2d\u6700\u5c0f\u3002\n</pre>\n",
        "titleZh": "\u5206\u5272\u6570\u7ec4\u7684\u6700\u5927\u503c",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Airbnb",
            "Baidu"
        ]
    },
    {
        "leetId": "411",
        "link": "minimum-unique-word-abbreviation",
        "title": "Minimum Unique Word Abbreviation",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "0",
        "questionDescription": "\n<p>A string such as <code>\"word\"</code> contains the following abbreviations:</p>\n<pre>[\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"]\n</pre>\n<p>Given a target string and a set of strings in a dictionary, find an abbreviation of this target string with the <b><i>smallest possible</i></b> length such that it does not conflict with abbreviations of the strings in the dictionary. </p>\n<p>Each <b>number</b> or letter in the abbreviation is considered length = 1. For example, the abbreviation \"a32bc\" has length = 4.</p>\n<p><b>Note:</b><br/>\n</p><ul>\n<li>In the case of multiple answers as shown in the second example below, you may return any one of them.</li>\n<li>Assume length of target string = <b>m</b>, and dictionary size = <b>n</b>. You may assume that <b>m \u2264 21</b>, <b>n \u2264 1000</b>, and <b>log<sub>2</sub>(n) + m \u2264 20</b>.</li>\n</ul>\n<p></p>\n<p><b>Examples:</b><br/>\n</p><pre>\"apple\", [\"blade\"] -&gt; \"a4\" (because \"5\" or \"4e\" conflicts with \"blade\")\n\n\"apple\", [\"plain\", \"amber\", \"blade\"] -&gt; \"1p3\" (other valid answers include \"ap3\", \"a3e\", \"2p2\", \"3le\", \"3l1\").\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>A string such as <code>\"word\"</code> contains the following abbreviations:</p>\n<pre>[\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"]\n</pre>\n<p>Given a target string and a set of strings in a dictionary, find an abbreviation of this target string with the <b><i>smallest possible</i></b> length such that it does not conflict with abbreviations of the strings in the dictionary. </p>\n<p>Each <b>number</b> or letter in the abbreviation is considered length = 1. For example, the abbreviation \"a32bc\" has length = 4.</p>\n<p><b>Note:</b><br/>\n</p><ul>\n<li>In the case of multiple answers as shown in the second example below, you may return any one of them.</li>\n<li>Assume length of target string = <b>m</b>, and dictionary size = <b>n</b>. You may assume that <b>m \u2264 21</b>, <b>n \u2264 1000</b>, and <b>log<sub>2</sub>(n) + m \u2264 20</b>.</li>\n</ul>\n<p></p>\n<p><b>Examples:</b><br/>\n</p><pre>\"apple\", [\"blade\"] -&gt; \"a4\" (because \"5\" or \"4e\" conflicts with \"blade\")\n\n\"apple\", [\"plain\", \"amber\", \"blade\"] -&gt; \"1p3\" (other valid answers include \"ap3\", \"a3e\", \"2p2\", \"3le\", \"3l1\").\n</pre>\n<p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "412",
        "link": "fizz-buzz",
        "title": "Fizz Buzz",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "58.8%",
        "questionDescription": "<p>Write a program that outputs the string representation of numbers from 1 to <i>n</i>.</p>\r\n\r\n<p>But for multiples of three it should output \u201cFizz\u201d instead of the number and for the multiples of five output \u201cBuzz\u201d. For numbers which are multiples of both three and five output \u201cFizzBuzz\u201d.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nn = 15,\r\n\r\nReturn:\r\n[\r\n    \"1\",\r\n    \"2\",\r\n    \"Fizz\",\r\n    \"4\",\r\n    \"Buzz\",\r\n    \"Fizz\",\r\n    \"7\",\r\n    \"8\",\r\n    \"Fizz\",\r\n    \"Buzz\",\r\n    \"11\",\r\n    \"Fizz\",\r\n    \"13\",\r\n    \"14\",\r\n    \"FizzBuzz\"\r\n]\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8f93\u51fa\u4ece 1 \u5230 <em>n</em> \u6570\u5b57\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002</p>\n\n<p>1. \u5982\u679c&nbsp;<em>n&nbsp;</em>\u662f3\u7684\u500d\u6570\uff0c\u8f93\u51fa&ldquo;Fizz&rdquo;\uff1b</p>\n\n<p>2. \u5982\u679c&nbsp;<em>n&nbsp;</em>\u662f5\u7684\u500d\u6570\uff0c\u8f93\u51fa&ldquo;Buzz&rdquo;\uff1b</p>\n\n<p>3.\u5982\u679c&nbsp;<em>n&nbsp;</em>\u540c\u65f6\u662f3\u548c5\u7684\u500d\u6570\uff0c\u8f93\u51fa &ldquo;FizzBuzz&rdquo;\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>n = 15,\n\n\u8fd4\u56de:\n[\n    &quot;1&quot;,\n    &quot;2&quot;,\n    &quot;Fizz&quot;,\n    &quot;4&quot;,\n    &quot;Buzz&quot;,\n    &quot;Fizz&quot;,\n    &quot;7&quot;,\n    &quot;8&quot;,\n    &quot;Fizz&quot;,\n    &quot;Buzz&quot;,\n    &quot;11&quot;,\n    &quot;Fizz&quot;,\n    &quot;13&quot;,\n    &quot;14&quot;,\n    &quot;FizzBuzz&quot;\n]\n</pre>\n",
        "titleZh": "Fizz Buzz",
        "tags": [],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Oracle",
            "eBay",
            "VMware",
            "Paypal",
            "Cisco",
            "Zillow",
            "Capital One",
            "IBM",
            "Qualcomm"
        ]
    },
    {
        "leetId": "413",
        "link": "arithmetic-slices",
        "title": "Arithmetic Slices",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "54.1%",
        "questionDescription": "<p>A sequence of number is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.</p>\r\n\r\n<p>For example, these are arithmetic sequence:</p>\r\n<pre>1, 3, 5, 7, 9\r\n7, 7, 7, 7\r\n3, -1, -5, -9</pre>\r\n\r\n<p>The following sequence is not arithmetic.</p> <pre>1, 1, 2, 5, 7</pre> \r\n<br/>\r\n\r\n<p>A zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 <= P < Q < N.</p>\r\n\r\n<p>A slice (P, Q) of array A is called arithmetic if the sequence:<br/>\r\n    A[P], A[p + 1], ..., A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 < Q.</p>\r\n\r\n<p>The function should return the number of arithmetic slices in the array A. </p>\r\n<br/>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nA = [1, 2, 3, 4]\r\n\r\nreturn: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.\r\n</pre>",
        "questionDescriptionZh": "<p>\u5982\u679c\u4e00\u4e2a\u6570\u5217\u81f3\u5c11\u6709\u4e09\u4e2a\u5143\u7d20\uff0c\u5e76\u4e14\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u4e4b\u5dee\u76f8\u540c\uff0c\u5219\u79f0\u8be5\u6570\u5217\u4e3a\u7b49\u5dee\u6570\u5217\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u4ee5\u4e0b\u6570\u5217\u4e3a\u7b49\u5dee\u6570\u5217:</p>\n\n<pre>\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9</pre>\n\n<p>\u4ee5\u4e0b\u6570\u5217\u4e0d\u662f\u7b49\u5dee\u6570\u5217\u3002</p>\n\n<pre>\n1, 1, 2, 5, 7</pre>\n\n<p>&nbsp;</p>\n\n<p>\u6570\u7ec4 A \u5305\u542b N \u4e2a\u6570\uff0c\u4e14\u7d22\u5f15\u4ece0\u5f00\u59cb\u3002\u6570\u7ec4 A \u7684\u4e00\u4e2a\u5b50\u6570\u7ec4\u5212\u5206\u4e3a\u6570\u7ec4 (P, Q)\uff0cP \u4e0e Q \u662f\u6574\u6570\u4e14\u6ee1\u8db3 0&lt;=P&lt;Q&lt;N \u3002</p>\n\n<p>\u5982\u679c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u5219\u79f0\u5b50\u6570\u7ec4(P, Q)\u4e3a\u7b49\u5dee\u6570\u7ec4\uff1a</p>\n\n<p>\u5143\u7d20 A[P], A[p + 1], ..., A[Q - 1], A[Q] \u662f\u7b49\u5dee\u7684\u3002\u5e76\u4e14&nbsp;P + 1 &lt; Q \u3002</p>\n\n<p>\u51fd\u6570\u8981\u8fd4\u56de\u6570\u7ec4 A \u4e2d\u6240\u6709\u4e3a\u7b49\u5dee\u6570\u7ec4\u7684\u5b50\u6570\u7ec4\u4e2a\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\nA = [1, 2, 3, 4]\n\n\u8fd4\u56de: 3, A \u4e2d\u6709\u4e09\u4e2a\u5b50\u7b49\u5dee\u6570\u7ec4: [1, 2, 3], [2, 3, 4] \u4ee5\u53ca\u81ea\u8eab [1, 2, 3, 4]\u3002\n</pre>\n",
        "titleZh": "\u7b49\u5dee\u6570\u5217\u5212\u5206",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Alibaba",
            "Baidu",
            "Aetion"
        ]
    },
    {
        "leetId": "414",
        "link": "third-maximum-number",
        "title": "Third Maximum Number",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "31.2%",
        "questionDescription": "<p>Given a <b>non-empty</b> array of integers, return the <b>third</b> maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [3, 2, 1]\r\n\r\n<b>Output:</b> 1\r\n\r\n<b>Explanation:</b> The third maximum is 1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [1, 2]\r\n\r\n<b>Output:</b> 2\r\n\r\n<b>Explanation:</b> The third maximum does not exist, so the maximum (2) is returned instead.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> [2, 2, 3, 1]\r\n\r\n<b>Output:</b> 1\r\n\r\n<b>Explanation:</b> Note that the third maximum here means the third maximum distinct number.\r\nBoth numbers with value 2 are both considered as second maximum.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6570\u7ec4\uff0c\u8fd4\u56de\u6b64\u6570\u7ec4\u4e2d\u7b2c\u4e09\u5927\u7684\u6570\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u6570\u7ec4\u4e2d\u6700\u5927\u7684\u6570\u3002\u8981\u6c42\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5fc5\u987b\u662fO(n)\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [3, 2, 1]\n\n<strong>\u8f93\u51fa:</strong> 1\n\n<strong>\u89e3\u91ca:</strong> \u7b2c\u4e09\u5927\u7684\u6570\u662f 1.\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1, 2]\n\n<strong>\u8f93\u51fa:</strong> 2\n\n<strong>\u89e3\u91ca:</strong> \u7b2c\u4e09\u5927\u7684\u6570\u4e0d\u5b58\u5728, \u6240\u4ee5\u8fd4\u56de\u6700\u5927\u7684\u6570 2 .\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [2, 2, 3, 1]\n\n<strong>\u8f93\u51fa:</strong> 1\n\n<strong>\u89e3\u91ca:</strong> \u6ce8\u610f\uff0c\u8981\u6c42\u8fd4\u56de\u7b2c\u4e09\u5927\u7684\u6570\uff0c\u662f\u6307\u7b2c\u4e09\u5927\u4e14\u552f\u4e00\u51fa\u73b0\u7684\u6570\u3002\n\u5b58\u5728\u4e24\u4e2a\u503c\u4e3a2\u7684\u6570\uff0c\u5b83\u4eec\u90fd\u6392\u7b2c\u4e8c\u3002\n</pre>\n",
        "titleZh": "\u7b2c\u4e09\u5927\u7684\u6570",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Goldman Sachs"
        ]
    },
    {
        "leetId": "415",
        "link": "add-strings",
        "title": "Add Strings",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "44.7%",
        "questionDescription": "<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as string, return the sum of <code>num1</code> and <code>num2</code>.</p>\r\n\r\n<p><b>Note:</b>\r\n<ol>\r\n<li>The length of both <code>num1</code> and <code>num2</code> is < 5100.</li>\r\n<li>Both <code>num1</code> and <code>num2</code> contains only digits <code>0-9</code>.</li>\r\n<li>Both <code>num1</code> and <code>num2</code> does not contain any leading zero.</li>\r\n<li>You <b>must not use any built-in BigInteger library</b> or <b>convert the inputs to integer</b> directly.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u975e\u8d1f\u6574\u6570&nbsp;<code>num1</code> \u548c<code>num2</code>&nbsp;\uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u548c\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li><code>num1</code> \u548c<code>num2</code>&nbsp;\u7684\u957f\u5ea6\u90fd\u5c0f\u4e8e 5100.</li>\n\t<li><code>num1</code> \u548c<code>num2</code> \u90fd\u53ea\u5305\u542b\u6570\u5b57&nbsp;<code>0-9</code>.</li>\n\t<li><code>num1</code> \u548c<code>num2</code> \u90fd\u4e0d\u5305\u542b\u4efb\u4f55\u524d\u5bfc\u96f6\u3002</li>\n\t<li><strong>\u4f60\u4e0d\u80fd\u4f7f\u7528\u4efb\u4f55\u5167\u5efa BigInteger \u5e93\uff0c&nbsp;\u4e5f\u4e0d\u80fd\u76f4\u63a5\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6574\u6570\u5f62\u5f0f\u3002</strong></li>\n</ol>\n",
        "titleZh": "\u5b57\u7b26\u4e32\u76f8\u52a0",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Adobe",
            "Apple",
            "Alibaba",
            "Airbnb",
            "Snapchat",
            "Zillow",
            "Nvidia",
            "Square"
        ]
    },
    {
        "leetId": "416",
        "link": "partition-equal-subset-sum",
        "title": "Partition Equal Subset Sum",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "39.4%",
        "questionDescription": "<p>Given a <b>non-empty</b> array containing <b>only positive integers</b>, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>Each of the array element will not exceed 100.</li>\r\n\t<li>The array size will not exceed 200.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nInput: [1, 5, 11, 5]\r\n\r\nOutput: true\r\n\r\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\nInput: [1, 2, 3, 5]\r\n\r\nOutput: false\r\n\r\nExplanation: The array cannot be partitioned into equal sum subsets.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u53ea\u5305\u542b\u6b63\u6574\u6570</strong>\u7684<strong>\u975e\u7a7a</strong>\u6570\u7ec4\u3002\u662f\u5426\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u4e24\u4e2a\u5b50\u96c6\uff0c\u4f7f\u5f97\u4e24\u4e2a\u5b50\u96c6\u7684\u5143\u7d20\u548c\u76f8\u7b49\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u6bcf\u4e2a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e0d\u4f1a\u8d85\u8fc7 100</li>\n\t<li>\u6570\u7ec4\u7684\u5927\u5c0f\u4e0d\u4f1a\u8d85\u8fc7 200</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\u8f93\u5165: [1, 5, 11, 5]\n\n\u8f93\u51fa: true\n\n\u89e3\u91ca: \u6570\u7ec4\u53ef\u4ee5\u5206\u5272\u6210 [1, 5, 5] \u548c [11].\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\u8f93\u5165: [1, 2, 3, 5]\n\n\u8f93\u51fa: false\n\n\u89e3\u91ca: \u6570\u7ec4\u4e0d\u80fd\u5206\u5272\u6210\u4e24\u4e2a\u5143\u7d20\u548c\u76f8\u7b49\u7684\u5b50\u96c6.\n</pre>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u5206\u5272\u7b49\u548c\u5b50\u96c6",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "eBay",
            "Paypal"
        ]
    },
    {
        "leetId": "417",
        "link": "pacific-atlantic-water-flow",
        "title": "Pacific Atlantic Water Flow",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "37.9%",
        "questionDescription": "<p>Given an <code>m x n</code> matrix of non-negative integers representing the height of each unit cell in a continent, the \"Pacific ocean\" touches the left and top edges of the matrix and the \"Atlantic ocean\" touches the right and bottom edges.</p>\r\n\r\n<p>Water can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.</p>\r\n\r\n<p>Find the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ol>\r\n<li>The order of returned grid coordinates does not matter.</li>\r\n<li>Both <i>m</i> and <i>n</i> are less than 150.</li>\r\n</ol>\r\n</p>\r\n<p><b>Example:</b>\r\n<pre>\r\nGiven the following 5x5 matrix:\r\n\r\n  Pacific ~   ~   ~   ~   ~ \r\n       ~  1   2   2   3  (5) *\r\n       ~  3   2   3  (4) (4) *\r\n       ~  2   4  (5)  3   1  *\r\n       ~ (6) (7)  1   4   5  *\r\n       ~ (5)  1   1   2   4  *\r\n          *   *   *   *   * Atlantic\r\n\r\nReturn:\r\n\r\n[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a <code>m x n</code> \u7684\u975e\u8d1f\u6574\u6570\u77e9\u9635\u6765\u8868\u793a\u4e00\u7247\u5927\u9646\u4e0a\u5404\u4e2a\u5355\u5143\u683c\u7684\u9ad8\u5ea6\u3002&ldquo;\u592a\u5e73\u6d0b&rdquo;\u5904\u4e8e\u5927\u9646\u7684\u5de6\u8fb9\u754c\u548c\u4e0a\u8fb9\u754c\uff0c\u800c&ldquo;\u5927\u897f\u6d0b&rdquo;\u5904\u4e8e\u5927\u9646\u7684\u53f3\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u3002</p>\n\n<p>\u89c4\u5b9a\u6c34\u6d41\u53ea\u80fd\u6309\u7167\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u56db\u4e2a\u65b9\u5411\u6d41\u52a8\uff0c\u4e14\u53ea\u80fd\u4ece\u9ad8\u5230\u4f4e\u6216\u8005\u5728\u540c\u7b49\u9ad8\u5ea6\u4e0a\u6d41\u52a8\u3002</p>\n\n<p>\u8bf7\u627e\u51fa\u90a3\u4e9b\u6c34\u6d41\u65e2\u53ef\u4ee5\u6d41\u52a8\u5230&ldquo;\u592a\u5e73\u6d0b&rdquo;\uff0c\u53c8\u80fd\u6d41\u52a8\u5230&ldquo;\u5927\u897f\u6d0b&rdquo;\u7684\u9646\u5730\u5355\u5143\u7684\u5750\u6807\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u8f93\u51fa\u5750\u6807\u7684\u987a\u5e8f\u4e0d\u91cd\u8981</li>\n\t<li><em>m</em> \u548c <em>n</em> \u90fd\u5c0f\u4e8e150</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p>&nbsp;</p>\n\n<pre>\n\u7ed9\u5b9a\u4e0b\u9762\u7684 5x5 \u77e9\u9635:\n\n  \u592a\u5e73\u6d0b ~   ~   ~   ~   ~ \n       ~  1   2   2   3  (5) *\n       ~  3   2   3  (4) (4) *\n       ~  2   4  (5)  3   1  *\n       ~ (6) (7)  1   4   5  *\n       ~ (5)  1   1   2   4  *\n          *   *   *   *   * \u5927\u897f\u6d0b\n\n\u8fd4\u56de:\n\n[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (\u4e0a\u56fe\u4e2d\u5e26\u62ec\u53f7\u7684\u5355\u5143).\n</pre>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u592a\u5e73\u6d0b\u5927\u897f\u6d0b\u6c34\u6d41\u95ee\u9898",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Uber",
            "Goldman Sachs",
            "Oracle",
            "Expedia"
        ]
    },
    {
        "leetId": "418",
        "link": "sentence-screen-fitting",
        "title": "Sentence Screen Fitting",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "32",
        "questionDescription": "\n<p>Given a <code>rows x cols</code> screen and a sentence represented by a list of <b>non-empty</b> words, find <b>how many times</b> the given sentence can be fitted on the screen.\n</p>\n<p><b>Note:</b>\n</p><ol>\n<li>A word cannot be split into two lines.</li>\n<li>The order of words in the sentence must remain unchanged.</li>\n<li>Two consecutive words <b>in a line</b> must be separated by a single space.</li>\n<li>Total words in the sentence won't exceed 100.</li>\n<li>Length of each word is greater than 0 and won't exceed 10.</li>\n<li>1 \u2264 rows, cols \u2264 20,000.</li>\n</ol>\n<p></p>\n<p>\n<b>Example 1:</b>\n</p><pre><b>Input:</b>\nrows = 2, cols = 8, sentence = [\"hello\", \"world\"]\n\n<b>Output:</b> \n1\n\n<b>Explanation:</b>\nhello---\nworld---\n\nThe character '-' signifies an empty space on the screen.\n</pre>\n<p></p>\n<p>\n<b>Example 2:</b>\n</p><pre><b>Input:</b>\nrows = 3, cols = 6, sentence = [\"a\", \"bcd\", \"e\"]\n\n<b>Output:</b> \n2\n\n<b>Explanation:</b>\na-bcd- \ne-a---\nbcd-e-\n\nThe character '-' signifies an empty space on the screen.\n</pre>\n<p></p>\n<p>\n<b>Example 3:</b>\n</p><pre><b>Input:</b>\nrows = 4, cols = 5, sentence = [\"I\", \"had\", \"apple\", \"pie\"]\n\n<b>Output:</b> \n1\n\n<b>Explanation:</b>\nI-had\napple\npie-I\nhad--\n\nThe character '-' signifies an empty space on the screen.\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a <code>rows x cols</code> screen and a sentence represented by a list of <b>non-empty</b> words, find <b>how many times</b> the given sentence can be fitted on the screen.\n</p>\n<p><b>Note:</b>\n</p><ol>\n<li>A word cannot be split into two lines.</li>\n<li>The order of words in the sentence must remain unchanged.</li>\n<li>Two consecutive words <b>in a line</b> must be separated by a single space.</li>\n<li>Total words in the sentence won't exceed 100.</li>\n<li>Length of each word is greater than 0 and won't exceed 10.</li>\n<li>1 \u2264 rows, cols \u2264 20,000.</li>\n</ol>\n<p></p>\n<p>\n<b>Example 1:</b>\n</p><pre><b>Input:</b>\nrows = 2, cols = 8, sentence = [\"hello\", \"world\"]\n\n<b>Output:</b> \n1\n\n<b>Explanation:</b>\nhello---\nworld---\n\nThe character '-' signifies an empty space on the screen.\n</pre>\n<p></p>\n<p>\n<b>Example 2:</b>\n</p><pre><b>Input:</b>\nrows = 3, cols = 6, sentence = [\"a\", \"bcd\", \"e\"]\n\n<b>Output:</b> \n2\n\n<b>Explanation:</b>\na-bcd- \ne-a---\nbcd-e-\n\nThe character '-' signifies an empty space on the screen.\n</pre>\n<p></p>\n<p>\n<b>Example 3:</b>\n</p><pre><b>Input:</b>\nrows = 4, cols = 5, sentence = [\"I\", \"had\", \"apple\", \"pie\"]\n\n<b>Output:</b> \n1\n\n<b>Explanation:</b>\nI-had\napple\npie-I\nhad--\n\nThe character '-' signifies an empty space on the screen.\n</pre>\n<p></p>\n",
        "companies": [
            "Google",
            "Uber",
            "Yelp"
        ]
    },
    {
        "leetId": "419",
        "link": "battleships-in-a-board",
        "title": "Battleships in a Board",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "63.3%",
        "questionDescription": "Given an 2D board, count how many battleships are in it. The battleships are represented with <code>'X'</code>s, empty slots are represented with <code>'.'</code>s. You may assume the following rules:\r\n\r\n<ul>\r\n<li>You receive a valid board, made of only battleships or empty slots.</li>\r\n<li>Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape <code>1xN</code> (1 row, N columns) or <code>Nx1</code> (N rows, 1 column), where N can be of any size.</li>\r\n<li>At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.</li>\r\n</ul>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>X..X\r\n...X\r\n...X\r\n</pre>\r\nIn the above board there are 2 battleships.\r\n\r\n<p><b>Invalid Example:</b><br />\r\n<pre>...X\r\nXXXX\r\n...X\r\n</pre>\r\nThis is an invalid board that you will not receive - as battleships will always have a cell separating between them.\r\n<p></p>\r\n<p><b>Follow up:</b><br>Could you do it in <b>one-pass</b>, using only <b>O(1) extra memory</b> and <b>without modifying</b> the value of the board?</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7684\u7532\u677f\uff0c \u8bf7\u8ba1\u7b97\u5176\u4e2d\u6709\u591a\u5c11\u8258\u6218\u8230\u3002&nbsp;\u6218\u8230\u7528&nbsp;<code>&#39;X&#39;</code>\u8868\u793a\uff0c\u7a7a\u4f4d\u7528&nbsp;<code>&#39;.&#39;</code>\u8868\u793a\u3002&nbsp;\u4f60\u9700\u8981\u9075\u5b88\u4ee5\u4e0b\u89c4\u5219\uff1a</p>\n\n<ul>\n\t<li>\u7ed9\u4f60\u4e00\u4e2a\u6709\u6548\u7684\u7532\u677f\uff0c\u4ec5\u7531\u6218\u8230\u6216\u8005\u7a7a\u4f4d\u7ec4\u6210\u3002</li>\n\t<li>\u6218\u8230\u53ea\u80fd\u6c34\u5e73\u6216\u8005\u5782\u76f4\u653e\u7f6e\u3002\u6362\u53e5\u8bdd\u8bf4,\u6218\u8230\u53ea\u80fd\u7531&nbsp;<code>1xN</code> (1 \u884c, N \u5217)\u7ec4\u6210\uff0c\u6216\u8005&nbsp;<code>Nx1</code> (N \u884c, 1 \u5217)\u7ec4\u6210\uff0c\u5176\u4e2dN\u53ef\u4ee5\u662f\u4efb\u610f\u5927\u5c0f\u3002</li>\n\t<li>\u4e24\u8258\u6218\u8230\u4e4b\u95f4\u81f3\u5c11\u6709\u4e00\u4e2a\u6c34\u5e73\u6216\u5782\u76f4\u7684\u7a7a\u4f4d\u5206\u9694&nbsp;- \u5373\u6ca1\u6709\u76f8\u90bb\u7684\u6218\u8230\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre>\nX..X\n...X\n...X\n</pre>\n\n<p>\u5728\u4e0a\u9762\u7684\u7532\u677f\u4e2d\u67092\u8258\u6218\u8230\u3002</p>\n\n<p><strong>\u65e0\u6548\u6837\u4f8b :</strong></p>\n\n<pre>\n...X\nXXXX\n...X\n</pre>\n\n<p>\u4f60\u4e0d\u4f1a\u6536\u5230\u8fd9\u6837\u7684\u65e0\u6548\u7532\u677f&nbsp;- \u56e0\u4e3a\u6218\u8230\u4e4b\u95f4\u81f3\u5c11\u4f1a\u6709\u4e00\u4e2a\u7a7a\u4f4d\u5c06\u5b83\u4eec\u5206\u5f00\u3002</p>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<p>\u4f60\u53ef\u4ee5\u7528<strong>\u4e00\u6b21\u626b\u63cf\u7b97\u6cd5</strong>\uff0c\u53ea\u4f7f\u7528<strong>O(1)\u989d\u5916\u7a7a\u95f4\uff0c</strong>\u5e76\u4e14<strong>\u4e0d\u4fee\u6539</strong>\u7532\u677f\u7684\u503c\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f</p>\n",
        "titleZh": "\u7532\u677f\u4e0a\u7684\u6218\u8230",
        "tags": [],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Apple"
        ]
    },
    {
        "leetId": "420",
        "link": "strong-password-checker",
        "title": "Strong Password Checker",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "12.2%",
        "questionDescription": "<p>A password is considered strong if below conditions are all met:</p>\r\n\r\n<ol>\r\n<li> It has at least 6 characters and at most 20 characters. </li>\r\n<li> It must contain at least one lowercase letter, at least one uppercase letter, and at least one digit. </li>\r\n<li> It must NOT contain three repeating characters in a row (\"...aaa...\" is weak, but \"...aa...a...\" is strong, assuming other conditions are met). </li>\r\n</ol>\r\n\r\n<p>Write a function strongPasswordChecker(s), that takes a string s as input, and return the <b>MINIMUM</b> change required to make s a strong password. If s is already strong, return 0.</p>\r\n\r\n<p>Insertion, deletion or replace of any one character are all considered as one change.</p>",
        "questionDescriptionZh": "<p>\u4e00\u4e2a\u5f3a\u5bc6\u7801\u5e94\u6ee1\u8db3\u4ee5\u4e0b\u6240\u6709\u6761\u4ef6\uff1a</p>\n\n<ol>\n\t<li>\u7531\u81f3\u5c116\u4e2a\uff0c\u81f3\u591a20\u4e2a\u5b57\u7b26\u7ec4\u6210\u3002</li>\n\t<li>\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u548c\u4e00\u4e2a\u6570\u5b57\u3002</li>\n\t<li>\u540c\u4e00\u5b57\u7b26<strong>\u4e0d\u80fd</strong>\u8fde\u7eed\u51fa\u73b0\u4e09\u6b21 (\u6bd4\u5982 &quot;...aaa...&quot; \u662f\u4e0d\u5141\u8bb8\u7684, \u4f46\u662f&nbsp;&quot;...aa...a...&quot; \u662f\u53ef\u4ee5\u7684)\u3002</li>\n</ol>\n\n<p>\u7f16\u5199\u51fd\u6570&nbsp;strongPasswordChecker(s)\uff0cs \u4ee3\u8868\u8f93\u5165\u5b57\u7b26\u4e32\uff0c\u5982\u679c s \u5df2\u7ecf\u7b26\u5408\u5f3a\u5bc6\u7801\u6761\u4ef6\uff0c\u5219\u8fd4\u56de0\uff1b\u5426\u5219\u8fd4\u56de\u8981\u5c06 s \u4fee\u6539\u4e3a\u6ee1\u8db3\u5f3a\u5bc6\u7801\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\u6240\u9700\u8981\u8fdb\u884c\u4fee\u6539\u7684<strong>\u6700\u5c0f</strong>\u6b65\u6570\u3002</p>\n\n<p>\u63d2\u5165\u3001\u5220\u9664\u3001\u66ff\u6362\u4efb\u4e00\u5b57\u7b26\u90fd\u7b97\u4f5c\u4e00\u6b21\u4fee\u6539\u3002</p>\n",
        "titleZh": "\u5f3a\u5bc6\u7801\u68c0\u9a8c\u5668",
        "tags": []
    },
    {
        "leetId": "421",
        "link": "maximum-xor-of-two-numbers-in-an-array",
        "title": "Maximum XOR of Two Numbers in an Array",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "53.3%",
        "questionDescription": "<p>Given a <b>non-empty</b> array of numbers, a<sub>0</sub>, a<sub>1</sub>, a<sub>2</sub>, &hellip; , a<sub>n-1</sub>, where 0 &le; a<sub>i</sub> &lt; 2<sup>31</sup>.</p>\r\n\r\n<p>Find the maximum result of a<sub>i</sub> XOR a<sub>j</sub>, where 0 &le; <i>i</i>, <i>j</i> &lt; <i>n</i>.</p>\r\n\r\n<p>Could you do this in O(<i>n</i>) runtime?</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [3, 10, 5, 25, 2, 8]\r\n\r\n<b>Output:</b> 28\r\n\r\n<b>Explanation:</b> The maximum result is <b>5</b> ^ <b>25</b> = 28.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u5143\u7d20\u4e3a a<sub>0</sub>, a<sub>1</sub>, a<sub>2</sub>, &hellip; , a<sub>n-1</sub>\uff0c\u5176\u4e2d 0 &le; a<sub>i</sub> &lt; 2<sup>31&nbsp;</sup>\u3002</p>\n\n<p>\u627e\u5230 a<sub>i</sub> \u548ca<sub>j&nbsp;</sub>\u6700\u5927\u7684\u5f02\u6216 (XOR) \u8fd0\u7b97\u7ed3\u679c\uff0c\u5176\u4e2d0 &le; <em>i</em>,&nbsp;&nbsp;<em>j</em> &lt; <em>n&nbsp;</em>\u3002</p>\n\n<p>\u4f60\u80fd\u5728O(<em>n</em>)\u7684\u65f6\u95f4\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [3, 10, 5, 25, 2, 8]\n\n<strong>\u8f93\u51fa:</strong> 28\n\n<strong>\u89e3\u91ca:</strong> \u6700\u5927\u7684\u7ed3\u679c\u662f <strong>5</strong> ^ <strong>25</strong> = 28.\n</pre>\n",
        "titleZh": "\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u7684\u6700\u5927\u5f02\u6216\u503c",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            },
            {
                "tag": "Trie",
                "link": "trie",
                "tagZh": "\u5b57\u5178\u6811"
            }
        ],
        "companies": [
            "Google",
            "Works Applications"
        ]
    },
    {
        "leetId": "422",
        "link": "valid-word-square",
        "title": "Valid Word Square",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "9",
        "questionDescription": "\n<p>Given a sequence of words, check whether it forms a valid word square.</p>\n<p>A sequence of words forms a valid word square if the <i>k</i><sup>th</sup> row and column read the exact same string, where 0 \u2264 <i>k</i> &lt; max(numRows, numColumns).</p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The number of words given is at least 1 and does not exceed 500.</li>\n<li>Word length will be at least 1 and does not exceed 500.</li>\n<li>Each word contains only lowercase English alphabet <code>a-z</code>.</li>\n</ol>\n<p></p>\n<p><b>Example 1:</b>\n</p><pre><b>Input:</b>\n[\n  \"abcd\",\n  \"bnrt\",\n  \"crmy\",\n  \"dtye\"\n]\n\n<b>Output:</b>\ntrue\n\n<b>Explanation:</b>\nThe first row and first column both read \"abcd\".\nThe second row and second column both read \"bnrt\".\nThe third row and third column both read \"crmy\".\nThe fourth row and fourth column both read \"dtye\".\n\nTherefore, it is a valid word square.\n</pre>\n<p></p>\n<p><b>Example 2:</b>\n</p><pre><b>Input:</b>\n[\n  \"abcd\",\n  \"bnrt\",\n  \"crm\",\n  \"dt\"\n]\n\n<b>Output:</b>\ntrue\n\n<b>Explanation:</b>\nThe first row and first column both read \"abcd\".\nThe second row and second column both read \"bnrt\".\nThe third row and third column both read \"crm\".\nThe fourth row and fourth column both read \"dt\".\n\nTherefore, it is a valid word square.\n</pre>\n<p></p>\n<p><b>Example 3:</b>\n</p><pre><b>Input:</b>\n[\n  \"ball\",\n  \"area\",\n  \"read\",\n  \"lady\"\n]\n\n<b>Output:</b>\nfalse\n\n<b>Explanation:</b>\nThe third row reads \"read\" while the third column reads \"lead\".\n\nTherefore, it is <b>NOT</b> a valid word square.\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a sequence of words, check whether it forms a valid word square.</p>\n<p>A sequence of words forms a valid word square if the <i>k</i><sup>th</sup> row and column read the exact same string, where 0 \u2264 <i>k</i> &lt; max(numRows, numColumns).</p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The number of words given is at least 1 and does not exceed 500.</li>\n<li>Word length will be at least 1 and does not exceed 500.</li>\n<li>Each word contains only lowercase English alphabet <code>a-z</code>.</li>\n</ol>\n<p></p>\n<p><b>Example 1:</b>\n</p><pre><b>Input:</b>\n[\n  \"abcd\",\n  \"bnrt\",\n  \"crmy\",\n  \"dtye\"\n]\n\n<b>Output:</b>\ntrue\n\n<b>Explanation:</b>\nThe first row and first column both read \"abcd\".\nThe second row and second column both read \"bnrt\".\nThe third row and third column both read \"crmy\".\nThe fourth row and fourth column both read \"dtye\".\n\nTherefore, it is a valid word square.\n</pre>\n<p></p>\n<p><b>Example 2:</b>\n</p><pre><b>Input:</b>\n[\n  \"abcd\",\n  \"bnrt\",\n  \"crm\",\n  \"dt\"\n]\n\n<b>Output:</b>\ntrue\n\n<b>Explanation:</b>\nThe first row and first column both read \"abcd\".\nThe second row and second column both read \"bnrt\".\nThe third row and third column both read \"crm\".\nThe fourth row and fourth column both read \"dt\".\n\nTherefore, it is a valid word square.\n</pre>\n<p></p>\n<p><b>Example 3:</b>\n</p><pre><b>Input:</b>\n[\n  \"ball\",\n  \"area\",\n  \"read\",\n  \"lady\"\n]\n\n<b>Output:</b>\nfalse\n\n<b>Explanation:</b>\nThe third row reads \"read\" while the third column reads \"lead\".\n\nTherefore, it is <b>NOT</b> a valid word square.\n</pre>\n<p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "423",
        "link": "reconstruct-original-digits-from-english",
        "title": "Reconstruct Original Digits from English",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "47.4%",
        "questionDescription": "<p>Given a <b>non-empty</b> string containing an out-of-order English representation of digits <code>0-9</code>, output the digits in ascending order.</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ol>\r\n<li>Input contains only lowercase English letters.</li>\r\n<li>Input is guaranteed to be valid and can be transformed to its original digits. That means invalid inputs such as \"abc\" or \"zerone\" are not permitted.</li>\r\n<li>Input length is less than 50,000.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\nInput: \"owoztneoer\"\r\n\r\nOutput: \"012\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\nInput: \"fviefuro\"\r\n\r\nOutput: \"45\"\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u975e\u7a7a</strong>\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u5b57\u6bcd\u987a\u5e8f\u6253\u4e71\u7684\u82f1\u6587\u5355\u8bcd\u8868\u793a\u7684\u6570\u5b57<code>0-9</code>\u3002\u6309\u5347\u5e8f\u8f93\u51fa\u539f\u59cb\u7684\u6570\u5b57\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002</li>\n\t<li>\u8f93\u5165\u4fdd\u8bc1\u5408\u6cd5\u5e76\u53ef\u4ee5\u8f6c\u6362\u4e3a\u539f\u59cb\u7684\u6570\u5b57\uff0c\u8fd9\u610f\u5473\u7740\u50cf &quot;abc&quot; \u6216 &quot;zerone&quot; \u7684\u8f93\u5165\u662f\u4e0d\u5141\u8bb8\u7684\u3002</li>\n\t<li>\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5c0f\u4e8e 50,000\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n\u8f93\u5165: &quot;owoztneoer&quot;\n\n\u8f93\u51fa: &quot;012&quot; (zeroonetwo)\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n\u8f93\u5165: &quot;fviefuro&quot;\n\n\u8f93\u51fa: &quot;45&quot; (fourfive)\n</pre>\n",
        "titleZh": "\u4ece\u82f1\u6587\u4e2d\u91cd\u5efa\u6570\u5b57",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ]
    },
    {
        "leetId": "424",
        "link": "longest-repeating-character-replacement",
        "title": "Longest Repeating Character Replacement",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "33.2%",
        "questionDescription": "<p>Given a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most <i>k</i> times. Find the length of a longest substring containing all repeating letters you can get after performing the above operations.</p>\r\n\r\n<p><b>Note:</b><br />\r\nBoth the string's length and <i>k</i> will not exceed 10<sup>4</sup>.\r\n</p>\r\n\r\n<p>\r\n<b>Example 1:</b>\r\n<pre>\r\n<b>Input:</b>\r\ns = \"ABAB\", k = 2\r\n\r\n<b>Output:</b>\r\n4\r\n\r\n<b>Explanation:</b>\r\nReplace the two 'A's with two 'B's or vice versa.\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Example 2:</b>\r\n<pre>\r\n<b>Input:</b>\r\ns = \"AABABBA\", k = 1\r\n\r\n<b>Output:</b>\r\n4\r\n\r\n<b>Explanation:</b>\r\nReplace the one 'A' in the middle with 'B' and form \"AABBBBA\".\r\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u4f60\u4e00\u4e2a\u4ec5\u7531\u5927\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u53ef\u4ee5\u5c06\u4efb\u610f\u4f4d\u7f6e\u4e0a\u7684\u5b57\u7b26\u66ff\u6362\u6210\u53e6\u5916\u7684\u5b57\u7b26\uff0c\u603b\u5171\u53ef\u6700\u591a\u66ff\u6362&nbsp;<em>k&nbsp;</em>\u6b21\u3002\u5728\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u540e\uff0c\u627e\u5230\u5305\u542b\u91cd\u590d\u5b57\u6bcd\u7684\u6700\u957f\u5b50\u4e32\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong><br>\n\u5b57\u7b26\u4e32\u957f\u5ea6 \u548c <em>k </em>\u4e0d\u4f1a\u8d85\u8fc7&nbsp;10<sup>4</sup>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;ABAB&quot;, k = 2\n\n<strong>\u8f93\u51fa:</strong>\n4\n\n<strong>\u89e3\u91ca:</strong>\n\u7528\u4e24\u4e2a&#39;A&#39;\u66ff\u6362\u4e3a\u4e24\u4e2a&#39;B&#39;,\u53cd\u4e4b\u4ea6\u7136\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\ns = &quot;AABABBA&quot;, k = 1\n\n<strong>\u8f93\u51fa:</strong>\n4\n\n<strong>\u89e3\u91ca:</strong>\n\u5c06\u4e2d\u95f4\u7684\u4e00\u4e2a&#39;A&#39;\u66ff\u6362\u4e3a&#39;B&#39;,\u5b57\u7b26\u4e32\u53d8\u4e3a &quot;AABBBBA&quot;\u3002\n\u5b50\u4e32 &quot;BBBB&quot; \u6709\u6700\u957f\u91cd\u590d\u5b57\u6bcd, \u7b54\u6848\u4e3a 4\u3002\n</pre>\n",
        "titleZh": "\u66ff\u6362\u540e\u7684\u6700\u957f\u91cd\u590d\u5b57\u7b26",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "Sliding Window",
                "link": "sliding-window",
                "tagZh": null
            }
        ],
        "companies": [
            "Google",
            "Microsoft",
            "Pocket Gems"
        ]
    },
    {
        "leetId": "425",
        "link": "word-squares",
        "title": "Word Squares",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "24",
        "questionDescription": "\n<p>Given a set of words <b>(without duplicates)</b>, find all <a href=\"https://en.wikipedia.org/wiki/Word_square\" target=\"_blank\">word squares</a> you can build from them.</p>\n<p>A sequence of words forms a valid word square if the <i>k</i><sup>th</sup> row and column read the exact same string, where 0 \u2264 <i>k</i> &lt; max(numRows, numColumns).</p>\n<p>For example, the word sequence <code>[\"ball\",\"area\",\"lead\",\"lady\"]</code> forms a word square because each word reads the same both horizontally and vertically.</p>\n<pre>b a l l\na r e a\nl e a d\nl a d y\n</pre>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>There are at least 1 and at most 1000 words.</li>\n<li>All words will have the exact same length.</li>\n<li>Word length is at least 1 and at most 5.</li>\n<li>Each word contains only lowercase English alphabet <code>a-z</code>.</li>\n</ol>\n<p></p>\n<p><b>Example 1:</b>\n</p><pre><b>Input:</b>\n[\"area\",\"lead\",\"wall\",\"lady\",\"ball\"]\n\n<b>Output:</b>\n[\n  [ \"wall\",\n    \"area\",\n    \"lead\",\n    \"lady\"\n  ],\n  [ \"ball\",\n    \"area\",\n    \"lead\",\n    \"lady\"\n  ]\n]\n\n<b>Explanation:</b>\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\n</pre>\n<p></p>\n<p><b>Example 2:</b>\n</p><pre><b>Input:</b>\n[\"abat\",\"baba\",\"atan\",\"atal\"]\n\n<b>Output:</b>\n[\n  [ \"baba\",\n    \"abat\",\n    \"baba\",\n    \"atan\"\n  ],\n  [ \"baba\",\n    \"abat\",\n    \"baba\",\n    \"atal\"\n  ]\n]\n\n<b>Explanation:</b>\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a set of words <b>(without duplicates)</b>, find all <a href=\"https://en.wikipedia.org/wiki/Word_square\" target=\"_blank\">word squares</a> you can build from them.</p>\n<p>A sequence of words forms a valid word square if the <i>k</i><sup>th</sup> row and column read the exact same string, where 0 \u2264 <i>k</i> &lt; max(numRows, numColumns).</p>\n<p>For example, the word sequence <code>[\"ball\",\"area\",\"lead\",\"lady\"]</code> forms a word square because each word reads the same both horizontally and vertically.</p>\n<pre>b a l l\na r e a\nl e a d\nl a d y\n</pre>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>There are at least 1 and at most 1000 words.</li>\n<li>All words will have the exact same length.</li>\n<li>Word length is at least 1 and at most 5.</li>\n<li>Each word contains only lowercase English alphabet <code>a-z</code>.</li>\n</ol>\n<p></p>\n<p><b>Example 1:</b>\n</p><pre><b>Input:</b>\n[\"area\",\"lead\",\"wall\",\"lady\",\"ball\"]\n\n<b>Output:</b>\n[\n  [ \"wall\",\n    \"area\",\n    \"lead\",\n    \"lady\"\n  ],\n  [ \"ball\",\n    \"area\",\n    \"lead\",\n    \"lady\"\n  ]\n]\n\n<b>Explanation:</b>\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\n</pre>\n<p></p>\n<p><b>Example 2:</b>\n</p><pre><b>Input:</b>\n[\"abat\",\"baba\",\"atan\",\"atal\"]\n\n<b>Output:</b>\n[\n  [ \"baba\",\n    \"abat\",\n    \"baba\",\n    \"atan\"\n  ],\n  [ \"baba\",\n    \"abat\",\n    \"baba\",\n    \"atal\"\n  ]\n]\n\n<b>Explanation:</b>\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\n</pre>\n<p></p>\n",
        "companies": [
            "Google",
            "Oracle"
        ]
    },
    {
        "leetId": "426",
        "link": "convert-binary-search-tree-to-sorted-doubly-linked-list",
        "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "31",
        "questionDescription": "\n<p>Convert a BST to a sorted circular doubly-linked list in-place. Think of the left and right pointers as synonymous to the previous and next pointers in a doubly-linked list.</p>\n<p>Let's take the following BST as an example, it may help you understand the problem better:</p>\n\u00a0\n\n<p><img height=\"30%\" src=\"/static/images/problemset/BSTDLLOriginalBST.png\" width=\"30%\"/></p>\n\u00a0\n\n<p>We want to transform this BST into a circular doubly linked list. Each node in a doubly linked list has a predecessor and successor. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.</p>\n<p>The figure below shows the circular doubly linked list for the BST above. The \"head\" symbol means the node it points to is the smallest element of the linked list.</p>\n\u00a0\n\n<p><img height=\"40%\" src=\"/static/images/problemset/BSTDLLReturnDLL.png\" width=\"40%\"/></p>\n\u00a0\n\n<p>Specifically, we want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. We should return the pointer to the first element of the linked list.</p>\n<p>The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.</p>\n\u00a0\n\n<p><img height=\"30%\" src=\"/static/images/problemset/BSTDLLReturnBST.png\" width=\"30%\"/></p>\n",
        "questionDescriptionZh": "\n<p>Convert a BST to a sorted circular doubly-linked list in-place. Think of the left and right pointers as synonymous to the previous and next pointers in a doubly-linked list.</p>\n<p>Let's take the following BST as an example, it may help you understand the problem better:</p>\n\u00a0\n\n<p><img height=\"30%\" src=\"/static/images/problemset/BSTDLLOriginalBST.png\" width=\"30%\"/></p>\n\u00a0\n\n<p>We want to transform this BST into a circular doubly linked list. Each node in a doubly linked list has a predecessor and successor. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.</p>\n<p>The figure below shows the circular doubly linked list for the BST above. The \"head\" symbol means the node it points to is the smallest element of the linked list.</p>\n\u00a0\n\n<p><img height=\"40%\" src=\"/static/images/problemset/BSTDLLReturnDLL.png\" width=\"40%\"/></p>\n\u00a0\n\n<p>Specifically, we want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. We should return the pointer to the first element of the linked list.</p>\n<p>The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.</p>\n\u00a0\n\n<p><img height=\"30%\" src=\"/static/images/problemset/BSTDLLReturnBST.png\" width=\"30%\"/></p>\n",
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Oracle"
        ]
    },
    {
        "leetId": "427",
        "link": "construct-quad-tree",
        "title": "Construct Quad Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "55.4%",
        "questionDescription": "<p>We want to use quad trees to store an <code>N x N</code> boolean grid. Each cell in the grid can only be true or false. The root node represents the whole grid. For each node, it will be subdivided into four children nodes <strong>until the values in the region it represents are all the same</strong>.</p>\r\n\r\n<p>Each node has another two boolean attributes : <code>isLeaf</code> and <code>val</code>. <code>isLeaf</code> is true if and only if the node is a leaf node. The <code>val</code> attribute for a leaf node contains the value of the region it represents.</p>\r\n\r\n<p>Your task is to use a quad tree to represent a given grid. The following example may help you understand the problem better:</p>\r\n\r\n<p>Given the <code>8 x 8</code> grid below, we want to construct the corresponding quad tree:</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_grid.png\" style=\"height:27%; max-height:300px; max-width:299px; width:27%\" /></p>\r\n\r\n<p>It can be divided according to the definition above:</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_grid_divided.png\" style=\"height:100%; max-height:300px; max-width:1107px; width:100%\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>The corresponding quad tree should be as following, where each node is represented as a <code>(isLeaf, val)</code> pair.</p>\r\n\r\n<p>For the non-leaf&nbsp;nodes,&nbsp;<code>val</code> can be arbitrary, so it is represented as <code>*</code>.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_quad_tree.png\" style=\"height:100%; max-height:300px; max-width:836px; width:100%\" /></p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>N</code> is less than <code>1000</code> and guaranteened to be a power of 2.</li>\r\n\t<li>If you want to know more about the quad tree, you can refer to its <a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u60f3\u8981\u4f7f\u7528\u4e00\u68f5\u56db\u53c9\u6811\u6765\u50a8\u5b58\u4e00\u4e2a&nbsp;<code>N x N</code> \u7684\u5e03\u5c14\u503c\u7f51\u7edc\u3002\u7f51\u7edc\u4e2d\u6bcf\u4e00\u683c\u7684\u503c\u53ea\u4f1a\u662f\u771f\u6216\u5047\u3002\u6811\u7684\u6839\u7ed3\u70b9\u4ee3\u8868\u6574\u4e2a\u7f51\u7edc\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9, \u5b83\u5c06\u88ab\u5206\u7b49\u6210\u56db\u4e2a\u5b69\u5b50\u7ed3\u70b9<strong>\u76f4\u5230\u8fd9\u4e2a\u533a\u57df\u5185\u7684\u503c\u90fd\u662f\u76f8\u540c\u7684.</strong></p>\n\n<p>\u6bcf\u4e2a\u7ed3\u70b9\u8fd8\u6709\u53e6\u5916\u4e24\u4e2a\u5e03\u5c14\u53d8\u91cf:&nbsp;<code>isLeaf</code> \u548c&nbsp;<code>val</code>\u3002<code>isLeaf</code> \u5f53\u8fd9\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u65f6\u4e3a\u771f\u3002<code>val</code>&nbsp;\u53d8\u91cf\u50a8\u5b58\u53f6\u5b50\u7ed3\u70b9\u6240\u4ee3\u8868\u7684\u533a\u57df\u7684\u503c\u3002</p>\n\n<p>\u4f60\u7684\u4efb\u52a1\u662f\u4f7f\u7528\u4e00\u4e2a\u56db\u53c9\u6811\u8868\u793a\u7ed9\u5b9a\u7684\u7f51\u7edc\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u5c06\u6709\u52a9\u4e8e\u4f60\u7406\u89e3\u8fd9\u4e2a\u95ee\u9898\uff1a</p>\n\n<p>\u7ed9\u5b9a\u4e0b\u9762\u8fd9\u4e2a<code>8 x 8</code>&nbsp;\u7f51\u7edc\uff0c\u6211\u4eec\u5c06\u8fd9\u6837\u5efa\u7acb\u4e00\u4e2a\u5bf9\u5e94\u7684\u56db\u53c9\u6811\uff1a</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_grid.png\" style=\"height:27%; width:27%\" /></p>\n\n<p>\u7531\u4e0a\u6587\u7684\u5b9a\u4e49\uff0c\u5b83\u80fd\u88ab\u8fd9\u6837\u5206\u5272\uff1a</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_grid_divided.png\" style=\"height:100%; width:100%\" /></p>\n\n<p>&nbsp;</p>\n\n<p>\u5bf9\u5e94\u7684\u56db\u53c9\u6811\u5e94\u8be5\u50cf\u4e0b\u9762\u8fd9\u6837\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u7531\u4e00\u5bf9&nbsp;<code>(isLeaf, val)</code>&nbsp;\u6240\u4ee3\u8868.</p>\n\n<p>\u5bf9\u4e8e\u975e\u53f6\u5b50\u7ed3\u70b9\uff0c<code>val</code>&nbsp;\u53ef\u4ee5\u662f\u4efb\u610f\u7684\uff0c\u6240\u4ee5\u4f7f\u7528&nbsp;<code>*</code>&nbsp;\u4ee3\u66ff\u3002</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/01/962_quad_tree.png\" style=\"height:100%; width:100%\" /></p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;\u5c06\u5c0f\u4e8e&nbsp;<code>1000</code>&nbsp;\u4e14\u786e\u4fdd\u662f 2 \u7684\u6574\u6b21\u5e42\u3002</li>\n\t<li>\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u56db\u53c9\u6811\u7684\u77e5\u8bc6\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>&nbsp;\u9875\u9762\u3002</li>\n</ol>\n",
        "titleZh": "\u5efa\u7acb\u56db\u53c9\u6811",
        "tags": [],
        "companies": [
            "Uber",
            "Apple"
        ]
    },
    {
        "leetId": "428",
        "link": "serialize-and-deserialize-n-ary-tree",
        "title": "Serialize and Deserialize N-ary Tree",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "32",
        "questionDescription": "\n<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n<p>Design an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n<p>For example, you may serialize the following <code>3-ary</code> tree</p>\n<p>\u00a0</p>\n<p><img src=\"/static/images/problemset/NaryTreeExample.png\" style=\"height:40%; width:40%\"/></p>\n<p>\u00a0</p>\n<p>\u00a0</p>\n<p>as <code>[1 [3[5 6] 2 4]]</code>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\n<p>\u00a0</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>N</code> is in the range of <code> [1, 1000]</code></li>\n<li>Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.</li>\n</ol>\n<p>\u00a0</p>\n",
        "questionDescriptionZh": "\n<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n<p>Design an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n<p>For example, you may serialize the following <code>3-ary</code> tree</p>\n<p>\u00a0</p>\n<p><img src=\"/static/images/problemset/NaryTreeExample.png\" style=\"height:40%; width:40%\"/></p>\n<p>\u00a0</p>\n<p>\u00a0</p>\n<p>as <code>[1 [3[5 6] 2 4]]</code>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\n<p>\u00a0</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>N</code> is in the range of <code> [1, 1000]</code></li>\n<li>Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.</li>\n</ol>\n<p>\u00a0</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "LinkedIn"
        ]
    },
    {
        "leetId": "429",
        "link": "n-ary-tree-level-order-traversal",
        "title": "N-ary Tree Level Order Traversal",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "60.4%",
        "questionDescription": "<p>Given an n-ary tree, return the level order traversal of its nodes&#39; values. (ie, from left to right, level by level).</p>\r\n\r\n<p>For example, given a <code>3-ary</code> tree:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>We should return its level order traversal:</p>\r\n\r\n<pre>\r\n[\r\n     [1],\r\n     [3,2,4],\r\n     [5,6]\r\n]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The depth of the tree is at most <code>1000</code>.</li>\r\n\t<li>The total number of nodes is at most <code>5000</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a N \u53c9\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684<em>\u5c42\u5e8f\u904d\u5386</em>\u3002 (\u5373\u4ece\u5de6\u5230\u53f3\uff0c\u9010\u5c42\u904d\u5386)\u3002</p>\r\n\r\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<code>3\u53c9\u6811</code>&nbsp;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>\u8fd4\u56de\u5176\u5c42\u5e8f\u904d\u5386:</p>\r\n\r\n<pre>[\r\n     [1],\r\n     [3,2,4],\r\n     [5,6]\r\n]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u8bf4\u660e:</strong></p>\r\n\r\n<ol>\r\n\t<li>\u6811\u7684\u6df1\u5ea6\u4e0d\u4f1a\u8d85\u8fc7&nbsp;<code>1000</code>\u3002</li>\r\n\t<li>\u6811\u7684\u8282\u70b9\u603b\u6570\u4e0d\u4f1a\u8d85\u8fc7&nbsp;<code>5000</code>\u3002</li>\r\n</ol>",
        "titleZh": "N\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "430",
        "link": "flatten-a-multilevel-doubly-linked-list",
        "title": "Flatten a Multilevel Doubly Linked List",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "39.5%",
        "questionDescription": "<p>You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.</p>\r\n\r\n<p>Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n 1---2---3---4---5---6--NULL\r\n         |\r\n         7---8---9---10--NULL\r\n             |\r\n             11--12--NULL\r\n\r\n<strong>Output:</strong>\r\n1-2-3-7-8-11-12-9-10-4-5-6-NULL\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Explanation for the above example:</strong></p>\r\n\r\n<p>Given the following multilevel doubly linked list:</p>\r\n\r\n<pre>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlist.png\" style=\"width: 640px;\" /></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>We should return the following flattened doubly linked list:</p>\r\n\r\n<pre>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlistflattened.png\" style=\"width: 1100px;\" /></pre>\r\n",
        "questionDescriptionZh": "<p>\u60a8\u5c06\u83b7\u5f97\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff0c\u9664\u4e86\u4e0b\u4e00\u4e2a\u548c\u524d\u4e00\u4e2a\u6307\u9488\u4e4b\u5916\uff0c\u5b83\u8fd8\u6709\u4e00\u4e2a\u5b50\u6307\u9488\uff0c\u53ef\u80fd\u6307\u5411\u5355\u72ec\u7684\u53cc\u5411\u94fe\u8868\u3002\u8fd9\u4e9b\u5b50\u5217\u8868\u53ef\u80fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u81ea\u5df1\u7684\u5b50\u9879\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u751f\u6210\u591a\u7ea7\u6570\u636e\u7ed3\u6784\uff0c\u5982\u4e0b\u9762\u7684\u793a\u4f8b\u6240\u793a\u3002</p>\n\n<p>\u6241\u5e73\u5316\u5217\u8868\uff0c\u4f7f\u6240\u6709\u7ed3\u70b9\u51fa\u73b0\u5728\u5355\u7ea7\u53cc\u94fe\u8868\u4e2d\u3002\u60a8\u5c06\u83b7\u5f97\u5217\u8868\u7b2c\u4e00\u7ea7\u7684\u5934\u90e8\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL\n\n<strong>\u8f93\u51fa:</strong>\n1-2-3-7-8-11-12-9-10-4-5-6-NULL\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u4ee5\u4e0a\u793a\u4f8b\u7684\u8bf4\u660e:</strong></p>\n\n<p>\u7ed9\u51fa\u4ee5\u4e0b\u591a\u7ea7\u53cc\u5411\u94fe\u8868:</p>\n\n<pre><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlist.png\" style=\"width: 640px;\"></pre>\n\n<p>&nbsp;</p>\n\n<p>\u6211\u4eec\u5e94\u8be5\u8fd4\u56de\u5982\u4e0b\u6240\u793a\u7684\u6241\u5e73\u53cc\u5411\u94fe\u8868:</p>\n\n<pre><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlistflattened.png\" style=\"width: 1100px;\"></pre>\n",
        "titleZh": "\u6241\u5e73\u5316\u591a\u7ea7\u53cc\u5411\u94fe\u8868",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Facebook",
            "Bloomberg",
            "Uber"
        ]
    },
    {
        "leetId": "431",
        "link": "encode-n-ary-tree-to-binary-tree",
        "title": "Encode N-ary Tree to Binary Tree",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "0",
        "questionDescription": "\n<p>Design an algorithm to encode an N-ary tree into a binary tree and decode the binary tree to get the original N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. Similarly, a binary tree is a rooted tree in which each node has no more than 2 children. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that an N-ary tree can be encoded to a binary tree and this binary tree can be decoded to the original N-nary tree structure.</p>\n<p>For example, you may encode the following <code>3-ary</code> tree to a binary tree in this way:</p>\n<p>\u00a0</p>\n<p><img src=\"/static/images/problemset/NaryTreeBinaryTreeExample.png\" style=\"height:50%; width:50%\"/></p>\n<p>\u00a0</p>\n<p>\u00a0</p>\n<p>Note that the above is just an example which <em>might or might not</em> work. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\n<p>\u00a0</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>N</code> is in the range of <code> [1, 1000]</code></li>\n<li>Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.</li>\n</ol>\n<p>\u00a0</p>\n",
        "questionDescriptionZh": "\n<p>Design an algorithm to encode an N-ary tree into a binary tree and decode the binary tree to get the original N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. Similarly, a binary tree is a rooted tree in which each node has no more than 2 children. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that an N-ary tree can be encoded to a binary tree and this binary tree can be decoded to the original N-nary tree structure.</p>\n<p>For example, you may encode the following <code>3-ary</code> tree to a binary tree in this way:</p>\n<p>\u00a0</p>\n<p><img src=\"/static/images/problemset/NaryTreeBinaryTreeExample.png\" style=\"height:50%; width:50%\"/></p>\n<p>\u00a0</p>\n<p>\u00a0</p>\n<p>Note that the above is just an example which <em>might or might not</em> work. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\n<p>\u00a0</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>N</code> is in the range of <code> [1, 1000]</code></li>\n<li>Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.</li>\n</ol>\n<p>\u00a0</p>\n"
    },
    {
        "leetId": "432",
        "link": "all-oone-data-structure",
        "title": "All O`one Data Structure",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "36.1%",
        "questionDescription": "<p>Implement a data structure supporting the following operations:</p>\r\n\r\n<p>\r\n<ol>\r\n<li>Inc(Key) - Inserts a new key <Key> with value 1. Or increments an existing key by 1. Key is guaranteed to be a <b>non-empty</b> string.</li>\r\n<li>Dec(Key) - If Key's value is 1, remove it from the data structure. Otherwise decrements an existing key by 1. If the key does not exist, this function does nothing. Key is guaranteed to be a <b>non-empty</b> string.</li>\r\n<li>GetMaxKey() - Returns one of the keys with maximal value. If no element exists, return an empty string <code>\"\"</code>.</li>\r\n<li>GetMinKey() - Returns one of the keys with minimal value. If no element exists, return an empty string <code>\"\"</code>.</li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\nChallenge: Perform all these in O(1) time complexity.\r\n</p>",
        "questionDescriptionZh": "<p>\u5b9e\u73b0\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p>\n\n<ol>\n\t<li>Inc(key) - \u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u503c\u4e3a 1 \u7684 key\u3002\u6216\u8005\u4f7f\u4e00\u4e2a\u5b58\u5728\u7684 key \u589e\u52a0\u4e00\uff0c\u4fdd\u8bc1 key \u4e0d\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002</li>\n\t<li>Dec(key) - \u5982\u679c\u8fd9\u4e2a key \u7684\u503c\u662f 1\uff0c\u90a3\u4e48\u628a\u4ed6\u4ece\u6570\u636e\u7ed3\u6784\u4e2d\u79fb\u9664\u6389\u3002\u5426\u8005\u4f7f\u4e00\u4e2a\u5b58\u5728\u7684 key \u503c\u51cf\u4e00\u3002\u5982\u679c\u8fd9\u4e2a key \u4e0d\u5b58\u5728\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e0d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002key \u4fdd\u8bc1\u4e0d\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002</li>\n\t<li>GetMaxKey() - \u8fd4\u56de key \u4e2d\u503c\u6700\u5927\u7684\u4efb\u610f\u4e00\u4e2a\u3002\u5982\u679c\u6ca1\u6709\u5143\u7d20\u5b58\u5728\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32<code>&quot;&quot;</code>\u3002</li>\n\t<li>GetMinKey() - \u8fd4\u56de key \u4e2d\u503c\u6700\u5c0f\u7684\u4efb\u610f\u4e00\u4e2a\u3002\u5982\u679c\u6ca1\u6709\u5143\u7d20\u5b58\u5728\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32<code>&quot;&quot;</code>\u3002</li>\n</ol>\n\n<p>\u6311\u6218\uff1a\u4ee5 O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b9e\u73b0\u6240\u6709\u64cd\u4f5c\u3002</p>\n",
        "titleZh": "\u5168 O(1) \u7684\u6570\u636e\u7ed3\u6784",
        "tags": [
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            }
        ],
        "companies": [
            "Facebook",
            "Microsoft",
            "Uber",
            "LinkedIn"
        ]
    },
    {
        "leetId": "433",
        "link": "minimum-genetic-mutation",
        "title": "Minimum Genetic Mutation",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "39.8%",
        "questionDescription": "<p>A gene string can be represented by an 8-character long string, with choices from <code>&quot;A&quot;</code>, <code>&quot;C&quot;</code>, <code>&quot;G&quot;</code>, <code>&quot;T&quot;</code>.</p>\r\n\r\n<p>Suppose we need to investigate about a mutation (mutation from &quot;start&quot; to &quot;end&quot;), where ONE mutation is defined as ONE single character changed in the gene string.</p>\r\n\r\n<p>For example, <code>&quot;AACCGGTT&quot;</code> -&gt; <code>&quot;AACCGGTA&quot;</code> is 1 mutation.</p>\r\n\r\n<p>Also, there is a given gene &quot;bank&quot;, which records all the valid gene mutations. A gene must be in the bank to make it a valid gene string.</p>\r\n\r\n<p>Now, given 3 things - start, end, bank, your task is to determine what is the minimum number of mutations needed to mutate from &quot;start&quot; to &quot;end&quot;. If there is no such a mutation, return -1.</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>Starting point is assumed to be valid, so it might not be included in the bank.</li>\r\n\t<li>If multiple mutations are needed, all mutations during in the sequence must be valid.</li>\r\n\t<li>You may assume start and end string is not the same.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nstart: &quot;AACCGGTT&quot;\r\nend:   &quot;AACCGGTA&quot;\r\nbank: [&quot;AACCGGTA&quot;]\r\n\r\nreturn: 1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\nstart: &quot;AACCGGTT&quot;\r\nend:   &quot;AAACGGTA&quot;\r\nbank: [&quot;AACCGGTA&quot;, &quot;AACCGCTA&quot;, &quot;AAACGGTA&quot;]\r\n\r\nreturn: 2\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\nstart: &quot;AAAAACCC&quot;\r\nend:   &quot;AACCCCCC&quot;\r\nbank: [&quot;AAAACCCC&quot;, &quot;AAACCCCC&quot;, &quot;AACCCCCC&quot;]\r\n\r\nreturn: 3\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u4e00\u6761\u57fa\u56e0\u5e8f\u5217\u7531\u4e00\u4e2a\u5e26\u67098\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u90fd\u5c5e\u4e8e <code>&quot;A&quot;</code>, <code>&quot;C&quot;</code>, <code>&quot;G&quot;</code>, <code>&quot;T&quot;</code>\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u3002</p>\n\n<p>\u5047\u8bbe\u6211\u4eec\u8981\u8c03\u67e5\u4e00\u4e2a\u57fa\u56e0\u5e8f\u5217\u7684\u53d8\u5316\u3002<strong>\u4e00\u6b21</strong>\u57fa\u56e0\u53d8\u5316\u610f\u5473\u7740\u8fd9\u4e2a\u57fa\u56e0\u5e8f\u5217\u4e2d\u7684<strong>\u4e00\u4e2a</strong>\u5b57\u7b26\u53d1\u751f\u4e86\u53d8\u5316\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u57fa\u56e0\u5e8f\u5217\u7531<code>&quot;AACCGGTT&quot;</code>&nbsp;\u53d8\u5316\u81f3&nbsp;<code>&quot;AACCGGTA&quot;&nbsp;</code>\u5373\u53d1\u751f\u4e86\u4e00\u6b21\u57fa\u56e0\u53d8\u5316\u3002</p>\n\n<p>\u4e0e\u6b64\u540c\u65f6\uff0c\u6bcf\u4e00\u6b21\u57fa\u56e0\u53d8\u5316\u7684\u7ed3\u679c\uff0c\u90fd\u9700\u8981\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u57fa\u56e0\u4e32\uff0c\u5373\u8be5\u7ed3\u679c\u5c5e\u4e8e\u4e00\u4e2a\u57fa\u56e0\u5e93\u3002</p>\n\n<p>\u73b0\u5728\u7ed9\u5b9a3\u4e2a\u53c2\u6570 &mdash; start, end, bank\uff0c\u5206\u522b\u4ee3\u8868\u8d77\u59cb\u57fa\u56e0\u5e8f\u5217\uff0c\u76ee\u6807\u57fa\u56e0\u5e8f\u5217\u53ca\u57fa\u56e0\u5e93\uff0c\u8bf7\u627e\u51fa\u80fd\u591f\u4f7f\u8d77\u59cb\u57fa\u56e0\u5e8f\u5217\u53d8\u5316\u4e3a\u76ee\u6807\u57fa\u56e0\u5e8f\u5217\u6240\u9700\u7684\u6700\u5c11\u53d8\u5316\u6b21\u6570\u3002\u5982\u679c\u65e0\u6cd5\u5b9e\u73b0\u76ee\u6807\u53d8\u5316\uff0c\u8bf7\u8fd4\u56de -1\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u8d77\u59cb\u57fa\u56e0\u5e8f\u5217\u9ed8\u8ba4\u662f\u5408\u6cd5\u7684\uff0c\u4f46\u662f\u5b83\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u51fa\u73b0\u5728\u57fa\u56e0\u5e93\u4e2d\u3002</li>\n\t<li>\u6240\u6709\u7684\u76ee\u6807\u57fa\u56e0\u5e8f\u5217\u5fc5\u987b\u662f\u5408\u6cd5\u7684\u3002</li>\n\t<li>\u5047\u5b9a\u8d77\u59cb\u57fa\u56e0\u5e8f\u5217\u4e0e\u76ee\u6807\u57fa\u56e0\u5e8f\u5217\u662f\u4e0d\u4e00\u6837\u7684\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\nstart: &quot;AACCGGTT&quot;\nend:   &quot;AACCGGTA&quot;\nbank: [&quot;AACCGGTA&quot;]\n\n\u8fd4\u56de\u503c: 1\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\nstart: &quot;AACCGGTT&quot;\nend:   &quot;AAACGGTA&quot;\nbank: [&quot;AACCGGTA&quot;, &quot;AACCGCTA&quot;, &quot;AAACGGTA&quot;]\n\n\u8fd4\u56de\u503c: 2\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\nstart: &quot;AAAAACCC&quot;\nend:   &quot;AACCCCCC&quot;\nbank: [&quot;AAAACCCC&quot;, &quot;AAACCCCC&quot;, &quot;AACCCCCC&quot;]\n\n\u8fd4\u56de\u503c: 3\n</pre>\n",
        "titleZh": "\u6700\u5c0f\u57fa\u56e0\u53d8\u5316",
        "tags": [],
        "companies": [
            "Google",
            "Amazon",
            "Twitter"
        ]
    },
    {
        "leetId": "434",
        "link": "number-of-segments-in-a-string",
        "title": "Number of Segments in a String",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "29.9%",
        "questionDescription": "<p>Count the number of segments in a string, where a segment is defined to be a contiguous sequence of non-space characters.</p>\r\n\r\n<p>Please note that the string does not contain any <b>non-printable</b> characters.</p>\r\n\r\n<p><b>Example:</b></p>\r\n<pre>\r\n<b>Input:</b> \"Hello, my name is John\"\r\n<b>Output:</b> 5\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7edf\u8ba1\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u4e2a\u6570\uff0c\u8fd9\u91cc\u7684\u5355\u8bcd\u6307\u7684\u662f\u8fde\u7eed\u7684\u4e0d\u662f\u7a7a\u683c\u7684\u5b57\u7b26\u3002</p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u4f60\u53ef\u4ee5\u5047\u5b9a\u5b57\u7b26\u4e32\u91cc\u4e0d\u5305\u62ec\u4efb\u4f55\u4e0d\u53ef\u6253\u5370\u7684\u5b57\u7b26\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;Hello, my name is John&quot;\n<strong>\u8f93\u51fa:</strong> 5\n</pre>\n",
        "titleZh": "\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u6570",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ]
    },
    {
        "leetId": "435",
        "link": "non-overlapping-intervals",
        "title": "Non-overlapping Intervals",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "41.1%",
        "questionDescription": "<p>\r\nGiven a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ol>\r\n<li>You may assume the interval's end point is always bigger than its start point.</li>\r\n<li>Intervals like [1,2] and [2,3] have borders \"touching\" but they don't overlap each other.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [ [1,2], [2,3], [3,4], [1,3] ]\r\n\r\n<b>Output:</b> 1\r\n\r\n<b>Explanation:</b> [1,3] can be removed and the rest of intervals are non-overlapping.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [ [1,2], [1,2], [1,2] ]\r\n\r\n<b>Output:</b> 2\r\n\r\n<b>Explanation:</b> You need to remove two [1,2] to make the rest of intervals non-overlapping.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> [ [1,2], [2,3] ]\r\n\r\n<b>Output:</b> 0\r\n\r\n<b>Explanation:</b> You don't need to remove any of the intervals since they're already non-overlapping.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u627e\u5230\u9700\u8981\u79fb\u9664\u533a\u95f4\u7684\u6700\u5c0f\u6570\u91cf\uff0c\u4f7f\u5269\u4f59\u533a\u95f4\u4e92\u4e0d\u91cd\u53e0\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u53ef\u4ee5\u8ba4\u4e3a\u533a\u95f4\u7684\u7ec8\u70b9\u603b\u662f\u5927\u4e8e\u5b83\u7684\u8d77\u70b9\u3002</li>\n\t<li>\u533a\u95f4 [1,2] \u548c [2,3] \u7684\u8fb9\u754c\u76f8\u4e92&ldquo;\u63a5\u89e6&rdquo;\uff0c\u4f46\u6ca1\u6709\u76f8\u4e92\u91cd\u53e0\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [ [1,2], [2,3], [3,4], [1,3] ]\n\n<strong>\u8f93\u51fa:</strong> 1\n\n<strong>\u89e3\u91ca:</strong> \u79fb\u9664 [1,3] \u540e\uff0c\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [ [1,2], [1,2], [1,2] ]\n\n<strong>\u8f93\u51fa:</strong> 2\n\n<strong>\u89e3\u91ca:</strong> \u4f60\u9700\u8981\u79fb\u9664\u4e24\u4e2a [1,2] \u6765\u4f7f\u5269\u4e0b\u7684\u533a\u95f4\u6ca1\u6709\u91cd\u53e0\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [ [1,2], [2,3] ]\n\n<strong>\u8f93\u51fa:</strong> 0\n\n<strong>\u89e3\u91ca:</strong> \u4f60\u4e0d\u9700\u8981\u79fb\u9664\u4efb\u4f55\u533a\u95f4\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u662f\u65e0\u91cd\u53e0\u7684\u4e86\u3002\n</pre>\n",
        "titleZh": "\u65e0\u91cd\u53e0\u533a\u95f4",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Apple"
        ]
    },
    {
        "leetId": "436",
        "link": "find-right-interval",
        "title": "Find Right Interval",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "38.7%",
        "questionDescription": "<p>\r\nGiven a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the interval i, which can be called that j is on the \"right\" of i.\r\n</p>\r\n\r\n<p>\r\nFor any interval i, you need to store the minimum interval j's index, which means that the interval j has the minimum start point to build the \"right\" relationship for interval i. If the interval j doesn't exist, store -1 for the interval i. Finally, you need output the stored value of each interval as an array.\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ol>\r\n<li>You may assume the interval's end point is always bigger than its start point.</li>\r\n<li>You may assume none of these intervals have the same start point.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [ [1,2] ]\r\n\r\n<b>Output:</b> [-1]\r\n\r\n<b>Explanation:</b> There is only one interval in the collection, so it outputs -1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [ [3,4], [2,3], [1,2] ]\r\n\r\n<b>Output:</b> [-1, 0, 1]\r\n\r\n<b>Explanation:</b> There is no satisfied \"right\" interval for [3,4].\r\nFor [2,3], the interval [3,4] has minimum-\"right\" start point;\r\nFor [1,2], the interval [2,3] has minimum-\"right\" start point.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> [ [1,4], [2,3], [3,4] ]\r\n\r\n<b>Output:</b> [-1, 2, -1]\r\n\r\n<b>Explanation:</b> There is no satisfied \"right\" interval for [1,4] and [3,4].\r\nFor [2,3], the interval [3,4] has minimum-\"right\" start point.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u7ec4\u533a\u95f4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4 i\uff0c\u68c0\u67e5\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u533a\u95f4 j\uff0c\u5b83\u7684\u8d77\u59cb\u70b9\u5927\u4e8e\u6216\u7b49\u4e8e\u533a\u95f4&nbsp;i \u7684\u7ec8\u70b9\uff0c\u8fd9\u53ef\u4ee5\u79f0\u4e3a j \u5728 i \u7684&ldquo;\u53f3\u4fa7&rdquo;\u3002</p>\n\n<p>\u5bf9\u4e8e\u4efb\u4f55\u533a\u95f4\uff0c\u4f60\u9700\u8981\u5b58\u50a8\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u533a\u95f4&nbsp;j \u7684\u6700\u5c0f\u7d22\u5f15\uff0c\u8fd9\u610f\u5473\u7740\u533a\u95f4 j \u6709\u6700\u5c0f\u7684\u8d77\u59cb\u70b9\u53ef\u4ee5\u4f7f\u5176\u6210\u4e3a&ldquo;\u53f3\u4fa7&rdquo;\u533a\u95f4\u3002\u5982\u679c\u533a\u95f4&nbsp;j \u4e0d\u5b58\u5728\uff0c\u5219\u5c06\u533a\u95f4 i \u5b58\u50a8\u4e3a -1\u3002\u6700\u540e\uff0c\u4f60\u9700\u8981\u8f93\u51fa\u4e00\u4e2a\u503c\u4e3a\u5b58\u50a8\u7684\u533a\u95f4\u503c\u7684\u6570\u7ec4\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u533a\u95f4\u7684\u7ec8\u70b9\u603b\u662f\u5927\u4e8e\u5b83\u7684\u8d77\u59cb\u70b9\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd9\u4e9b\u533a\u95f4\u90fd\u4e0d\u5177\u6709\u76f8\u540c\u7684\u8d77\u59cb\u70b9\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [ [1,2] ]\n<strong>\u8f93\u51fa:</strong> [-1]\n\n<strong>\u89e3\u91ca:</strong>\u96c6\u5408\u4e2d\u53ea\u6709\u4e00\u4e2a\u533a\u95f4\uff0c\u6240\u4ee5\u8f93\u51fa-1\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [ [3,4], [2,3], [1,2] ]\n<strong>\u8f93\u51fa:</strong> [-1, 0, 1]\n\n<strong>\u89e3\u91ca:</strong>\u5bf9\u4e8e[3,4]\uff0c\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684&ldquo;\u53f3\u4fa7&rdquo;\u533a\u95f4\u3002\n\u5bf9\u4e8e[2,3]\uff0c\u533a\u95f4[3,4]\u5177\u6709\u6700\u5c0f\u7684&ldquo;\u53f3&rdquo;\u8d77\u70b9;\n\u5bf9\u4e8e[1,2]\uff0c\u533a\u95f4[2,3]\u5177\u6709\u6700\u5c0f\u7684&ldquo;\u53f3&rdquo;\u8d77\u70b9\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [ [1,4], [2,3], [3,4] ]\n<strong>\u8f93\u51fa:</strong> [-1, 2, -1]\n\n<strong>\u89e3\u91ca:\u5bf9\u4e8e</strong>\u533a\u95f4[1,4]\u548c[3,4]\uff0c\u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u7684&ldquo;\u53f3\u4fa7&rdquo;\u533a\u95f4\u3002\n\u5bf9\u4e8e[2,3]\uff0c\u533a\u95f4[3,4]\u6709\u6700\u5c0f\u7684&ldquo;\u53f3&rdquo;\u8d77\u70b9\u3002\n</pre>\n",
        "titleZh": "\u5bfb\u627e\u53f3\u533a\u95f4",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ]
    },
    {
        "leetId": "437",
        "link": "path-sum-iii",
        "title": "Path Sum III",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "48.5%",
        "questionDescription": "<p>You are given a binary tree in which each node contains an integer value.</p>\r\n\r\n<p>Find the number of paths that sum to a given value.</p>\r\n\r\n<p>The path does not need to start or end at the root or a leaf, but it must go downwards\r\n(traveling only from parent nodes to child nodes).</p>\r\n\r\n<p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nroot = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\r\n\r\n      10\r\n     /  \\\r\n    <b>5</b>   <b>-3</b>\r\n   <b>/</b> <b>\\</b>    <b>\\</b>\r\n  <b>3</b>   <b>2</b>   <b>11</b>\r\n / \\   <b>\\</b>\r\n3  -2   <b>1</b>\r\n\r\nReturn 3. The paths that sum to 8 are:\r\n\r\n1.  5 -> 3\r\n2.  5 -> 2 -> 1\r\n3. -3 -> 11\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5b58\u653e\u7740\u4e00\u4e2a\u6574\u6570\u503c\u3002</p>\n\n<p>\u627e\u51fa\u8def\u5f84\u548c\u7b49\u4e8e\u7ed9\u5b9a\u6570\u503c\u7684\u8def\u5f84\u603b\u6570\u3002</p>\n\n<p>\u8def\u5f84\u4e0d\u9700\u8981\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4e5f\u4e0d\u9700\u8981\u5728\u53f6\u5b50\u8282\u70b9\u7ed3\u675f\uff0c\u4f46\u662f\u8def\u5f84\u65b9\u5411\u5fc5\u987b\u662f\u5411\u4e0b\u7684\uff08\u53ea\u80fd\u4ece\u7236\u8282\u70b9\u5230\u5b50\u8282\u70b9\uff09\u3002</p>\n\n<p>\u4e8c\u53c9\u6811\u4e0d\u8d85\u8fc71000\u4e2a\u8282\u70b9\uff0c\u4e14\u8282\u70b9\u6570\u503c\u8303\u56f4\u662f [-1000000,1000000] \u7684\u6574\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8\n\n      10\n     /  \\\n    <strong>5</strong>   <strong>-3</strong>\n   <strong>/</strong> <strong>\\</strong>    <strong>\\</strong>\n  <strong>3</strong>   <strong>2</strong>   <strong>11</strong>\n / \\   <strong>\\</strong>\n3  -2   <strong>1</strong>\n\n\u8fd4\u56de 3\u3002\u548c\u7b49\u4e8e 8 \u7684\u8def\u5f84\u6709:\n\n1.  5 -&gt; 3\n2.  5 -&gt; 2 -&gt; 1\n3.  -3 -&gt; 11\n</pre>\n",
        "titleZh": "\u8def\u5f84\u603b\u548c III",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Alibaba",
            "Quora"
        ]
    },
    {
        "leetId": "438",
        "link": "find-all-anagrams-in-a-string",
        "title": "Find All Anagrams in a String",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "36.7%",
        "questionDescription": "<p>Given a string <b>s</b> and a <b>non-empty</b> string <b>p</b>, find all the start indices of <b>p</b>'s anagrams in <b>s</b>.</p>\r\n\r\n<p>Strings consists of lowercase English letters only and the length of both strings <b>s</b> and <b>p</b> will not be larger than 20,100.</p>\r\n\r\n<p>The order of output does not matter.</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\n<b>Input:</b>\r\ns: \"cbaebabacd\" p: \"abc\"\r\n\r\n<b>Output:</b>\r\n[0, 6]\r\n\r\n<b>Explanation:</b>\r\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\r\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\n<b>Input:</b>\r\ns: \"abab\" p: \"ab\"\r\n\r\n<b>Output:</b>\r\n[0, 1, 2]\r\n\r\n<b>Explanation:</b>\r\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\r\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\r\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<strong>s&nbsp;</strong>\u548c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32&nbsp;<strong>p</strong>\uff0c\u627e\u5230&nbsp;<strong>s&nbsp;</strong>\u4e2d\u6240\u6709\u662f&nbsp;<strong>p&nbsp;</strong>\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u7684\u5b50\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e9b\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\u3002</p>\n\n<p>\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32&nbsp;<strong>s&nbsp;</strong>\u548c <strong>p&nbsp;</strong>\u7684\u957f\u5ea6\u90fd\u4e0d\u8d85\u8fc7 20100\u3002</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u6307\u5b57\u6bcd\u76f8\u540c\uff0c\u4f46\u6392\u5217\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002</li>\n\t<li>\u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\ns: &quot;cbaebabacd&quot; p: &quot;abc&quot;\n\n<strong>\u8f93\u51fa:</strong>\n[0, 6]\n\n<strong>\u89e3\u91ca:</strong>\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f &quot;cba&quot;, \u5b83\u662f &quot;abc&quot; \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 6 \u7684\u5b50\u4e32\u662f &quot;bac&quot;, \u5b83\u662f &quot;abc&quot; \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n</pre>\n\n<p><strong>&nbsp;\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\ns: &quot;abab&quot; p: &quot;ab&quot;\n\n<strong>\u8f93\u51fa:</strong>\n[0, 1, 2]\n\n<strong>\u89e3\u91ca:</strong>\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 0 \u7684\u5b50\u4e32\u662f &quot;ab&quot;, \u5b83\u662f &quot;ab&quot; \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 1 \u7684\u5b50\u4e32\u662f &quot;ba&quot;, \u5b83\u662f &quot;ab&quot; \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n\u8d77\u59cb\u7d22\u5f15\u7b49\u4e8e 2 \u7684\u5b50\u4e32\u662f &quot;ab&quot;, \u5b83\u662f &quot;ab&quot; \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\n</pre>\n",
        "titleZh": "\u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Oracle",
            "Zenefits",
            "Paypal",
            "Works Applications"
        ]
    },
    {
        "leetId": "439",
        "link": "ternary-expression-parser",
        "title": "Ternary Expression Parser",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n<p>Given a string representing arbitrarily nested ternary expressions, calculate the result of the expression. You can always assume that the given expression is valid and only consists of digits <code>0-9</code>, <code>?</code>, <code>:</code>, <code>T</code> and <code>F</code> (<code>T</code> and <code>F</code> represent True and False respectively).\n\n</p><p><b>Note:</b>\n</p><ol>\n<li>The length of the given string is \u2264 10000.</li>\n<li>Each number will contain only one digit.</li>\n<li>The conditional expressions group right-to-left (as usual in most languages).</li>\n<li>The condition will always be either <code>T</code> or <code>F</code>. That is, the condition will never be a digit.</li>\n<li>The result of the expression will always evaluate to either a digit <code>0-9</code>, <code>T</code> or <code>F</code>.</li>\n</ol>\n<p></p>\n<p>\n<b>Example 1:</b>\n</p><pre><b>Input:</b> \"T?2:3\"\n\n<b>Output:</b> \"2\"\n\n<b>Explanation:</b> If true, then result is 2; otherwise result is 3.\n</pre>\n<p></p>\n<p>\n<b>Example 2:</b>\n</p><pre><b>Input:</b> \"F?1:T?4:5\"\n\n<b>Output:</b> \"4\"\n\n<b>Explanation:</b> The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n\n             \"(F ? 1 : (T ? 4 : 5))\"                   \"(F ? 1 : (T ? 4 : 5))\"\n          -&gt; \"(F ? 1 : 4)\"                 or       -&gt; \"(T ? 4 : 5)\"\n          -&gt; \"4\"                                    -&gt; \"4\"\n</pre>\n<p></p>\n<p>\n<b>Example 3:</b>\n</p><pre><b>Input:</b> \"T?T?F:5:3\"\n\n<b>Output:</b> \"F\"\n\n<b>Explanation:</b> The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n\n             \"(T ? (T ? F : 5) : 3)\"                   \"(T ? (T ? F : 5) : 3)\"\n          -&gt; \"(T ? F : 3)\"                 or       -&gt; \"(T ? F : 5)\"\n          -&gt; \"F\"                                    -&gt; \"F\"\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a string representing arbitrarily nested ternary expressions, calculate the result of the expression. You can always assume that the given expression is valid and only consists of digits <code>0-9</code>, <code>?</code>, <code>:</code>, <code>T</code> and <code>F</code> (<code>T</code> and <code>F</code> represent True and False respectively).\n\n</p><p><b>Note:</b>\n</p><ol>\n<li>The length of the given string is \u2264 10000.</li>\n<li>Each number will contain only one digit.</li>\n<li>The conditional expressions group right-to-left (as usual in most languages).</li>\n<li>The condition will always be either <code>T</code> or <code>F</code>. That is, the condition will never be a digit.</li>\n<li>The result of the expression will always evaluate to either a digit <code>0-9</code>, <code>T</code> or <code>F</code>.</li>\n</ol>\n<p></p>\n<p>\n<b>Example 1:</b>\n</p><pre><b>Input:</b> \"T?2:3\"\n\n<b>Output:</b> \"2\"\n\n<b>Explanation:</b> If true, then result is 2; otherwise result is 3.\n</pre>\n<p></p>\n<p>\n<b>Example 2:</b>\n</p><pre><b>Input:</b> \"F?1:T?4:5\"\n\n<b>Output:</b> \"4\"\n\n<b>Explanation:</b> The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n\n             \"(F ? 1 : (T ? 4 : 5))\"                   \"(F ? 1 : (T ? 4 : 5))\"\n          -&gt; \"(F ? 1 : 4)\"                 or       -&gt; \"(T ? 4 : 5)\"\n          -&gt; \"4\"                                    -&gt; \"4\"\n</pre>\n<p></p>\n<p>\n<b>Example 3:</b>\n</p><pre><b>Input:</b> \"T?T?F:5:3\"\n\n<b>Output:</b> \"F\"\n\n<b>Explanation:</b> The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:\n\n             \"(T ? (T ? F : 5) : 3)\"                   \"(T ? (T ? F : 5) : 3)\"\n          -&gt; \"(T ? F : 3)\"                 or       -&gt; \"(T ? F : 5)\"\n          -&gt; \"F\"                                    -&gt; \"F\"\n</pre>\n<p></p>\n",
        "companies": [
            "Facebook",
            "Snapchat"
        ]
    },
    {
        "leetId": "440",
        "link": "k-th-smallest-in-lexicographical-order",
        "title": "K-th Smallest in Lexicographical Order",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "26.4%",
        "questionDescription": "<p>Given integers <code>n</code> and <code>k</code>, find the lexicographically k-th smallest integer in the range from <code>1</code> to <code>n</code>.</p>\r\n\r\n<p>Note: 1 &le; k &le; n &le; 10<sup>9</sup>.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b>\r\nn: 13   k: 2\r\n\r\n<b>Output:</b>\r\n10\r\n\r\n<b>Explanation:</b>\r\nThe lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\r\n</pre>\r\n</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u6574\u6570&nbsp;<code>n</code>&nbsp;\u548c&nbsp;<code>k</code>\uff0c\u627e\u5230&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>n</code>&nbsp;\u4e2d\u5b57\u5178\u5e8f\u7b2c&nbsp;<code>k</code>&nbsp;\u5c0f\u7684\u6570\u5b57\u3002</p>\n\n<p>\u6ce8\u610f\uff1a1 &le; k &le; n &le; 10<sup>9</sup>\u3002</p>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\nn: 13   k: 2\n\n<strong>\u8f93\u51fa:</strong>\n10\n\n<strong>\u89e3\u91ca:</strong>\n\u5b57\u5178\u5e8f\u7684\u6392\u5217\u662f [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]\uff0c\u6240\u4ee5\u7b2c\u4e8c\u5c0f\u7684\u6570\u5b57\u662f 10\u3002\n</pre>\n",
        "titleZh": "\u5b57\u5178\u5e8f\u7684\u7b2cK\u5c0f\u6570\u5b57",
        "tags": [],
        "companies": [
            "Facebook",
            "Hulu"
        ]
    },
    {
        "leetId": "441",
        "link": "arranging-coins",
        "title": "Arranging Coins",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "36.7%",
        "questionDescription": "<p>You have a total of <i>n</i> coins that you want to form in a staircase shape, where every <i>k</i>-th row must have exactly <i>k</i> coins.</p>\r\n \r\n<p>Given <i>n</i>, find the total number of <b>full</b> staircase rows that can be formed.</p>\r\n\r\n<p><i>n</i> is a non-negative integer and fits within the range of a 32-bit signed integer.</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\nn = 5\r\n\r\nThe coins can form the following rows:\r\n\u00a4\r\n\u00a4 \u00a4\r\n\u00a4 \u00a4\r\n\r\nBecause the 3rd row is incomplete, we return 2.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\nn = 8\r\n\r\nThe coins can form the following rows:\r\n\u00a4\r\n\u00a4 \u00a4\r\n\u00a4 \u00a4 \u00a4\r\n\u00a4 \u00a4\r\n\r\nBecause the 4th row is incomplete, we return 3.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u4f60\u603b\u5171\u6709&nbsp;<em>n&nbsp;</em>\u679a\u786c\u5e01\uff0c\u4f60\u9700\u8981\u5c06\u5b83\u4eec\u6446\u6210\u4e00\u4e2a\u9636\u68af\u5f62\u72b6\uff0c\u7b2c&nbsp;<em>k&nbsp;</em>\u884c\u5c31\u5fc5\u987b\u6b63\u597d\u6709&nbsp;<em>k&nbsp;</em>\u679a\u786c\u5e01\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57&nbsp;<em>n</em>\uff0c\u627e\u51fa\u53ef\u5f62\u6210\u5b8c\u6574\u9636\u68af\u884c\u7684\u603b\u884c\u6570\u3002</p>\n\n<p><em>n&nbsp;</em>\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u5e76\u4e14\u572832\u4f4d\u6709\u7b26\u53f7\u6574\u578b\u7684\u8303\u56f4\u5185\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\nn = 5\n\n\u786c\u5e01\u53ef\u6392\u5217\u6210\u4ee5\u4e0b\u51e0\u884c:\n&curren;\n&curren; &curren;\n&curren; &curren;\n\n\u56e0\u4e3a\u7b2c\u4e09\u884c\u4e0d\u5b8c\u6574\uff0c\u6240\u4ee5\u8fd4\u56de2.\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\nn = 8\n\n\u786c\u5e01\u53ef\u6392\u5217\u6210\u4ee5\u4e0b\u51e0\u884c:\n&curren;\n&curren; &curren;\n&curren; &curren; &curren;\n&curren; &curren;\n\n\u56e0\u4e3a\u7b2c\u56db\u884c\u4e0d\u5b8c\u6574\uff0c\u6240\u4ee5\u8fd4\u56de3.\n</pre>\n",
        "titleZh": "\u6392\u5217\u786c\u5e01",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Goldman Sachs",
            "GoDaddy"
        ]
    },
    {
        "leetId": "442",
        "link": "find-all-duplicates-in-an-array",
        "title": "Find All Duplicates in an Array",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "60.1%",
        "questionDescription": "<p>Given an array of integers, 1 &le; a[i] &le; <i>n</i> (<i>n</i> = size of array), some elements appear <b>twice</b> and others appear <b>once</b>.</p>\r\n\r\n<p>Find all the elements that appear <b>twice</b> in this array.</p>\r\n\r\n<p>Could you do it without extra space and in O(<i>n</i>) runtime?</p>\r\n</p>\r\n<p><b>Example:</b><br/>\r\n<pre>\r\n<b>Input:</b>\r\n[4,3,2,7,8,2,3,1]\r\n\r\n<b>Output:</b>\r\n[2,3]\r\n</pre>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 a\uff0c\u5176\u4e2d1 &le; a[i] &le; <em>n</em> \uff08<em>n</em>\u4e3a\u6570\u7ec4\u957f\u5ea6\uff09, \u5176\u4e2d\u6709\u4e9b\u5143\u7d20\u51fa\u73b0<strong>\u4e24\u6b21</strong>\u800c\u5176\u4ed6\u5143\u7d20\u51fa\u73b0<strong>\u4e00\u6b21</strong>\u3002</p>\n\n<p>\u627e\u5230\u6240\u6709\u51fa\u73b0<strong>\u4e24\u6b21</strong>\u7684\u5143\u7d20\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u4e0d\u7528\u5230\u4efb\u4f55\u989d\u5916\u7a7a\u95f4\u5e76\u5728O(<em>n</em>)\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n[4,3,2,7,8,2,3,1]\n\n<strong>\u8f93\u51fa:</strong>\n[2,3]\n</pre>\n",
        "titleZh": "\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u636e",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook",
            "Microsoft",
            "Baidu",
            "Pocket Gems",
            "Akuna Capital"
        ]
    },
    {
        "leetId": "443",
        "link": "string-compression",
        "title": "String Compression",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "33.5%",
        "questionDescription": "<p>Given an array of characters, compress it <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><b>in-place</b></a>.</p>\r\n\r\n<p>The length after compression must always be smaller than or equal to the original array.</p>\r\n\r\n<p>Every element of the array should be a <b>character</b> (not int) of length 1.</p>\r\n\r\n<p>After you are done <b>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></b>, return the new length of the array.</p>\r\n&nbsp;\r\n\r\n<p><b>Follow up:</b><br />\r\nCould you solve it using only O(1) extra space?</p>\r\n&nbsp;\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\n[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]\r\n\r\n<b>Output:</b>\r\nReturn 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]\r\n\r\n<b>Explanation:</b>\r\n&quot;aa&quot; is replaced by &quot;a2&quot;. &quot;bb&quot; is replaced by &quot;b2&quot;. &quot;ccc&quot; is replaced by &quot;c3&quot;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\n[&quot;a&quot;]\r\n\r\n<b>Output:</b>\r\nReturn 1, and the first 1 characters of the input array should be: [&quot;a&quot;]\r\n\r\n<b>Explanation:</b>\r\nNothing is replaced.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\n[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]\r\n\r\n<b>Output:</b>\r\nReturn 4, and the first 4 characters of the input array should be: [&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;].\r\n\r\n<b>Explanation:</b>\r\nSince the character &quot;a&quot; does not repeat, it is not compressed. &quot;bbbbbbbbbbbb&quot; is replaced by &quot;b12&quot;.\r\nNotice each digit has it&#39;s own entry in the array.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>All characters have an ASCII value in <code>[35, 126]</code>.</li>\r\n\t<li><code>1 &lt;= len(chars) &lt;= 1000</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u7ec4\u5b57\u7b26\uff0c\u4f7f\u7528<a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">\u539f\u5730\u7b97\u6cd5</a>\u5c06\u5176\u538b\u7f29\u3002</p>\n\n<p>\u538b\u7f29\u540e\u7684\u957f\u5ea6\u5fc5\u987b\u59cb\u7ec8\u5c0f\u4e8e\u6216\u7b49\u4e8e\u539f\u6570\u7ec4\u957f\u5ea6\u3002</p>\n\n<p>\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u5e94\u8be5\u662f\u957f\u5ea6\u4e3a1&nbsp;\u7684<strong>\u5b57\u7b26</strong>\uff08\u4e0d\u662f int \u6574\u6570\u7c7b\u578b\uff09\u3002</p>\n\n<p>\u5728\u5b8c\u6210<a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">\u539f\u5730</a><strong>\u4fee\u6539\u8f93\u5165\u6570\u7ec4</strong>\u540e\uff0c\u8fd4\u56de\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br />\n\u4f60\u80fd\u5426\u4ec5\u4f7f\u7528O(1) \u7a7a\u95f4\u89e3\u51b3\u95ee\u9898\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\n[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]\n\n<strong>\u8f93\u51fa\uff1a</strong>\n\u8fd4\u56de6\uff0c\u8f93\u5165\u6570\u7ec4\u7684\u524d6\u4e2a\u5b57\u7b26\u5e94\u8be5\u662f\uff1a[&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]\n\n<strong>\u8bf4\u660e\uff1a</strong>\n&quot;aa&quot;\u88ab&quot;a2&quot;\u66ff\u4ee3\u3002&quot;bb&quot;\u88ab&quot;b2&quot;\u66ff\u4ee3\u3002&quot;ccc&quot;\u88ab&quot;c3&quot;\u66ff\u4ee3\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\n[&quot;a&quot;]\n\n<strong>\u8f93\u51fa\uff1a</strong>\n\u8fd4\u56de1\uff0c\u8f93\u5165\u6570\u7ec4\u7684\u524d1\u4e2a\u5b57\u7b26\u5e94\u8be5\u662f\uff1a[&quot;a&quot;]\n\n<strong>\u8bf4\u660e\uff1a</strong>\n\u6ca1\u6709\u4efb\u4f55\u5b57\u7b26\u4e32\u88ab\u66ff\u4ee3\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\n[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]\n\n<strong>\u8f93\u51fa\uff1a</strong>\n\u8fd4\u56de4\uff0c\u8f93\u5165\u6570\u7ec4\u7684\u524d4\u4e2a\u5b57\u7b26\u5e94\u8be5\u662f\uff1a[&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;]\u3002\n\n<strong>\u8bf4\u660e\uff1a</strong>\n\u7531\u4e8e\u5b57\u7b26&quot;a&quot;\u4e0d\u91cd\u590d\uff0c\u6240\u4ee5\u4e0d\u4f1a\u88ab\u538b\u7f29\u3002&quot;bbbbbbbbbbbb&quot;\u88ab&ldquo;b12&rdquo;\u66ff\u4ee3\u3002\n\u6ce8\u610f\u6bcf\u4e2a\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u90fd\u6709\u5b83\u81ea\u5df1\u7684\u4f4d\u7f6e\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u6240\u6709\u5b57\u7b26\u90fd\u6709\u4e00\u4e2aASCII\u503c\u5728<code>[35, 126]</code>\u533a\u95f4\u5185\u3002</li>\n\t<li><code>1 &lt;= len(chars) &lt;= 1000</code>\u3002</li>\n</ol>\n",
        "titleZh": "\u538b\u7f29\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Snapchat",
            "Goldman Sachs",
            "Yelp",
            "Lyft",
            "Expedia",
            "Nutanix",
            "GoDaddy",
            "Citrix"
        ]
    },
    {
        "leetId": "444",
        "link": "sequence-reconstruction",
        "title": "Sequence Reconstruction",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "15",
        "questionDescription": "\n<p>Check whether the original sequence <code>org</code> can be uniquely reconstructed from the sequences in <code>seqs</code>. The <code>org</code> sequence is a permutation of the integers from 1 to n, with 1 \u2264 n \u2264 10<sup>4</sup>. Reconstruction means building a shortest common supersequence of the sequences in <code>seqs</code> (i.e., a shortest sequence so that all sequences in <code>seqs</code> are subsequences of it). Determine whether there is only one sequence that can be reconstructed from <code>seqs</code> and it is the <code>org</code> sequence.</p>\n<p><b>Example 1:</b>\n</p><pre><b>Input:</b>\norg: [1,2,3], seqs: [[1,2],[1,3]]\n\n<b>Output:</b>\nfalse\n\n<b>Explanation:</b>\n[1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.\n</pre>\n<p></p>\n<p><b>Example 2:</b>\n</p><pre><b>Input:</b>\norg: [1,2,3], seqs: [[1,2]]\n\n<b>Output:</b>\nfalse\n\n<b>Explanation:</b>\nThe reconstructed sequence can only be [1,2].\n</pre>\n<p></p>\n<p><b>Example 3:</b>\n</p><pre><b>Input:</b>\norg: [1,2,3], seqs: [[1,2],[1,3],[2,3]]\n\n<b>Output:</b>\ntrue\n\n<b>Explanation:</b>\nThe sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3].\n</pre>\n<p></p>\n<p><b>Example 4:</b>\n</p><pre><b>Input:</b>\norg: [4,1,5,2,6,3], seqs: [[5,2,6,3],[4,1,5,2]]\n\n<b>Output:</b>\ntrue\n</pre>\n<p></p>\n<p>\n<b><font color=\"red\">UPDATE (2017/1/8):</font></b><br/>\nThe <i>seqs</i> parameter had been changed to a list of list of strings (instead of a 2d array of strings). Please reload the code definition to get the latest changes.\n</p>\n",
        "questionDescriptionZh": "\n<p>Check whether the original sequence <code>org</code> can be uniquely reconstructed from the sequences in <code>seqs</code>. The <code>org</code> sequence is a permutation of the integers from 1 to n, with 1 \u2264 n \u2264 10<sup>4</sup>. Reconstruction means building a shortest common supersequence of the sequences in <code>seqs</code> (i.e., a shortest sequence so that all sequences in <code>seqs</code> are subsequences of it). Determine whether there is only one sequence that can be reconstructed from <code>seqs</code> and it is the <code>org</code> sequence.</p>\n<p><b>Example 1:</b>\n</p><pre><b>Input:</b>\norg: [1,2,3], seqs: [[1,2],[1,3]]\n\n<b>Output:</b>\nfalse\n\n<b>Explanation:</b>\n[1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.\n</pre>\n<p></p>\n<p><b>Example 2:</b>\n</p><pre><b>Input:</b>\norg: [1,2,3], seqs: [[1,2]]\n\n<b>Output:</b>\nfalse\n\n<b>Explanation:</b>\nThe reconstructed sequence can only be [1,2].\n</pre>\n<p></p>\n<p><b>Example 3:</b>\n</p><pre><b>Input:</b>\norg: [1,2,3], seqs: [[1,2],[1,3],[2,3]]\n\n<b>Output:</b>\ntrue\n\n<b>Explanation:</b>\nThe sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3].\n</pre>\n<p></p>\n<p><b>Example 4:</b>\n</p><pre><b>Input:</b>\norg: [4,1,5,2,6,3], seqs: [[5,2,6,3],[4,1,5,2]]\n\n<b>Output:</b>\ntrue\n</pre>\n<p></p>\n<p>\n<b><font color=\"red\">UPDATE (2017/1/8):</font></b><br/>\nThe <i>seqs</i> parameter had been changed to a list of list of strings (instead of a 2d array of strings). Please reload the code definition to get the latest changes.\n</p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "445",
        "link": "add-two-numbers-ii",
        "title": "Add Two Numbers II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "47.4%",
        "questionDescription": "<p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\r\n\r\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\r\n\r\n<p><b>Follow up:</b><br />\r\nWhat if you cannot modify the input lists? In other words, reversing the lists is not allowed.\r\n</p>\r\n\r\n<p>\r\n<b>Example:</b>\r\n<pre>\r\n<b>Input:</b> (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)\r\n<b>Output:</b> 7 -> 8 -> 0 -> 7\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a<strong>\u975e\u7a7a</strong>\u94fe\u8868\u6765\u4ee3\u8868\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u6570\u5b57\u6700\u9ad8\u4f4d\u4f4d\u4e8e\u94fe\u8868\u5f00\u59cb\u4f4d\u7f6e\u3002\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002\u5c06\u8fd9\u4e24\u6570\u76f8\u52a0\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002</p>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<p>\u5982\u679c\u8f93\u5165\u94fe\u8868\u4e0d\u80fd\u4fee\u6539\u8be5\u5982\u4f55\u5904\u7406\uff1f\u6362\u53e5\u8bdd\u8bf4\uff0c\u4f60\u4e0d\u80fd\u5bf9\u5217\u8868\u4e2d\u7684\u8282\u70b9\u8fdb\u884c\u7ffb\u8f6c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\n<strong>\u8f93\u51fa:</strong> 7 -&gt; 8 -&gt; 0 -&gt; 7\n</pre>\n",
        "titleZh": "\u4e24\u6570\u76f8\u52a0 II",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Works Applications"
        ]
    },
    {
        "leetId": "446",
        "link": "arithmetic-slices-ii-subsequence",
        "title": "Arithmetic Slices II - Subsequence",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "27.8%",
        "questionDescription": "<p>A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.</p>\r\n\r\n<p>For example, these are arithmetic sequences:</p>\r\n<pre>1, 3, 5, 7, 9\r\n7, 7, 7, 7\r\n3, -1, -5, -9</pre>\r\n\r\n<p>The following sequence is not arithmetic.</p> <pre>1, 1, 2, 5, 7</pre> \r\n<br/>\r\n\r\n<p>A zero-indexed array A consisting of N numbers is given. A <b>subsequence</b> slice of that array is any sequence of integers (P<sub>0</sub>, P<sub>1</sub>, ..., P<sub>k</sub>) such that 0 &le; P<sub>0</sub> < P<sub>1</sub> < ... < P<sub>k</sub> < N.</p>\r\n\r\n<p>A <b>subsequence</b> slice (P<sub>0</sub>, P<sub>1</sub>, ..., P<sub>k</sub>) of array A is called arithmetic if the sequence A[P<sub>0</sub>], A[P<sub>1</sub>], ..., A[P<sub>k-1</sub>], A[P<sub>k</sub>] is arithmetic. In particular, this means that k &ge; 2.</p>\r\n\r\n<p>The function should return the number of arithmetic subsequence slices in the array A. </p>\r\n\r\n<p>The input contains N integers. Every integer is in the range of -2<sup>31</sup> and 2<sup>31</sup>-1 and 0 &le; N &le; 1000. The output is guaranteed to be less than 2<sup>31</sup>-1.</p>\r\n<br/>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b> [2, 4, 6, 8, 10]\r\n\r\n<b>Output:</b> 7\r\n\r\n<b>Explanation:</b>\r\nAll arithmetic subsequence slices are:\r\n[2,4,6]\r\n[4,6,8]\r\n[6,8,10]\r\n[2,4,6,8]\r\n[4,6,8,10]\r\n[2,4,6,8,10]\r\n[2,6,10]\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u5982\u679c\u4e00\u4e2a\u6570\u5217\u81f3\u5c11\u6709\u4e09\u4e2a\u5143\u7d20\uff0c\u5e76\u4e14\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u4e4b\u5dee\u76f8\u540c\uff0c\u5219\u79f0\u8be5\u6570\u5217\u4e3a\u7b49\u5dee\u6570\u5217\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u4ee5\u4e0b\u6570\u5217\u4e3a\u7b49\u5dee\u6570\u5217:</p>\n\n<pre>1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9</pre>\n\n<p>\u4ee5\u4e0b\u6570\u5217\u4e0d\u662f\u7b49\u5dee\u6570\u5217\u3002</p>\n\n<pre>1, 1, 2, 5, 7</pre>\n\n<p>&nbsp;</p>\n\n<p>\u6570\u7ec4 A \u5305\u542b N \u4e2a\u6570\uff0c\u4e14\u7d22\u5f15\u4ece 0 \u5f00\u59cb\u3002\u8be5\u6570\u7ec4<strong>\u5b50\u5e8f\u5217</strong>\u5c06\u5212\u5206\u4e3a\u6574\u6570\u5e8f\u5217&nbsp;(P<sub>0</sub>, P<sub>1</sub>, ..., P<sub>k</sub>)\uff0cP \u4e0e Q \u662f\u6574\u6570\u4e14\u6ee1\u8db3 0 &le; P<sub>0</sub> &lt; P<sub>1</sub> &lt; ... &lt; P<sub>k</sub> &lt; N\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u5982\u679c\u5e8f\u5217 A[P<sub>0</sub>]\uff0cA[P<sub>1</sub>]\uff0c...\uff0cA[P<sub>k-1</sub>]\uff0cA[P<sub>k</sub>] \u662f\u7b49\u5dee\u7684\uff0c\u90a3\u4e48\u6570\u7ec4 A \u7684<strong>\u5b50\u5e8f\u5217</strong> (P0\uff0cP1\uff0c&hellip;\uff0cPK) \u79f0\u4e3a\u7b49\u5dee\u5e8f\u5217\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u610f\u5473\u7740 k &ge; 2\u3002</p>\n\n<p>\u51fd\u6570\u8981\u8fd4\u56de\u6570\u7ec4 A \u4e2d\u6240\u6709\u7b49\u5dee\u5b50\u5e8f\u5217\u7684\u4e2a\u6570\u3002</p>\n\n<p>\u8f93\u5165\u5305\u542b N \u4e2a\u6574\u6570\u3002\u6bcf\u4e2a\u6574\u6570\u90fd\u5728 -2<sup>31</sup> \u548c 2<sup>31</sup>-1 \u4e4b\u95f4\uff0c\u53e6\u5916 0 &le; N &le; 1000\u3002\u4fdd\u8bc1\u8f93\u51fa\u5c0f\u4e8e 2<sup>31</sup>-1\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p>&nbsp;</p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2, 4, 6, 8, 10]\n\n<strong>\u8f93\u51fa\uff1a</strong>7\n\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6240\u6709\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u4e3a\uff1a\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]\n</pre>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u7b49\u5dee\u6570\u5217\u5212\u5206 II - \u5b50\u5e8f\u5217",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Facebook",
            "Alibaba",
            "Baidu"
        ]
    },
    {
        "leetId": "447",
        "link": "number-of-boomerangs",
        "title": "Number of Boomerangs",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "53.8%",
        "questionDescription": "<p>Given <i>n</i> points in the plane that are all pairwise distinct, a \"boomerang\" is a tuple of points <code>(i, j, k)</code> such that the distance between <code>i</code> and <code>j</code> equals the distance between <code>i</code> and <code>k</code> (<b>the order of the tuple matters</b>).</p>\r\n\r\n<p>Find the number of boomerangs. You may assume that <i>n</i> will be at most <b>500</b> and coordinates of points are all in the range <b>[-10000, 10000]</b> (inclusive).</p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n[[0,0],[1,0],[2,0]]\r\n\r\n<b>Output:</b>\r\n2\r\n\r\n<b>Explanation:</b>\r\nThe two boomerangs are <b>[[1,0],[0,0],[2,0]]</b> and <b>[[1,0],[2,0],[0,0]]</b>\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u5e73\u9762\u4e0a<em>&nbsp;n </em>\u5bf9\u4e0d\u540c\u7684\u70b9\uff0c&ldquo;\u56de\u65cb\u9556&rdquo; \u662f\u7531\u70b9\u8868\u793a\u7684\u5143\u7ec4&nbsp;<code>(i, j, k)</code>&nbsp;\uff0c\u5176\u4e2d&nbsp;<code>i</code>&nbsp;\u548c&nbsp;<code>j</code>&nbsp;\u4e4b\u95f4\u7684\u8ddd\u79bb\u548c&nbsp;<code>i</code>&nbsp;\u548c&nbsp;<code>k</code>&nbsp;\u4e4b\u95f4\u7684\u8ddd\u79bb\u76f8\u7b49\uff08<strong>\u9700\u8981\u8003\u8651\u5143\u7ec4\u7684\u987a\u5e8f</strong>\uff09\u3002</p>\n\n<p>\u627e\u5230\u6240\u6709\u56de\u65cb\u9556\u7684\u6570\u91cf\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe<em>&nbsp;n </em>\u6700\u5927\u4e3a <strong>500</strong>\uff0c\u6240\u6709\u70b9\u7684\u5750\u6807\u5728\u95ed\u533a\u95f4<strong> [-10000, 10000] </strong>\u4e2d\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n[[0,0],[1,0],[2,0]]\n\n<strong>\u8f93\u51fa:</strong>\n2\n\n<strong>\u89e3\u91ca:</strong>\n\u4e24\u4e2a\u56de\u65cb\u9556\u4e3a <strong>[[1,0],[0,0],[2,0]]</strong> \u548c <strong>[[1,0],[2,0],[0,0]]</strong>\n</pre>\n",
        "titleZh": "\u56de\u65cb\u9556\u7684\u6570\u91cf",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook"
        ]
    },
    {
        "leetId": "448",
        "link": "find-all-numbers-disappeared-in-an-array",
        "title": "Find All Numbers Disappeared in an Array",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "47.6%",
        "questionDescription": "<p>Given an array of integers where 1 &le; a[i] &le; <i>n</i> (<i>n</i> = size of array), some elements appear twice and others appear once.</p>\r\n\r\n<p>Find all the elements of [1, <i>n</i>] inclusive that do not appear in this array.</p>\r\n\r\n<p>Could you do it without extra space and in O(<i>n</i>) runtime? You may assume the returned list does not count as extra space.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b>\r\n[4,3,2,7,8,2,3,1]\r\n\r\n<b>Output:</b>\r\n[5,6]\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u8303\u56f4\u5728&nbsp; 1 &le; a[i] &le; <em>n</em> (&nbsp;<em>n</em> = \u6570\u7ec4\u5927\u5c0f ) \u7684 \u6574\u578b\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e00\u4e9b\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u53e6\u4e00\u4e9b\u53ea\u51fa\u73b0\u4e00\u6b21\u3002</p>\n\n<p>\u627e\u5230\u6240\u6709\u5728 [1, <em>n</em>] \u8303\u56f4\u4e4b\u95f4\u6ca1\u6709\u51fa\u73b0\u5728\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u3002</p>\n\n<p>\u60a8\u80fd\u5728\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<em>O(n)</em>\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u5417? \u4f60\u53ef\u4ee5\u5047\u5b9a\u8fd4\u56de\u7684\u6570\u7ec4\u4e0d\u7b97\u5728\u989d\u5916\u7a7a\u95f4\u5185\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n[4,3,2,7,8,2,3,1]\n\n<strong>\u8f93\u51fa:</strong>\n[5,6]\n</pre>\n",
        "titleZh": "\u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Adobe",
            "Apple"
        ]
    },
    {
        "leetId": "449",
        "link": "serialize-and-deserialize-bst",
        "title": "Serialize and Deserialize BST",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "48.8%",
        "questionDescription": "<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\r\n\r\n<p>Design an algorithm to serialize and deserialize a <b>binary search tree</b>. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\r\n\r\n<p><b>The encoded string should be as compact as possible.</b></p>\r\n\r\n<p><b>Note:</b> Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.</p>\r\n",
        "questionDescriptionZh": "<p>\u5e8f\u5217\u5316\u662f\u5c06\u6570\u636e\u7ed3\u6784\u6216\u5bf9\u8c61\u8f6c\u6362\u4e3a\u4e00\u7cfb\u5217\u4f4d\u7684\u8fc7\u7a0b\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u5b58\u50a8\u5728\u6587\u4ef6\u6216\u5185\u5b58\u7f13\u51b2\u533a\u4e2d\uff0c\u6216\u901a\u8fc7\u7f51\u7edc\u8fde\u63a5\u94fe\u8def\u4f20\u8f93\uff0c\u4ee5\u4fbf\u7a0d\u540e\u5728\u540c\u4e00\u4e2a\u6216\u53e6\u4e00\u4e2a\u8ba1\u7b97\u673a\u73af\u5883\u4e2d\u91cd\u5efa\u3002</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316<strong>\u4e8c\u53c9\u641c\u7d22\u6811</strong>\u3002 \u5bf9\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u7684\u5de5\u4f5c\u65b9\u5f0f\u6ca1\u6709\u9650\u5236\u3002 \u60a8\u53ea\u9700\u786e\u4fdd\u4e8c\u53c9\u641c\u7d22\u6811\u53ef\u4ee5\u5e8f\u5217\u5316\u4e3a\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u8be5\u5b57\u7b26\u4e32\u53cd\u5e8f\u5217\u5316\u4e3a\u6700\u521d\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p>\n\n<p><strong>\u7f16\u7801\u7684\u5b57\u7b26\u4e32\u5e94\u5c3d\u53ef\u80fd\u7d27\u51d1\u3002</strong></p>\n\n<p><strong>\u6ce8\u610f</strong>\uff1a\u4e0d\u8981\u4f7f\u7528\u7c7b\u6210\u5458/\u5168\u5c40/\u9759\u6001\u53d8\u91cf\u6765\u5b58\u50a8\u72b6\u6001\u3002 \u4f60\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7b97\u6cd5\u5e94\u8be5\u662f\u65e0\u72b6\u6001\u7684\u3002</p>\n",
        "titleZh": "\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u641c\u7d22\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "LinkedIn",
            "Yahoo",
            "eBay",
            "Zenefits",
            "Zillow",
            "Qualtrics"
        ]
    },
    {
        "leetId": "450",
        "link": "delete-node-in-a-bst",
        "title": "Delete Node in a BST",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "34.1%",
        "questionDescription": "<p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p>\r\n\r\n<p>Basically, the deletion can be divided into two stages:\r\n<ol>\r\n<li>Search for a node to remove.</li>\r\n<li>If the node is found, delete the node.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Note:</b> Time complexity should be O(height of tree).</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nroot = [5,3,6,2,4,null,7]\r\nkey = 3\r\n\r\n    5\r\n   / \\\r\n  3   6\r\n / \\   \\\r\n2   4   7\r\n\r\nGiven key to delete is 3. So we find the node with value 3 and delete it.\r\n\r\nOne valid answer is [5,4,6,2,null,null,7], shown in the following BST.\r\n\r\n    5\r\n   / \\\r\n  4   6\r\n /     \\\r\n2       7\r\n\r\nAnother valid answer is [5,2,6,null,4,null,7].\r\n\r\n    5\r\n   / \\\r\n  2   6\r\n   \\   \\\r\n    4   7\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9 <strong>root </strong>\u548c\u4e00\u4e2a\u503c <strong>key</strong>\uff0c\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684&nbsp;<strong>key&nbsp;</strong>\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u5e76\u4fdd\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u4e0d\u53d8\u3002\u8fd4\u56de\u4e8c\u53c9\u641c\u7d22\u6811\uff08\u6709\u53ef\u80fd\u88ab\u66f4\u65b0\uff09\u7684\u6839\u8282\u70b9\u7684\u5f15\u7528\u3002</p>\n\n<p>\u4e00\u822c\u6765\u8bf4\uff0c\u5220\u9664\u8282\u70b9\u53ef\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\uff1a</p>\n\n<ol>\n\t<li>\u9996\u5148\u627e\u5230\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\uff1b</li>\n\t<li>\u5982\u679c\u627e\u5230\u4e86\uff0c\u5220\u9664\u5b83\u3002</li>\n</ol>\n\n<p><strong>\u8bf4\u660e\uff1a</strong> \u8981\u6c42\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a&nbsp;O(h)\uff0ch \u4e3a\u6811\u7684\u9ad8\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\nroot = [5,3,6,2,4,null,7]\nkey = 3\n\n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\n\u7ed9\u5b9a\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\u503c\u662f 3\uff0c\u6240\u4ee5\u6211\u4eec\u9996\u5148\u627e\u5230 3 \u8fd9\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5220\u9664\u5b83\u3002\n\n\u4e00\u4e2a\u6b63\u786e\u7684\u7b54\u6848\u662f [5,4,6,2,null,null,7], \u5982\u4e0b\u56fe\u6240\u793a\u3002\n\n    5\n   / \\\n  4   6\n /     \\\n2       7\n\n\u53e6\u4e00\u4e2a\u6b63\u786e\u7b54\u6848\u662f [5,2,6,null,4,null,7]\u3002\n\n    5\n   / \\\n  2   6\n   \\   \\\n    4   7\n</pre>\n",
        "titleZh": "\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Oracle"
        ]
    },
    {
        "leetId": "451",
        "link": "sort-characters-by-frequency",
        "title": "Sort Characters By Frequency",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "57.3%",
        "questionDescription": "<p>Given a string, sort it in decreasing order based on the frequency of characters.</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\n<b>Input:</b>\r\n\"tree\"\r\n\r\n<b>Output:</b>\r\n\"eert\"\r\n\r\n<b>Explanation:</b>\r\n'e' appears twice while 'r' and 't' both appear once.\r\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\n<b>Input:</b>\r\n\"cccaaa\"\r\n\r\n<b>Output:</b>\r\n\"cccaaa\"\r\n\r\n<b>Explanation:</b>\r\nBoth 'c' and 'a' appear three times, so \"aaaccc\" is also a valid answer.\r\nNote that \"cacaca\" is incorrect, as the same characters must be together.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b>\r\n<pre>\r\n<b>Input:</b>\r\n\"Aabb\"\r\n\r\n<b>Output:</b>\r\n\"bbAa\"\r\n\r\n<b>Explanation:</b>\r\n\"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\r\nNote that 'A' and 'a' are treated as two different characters.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u5c06\u5b57\u7b26\u4e32\u91cc\u7684\u5b57\u7b26\u6309\u7167\u51fa\u73b0\u7684\u9891\u7387\u964d\u5e8f\u6392\u5217\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n&quot;tree&quot;\n\n<strong>\u8f93\u51fa:</strong>\n&quot;eert&quot;\n\n<strong>\u89e3\u91ca:\n</strong>&#39;e&#39;\u51fa\u73b0\u4e24\u6b21\uff0c&#39;r&#39;\u548c&#39;t&#39;\u90fd\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\n\u56e0\u6b64&#39;e&#39;\u5fc5\u987b\u51fa\u73b0\u5728&#39;r&#39;\u548c&#39;t&#39;\u4e4b\u524d\u3002\u6b64\u5916\uff0c&quot;eetr&quot;\u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684\u7b54\u6848\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n&quot;cccaaa&quot;\n\n<strong>\u8f93\u51fa:</strong>\n&quot;cccaaa&quot;\n\n<strong>\u89e3\u91ca:\n</strong>&#39;c&#39;\u548c&#39;a&#39;\u90fd\u51fa\u73b0\u4e09\u6b21\u3002\u6b64\u5916\uff0c&quot;aaaccc&quot;\u4e5f\u662f\u6709\u6548\u7684\u7b54\u6848\u3002\n\u6ce8\u610f&quot;cacaca&quot;\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u56e0\u4e3a\u76f8\u540c\u7684\u5b57\u6bcd\u5fc5\u987b\u653e\u5728\u4e00\u8d77\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n&quot;Aabb&quot;\n\n<strong>\u8f93\u51fa:</strong>\n&quot;bbAa&quot;\n\n<strong>\u89e3\u91ca:\n</strong>\u6b64\u5916\uff0c&quot;bbaA&quot;\u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684\u7b54\u6848\uff0c\u4f46&quot;Aabb&quot;\u662f\u4e0d\u6b63\u786e\u7684\u3002\n\u6ce8\u610f&#39;A&#39;\u548c&#39;a&#39;\u88ab\u8ba4\u4e3a\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u5b57\u7b26\u3002\n</pre>\n",
        "titleZh": "\u6839\u636e\u5b57\u7b26\u51fa\u73b0\u9891\u7387\u6392\u5e8f",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "LinkedIn",
            "Yahoo",
            "Expedia"
        ]
    },
    {
        "leetId": "452",
        "link": "minimum-number-of-arrows-to-burst-balloons",
        "title": "Minimum Number of Arrows to Burst Balloons",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "44.0%",
        "questionDescription": "<p>There are a number of spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it's horizontal, y-coordinates don't matter and hence the x-coordinates of start and end of the diameter suffice. Start is always smaller than end. There will be at most 10<sup>4</sup> balloons.</p>\r\n\r\n<p>An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with x<sub>start</sub> and x<sub>end</sub> bursts by an arrow shot at x if x<sub>start</sub> &le; x &le; x<sub>end</sub>. There is no limit to the number of arrows that can be shot. An arrow once shot keeps travelling up infinitely. The problem is to find the minimum number of arrows that must be shot to burst all balloons. </p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b>\r\n[[10,16], [2,8], [1,6], [7,12]]\r\n\r\n<b>Output:</b>\r\n2\r\n\r\n<b>Explanation:</b>\r\nOne way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u6709\u8bb8\u591a\u7403\u5f62\u7684\u6c14\u7403\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6c14\u7403\uff0c\u63d0\u4f9b\u7684\u8f93\u5165\u662f\u6c34\u5e73\u65b9\u5411\u4e0a\uff0c\u6c14\u7403\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u3002\u7531\u4e8e\u5b83\u662f\u6c34\u5e73\u7684\uff0c\u6240\u4ee5y\u5750\u6807\u5e76\u4e0d\u91cd\u8981\uff0c\u56e0\u6b64\u53ea\u8981\u77e5\u9053\u5f00\u59cb\u548c\u7ed3\u675f\u7684x\u5750\u6807\u5c31\u8db3\u591f\u4e86\u3002\u5f00\u59cb\u5750\u6807\u603b\u662f\u5c0f\u4e8e\u7ed3\u675f\u5750\u6807\u3002\u5e73\u9762\u5185\u6700\u591a\u5b58\u572810<sup>4</sup>\u4e2a\u6c14\u7403\u3002</p>\n\n<p>\u4e00\u652f\u5f13\u7bad\u53ef\u4ee5\u6cbf\u7740x\u8f74\u4ece\u4e0d\u540c\u70b9\u5b8c\u5168\u5782\u76f4\u5730\u5c04\u51fa\u3002\u5728\u5750\u6807x\u5904\u5c04\u51fa\u4e00\u652f\u7bad\uff0c\u82e5\u6709\u4e00\u4e2a\u6c14\u7403\u7684\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u4e3a x<sub>start\uff0c</sub>x<sub>end\uff0c</sub> \u4e14\u6ee1\u8db3 &nbsp;x<sub>start</sub>&nbsp;&le; x &le; x<sub>end\uff0c</sub>\u5219\u8be5\u6c14\u7403\u4f1a\u88ab\u5f15\u7206<sub>\u3002</sub>\u53ef\u4ee5\u5c04\u51fa\u7684\u5f13\u7bad\u7684\u6570\u91cf\u6ca1\u6709\u9650\u5236\u3002 \u5f13\u7bad\u4e00\u65e6\u88ab\u5c04\u51fa\u4e4b\u540e\uff0c\u53ef\u4ee5\u65e0\u9650\u5730\u524d\u8fdb\u3002\u6211\u4eec\u60f3\u627e\u5230\u4f7f\u5f97\u6240\u6709\u6c14\u7403\u5168\u90e8\u88ab\u5f15\u7206\uff0c\u6240\u9700\u7684\u5f13\u7bad\u7684\u6700\u5c0f\u6570\u91cf\u3002</p>\n\n<p><strong>Example:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n[[10,16], [2,8], [1,6], [7,12]]\n\n<strong>\u8f93\u51fa:</strong>\n2\n\n<strong>\u89e3\u91ca:</strong>\n\u5bf9\u4e8e\u8be5\u6837\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728x = 6\uff08\u5c04\u7206[2,8],[1,6]\u4e24\u4e2a\u6c14\u7403\uff09\u548c x = 11\uff08\u5c04\u7206\u53e6\u5916\u4e24\u4e2a\u6c14\u7403\uff09\u3002\n</pre>\n",
        "titleZh": "\u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft"
        ]
    },
    {
        "leetId": "453",
        "link": "minimum-moves-to-equal-array-elements",
        "title": "Minimum Moves to Equal Array Elements",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "49.9%",
        "questionDescription": "<p>Given a <b>non-empty</b> integer array of size <i>n</i>, find the minimum number of moves required to make all array elements equal, where a move is incrementing <i>n</i> - 1 elements by 1.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b>\r\n[1,2,3]\r\n\r\n<b>Output:</b>\r\n3\r\n\r\n<b>Explanation:</b>\r\nOnly three moves are needed (remember each move increments two elements):\r\n\r\n[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a <em>n</em> \u7684<strong>\u975e\u7a7a</strong>\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u8ba9\u6570\u7ec4\u6240\u6709\u5143\u7d20\u76f8\u7b49\u7684\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u3002\u6bcf\u6b21\u79fb\u52a8\u53ef\u4ee5\u4f7f <em>n</em> - 1 \u4e2a\u5143\u7d20\u589e\u52a0 1\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n[1,2,3]\n\n<strong>\u8f93\u51fa:</strong>\n3\n\n<strong>\u89e3\u91ca:</strong>\n\u53ea\u9700\u89813\u6b21\u79fb\u52a8\uff08\u6ce8\u610f\u6bcf\u6b21\u79fb\u52a8\u4f1a\u589e\u52a0\u4e24\u4e2a\u5143\u7d20\u7684\u503c\uff09\uff1a\n\n[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]\n</pre>\n",
        "titleZh": "\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u4f7f\u6570\u7ec4\u5143\u7d20\u76f8\u7b49",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Twitter",
            "Pocket Gems",
            "Indeed",
            "Coursera"
        ]
    },
    {
        "leetId": "454",
        "link": "4sum-ii",
        "title": "4Sum II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "50.4%",
        "questionDescription": "<p>Given four lists A, B, C, D of integer values, compute how many tuples <code>(i, j, k, l)</code> there are such that <code>A[i] + B[j] + C[k] + D[l]</code> is zero.</p>\r\n\r\n<p>To make problem a bit easier, all A, B, C, D have same length of N where 0 &le; N &le; 500. All integers are in the range of -2<sup>28</sup> to 2<sup>28</sup> - 1 and the result is guaranteed to be at most 2<sup>31</sup> - 1.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\nA = [ 1, 2]\r\nB = [-2,-1]\r\nC = [-1, 2]\r\nD = [ 0, 2]\r\n\r\n<b>Output:</b>\r\n2\r\n\r\n<b>Explanation:</b>\r\nThe two tuples are:\r\n1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\r\n2. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u56db\u4e2a\u5305\u542b\u6574\u6570\u7684\u6570\u7ec4\u5217\u8868&nbsp;A , B , C , D ,\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u5143\u7ec4 <code>(i, j, k, l)</code>&nbsp;\uff0c\u4f7f\u5f97&nbsp;<code>A[i] + B[j] + C[k] + D[l] = 0</code>\u3002</p>\n\n<p>\u4e3a\u4e86\u4f7f\u95ee\u9898\u7b80\u5355\u5316\uff0c\u6240\u6709\u7684 A, B, C, D \u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6&nbsp;N\uff0c\u4e14 0 &le; N &le; 500 \u3002\u6240\u6709\u6574\u6570\u7684\u8303\u56f4\u5728 -2<sup>28</sup> \u5230 2<sup>28</sup> - 1 \u4e4b\u95f4\uff0c\u6700\u7ec8\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc7&nbsp;2<sup>31</sup> - 1 \u3002</p>\n\n<p><strong>\u4f8b\u5982:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\nA = [ 1, 2]\nB = [-2,-1]\nC = [-1, 2]\nD = [ 0, 2]\n\n<strong>\u8f93\u51fa:</strong>\n2\n\n<strong>\u89e3\u91ca:</strong>\n\u4e24\u4e2a\u5143\u7ec4\u5982\u4e0b:\n1. (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\n</pre>\n",
        "titleZh": "\u56db\u6570\u76f8\u52a0 II",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "455",
        "link": "assign-cookies",
        "title": "Assign Cookies",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "48.6%",
        "questionDescription": "<p>\r\nAssume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor g<sub>i</sub>, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s<sub>j</sub>. If s<sub>j</sub> >= g<sub>i</sub>, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\nYou may assume the greed factor is always positive. <br />\r\nYou cannot assign more than one cookie to one child.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,2,3], [1,1]\r\n\r\n<b>Output:</b> 1\r\n\r\n<b>Explanation:</b> You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \r\nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\r\nYou need to output 1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,2], [1,2,3]\r\n\r\n<b>Output:</b> 2\r\n\r\n<b>Explanation:</b> You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \r\nYou have 3 cookies and their sizes are big enough to gratify all of the children, \r\nYou need to output 2.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u5047\u8bbe\u4f60\u662f\u4e00\u4f4d\u5f88\u68d2\u7684\u5bb6\u957f\uff0c\u60f3\u8981\u7ed9\u4f60\u7684\u5b69\u5b50\u4eec\u4e00\u4e9b\u5c0f\u997c\u5e72\u3002\u4f46\u662f\uff0c\u6bcf\u4e2a\u5b69\u5b50\u6700\u591a\u53ea\u80fd\u7ed9\u4e00\u5757\u997c\u5e72\u3002\u5bf9\u6bcf\u4e2a\u5b69\u5b50 i \uff0c\u90fd\u6709\u4e00\u4e2a\u80c3\u53e3\u503c&nbsp;g<sub>i \uff0c</sub>\u8fd9\u662f\u80fd\u8ba9\u5b69\u5b50\u4eec\u6ee1\u8db3\u80c3\u53e3\u7684\u997c\u5e72\u7684\u6700\u5c0f\u5c3a\u5bf8\uff1b\u5e76\u4e14\u6bcf\u5757\u997c\u5e72 j \uff0c\u90fd\u6709\u4e00\u4e2a\u5c3a\u5bf8 s<sub>j&nbsp;</sub>\u3002\u5982\u679c s<sub>j</sub> &gt;= g<sub>i&nbsp;</sub>\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u997c\u5e72 j \u5206\u914d\u7ed9\u5b69\u5b50 i \uff0c\u8fd9\u4e2a\u5b69\u5b50\u4f1a\u5f97\u5230\u6ee1\u8db3\u3002\u4f60\u7684\u76ee\u6807\u662f\u5c3d\u53ef\u80fd\u6ee1\u8db3\u8d8a\u591a\u6570\u91cf\u7684\u5b69\u5b50\uff0c\u5e76\u8f93\u51fa\u8fd9\u4e2a\u6700\u5927\u6570\u503c\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u80c3\u53e3\u503c\u4e3a\u6b63\u3002<br />\n\u4e00\u4e2a\u5c0f\u670b\u53cb\u6700\u591a\u53ea\u80fd\u62e5\u6709\u4e00\u5757\u997c\u5e72\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3], [1,1]\n\n<strong>\u8f93\u51fa:</strong> 1\n\n<strong>\u89e3\u91ca:</strong> \n\u4f60\u6709\u4e09\u4e2a\u5b69\u5b50\u548c\u4e24\u5757\u5c0f\u997c\u5e72\uff0c3\u4e2a\u5b69\u5b50\u7684\u80c3\u53e3\u503c\u5206\u522b\u662f\uff1a1,2,3\u3002\n\u867d\u7136\u4f60\u6709\u4e24\u5757\u5c0f\u997c\u5e72\uff0c\u7531\u4e8e\u4ed6\u4eec\u7684\u5c3a\u5bf8\u90fd\u662f1\uff0c\u4f60\u53ea\u80fd\u8ba9\u80c3\u53e3\u503c\u662f1\u7684\u5b69\u5b50\u6ee1\u8db3\u3002\n\u6240\u4ee5\u4f60\u5e94\u8be5\u8f93\u51fa1\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2], [1,2,3]\n\n<strong>\u8f93\u51fa:</strong> 2\n\n<strong>\u89e3\u91ca:</strong> \n\u4f60\u6709\u4e24\u4e2a\u5b69\u5b50\u548c\u4e09\u5757\u5c0f\u997c\u5e72\uff0c2\u4e2a\u5b69\u5b50\u7684\u80c3\u53e3\u503c\u5206\u522b\u662f1,2\u3002\n\u4f60\u62e5\u6709\u7684\u997c\u5e72\u6570\u91cf\u548c\u5c3a\u5bf8\u90fd\u8db3\u4ee5\u8ba9\u6240\u6709\u5b69\u5b50\u6ee1\u8db3\u3002\n\u6240\u4ee5\u4f60\u5e94\u8be5\u8f93\u51fa2.\n</pre>\n",
        "titleZh": "\u5206\u53d1\u997c\u5e72",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ]
    },
    {
        "leetId": "456",
        "link": "132-pattern",
        "title": "132 Pattern",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "21.9%",
        "questionDescription": "<p>\r\nGiven a sequence of n integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>, a 132 pattern is a subsequence a<sub><b>i</b></sub>, a<sub><b>j</b></sub>, a<sub><b>k</b></sub> such\r\nthat <b>i</b> < <b>j</b> < <b>k</b> and a<sub><b>i</b></sub> < a<sub><b>k</b></sub> < a<sub><b>j</b></sub>. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.</p>\r\n\r\n<p><b>Note:</b> n will be less than 15,000.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1, 2, 3, 4]\r\n\r\n<b>Output:</b> False\r\n\r\n<b>Explanation:</b> There is no 132 pattern in the sequence.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [3, 1, 4, 2]\r\n\r\n<b>Output:</b> True\r\n\r\n<b>Explanation:</b> There is a 132 pattern in the sequence: [1, 4, 2].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> [-1, 3, 2, 0]\r\n\r\n<b>Output:</b> True\r\n\r\n<b>Explanation:</b> There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff1aa<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>\uff0c\u4e00\u4e2a132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217&nbsp;a<sub><strong>i</strong></sub>, a<sub><strong>j</strong></sub>, a<sub><strong>k</strong></sub>&nbsp;\u88ab\u5b9a\u4e49\u4e3a\uff1a\u5f53 <strong>i</strong> &lt; <strong>j</strong> &lt; <strong>k</strong> \u65f6\uff0ca<sub><strong>i</strong></sub> &lt; a<sub><strong>k</strong></sub> &lt; a<sub><strong>j</strong></sub>\u3002\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5f53\u7ed9\u5b9a\u6709&nbsp;n \u4e2a\u6570\u5b57\u7684\u5e8f\u5217\u65f6\uff0c\u9a8c\u8bc1\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u662f\u5426\u542b\u6709132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>n \u7684\u503c\u5c0f\u4e8e15000\u3002</p>\n\n<p><strong>\u793a\u4f8b1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1, 2, 3, 4]\n\n<strong>\u8f93\u51fa:</strong> False\n\n<strong>\u89e3\u91ca:</strong> \u5e8f\u5217\u4e2d\u4e0d\u5b58\u5728132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [3, 1, 4, 2]\n\n<strong>\u8f93\u51fa:</strong> True\n\n<strong>\u89e3\u91ca:</strong> \u5e8f\u5217\u4e2d\u6709 1 \u4e2a132\u6a21\u5f0f\u7684\u5b50\u5e8f\u5217\uff1a [1, 4, 2].\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [-1, 3, 2, 0]\n\n<strong>\u8f93\u51fa:</strong> True\n\n<strong>\u89e3\u91ca:</strong> \u5e8f\u5217\u4e2d\u6709 3 \u4e2a132\u6a21\u5f0f\u7684\u7684\u5b50\u5e8f\u5217: [-1, 3, 2], [-1, 3, 0] \u548c [-1, 2, 0].\n</pre>\n",
        "titleZh": "132\u6a21\u5f0f",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "457",
        "link": "circular-array-loop",
        "title": "Circular Array Loop",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "29.7%",
        "questionDescription": "<p>You are given a <b>circular</b> array <code>nums</code> of positive and negative integers. If a number <i>k</i> at an index is positive, then move forward <i>k</i> steps. Conversely, if it&#39;s negative (-<i>k</i>), move backward <i>k</i>&nbsp;steps. Since the array is circular, you may assume that the last element&#39;s next element is the first element, and the first element&#39;s previous element is the last element.</p>\r\n\r\n<p>Determine if there is a loop (or a cycle) in <code>nums</code>. A cycle must start and end at the same index and the cycle&#39;s length &gt; 1. Furthermore, movements in a cycle must all follow a single direction. In other words, a cycle must not consist of both forward and backward movements.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [2,-1,1,2,2]\r\n<b>Output:</b> true\r\n<b>Explanation:</b> There is a cycle, from index 0 -&gt; 2 -&gt; 3 -&gt; 0. The cycle&#39;s length is 3.\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [-1,2]\r\n<b>Output:</b> false\r\n<b>Explanation:</b> The movement from index 1 -&gt; 1 -&gt; 1 ... is not a cycle, because the cycle&#39;s length is 1. By definition the cycle&#39;s length must be greater than 1.\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [-2,1,-1,-2,-2]\r\n<b>Output:</b> false\r\n<b>Explanation:</b> The movement from index 1 -&gt; 2 -&gt; 1 -&gt; ... is not a cycle, because movement from index 1 -&gt; 2 is a forward movement, but movement from index 2 -&gt; 1 is a backward movement. All movements in a cycle must follow a single direction.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>-1000 &le;&nbsp;nums[i] &le;&nbsp;1000</li>\r\n\t<li>nums[i] &ne;&nbsp;0</li>\r\n\t<li>1 &le;&nbsp;nums.length &le; 5000</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Follow up:</b></p>\r\n\r\n<p>Could you solve it in <b>O(n)</b> time complexity and&nbsp;<strong>O(1)</strong> extra space complexity?</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709\u6b63\u6574\u6570\u548c\u8d1f\u6574\u6570\u7684<strong>\u73af\u5f62</strong>\u6570\u7ec4&nbsp;<code>nums</code>\u3002 \u5982\u679c\u67d0\u4e2a\u7d22\u5f15\u4e2d\u7684\u6570 <em>k</em>&nbsp;\u4e3a\u6b63\u6570\uff0c\u5219\u5411\u524d\u79fb\u52a8 <em>k</em>&nbsp;\u4e2a\u7d22\u5f15\u3002\u76f8\u53cd\uff0c\u5982\u679c\u662f\u8d1f\u6570 (<em>-k</em>)\uff0c\u5219\u5411\u540e\u79fb\u52a8 <em>k</em>&nbsp;\u4e2a\u7d22\u5f15\u3002\u56e0\u4e3a\u6570\u7ec4\u662f\u73af\u5f62\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5047\u8bbe\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u800c\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u524d\u4e00\u4e2a\u5143\u7d20\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002</p>\n\n<p>\u786e\u5b9a <code>nums</code>&nbsp;\u4e2d\u662f\u5426\u5b58\u5728\u5faa\u73af\uff08\u6216\u5468\u671f\uff09\u3002\u5faa\u73af\u5fc5\u987b\u5728\u76f8\u540c\u7684\u7d22\u5f15\u5904\u5f00\u59cb\u548c\u7ed3\u675f\u5e76\u4e14\u5faa\u73af\u957f\u5ea6 &gt; 1\u3002\u6b64\u5916\uff0c\u4e00\u4e2a\u5faa\u73af\u4e2d\u7684\u6240\u6709\u8fd0\u52a8\u90fd\u5fc5\u987b\u6cbf\u7740\u540c\u4e00\u65b9\u5411\u8fdb\u884c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a\u5faa\u73af\u4e2d\u4e0d\u80fd\u540c\u65f6\u5305\u62ec\u5411\u524d\u7684\u8fd0\u52a8\u548c\u5411\u540e\u7684\u8fd0\u52a8\u3002<br>\n&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,-1,1,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u5b58\u5728\u5faa\u73af\uff0c\u6309\u7d22\u5f15 0 -&gt; 2 -&gt; 3 -&gt; 0 \u3002\u5faa\u73af\u957f\u5ea6\u4e3a 3 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[-1,2]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u6309\u7d22\u5f15 1 -&gt; 1 -&gt; 1 ... \u7684\u8fd0\u52a8\u65e0\u6cd5\u6784\u6210\u5faa\u73af\uff0c\u56e0\u4e3a\u5faa\u73af\u7684\u957f\u5ea6\u4e3a 1 \u3002\u6839\u636e\u5b9a\u4e49\uff0c\u5faa\u73af\u7684\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e 1 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[-2,1,-1,-2,-2]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u6309\u7d22\u5f15 1 -&gt; 2 -&gt; 1 -&gt; ... \u7684\u8fd0\u52a8\u65e0\u6cd5\u6784\u6210\u5faa\u73af\uff0c\u56e0\u4e3a\u6309\u7d22\u5f15 1 -&gt; 2 \u7684\u8fd0\u52a8\u662f\u5411\u524d\u7684\u8fd0\u52a8\uff0c\u800c\u6309\u7d22\u5f15 2 -&gt; 1 \u7684\u8fd0\u52a8\u662f\u5411\u540e\u7684\u8fd0\u52a8\u3002\u4e00\u4e2a\u5faa\u73af\u4e2d\u7684\u6240\u6709\u8fd0\u52a8\u90fd\u5fc5\u987b\u6cbf\u7740\u540c\u4e00\u65b9\u5411\u8fdb\u884c\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>-1000 &le;&nbsp;nums[i] &le;&nbsp;1000</li>\n\t<li>nums[i] &ne;&nbsp;0</li>\n\t<li>1 &le;&nbsp;nums.length &le; 5000</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong></p>\n\n<p>\u4f60\u80fd\u5199\u51fa\u65f6\u95f4\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <strong>O(n)</strong>&nbsp;\u548c\u989d\u5916\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a <strong>O(1)</strong> \u7684\u7b97\u6cd5\u5417\uff1f</p>\n",
        "titleZh": "\u73af\u5f62\u6570\u7ec4\u5faa\u73af",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Microsoft",
            "Nutanix"
        ]
    },
    {
        "leetId": "458",
        "link": "poor-pigs",
        "title": "Poor Pigs",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "48.8%",
        "questionDescription": "<p>There are 1000 buckets, one and only one of them is poisonous, while the rest are filled with water. They all look identical. If a pig drinks the poison it will die within 15 minutes. What is the minimum amount of pigs you need to figure out which bucket is poisonous within one hour?</p>\r\n\r\n<p>Answer this question, and write an algorithm for the general case.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>General case: </b></p>\r\n\r\n<p>If there are <code>n</code> buckets and a pig drinking poison will die within <code>m</code> minutes, how many pigs (<code>x</code>) you need to figure out the <strong>poisonous</strong>&nbsp;bucket within <code>p</code> minutes? There is exactly one bucket with poison.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>A pig can be allowed to drink simultaneously on as many buckets as one would like, and the feeding takes no time.</li>\r\n\t<li>After a pig has instantly finished drinking buckets, there has to be a <strong>cool down time</strong> of <em>m&nbsp;</em>minutes. During this time, only observation is allowed and no feedings at all.</li>\r\n\t<li>Any given bucket can be sampled an infinite number of times (by an unlimited number of pigs).</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u6709 1000 \u53ea\u6c34\u6876\uff0c\u5176\u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u6876\u88c5\u7684\u542b\u6709\u6bd2\u836f\uff0c\u5176\u4f59\u88c5\u7684\u90fd\u662f\u6c34\u3002\u5b83\u4eec\u4ece\u5916\u89c2\u770b\u8d77\u6765\u90fd\u4e00\u6837\u3002\u5982\u679c\u5c0f\u732a\u559d\u4e86\u6bd2\u836f\uff0c\u5b83\u4f1a\u5728 15 \u5206\u949f\u5185\u6b7b\u53bb\u3002</p>\n\n<p>\u95ee\u9898\u6765\u4e86\uff0c\u5982\u679c\u9700\u8981\u4f60\u5728\u4e00\u5c0f\u65f6\u5185\uff0c\u5f04\u6e05\u695a\u54ea\u53ea\u6c34\u6876\u542b\u6709\u6bd2\u836f\uff0c\u4f60\u6700\u5c11\u9700\u8981\u591a\u5c11\u53ea\u732a\uff1f</p>\n\n<p>\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u4e3a\u4e0b\u5217\u7684\u8fdb\u9636\u95ee\u9898\u7f16\u5199\u4e00\u4e2a\u901a\u7528\u7b97\u6cd5\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636: </strong></p>\n\n<p>\u5047\u8bbe\u6709 <code>n</code> \u53ea\u6c34\u6876\uff0c\u732a\u996e\u6c34\u4e2d\u6bd2\u540e\u4f1a\u5728 <code>m</code> \u5206\u949f\u5185\u6b7b\u4ea1\uff0c\u4f60\u9700\u8981\u591a\u5c11\u732a\uff08<code>x</code>\uff09\u5c31\u80fd\u5728 <code>p</code> \u5206\u949f\u5185\u627e\u51fa &ldquo;<strong>\u6709\u6bd2</strong>&rdquo; \u6c34\u6876\uff1f\u8fd9&nbsp;<code>n</code> \u53ea\u6c34\u6876\u91cc\u6709\u4e14\u4ec5\u6709\u4e00\u53ea\u6709\u6bd2\u7684\u6876\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u53ef\u4ee5\u5141\u8bb8\u5c0f\u732a\u540c\u65f6\u996e\u7528\u4efb\u610f\u6570\u91cf\u7684\u6876\u4e2d\u7684\u6c34\uff0c\u5e76\u4e14\u8be5\u8fc7\u7a0b\u4e0d\u9700\u8981\u65f6\u95f4\u3002</li>\n\t<li>\u5c0f\u732a\u559d\u5b8c\u6c34\u540e\uff0c\u5fc5\u987b\u6709 <em>m</em> \u5206\u949f\u7684<strong>\u51b7\u5374\u65f6\u95f4</strong>\u3002\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u53ea\u5141\u8bb8\u89c2\u5bdf\uff0c\u800c\u4e0d\u5141\u8bb8\u7ee7\u7eed\u996e\u6c34\u3002</li>\n\t<li>\u4efb\u4f55\u7ed9\u5b9a\u7684\u6876\u90fd\u53ef\u4ee5\u65e0\u9650\u6b21\u91c7\u6837\uff08\u65e0\u9650\u6570\u91cf\u7684\u732a\uff09\u3002</li>\n</ol>\n",
        "titleZh": "\u53ef\u601c\u7684\u5c0f\u732a",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Baidu"
        ]
    },
    {
        "leetId": "459",
        "link": "repeated-substring-pattern",
        "title": "Repeated Substring Pattern",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "39.8%",
        "questionDescription": "<p>Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. You may assume the given string consists of lowercase English letters only and its length will not exceed 10000.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;abab&quot;\r\n<b>Output:</b> True\r\n<b>Explanation:</b> It&#39;s the substring &quot;ab&quot; twice.\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;aba&quot;\r\n<b>Output:</b> False\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;abcabcabcabc&quot;\r\n<b>Output:</b> True\r\n<b>Explanation:</b> It&#39;s the substring &quot;abc&quot; four times. (And the substring &quot;abcabc&quot; twice.)\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b83\u662f\u5426\u53ef\u4ee5\u7531\u5b83\u7684\u4e00\u4e2a\u5b50\u4e32\u91cd\u590d\u591a\u6b21\u6784\u6210\u3002\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u53ea\u542b\u6709\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u5e76\u4e14\u957f\u5ea6\u4e0d\u8d85\u8fc710000\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;abab&quot;\n\n<strong>\u8f93\u51fa:</strong> True\n\n<strong>\u89e3\u91ca:</strong> \u53ef\u7531\u5b50\u5b57\u7b26\u4e32 &quot;ab&quot; \u91cd\u590d\u4e24\u6b21\u6784\u6210\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;aba&quot;\n\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;abcabcabcabc&quot;\n\n<strong>\u8f93\u51fa:</strong> True\n\n<strong>\u89e3\u91ca:</strong> \u53ef\u7531\u5b50\u5b57\u7b26\u4e32 &quot;abc&quot; \u91cd\u590d\u56db\u6b21\u6784\u6210\u3002 (\u6216\u8005\u5b50\u5b57\u7b26\u4e32 &quot;abcabc&quot; \u91cd\u590d\u4e24\u6b21\u6784\u6210\u3002)\n</pre>\n",
        "titleZh": "\u91cd\u590d\u7684\u5b50\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon"
        ]
    },
    {
        "leetId": "460",
        "link": "lfu-cache",
        "title": "LFU Cache",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "27.0%",
        "questionDescription": "<p>Design and implement a data structure for <a href=\"https://en.wikipedia.org/wiki/Least_frequently_used\" target=\"_blank\">Least Frequently Used (LFU)</a> cache. It should support the following operations: <code>get</code> and <code>put</code>.\r\n</p>\r\n\r\n<p>\r\n<code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br>\r\n<code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item. For the purpose of this problem, when there is a tie (i.e., two or more keys that have the same frequency), the least <b>recently</b> used key would be evicted.\r\n</p>\r\n\r\n<p><b>Follow up:</b><br />\r\nCould you do both operations in <b>O(1)</b> time complexity?</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nLFUCache cache = new LFUCache( 2 /* capacity */ );\r\n\r\ncache.put(1, 1);\r\ncache.put(2, 2);\r\ncache.get(1);       // returns 1\r\ncache.put(3, 3);    // evicts key 2\r\ncache.get(2);       // returns -1 (not found)\r\ncache.get(3);       // returns 3.\r\ncache.put(4, 4);    // evicts key 1.\r\ncache.get(1);       // returns -1 (not found)\r\ncache.get(3);       // returns 3\r\ncache.get(4);       // returns 4\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u8bbe\u8ba1\u5e76\u5b9e\u73b0<a href=\"https://baike.baidu.com/item/%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95\">\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\uff08LFU\uff09</a>\u7f13\u5b58\u7684\u6570\u636e\u7ed3\u6784\u3002\u5b83\u5e94\u8be5\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a<code>get</code>&nbsp;\u548c&nbsp;<code>put</code>\u3002</p>\n\n<p><code>get(key)</code>&nbsp;- \u5982\u679c\u952e\u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u83b7\u53d6\u952e\u7684\u503c\uff08\u603b\u662f\u6b63\u6570\uff09\uff0c\u5426\u5219\u8fd4\u56de -1\u3002<br />\n<code>put(key, value)</code>&nbsp;- \u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u8bf7\u8bbe\u7f6e\u6216\u63d2\u5165\u503c\u3002\u5f53\u7f13\u5b58\u8fbe\u5230\u5176\u5bb9\u91cf\u65f6\uff0c\u5b83\u5e94\u8be5\u5728\u63d2\u5165\u65b0\u9879\u76ee\u4e4b\u524d\uff0c\u4f7f\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\u7684\u9879\u76ee\u65e0\u6548\u3002\u5728\u6b64\u95ee\u9898\u4e2d\uff0c\u5f53\u5b58\u5728\u5e73\u5c40\uff08\u5373\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u952e\u5177\u6709\u76f8\u540c\u4f7f\u7528\u9891\u7387\uff09\u65f6\uff0c<strong>\u6700\u8fd1</strong>\u6700\u5c11\u4f7f\u7528\u7684\u952e\u5c06\u88ab\u53bb\u9664\u3002</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong><br />\n\u4f60\u662f\u5426\u53ef\u4ee5\u5728&nbsp;<strong>O(1)&nbsp;</strong>\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u6267\u884c\u4e24\u9879\u64cd\u4f5c\uff1f</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\nLFUCache cache = new LFUCache( 2 /* capacity (\u7f13\u5b58\u5bb9\u91cf) */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // \u8fd4\u56de 1\ncache.put(3, 3);    // \u53bb\u9664 key 2\ncache.get(2);       // \u8fd4\u56de -1 (\u672a\u627e\u5230key 2)\ncache.get(3);       // \u8fd4\u56de 3\ncache.put(4, 4);    // \u53bb\u9664 key 1\ncache.get(1);       // \u8fd4\u56de -1 (\u672a\u627e\u5230 key 1)\ncache.get(3);       // \u8fd4\u56de 3\ncache.get(4);       // \u8fd4\u56de 4</pre>\n",
        "titleZh": "LFU\u7f13\u5b58",
        "tags": [
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Airbnb",
            "Snapchat",
            "Pinterest"
        ]
    },
    {
        "leetId": "461",
        "link": "hamming-distance",
        "title": "Hamming Distance",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "69.0%",
        "questionDescription": "<p>The <a href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p>\r\n\r\n<p>Given two integers <code>x</code> and <code>y</code>, calculate the Hamming distance.</p>\r\n\r\n<p><b>Note:</b><br />\r\n0 &le; <code>x</code>, <code>y</code> &lt; 2<sup>31</sup>.\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b> x = 1, y = 4\r\n\r\n<b>Output:</b> 2\r\n\r\n<b>Explanation:</b>\r\n1   (0 0 0 1)\r\n4   (0 1 0 0)\r\n       &uarr;   &uarr;\r\n\r\nThe above arrows point to positions where the corresponding bits are different.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684<a href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB\">\u6c49\u660e\u8ddd\u79bb</a>\u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u7684\u6570\u76ee\u3002</p>\n\n<p>\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570 <code>x</code> \u548c <code>y</code>\uff0c\u8ba1\u7b97\u5b83\u4eec\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong><br />\n0 &le; <code>x</code>, <code>y</code> &lt; 2<sup>31</sup>.</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> x = 1, y = 4\n\n<strong>\u8f93\u51fa:</strong> 2\n\n<strong>\u89e3\u91ca:</strong>\n1   (0 0 0 1)\n4   (0 1 0 0)\n       &uarr;   &uarr;\n\n\u4e0a\u9762\u7684\u7bad\u5934\u6307\u51fa\u4e86\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002\n</pre>\n",
        "titleZh": "\u6c49\u660e\u8ddd\u79bb",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook",
            "Uber",
            "Adobe",
            "Apple",
            "Airbnb",
            "Baidu",
            "Goldman Sachs",
            "Aetion"
        ]
    },
    {
        "leetId": "462",
        "link": "minimum-moves-to-equal-array-elements-ii",
        "title": "Minimum Moves to Equal Array Elements II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "52.1%",
        "questionDescription": "<p><p>Given a <b>non-empty</b> integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.</p>\r\n\r\n<p>You may assume the array's length is at most 10,000.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b>\r\n[1,2,3]\r\n\r\n<b>Output:</b>\r\n2\r\n\r\n<b>Explanation:</b>\r\nOnly two moves are needed (remember each move increments or decrements one element):\r\n\r\n[1,2,3]  =>  [2,2,3]  =>  [2,2,2]\r\n</pre>\r\n</p></p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u4f7f\u6240\u6709\u6570\u7ec4\u5143\u7d20\u76f8\u7b49\u6240\u9700\u7684\u6700\u5c0f\u79fb\u52a8\u6570\uff0c\u5176\u4e2d\u6bcf\u6b21\u79fb\u52a8\u53ef\u5c06\u9009\u5b9a\u7684\u4e00\u4e2a\u5143\u7d20\u52a01\u6216\u51cf1\u3002 \u60a8\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u7684\u957f\u5ea6\u6700\u591a\u4e3a10000\u3002</p>\n\n<p><strong>\u4f8b\u5982:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n[1,2,3]\n\n<strong>\u8f93\u51fa:</strong>\n2\n\n<strong>\u8bf4\u660e\uff1a\n</strong>\u53ea\u6709\u4e24\u4e2a\u52a8\u4f5c\u662f\u5fc5\u8981\u7684\uff08\u8bb0\u5f97\u6bcf\u4e00\u6b65\u4ec5\u53ef\u4f7f\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u52a01\u6216\u51cf1\uff09\uff1a \n\n[1,2,3]  =&gt;  [2,2,3]  =&gt;  [2,2,2]\n</pre>\n",
        "titleZh": "\u6700\u5c11\u79fb\u52a8\u6b21\u6570\u4f7f\u6570\u7ec4\u5143\u7d20\u76f8\u7b49 II",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ]
    },
    {
        "leetId": "463",
        "link": "island-perimeter",
        "title": "Island Perimeter",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "59.8%",
        "questionDescription": "<p>You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water.</p>\r\n\r\n<p>Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).</p>\r\n\r\n<p>The island doesn&#39;t have &quot;lakes&quot; (water inside that isn&#39;t connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don&#39;t exceed 100. Determine the perimeter of the island.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n[[0,1,0,0],\r\n [1,1,1,0],\r\n [0,1,0,0],\r\n [1,1,0,0]]\r\n\r\n<strong>Output:</strong> 16\r\n\r\n<strong>Explanation:</strong> The perimeter is the 16 yellow stripes in the image below:\r\n\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/island.png\" style=\"width: 221px; height: 213px;\" />\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b 0 \u548c 1 \u7684\u4e8c\u7ef4\u7f51\u683c\u5730\u56fe\uff0c\u5176\u4e2d 1 \u8868\u793a\u9646\u5730&nbsp;0 \u8868\u793a\u6c34\u57df\u3002</p>\n\n<p>\u7f51\u683c\u4e2d\u7684\u683c\u5b50\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u76f8\u8fde\uff08\u5bf9\u89d2\u7ebf\u65b9\u5411\u4e0d\u76f8\u8fde\uff09\u3002\u6574\u4e2a\u7f51\u683c\u88ab\u6c34\u5b8c\u5168\u5305\u56f4\uff0c\u4f46\u5176\u4e2d\u6070\u597d\u6709\u4e00\u4e2a\u5c9b\u5c7f\uff08\u6216\u8005\u8bf4\uff0c\u4e00\u4e2a\u6216\u591a\u4e2a\u8868\u793a\u9646\u5730\u7684\u683c\u5b50\u76f8\u8fde\u7ec4\u6210\u7684\u5c9b\u5c7f\uff09\u3002</p>\n\n<p>\u5c9b\u5c7f\u4e2d\u6ca1\u6709&ldquo;\u6e56&rdquo;\uff08&ldquo;\u6e56&rdquo; \u6307\u6c34\u57df\u5728\u5c9b\u5c7f\u5185\u90e8\u4e14\u4e0d\u548c\u5c9b\u5c7f\u5468\u56f4\u7684\u6c34\u76f8\u8fde\uff09\u3002\u683c\u5b50\u662f\u8fb9\u957f\u4e3a 1 \u7684\u6b63\u65b9\u5f62\u3002\u7f51\u683c\u4e3a\u957f\u65b9\u5f62\uff0c\u4e14\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5747\u4e0d\u8d85\u8fc7 100 \u3002\u8ba1\u7b97\u8fd9\u4e2a\u5c9b\u5c7f\u7684\u5468\u957f\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[[0,1,0,0],\n [1,1,1,0],\n [0,1,0,0],\n [1,1,0,0]]\n\n<strong>\u8f93\u51fa:</strong> 16\n\n<strong>\u89e3\u91ca:</strong> \u5b83\u7684\u5468\u957f\u662f\u4e0b\u9762\u56fe\u7247\u4e2d\u7684 16 \u4e2a\u9ec4\u8272\u7684\u8fb9\uff1a\n\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/island.png\">\n</pre>\n",
        "titleZh": "\u5c9b\u5c7f\u7684\u5468\u957f",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Yahoo",
            "Airbnb"
        ]
    },
    {
        "leetId": "464",
        "link": "can-i-win",
        "title": "Can I Win",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "29.7%",
        "questionDescription": "<p>In the \"100 game,\" two players take turns adding, to a running total, any integer from 1..10. The player who first causes the running total to reach or exceed 100 wins. </p>\r\n\r\n<p>What if we change the game so that players cannot re-use integers? </p>\r\n\r\n<p>For example, two players might take turns drawing from a common pool of numbers of 1..15 without replacement until they reach a total >= 100.</p>\r\n\r\n<p>Given an integer <code>maxChoosableInteger</code> and another integer <code>desiredTotal</code>, determine if the first player to move can force a win, assuming both players play optimally. </p>\r\n\r\n<p>You can always assume that <code>maxChoosableInteger</code> will not be larger than 20 and <code>desiredTotal</code> will not be larger than 300.\r\n</p>\r\n\r\n<p><b>Example</b>\r\n<pre>\r\n<b>Input:</b>\r\nmaxChoosableInteger = 10\r\ndesiredTotal = 11\r\n\r\n<b>Output:</b>\r\nfalse\r\n\r\n<b>Explanation:</b>\r\nNo matter which integer the first player choose, the first player will lose.\r\nThe first player can choose an integer from 1 up to 10.\r\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\r\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\r\nSame with other integers chosen by the first player, the second player will always win.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u5728 &quot;100 game&quot; \u8fd9\u4e2a\u6e38\u620f\u4e2d\uff0c\u4e24\u540d\u73a9\u5bb6\u8f6e\u6d41\u9009\u62e9\u4ece 1 \u5230 10 \u7684\u4efb\u610f\u6574\u6570\uff0c\u7d2f\u8ba1\u6574\u6570\u548c\uff0c\u5148\u4f7f\u5f97\u7d2f\u8ba1\u6574\u6570\u548c\u8fbe\u5230 100 \u7684\u73a9\u5bb6\uff0c\u5373\u4e3a\u80dc\u8005\u3002</p>\n\n<p>\u5982\u679c\u6211\u4eec\u5c06\u6e38\u620f\u89c4\u5219\u6539\u4e3a &ldquo;\u73a9\u5bb6\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\u6574\u6570&rdquo; \u5462\uff1f</p>\n\n<p>\u4f8b\u5982\uff0c\u4e24\u4e2a\u73a9\u5bb6\u53ef\u4ee5\u8f6e\u6d41\u4ece\u516c\u5171\u6574\u6570\u6c60\u4e2d\u62bd\u53d6\u4ece 1 \u5230 15 \u7684\u6574\u6570\uff08\u4e0d\u653e\u56de\uff09\uff0c\u76f4\u5230\u7d2f\u8ba1\u6574\u6570\u548c &gt;= 100\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570&nbsp;<code>maxChoosableInteger</code>&nbsp;\uff08\u6574\u6570\u6c60\u4e2d\u53ef\u9009\u62e9\u7684\u6700\u5927\u6570\uff09\u548c\u53e6\u4e00\u4e2a\u6574\u6570&nbsp;<code>desiredTotal</code>\uff08\u7d2f\u8ba1\u548c\uff09\uff0c\u5224\u65ad\u5148\u51fa\u624b\u7684\u73a9\u5bb6\u662f\u5426\u80fd\u7a33\u8d62\uff08\u5047\u8bbe\u4e24\u4f4d\u73a9\u5bb6\u6e38\u620f\u65f6\u90fd\u8868\u73b0\u6700\u4f73\uff09\uff1f</p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>maxChoosableInteger</code>&nbsp;\u4e0d\u4f1a\u5927\u4e8e 20\uff0c&nbsp;<code>desiredTotal</code>&nbsp;\u4e0d\u4f1a\u5927\u4e8e 300\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\nmaxChoosableInteger = 10\ndesiredTotal = 11\n\n<strong>\u8f93\u51fa\uff1a</strong>\nfalse\n\n<strong>\u89e3\u91ca\uff1a\n</strong>\u65e0\u8bba\u7b2c\u4e00\u4e2a\u73a9\u5bb6\u9009\u62e9\u54ea\u4e2a\u6574\u6570\uff0c\u4ed6\u90fd\u4f1a\u5931\u8d25\u3002\n\u7b2c\u4e00\u4e2a\u73a9\u5bb6\u53ef\u4ee5\u9009\u62e9\u4ece 1 \u5230 10 \u7684\u6574\u6570\u3002\n\u5982\u679c\u7b2c\u4e00\u4e2a\u73a9\u5bb6\u9009\u62e9 1\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u73a9\u5bb6\u53ea\u80fd\u9009\u62e9\u4ece 2 \u5230 10 \u7684\u6574\u6570\u3002\n\u7b2c\u4e8c\u4e2a\u73a9\u5bb6\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u6574\u6570 10\uff08\u90a3\u4e48\u7d2f\u79ef\u548c\u4e3a 11 &gt;= desiredTotal\uff09\uff0c\u4ece\u800c\u53d6\u5f97\u80dc\u5229.\n\u540c\u6837\u5730\uff0c\u7b2c\u4e00\u4e2a\u73a9\u5bb6\u9009\u62e9\u4efb\u610f\u5176\u4ed6\u6574\u6570\uff0c\u7b2c\u4e8c\u4e2a\u73a9\u5bb6\u90fd\u4f1a\u8d62\u3002\n</pre>\n",
        "titleZh": "\u6211\u80fd\u8d62\u5417",
        "tags": [
            {
                "tag": "Minimax",
                "link": "minimax",
                "tagZh": "\u6781\u5c0f\u5316\u6781\u5927"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "LinkedIn"
        ]
    },
    {
        "leetId": "465",
        "link": "optimal-account-balancing",
        "title": "Optimal Account Balancing",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "40",
        "questionDescription": "\n<p>A group of friends went on holiday and sometimes lent each other money. For example, Alice paid for Bill's lunch for $10. Then later Chris gave Alice $5 for a taxi ride. We can model each transaction as a tuple (x, y, z) which means person x gave person y $z. Assuming Alice, Bill, and Chris are person 0, 1, and 2 respectively (0, 1, 2 are the person's ID), the transactions can be represented as <code>[[0, 1, 10], [2, 0, 5]]</code>.</p>\n<p>Given a list of transactions between a group of people, return the minimum number of transactions required to settle the debt.</p>\n<p><b>Note:</b>\n</p><ol>\n<li>A transaction will be given as a tuple (x, y, z). Note that <code>x \u2260 y</code> and <code>z &gt; 0</code>.</li>\n<li>Person's IDs may not be linear, e.g. we could have the persons 0, 1, 2 or we could also have the persons 0, 2, 6.</li>\n</ol>\n<p></p>\n<p><b>Example 1:</b>\n</p><pre><b>Input:</b>\n[[0,1,10], [2,0,5]]\n\n<b>Output:</b>\n2\n\n<b>Explanation:</b>\nPerson #0 gave person #1 $10.\nPerson #2 gave person #0 $5.\n\nTwo transactions are needed. One way to settle the debt is person #1 pays person #0 and #2 $5 each.\n</pre>\n<p></p>\n<p><b>Example 2:</b>\n</p><pre><b>Input:</b>\n[[0,1,10], [1,0,1], [1,2,5], [2,0,5]]\n\n<b>Output:</b>\n1\n\n<b>Explanation:</b>\nPerson #0 gave person #1 $10.\nPerson #1 gave person #0 $1.\nPerson #1 gave person #2 $5.\nPerson #2 gave person #0 $5.\n\nTherefore, person #1 only need to give person #0 $4, and all debt is settled.\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>A group of friends went on holiday and sometimes lent each other money. For example, Alice paid for Bill's lunch for $10. Then later Chris gave Alice $5 for a taxi ride. We can model each transaction as a tuple (x, y, z) which means person x gave person y $z. Assuming Alice, Bill, and Chris are person 0, 1, and 2 respectively (0, 1, 2 are the person's ID), the transactions can be represented as <code>[[0, 1, 10], [2, 0, 5]]</code>.</p>\n<p>Given a list of transactions between a group of people, return the minimum number of transactions required to settle the debt.</p>\n<p><b>Note:</b>\n</p><ol>\n<li>A transaction will be given as a tuple (x, y, z). Note that <code>x \u2260 y</code> and <code>z &gt; 0</code>.</li>\n<li>Person's IDs may not be linear, e.g. we could have the persons 0, 1, 2 or we could also have the persons 0, 2, 6.</li>\n</ol>\n<p></p>\n<p><b>Example 1:</b>\n</p><pre><b>Input:</b>\n[[0,1,10], [2,0,5]]\n\n<b>Output:</b>\n2\n\n<b>Explanation:</b>\nPerson #0 gave person #1 $10.\nPerson #2 gave person #0 $5.\n\nTwo transactions are needed. One way to settle the debt is person #1 pays person #0 and #2 $5 each.\n</pre>\n<p></p>\n<p><b>Example 2:</b>\n</p><pre><b>Input:</b>\n[[0,1,10], [1,0,1], [1,2,5], [2,0,5]]\n\n<b>Output:</b>\n1\n\n<b>Explanation:</b>\nPerson #0 gave person #1 $10.\nPerson #1 gave person #0 $1.\nPerson #1 gave person #2 $5.\nPerson #2 gave person #0 $5.\n\nTherefore, person #1 only need to give person #0 $4, and all debt is settled.\n</pre>\n<p></p>\n",
        "companies": [
            "Google",
            "Uber"
        ]
    },
    {
        "leetId": "466",
        "link": "count-the-repetitions",
        "title": "Count The Repetitions",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "23.3%",
        "questionDescription": "<p>Define <code>S = [s,n]</code> as the string S which consists of n connected strings s. For example, <code>[\"abc\", 3]</code> =\"abcabcabc\". </p>\r\n<p>On the other hand, we define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. For example, \u201cabc\u201d  can be obtained from \u201cabdbec\u201d based on our definition, but it can not be obtained from \u201cacbbe\u201d.</p>\r\n<p>You are given two non-empty strings s1 and s2 (each at most 100 characters long) and two integers 0 &le; n1 &le; 10<sup>6</sup> and 1 &le; n2 &le; 10<sup>6</sup>. Now consider the strings S1 and S2, where <code>S1=[s1,n1]</code> and <code>S2=[s2,n2]</code>. Find the maximum integer M such that <code>[S2,M]</code> can be obtained from <code>S1</code>.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nInput:\r\ns1=\"acb\", n1=4\r\ns2=\"ab\", n2=2\r\n\r\nReturn:\r\n2\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u5b9a\u4e49\u7531 n \u4e2a\u8fde\u63a5\u7684\u5b57\u7b26\u4e32 s \u7ec4\u6210\u5b57\u7b26\u4e32 S\uff0c\u5373&nbsp;<code>S = [s,n]</code>\u3002\u4f8b\u5982\uff0c<code>[&quot;abc&quot;, 3]</code>=&ldquo;abcabcabc&rdquo;\u3002</p>\n\n<p>\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4ece s<sub>2&nbsp;</sub>\u4e2d\u5220\u9664\u67d0\u4e9b\u5b57\u7b26\u4f7f\u5176\u53d8\u4e3a s<sub>1</sub>\uff0c\u6211\u4eec\u79f0\u5b57\u7b26\u4e32 s<sub>1&nbsp;</sub>\u53ef\u4ee5\u4ece\u5b57\u7b26\u4e32 s<sub>2&nbsp;</sub>\u83b7\u5f97\u3002\u4f8b\u5982\uff0c&ldquo;abc&rdquo; \u53ef\u4ee5\u6839\u636e\u6211\u4eec\u7684\u5b9a\u4e49\u4ece &ldquo;abdbec&rdquo; \u83b7\u5f97\uff0c\u4f46\u4e0d\u80fd\u4ece &ldquo;acbbe&rdquo; \u83b7\u5f97\u3002</p>\n\n<p>\u73b0\u5728\u7ed9\u51fa\u4e24\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32 S<sub>1&nbsp;</sub>\u548c S<sub>2</sub>\uff08\u6bcf\u4e2a\u6700\u591a 100 \u4e2a\u5b57\u7b26\u957f\uff09\u548c\u4e24\u4e2a\u6574\u6570 0 &le; N<sub>1&nbsp;</sub>&le; 10<sup>6&nbsp;</sup>\u548c 1 &le; N<sub>2&nbsp;</sub>&le; 10<sup>6</sup>\u3002\u73b0\u5728\u8003\u8651\u5b57\u7b26\u4e32 S<sub>1&nbsp;</sub>\u548c S<sub>2</sub>\uff0c\u5176\u4e2d<code>S1=[s1,n1]</code>\u548c<code>S2=[s2,n2]</code>\u3002\u627e\u51fa\u53ef\u4ee5\u4f7f<code>[S2,M]</code>\u4ece&nbsp;<code>S1</code>&nbsp;\u83b7\u5f97\u7684\u6700\u5927\u6574\u6570 M\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\u8f93\u5165\uff1a\ns1 =&quot;acb&quot;,n1 = 4\ns2 =&quot;ab&quot;,n2 = 2\n\n\u8fd4\u56de\uff1a\n2\n</pre>\n",
        "titleZh": "\u7edf\u8ba1\u91cd\u590d\u4e2a\u6570",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ]
    },
    {
        "leetId": "467",
        "link": "unique-substrings-in-wraparound-string",
        "title": "Unique Substrings in Wraparound String",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "33.7%",
        "questionDescription": "<p>Consider the string <code>s</code> to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so <code>s</code> will look like this: \"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".</p>\r\n\r\n<p>Now we have another string <code>p</code>. Your job is to find out how many unique non-empty substrings of <code>p</code> are present in <code>s</code>. In particular, your input is the string <code>p</code> and you need to output the number of different non-empty substrings of <code>p</code> in the string <code>s</code>.</p>\r\n\r\n<p><b>Note:</b> <code>p</code> consists of only lowercase English letters and the size of p might be over 10000.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"a\"\r\n<b>Output:</b> 1\r\n\r\n<b>Explanation:</b> Only the substring \"a\" of string \"a\" is in the string \u0010s.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"cac\"\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> There are two substrings \"a\", \"c\" of string \"cac\" in the string s.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> \"zab\"\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> There are six substrings \"z\", \"a\", \"b\", \"za\", \"ab\", \"zab\" of string \"zab\" in the string s.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u628a\u5b57\u7b26\u4e32 <code>s</code> \u770b\u4f5c\u662f&ldquo;abcdefghijklmnopqrstuvwxyz&rdquo;\u7684\u65e0\u9650\u73af\u7ed5\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5&nbsp;<code>s</code> \u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a&quot;...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....&quot;.&nbsp;</p>\n\n<p>\u73b0\u5728\u6211\u4eec\u6709\u4e86\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32 <code>p</code> \u3002\u4f60\u9700\u8981\u7684\u662f\u627e\u51fa <code>s</code> \u4e2d\u6709\u591a\u5c11\u4e2a\u552f\u4e00\u7684 <code>p</code> \u7684\u975e\u7a7a\u5b50\u4e32\uff0c\u5c24\u5176\u662f\u5f53\u4f60\u7684\u8f93\u5165\u662f\u5b57\u7b26\u4e32 <code>p</code> \uff0c\u4f60\u9700\u8981\u8f93\u51fa\u5b57\u7b26\u4e32&nbsp;<code>s</code> \u4e2d <code>p</code> \u7684\u4e0d\u540c\u7684\u975e\u7a7a\u5b50\u4e32\u7684\u6570\u76ee\u3002&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong> <code>p</code>&nbsp;\u4ec5\u7531\u5c0f\u5199\u7684\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\uff0cp \u7684\u5927\u5c0f\u53ef\u80fd\u8d85\u8fc7 10000\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;a&quot;\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> \u5b57\u7b26\u4e32 S \u4e2d\u53ea\u6709\u4e00\u4e2a&quot;a&quot;\u5b50\u5b57\u7b26\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;cac&quot;\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u5b57\u7b26\u4e32 S \u4e2d\u7684\u5b57\u7b26\u4e32&ldquo;cac&rdquo;\u53ea\u6709\u4e24\u4e2a\u5b50\u4e32&ldquo;a&rdquo;\u3001&ldquo;c&rdquo;\u3002.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;zab&quot;\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> \u5728\u5b57\u7b26\u4e32 S \u4e2d\u6709\u516d\u4e2a\u5b50\u4e32&ldquo;z&rdquo;\u3001&ldquo;a&rdquo;\u3001&ldquo;b&rdquo;\u3001&ldquo;za&rdquo;\u3001&ldquo;ab&rdquo;\u3001&ldquo;zab&rdquo;\u3002.\n</pre>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u73af\u7ed5\u5b57\u7b26\u4e32\u4e2d\u552f\u4e00\u7684\u5b50\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "MAQ Software"
        ]
    },
    {
        "leetId": "468",
        "link": "validate-ip-address",
        "title": "Validate IP Address",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "18.8%",
        "questionDescription": "<p>\r\nWrite a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.\r\n</p>\r\n\r\n<p>\r\n<b>IPv4</b> addresses are canonically represented in dot-decimal notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots (\".\"), e.g.,<code>172.16.254.1</code>;\r\n</p>\r\n\r\n<p>\r\nBesides, leading zeros in the IPv4 is invalid. For example, the address <code>172.16.254.01</code> is invalid.\r\n</p>\r\n\r\n<p>\r\n<b>IPv6</b> addresses are represented as eight groups of four hexadecimal digits, each group representing 16 bits. The groups are separated by colons (\":\"). For example, the address <code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code> is a valid one. Also, we could omit some leading zeros among four hexadecimal digits and some low-case characters in the address to upper-case ones, so <code>2001:db8:85a3:0:0:8A2E:0370:7334</code> is also a valid IPv6 address(Omit leading zeros and using upper cases).\r\n</p>\r\n\r\n\r\n<p>\r\nHowever, we don't replace a consecutive group of zero value with a single empty group using two consecutive colons (::) to pursue simplicity. For example, <code>2001:0db8:85a3::8A2E:0370:7334</code> is an invalid IPv6 address.\r\n</p>\r\n\r\n<p>\r\nBesides, extra leading zeros in the IPv6 is also invalid. For example, the address <code>02001:0db8:85a3:0000:0000:8a2e:0370:7334</code> is invalid.\r\n</p>\r\n\r\n\r\n<p><b>Note:</b>\r\nYou may assume there is no extra space or special characters in the input string.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"172.16.254.1\"\r\n\r\n<b>Output:</b> \"IPv4\"\r\n\r\n<b>Explanation:</b> This is a valid IPv4 address, return \"IPv4\".\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\r\n\r\n<b>Output:</b> \"IPv6\"\r\n\r\n<b>Explanation:</b> This is a valid IPv6 address, return \"IPv6\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> \"256.256.256.256\"\r\n\r\n<b>Output:</b> \"Neither\"\r\n\r\n<b>Explanation:</b> This is neither a IPv4 address nor a IPv6 address.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u9a8c\u8bc1\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u662f\u5426\u662f\u6709\u6548\u7684 IPv4 \u6216&nbsp;IPv6 \u5730\u5740\u3002</p>\n\n<p><strong>IPv4</strong>&nbsp;\u5730\u5740\u7531\u5341\u8fdb\u5236\u6570\u548c\u70b9\u6765\u8868\u793a\uff0c\u6bcf\u4e2a\u5730\u5740\u5305\u542b4\u4e2a\u5341\u8fdb\u5236\u6570\uff0c\u5176\u8303\u56f4\u4e3a&nbsp;0 -&nbsp;255\uff0c&nbsp;\u7528(&quot;.&quot;)\u5206\u5272\u3002\u6bd4\u5982\uff0c<code>172.16.254.1</code>\uff1b</p>\n\n<p>\u540c\u65f6\uff0cIPv4 \u5730\u5740\u5185\u7684\u6570\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002\u6bd4\u5982\uff0c\u5730\u5740&nbsp;<code>172.16.254.01</code> \u662f\u4e0d\u5408\u6cd5\u7684\u3002</p>\n\n<p><strong>IPv6</strong>&nbsp;\u5730\u5740\u75318\u7ec416\u8fdb\u5236\u7684\u6570\u5b57\u6765\u8868\u793a\uff0c\u6bcf\u7ec4\u8868\u793a&nbsp;16 \u6bd4\u7279\u3002\u8fd9\u4e9b\u7ec4\u6570\u5b57\u901a\u8fc7 (&quot;:&quot;)\u5206\u5272\u3002\u6bd4\u5982,&nbsp;&nbsp;<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code> \u662f\u4e00\u4e2a\u6709\u6548\u7684\u5730\u5740\u3002\u800c\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u52a0\u5165\u4e00\u4e9b\u4ee5 0 \u5f00\u5934\u7684\u6570\u5b57\uff0c\u5b57\u6bcd\u53ef\u4ee5\u4f7f\u7528\u5927\u5199\uff0c\u4e5f\u53ef\u4ee5\u662f\u5c0f\u5199\u3002\u6240\u4ee5\uff0c&nbsp;<code>2001:db8:85a3:0:0:8A2E:0370:7334</code> \u4e5f\u662f\u4e00\u4e2a\u6709\u6548\u7684 IPv6 address\u5730\u5740 (\u5373\uff0c\u5ffd\u7565 0 \u5f00\u5934\uff0c\u5ffd\u7565\u5927\u5c0f\u5199)\u3002</p>\n\n<p>\u7136\u800c\uff0c\u6211\u4eec\u4e0d\u80fd\u56e0\u4e3a\u67d0\u4e2a\u7ec4\u7684\u503c\u4e3a 0\uff0c\u800c\u4f7f\u7528\u4e00\u4e2a\u7a7a\u7684\u7ec4\uff0c\u4ee5\u81f3\u4e8e\u51fa\u73b0 (::) \u7684\u60c5\u51b5\u3002&nbsp;\u6bd4\u5982\uff0c&nbsp;<code>2001:0db8:85a3::8A2E:0370:7334</code> \u662f\u65e0\u6548\u7684 IPv6 \u5730\u5740\u3002</p>\n\n<p>\u540c\u65f6\uff0c\u5728 IPv6 \u5730\u5740\u4e2d\uff0c\u591a\u4f59\u7684 0 \u4e5f\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\u6bd4\u5982\uff0c&nbsp;<code>02001:0db8:85a3:0000:0000:8a2e:0370:7334</code> \u662f\u65e0\u6548\u7684\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong>&nbsp;\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u91cc\u6ca1\u6709\u7a7a\u683c\u6216\u8005\u5176\u4ed6\u7279\u6b8a\u5b57\u7b26\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;172.16.254.1&quot;\n\n<strong>\u8f93\u51fa:</strong> &quot;IPv4&quot;\n\n<strong>\u89e3\u91ca:</strong> \u8fd9\u662f\u4e00\u4e2a\u6709\u6548\u7684 IPv4 \u5730\u5740, \u6240\u4ee5\u8fd4\u56de &quot;IPv4&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;2001:0db8:85a3:0:0:8A2E:0370:7334&quot;\n\n<strong>\u8f93\u51fa:</strong> &quot;IPv6&quot;\n\n<strong>\u89e3\u91ca:</strong> \u8fd9\u662f\u4e00\u4e2a\u6709\u6548\u7684 IPv6 \u5730\u5740, \u6240\u4ee5\u8fd4\u56de &quot;IPv6&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;256.256.256.256&quot;\n\n<strong>\u8f93\u51fa:</strong> &quot;Neither&quot;\n\n<strong>\u89e3\u91ca:</strong> \u8fd9\u4e2a\u5730\u5740\u65e2\u4e0d\u662f IPv4 \u4e5f\u4e0d\u662f IPv6 \u5730\u5740\u3002\n</pre>\n",
        "titleZh": "\u9a8c\u8bc1IP\u5730\u5740",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Uber",
            "LinkedIn",
            "Twitter",
            "VMware",
            "Cisco",
            "Visa"
        ]
    },
    {
        "leetId": "469",
        "link": "convex-polygon",
        "title": "Convex Polygon",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n<p>Given a list of points that form a polygon when joined sequentially, find if this polygon is convex <a href=\"https://en.wikipedia.org/wiki/Convex_polygon\" target=\"_blank\">(Convex polygon definition)</a>.</p>\n<p><b>Note:</b>\n</p><ol>\n<li>There are at least 3 and at most 10,000 points.</li>\n<li>Coordinates are in the range -10,000 to 10,000.</li>\n<li>You may assume the polygon formed by given points is always a simple polygon<a href=\"https://en.wikipedia.org/wiki/Simple_polygon\" target=\"_blank\"> (Simple polygon definition)</a>. In other words, we ensure that exactly two edges intersect at each vertex, and that edges otherwise <b>don't intersect each other</b>. \n</li>\n</ol>\n<p></p>\n<p><b>Example 1:</b>\n</p><pre>[[0,0],[0,1],[1,1],[1,0]]\n\nAnswer: True\n\nExplanation:<img height=\"100\" src=\"/static/images/problemset/polygon_convex.png\" width=\"100\"/>\n</pre>\n<p></p>\n<p><b>Example 2:</b>\n</p><pre>[[0,0],[0,10],[10,10],[10,0],[5,5]]\n\nAnswer: False\n\nExplanation:<img height=\"100\" src=\"/static/images/problemset/polygon_not_convex.png\" width=\"100\"/>\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a list of points that form a polygon when joined sequentially, find if this polygon is convex <a href=\"https://en.wikipedia.org/wiki/Convex_polygon\" target=\"_blank\">(Convex polygon definition)</a>.</p>\n<p><b>Note:</b>\n</p><ol>\n<li>There are at least 3 and at most 10,000 points.</li>\n<li>Coordinates are in the range -10,000 to 10,000.</li>\n<li>You may assume the polygon formed by given points is always a simple polygon<a href=\"https://en.wikipedia.org/wiki/Simple_polygon\" target=\"_blank\"> (Simple polygon definition)</a>. In other words, we ensure that exactly two edges intersect at each vertex, and that edges otherwise <b>don't intersect each other</b>. \n</li>\n</ol>\n<p></p>\n<p><b>Example 1:</b>\n</p><pre>[[0,0],[0,1],[1,1],[1,0]]\n\nAnswer: True\n\nExplanation:<img height=\"100\" src=\"/static/images/problemset/polygon_convex.png\" width=\"100\"/>\n</pre>\n<p></p>\n<p><b>Example 2:</b>\n</p><pre>[[0,0],[0,10],[10,10],[10,0],[5,5]]\n\nAnswer: False\n\nExplanation:<img height=\"100\" src=\"/static/images/problemset/polygon_not_convex.png\" width=\"100\"/>\n</pre>\n<p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "470",
        "link": "implement-rand10-using-rand7",
        "title": "Implement Rand10() Using Rand7()",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "40.3%",
        "questionDescription": "<p>Given a function <code>rand7</code> which generates a uniform random integer in the range 1 to 7, write a function <code>rand10</code>&nbsp;which generates a uniform random integer in the range 1 to 10.</p>\r\n\r\n<p>Do NOT use system&#39;s <code>Math.random()</code>.</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[7]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[8,4]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[8,1,10]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>rand7</code> is predefined.</li>\r\n\t<li>Each testcase has one argument:&nbsp;<code>n</code>, the number of times that <code>rand10</code> is called.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ol>\r\n\t<li>What is the <a href=\"https://en.wikipedia.org/wiki/Expected_value\" target=\"_blank\">expected value</a>&nbsp;for the number of calls to&nbsp;<code>rand7()</code>&nbsp;function?</li>\r\n\t<li>Could you minimize the number of calls to <code>rand7()</code>?</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5df2\u6709\u65b9\u6cd5&nbsp;<code>rand7</code>&nbsp;\u53ef\u751f\u6210 1 \u5230 7 \u8303\u56f4\u5185\u7684\u5747\u5300\u968f\u673a\u6574\u6570\uff0c\u8bd5\u5199\u4e00\u4e2a\u65b9\u6cd5&nbsp;<code>rand10</code>&nbsp;\u751f\u6210 1 \u5230 10 \u8303\u56f4\u5185\u7684\u5747\u5300\u968f\u673a\u6574\u6570\u3002</p>\n\n<p>\u4e0d\u8981\u4f7f\u7528\u7cfb\u7edf\u7684&nbsp;<code>Math.random()</code>&nbsp;\u65b9\u6cd5\u3002</p>\n\n<ol>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>1\n<strong>\u8f93\u51fa: </strong>[7]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>2\n<strong>\u8f93\u51fa: </strong>[8,4]\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>3\n<strong>\u8f93\u51fa: </strong>[8,1,10]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>rand7</code>&nbsp;\u5df2\u5b9a\u4e49\u3002</li>\n\t<li>\u4f20\u5165\u53c2\u6570:&nbsp;<code>n</code>&nbsp;\u8868\u793a&nbsp;<code>rand10</code>&nbsp;\u7684\u8c03\u7528\u6b21\u6570\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ol>\n\t<li><code>rand7()</code>\u8c03\u7528\u6b21\u6570\u7684&nbsp;<a href=\"https://en.wikipedia.org/wiki/Expected_value\" target=\"_blank\">\u671f\u671b\u503c</a>&nbsp;\u662f\u591a\u5c11&nbsp;?</li>\n\t<li>\u4f60\u80fd\u5426\u5c3d\u91cf\u5c11\u8c03\u7528 <code>rand7()</code> ?</li>\n</ol>\n",
        "titleZh": "\u7528 Rand7() \u5b9e\u73b0 Rand10()",
        "tags": [
            {
                "tag": "Random",
                "link": "random",
                "tagZh": null
            },
            {
                "tag": "Rejection Sampling",
                "link": "rejection-sampling",
                "tagZh": null
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "471",
        "link": "encode-string-with-shortest-length",
        "title": "Encode String with Shortest Length",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "23",
        "questionDescription": "\n<p>Given a <b>non-empty</b> string, encode the string such that its encoded length is the shortest.</p>\n<p>\nThe encoding rule is: <code>k[encoded_string]</code>, where the <i>encoded_string</i> inside the square brackets is being repeated exactly <i>k</i> times.</p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li><i>k</i> will be a positive integer and encoded string will not be empty or have extra space.</li>\n<li>You may assume that the input string contains only lowercase English letters. The string's length is at most 160.</li>\n<li>If an encoding process does not make the string shorter, then do not encode it. If there are several solutions, return any of them is fine.</li>\n</ol>\n<p></p>\n<p><b>Example 1:</b>\n</p><pre>Input: \"aaa\"\nOutput: \"aaa\"\nExplanation: There is no way to encode it such that it is shorter than the input string, so we do not encode it.\n</pre>\n<p></p>\n<p><b>Example 2:</b>\n</p><pre>Input: \"aaaaa\"\nOutput: \"5[a]\"\nExplanation: \"5[a]\" is shorter than \"aaaaa\" by 1 character.\n</pre>\n<p></p>\n<p><b>Example 3:</b>\n</p><pre>Input: \"aaaaaaaaaa\"\nOutput: \"10[a]\"\nExplanation: \"a9[a]\" or \"9[a]a\" are also valid solutions, both of them have the same length = 5, which is the same as \"10[a]\".\n</pre>\n<p></p>\n<p><b>Example 4:</b>\n</p><pre>Input: \"aabcaabcd\"\nOutput: \"2[aabc]d\"\nExplanation: \"aabc\" occurs twice, so one answer can be \"2[aabc]d\".\n</pre>\n<p></p>\n<p><b>Example 5:</b>\n</p><pre>Input: \"abbbabbbcabbbabbbc\"\nOutput: \"2[2[abbb]c]\"\nExplanation: \"abbbabbbc\" occurs twice, but \"abbbabbbc\" can also be encoded to \"2[abbb]c\", so one answer can be \"2[2[abbb]c]\".\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a <b>non-empty</b> string, encode the string such that its encoded length is the shortest.</p>\n<p>\nThe encoding rule is: <code>k[encoded_string]</code>, where the <i>encoded_string</i> inside the square brackets is being repeated exactly <i>k</i> times.</p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li><i>k</i> will be a positive integer and encoded string will not be empty or have extra space.</li>\n<li>You may assume that the input string contains only lowercase English letters. The string's length is at most 160.</li>\n<li>If an encoding process does not make the string shorter, then do not encode it. If there are several solutions, return any of them is fine.</li>\n</ol>\n<p></p>\n<p><b>Example 1:</b>\n</p><pre>Input: \"aaa\"\nOutput: \"aaa\"\nExplanation: There is no way to encode it such that it is shorter than the input string, so we do not encode it.\n</pre>\n<p></p>\n<p><b>Example 2:</b>\n</p><pre>Input: \"aaaaa\"\nOutput: \"5[a]\"\nExplanation: \"5[a]\" is shorter than \"aaaaa\" by 1 character.\n</pre>\n<p></p>\n<p><b>Example 3:</b>\n</p><pre>Input: \"aaaaaaaaaa\"\nOutput: \"10[a]\"\nExplanation: \"a9[a]\" or \"9[a]a\" are also valid solutions, both of them have the same length = 5, which is the same as \"10[a]\".\n</pre>\n<p></p>\n<p><b>Example 4:</b>\n</p><pre>Input: \"aabcaabcd\"\nOutput: \"2[aabc]d\"\nExplanation: \"aabc\" occurs twice, so one answer can be \"2[aabc]d\".\n</pre>\n<p></p>\n<p><b>Example 5:</b>\n</p><pre>Input: \"abbbabbbcabbbabbbc\"\nOutput: \"2[2[abbb]c]\"\nExplanation: \"abbbabbbc\" occurs twice, but \"abbbabbbc\" can also be encoded to \"2[abbb]c\", so one answer can be \"2[2[abbb]c]\".\n</pre>\n<p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "472",
        "link": "concatenated-words",
        "title": "Concatenated Words",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "36.6%",
        "questionDescription": "Given a list of words (<b>without duplicates</b>), please write a program that returns all concatenated words in the given list of words.\r\n<p>A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.</p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\r\n\r\n<b>Output:</b> [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\r\n\r\n<b>Explanation:</b> \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; <br> \"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; <br>\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The number of elements of the given array will not exceed <code>10,000 </code>\r\n<li>The length sum of elements in the given array will not exceed <code>600,000</code>. </li>\r\n<li>All the input string will only include lower case letters.</li>\r\n<li>The returned elements order does not matter. </li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u4e0d\u542b\u91cd\u590d</strong>\u5355\u8bcd\u7684\u5217\u8868\uff0c\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8fd4\u56de\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868\u4e2d\u6240\u6709\u7684\u8fde\u63a5\u8bcd\u3002</p>\n\n<p>\u8fde\u63a5\u8bcd\u7684\u5b9a\u4e49\u4e3a\uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b8c\u5168\u662f\u7531\u81f3\u5c11\u4e24\u4e2a\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u7684\u5355\u8bcd\u7ec4\u6210\u7684\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [&quot;cat&quot;,&quot;cats&quot;,&quot;catsdogcats&quot;,&quot;dog&quot;,&quot;dogcatsdog&quot;,&quot;hippopotamuses&quot;,&quot;rat&quot;,&quot;ratcatdogcat&quot;]\n\n<strong>\u8f93\u51fa:</strong> [&quot;catsdogcats&quot;,&quot;dogcatsdog&quot;,&quot;ratcatdogcat&quot;]\n\n<strong>\u89e3\u91ca:</strong> &quot;catsdogcats&quot;\u7531&quot;cats&quot;, &quot;dog&quot; \u548c &quot;cats&quot;\u7ec4\u6210; \n     &quot;dogcatsdog&quot;\u7531&quot;dog&quot;, &quot;cats&quot;\u548c&quot;dog&quot;\u7ec4\u6210; \n     &quot;ratcatdogcat&quot;\u7531&quot;rat&quot;, &quot;cat&quot;, &quot;dog&quot;\u548c&quot;cat&quot;\u7ec4\u6210\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6570\u7ec4\u7684\u5143\u7d20\u603b\u6570\u4e0d\u8d85\u8fc7 <code>10000</code>\u3002</li>\n\t<li>\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u957f\u5ea6\u603b\u548c\u4e0d\u8d85\u8fc7 <code>600000</code>\u3002</li>\n\t<li>\u6240\u6709\u8f93\u5165\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li>\u4e0d\u9700\u8981\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002</li>\n</ol>\n",
        "titleZh": "\u8fde\u63a5\u8bcd",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Trie",
                "link": "trie",
                "tagZh": "\u5b57\u5178\u6811"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Amazon",
            "Apple",
            "Snapchat"
        ]
    },
    {
        "leetId": "473",
        "link": "matchsticks-to-square",
        "title": "Matchsticks to Square",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "30.4%",
        "questionDescription": "<p>Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used <b>exactly</b> one time.</P>\r\n\r\n<p> Your input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,1,2,2,2]\r\n<b>Output:</b> true\r\n\r\n<b>Explanation:</b> You can form a square with length 2, one side of the square came two sticks with length 1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [3,3,3,3,4]\r\n<b>Output:</b> false\r\n\r\n<b>Explanation:</b> You cannot find a way to form a square with all the matchsticks.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length sum of the given matchsticks is in the range of <code>0</code> to <code>10^9</code>.\r\n<li>The length of the given matchstick array will not exceed <code>15</code>.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u8fd8\u8bb0\u5f97\u7ae5\u8bdd\u300a\u5356\u706b\u67f4\u7684\u5c0f\u5973\u5b69\u300b\u5417\uff1f\u73b0\u5728\uff0c\u4f60\u77e5\u9053\u5c0f\u5973\u5b69\u6709\u591a\u5c11\u6839\u706b\u67f4\uff0c\u8bf7\u627e\u51fa\u4e00\u79cd\u80fd\u4f7f\u7528\u6240\u6709\u706b\u67f4\u62fc\u6210\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u65b9\u6cd5\u3002\u4e0d\u80fd\u6298\u65ad\u706b\u67f4\uff0c\u53ef\u4ee5\u628a\u706b\u67f4\u8fde\u63a5\u8d77\u6765\uff0c\u5e76\u4e14\u6bcf\u6839\u706b\u67f4\u90fd\u8981\u7528\u5230\u3002</p>\n\n<p>\u8f93\u5165\u4e3a\u5c0f\u5973\u5b69\u62e5\u6709\u706b\u67f4\u7684\u6570\u76ee\uff0c\u6bcf\u6839\u706b\u67f4\u7528\u5176\u957f\u5ea6\u8868\u793a\u3002\u8f93\u51fa\u5373\u4e3a\u662f\u5426\u80fd\u7528\u6240\u6709\u7684\u706b\u67f4\u62fc\u6210\u6b63\u65b9\u5f62\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,1,2,2,2]\n<strong>\u8f93\u51fa:</strong> true\n\n<strong>\u89e3\u91ca:</strong> \u80fd\u62fc\u6210\u4e00\u4e2a\u8fb9\u957f\u4e3a2\u7684\u6b63\u65b9\u5f62\uff0c\u6bcf\u8fb9\u4e24\u6839\u706b\u67f4\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [3,3,3,3,4]\n<strong>\u8f93\u51fa:</strong> false\n\n<strong>\u89e3\u91ca:</strong> \u4e0d\u80fd\u7528\u6240\u6709\u706b\u67f4\u62fc\u6210\u4e00\u4e2a\u6b63\u65b9\u5f62\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u7684\u706b\u67f4\u957f\u5ea6\u548c\u5728&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>10^9</code>\u4e4b\u95f4\u3002</li>\n\t<li>\u706b\u67f4\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc715\u3002</li>\n</ol>\n",
        "titleZh": "\u706b\u67f4\u62fc\u6b63\u65b9\u5f62",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Rackspace"
        ]
    },
    {
        "leetId": "474",
        "link": "ones-and-zeroes",
        "title": "Ones and Zeroes",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "38.3%",
        "questionDescription": "<p>In the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.</p>\r\n<p>For now, suppose you are a dominator of <b>m</b> <code>0s</code> and <b>n</b> <code>1s</code> respectively. On the other hand, there is an array with strings consisting of only <code>0s</code> and <code>1s</code>.</p>\r\n\r\n<p>\r\nNow your task is to find the maximum number of strings that you can form with given <b>m</b> <code>0s</code> and <b>n</b> <code>1s</code>. Each <code>0</code> and <code>1</code> can be used at most <b>once</b>.\r\n</p>\r\n\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The given numbers of <code>0s</code> and <code>1s</code> will both not exceed <code>100</code></li>\r\n<li>The size of given string array won't exceed <code>600</code>.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n = 3\r\n<b>Output:</b> 4\r\n\r\n<b>Explanation:</b> This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are \u201c10,\u201d0001\u201d,\u201d1\u201d,\u201d0\u201d\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> Array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\r\n<b>Output:</b> 2\r\n\r\n<b>Explanation:</b> You could form \"10\", but then you'd have nothing left. Better form \"0\" and \"1\".\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u5728\u8ba1\u7b97\u673a\u754c\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u8ffd\u6c42\u7528\u6709\u9650\u7684\u8d44\u6e90\u83b7\u53d6\u6700\u5927\u7684\u6536\u76ca\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u5047\u8bbe\u4f60\u5206\u522b\u652f\u914d\u7740 <strong>m</strong> \u4e2a&nbsp;<code>0</code>&nbsp;\u548c <strong>n</strong> \u4e2a&nbsp;<code>1</code>\u3002\u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u4ec5\u5305\u542b&nbsp;<code>0</code>&nbsp;\u548c&nbsp;<code>1</code>&nbsp;\u5b57\u7b26\u4e32\u7684\u6570\u7ec4\u3002</p>\n\n<p>\u4f60\u7684\u4efb\u52a1\u662f\u4f7f\u7528\u7ed9\u5b9a\u7684&nbsp;<strong>m</strong> \u4e2a&nbsp;<code>0</code>&nbsp;\u548c <strong>n</strong> \u4e2a&nbsp;<code>1</code>&nbsp;\uff0c\u627e\u5230\u80fd\u62fc\u51fa\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\u7684\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u91cf\u3002\u6bcf\u4e2a&nbsp;<code>0</code>&nbsp;\u548c&nbsp;<code>1</code>&nbsp;\u81f3\u591a\u88ab\u4f7f\u7528<strong>\u4e00\u6b21</strong>\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a&nbsp;<code>0</code>&nbsp;\u548c&nbsp;<code>1</code>&nbsp;\u7684\u6570\u91cf\u90fd\u4e0d\u4f1a\u8d85\u8fc7&nbsp;<code>100</code>\u3002</li>\n\t<li>\u7ed9\u5b9a\u5b57\u7b26\u4e32\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7&nbsp;<code>600</code>\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> Array = {&quot;10&quot;, &quot;0001&quot;, &quot;111001&quot;, &quot;1&quot;, &quot;0&quot;}, m = 5, n = 3\n<strong>\u8f93\u51fa:</strong> 4\n\n<strong>\u89e3\u91ca:</strong> \u603b\u5171 4 \u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7 5 \u4e2a 0 \u548c 3 \u4e2a 1 \u62fc\u51fa\uff0c\u5373 &quot;10&quot;,&quot;0001&quot;,&quot;1&quot;,&quot;0&quot; \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> Array = {&quot;10&quot;, &quot;0&quot;, &quot;1&quot;}, m = 1, n = 1\n<strong>\u8f93\u51fa:</strong> 2\n\n<strong>\u89e3\u91ca:</strong> \u4f60\u53ef\u4ee5\u62fc\u51fa &quot;10&quot;\uff0c\u4f46\u4e4b\u540e\u5c31\u6ca1\u6709\u5269\u4f59\u6570\u5b57\u4e86\u3002\u66f4\u597d\u7684\u9009\u62e9\u662f\u62fc\u51fa &quot;0&quot; \u548c &quot;1&quot; \u3002\n</pre>\n",
        "titleZh": "\u4e00\u548c\u96f6",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "475",
        "link": "heaters",
        "title": "Heaters",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "26.5%",
        "questionDescription": "<p>Winter is coming! Your first job during the contest is to design a standard heater with fixed warm radius to warm all the houses.</p>\r\n\r\n<p>Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.</p>\r\n\r\n<p>So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>Numbers of houses and heaters you are given are non-negative and will not exceed 25000.</li>\r\n\t<li>Positions of houses and heaters you are given are non-negative and will not exceed 10^9.</li>\r\n\t<li>As long as a house is in the heaters&#39; warm radius range, it can be warmed.</li>\r\n\t<li>All the heaters follow your radius standard and the warm radius will the same.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,2,3],[2]\r\n<b>Output:</b> 1\r\n<b>Explanation:</b> The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,2,3,4],[1,4]\r\n<b>Output:</b> 1\r\n<b>Explanation:</b> The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u51ac\u5b63\u5df2\u7ecf\u6765\u4e34\u3002&nbsp;\u4f60\u7684\u4efb\u52a1\u662f\u8bbe\u8ba1\u4e00\u4e2a\u6709\u56fa\u5b9a\u52a0\u70ed\u534a\u5f84\u7684\u4f9b\u6696\u5668\u5411\u6240\u6709\u623f\u5c4b\u4f9b\u6696\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u7ed9\u51fa\u4f4d\u4e8e\u4e00\u6761\u6c34\u5e73\u7ebf\u4e0a\u7684\u623f\u5c4b\u548c\u4f9b\u6696\u5668\u7684\u4f4d\u7f6e\uff0c\u627e\u5230\u53ef\u4ee5\u8986\u76d6\u6240\u6709\u623f\u5c4b\u7684\u6700\u5c0f\u52a0\u70ed\u534a\u5f84\u3002</p>\n\n<p>\u6240\u4ee5\uff0c\u4f60\u7684\u8f93\u5165\u5c06\u4f1a\u662f\u623f\u5c4b\u548c\u4f9b\u6696\u5668\u7684\u4f4d\u7f6e\u3002\u4f60\u5c06\u8f93\u51fa\u4f9b\u6696\u5668\u7684\u6700\u5c0f\u52a0\u70ed\u534a\u5f84\u3002</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u51fa\u7684\u623f\u5c4b\u548c\u4f9b\u6696\u5668\u7684\u6570\u76ee\u662f\u975e\u8d1f\u6570\u4e14\u4e0d\u4f1a\u8d85\u8fc7 25000\u3002</li>\n\t<li>\u7ed9\u51fa\u7684\u623f\u5c4b\u548c\u4f9b\u6696\u5668\u7684\u4f4d\u7f6e\u5747\u662f\u975e\u8d1f\u6570\u4e14\u4e0d\u4f1a\u8d85\u8fc710^9\u3002</li>\n\t<li>\u53ea\u8981\u623f\u5c4b\u4f4d\u4e8e\u4f9b\u6696\u5668\u7684\u534a\u5f84\u5185(\u5305\u62ec\u5728\u8fb9\u7f18\u4e0a)\uff0c\u5b83\u5c31\u53ef\u4ee5\u5f97\u5230\u4f9b\u6696\u3002</li>\n\t<li>\u6240\u6709\u4f9b\u6696\u5668\u90fd\u9075\u5faa\u4f60\u7684\u534a\u5f84\u6807\u51c6\uff0c\u52a0\u70ed\u7684\u534a\u5f84\u4e5f\u4e00\u6837\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3],[2]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> \u4ec5\u5728\u4f4d\u7f6e2\u4e0a\u6709\u4e00\u4e2a\u4f9b\u6696\u5668\u3002\u5982\u679c\u6211\u4eec\u5c06\u52a0\u70ed\u534a\u5f84\u8bbe\u4e3a1\uff0c\u90a3\u4e48\u6240\u6709\u623f\u5c4b\u5c31\u90fd\u80fd\u5f97\u5230\u4f9b\u6696\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3,4],[1,4]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> \u5728\u4f4d\u7f6e1, 4\u4e0a\u6709\u4e24\u4e2a\u4f9b\u6696\u5668\u3002\u6211\u4eec\u9700\u8981\u5c06\u52a0\u70ed\u534a\u5f84\u8bbe\u4e3a1\uff0c\u8fd9\u6837\u6240\u6709\u623f\u5c4b\u5c31\u90fd\u80fd\u5f97\u5230\u4f9b\u6696\u3002\n</pre>\n",
        "titleZh": "\u4f9b\u6696\u5668",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "476",
        "link": "number-complement",
        "title": "Number Complement",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "67.1%",
        "questionDescription": "<p>Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The given integer is guaranteed to fit within the range of a 32-bit signed integer.</li>\r\n<li>You could assume no leading zero bit in the integer\u2019s binary representation.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> 5\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> 1\r\n<b>Output:</b> 0\r\n<b>Explanation:</b> The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8f93\u51fa\u5b83\u7684\u8865\u6570\u3002\u8865\u6570\u662f\u5bf9\u8be5\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u53d6\u53cd\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u7684\u6574\u6570\u4fdd\u8bc1\u572832\u4f4d\u5e26\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4\u5185\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u5b9a\u4e8c\u8fdb\u5236\u6570\u4e0d\u5305\u542b\u524d\u5bfc\u96f6\u4f4d\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 5\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> 5\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a101\uff08\u6ca1\u6709\u524d\u5bfc\u96f6\u4f4d\uff09\uff0c\u5176\u8865\u6570\u4e3a010\u3002\u6240\u4ee5\u4f60\u9700\u8981\u8f93\u51fa2\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 1\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:</strong> 1\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a1\uff08\u6ca1\u6709\u524d\u5bfc\u96f6\u4f4d\uff09\uff0c\u5176\u8865\u6570\u4e3a0\u3002\u6240\u4ee5\u4f60\u9700\u8981\u8f93\u51fa0\u3002\n</pre>\n",
        "titleZh": "\u6570\u5b57\u7684\u8865\u6570",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ],
        "companies": [
            "Google",
            "Cloudera"
        ]
    },
    {
        "leetId": "477",
        "link": "total-hamming-distance",
        "title": "Total Hamming Distance",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "39.2%",
        "questionDescription": "<p>The <a href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p>\r\n\r\n<p>Now your job is to find the total Hamming distance between all pairs of the given numbers.</p\u0010\u0010\u0010\u0010>\r\n\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> 4, 14, 2\r\n\r\n<b>Output:</b> 6\r\n\r\n<b>Explanation:</b> In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\r\nshowing the four bits relevant in this case). So the answer will be:\r\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>Elements of the given array are in the range of <code>0 </code> to <code>10^9</code>\r\n<li>Length of the array will not exceed <code>10^4</code>. </li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u4e24\u4e2a\u6574\u6570\u7684&nbsp;<a href=\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/475174?fr=aladdin\">\u6c49\u660e\u8ddd\u79bb</a> \u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u6570\u5bf9\u5e94\u4f4d\u4e0d\u540c\u7684\u6570\u91cf\u3002</p>\n\n<p>\u8ba1\u7b97\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u6570\u4e4b\u95f4\u6c49\u660e\u8ddd\u79bb\u7684\u603b\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 4, 14, 2\n\n<strong>\u8f93\u51fa:</strong> 6\n\n<strong>\u89e3\u91ca:</strong> \u5728\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c4\u8868\u793a\u4e3a0100\uff0c14\u8868\u793a\u4e3a1110\uff0c2\u8868\u793a\u4e3a0010\u3002\uff08\u8fd9\u6837\u8868\u793a\u662f\u4e3a\u4e86\u4f53\u73b0\u540e\u56db\u4f4d\u4e4b\u95f4\u5173\u7cfb\uff09\n\u6240\u4ee5\u7b54\u6848\u4e3a\uff1a\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u8303\u56f4\u4e3a\u4ece&nbsp;<code>0</code>\u5230&nbsp;<code>10^9</code>\u3002</li>\n\t<li>\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7&nbsp;<code>10^4</code>\u3002</li>\n</ol>\n",
        "titleZh": "\u6c49\u660e\u8ddd\u79bb\u603b\u548c",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ],
        "companies": [
            "Facebook"
        ]
    },
    {
        "leetId": "478",
        "link": "generate-random-point-in-a-circle",
        "title": "Generate Random Point in a Circle",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "31.7%",
        "questionDescription": "<p>Given the radius and x-y positions of the center of a circle, write a function <code>randPoint</code>&nbsp;which&nbsp;generates a uniform random&nbsp;point in the circle.</p>\r\n\r\n<p>Note:</p>\r\n\r\n<ol>\r\n\t<li>input and output values are&nbsp;in&nbsp;<a href=\"https://www.webopedia.com/TERM/F/floating_point_number.html\" target=\"_blank\">floating-point</a>.</li>\r\n\t<li>radius and x-y position of the center of the circle is passed into the class constructor.</li>\r\n\t<li>a point on the circumference of the circle is considered to be&nbsp;in the circle.</li>\r\n\t<li><code>randPoint</code>&nbsp;returns&nbsp;a size 2 array containing x-position and y-position of the random point, in that order.</li>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-1-1\">[&quot;Solution&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;]\r\n</span><span id=\"example-input-1-2\">[[1,0,0],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,[-0.72939,-0.65505],[-0.78502,-0.28626],[-0.83119,-0.19803]]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-2-1\">[&quot;Solution&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;]\r\n</span><span id=\"example-input-2-2\">[[10,5,-7.5],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,[11.52438,-8.33273],[2.46992,-16.21705],[11.13430,-12.42337]]</span></pre>\r\n</div>\r\n\r\n<p><strong>Explanation of Input Syntax:</strong></p>\r\n\r\n<p>The input is two lists:&nbsp;the subroutines called&nbsp;and their&nbsp;arguments.&nbsp;<code>Solution</code>&#39;s&nbsp;constructor has three arguments, the radius, x-position of the center, and y-position of the center of the circle. <code>randPoint</code> has no arguments.&nbsp;Arguments&nbsp;are&nbsp;always wrapped with a list, even if there aren&#39;t any.</p>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u5706\u7684\u534a\u5f84\u548c\u5706\u5fc3\u7684 x\u3001y \u5750\u6807\uff0c\u5199\u4e00\u4e2a\u5728\u5706\u4e2d\u4ea7\u751f\u5747\u5300\u968f\u673a\u70b9\u7684\u51fd\u6570&nbsp;<code>randPoint</code>&nbsp;\u3002</p>\n\n<p>\u8bf4\u660e:</p>\n\n<ol>\n\t<li>\u8f93\u5165\u503c\u548c\u8f93\u51fa\u503c\u90fd\u5c06\u662f<a href=\"https://baike.baidu.com/item/%E6%B5%AE%E7%82%B9%E6%95%B0/6162520\">\u6d6e\u70b9\u6570</a>\u3002</li>\n\t<li>\u5706\u7684\u534a\u5f84\u548c\u5706\u5fc3\u7684 x\u3001y \u5750\u6807\u5c06\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002</li>\n\t<li>\u5706\u5468\u4e0a\u7684\u70b9\u4e5f\u8ba4\u4e3a\u662f\u5728\u5706\u4e2d\u3002</li>\n\t<li><code>randPoint</code>&nbsp;\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u968f\u673a\u70b9\u7684x\u5750\u6807\u548cy\u5750\u6807\u7684\u5927\u5c0f\u4e3a2\u7684\u6570\u7ec4\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;]\n[[1,0,0],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,[-0.72939,-0.65505],[-0.78502,-0.28626],[-0.83119,-0.19803]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;,&quot;randPoint&quot;]\n[[10,5,-7.5],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,[11.52438,-8.33273],[2.46992,-16.21705],[11.13430,-12.42337]]</pre>\n\n<p><strong>\u8f93\u5165\u8bed\u6cd5\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u8f93\u5165\u662f\u4e24\u4e2a\u5217\u8868\uff1a\u8c03\u7528\u6210\u5458\u51fd\u6570\u540d\u548c\u8c03\u7528\u7684\u53c2\u6570\u3002<code>Solution</code>&nbsp;\u7684\u6784\u9020\u51fd\u6570\u6709\u4e09\u4e2a\u53c2\u6570\uff0c\u5706\u7684\u534a\u5f84\u3001\u5706\u5fc3\u7684 x \u5750\u6807\u3001\u5706\u5fc3\u7684 y \u5750\u6807\u3002<code>randPoint</code>&nbsp;\u6ca1\u6709\u53c2\u6570\u3002\u8f93\u5165\u53c2\u6570\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5373\u4f7f\u53c2\u6570\u4e3a\u7a7a\uff0c\u4e5f\u4f1a\u8f93\u5165\u4e00\u4e2a [] \u7a7a\u5217\u8868\u3002</p>\n",
        "titleZh": "\u5728\u5706\u5185\u968f\u673a\u751f\u6210\u70b9",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Random",
                "link": "random",
                "tagZh": null
            },
            {
                "tag": "Rejection Sampling",
                "link": "rejection-sampling",
                "tagZh": null
            }
        ],
        "companies": [
            "Leap Motion"
        ]
    },
    {
        "leetId": "479",
        "link": "largest-palindrome-product",
        "title": "Largest Palindrome Product",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "27.7%",
        "questionDescription": "<p>Find the largest palindrome made from the product of two n-digit numbers.</p>\r\n\r\n<p>Since the result could be very large, you should return the largest palindrome mod 1337.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<p>Input: 2</p>\r\n\r\n<p>Output: 987</p>\r\n\r\n<p>Explanation: 99 x 91 = 9009, 9009 % 1337 = 987</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<p>The range of n is [1,8].</p>\r\n",
        "questionDescriptionZh": "<p>\u4f60\u9700\u8981\u627e\u5230\u7531\u4e24\u4e2a n \u4f4d\u6570\u7684\u4e58\u79ef\u7ec4\u6210\u7684\u6700\u5927\u56de\u6587\u6570\u3002</p>\n\n<p>\u7531\u4e8e\u7ed3\u679c\u4f1a\u5f88\u5927\uff0c\u4f60\u53ea\u9700\u8fd4\u56de\u6700\u5927\u56de\u6587\u6570 mod 1337\u5f97\u5230\u7684\u7ed3\u679c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<p>\u8f93\u5165: 2</p>\n\n<p>\u8f93\u51fa: 987</p>\n\n<p>\u89e3\u91ca: 99 x 91 = 9009, 9009 % 1337 = 987</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<p>n \u7684\u53d6\u503c\u8303\u56f4\u4e3a&nbsp;[1,8]\u3002</p>\n",
        "titleZh": "\u6700\u5927\u56de\u6587\u6570\u4e58\u79ef",
        "tags": [],
        "companies": [
            "Apple",
            "Yahoo"
        ]
    },
    {
        "leetId": "480",
        "link": "sliding-window-median",
        "title": "Sliding Window Median",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "27.8%",
        "questionDescription": "<p>Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.</p>\r\nExamples: <br />\r\n<p><code>[2,3,4]</code> , the median is <code>3</code></p>\r\n<p><code>[2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code> </p>\r\n\r\n<p>Given an array <i>nums</i>, there is a sliding window of size <i>k</i> which is moving from the very left of the array to the very right. You can only see the <i>k</i> numbers in the window. Each time the sliding window moves right by one position. Your job is to output the median array for each window in the original array.</p>\r\n\r\n<p>For example,<br>\r\nGiven <i>nums</i> = <code>[1,3,-1,-3,5,3,6,7]</code>, and <i>k</i> = 3.</p>\r\n\r\n<pre>\r\nWindow position                Median\r\n---------------               -----\r\n[1  3  -1] -3  5  3  6  7       1\r\n 1 [3  -1  -3] 5  3  6  7       -1\r\n 1  3 [-1  -3  5] 3  6  7       -1\r\n 1  3  -1 [-3  5  3] 6  7       3\r\n 1  3  -1  -3 [5  3  6] 7       5\r\n 1  3  -1  -3  5 [3  6  7]      6\r\n</pre>\r\n\r\n<p>Therefore, return the median sliding window as <code>[1,-1,-1,3,5,6]</code>.</p>\r\n\r\n<p><b>Note: </b><br>\r\nYou may assume <code>k</code> is always valid, ie: <code>k</code> is always smaller than input array's size for non-empty array.</p>",
        "questionDescriptionZh": "<p>\u4e2d\u4f4d\u6570\u662f\u6709\u5e8f\u5e8f\u5217\u6700\u4e2d\u95f4\u7684\u90a3\u4e2a\u6570\u3002\u5982\u679c\u5e8f\u5217\u7684\u5927\u5c0f\u662f\u5076\u6570\uff0c\u5219\u6ca1\u6709\u6700\u4e2d\u95f4\u7684\u6570\uff1b\u6b64\u65f6\u4e2d\u4f4d\u6570\u662f\u6700\u4e2d\u95f4\u7684\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u6570\u3002</p>\n\n<p>\u4f8b\u5982\uff1a</p>\n\n<p><code>[2,3,4]</code>\uff0c\u4e2d\u4f4d\u6570\u662f&nbsp;<code>3</code></p>\n\n<p><code>[2,3]</code>\uff0c\u4e2d\u4f4d\u6570\u662f <code>(2 + 3) / 2 = 2.5</code></p>\n\n<p>\u7ed9\u51fa\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a <em>k</em> \u7684\u7a97\u53e3\u4ece\u6700\u5de6\u7aef\u6ed1\u52a8\u5230\u6700\u53f3\u7aef\u3002\u7a97\u53e3\u4e2d\u6709 k \u4e2a\u6570\uff0c\u6bcf\u6b21\u7a97\u53e3\u79fb\u52a8 1 \u4f4d\u3002\u4f60\u7684\u4efb\u52a1\u662f\u627e\u51fa\u6bcf\u6b21\u7a97\u53e3\u79fb\u52a8\u540e\u5f97\u5230\u7684\u65b0\u7a97\u53e3\u4e2d\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\uff0c\u5e76\u8f93\u51fa\u7531\u5b83\u4eec\u7ec4\u6210\u7684\u6570\u7ec4\u3002</p>\n\n<p>\u4f8b\u5982\uff1a</p>\n\n<p>\u7ed9\u51fa&nbsp;<em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>\uff0c\u4ee5\u53ca&nbsp;<em>k</em> = 3\u3002</p>\n\n<pre>\n\u7a97\u53e3\u4f4d\u7f6e                      \u4e2d\u4f4d\u6570\n---------------               -----\n[1  3  -1] -3  5  3  6  7       1\n 1 [3  -1  -3] 5  3  6  7       -1\n 1  3 [-1  -3  5] 3  6  7       -1\n 1  3  -1 [-3  5  3] 6  7       3\n 1  3  -1  -3 [5  3  6] 7       5\n 1  3  -1  -3  5 [3  6  7]      6\n</pre>\n\n<p>&nbsp;\u56e0\u6b64\uff0c\u8fd4\u56de\u8be5\u6ed1\u52a8\u7a97\u53e3\u7684\u4e2d\u4f4d\u6570\u6570\u7ec4&nbsp;<code>[1,-1,-1,3,5,6]</code>\u3002</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong><br />\n\u5047\u8bbe<code>k</code>\u662f\u5408\u6cd5\u7684\uff0c\u5373\uff1a<code>k</code> \u59cb\u7ec8\u5c0f\u4e8e\u8f93\u5165\u7684\u975e\u7a7a\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570.</p>\n",
        "titleZh": "\u6ed1\u52a8\u7a97\u53e3\u4e2d\u4f4d\u6570",
        "tags": [
            {
                "tag": "Sliding Window",
                "link": "sliding-window",
                "tagZh": null
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Oracle"
        ]
    },
    {
        "leetId": "481",
        "link": "magical-string",
        "title": "Magical String",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "47.4%",
        "questionDescription": "<p>\r\nA magical string <b>S</b> consists of only '1' and '2' and obeys the following rules:\r\n</p>\r\n<p>\r\nThe string <b>S</b> is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string <b>S</b> itself.\r\n</p>\r\n\r\n<p>\r\nThe first few elements of string <b>S</b> is the following:\r\n<b>S</b> = \"1221121221221121122\u2026\u2026\"\r\n</p>\r\n\r\n<p>\r\nIf we group the consecutive '1's and '2's in <b>S</b>, it will be:\r\n</p>\r\n<p>\r\n1   22  11  2  1  22  1  22  11  2  11  22 ......\r\n</p>\r\n<p>\r\nand the occurrences of '1's or '2's in each group are:\r\n</p>\r\n<p>\r\n1   2\t   2    1   1    2     1    2     2    1    2    2 ......\r\n</p>\r\n\r\n<p>\r\nYou can see that the occurrence sequence above is the <b>S</b> itself. \r\n</p>\r\n\r\n<p>\r\nGiven an integer N as input, return the number of '1's in the first N number in the magical string <b>S</b>.\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nN will not exceed 100,000.\r\n</p>\r\n\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> 6\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> The first 6 elements of magical string S is \"12211\" and it contains three 1's, so return 3.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u795e\u5947\u7684\u5b57\u7b26\u4e32&nbsp;<strong>S&nbsp;</strong>\u53ea\u5305\u542b &#39;1&#39; \u548c &#39;2&#39;\uff0c\u5e76\u9075\u5b88\u4ee5\u4e0b\u89c4\u5219\uff1a</p>\n\n<p>\u5b57\u7b26\u4e32 <strong>S</strong> \u662f\u795e\u5947\u7684\uff0c\u56e0\u4e3a\u4e32\u8054\u5b57\u7b26 &#39;1&#39; \u548c &#39;2&#39; \u7684\u8fde\u7eed\u51fa\u73b0\u6b21\u6570\u4f1a\u751f\u6210\u5b57\u7b26\u4e32 <strong>S</strong> \u672c\u8eab\u3002</p>\n\n<p>\u5b57\u7b26\u4e32&nbsp;<strong>S&nbsp;</strong>\u7684\u524d\u51e0\u4e2a\u5143\u7d20\u5982\u4e0b\uff1a<strong>S </strong>= &ldquo;1221121221221121122 ......&rdquo;</p>\n\n<p>\u5982\u679c\u6211\u4eec\u5c06&nbsp;<strong>S</strong> \u4e2d\u8fde\u7eed\u7684 1 \u548c 2 \u8fdb\u884c\u5206\u7ec4\uff0c\u5b83\u5c06\u53d8\u6210\uff1a</p>\n\n<p>1 22 11 2 1 22 1 22 11 2 11 22 ......</p>\n\n<p>\u5e76\u4e14\u6bcf\u4e2a\u7ec4\u4e2d &#39;1&#39; \u6216 &#39;2&#39; \u7684\u51fa\u73b0\u6b21\u6570\u5206\u522b\u662f\uff1a</p>\n\n<p>1 2 2 1 1 2 1 2 2 1 2 2 ......</p>\n\n<p>\u4f60\u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u51fa\u73b0\u6b21\u6570\u5c31\u662f <strong>S</strong> \u672c\u8eab\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 N \u4f5c\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u795e\u5947\u5b57\u7b26\u4e32 <strong>S&nbsp;</strong>\u4e2d\u524d N \u4e2a\u6570\u5b57\u4e2d\u7684 &#39;1&#39; \u7684\u6570\u76ee\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>N \u4e0d\u4f1a\u8d85\u8fc7 100,000\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>6\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u795e\u5947\u5b57\u7b26\u4e32 S \u7684\u524d 6 \u4e2a\u5143\u7d20\u662f &ldquo;12211&rdquo;\uff0c\u5b83\u5305\u542b\u4e09\u4e2a 1\uff0c\u56e0\u6b64\u8fd4\u56de 3\u3002\n</pre>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u795e\u5947\u5b57\u7b26\u4e32",
        "tags": [],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "482",
        "link": "license-key-formatting",
        "title": "License Key Formatting",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "36.8%",
        "questionDescription": "<p>You are given a license key represented as a string S which consists only alphanumeric character and dashes. The string is separated into N+1 groups by N dashes.</p>\r\n\r\n<p>Given a number K, we would want to reformat the strings such that each group contains <i>exactly</i> K characters, except for the first group which could be shorter than K, but still must contain at least one character. Furthermore, there must be a dash inserted between two groups and all lowercase letters should be converted to uppercase.</p>\r\n\r\n<p>Given a non-empty string S and a number K, format the string according to the rules described above.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> S = \"5F3Z-2e-9-w\", K = 4\r\n\r\n<b>Output:</b> \"5F3Z-2E9W\"\r\n\r\n<b>Explanation:</b> The string S has been split into two parts, each part has 4 characters.\r\nNote that the two extra dashes are not needed and can be removed.\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> S = \"2-5g-3-J\", K = 2\r\n\r\n<b>Output:</b> \"2-5G-3J\"\r\n\r\n<b>Explanation:</b> The string S has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of string S will not exceed 12,000, and K is a positive integer.</li>\r\n<li>String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).</li>\r\n<li>String S is non-empty.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5bc6\u94a5\u5b57\u7b26\u4e32S\uff0c\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u6570\u5b57\u4ee5\u53ca &#39;-&#39;\uff08\u7834\u6298\u53f7\uff09\u3002N \u4e2a &#39;-&#39; \u5c06\u5b57\u7b26\u4e32\u5206\u6210\u4e86 N+1 \u7ec4\u3002\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57 K\uff0c\u91cd\u65b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u9664\u4e86\u7b2c\u4e00\u4e2a\u5206\u7ec4\u4ee5\u5916\uff0c\u6bcf\u4e2a\u5206\u7ec4\u8981\u5305\u542b K \u4e2a\u5b57\u7b26\uff0c\u7b2c\u4e00\u4e2a\u5206\u7ec4\u81f3\u5c11\u8981\u5305\u542b 1 \u4e2a\u5b57\u7b26\u3002\u4e24\u4e2a\u5206\u7ec4\u4e4b\u95f4\u7528 &#39;-&#39;\uff08\u7834\u6298\u53f7\uff09\u9694\u5f00\uff0c\u5e76\u4e14\u5c06\u6240\u6709\u7684\u5c0f\u5199\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd\u3002</p>\n\n<p>\u7ed9\u5b9a\u975e\u7a7a\u5b57\u7b26\u4e32 S \u548c\u6570\u5b57 K\uff0c\u6309\u7167\u4e0a\u9762\u63cf\u8ff0\u7684\u89c4\u5219\u8fdb\u884c\u683c\u5f0f\u5316\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>S = &quot;5F3Z-2e-9-w&quot;, K = 4\n\n<strong>\u8f93\u51fa\uff1a</strong>&quot;5F3Z-2E9W&quot;\n\n<strong>\u89e3\u91ca\uff1a</strong>\u5b57\u7b26\u4e32 S \u88ab\u5206\u6210\u4e86\u4e24\u4e2a\u90e8\u5206\uff0c\u6bcf\u90e8\u5206 4 \u4e2a\u5b57\u7b26\uff1b\n&nbsp;    \u6ce8\u610f\uff0c\u4e24\u4e2a\u989d\u5916\u7684\u7834\u6298\u53f7\u9700\u8981\u5220\u6389\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>S = &quot;2-5g-3-J&quot;, K = 2\n\n<strong>\u8f93\u51fa\uff1a</strong>&quot;2-5G-3J&quot;\n\n<strong>\u89e3\u91ca\uff1a</strong>\u5b57\u7b26\u4e32 S \u88ab\u5206\u6210\u4e86 3 \u4e2a\u90e8\u5206\uff0c\u6309\u7167\u524d\u9762\u7684\u89c4\u5219\u63cf\u8ff0\uff0c\u7b2c\u4e00\u90e8\u5206\u7684\u5b57\u7b26\u53ef\u4ee5\u5c11\u4e8e\u7ed9\u5b9a\u7684\u6570\u91cf\uff0c\u5176\u4f59\u90e8\u5206\u7686\u4e3a 2 \u4e2a\u5b57\u7b26\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li>S \u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 12,000\uff0cK \u4e3a\u6b63\u6574\u6570</li>\n\t<li>S \u53ea\u5305\u542b\u5b57\u6bcd\u6570\u5b57\uff08a-z\uff0cA-Z\uff0c0-9\uff09\u4ee5\u53ca\u7834\u6298\u53f7&#39;-&#39;</li>\n\t<li>S \u975e\u7a7a</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u5bc6\u94a5\u683c\u5f0f\u5316",
        "tags": [],
        "companies": [
            "Google",
            "Amazon"
        ]
    },
    {
        "leetId": "483",
        "link": "smallest-good-base",
        "title": "Smallest Good Base",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "35.7%",
        "questionDescription": "<p>For an integer n, we call k&gt;=2 a <i><b>good base</b></i> of n, if all digits of n base k are 1.</p>\r\n\r\n<p>Now given a string representing n, you should return the smallest good base of n in string format.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;13&quot;\r\n<b>Output:</b> &quot;3&quot;\r\n<b>Explanation:</b> 13 base 3 is 111.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;4681&quot;\r\n<b>Output:</b> &quot;8&quot;\r\n<b>Explanation:</b> 4681 base 8 is 11111.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;1000000000000000000&quot;\r\n<b>Output:</b> &quot;999999999999999999&quot;\r\n<b>Explanation:</b> 1000000000000000000 base 999999999999999999 is 11.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The range of n is [3, 10^18].</li>\r\n\t<li>The string representing n is always valid and will not have leading zeros.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6574\u6570 n, \u5982\u679cn\u7684k\uff08k&gt;=2\uff09\u8fdb\u5236\u6570\u7684\u6240\u6709\u6570\u4f4d\u5168\u4e3a1\uff0c\u5219\u79f0&nbsp;k\uff08k&gt;=2\uff09\u662f n \u7684\u4e00\u4e2a<em><strong>\u597d\u8fdb\u5236</strong></em>\u3002</p>\n\n<p>\u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u7ed9\u51fa n, \u4ee5\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u8fd4\u56de n \u7684\u6700\u5c0f\u597d\u8fdb\u5236\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>&quot;13&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;3&quot;\n<strong>\u89e3\u91ca\uff1a</strong>13 \u7684 3 \u8fdb\u5236\u662f 111\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>&quot;4681&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;8&quot;\n<strong>\u89e3\u91ca\uff1a</strong>4681 \u7684 8 \u8fdb\u5236\u662f 11111\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>&quot;1000000000000000000&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;999999999999999999&quot;\n<strong>\u89e3\u91ca\uff1a</strong>1000000000000000000 \u7684 999999999999999999 \u8fdb\u5236\u662f 11\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>n\u7684\u53d6\u503c\u8303\u56f4\u662f&nbsp;[3, 10^18]\u3002</li>\n\t<li>\u8f93\u5165\u603b\u662f\u6709\u6548\u4e14\u6ca1\u6709\u524d\u5bfc 0\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u6700\u5c0f\u597d\u8fdb\u5236",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "484",
        "link": "find-permutation",
        "title": "Find Permutation",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "9",
        "questionDescription": "\n<p>\nBy now, you are given a <b>secret signature</b> consisting of character 'D' and 'I'. 'D' represents a decreasing relationship between two numbers, 'I' represents an increasing relationship between two numbers. And our <b>secret signature</b> was constructed by a special integer array, which contains uniquely all the different number from 1 to n (n is the length of the secret signature plus 1). For example, the secret signature \"DI\" can be constructed by array [2,1,3] or [3,1,2], but won't be constructed by array [3,2,4] or [2,1,3,4], which are both illegal constructing special string that can't represent the \"DI\" <b>secret signature</b>.\n</p>\n<p>\nOn the other hand, now your job is to find the lexicographically smallest permutation of [1, 2, ... n] could refer to the given <b>secret signature</b> in the input.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> \"I\"\n<b>Output:</b> [1,2]\n<b>Explanation:</b> [1,2] is the only legal initial spectial string can construct secret signature \"I\", where the number 1 and 2 construct an increasing relationship.\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> \"DI\"\n<b>Output:</b> [2,1,3]\n<b>Explanation:</b> Both [2,1,3] and [3,1,2] can construct the secret signature \"DI\", <br/>but since we want to find the one with the smallest lexicographical permutation, you need to output [2,1,3]\n</pre>\n<p></p>\n<p><b>Note:</b>\n</p><li>The input string will only contain the character 'D' and 'I'.</li>\n<li>The length of input string is a positive integer and will not exceed 10,000</li>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>\nBy now, you are given a <b>secret signature</b> consisting of character 'D' and 'I'. 'D' represents a decreasing relationship between two numbers, 'I' represents an increasing relationship between two numbers. And our <b>secret signature</b> was constructed by a special integer array, which contains uniquely all the different number from 1 to n (n is the length of the secret signature plus 1). For example, the secret signature \"DI\" can be constructed by array [2,1,3] or [3,1,2], but won't be constructed by array [3,2,4] or [2,1,3,4], which are both illegal constructing special string that can't represent the \"DI\" <b>secret signature</b>.\n</p>\n<p>\nOn the other hand, now your job is to find the lexicographically smallest permutation of [1, 2, ... n] could refer to the given <b>secret signature</b> in the input.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> \"I\"\n<b>Output:</b> [1,2]\n<b>Explanation:</b> [1,2] is the only legal initial spectial string can construct secret signature \"I\", where the number 1 and 2 construct an increasing relationship.\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> \"DI\"\n<b>Output:</b> [2,1,3]\n<b>Explanation:</b> Both [2,1,3] and [3,1,2] can construct the secret signature \"DI\", <br/>but since we want to find the one with the smallest lexicographical permutation, you need to output [2,1,3]\n</pre>\n<p></p>\n<p><b>Note:</b>\n</p><li>The input string will only contain the character 'D' and 'I'.</li>\n<li>The length of input string is a positive integer and will not exceed 10,000</li>\n<p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "485",
        "link": "max-consecutive-ones",
        "title": "Max Consecutive Ones",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "52.6%",
        "questionDescription": "<p>Given a binary array, find the maximum number of consecutive 1s in this array.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,1,0,1,1,1]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> The first two digits or the last three digits are consecutive 1s.\r\n    The maximum number of consecutive 1s is 3.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<ul>\r\n<li>The input array will only contain <code>0</code> and <code>1</code>.</li>\r\n<li>The length of input array is a positive integer and will not exceed 10,000</li>\r\n</ul>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u7ec4\uff0c \u8ba1\u7b97\u5176\u4e2d\u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,1,0,1,1,1]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u5f00\u5934\u7684\u4e24\u4f4d\u548c\u6700\u540e\u7684\u4e09\u4f4d\u90fd\u662f\u8fde\u7eed1\uff0c\u6240\u4ee5\u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570\u662f 3.\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li>\u8f93\u5165\u7684\u6570\u7ec4\u53ea\u5305\u542b&nbsp;<code>0</code> \u548c<code>1</code>\u3002</li>\n\t<li>\u8f93\u5165\u6570\u7ec4\u7684\u957f\u5ea6\u662f\u6b63\u6574\u6570\uff0c\u4e14\u4e0d\u8d85\u8fc7 10,000\u3002</li>\n</ul>\n",
        "titleZh": "\u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "486",
        "link": "predict-the-winner",
        "title": "Predict the Winner",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "44.0%",
        "questionDescription": "<p>Given an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins. </p>\r\n\r\n<p>Given an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score. </p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1, 5, 2]\r\n<b>Output:</b> False\r\n<b>Explanation:</b> Initially, player 1 can choose between 1 and 2. <br/>If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). <br/>So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. <br/>Hence, player 1 will never be the winner and you need to return False.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [1, 5, 233, 7]\r\n<b>Output:</b> True\r\n<b>Explanation:</b> Player 1 first chooses 1. Then player 2 have to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.<br />Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>1 <= length of the array <= 20. </li>\r\n<li>Any scores in the given array are non-negative integers and will not exceed 10,000,000.</li>\r\n<li>If the scores of both players are equal, then player 1 is still the winner.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u793a\u5206\u6570\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\u3002 \u73a9\u5bb61\u4ece\u6570\u7ec4\u4efb\u610f\u4e00\u7aef\u62ff\u53d6\u4e00\u4e2a\u5206\u6570\uff0c\u968f\u540e\u73a9\u5bb62\u7ee7\u7eed\u4ece\u5269\u4f59\u6570\u7ec4\u4efb\u610f\u4e00\u7aef\u62ff\u53d6\u5206\u6570\uff0c\u7136\u540e\u73a9\u5bb61\u62ff\uff0c&hellip;&hellip;\u3002\u6bcf\u6b21\u4e00\u4e2a\u73a9\u5bb6\u53ea\u80fd\u62ff\u53d6\u4e00\u4e2a\u5206\u6570\uff0c\u5206\u6570\u88ab\u62ff\u53d6\u4e4b\u540e\u4e0d\u518d\u53ef\u53d6\u3002\u76f4\u5230\u6ca1\u6709\u5269\u4f59\u5206\u6570\u53ef\u53d6\u65f6\u6e38\u620f\u7ed3\u675f\u3002\u6700\u7ec8\u83b7\u5f97\u5206\u6570\u603b\u548c\u6700\u591a\u7684\u73a9\u5bb6\u83b7\u80dc\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u793a\u5206\u6570\u7684\u6570\u7ec4\uff0c\u9884\u6d4b\u73a9\u5bb61\u662f\u5426\u4f1a\u6210\u4e3a\u8d62\u5bb6\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u73a9\u5bb6\u7684\u73a9\u6cd5\u90fd\u4f1a\u4f7f\u4ed6\u7684\u5206\u6570\u6700\u5927\u5316\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1, 5, 2]\n<strong>\u8f93\u51fa:</strong> False\n<strong>\u89e3\u91ca:</strong> \u4e00\u5f00\u59cb\uff0c\u73a9\u5bb61\u53ef\u4ee5\u4ece1\u548c2\u4e2d\u8fdb\u884c\u9009\u62e9\u3002\n\u5982\u679c\u4ed6\u9009\u62e92\uff08\u6216\u80051\uff09\uff0c\u90a3\u4e48\u73a9\u5bb62\u53ef\u4ee5\u4ece1\uff08\u6216\u80052\uff09\u548c5\u4e2d\u8fdb\u884c\u9009\u62e9\u3002\u5982\u679c\u73a9\u5bb62\u9009\u62e9\u4e865\uff0c\u90a3\u4e48\u73a9\u5bb61\u5219\u53ea\u5269\u4e0b1\uff08\u6216\u80052\uff09\u53ef\u9009\u3002\n\u6240\u4ee5\uff0c\u73a9\u5bb61\u7684\u6700\u7ec8\u5206\u6570\u4e3a 1 + 2 = 3\uff0c\u800c\u73a9\u5bb62\u4e3a 5\u3002\n\u56e0\u6b64\uff0c\u73a9\u5bb61\u6c38\u8fdc\u4e0d\u4f1a\u6210\u4e3a\u8d62\u5bb6\uff0c\u8fd4\u56de False\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1, 5, 233, 7]\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong> \u73a9\u5bb61\u4e00\u5f00\u59cb\u9009\u62e91\u3002\u7136\u540e\u73a9\u5bb62\u5fc5\u987b\u4ece5\u548c7\u4e2d\u8fdb\u884c\u9009\u62e9\u3002\u65e0\u8bba\u73a9\u5bb62\u9009\u62e9\u4e86\u54ea\u4e2a\uff0c\u73a9\u5bb61\u90fd\u53ef\u4ee5\u9009\u62e9233\u3002\n\u6700\u7ec8\uff0c\u73a9\u5bb61\uff08234\u5206\uff09\u6bd4\u73a9\u5bb62\uff0812\u5206\uff09\u83b7\u5f97\u66f4\u591a\u7684\u5206\u6570\uff0c\u6240\u4ee5\u8fd4\u56de True\uff0c\u8868\u793a\u73a9\u5bb61\u53ef\u4ee5\u6210\u4e3a\u8d62\u5bb6\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>1 &lt;= \u7ed9\u5b9a\u7684\u6570\u7ec4\u957f\u5ea6&nbsp;&lt;= 20.</li>\n\t<li>\u6570\u7ec4\u91cc\u6240\u6709\u5206\u6570\u90fd\u4e3a\u975e\u8d1f\u6570\u4e14\u4e0d\u4f1a\u5927\u4e8e10000000\u3002</li>\n\t<li>\u5982\u679c\u6700\u7ec8\u4e24\u4e2a\u73a9\u5bb6\u7684\u5206\u6570\u76f8\u7b49\uff0c\u90a3\u4e48\u73a9\u5bb61\u4ecd\u4e3a\u8d62\u5bb6\u3002</li>\n</ol>\n",
        "titleZh": "\u9884\u6d4b\u8d62\u5bb6",
        "tags": [
            {
                "tag": "Minimax",
                "link": "minimax",
                "tagZh": "\u6781\u5c0f\u5316\u6781\u5927"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Apple",
            "Yahoo",
            "Works Applications"
        ]
    },
    {
        "leetId": "487",
        "link": "max-consecutive-ones-ii",
        "title": "Max Consecutive Ones II",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "19",
        "questionDescription": "\n<p>\nGiven a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> [1,0,1,1,0]\n<b>Output:</b> 4\n<b>Explanation:</b> Flip the first zero will get the the maximum number of consecutive 1s.\n    After flipping, the maximum number of consecutive 1s is 4.\n</pre>\n<p></p>\n<p><b>Note:</b>\n</p><ul>\n<li>The input array will only contain <code>0</code> and <code>1</code>.</li>\n<li>The length of input array is a positive integer and will not exceed 10,000</li>\n</ul>\n<p></p>\n<p><b>Follow up:</b><br/>\nWhat if the input numbers come in one by one as an <b>infinite stream</b>? In other words, you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently?\n</p>\n",
        "questionDescriptionZh": "\n<p>\nGiven a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> [1,0,1,1,0]\n<b>Output:</b> 4\n<b>Explanation:</b> Flip the first zero will get the the maximum number of consecutive 1s.\n    After flipping, the maximum number of consecutive 1s is 4.\n</pre>\n<p></p>\n<p><b>Note:</b>\n</p><ul>\n<li>The input array will only contain <code>0</code> and <code>1</code>.</li>\n<li>The length of input array is a positive integer and will not exceed 10,000</li>\n</ul>\n<p></p>\n<p><b>Follow up:</b><br/>\nWhat if the input numbers come in one by one as an <b>infinite stream</b>? In other words, you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently?\n</p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "488",
        "link": "zuma-game",
        "title": "Zuma Game",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "41.1%",
        "questionDescription": "<p>Think about Zuma Game. You have a row of balls on the table, colored red(R), yellow(Y), blue(B), green(G), and white(W). You also have several balls in your hand.</p>\r\n<p>\r\nEach time, you may choose a ball in your hand, and insert it into the row (including the leftmost place and rightmost place). Then, if there is a group of 3 or more balls in the same color touching, remove these balls. Keep doing this until no more balls can be removed.</p>\r\n<p>\r\nFind the minimal balls you have to insert to remove all the balls on the table. If you cannot remove all the balls, output -1.\r\n</p>\r\n<pre>\r\n<p><b>Examples:</b><br />\r\n<b>Input:</b> \"WRRBBW\", \"RB\"\r\n<b>Output:</b> -1\r\n<b>Explanation:</b> WRRBBW -> WRR[R]BBW -> WBBW -> WBB[B]W -> WW\r\n\r\n<b>Input:</b> \"WWRRBBWW\", \"WRBRW\"\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> WWRRBBWW -> WWRR[R]BBWW -> WWBBWW -> WWBB[B]WW -> WWWW -> empty\r\n\r\n<b>Input:</b>\"G\", \"GGGGG\"\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> G -> G[G] -> GG[G] -> empty \r\n\r\n<b>Input:</b> \"RBYYBBRRB\", \"YRBGB\"\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> RBYYBBRRB -> RBYY[Y]BBRRB -> RBBBRRB -> RRRB -> B -> B[B] -> BB[B] -> empty \r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>You may assume that the initial row of balls on the table won\u2019t have any 3 or more consecutive balls with the same color.</li>\r\n<li>The number of balls on the table won't exceed 20, and the string represents these balls is called \"board\" in the input.</li>\r\n<li>The number of balls in your hand won't exceed 5, and the string represents these balls is called \"hand\" in the input.</li>\r\n<li>Both input strings will be non-empty and only contain characters 'R','Y','B','G','W'.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u56de\u5fc6\u4e00\u4e0b\u7956\u739b\u6e38\u620f\u3002\u73b0\u5728\u684c\u4e0a\u6709\u4e00\u4e32\u7403\uff0c\u989c\u8272\u6709\u7ea2\u8272(R)\uff0c\u9ec4\u8272(Y)\uff0c\u84dd\u8272(B)\uff0c\u7eff\u8272(G)\uff0c\u8fd8\u6709\u767d\u8272(W)\u3002 \u73b0\u5728\u4f60\u624b\u91cc\u4e5f\u6709\u51e0\u4e2a\u7403\u3002</p>\n\n<p>\u6bcf\u4e00\u6b21\uff0c\u4f60\u53ef\u4ee5\u4ece\u624b\u91cc\u7684\u7403\u9009\u4e00\u4e2a\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u7403\u63d2\u5165\u5230\u4e00\u4e32\u7403\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u4e0a\uff08\u5305\u62ec\u6700\u5de6\u7aef\uff0c\u6700\u53f3\u7aef\uff09\u3002\u63a5\u7740\uff0c\u5982\u679c\u6709\u51fa\u73b0\u4e09\u4e2a\u6216\u8005\u4e09\u4e2a\u4ee5\u4e0a\u989c\u8272\u76f8\u540c\u7684\u7403\u76f8\u8fde\u7684\u8bdd\uff0c\u5c31\u628a\u5b83\u4eec\u79fb\u9664\u6389\u3002\u91cd\u590d\u8fd9\u4e00\u6b65\u9aa4\u76f4\u5230\u684c\u4e0a\u6240\u6709\u7684\u7403\u90fd\u88ab\u79fb\u9664\u3002</p>\n\n<p>\u627e\u5230\u63d2\u5165\u5e76\u53ef\u4ee5\u79fb\u9664\u6389\u684c\u4e0a\u6240\u6709\u7403\u6240\u9700\u7684\u6700\u5c11\u7684\u7403\u6570\u3002\u5982\u679c\u4e0d\u80fd\u79fb\u9664\u684c\u4e0a\u6240\u6709\u7684\u7403\uff0c\u8f93\u51fa -1 \u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> &quot;WRRBBW&quot;, &quot;RB&quot; \n<strong>\u8f93\u51fa:</strong> -1 \n<strong>\u89e3\u91ca:</strong> WRRBBW -&gt; WRR[R]BBW -&gt; WBBW -&gt; WBB[B]W -&gt; WW \uff08\u7ffb\u8bd1\u8005\u6807\u6ce8\uff1a\u624b\u4e0a\u7403\u5df2\u7ecf\u7528\u5b8c\uff0c\u684c\u4e0a\u8fd8\u5269\u4e24\u4e2a\u7403\u65e0\u6cd5\u6d88\u9664\uff0c\u8fd4\u56de-1\uff09\n\n<strong>\u8f93\u5165:</strong> &quot;WWRRBBWW&quot;, &quot;WRBRW&quot; \n<strong>\u8f93\u51fa:</strong> 2 \n<strong>\u89e3\u91ca:</strong> WWRRBBWW -&gt; WWRR[R]BBWW -&gt; WWBBWW -&gt; WWBB[B]WW -&gt; WWWW -&gt; empty\n\n<strong>\u8f93\u5165:</strong>&quot;G&quot;, &quot;GGGGG&quot; \n<strong>\u8f93\u51fa:</strong> 2 \n<strong>\u89e3\u91ca:</strong> G -&gt; G[G] -&gt; GG[G] -&gt; empty \n\n<strong>\u8f93\u5165:</strong> &quot;RBYYBBRRB&quot;, &quot;YRBGB&quot; \n<strong>\u8f93\u51fa:</strong> 3 \n<strong>\u89e3\u91ca:</strong> RBYYBBRRB -&gt; RBYY[Y]BBRRB -&gt; RBBBRRB -&gt; RRRB -&gt; B -&gt; B[B] -&gt; BB[B] -&gt; empty \n</pre>\n\n<p><strong>\u6807\u6ce8:</strong></p>\n\n<ol>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u684c\u4e0a\u4e00\u5f00\u59cb\u7684\u7403\u4e2d\uff0c\u4e0d\u4f1a\u6709\u4e09\u4e2a\u53ca\u4e09\u4e2a\u4ee5\u4e0a\u989c\u8272\u76f8\u540c\u4e14\u8fde\u7740\u7684\u7403\u3002</li>\n\t<li>\u684c\u4e0a\u7684\u7403\u4e0d\u4f1a\u8d85\u8fc720\u4e2a\uff0c\u8f93\u5165\u7684\u6570\u636e\u4e2d\u4ee3\u8868\u8fd9\u4e9b\u7403\u7684\u5b57\u7b26\u4e32\u7684\u540d\u5b57\u662f &quot;board&quot; \u3002</li>\n\t<li>\u4f60\u624b\u4e2d\u7684\u7403\u4e0d\u4f1a\u8d85\u8fc75\u4e2a\uff0c\u8f93\u5165\u7684\u6570\u636e\u4e2d\u4ee3\u8868\u8fd9\u4e9b\u7403\u7684\u5b57\u7b26\u4e32\u7684\u540d\u5b57\u662f &quot;hand&quot;\u3002</li>\n\t<li>\u8f93\u5165\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u5747\u4e3a\u975e\u7a7a\u5b57\u7b26\u4e32\uff0c\u4e14\u53ea\u5305\u542b\u5b57\u7b26 &#39;R&#39;,&#39;Y&#39;,&#39;B&#39;,&#39;G&#39;,&#39;W&#39;\u3002</li>\n</ol>\n",
        "titleZh": "\u7956\u739b\u6e38\u620f",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Bloomberg",
            "Baidu"
        ]
    },
    {
        "leetId": "489",
        "link": "robot-room-cleaner",
        "title": "Robot Room Cleaner",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "33",
        "questionDescription": "\n<p>Given a robot cleaner in a room modeled as a grid.</p>\n<p>Each cell in the grid can be empty or blocked.</p>\n<p>The robot cleaner with 4 given APIs can move forward, turn left or turn right. Each turn it made is 90 degrees.</p>\n<p>When it tries to move into a blocked cell, its bumper sensor detects the obstacle and it stays on the current cell.</p>\n<p>Design an algorithm to clean the entire room using only the 4 given APIs shown below.</p>\n<pre>interface Robot {\n\u00a0 // returns true if next cell is open and robot moves into the cell.\n\u00a0 // returns false if next cell is obstacle and robot stays on the current cell.\n\u00a0 boolean move();\n\n  // Robot will stay on the same cell after calling turnLeft/turnRight.\n\u00a0 // Each turn will be 90 degrees.\n\u00a0 void turnLeft();\n\u00a0 void turnRight();\n\n  // Clean the current cell.\n  void clean();\n}\n</pre>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong>\nroom = [\n  [1,1,1,1,1,0,1,1],\n  [1,1,1,1,1,0,1,1],\n  [1,0,1,1,1,1,1,1],\n  [0,0,0,1,0,0,0,0],\n  [1,1,1,1,1,1,1,1]\n],\nrow = 1,\ncol = 3\n\n<strong>Explanation:</strong>\nAll grids in the room are marked by either 0 or 1.\n0 means the cell is blocked, while 1 means the cell is accessible.\nThe robot initially starts at the position of row=1, col=3.\nFrom the top left corner, its position is one row below and three columns right.\n</pre>\n<p><strong>Notes:</strong></p>\n<ol>\n<li>The input is only given to initialize the room and the robot's position internally.\u00a0You must solve this problem \"blindfolded\". In other words, you must control the robot using only the mentioned 4 APIs, without knowing the room layout and the initial robot's position.</li>\n<li>The robot's initial position will always be in an accessible cell.</li>\n<li>The initial direction of the robot will be facing up.</li>\n<li>All accessible cells are connected, which means the all cells marked as 1 will be accessible by the robot.</li>\n<li>Assume all four edges of the grid are all surrounded by wall.</li>\n</ol>\n",
        "questionDescriptionZh": "\n<p>Given a robot cleaner in a room modeled as a grid.</p>\n<p>Each cell in the grid can be empty or blocked.</p>\n<p>The robot cleaner with 4 given APIs can move forward, turn left or turn right. Each turn it made is 90 degrees.</p>\n<p>When it tries to move into a blocked cell, its bumper sensor detects the obstacle and it stays on the current cell.</p>\n<p>Design an algorithm to clean the entire room using only the 4 given APIs shown below.</p>\n<pre>interface Robot {\n\u00a0 // returns true if next cell is open and robot moves into the cell.\n\u00a0 // returns false if next cell is obstacle and robot stays on the current cell.\n\u00a0 boolean move();\n\n  // Robot will stay on the same cell after calling turnLeft/turnRight.\n\u00a0 // Each turn will be 90 degrees.\n\u00a0 void turnLeft();\n\u00a0 void turnRight();\n\n  // Clean the current cell.\n  void clean();\n}\n</pre>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong>\nroom = [\n  [1,1,1,1,1,0,1,1],\n  [1,1,1,1,1,0,1,1],\n  [1,0,1,1,1,1,1,1],\n  [0,0,0,1,0,0,0,0],\n  [1,1,1,1,1,1,1,1]\n],\nrow = 1,\ncol = 3\n\n<strong>Explanation:</strong>\nAll grids in the room are marked by either 0 or 1.\n0 means the cell is blocked, while 1 means the cell is accessible.\nThe robot initially starts at the position of row=1, col=3.\nFrom the top left corner, its position is one row below and three columns right.\n</pre>\n<p><strong>Notes:</strong></p>\n<ol>\n<li>The input is only given to initialize the room and the robot's position internally.\u00a0You must solve this problem \"blindfolded\". In other words, you must control the robot using only the mentioned 4 APIs, without knowing the room layout and the initial robot's position.</li>\n<li>The robot's initial position will always be in an accessible cell.</li>\n<li>The initial direction of the robot will be facing up.</li>\n<li>All accessible cells are connected, which means the all cells marked as 1 will be accessible by the robot.</li>\n<li>Assume all four edges of the grid are all surrounded by wall.</li>\n</ol>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook"
        ]
    },
    {
        "leetId": "490",
        "link": "the-maze",
        "title": "The Maze",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "40",
        "questionDescription": "\n<p>There is a <b>ball</b> in a maze with empty spaces and walls. The ball can go through empty spaces by rolling <b>up</b>, <b>down</b>, <b>left</b> or <b>right</b>, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.</p>\n<p>Given the ball's <b>start position</b>, the <b>destination</b> and the <b>maze</b>, determine whether the ball could stop at the destination.</p>\n<p>The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes.</p>\n<p>\n<b>Example 1</b>\n</p><pre><b>Input 1:</b> a maze represented by a 2D array\n\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 1 0\n1 1 0 1 1\n0 0 0 0 0\n\n<b>Input 2:</b> start coordinate (rowStart, colStart) = (0, 4)\n<b>Input 3:</b> destination coordinate (rowDest, colDest) = (4, 4)\n\n<b>Output:</b> true\n<b>Explanation:</b> One possible way is : left -&gt; down -&gt; left -&gt; down -&gt; right -&gt; down -&gt; right.\n<img src=\"/static/images/problemset/maze_1_example_1.png\" width=\"30%\"/>\n</pre>\n<p></p>\n<p>\n<b>Example 2</b>\n</p><pre><b>Input 1:</b> a maze represented by a 2D array\n\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 1 0\n1 1 0 1 1\n0 0 0 0 0\n\n<b>Input 2:</b> start coordinate (rowStart, colStart) = (0, 4)\n<b>Input 3:</b> destination coordinate (rowDest, colDest) = (3, 2)\n\n<b>Output:</b> false\n<b>Explanation:</b> There is no way for the ball to stop at the destination.\n<img src=\"/static/images/problemset/maze_1_example_2.png\" width=\"30%\"/>\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>There is only one ball and one destination in the maze.</li>\n<li>Both the ball and the destination exist on an empty space, and they will not be at the same position initially.</li>\n<li>The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.</li>\n<li>The maze contains at least 2 empty spaces, and both the width and height of the maze won't exceed 100.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>There is a <b>ball</b> in a maze with empty spaces and walls. The ball can go through empty spaces by rolling <b>up</b>, <b>down</b>, <b>left</b> or <b>right</b>, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.</p>\n<p>Given the ball's <b>start position</b>, the <b>destination</b> and the <b>maze</b>, determine whether the ball could stop at the destination.</p>\n<p>The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes.</p>\n<p>\n<b>Example 1</b>\n</p><pre><b>Input 1:</b> a maze represented by a 2D array\n\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 1 0\n1 1 0 1 1\n0 0 0 0 0\n\n<b>Input 2:</b> start coordinate (rowStart, colStart) = (0, 4)\n<b>Input 3:</b> destination coordinate (rowDest, colDest) = (4, 4)\n\n<b>Output:</b> true\n<b>Explanation:</b> One possible way is : left -&gt; down -&gt; left -&gt; down -&gt; right -&gt; down -&gt; right.\n<img src=\"/static/images/problemset/maze_1_example_1.png\" width=\"30%\"/>\n</pre>\n<p></p>\n<p>\n<b>Example 2</b>\n</p><pre><b>Input 1:</b> a maze represented by a 2D array\n\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 1 0\n1 1 0 1 1\n0 0 0 0 0\n\n<b>Input 2:</b> start coordinate (rowStart, colStart) = (0, 4)\n<b>Input 3:</b> destination coordinate (rowDest, colDest) = (3, 2)\n\n<b>Output:</b> false\n<b>Explanation:</b> There is no way for the ball to stop at the destination.\n<img src=\"/static/images/problemset/maze_1_example_2.png\" width=\"30%\"/>\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>There is only one ball and one destination in the maze.</li>\n<li>Both the ball and the destination exist on an empty space, and they will not be at the same position initially.</li>\n<li>The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.</li>\n<li>The maze contains at least 2 empty spaces, and both the width and height of the maze won't exceed 100.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber"
        ]
    },
    {
        "leetId": "491",
        "link": "increasing-subsequences",
        "title": "Increasing Subsequences",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "41.2%",
        "questionDescription": "<p>\r\nGiven an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2 .\r\n</p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> [4, 6, 7, 7]\r\n<b>Output:</b> [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of the given array will not exceed 15.</li>\r\n<li>The range of integer in the given array is [-100,100].</li>\r\n<li>The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u578b\u6570\u7ec4, \u4f60\u7684\u4efb\u52a1\u662f\u627e\u5230\u6240\u6709\u8be5\u6570\u7ec4\u7684\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u81f3\u5c11\u662f2\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [4, 6, 7, 7]\n<strong>\u8f93\u51fa:</strong> [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc715\u3002</li>\n\t<li>\u6570\u7ec4\u4e2d\u7684\u6574\u6570\u8303\u56f4\u662f&nbsp;[-100,100]\u3002</li>\n\t<li>\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u53ef\u80fd\u5305\u542b\u91cd\u590d\u6570\u5b57\uff0c\u76f8\u7b49\u7684\u6570\u5b57\u5e94\u8be5\u88ab\u89c6\u4e3a\u9012\u589e\u7684\u4e00\u79cd\u60c5\u51b5\u3002</li>\n</ol>\n",
        "titleZh": "\u9012\u589e\u5b50\u5e8f\u5217",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Facebook",
            "Yahoo"
        ]
    },
    {
        "leetId": "492",
        "link": "construct-the-rectangle",
        "title": "Construct the Rectangle",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "45.3%",
        "questionDescription": "<p>\r\nFor a web developer, it is very important to know how to design a web page's size. So, given a specific rectangular web page\u2019s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:<pre>\r\n1. The area of the rectangular web page you designed must equal to the given target area.\r\n<br>2. The width W should not be larger than the length L, which means L >= W.\r\n<br>3. The difference between length L and width W should be as small as possible.\r\n</pre>\r\nYou need to output the length L and the width W of the web page you designed in sequence.\r\n</p>\r\n\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> 4\r\n<b>Output:</b> [2, 2]\r\n<b>Explanation:</b> The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \r\nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The given area won't exceed 10,000,000 and is a positive integer</li>\r\n<li>The web page's width and length you designed must be positive integers.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u4f5c\u4e3a\u4e00\u4f4dweb\u5f00\u53d1\u8005\uff0c \u61c2\u5f97\u600e\u6837\u53bb\u89c4\u5212\u4e00\u4e2a\u9875\u9762\u7684\u5c3a\u5bf8\u662f\u5f88\u91cd\u8981\u7684\u3002 \u73b0\u7ed9\u5b9a\u4e00\u4e2a\u5177\u4f53\u7684\u77e9\u5f62\u9875\u9762\u9762\u79ef\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8bbe\u8ba1\u4e00\u4e2a\u957f\u5ea6\u4e3a L \u548c\u5bbd\u5ea6\u4e3a W \u4e14\u6ee1\u8db3\u4ee5\u4e0b\u8981\u6c42\u7684\u77e9\u5f62\u7684\u9875\u9762\u3002\u8981\u6c42\uff1a</p>\n\n<pre>\n1. \u4f60\u8bbe\u8ba1\u7684\u77e9\u5f62\u9875\u9762\u5fc5\u987b\u7b49\u4e8e\u7ed9\u5b9a\u7684\u76ee\u6807\u9762\u79ef\u3002\n\n2. \u5bbd\u5ea6 W \u4e0d\u5e94\u5927\u4e8e\u957f\u5ea6 L\uff0c\u6362\u8a00\u4e4b\uff0c\u8981\u6c42 L &gt;= W \u3002\n\n3. \u957f\u5ea6 L \u548c\u5bbd\u5ea6 W \u4e4b\u95f4\u7684\u5dee\u8ddd\u5e94\u5f53\u5c3d\u53ef\u80fd\u5c0f\u3002\n</pre>\n\n<p>\u4f60\u9700\u8981\u6309\u987a\u5e8f\u8f93\u51fa\u4f60\u8bbe\u8ba1\u7684\u9875\u9762\u7684\u957f\u5ea6 L \u548c\u5bbd\u5ea6 W\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 4\n<strong>\u8f93\u51fa:</strong> [2, 2]\n<strong>\u89e3\u91ca:</strong> \u76ee\u6807\u9762\u79ef\u662f 4\uff0c \u6240\u6709\u53ef\u80fd\u7684\u6784\u9020\u65b9\u6848\u6709 [1,4], [2,2], [4,1]\u3002\n\u4f46\u662f\u6839\u636e\u8981\u6c422\uff0c[1,4] \u4e0d\u7b26\u5408\u8981\u6c42; \u6839\u636e\u8981\u6c423\uff0c[2,2] \u6bd4 [4,1] \u66f4\u80fd\u7b26\u5408\u8981\u6c42. \u6240\u4ee5\u8f93\u51fa\u957f\u5ea6 L \u4e3a 2\uff0c \u5bbd\u5ea6 W \u4e3a 2\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u7684\u9762\u79ef\u4e0d\u5927\u4e8e 10,000,000 \u4e14\u4e3a\u6b63\u6574\u6570\u3002</li>\n\t<li>\u4f60\u8bbe\u8ba1\u7684\u9875\u9762\u7684\u957f\u5ea6\u548c\u5bbd\u5ea6\u5fc5\u987b\u90fd\u662f\u6b63\u6574\u6570\u3002</li>\n</ol>\n",
        "titleZh": "\u6784\u9020\u77e9\u5f62",
        "tags": []
    },
    {
        "leetId": "493",
        "link": "reverse-pairs",
        "title": "Reverse Pairs",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "18.0%",
        "questionDescription": "<p>Given an array <code>nums</code>, we call <code>(i, j)</code> an <b><i>important reverse pair</i></b> if <code>i &lt; j</code> and <code>nums[i] &gt; 2*nums[j]</code>.</p>\r\n\r\n<p>You need to return the number of important reverse pairs in the given array.</p>\r\n\r\n<p><b>Example1:</b>\r\n<pre>\r\n<b>Input</b>: [1,3,2,3,1]\r\n<b>Output</b>: 2\r\n</pre></p>\r\n\r\n<p><b>Example2:</b>\r\n<pre>\r\n<b>Input</b>: [2,4,3,5,1]\r\n<b>Output</b>: 3\r\n</pre></p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of the given array will not exceed <code>50,000</code>.</li>\r\n<li>All the numbers in the input array are in the range of 32-bit integer.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4&nbsp;<code>nums</code>&nbsp;\uff0c\u5982\u679c&nbsp;<code>i &lt; j</code>&nbsp;\u4e14&nbsp;<code>nums[i] &gt; 2*nums[j]</code>&nbsp;\u6211\u4eec\u5c31\u5c06&nbsp;<code>(i, j)</code>&nbsp;\u79f0\u4f5c\u4e00\u4e2a<strong><em>\u91cd\u8981\u7ffb\u8f6c\u5bf9</em></strong>\u3002</p>\n\n<p>\u4f60\u9700\u8981\u8fd4\u56de\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u7684\u91cd\u8981\u7ffb\u8f6c\u5bf9\u7684\u6570\u91cf\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165</strong>: [1,3,2,3,1]\n<strong>\u8f93\u51fa</strong>: 2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165</strong>: [2,4,3,5,1]\n<strong>\u8f93\u51fa</strong>: 3\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7<code>50000</code>\u3002</li>\n\t<li>\u8f93\u5165\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u6570\u5b57\u90fd\u572832\u4f4d\u6574\u6570\u7684\u8868\u793a\u8303\u56f4\u5185\u3002</li>\n</ol>\n",
        "titleZh": "\u7ffb\u8f6c\u5bf9",
        "tags": [
            {
                "tag": "Binary Indexed Tree",
                "link": "binary-indexed-tree",
                "tagZh": "\u6811\u72b6\u6570\u7ec4"
            },
            {
                "tag": "Segment Tree",
                "link": "segment-tree",
                "tagZh": "\u7ebf\u6bb5\u6811"
            },
            {
                "tag": "Binary Search Tree",
                "link": "binary-search-tree",
                "tagZh": "\u4e8c\u53c9\u641c\u7d22\u6811"
            },
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Uber",
            "Apple"
        ]
    },
    {
        "leetId": "494",
        "link": "target-sum",
        "title": "Target Sum",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "40.9%",
        "questionDescription": "<p>\r\nYou are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols <code>+</code> and <code>-</code>. For each integer, you should choose one from <code>+</code> and <code>-</code> as its new symbol.\r\n</p> \r\n\r\n<p>Find out how many ways to assign symbols to make sum of integers equal to target S.  \r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> nums is [1, 1, 1, 1, 1], S is 3. \r\n<b>Output:</b> 5\r\n<b>Explanation:</b> \r\n\r\n-1+1+1+1+1 = 3\r\n+1-1+1+1+1 = 3\r\n+1+1-1+1+1 = 3\r\n+1+1+1-1+1 = 3\r\n+1+1+1+1-1 = 3\r\n\r\nThere are 5 ways to assign symbols to make the sum of nums be target 3.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of the given array is positive and will not exceed 20. </li>\r\n<li>The sum of elements in the given array will not exceed 1000.</li>\r\n<li>Your output answer is guaranteed to be fitted in a 32-bit integer.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0ca1, a2, ..., an, \u548c\u4e00\u4e2a\u76ee\u6807\u6570\uff0cS\u3002\u73b0\u5728\u4f60\u6709\u4e24\u4e2a\u7b26\u53f7&nbsp;<code>+</code>&nbsp;\u548c&nbsp;<code>-</code>\u3002\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u6574\u6570\uff0c\u4f60\u90fd\u53ef\u4ee5\u4ece&nbsp;<code>+</code>&nbsp;\u6216&nbsp;<code>-</code>\u4e2d\u9009\u62e9\u4e00\u4e2a\u7b26\u53f7\u6dfb\u52a0\u5728\u524d\u9762\u3002</p>\n\n<p>\u8fd4\u56de\u53ef\u4ee5\u4f7f\u6700\u7ec8\u6570\u7ec4\u548c\u4e3a\u76ee\u6807\u6570 S \u7684\u6240\u6709\u6dfb\u52a0\u7b26\u53f7\u7684\u65b9\u6cd5\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> nums: [1, 1, 1, 1, 1], S: 3\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\n\u4e00\u5171\u67095\u79cd\u65b9\u6cd5\u8ba9\u6700\u7ec8\u76ee\u6807\u548c\u4e3a3\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc720\uff0c\u5e76\u4e14\u6570\u7ec4\u4e2d\u7684\u503c\u5168\u4e3a\u6b63\u6570\u3002</li>\n\t<li>\u521d\u59cb\u7684\u6570\u7ec4\u7684\u548c\u4e0d\u4f1a\u8d85\u8fc71000\u3002</li>\n\t<li>\u4fdd\u8bc1\u8fd4\u56de\u7684\u6700\u7ec8\u7ed3\u679c\u4e3a32\u4f4d\u6574\u6570\u3002</li>\n</ol>\n",
        "titleZh": "\u76ee\u6807\u548c",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook"
        ]
    },
    {
        "leetId": "495",
        "link": "teemo-attacking",
        "title": "Teemo Attacking",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "49.9%",
        "questionDescription": "<p>In LOL world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo&#39;s attacking <b>ascending</b> time series towards Ashe and the poisoning time duration per Teemo&#39;s attacking, you need to output the total time that Ashe is in poisoned condition.</p>\r\n\r\n<p>You may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,4], 2\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. \r\nThis poisoned status will last 2 seconds until the end of time point 2. \r\nAnd at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. \r\nSo you finally need to output 4.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,2], 2\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. \r\nThis poisoned status will last 2 seconds until the end of time point 2. \r\nHowever, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. \r\nSince the poisoned status won&#39;t add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. \r\nSo you finally need to output 3.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>You may assume the length of given time series array won&#39;t exceed 10000.</li>\r\n\t<li>You may assume the numbers in the Teemo&#39;s attacking time series and his poisoning time duration per attacking are non-negative integers, which won&#39;t exceed 10,000,000.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u5728\u300a\u82f1\u96c4\u8054\u76df\u300b\u7684\u4e16\u754c\u4e2d\uff0c\u6709\u4e00\u4e2a\u53eb &ldquo;\u63d0\u83ab&rdquo; \u7684\u82f1\u96c4\uff0c\u4ed6\u7684\u653b\u51fb\u53ef\u4ee5\u8ba9\u654c\u65b9\u82f1\u96c4\u827e\u5e0c\uff08\u7f16\u8005\u6ce8\uff1a\u5bd2\u51b0\u5c04\u624b\uff09\u8fdb\u5165\u4e2d\u6bd2\u72b6\u6001\u3002\u73b0\u5728\uff0c\u7ed9\u51fa\u63d0\u83ab\u5bf9\u827e\u5e0c\u7684\u653b\u51fb\u65f6\u95f4\u5e8f\u5217\u548c\u63d0\u83ab\u653b\u51fb\u7684\u4e2d\u6bd2\u6301\u7eed\u65f6\u95f4\uff0c\u4f60\u9700\u8981\u8f93\u51fa\u827e\u5e0c\u7684\u4e2d\u6bd2\u72b6\u6001\u603b\u65f6\u957f\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u63d0\u83ab\u5728\u7ed9\u5b9a\u7684\u65f6\u95f4\u70b9\u8fdb\u884c\u653b\u51fb\uff0c\u5e76\u7acb\u5373\u4f7f\u827e\u5e0c\u5904\u4e8e\u4e2d\u6bd2\u72b6\u6001\u3002</p>\n\n<p><strong>\u793a\u4f8b1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,4], 2\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u539f\u56e0:</strong> \u5728\u7b2c 1 \u79d2\u5f00\u59cb\u65f6\uff0c\u63d0\u83ab\u5f00\u59cb\u5bf9\u827e\u5e0c\u8fdb\u884c\u653b\u51fb\u5e76\u4f7f\u5176\u7acb\u5373\u4e2d\u6bd2\u3002\u4e2d\u6bd2\u72b6\u6001\u4f1a\u7ef4\u6301 2 \u79d2\u949f\uff0c\u76f4\u5230\u7b2c 2 \u79d2\u949f\u7ed3\u675f\u3002\n\u5728\u7b2c 4 \u79d2\u5f00\u59cb\u65f6\uff0c\u63d0\u83ab\u518d\u6b21\u653b\u51fb\u827e\u5e0c\uff0c\u4f7f\u5f97\u827e\u5e0c\u83b7\u5f97\u53e6\u5916 2 \u79d2\u7684\u4e2d\u6bd2\u65f6\u95f4\u3002\n\u6240\u4ee5\u6700\u7ec8\u8f93\u51fa 4 \u79d2\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,2], 2\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u539f\u56e0:</strong> \u5728\u7b2c 1 \u79d2\u5f00\u59cb\u65f6\uff0c\u63d0\u83ab\u5f00\u59cb\u5bf9\u827e\u5e0c\u8fdb\u884c\u653b\u51fb\u5e76\u4f7f\u5176\u7acb\u5373\u4e2d\u6bd2\u3002\u4e2d\u6bd2\u72b6\u6001\u4f1a\u7ef4\u6301 2 \u79d2\u949f\uff0c\u76f4\u5230\u7b2c 2 \u79d2\u949f\u7ed3\u675f\u3002\n\u4f46\u662f\u5728\u7b2c 2 \u79d2\u5f00\u59cb\u65f6\uff0c\u63d0\u83ab\u518d\u6b21\u653b\u51fb\u4e86\u5df2\u7ecf\u5904\u4e8e\u4e2d\u6bd2\u72b6\u6001\u7684\u827e\u5e0c\u3002\n\u7531\u4e8e\u4e2d\u6bd2\u72b6\u6001\u4e0d\u53ef\u53e0\u52a0\uff0c\u63d0\u83ab\u5728\u7b2c 2 \u79d2\u5f00\u59cb\u65f6\u7684\u8fd9\u6b21\u653b\u51fb\u4f1a\u5728\u7b2c 3 \u79d2\u949f\u7ed3\u675f\u3002\n\u6240\u4ee5\u6700\u7ec8\u8f93\u51fa 3\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u5b9a\u65f6\u95f4\u5e8f\u5217\u6570\u7ec4\u7684\u603b\u957f\u5ea6\u4e0d\u8d85\u8fc7 10000\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u5b9a\u63d0\u83ab\u653b\u51fb\u65f6\u95f4\u5e8f\u5217\u4e2d\u7684\u6570\u5b57\u548c\u63d0\u83ab\u653b\u51fb\u7684\u4e2d\u6bd2\u6301\u7eed\u65f6\u95f4\u90fd\u662f\u975e\u8d1f\u6574\u6570\uff0c\u5e76\u4e14\u4e0d\u8d85\u8fc7 10,000,000\u3002</li>\n</ol>\n",
        "titleZh": "\u63d0\u83ab\u653b\u51fb",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Riot Games"
        ]
    },
    {
        "leetId": "496",
        "link": "next-greater-element-i",
        "title": "Next Greater Element I",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "58.1%",
        "questionDescription": "<p>\r\nYou are given two arrays <b>(without duplicates)</b> <code>nums1</code> and <code>nums2</code> where <code>nums1</code>\u2019s elements are subset of <code>nums2</code>. Find all the next greater numbers for <code>nums1</code>'s elements in the corresponding places of <code>nums2</code>. \r\n</p>\r\n\r\n<p>\r\nThe Next Greater Number of a number <b>x</b> in <code>nums1</code> is the first greater number to its right in <code>nums2</code>. If it does not exist, output -1 for this number.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> <b>nums1</b> = [4,1,2], <b>nums2</b> = [1,3,4,2].\r\n<b>Output:</b> [-1,3,-1]\r\n<b>Explanation:</b>\r\n    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.\r\n    For number 1 in the first array, the next greater number for it in the second array is 3.\r\n    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> <b>nums1</b> = [2,4], <b>nums2</b> = [1,2,3,4].\r\n<b>Output:</b> [3,-1]\r\n<b>Explanation:</b>\r\n    For number 2 in the first array, the next greater number for it in the second array is 3.\r\n    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>All elements in <code>nums1</code> and <code>nums2</code> are unique.</li>\r\n<li>The length of both <code>nums1</code> and <code>nums2</code> would not exceed 1000.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a<strong>\u6ca1\u6709\u91cd\u590d\u5143\u7d20</strong>\u7684\u6570\u7ec4&nbsp;<code>nums1</code> \u548c&nbsp;<code>nums2</code>&nbsp;\uff0c\u5176\u4e2d<code>nums1</code>&nbsp;\u662f&nbsp;<code>nums2</code>&nbsp;\u7684\u5b50\u96c6\u3002\u627e\u5230&nbsp;<code>nums1</code>&nbsp;\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5728&nbsp;<code>nums2</code>&nbsp;\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6bd4\u5176\u5927\u7684\u503c\u3002</p>\n\n<p><code>nums1</code>&nbsp;\u4e2d\u6570\u5b57&nbsp;<strong>x</strong>&nbsp;\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20\u662f\u6307&nbsp;<strong>x</strong>&nbsp;\u5728&nbsp;<code>nums2</code>&nbsp;\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u53f3\u8fb9\u7684\u7b2c\u4e00\u4e2a\u6bd4&nbsp;<strong>x&nbsp;</strong>\u5927\u7684\u5143\u7d20\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5bf9\u5e94\u4f4d\u7f6e\u8f93\u51fa-1\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> <strong>nums1</strong> = [4,1,2], <strong>nums2</strong> = [1,3,4,2].\n<strong>\u8f93\u51fa:</strong> [-1,3,-1]\n<strong>\u89e3\u91ca:</strong>\n    \u5bf9\u4e8enum1\u4e2d\u7684\u6570\u5b574\uff0c\u4f60\u65e0\u6cd5\u5728\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\u627e\u5230\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u5b57\uff0c\u56e0\u6b64\u8f93\u51fa -1\u3002\n    \u5bf9\u4e8enum1\u4e2d\u7684\u6570\u5b571\uff0c\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\u6570\u5b571\u53f3\u8fb9\u7684\u4e0b\u4e00\u4e2a\u8f83\u5927\u6570\u5b57\u662f 3\u3002\n    \u5bf9\u4e8enum1\u4e2d\u7684\u6570\u5b572\uff0c\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\u6ca1\u6709\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u5b57\uff0c\u56e0\u6b64\u8f93\u51fa -1\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> <strong>nums1</strong> = [2,4], <strong>nums2</strong> = [1,2,3,4].\n<strong>\u8f93\u51fa:</strong> [3,-1]\n<strong>\u89e3\u91ca:</strong>\n&nbsp;   \u5bf9\u4e8enum1\u4e2d\u7684\u6570\u5b572\uff0c\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\u7684\u4e0b\u4e00\u4e2a\u8f83\u5927\u6570\u5b57\u662f3\u3002\n    \u5bf9\u4e8enum1\u4e2d\u7684\u6570\u5b574\uff0c\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\u6ca1\u6709\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u5b57\uff0c\u56e0\u6b64\u8f93\u51fa -1\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>nums1</code>\u548c<code>nums2</code>\u4e2d\u6240\u6709\u5143\u7d20\u662f\u552f\u4e00\u7684\u3002</li>\n\t<li><code>nums1</code>\u548c<code>nums2</code>&nbsp;\u7684\u6570\u7ec4\u5927\u5c0f\u90fd\u4e0d\u8d85\u8fc71000\u3002</li>\n</ol>\n",
        "titleZh": "\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 I",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Bloomberg",
            "Mathworks"
        ]
    },
    {
        "leetId": "497",
        "link": "random-point-in-non-overlapping-rectangles",
        "title": "Random Point in Non-overlapping Rectangles",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "30.2%",
        "questionDescription": "<p>Given a list of <strong>non-overlapping</strong>&nbsp;axis-aligned rectangles <code>rects</code>, write a function <code>pick</code> which randomly and uniformily picks an <strong>integer point</strong> in the space&nbsp;covered by the rectangles.</p>\r\n\r\n<p>Note:</p>\r\n\r\n<ol>\r\n\t<li>An <strong>integer point</strong>&nbsp;is a point that has integer coordinates.&nbsp;</li>\r\n\t<li>A point&nbsp;on the perimeter&nbsp;of a rectangle is&nbsp;<strong>included</strong> in the space covered by the rectangles.&nbsp;</li>\r\n\t<li><code>i</code>th rectangle = <code>rects[i]</code> =&nbsp;<code>[x1,y1,x2,y2]</code>, where <code>[x1, y1]</code>&nbsp;are the integer coordinates of the bottom-left corner, and <code>[x2, y2]</code>&nbsp;are the integer coordinates of the top-right corner.</li>\r\n\t<li>length and width of each rectangle does not exceed <code>2000</code>.</li>\r\n\t<li><code>1 &lt;= rects.length&nbsp;&lt;= 100</code></li>\r\n\t<li><code>pick</code> return a point as an array of integer coordinates&nbsp;<code>[p_x, p_y]</code></li>\r\n\t<li><code>pick</code> is called at most <code>10000</code>&nbsp;times.</li>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-1-1\">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\r\n</span><span id=\"example-input-1-2\">[[[[1,1,5,5]]],[],[],[]]</span>\r\n<strong>Output: \r\n</strong><span id=\"example-output-1\">[null,[4,1],[4,1],[3,3]]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-2-1\">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\r\n</span><span id=\"example-input-2-2\">[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]</span>\r\n<strong>Output: \r\n</strong><span id=\"example-output-2\">[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]</span></pre>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Explanation of Input Syntax:</strong></p>\r\n\r\n<p>The input is two lists:&nbsp;the subroutines called&nbsp;and their&nbsp;arguments.&nbsp;<code>Solution</code>&#39;s&nbsp;constructor has one argument, the array of rectangles <code>rects</code>. <code>pick</code>&nbsp;has no arguments.&nbsp;Arguments&nbsp;are&nbsp;always wrapped with a list, even if there aren&#39;t any.</p>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u91cd\u53e0\u8f74\u5bf9\u9f50\u77e9\u5f62\u7684\u5217\u8868 <code>rects</code>\uff0c\u5199\u4e00\u4e2a\u51fd\u6570 <code>pick</code> \u968f\u673a\u5747\u5300\u5730\u9009\u53d6\u77e9\u5f62\u8986\u76d6\u7684\u7a7a\u95f4\u4e2d\u7684\u6574\u6570\u70b9\u3002</p>\n\n<p>\u63d0\u793a\uff1a</p>\n\n<ol>\n\t<li><strong>\u6574\u6570\u70b9</strong>\u662f\u5177\u6709\u6574\u6570\u5750\u6807\u7684\u70b9\u3002</li>\n\t<li>\u77e9\u5f62\u5468\u8fb9\u4e0a\u7684\u70b9\u5305\u542b\u5728\u77e9\u5f62\u8986\u76d6\u7684\u7a7a\u95f4\u4e2d\u3002</li>\n\t<li>\u7b2c <code>i</code> \u4e2a\u77e9\u5f62 <code>rects [i] = [x1\uff0cy1\uff0cx2\uff0cy2]</code>\uff0c\u5176\u4e2d&nbsp;<code>[x1\uff0cy1]</code> \u662f\u5de6\u4e0b\u89d2\u7684\u6574\u6570\u5750\u6807\uff0c<code>[x2\uff0cy2]</code> \u662f\u53f3\u4e0a\u89d2\u7684\u6574\u6570\u5750\u6807\u3002</li>\n\t<li>\u6bcf\u4e2a\u77e9\u5f62\u7684\u957f\u5ea6\u548c\u5bbd\u5ea6\u4e0d\u8d85\u8fc7 2000\u3002</li>\n\t<li><code>1 &lt;= rects.length&nbsp;&lt;= 100</code></li>\n\t<li><code>pick</code> \u4ee5\u6574\u6570\u5750\u6807\u6570\u7ec4&nbsp;<code>[p_x, p_y]</code>&nbsp;\u7684\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u70b9\u3002</li>\n\t<li><code>pick</code> \u6700\u591a\u88ab\u8c03\u752810000\u6b21\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[[[1,1,5,5]]],[],[],[]]\n<strong>\u8f93\u51fa: \n</strong>[null,[4,1],[4,1],[3,3]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]\n<strong>\u8f93\u51fa: \n</strong>[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8f93\u5165\u8bed\u6cd5\u7684\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u8f93\u5165\u662f\u4e24\u4e2a\u5217\u8868\uff1a\u8c03\u7528\u7684\u5b50\u4f8b\u7a0b\u53ca\u5176\u53c2\u6570\u3002<code>Solution</code> \u7684\u6784\u9020\u51fd\u6570\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u77e9\u5f62\u6570\u7ec4 <code>rects</code>\u3002<code>pick</code> \u6ca1\u6709\u53c2\u6570\u3002\u53c2\u6570\u603b\u662f\u7528\u5217\u8868\u5305\u88c5\u7684\uff0c\u5373\u4f7f\u6ca1\u6709\u4e5f\u662f\u5982\u6b64\u3002</p>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u975e\u91cd\u53e0\u77e9\u5f62\u4e2d\u7684\u968f\u673a\u70b9",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            },
            {
                "tag": "Random",
                "link": "random",
                "tagZh": null
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "498",
        "link": "diagonal-traverse",
        "title": "Diagonal Traverse",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "37.2%",
        "questionDescription": "<p>Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\n[\r\n [ 1, 2, 3 ],\r\n [ 4, 5, 6 ],\r\n [ 7, 8, 9 ]\r\n]\r\n\r\n<b>Output:</b>  [1,2,4,7,5,3,6,8,9]\r\n\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/diagonal_traverse.png\" style=\"width: 220px;\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<p>The total number of elements of the given matrix will not exceed 10,000.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709 M x N \u4e2a\u5143\u7d20\u7684\u77e9\u9635\uff08M \u884c\uff0cN \u5217\uff09\uff0c\u8bf7\u4ee5\u5bf9\u89d2\u7ebf\u904d\u5386\u7684\u987a\u5e8f\u8fd4\u56de\u8fd9\u4e2a\u77e9\u9635\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5bf9\u89d2\u7ebf\u904d\u5386\u5982\u4e0b\u56fe\u6240\u793a\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n\n<strong>\u8f93\u51fa:</strong>  [1,2,4,7,5,3,6,8,9]\n\n<strong>\u89e3\u91ca:</strong>\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/diagonal_traverse.png\" style=\"width: 220px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u77e9\u9635\u4e2d\u7684\u5143\u7d20\u603b\u6570\u4e0d\u4f1a\u8d85\u8fc7 100000 \u3002</li>\n</ol>\n",
        "titleZh": "\u5bf9\u89d2\u7ebf\u904d\u5386",
        "tags": [],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Adobe"
        ]
    },
    {
        "leetId": "499",
        "link": "the-maze-iii",
        "title": "The Maze III",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "0",
        "questionDescription": "\n<p>There is a <b>ball</b> in a maze with empty spaces and walls. The ball can go through empty spaces by rolling <b>up</b> (u), <b>down</b> (d), <b>left</b> (l) or <b>right</b> (r), but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. There is also a <b>hole</b> in this maze. The ball will drop into the hole if it rolls on to the hole.</p>\n<p> Given the <b>ball position</b>, the <b>hole position</b> and the <b>maze</b>, find out how the ball could drop into the hole by moving the <b>shortest distance</b>. The distance is defined by the number of <b>empty spaces</b> traveled by the ball from the start position (excluded) to the hole (included). Output the moving <b>directions</b> by using 'u', 'd', 'l' and 'r'. Since there could be several different shortest ways, you should output the <b>lexicographically smallest</b> way. If the ball cannot reach the hole, output \"impossible\".</p>\n<p>The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The ball and the hole coordinates are represented by row and column indexes.</p>\n<p>\n<b>Example 1</b>\n</p><pre><b>Input 1:</b> a maze represented by a 2D array\n\n0 0 0 0 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 0 1\n0 1 0 0 0\n\n<b>Input 2:</b> ball coordinate (rowBall, colBall) = (4, 3)\n<b>Input 3:</b> hole coordinate (rowHole, colHole) = (0, 1)\n\n<b>Output:</b> \"lul\"\n<b>Explanation:</b> There are two shortest ways for the ball to drop into the hole.\nThe first way is left -&gt; up -&gt; left, represented by \"lul\".\nThe second way is up -&gt; left, represented by 'ul'.\nBoth ways have shortest distance 6, but the first way is lexicographically smaller because 'l' &lt; 'u'. So the output is \"lul\".\n<img src=\"https://leetcode.com/static/images/problemset/maze_2_example_1.png\" width=\"30%\"/>\n</pre>\n<p></p>\n<p>\n<b>Example 2</b>\n</p><pre><b>Input 1:</b> a maze represented by a 2D array\n\n0 0 0 0 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 0 1\n0 1 0 0 0\n\n<b>Input 2:</b> ball coordinate (rowBall, colBall) = (4, 3)\n<b>Input 3:</b> hole coordinate (rowHole, colHole) = (3, 0)\n<b>Output:</b> \"impossible\"\n<b>Explanation:</b> The ball cannot reach the hole.\n<img src=\"https://leetcode.com/static/images/problemset/maze_2_example_2.png\" width=\"30%\"/>\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>There is only one ball and one hole in the maze.</li>\n<li>Both the ball and hole exist on an empty space, and they will not be at the same position initially.</li>\n<li>The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.</li>\n<li>The maze contains at least 2 empty spaces, and the width and the height of the maze won't exceed 30.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>There is a <b>ball</b> in a maze with empty spaces and walls. The ball can go through empty spaces by rolling <b>up</b> (u), <b>down</b> (d), <b>left</b> (l) or <b>right</b> (r), but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. There is also a <b>hole</b> in this maze. The ball will drop into the hole if it rolls on to the hole.</p>\n<p> Given the <b>ball position</b>, the <b>hole position</b> and the <b>maze</b>, find out how the ball could drop into the hole by moving the <b>shortest distance</b>. The distance is defined by the number of <b>empty spaces</b> traveled by the ball from the start position (excluded) to the hole (included). Output the moving <b>directions</b> by using 'u', 'd', 'l' and 'r'. Since there could be several different shortest ways, you should output the <b>lexicographically smallest</b> way. If the ball cannot reach the hole, output \"impossible\".</p>\n<p>The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The ball and the hole coordinates are represented by row and column indexes.</p>\n<p>\n<b>Example 1</b>\n</p><pre><b>Input 1:</b> a maze represented by a 2D array\n\n0 0 0 0 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 0 1\n0 1 0 0 0\n\n<b>Input 2:</b> ball coordinate (rowBall, colBall) = (4, 3)\n<b>Input 3:</b> hole coordinate (rowHole, colHole) = (0, 1)\n\n<b>Output:</b> \"lul\"\n<b>Explanation:</b> There are two shortest ways for the ball to drop into the hole.\nThe first way is left -&gt; up -&gt; left, represented by \"lul\".\nThe second way is up -&gt; left, represented by 'ul'.\nBoth ways have shortest distance 6, but the first way is lexicographically smaller because 'l' &lt; 'u'. So the output is \"lul\".\n<img src=\"https://leetcode.com/static/images/problemset/maze_2_example_1.png\" width=\"30%\"/>\n</pre>\n<p></p>\n<p>\n<b>Example 2</b>\n</p><pre><b>Input 1:</b> a maze represented by a 2D array\n\n0 0 0 0 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 0 1\n0 1 0 0 0\n\n<b>Input 2:</b> ball coordinate (rowBall, colBall) = (4, 3)\n<b>Input 3:</b> hole coordinate (rowHole, colHole) = (3, 0)\n<b>Output:</b> \"impossible\"\n<b>Explanation:</b> The ball cannot reach the hole.\n<img src=\"https://leetcode.com/static/images/problemset/maze_2_example_2.png\" width=\"30%\"/>\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>There is only one ball and one hole in the maze.</li>\n<li>Both the ball and hole exist on an empty space, and they will not be at the same position initially.</li>\n<li>The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.</li>\n<li>The maze contains at least 2 empty spaces, and the width and the height of the maze won't exceed 30.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "500",
        "link": "keyboard-row",
        "title": "Keyboard Row",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "65.6%",
        "questionDescription": "<p>Given a List of words, return the words that can be typed using letters of <b>alphabet</b> on only one row&#39;s of American keyboard like the image below.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/10/12/keyboard.png\" style=\"width: 100%; max-width: 600px\" /></p>\r\n&nbsp;\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [&quot;Hello&quot;, &quot;Alaska&quot;, &quot;Dad&quot;, &quot;Peace&quot;]\r\n<b>Output:</b> [&quot;Alaska&quot;, &quot;Dad&quot;]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>You may use one character in the keyboard more than once.</li>\r\n\t<li>You may assume the input string will only contain letters of alphabet.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\uff0c\u53ea\u8fd4\u56de\u53ef\u4ee5\u4f7f\u7528\u5728\u952e\u76d8\u540c\u4e00\u884c\u7684\u5b57\u6bcd\u6253\u5370\u51fa\u6765\u7684\u5355\u8bcd\u3002\u952e\u76d8\u5982\u4e0b\u56fe\u6240\u793a\u3002</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"American keyboard\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/keyboard.png\" style=\"width: 100%; max-width: 600px\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165:</strong> [&quot;Hello&quot;, &quot;Alaska&quot;, &quot;Dad&quot;, &quot;Peace&quot;]\r\n<strong>\u8f93\u51fa:</strong> [&quot;Alaska&quot;, &quot;Dad&quot;]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\r\n\r\n<ol>\r\n\t<li>\u4f60\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u952e\u76d8\u4e0a\u540c\u4e00\u5b57\u7b26\u3002</li>\r\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5c06\u53ea\u5305\u542b\u5b57\u6bcd\u3002</li>\r\n</ol>",
        "titleZh": "\u952e\u76d8\u884c",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Mathworks"
        ]
    },
    {
        "leetId": "501",
        "link": "find-mode-in-binary-search-tree",
        "title": "Find Mode in Binary Search Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "40.7%",
        "questionDescription": "<p>Given a binary search tree (BST) with duplicates, find all the <a href=\"https://en.wikipedia.org/wiki/Mode_(statistics)\" target=\"_blank\">mode(s)</a> (the most frequently occurred element) in the given BST.</p>\r\n\r\n<p>Assume a BST is defined as follows:</p>\r\n\r\n<ul>\r\n\t<li>The left subtree of a node contains only nodes with keys <b>less than or equal to</b> the node&#39;s key.</li>\r\n\t<li>The right subtree of a node contains only nodes with keys <b>greater than or equal to</b> the node&#39;s key.</li>\r\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For example:<br />\r\nGiven BST <code>[1,null,2,2]</code>,</p>\r\n\r\n<pre>\r\n   1\r\n    \\\r\n     2\r\n    /\r\n   2\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>return <code>[2]</code>.</p>\r\n\r\n<p><b>Note:</b> If a tree has more than one mode, you can return them in any order.</p>\r\n\r\n<p><b>Follow up:</b> Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6709\u76f8\u540c\u503c\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\uff0c\u627e\u51fa BST \u4e2d\u7684\u6240\u6709\u4f17\u6570\uff08\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u5143\u7d20\uff09\u3002</p>\n\n<p>\u5047\u5b9a BST \u6709\u5982\u4e0b\u5b9a\u4e49\uff1a</p>\n\n<ul>\n\t<li>\u7ed3\u70b9\u5de6\u5b50\u6811\u4e2d\u6240\u542b\u7ed3\u70b9\u7684\u503c\u5c0f\u4e8e\u7b49\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c</li>\n\t<li>\u7ed3\u70b9\u53f3\u5b50\u6811\u4e2d\u6240\u542b\u7ed3\u70b9\u7684\u503c\u5927\u4e8e\u7b49\u4e8e\u5f53\u524d\u7ed3\u70b9\u7684\u503c</li>\n\t<li>\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u90fd\u662f\u4e8c\u53c9\u641c\u7d22\u6811</li>\n</ul>\n\n<p>\u4f8b\u5982\uff1a<br>\n\u7ed9\u5b9a BST <code>[1,null,2,2]</code>,</p>\n\n<pre>   1\n    \\\n     2\n    /\n   2\n</pre>\n\n<p><code>\u8fd4\u56de[2]</code>.</p>\n\n<p><strong>\u63d0\u793a</strong>\uff1a\u5982\u679c\u4f17\u6570\u8d85\u8fc71\u4e2a\uff0c\u4e0d\u9700\u8003\u8651\u8f93\u51fa\u987a\u5e8f</p>\n\n<p><strong>\u8fdb\u9636\uff1a</strong>\u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7684\u7a7a\u95f4\u5417\uff1f\uff08\u5047\u8bbe\u7531\u9012\u5f52\u4ea7\u751f\u7684\u9690\u5f0f\u8c03\u7528\u6808\u7684\u5f00\u9500\u4e0d\u88ab\u8ba1\u7b97\u5728\u5185\uff09</p>\n",
        "titleZh": "\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Snapchat"
        ]
    },
    {
        "leetId": "502",
        "link": "ipo",
        "title": "IPO",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "35.4%",
        "questionDescription": "<p>\r\nSuppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most <b>k</b> distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most <b>k</b> distinct projects. \r\n</p>\r\n\r\n<p>\r\nYou are given several projects. For each project <b>i</b>, it has a pure profit <b>P<sub>i</sub></b> and a minimum capital of <b>C<sub>i</sub></b> is needed to start the corresponding project. Initially, you have <b>W</b> capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\r\n</p>\r\n\r\n<p>\r\nTo sum up, pick a list of at most <b>k</b> distinct projects from given projects to maximize your final capital, and output your final maximized capital.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].\r\n\r\n<b>Output:</b> 4\r\n\r\n<b>Explanation:</b> Since your initial capital is 0, you can only start the project indexed 0.\r\n             After finishing it you will obtain profit 1 and your capital becomes 1.\r\n             With capital 1, you can either start the project indexed 1 or the project indexed 2.\r\n             Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\r\n             Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>You may assume all numbers in the input are non-negative integers.</li>\r\n<li>The length of Profits array and Capital array will not exceed 50,000.</li>\r\n<li>The answer is guaranteed to fit in a 32-bit signed integer.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u5047\u8bbe LeetCode \u5373\u5c06\u5f00\u59cb\u5176 IPO\u3002\u4e3a\u4e86\u4ee5\u66f4\u9ad8\u7684\u4ef7\u683c\u5c06\u80a1\u7968\u5356\u7ed9\u98ce\u9669\u6295\u8d44\u516c\u53f8\uff0cLeetCode\u5e0c\u671b\u5728 IPO \u4e4b\u524d\u5f00\u5c55\u4e00\u4e9b\u9879\u76ee\u4ee5\u589e\u52a0\u5176\u8d44\u672c\u3002 \u7531\u4e8e\u8d44\u6e90\u6709\u9650\uff0c\u5b83\u53ea\u80fd\u5728 IPO \u4e4b\u524d\u5b8c\u6210\u6700\u591a <strong>k</strong> \u4e2a\u4e0d\u540c\u7684\u9879\u76ee\u3002\u5e2e\u52a9 LeetCode \u8bbe\u8ba1\u5b8c\u6210\u6700\u591a <strong>k</strong> \u4e2a\u4e0d\u540c\u9879\u76ee\u540e\u5f97\u5230\u6700\u5927\u603b\u8d44\u672c\u7684\u65b9\u5f0f\u3002</p>\n\n<p>\u7ed9\u5b9a\u82e5\u5e72\u4e2a\u9879\u76ee\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u9879\u76ee <strong>i</strong>\uff0c\u5b83\u90fd\u6709\u4e00\u4e2a\u7eaf\u5229\u6da6 <strong>P<sub>i</sub></strong>\uff0c\u5e76\u4e14\u9700\u8981\u6700\u5c0f\u7684\u8d44\u672c <strong>C<sub>i</sub></strong> \u6765\u542f\u52a8\u76f8\u5e94\u7684\u9879\u76ee\u3002\u6700\u521d\uff0c\u4f60\u6709 <strong>W</strong> \u8d44\u672c\u3002\u5f53\u4f60\u5b8c\u6210\u4e00\u4e2a\u9879\u76ee\u65f6\uff0c\u4f60\u5c06\u83b7\u5f97\u7eaf\u5229\u6da6\uff0c\u4e14\u5229\u6da6\u5c06\u88ab\u6dfb\u52a0\u5230\u4f60\u7684\u603b\u8d44\u672c\u4e2d\u3002</p>\n\n<p>\u603b\u800c\u8a00\u4e4b\uff0c\u4ece\u7ed9\u5b9a\u9879\u76ee\u4e2d\u9009\u62e9\u6700\u591a <strong>k</strong> \u4e2a\u4e0d\u540c\u9879\u76ee\u7684\u5217\u8868\uff0c\u4ee5\u6700\u5927\u5316\u6700\u7ec8\u8d44\u672c\uff0c\u5e76\u8f93\u51fa\u6700\u7ec8\u53ef\u83b7\u5f97\u7684\u6700\u591a\u8d44\u672c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].\n\n<strong>\u8f93\u51fa:</strong> 4\n\n<strong>\u89e3\u91ca:\n</strong>\u7531\u4e8e\u4f60\u7684\u521d\u59cb\u8d44\u672c\u4e3a 0\uff0c\u4f60\u5c3d\u53ef\u4ee5\u4ece 0 \u53f7\u9879\u76ee\u5f00\u59cb\u3002\n\u5728\u5b8c\u6210\u540e\uff0c\u4f60\u5c06\u83b7\u5f97 1 \u7684\u5229\u6da6\uff0c\u4f60\u7684\u603b\u8d44\u672c\u5c06\u53d8\u4e3a 1\u3002\n\u6b64\u65f6\u4f60\u53ef\u4ee5\u9009\u62e9\u5f00\u59cb 1 \u53f7\u6216 2 \u53f7\u9879\u76ee\u3002\n\u7531\u4e8e\u4f60\u6700\u591a\u53ef\u4ee5\u9009\u62e9\u4e24\u4e2a\u9879\u76ee\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u5b8c\u6210 2 \u53f7\u9879\u76ee\u4ee5\u83b7\u5f97\u6700\u5927\u7684\u8d44\u672c\u3002\n\u56e0\u6b64\uff0c\u8f93\u51fa\u6700\u540e\u6700\u5927\u5316\u7684\u8d44\u672c\uff0c\u4e3a 0 + 1 + 3 = 4\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u5047\u8bbe\u6240\u6709\u8f93\u5165\u6570\u5b57\u90fd\u662f\u975e\u8d1f\u6574\u6570\u3002</li>\n\t<li>\u8868\u793a\u5229\u6da6\u548c\u8d44\u672c\u7684\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7 50000\u3002</li>\n\t<li>\u7b54\u6848\u4fdd\u8bc1\u5728 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "IPO",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "503",
        "link": "next-greater-element-ii",
        "title": "Next Greater Element II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "47.5%",
        "questionDescription": "<p>\r\nGiven a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,2,1]\r\n<b>Output:</b> [2,-1,2]\r\n<b>Explanation:</b> The first 1's next greater number is 2; </br>The number 2 can't find next greater number; </br>The second 1's next greater number needs to search circularly, which is also 2.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe length of given array won't exceed 10000.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5faa\u73af\u6570\u7ec4\uff08\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u662f\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8f93\u51fa\u6bcf\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20\u3002\u6570\u5b57 x \u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u5143\u7d20\u662f\u6309\u6570\u7ec4\u904d\u5386\u987a\u5e8f\uff0c\u8fd9\u4e2a\u6570\u5b57\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u66f4\u5927\u7684\u6570\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u5e94\u8be5\u5faa\u73af\u5730\u641c\u7d22\u5b83\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa -1\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,1]\n<strong>\u8f93\u51fa:</strong> [2,-1,2]\n<strong>\u89e3\u91ca:</strong> \u7b2c\u4e00\u4e2a 1 \u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u662f 2\uff1b\n\u6570\u5b57 2 \u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\uff1b \n\u7b2c\u4e8c\u4e2a 1 \u7684\u4e0b\u4e00\u4e2a\u6700\u5927\u7684\u6570\u9700\u8981\u5faa\u73af\u641c\u7d22\uff0c\u7ed3\u679c\u4e5f\u662f 2\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong> \u8f93\u5165\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 10000\u3002</p>\n",
        "titleZh": "\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 II",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "Yahoo"
        ]
    },
    {
        "leetId": "504",
        "link": "base-7",
        "title": "Base 7",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "43.9%",
        "questionDescription": "<p>Given an integer, return its base 7 string representation.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> 100\r\n<b>Output:</b> \"202\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> -7\r\n<b>Output:</b> \"-10\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe input will be in range of [-1e7, 1e7].\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a7\u8fdb\u5236\uff0c\u5e76\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8f93\u51fa\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 100\n<strong>\u8f93\u51fa:</strong> &quot;202&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> -7\n<strong>\u8f93\u51fa:</strong> &quot;-10&quot;\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong> \u8f93\u5165\u8303\u56f4\u662f&nbsp;[-1e7, 1e7] \u3002</p>\n",
        "titleZh": "\u4e03\u8fdb\u5236\u6570",
        "tags": [],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "505",
        "link": "the-maze-ii",
        "title": "The Maze II",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "23",
        "questionDescription": "\n<p>There is a <b>ball</b> in a maze with empty spaces and walls. The ball can go through empty spaces by rolling <b>up</b>, <b>down</b>, <b>left</b> or <b>right</b>, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.</p>\n<p>Given the ball's <b>start position</b>, the <b>destination</b> and the <b>maze</b>, find the shortest distance for the ball to stop at the destination. The distance is defined by the number of <b>empty spaces</b> traveled by the ball from the start position (excluded) to the destination (included). If the ball cannot stop at the destination, return -1.</p>\n<p>The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes.</p>\n<p>\n<b>Example 1</b>\n</p><pre><b>Input 1:</b> a maze represented by a 2D array\n\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 1 0\n1 1 0 1 1\n0 0 0 0 0\n\n<b>Input 2:</b> start coordinate (rowStart, colStart) = (0, 4)\n<b>Input 3:</b> destination coordinate (rowDest, colDest) = (4, 4)\n\n<b>Output:</b> 12\n<b>Explanation:</b> One shortest way is : left -&gt; down -&gt; left -&gt; down -&gt; right -&gt; down -&gt; right.\n             The total distance is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.\n<img src=\"/static/images/problemset/maze_1_example_1.png\" width=\"30%\"/>\n</pre>\n<p></p>\n<p>\n<b>Example 2</b>\n</p><pre><b>Input 1:</b> a maze represented by a 2D array\n\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 1 0\n1 1 0 1 1\n0 0 0 0 0\n\n<b>Input 2:</b> start coordinate (rowStart, colStart) = (0, 4)\n<b>Input 3:</b> destination coordinate (rowDest, colDest) = (3, 2)\n\n<b>Output:</b> -1\n<b>Explanation:</b> There is no way for the ball to stop at the destination.\n<img src=\"/static/images/problemset/maze_1_example_2.png\" width=\"30%\"/>\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>There is only one ball and one destination in the maze.</li>\n<li>Both the ball and the destination exist on an empty space, and they will not be at the same position initially.</li>\n<li>The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.</li>\n<li>The maze contains at least 2 empty spaces, and both the width and height of the maze won't exceed 100.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>There is a <b>ball</b> in a maze with empty spaces and walls. The ball can go through empty spaces by rolling <b>up</b>, <b>down</b>, <b>left</b> or <b>right</b>, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.</p>\n<p>Given the ball's <b>start position</b>, the <b>destination</b> and the <b>maze</b>, find the shortest distance for the ball to stop at the destination. The distance is defined by the number of <b>empty spaces</b> traveled by the ball from the start position (excluded) to the destination (included). If the ball cannot stop at the destination, return -1.</p>\n<p>The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes.</p>\n<p>\n<b>Example 1</b>\n</p><pre><b>Input 1:</b> a maze represented by a 2D array\n\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 1 0\n1 1 0 1 1\n0 0 0 0 0\n\n<b>Input 2:</b> start coordinate (rowStart, colStart) = (0, 4)\n<b>Input 3:</b> destination coordinate (rowDest, colDest) = (4, 4)\n\n<b>Output:</b> 12\n<b>Explanation:</b> One shortest way is : left -&gt; down -&gt; left -&gt; down -&gt; right -&gt; down -&gt; right.\n             The total distance is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.\n<img src=\"/static/images/problemset/maze_1_example_1.png\" width=\"30%\"/>\n</pre>\n<p></p>\n<p>\n<b>Example 2</b>\n</p><pre><b>Input 1:</b> a maze represented by a 2D array\n\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 1 0\n1 1 0 1 1\n0 0 0 0 0\n\n<b>Input 2:</b> start coordinate (rowStart, colStart) = (0, 4)\n<b>Input 3:</b> destination coordinate (rowDest, colDest) = (3, 2)\n\n<b>Output:</b> -1\n<b>Explanation:</b> There is no way for the ball to stop at the destination.\n<img src=\"/static/images/problemset/maze_1_example_2.png\" width=\"30%\"/>\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>There is only one ball and one destination in the maze.</li>\n<li>Both the ball and the destination exist on an empty space, and they will not be at the same position initially.</li>\n<li>The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.</li>\n<li>The maze contains at least 2 empty spaces, and both the width and height of the maze won't exceed 100.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Snapchat"
        ]
    },
    {
        "leetId": "506",
        "link": "relative-ranks",
        "title": "Relative Ranks",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "48.1%",
        "questionDescription": "<p>\r\nGiven scores of <b>N</b> athletes, find their relative ranks and the people with the top three highest scores, who will be awarded medals: \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\".</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [5, 4, 3, 2, 1]\r\n<b>Output:</b> [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\"]\r\n<b>Explanation:</b> The first three athletes got the top three highest scores, so they got \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\". <br/>For the left two athletes, you just need to output their relative ranks according to their scores.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>N is a positive integer and won't exceed 10,000.</li>\r\n<li>All the scores of athletes are guaranteed to be unique.</li>\r\n</ol>\r\n</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa&nbsp;<strong>N</strong> \u540d\u8fd0\u52a8\u5458\u7684\u6210\u7ee9\uff0c\u627e\u51fa\u4ed6\u4eec\u7684\u76f8\u5bf9\u540d\u6b21\u5e76\u6388\u4e88\u524d\u4e09\u540d\u5bf9\u5e94\u7684\u5956\u724c\u3002\u524d\u4e09\u540d\u8fd0\u52a8\u5458\u5c06\u4f1a\u88ab\u5206\u522b\u6388\u4e88 &ldquo;\u91d1\u724c&rdquo;\uff0c&ldquo;\u94f6\u724c&rdquo; \u548c&ldquo; \u94dc\u724c&rdquo;\uff08&quot;Gold Medal&quot;, &quot;Silver Medal&quot;, &quot;Bronze Medal&quot;\uff09\u3002</p>\n\n<p>(\u6ce8\uff1a\u5206\u6570\u8d8a\u9ad8\u7684\u9009\u624b\uff0c\u6392\u540d\u8d8a\u9760\u524d\u3002)</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [5, 4, 3, 2, 1]\n<strong>\u8f93\u51fa:</strong> [&quot;Gold Medal&quot;, &quot;Silver Medal&quot;, &quot;Bronze Medal&quot;, &quot;4&quot;, &quot;5&quot;]\n<strong>\u89e3\u91ca:</strong> \u524d\u4e09\u540d\u8fd0\u52a8\u5458\u7684\u6210\u7ee9\u4e3a\u524d\u4e09\u9ad8\u7684\uff0c\u56e0\u6b64\u5c06\u4f1a\u5206\u522b\u88ab\u6388\u4e88 &ldquo;\u91d1\u724c&rdquo;\uff0c&ldquo;\u94f6\u724c&rdquo;\u548c&ldquo;\u94dc\u724c&rdquo; (&quot;Gold Medal&quot;, &quot;Silver Medal&quot; and &quot;Bronze Medal&quot;).\n\u4f59\u4e0b\u7684\u4e24\u540d\u8fd0\u52a8\u5458\uff0c\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7\u4ed6\u4eec\u7684\u6210\u7ee9\u8ba1\u7b97\u5c06\u5176\u76f8\u5bf9\u540d\u6b21\u5373\u53ef\u3002</pre>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li>N \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u5e76\u4e14\u4e0d\u4f1a\u8d85\u8fc7&nbsp;10000\u3002</li>\n\t<li>\u6240\u6709\u8fd0\u52a8\u5458\u7684\u6210\u7ee9\u90fd\u4e0d\u76f8\u540c\u3002</li>\n</ol>\n",
        "titleZh": "\u76f8\u5bf9\u540d\u6b21",
        "tags": [],
        "companies": [
            "Google",
            "Adobe"
        ]
    },
    {
        "leetId": "507",
        "link": "perfect-number",
        "title": "Perfect Number",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "34.0%",
        "questionDescription": "<p>We define the Perfect Number is a <b>positive</b> integer that is equal to the sum of all its <b>positive</b> divisors except itself. \r\n</p>\r\nNow, given an <b>integer</b> n, write a function that returns true when it is a perfect number and false when it is not.\r\n</p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> 28\r\n<b>Output:</b> True\r\n<b>Explanation:</b> 28 = 1 + 2 + 4 + 7 + 14\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe input number <b>n</b> will not exceed 100,000,000. (1e8)\r\n</p>",
        "questionDescriptionZh": "<p>\u5bf9\u4e8e\u4e00\u4e2a&nbsp;<strong>\u6b63\u6574\u6570</strong>\uff0c\u5982\u679c\u5b83\u548c\u9664\u4e86\u5b83\u81ea\u8eab\u4ee5\u5916\u7684\u6240\u6709\u6b63\u56e0\u5b50\u4e4b\u548c\u76f8\u7b49\uff0c\u6211\u4eec\u79f0\u5b83\u4e3a&ldquo;\u5b8c\u7f8e\u6570&rdquo;\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<strong>\u6b63\u6574\u6570&nbsp;</strong><code>n</code>\uff0c&nbsp;\u5982\u679c\u4ed6\u662f\u5b8c\u7f8e\u6570\uff0c\u8fd4\u56de&nbsp;<code>True</code>\uff0c\u5426\u5219\u8fd4\u56de&nbsp;<code>False</code></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 28\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong> 28 = 1 + 2 + 4 + 7 + 14\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<p>\u8f93\u5165\u7684\u6570\u5b57&nbsp;<strong><code>n</code></strong> \u4e0d\u4f1a\u8d85\u8fc7 100,000,000. (1e8)</p>\n",
        "titleZh": "\u5b8c\u7f8e\u6570",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Amazon",
            "Fallible"
        ]
    },
    {
        "leetId": "508",
        "link": "most-frequent-subtree-sum",
        "title": "Most Frequent Subtree Sum",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "56.6%",
        "questionDescription": "<p>\r\nGiven the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.\r\n</p>\r\n\r\n<p><b>Examples 1</b><br>\r\nInput:\r\n<pre>\r\n  5\r\n /  \\\r\n2   -3\r\n</pre>\r\nreturn [2, -3, 4], since all the values happen only once, return all of them in any order.\r\n</p>\r\n\r\n<p><b>Examples 2</b><br>\r\nInput:\r\n<pre>\r\n  5\r\n /  \\\r\n2   -5\r\n</pre>\r\nreturn [2], since 2 happens twice, however -5 only occur once.\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nYou may assume the sum of values in any subtree is in the range of 32-bit signed integer.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e8c\u53c9\u6811\u7684\u6839\uff0c\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b50\u6811\u5143\u7d20\u548c\u3002\u4e00\u4e2a\u7ed3\u70b9\u7684\u5b50\u6811\u5143\u7d20\u548c\u5b9a\u4e49\u4e3a\u4ee5\u8be5\u7ed3\u70b9\u4e3a\u6839\u7684\u4e8c\u53c9\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u7684\u5143\u7d20\u4e4b\u548c\uff08\u5305\u62ec\u7ed3\u70b9\u672c\u8eab\uff09\u3002\u7136\u540e\u6c42\u51fa\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b50\u6811\u5143\u7d20\u548c\u3002\u5982\u679c\u6709\u591a\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u76f8\u540c\uff0c\u8fd4\u56de\u6240\u6709\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\u7d20\uff08\u4e0d\u9650\u987a\u5e8f\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1</strong><br>\n\u8f93\u5165:</p>\n\n<pre>  5\n /  \\\n2   -3\n</pre>\n\n<p>\u8fd4\u56de&nbsp;[2, -3, 4]\uff0c\u6240\u6709\u7684\u503c\u5747\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u4ee5\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u6240\u6709\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;2</strong><br>\n\u8f93\u5165:</p>\n\n<pre>  5\n /  \\\n2   -5\n</pre>\n\n<p>\u8fd4\u56de&nbsp;[2]\uff0c\u53ea\u6709 2 \u51fa\u73b0\u4e24\u6b21\uff0c-5 \u53ea\u51fa\u73b0 1 \u6b21\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong>&nbsp;\u5047\u8bbe\u4efb\u610f\u5b50\u6811\u5143\u7d20\u548c\u5747\u53ef\u4ee5\u7528 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8868\u793a\u3002</p>\n",
        "titleZh": "\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b50\u6811\u5143\u7d20\u548c",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "513",
        "link": "find-bottom-left-tree-value",
        "title": "Find Bottom Left Tree Value",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "64.5%",
        "questionDescription": "<p>\r\nGiven a binary tree, find the leftmost value in the last row of the tree. \r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\nInput:\r\n\r\n    2\r\n   / \\\r\n  1   3\r\n\r\nOutput:\r\n1\r\n</pre>\r\n</p>\r\n\r\n<p> <b> Example 2: </b><br>\r\n<pre>\r\nInput:\r\n\r\n        1\r\n       / \\\r\n      2   3\r\n     /   / \\\r\n    4   5   6\r\n       /\r\n      7\r\n\r\nOutput:\r\n7\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nYou may assume the tree (i.e., the given root node) is not <b>NULL</b>.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5728\u6811\u7684\u6700\u540e\u4e00\u884c\u627e\u5230\u6700\u5de6\u8fb9\u7684\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n\n    2\n   / \\\n  1   3\n\n<strong>\u8f93\u51fa:</strong>\n1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2: </strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n\n        1\n       / \\\n      2   3\n     /   / \\\n    4   5   6\n       /\n      7\n\n<strong>\u8f93\u51fa:</strong>\n7\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong> \u60a8\u53ef\u4ee5\u5047\u8bbe\u6811\uff08\u5373\u7ed9\u5b9a\u7684\u6839\u8282\u70b9\uff09\u4e0d\u4e3a <strong>NULL</strong>\u3002</p>\n",
        "titleZh": "\u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Microsoft",
            "Bloomberg"
        ]
    },
    {
        "leetId": "514",
        "link": "freedom-trail",
        "title": "Freedom Trail",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "37.6%",
        "questionDescription": "<p>In the video game Fallout 4, the quest &quot;Road to Freedom&quot; requires players to reach a metal dial called the &quot;Freedom Trail Ring&quot;, and use the dial to spell a specific keyword in order to open the door.</p>\r\n\r\n<p>Given a string <b>ring</b>, which represents the code engraved on the outer ring and another string <b>key</b>, which represents the keyword needs to be spelled. You need to find the <b>minimum</b> number of steps in order to spell all the characters in the keyword.</p>\r\n\r\n<p>Initially, the first character of the <b>ring</b> is aligned at 12:00 direction. You need to spell all the characters in the string <b>key</b> one by one by rotating the ring clockwise or anticlockwise to make each character of the string <b>key</b> aligned at 12:00 direction and then by pressing the center button.</p>\r\n\r\n<p>At the stage of rotating the ring to spell the key character <b>key[i]</b>:</p>\r\n\r\n<ol>\r\n\t<li>You can rotate the <b>ring</b> clockwise or anticlockwise <b>one place</b>, which counts as 1 step. The final purpose of the rotation is to align one of the string <b>ring&#39;s</b> characters at the 12:00 direction, where this character must equal to the character <b>key[i]</b>.</li>\r\n\t<li>If the character <b>key[i]</b> has been aligned at the 12:00 direction, you need to press the center button to spell, which also counts as 1 step. After the pressing, you could begin to spell the next character in the key (next stage), otherwise, you&#39;ve finished all the spelling.</li>\r\n</ol>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<center><img src=\"https://assets.leetcode.com/uploads/2018/10/22/ring.jpg\" style=\"width: 26%;\" /></center>\r\n&nbsp;\r\n\r\n<pre>\r\n<b>Input:</b> ring = &quot;godding&quot;, key = &quot;gd&quot;\r\n<b>Output:</b> 4\r\n<b>Explanation:</b>\r\nFor the first key character &#39;g&#39;, since it is already in place, we just need 1 step to spell this character. \r\nFor the second key character &#39;d&#39;, we need to rotate the ring &quot;godding&quot; anticlockwise by two steps to make it become &quot;ddinggo&quot;.\r\nAlso, we need 1 more step for spelling.\r\nSo the final output is 4.\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>Length of both ring and <b>key</b> will be in range 1 to 100.</li>\r\n\t<li>There are only lowercase letters in both strings and might be some duplcate characters in both strings.</li>\r\n\t<li>It&#39;s guaranteed that string <b>key</b> could always be spelled by rotating the string <b>ring</b>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u89c6\u9891\u6e38\u620f&ldquo;\u8f90\u5c044&rdquo;\u4e2d\uff0c\u4efb\u52a1&ldquo;\u901a\u5411\u81ea\u7531&rdquo;\u8981\u6c42\u73a9\u5bb6\u5230\u8fbe\u540d\u4e3a&ldquo;Freedom Trail Ring&rdquo;\u7684\u91d1\u5c5e\u8868\u76d8\uff0c\u5e76\u4f7f\u7528\u8868\u76d8\u62fc\u5199\u7279\u5b9a\u5173\u952e\u8bcd\u624d\u80fd\u5f00\u95e8\u3002</p>\r\n\r\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<strong>ring</strong>\uff0c\u8868\u793a\u523b\u5728\u5916\u73af\u4e0a\u7684\u7f16\u7801\uff1b\u7ed9\u5b9a\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<strong>key</strong>\uff0c\u8868\u793a\u9700\u8981\u62fc\u5199\u7684\u5173\u952e\u8bcd\u3002\u60a8\u9700\u8981\u7b97\u51fa\u80fd\u591f\u62fc\u5199\u5173\u952e\u8bcd\u4e2d\u6240\u6709\u5b57\u7b26\u7684<strong>\u6700\u5c11</strong>\u6b65\u6570\u3002</p>\r\n\r\n<p>\u6700\u521d\uff0c<strong>ring&nbsp;</strong>\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e0e12:00\u65b9\u5411\u5bf9\u9f50\u3002\u60a8\u9700\u8981\u987a\u65f6\u9488\u6216\u9006\u65f6\u9488\u65cb\u8f6c ring \u4ee5\u4f7f&nbsp;<strong>key&nbsp;</strong>\u7684\u4e00\u4e2a\u5b57\u7b26\u5728 12:00 \u65b9\u5411\u5bf9\u9f50\uff0c\u7136\u540e\u6309\u4e0b\u4e2d\u5fc3\u6309\u94ae\uff0c\u4ee5\u6b64\u9010\u4e2a\u62fc\u5199\u5b8c&nbsp;<strong>key&nbsp;</strong>\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u3002</p>\r\n\r\n<p>\u65cb\u8f6c&nbsp;<strong>ring&nbsp;</strong>\u62fc\u51fa key \u5b57\u7b26&nbsp;<strong>key[i]&nbsp;</strong>\u7684\u9636\u6bb5\u4e2d\uff1a</p>\r\n\r\n<ol>\r\n\t<li>\u60a8\u53ef\u4ee5\u5c06&nbsp;<strong>ring&nbsp;</strong>\u987a\u65f6\u9488\u6216\u9006\u65f6\u9488\u65cb\u8f6c<strong>\u4e00\u4e2a\u4f4d\u7f6e</strong>\uff0c\u8ba1\u4e3a1\u6b65\u3002\u65cb\u8f6c\u7684\u6700\u7ec8\u76ee\u7684\u662f\u5c06\u5b57\u7b26\u4e32&nbsp;<strong>ring&nbsp;</strong>\u7684\u4e00\u4e2a\u5b57\u7b26\u4e0e 12:00 \u65b9\u5411\u5bf9\u9f50\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5b57\u7b26\u5fc5\u987b\u7b49\u4e8e\u5b57\u7b26&nbsp;<strong>key[i] \u3002</strong></li>\r\n\t<li>\u5982\u679c\u5b57\u7b26&nbsp;<strong>key[i]&nbsp;</strong>\u5df2\u7ecf\u5bf9\u9f50\u523012:00\u65b9\u5411\uff0c\u60a8\u9700\u8981\u6309\u4e0b\u4e2d\u5fc3\u6309\u94ae\u8fdb\u884c\u62fc\u5199\uff0c\u8fd9\u4e5f\u5c06\u7b97\u4f5c&nbsp;<strong>1 \u6b65</strong>\u3002\u6309\u5b8c\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u5f00\u59cb\u62fc\u5199&nbsp;<strong>key&nbsp;</strong>\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff08\u4e0b\u4e00\u9636\u6bb5\uff09, \u76f4\u81f3\u5b8c\u6210\u6240\u6709\u62fc\u5199\u3002</li>\r\n</ol>\r\n\r\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<center><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/ring.jpg\" style=\"width: 26%;\"></center>\r\n&nbsp;\r\n\r\n<pre><strong>\u8f93\u5165:</strong> ring = &quot;godding&quot;, key = &quot;gd&quot;\r\n<strong>\u8f93\u51fa:</strong> 4\r\n<strong>\u89e3\u91ca:</strong>\r\n \u5bf9\u4e8e key \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26 &#39;g&#39;\uff0c\u5df2\u7ecf\u5728\u6b63\u786e\u7684\u4f4d\u7f6e, \u6211\u4eec\u53ea\u9700\u89811\u6b65\u6765\u62fc\u5199\u8fd9\u4e2a\u5b57\u7b26\u3002 \r\n \u5bf9\u4e8e key \u7684\u7b2c\u4e8c\u4e2a\u5b57\u7b26 &#39;d&#39;\uff0c\u6211\u4eec\u9700\u8981\u9006\u65f6\u9488\u65cb\u8f6c ring &quot;godding&quot; 2\u6b65\u4f7f\u5b83\u53d8\u6210 &quot;ddinggo&quot;\u3002\r\n \u5f53\u7136, \u6211\u4eec\u8fd8\u9700\u89811\u6b65\u8fdb\u884c\u62fc\u5199\u3002\r\n \u56e0\u6b64\u6700\u7ec8\u7684\u8f93\u51fa\u662f 4\u3002\r\n</pre>\r\n\r\n<p><strong>\u63d0\u793a\uff1a</strong></p>\r\n\r\n<ol>\r\n\t<li><strong>ring</strong> \u548c&nbsp;<strong>key</strong>&nbsp;\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u53d6\u503c\u8303\u56f4\u5747\u4e3a&nbsp;1 \u81f3&nbsp;100\uff1b</li>\r\n\t<li>\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e2d\u90fd\u53ea\u6709\u5c0f\u5199\u5b57\u7b26\uff0c\u5e76\u4e14\u5747\u53ef\u80fd\u5b58\u5728\u91cd\u590d\u5b57\u7b26\uff1b</li>\r\n\t<li>\u5b57\u7b26\u4e32&nbsp;<strong>key</strong>&nbsp;\u4e00\u5b9a\u53ef\u4ee5\u7531\u5b57\u7b26\u4e32 <strong>ring</strong>&nbsp;\u65cb\u8f6c\u62fc\u51fa\u3002</li>\r\n</ol>",
        "titleZh": "\u81ea\u7531\u4e4b\u8def",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "515",
        "link": "find-largest-value-in-each-tree-row",
        "title": "Find Largest Value in Each Tree Row",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "56.0%",
        "questionDescription": "<p>You need to find the largest value in each row of a binary tree.</p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\n\r\n          1\r\n         / \\\r\n        3   2\r\n       / \\   \\  \r\n      5   3   9 \r\n\r\n<b>Output:</b> [1, 3, 9]\r\n</pre>\r\n</p>\r\n",
        "questionDescriptionZh": "<p>\u60a8\u9700\u8981\u5728\u4e8c\u53c9\u6811\u7684\u6bcf\u4e00\u884c\u4e2d\u627e\u5230\u6700\u5927\u7684\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\n          1\n         / \\\n        3   2\n       / \\   \\  \n      5   3   9 \n\n<strong>\u8f93\u51fa:</strong> [1, 3, 9]\n</pre>\n",
        "titleZh": "\u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "LinkedIn"
        ]
    },
    {
        "leetId": "516",
        "link": "longest-palindromic-subsequence",
        "title": "Longest Palindromic Subsequence",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "43.9%",
        "questionDescription": "<p>\r\nGiven a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br>\r\nInput: \r\n<pre>\r\n\"bbbab\"\r\n</pre>\r\nOutput: \r\n<pre>\r\n4\r\n</pre>\r\nOne possible longest palindromic subsequence is \"bbbb\".\r\n</p>\r\n\r\n<p><b>Example 2:</b><br>\r\nInput:\r\n<pre>\r\n\"cbbd\"\r\n</pre>\r\nOutput:\r\n<pre>\r\n2\r\n</pre>\r\nOne possible longest palindromic subsequence is \"bb\".\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32<code>s</code>\uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u5e8f\u5217\u3002\u53ef\u4ee5\u5047\u8bbe<code>s</code>\u7684\u6700\u5927\u957f\u5ea6\u4e3a<code>1000</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong><br />\n\u8f93\u5165:</p>\n\n<pre>\n&quot;bbbab&quot;\n</pre>\n\n<p>\u8f93\u51fa:</p>\n\n<pre>\n4\n</pre>\n\n<p>\u4e00\u4e2a\u53ef\u80fd\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u4e3a &quot;bbbb&quot;\u3002</p>\n\n<p><strong>\u793a\u4f8b 2:</strong><br />\n\u8f93\u5165:</p>\n\n<pre>\n&quot;cbbd&quot;\n</pre>\n\n<p>\u8f93\u51fa:</p>\n\n<pre>\n2\n</pre>\n\n<p>\u4e00\u4e2a\u53ef\u80fd\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\u4e3a &quot;bb&quot;\u3002</p>\n",
        "titleZh": "\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Apple",
            "LinkedIn",
            "Alibaba"
        ]
    },
    {
        "leetId": "517",
        "link": "super-washing-machines",
        "title": "Super Washing Machines",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "34.4%",
        "questionDescription": "<p>You have <b>n</b> super washing machines on a line. Initially, each washing machine has some dresses or is empty. \r\n</p>\r\n\r\n<p>For each <b>move</b>, you could choose <b>any m</b> (1 &le; m &le; n) washing machines, and pass <b>one dress</b> of each washing machine to one of its adjacent washing machines <b> at the same time </b>.  </p>\r\n\r\n<p>Given an integer array representing the number of dresses in each washing machine from left to right on the line, you should find the <b>minimum number of moves</b> to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.</p>\r\n\r\n<p><b>Example1</b>\r\n<pre>\r\n<b>Input:</b> [1,0,5]\r\n\r\n<b>Output:</b> 3\r\n\r\n<b>Explanation:</b> \r\n1st move:    1     0 <-- 5    =>    1     1     4\r\n2nd move:    1 <-- 1 <-- 4    =>    2     1     3    \r\n3rd move:    2     1 <-- 3    =>    2     2     2   \r\n</pre>\r\n\r\n<p><b>Example2</b>\r\n<pre>\r\n<b>Input:</b> [0,3,0]\r\n\r\n<b>Output:</b> 2\r\n\r\n<b>Explanation:</b> \r\n1st move:    0 <-- 3     0    =>    1     2     0    \r\n2nd move:    1     2 --> 0    =>    1     1     1     \r\n</pre>\r\n\r\n<p><b>Example3</b>\r\n<pre>\r\n<b>Input:</b> [0,2,0]\r\n\r\n<b>Output:</b> -1\r\n\r\n<b>Explanation:</b> \r\nIt's impossible to make all the three washing machines have the same number of dresses. \r\n</pre>\r\n\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The range of n is [1, 10000].</li>\r\n<li>The range of dresses number in a super washing machine is [0, 1e5].</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u5047\u8bbe\u6709 <strong>n&nbsp;</strong>\u53f0\u8d85\u7ea7\u6d17\u8863\u673a\u653e\u5728\u540c\u4e00\u6392\u4e0a\u3002\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6bcf\u53f0\u6d17\u8863\u673a\u5185\u53ef\u80fd\u6709\u4e00\u5b9a\u91cf\u7684\u8863\u670d\uff0c\u4e5f\u53ef\u80fd\u662f\u7a7a\u7684\u3002</p>\n\n<p>\u5728<strong>\u6bcf\u4e00\u6b65\u64cd\u4f5c</strong>\u4e2d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9<strong>\u4efb\u610f m&nbsp;</strong>\uff081 &le; m &le; n\uff09&nbsp;\u53f0\u6d17\u8863\u673a\uff0c\u4e0e\u6b64<strong>\u540c\u65f6</strong>\u5c06\u6bcf\u53f0\u6d17\u8863\u673a\u7684<strong>\u4e00\u4ef6\u8863\u670d</strong>\u9001\u5230\u76f8\u90bb\u7684\u4e00\u53f0\u6d17\u8863\u673a\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\u4ee3\u8868\u4ece\u5de6\u81f3\u53f3\u6bcf\u53f0\u6d17\u8863\u673a\u4e2d\u7684\u8863\u7269\u6570\u91cf\uff0c\u8bf7\u7ed9\u51fa\u80fd\u8ba9\u6240\u6709\u6d17\u8863\u673a\u4e2d\u5269\u4e0b\u7684\u8863\u7269\u7684\u6570\u91cf\u76f8\u7b49\u7684<strong>\u6700\u5c11\u7684\u64cd\u4f5c\u6b65\u6570</strong>\u3002\u5982\u679c\u4e0d\u80fd\u4f7f\u6bcf\u53f0\u6d17\u8863\u673a\u4e2d\u8863\u7269\u7684\u6570\u91cf\u76f8\u7b49\uff0c\u5219\u8fd4\u56de -1\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,0,5]\n\n<strong>\u8f93\u51fa:</strong> 3\n\n<strong>\u89e3\u91ca:</strong> \n\u7b2c\u4e00\u6b65:    1     0 &lt;-- 5    =&gt;    1     1     4\n\u7b2c\u4e8c\u6b65:    1 &lt;-- 1 &lt;-- 4    =&gt;    2     1     3    \n\u7b2c\u4e09\u6b65:    2     1 &lt;-- 3    =&gt;    2     2     2   \n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [0,3,0]\n\n<strong>\u8f93\u51fa:</strong> 2\n\n<strong>\u89e3\u91ca:</strong> \n\u7b2c\u4e00\u6b65:    0 &lt;-- 3     0    =&gt;    1     2     0    \n\u7b2c\u4e8c\u6b65:    1     2 --&gt; 0    =&gt;    1     1     1     \n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [0,2,0]\n\n<strong>\u8f93\u51fa:</strong> -1\n\n<strong>\u89e3\u91ca:</strong> \n\u4e0d\u53ef\u80fd\u8ba9\u6240\u6709\u4e09\u4e2a\u6d17\u8863\u673a\u540c\u65f6\u5269\u4e0b\u76f8\u540c\u6570\u91cf\u7684\u8863\u7269\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>n \u7684\u8303\u56f4\u662f [1, 10000]\u3002</li>\n\t<li>\u5728\u6bcf\u53f0\u8d85\u7ea7\u6d17\u8863\u673a\u4e2d\uff0c\u8863\u7269\u6570\u91cf\u7684\u8303\u56f4\u662f [0, 1e5]\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u8d85\u7ea7\u6d17\u8863\u673a",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "518",
        "link": "coin-change-2",
        "title": "Coin Change 2",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "41.2%",
        "questionDescription": "<p>You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> amount = 5, coins = [1, 2, 5]\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> there are four ways to make up the amount:\r\n5=5\r\n5=2+2+1\r\n5=2+1+1+1\r\n5=1+1+1+1+1\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> amount = 3, coins = [2]\r\n<b>Output:</b> 0\r\n<b>Explanation:</b> the amount of 3 cannot be made up just with coins of 2.\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> amount = 10, coins = [10] \r\n<b>Output:</b> 1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<p>You can assume that</p>\r\n\r\n<ul>\r\n\t<li>0 &lt;= amount &lt;= 5000</li>\r\n\t<li>1 &lt;= coin &lt;= 5000</li>\r\n\t<li>the number of coins is less than 500</li>\r\n\t<li>the answer is guaranteed to fit into signed 32-bit integer</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e0d\u540c\u9762\u989d\u7684\u786c\u5e01\u548c\u4e00\u4e2a\u603b\u91d1\u989d\u3002\u5199\u51fa\u51fd\u6570\u6765\u8ba1\u7b97\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\u7684\u786c\u5e01\u7ec4\u5408\u6570\u3002\u5047\u8bbe\u6bcf\u4e00\u79cd\u9762\u989d\u7684\u786c\u5e01\u6709\u65e0\u9650\u4e2a\u3002&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> amount = 5, coins = [1, 2, 5]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u6709\u56db\u79cd\u65b9\u5f0f\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> amount = 3, coins = [2]\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:</strong> \u53ea\u7528\u9762\u989d2\u7684\u786c\u5e01\u4e0d\u80fd\u51d1\u6210\u603b\u91d1\u989d3\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> amount = 10, coins = [10] \n<strong>\u8f93\u51fa:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f</strong><strong>:</strong></p>\n\n<p>\u4f60\u53ef\u4ee5\u5047\u8bbe\uff1a</p>\n\n<ul>\n\t<li>0 &lt;= amount (\u603b\u91d1\u989d) &lt;= 5000</li>\n\t<li>1 &lt;= coin (\u786c\u5e01\u9762\u989d)&nbsp;&lt;= 5000</li>\n\t<li>\u786c\u5e01\u79cd\u7c7b\u4e0d\u8d85\u8fc7 500 \u79cd</li>\n\t<li>\u7ed3\u679c\u7b26\u5408 32 \u4f4d\u7b26\u53f7\u6574\u6570</li>\n</ul>\n",
        "titleZh": "\u96f6\u94b1\u5151\u6362 II",
        "tags": [],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Yahoo",
            "Twitter",
            "IXL"
        ]
    },
    {
        "leetId": "519",
        "link": "random-flip-matrix",
        "title": "Random Flip Matrix",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "29.2%",
        "questionDescription": "<p>You are given the number of rows <code>n_rows</code>&nbsp;and number of columns <code>n_cols</code>&nbsp;of a&nbsp;2D&nbsp;binary matrix&nbsp;where all values are initially 0.&nbsp;Write a function <code>flip</code>&nbsp;which chooses&nbsp;a 0 value&nbsp;<a href=\"https://en.wikipedia.org/wiki/Discrete_uniform_distribution\" target=\"_blank\">uniformly at random</a>,&nbsp;changes it to 1,&nbsp;and then returns the position <code>[row.id, col.id]</code> of that value. Also, write a function <code>reset</code> which sets all values back to 0.&nbsp;<strong>Try to minimize the number of calls to system&#39;s Math.random()</strong> and optimize the time and&nbsp;space complexity.</p>\r\n\r\n<p>Note:</p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= n_rows, n_cols&nbsp;&lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= row.id &lt; n_rows</code> and <code>0 &lt;= col.id &lt; n_cols</code></li>\r\n\t<li><code>flip</code>&nbsp;will not be called when the matrix has no&nbsp;0 values left.</li>\r\n\t<li>the total number of calls to&nbsp;<code>flip</code>&nbsp;and <code>reset</code>&nbsp;will not exceed&nbsp;1000.</li>\r\n</ol>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-1-1\">[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;]\r\n</span><span id=\"example-input-1-2\">[[2,3],[],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,[0,1],[1,2],[1,0],[1,1]]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-2-1\">[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;reset&quot;,&quot;flip&quot;]\r\n</span><span id=\"example-input-2-2\">[[1,2],[],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,[0,0],[0,1],null,[0,0]]</span></pre>\r\n</div>\r\n\r\n<p><strong>Explanation of Input Syntax:</strong></p>\r\n\r\n<p>The input is two lists:&nbsp;the subroutines called&nbsp;and their&nbsp;arguments. <code>Solution</code>&#39;s constructor&nbsp;has two arguments, <code>n_rows</code> and <code>n_cols</code>.&nbsp;<code>flip</code>&nbsp;and <code>reset</code> have&nbsp;no&nbsp;arguments.&nbsp;Arguments&nbsp;are&nbsp;always wrapped with a list, even if there aren&#39;t any.</p>\r\n",
        "questionDescriptionZh": "<p>\u9898\u4e2d\u7ed9\u51fa\u4e00\u4e2a <code>n</code> \u884c <code>n</code> \u5217\u7684\u4e8c\u7ef4\u77e9\u9635<code> (n_rows,n_cols)</code>\uff0c\u4e14\u6240\u6709\u503c\u88ab\u521d\u59cb\u5316\u4e3a 0\u3002\u8981\u6c42\u7f16\u5199\u4e00\u4e2a <code>flip</code> \u51fd\u6570\uff0c<a href=\"https://en.wikipedia.org/wiki/Discrete_uniform_distribution\">\u5747\u5300\u968f\u673a</a>\u7684\u5c06\u77e9\u9635\u4e2d\u7684 0 \u53d8\u4e3a 1\uff0c\u5e76\u8fd4\u56de\u8be5\u503c\u7684\u4f4d\u7f6e\u4e0b\u6807 <code>[row_id,col_id]</code>\uff1b\u540c\u6837\u7f16\u5199\u4e00\u4e2a <code>reset</code> \u51fd\u6570\uff0c\u5c06\u6240\u6709\u7684\u503c\u90fd\u91cd\u65b0\u7f6e\u4e3a 0\u3002<strong>\u5c3d\u91cf\u6700\u5c11\u8c03\u7528\u968f\u673a\u51fd\u6570 Math.random()</strong>\uff0c\u5e76\u4e14\u4f18\u5316\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p>\n\n<p>\u6ce8\u610f:</p>\n\n<p>1.1 &lt;= n_rows, n_cols &lt;= 10000</p>\n\n<p>2. 0 &lt;= row.id &lt; n_rows \u5e76\u4e14 0 &lt;= col.id &lt; n_cols</p>\n\n<p>3.\u5f53\u77e9\u9635\u4e2d\u6ca1\u6709\u503c\u4e3a 0 \u65f6\uff0c\u4e0d\u53ef\u4ee5\u8c03\u7528 flip \u51fd\u6570</p>\n\n<p>4.\u8c03\u7528 flip \u548c reset \u51fd\u6570\u7684\u6b21\u6570\u52a0\u8d77\u6765\u4e0d\u4f1a\u8d85\u8fc7 1000 \u6b21</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;]\n[[2,3],[],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,[0,1],[1,2],[1,0],[1,1]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;reset&quot;,&quot;flip&quot;]\n[[1,2],[],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,[0,0],[0,1],null,[0,0]]</pre>\n\n<p><strong>\u8f93\u5165\u8bed\u6cd5\u89e3\u91ca\uff1a</strong></p>\n\n<p>\u8f93\u5165\u5305\u542b\u4e24\u4e2a\u5217\u8868\uff1a\u88ab\u8c03\u7528\u7684\u5b50\u7a0b\u5e8f\u548c\u4ed6\u4eec\u7684\u53c2\u6570\u3002<code>Solution</code> \u7684\u6784\u9020\u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u4e3a <code>n_rows</code> \u548c <code>n_cols</code>\u3002<code>flip</code>&nbsp;\u548c <code>reset</code> \u6ca1\u6709\u53c2\u6570\uff0c\u53c2\u6570\u603b\u4f1a\u4ee5\u5217\u8868\u5f62\u5f0f\u7ed9\u51fa\uff0c\u54ea\u6015\u8be5\u5217\u8868\u4e3a\u7a7a</p>\n",
        "titleZh": "\u968f\u673a\u7ffb\u8f6c\u77e9\u9635",
        "tags": [
            {
                "tag": "Random",
                "link": "random",
                "tagZh": null
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "520",
        "link": "detect-capital",
        "title": "Detect Capital",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "51.9%",
        "questionDescription": "<p>\r\nGiven a word, you need to judge whether the usage of capitals in it is right or not.\r\n</p>\r\n\r\n<p>\r\nWe define the usage of capitals in a word to be right when one of the following cases holds:\r\n<ol>\r\n<li>All letters in this word are capitals, like \"USA\".</li>\r\n<li>All letters in this word are not capitals, like \"leetcode\".</li>\r\n<li>Only the first letter in this word is capital if it has more than one letter, like \"Google\".</li>\r\n</ol>\r\nOtherwise, we define that this word doesn't use capitals in a right way.\r\n</p>\r\n\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"USA\"\r\n<b>Output:</b> True\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"FlaG\"\r\n<b>Output:</b> False\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe input will be a non-empty word consisting of uppercase and lowercase latin letters.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\uff0c\u4f60\u9700\u8981\u5224\u65ad\u5355\u8bcd\u7684\u5927\u5199\u4f7f\u7528\u662f\u5426\u6b63\u786e\u3002</p>\n\n<p>\u6211\u4eec\u5b9a\u4e49\uff0c\u5728\u4ee5\u4e0b\u60c5\u51b5\u65f6\uff0c\u5355\u8bcd\u7684\u5927\u5199\u7528\u6cd5\u662f\u6b63\u786e\u7684\uff1a</p>\n\n<ol>\n\t<li>\u5168\u90e8\u5b57\u6bcd\u90fd\u662f\u5927\u5199\uff0c\u6bd4\u5982&quot;USA&quot;\u3002</li>\n\t<li>\u5355\u8bcd\u4e2d\u6240\u6709\u5b57\u6bcd\u90fd\u4e0d\u662f\u5927\u5199\uff0c\u6bd4\u5982&quot;leetcode&quot;\u3002</li>\n\t<li>\u5982\u679c\u5355\u8bcd\u4e0d\u53ea\u542b\u6709\u4e00\u4e2a\u5b57\u6bcd\uff0c\u53ea\u6709\u9996\u5b57\u6bcd\u5927\u5199\uff0c&nbsp;\u6bd4\u5982&nbsp;&quot;Google&quot;\u3002</li>\n</ol>\n\n<p>\u5426\u5219\uff0c\u6211\u4eec\u5b9a\u4e49\u8fd9\u4e2a\u5355\u8bcd\u6ca1\u6709\u6b63\u786e\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;USA&quot;\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;FlaG&quot;\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong> \u8f93\u5165\u662f\u7531\u5927\u5199\u548c\u5c0f\u5199\u62c9\u4e01\u5b57\u6bcd\u7ec4\u6210\u7684\u975e\u7a7a\u5355\u8bcd\u3002</p>\n",
        "titleZh": "\u68c0\u6d4b\u5927\u5199\u5b57\u6bcd",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "521",
        "link": "longest-uncommon-subsequence-i",
        "title": "Longest Uncommon Subsequence I ",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "60.8%",
        "questionDescription": "<p>\r\nGiven a group of two strings, you need to find the longest uncommon subsequence of this group of two strings.\r\nThe longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be <b>any</b> subsequence of the other strings.\r\n</p>\r\n\r\n<p>\r\nA <b>subsequence</b> is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\r\n</p>\r\n\r\n<p>\r\nThe input will be two strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"aba\", \"cdc\"\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> The longest uncommon subsequence is \"aba\" (or \"cdc\"), <br/>because \"aba\" is a subsequence of \"aba\", <br/>but not a subsequence of any other strings in the group of two strings. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<ol>\r\n<li>Both strings' lengths will not exceed 100.</li>\r\n<li>Only letters from a ~ z will appear in input strings. </li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u4ece\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e2d\u627e\u51fa\u6700\u957f\u7684\u7279\u6b8a\u5e8f\u5217\u3002\u6700\u957f\u7279\u6b8a\u5e8f\u5217\u5b9a\u4e49\u5982\u4e0b\uff1a\u8be5\u5e8f\u5217\u4e3a\u67d0\u5b57\u7b26\u4e32\u72ec\u6709\u7684\u6700\u957f\u5b50\u5e8f\u5217\uff08\u5373\u4e0d\u80fd\u662f\u5176\u4ed6\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217\uff09\u3002</p>\n\n<p><strong>\u5b50\u5e8f\u5217</strong>\u53ef\u4ee5\u901a\u8fc7\u5220\u53bb\u5b57\u7b26\u4e32\u4e2d\u7684\u67d0\u4e9b\u5b57\u7b26\u5b9e\u73b0\uff0c\u4f46\u4e0d\u80fd\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u7684\u76f8\u5bf9\u987a\u5e8f\u3002\u7a7a\u5e8f\u5217\u4e3a\u6240\u6709\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217\uff0c\u4efb\u4f55\u5b57\u7b26\u4e32\u4e3a\u5176\u81ea\u8eab\u7684\u5b50\u5e8f\u5217\u3002</p>\n\n<p>\u8f93\u5165\u4e3a\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u8f93\u51fa\u6700\u957f\u7279\u6b8a\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1\u3002</p>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;aba&quot;, &quot;cdc&quot;\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u6790:</strong> \u6700\u957f\u7279\u6b8a\u5e8f\u5217\u53ef\u4e3a &quot;aba&quot; (\u6216 &quot;cdc&quot;)\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u4e24\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u5747\u5c0f\u4e8e100\u3002</li>\n\t<li>\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u4ec5\u542b\u6709&nbsp;&#39;a&#39;~&#39;z&#39;\u3002</li>\n</ol>\n",
        "titleZh": "\u6700\u957f\u7279\u6b8a\u5e8f\u5217 \u2160",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "522",
        "link": "longest-uncommon-subsequence-ii",
        "title": "Longest Uncommon Subsequence II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "27.1%",
        "questionDescription": "<p>\r\nGiven a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be <b>any</b> subsequence of the other strings.\r\n</p>\r\n\r\n<p>\r\nA <b>subsequence</b> is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\r\n</p>\r\n\r\n<p>\r\nThe input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"aba\", \"cdc\", \"eae\"\r\n<b>Output:</b> 3\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<ol>\r\n<li>All the given strings' lengths will not exceed 10.</li>\r\n<li>The length of the given list will be in the range of [2, 50].</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u4f60\u9700\u8981\u4ece\u5b83\u4eec\u4e2d\u627e\u51fa\u6700\u957f\u7684\u7279\u6b8a\u5e8f\u5217\u3002\u6700\u957f\u7279\u6b8a\u5e8f\u5217\u5b9a\u4e49\u5982\u4e0b\uff1a\u8be5\u5e8f\u5217\u4e3a\u67d0\u5b57\u7b26\u4e32\u72ec\u6709\u7684\u6700\u957f\u5b50\u5e8f\u5217\uff08\u5373\u4e0d\u80fd\u662f\u5176\u4ed6\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217\uff09\u3002</p>\n\n<p><strong>\u5b50\u5e8f\u5217</strong>\u53ef\u4ee5\u901a\u8fc7\u5220\u53bb\u5b57\u7b26\u4e32\u4e2d\u7684\u67d0\u4e9b\u5b57\u7b26\u5b9e\u73b0\uff0c\u4f46\u4e0d\u80fd\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u7684\u76f8\u5bf9\u987a\u5e8f\u3002\u7a7a\u5e8f\u5217\u4e3a\u6240\u6709\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217\uff0c\u4efb\u4f55\u5b57\u7b26\u4e32\u4e3a\u5176\u81ea\u8eab\u7684\u5b50\u5e8f\u5217\u3002</p>\n\n<p>\u8f93\u5165\u5c06\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u8f93\u51fa\u662f\u6700\u957f\u7279\u6b8a\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u5982\u679c\u6700\u957f\u7279\u6b8a\u5e8f\u5217\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de -1 \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;aba&quot;, &quot;cdc&quot;, &quot;eae&quot;\n<strong>\u8f93\u51fa:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6240\u6709\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 10 \u3002</li>\n\t<li>\u7ed9\u5b9a\u5b57\u7b26\u4e32\u5217\u8868\u7684\u957f\u5ea6\u5c06\u5728 [2, 50 ] \u4e4b\u95f4\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u6700\u957f\u7279\u6b8a\u5e8f\u5217 II",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "523",
        "link": "continuous-subarray-sum",
        "title": "Continuous Subarray Sum",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "22.3%",
        "questionDescription": "<p>Given a list of <b>non-negative</b> numbers and a target <b>integer</b> k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of <b>k</b>, that is, sums up to n*k where n is also an <b>integer</b>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [23, 2, 4, 6, 7],  k=6\r\n<b>Output:</b> True\r\n<b>Explanation:</b> Because [2, 4] is a continuous subarray of size 2 and sums up to 6.\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [23, 2, 6, 4, 7],  k=6\r\n<b>Output:</b> True\r\n<b>Explanation:</b> Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The length of the array won&#39;t exceed 10,000.</li>\r\n\t<li>You may assume the sum of all the numbers is in the range of a signed 32-bit integer.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b<strong>\u975e\u8d1f\u6570</strong>\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807<strong>\u6574\u6570</strong>&nbsp;k\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u5426\u542b\u6709\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\uff0c\u5176\u5927\u5c0f\u81f3\u5c11\u4e3a 2\uff0c\u603b\u548c\u4e3a <strong>k</strong> \u7684\u500d\u6570\uff0c\u5373\u603b\u548c\u4e3a n*k\uff0c\u5176\u4e2d n \u4e5f\u662f\u4e00\u4e2a<strong>\u6574\u6570</strong>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [23,2,4,6,7], k = 6\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong> [2,4] \u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a 2 \u7684\u5b50\u6570\u7ec4\uff0c\u5e76\u4e14\u548c\u4e3a 6\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [23,2,6,4,7], k = 6\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong> [23,2,6,4,7]\u662f\u5927\u5c0f\u4e3a 5 \u7684\u5b50\u6570\u7ec4\uff0c\u5e76\u4e14\u548c\u4e3a 42\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc710,000\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6240\u6709\u6570\u5b57\u603b\u548c\u5728 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002</li>\n</ol>\n",
        "titleZh": "\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\u548c",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Samsung"
        ]
    },
    {
        "leetId": "524",
        "link": "longest-word-in-dictionary-through-deleting",
        "title": "Longest Word in Dictionary through Deleting",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "42.1%",
        "questionDescription": "<p>\r\nGiven a string and a string dictionary, find the longest string in the dictionary that can be formed by deleting some characters of the given string. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\r\n</p>\r\n<p><b>Example 1:</b><br>\r\n<pre>\r\n<b>Input:</b>\r\ns = \"abpcplea\", d = [\"ale\",\"apple\",\"monkey\",\"plea\"]\r\n\r\n<b>Output:</b> \r\n\"apple\"\r\n</pre>\r\n</p>\r\n\r\n</p>\r\n<p><b>Example 2:</b><br>\r\n<pre>\r\n<b>Input:</b>\r\ns = \"abpcplea\", d = [\"a\",\"b\",\"c\"]\r\n\r\n<b>Output:</b> \r\n\"a\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>All the strings in the input will only contain lower-case letters.</li>\r\n<li>The size of the dictionary won't exceed 1,000.</li>\r\n<li>The length of all the strings in the input won't exceed 1,000.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u5178\uff0c\u627e\u5230\u5b57\u5178\u91cc\u9762\u6700\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u5220\u9664\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u67d0\u4e9b\u5b57\u7b26\u6765\u5f97\u5230\u3002\u5982\u679c\u7b54\u6848\u4e0d\u6b62\u4e00\u4e2a\uff0c\u8fd4\u56de\u957f\u5ea6\u6700\u957f\u4e14\u5b57\u5178\u987a\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u7b54\u6848\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\ns = &quot;abpcplea&quot;, d = [&quot;ale&quot;,&quot;apple&quot;,&quot;monkey&quot;,&quot;plea&quot;]\n\n<strong>\u8f93\u51fa:</strong> \n&quot;apple&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\ns = &quot;abpcplea&quot;, d = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n\n<strong>\u8f93\u51fa:</strong> \n&quot;a&quot;\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u6240\u6709\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li>\u5b57\u5178\u7684\u5927\u5c0f\u4e0d\u4f1a\u8d85\u8fc7 1000\u3002</li>\n\t<li>\u6240\u6709\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 1000\u3002</li>\n</ol>\n",
        "titleZh": "\u901a\u8fc7\u5220\u9664\u5b57\u6bcd\u5339\u914d\u5230\u5b57\u5178\u91cc\u6700\u957f\u5355\u8bcd",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg"
        ]
    },
    {
        "leetId": "525",
        "link": "contiguous-array",
        "title": "Contiguous Array",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "33.0%",
        "questionDescription": "<p>Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1. </p>\r\n\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [0,1]\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> [0, 1] is the longest contiguous subarray with equal number of 0 and 1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [0,1,0]\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe length of the given binary array will not exceed 50,000.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u7ec4, \u627e\u5230\u542b\u6709\u76f8\u540c\u6570\u91cf\u7684 0 \u548c 1 \u7684\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u7684\u957f\u5ea6\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [0,1]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u8bf4\u660e:</strong> [0, 1] \u662f\u5177\u6709\u76f8\u540c\u6570\u91cf0\u548c1\u7684\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [0,1,0]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u8bf4\u660e:</strong> [0, 1] (\u6216 [1, 0]) \u662f\u5177\u6709\u76f8\u540c\u6570\u91cf0\u548c1\u7684\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:&nbsp;</strong>\u7ed9\u5b9a\u7684\u4e8c\u8fdb\u5236\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc750000\u3002</p>\n",
        "titleZh": "\u8fde\u7eed\u6570\u7ec4",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft"
        ]
    },
    {
        "leetId": "526",
        "link": "beautiful-arrangement",
        "title": "Beautiful Arrangement",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "50.6%",
        "questionDescription": "<p>Suppose you have <b>N</b> integers from 1 to N. We define a beautiful arrangement as an array that is constructed by these <b>N</b> numbers successfully if one of the following is true for the i<sub>th</sub> position (1 &lt;= i &lt;= N) in this array:</p>\r\n\r\n<ol>\r\n\t<li>The number at the i<sub>th</sub> position is divisible by <b>i</b>.</li>\r\n\t<li><b>i</b> is divisible by the number at the i<sub>th</sub> position.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Now given N, how many beautiful arrangements can you construct?</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 2\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> \r\n\r\nThe first beautiful arrangement is [1, 2]:\r\n\r\nNumber at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).\r\n\r\nNumber at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).\r\n\r\nThe second beautiful arrangement is [2, 1]:\r\n\r\nNumber at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).\r\n\r\nNumber at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li><b>N</b> is a positive integer and will not exceed 15.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u5047\u8bbe\u6709\u4ece 1 \u5230 N \u7684&nbsp;<strong>N&nbsp;</strong>\u4e2a\u6574\u6570\uff0c\u5982\u679c\u4ece\u8fd9&nbsp;<strong>N&nbsp;</strong>\u4e2a\u6570\u5b57\u4e2d\u6210\u529f\u6784\u9020\u51fa\u4e00\u4e2a\u6570\u7ec4\uff0c\u4f7f\u5f97\u6570\u7ec4\u7684\u7b2c <strong>i</strong>&nbsp;\u4f4d (1 &lt;= i &lt;= N) \u6ee1\u8db3\u5982\u4e0b\u4e24\u4e2a\u6761\u4ef6\u4e2d\u7684\u4e00\u4e2a\uff0c\u6211\u4eec\u5c31\u79f0\u8fd9\u4e2a\u6570\u7ec4\u4e3a\u4e00\u4e2a\u4f18\u7f8e\u7684\u6392\u5217\u3002\u6761\u4ef6\uff1a</p>\n\n<ol>\n\t<li>\u7b2c&nbsp;<strong>i&nbsp;</strong>\u4f4d\u7684\u6570\u5b57\u80fd\u88ab&nbsp;<strong>i&nbsp;</strong>\u6574\u9664</li>\n\t<li><strong>i</strong> \u80fd\u88ab\u7b2c <strong>i</strong> \u4f4d\u4e0a\u7684\u6570\u5b57\u6574\u9664</li>\n</ol>\n\n<p>\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 N\uff0c\u8bf7\u95ee\u53ef\u4ee5\u6784\u9020\u591a\u5c11\u4e2a\u4f18\u7f8e\u7684\u6392\u5217\uff1f</p>\n\n<p><strong>\u793a\u4f8b1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 2\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\n\u7b2c 1 \u4e2a\u4f18\u7f8e\u7684\u6392\u5217\u662f [1, 2]:\n  \u7b2c 1 \u4e2a\u4f4d\u7f6e\uff08i=1\uff09\u4e0a\u7684\u6570\u5b57\u662f1\uff0c1\u80fd\u88ab i\uff08i=1\uff09\u6574\u9664\n  \u7b2c 2 \u4e2a\u4f4d\u7f6e\uff08i=2\uff09\u4e0a\u7684\u6570\u5b57\u662f2\uff0c2\u80fd\u88ab i\uff08i=2\uff09\u6574\u9664\n\n\u7b2c 2 \u4e2a\u4f18\u7f8e\u7684\u6392\u5217\u662f [2, 1]:\n  \u7b2c 1 \u4e2a\u4f4d\u7f6e\uff08i=1\uff09\u4e0a\u7684\u6570\u5b57\u662f2\uff0c2\u80fd\u88ab i\uff08i=1\uff09\u6574\u9664\n  \u7b2c 2 \u4e2a\u4f4d\u7f6e\uff08i=2\uff09\u4e0a\u7684\u6570\u5b57\u662f1\uff0ci\uff08i=2\uff09\u80fd\u88ab 1 \u6574\u9664\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li><strong>N</strong> \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5e76\u4e14\u4e0d\u4f1a\u8d85\u8fc715\u3002</li>\n</ol>\n",
        "titleZh": "\u4f18\u7f8e\u7684\u6392\u5217",
        "tags": [
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Uber",
            "Mathworks"
        ]
    },
    {
        "leetId": "527",
        "link": "word-abbreviation",
        "title": "Word Abbreviation",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "31",
        "questionDescription": "\n<p>Given an array of n distinct non-empty strings, you need to generate <b>minimal</b> possible abbreviations for every word following rules below.</p>\n<ol>\n<li>Begin with the first character and then the number of characters abbreviated, which followed by the last character.</li>\n<li>If there are any conflict, that is more than one words share the same abbreviation, a longer prefix is used instead of only the first character until making the map from word to abbreviation become unique. In other words, a final abbreviation cannot map to more than one original words.</li>\n<li> If the abbreviation doesn't make the word shorter, then keep it as original.</li>\n</ol>\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b> [\"like\", \"god\", \"internal\", \"me\", \"internet\", \"interval\", \"intension\", \"face\", \"intrusion\"]\n<b>Output:</b> [\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"]\n</pre>\n<p></p>\n<b>Note:</b>\n<ol>\n<li> Both n and the length of each word will not exceed 400.</li>\n<li> The length of each word is greater than 1.</li>\n<li> The words consist of lowercase English letters only.</li>\n<li> The return answers should be <b>in the same order</b> as the original array.</li>\n</ol>\n",
        "questionDescriptionZh": "\n<p>Given an array of n distinct non-empty strings, you need to generate <b>minimal</b> possible abbreviations for every word following rules below.</p>\n<ol>\n<li>Begin with the first character and then the number of characters abbreviated, which followed by the last character.</li>\n<li>If there are any conflict, that is more than one words share the same abbreviation, a longer prefix is used instead of only the first character until making the map from word to abbreviation become unique. In other words, a final abbreviation cannot map to more than one original words.</li>\n<li> If the abbreviation doesn't make the word shorter, then keep it as original.</li>\n</ol>\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b> [\"like\", \"god\", \"internal\", \"me\", \"internet\", \"interval\", \"intension\", \"face\", \"intrusion\"]\n<b>Output:</b> [\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"]\n</pre>\n<p></p>\n<b>Note:</b>\n<ol>\n<li> Both n and the length of each word will not exceed 400.</li>\n<li> The length of each word is greater than 1.</li>\n<li> The words consist of lowercase English letters only.</li>\n<li> The return answers should be <b>in the same order</b> as the original array.</li>\n</ol>\n",
        "companies": [
            "Google",
            "Snapchat"
        ]
    },
    {
        "leetId": "528",
        "link": "random-pick-with-weight",
        "title": "Random Pick with Weight",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "36.9%",
        "questionDescription": "<p>Given an array <code>w</code> of positive integers, where <code>w[i]</code> describes the weight of index <code>i</code>,&nbsp;write a function <code>pickIndex</code>&nbsp;which randomly&nbsp;picks an index&nbsp;in proportion&nbsp;to its weight.</p>\r\n\r\n<p>Note:</p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= w.length &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= w[i] &lt;= 10^5</code></li>\r\n\t<li><code>pickIndex</code>&nbsp;will be called at most <code>10000</code> times.</li>\r\n</ol>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-1-1\">[&quot;Solution&quot;,&quot;pickIndex&quot;]\r\n</span><span id=\"example-input-1-2\">[[[1]],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,0]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-2-1\">[&quot;Solution&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;]\r\n</span><span id=\"example-input-2-2\">[[[1,3]],[],[],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,0,1,1,1,0]</span></pre>\r\n</div>\r\n\r\n<p><strong>Explanation of Input Syntax:</strong></p>\r\n\r\n<p>The input is two lists:&nbsp;the subroutines called&nbsp;and their&nbsp;arguments.&nbsp;<code>Solution</code>&#39;s&nbsp;constructor has one argument, the&nbsp;array <code>w</code>. <code>pickIndex</code> has no arguments.&nbsp;Arguments&nbsp;are&nbsp;always wrapped with a list, even if there aren&#39;t any.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4&nbsp;<code>w</code> \uff0c\u5176\u4e2d&nbsp;<code>w[i]</code>&nbsp;\u4ee3\u8868\u4f4d\u7f6e&nbsp;<code>i</code>&nbsp;\u7684\u6743\u91cd\uff0c\u8bf7\u5199\u4e00\u4e2a\u51fd\u6570&nbsp;<code>pickIndex</code>&nbsp;\uff0c\u5b83\u53ef\u4ee5\u968f\u673a\u5730\u83b7\u53d6\u4f4d\u7f6e&nbsp;<code>i</code>\uff0c\u9009\u53d6\u4f4d\u7f6e&nbsp;<code>i</code>&nbsp;\u7684\u6982\u7387\u4e0e&nbsp;<code>w[i]</code>&nbsp;\u6210\u6b63\u6bd4\u3002</p>\n\n<p>\u8bf4\u660e:</p>\n\n<ol>\n\t<li><code>1 &lt;= w.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= w[i] &lt;= 10^5</code></li>\n\t<li><code>pickIndex</code>&nbsp;\u5c06\u88ab\u8c03\u7528\u4e0d\u8d85\u8fc7&nbsp;<code>10000</code>&nbsp;\u6b21</li>\n</ol>\n\n<p><strong>\u793a\u4f8b1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;pickIndex&quot;]\n[[[1]],[]]\n<strong>\u8f93\u51fa: </strong>[null,0]\n</pre>\n\n<p><strong>\u793a\u4f8b2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;]\n[[[1,3]],[],[],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,0,1,1,1,0]</pre>\n\n<p><strong>\u8f93\u5165\u8bed\u6cd5\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u8f93\u5165\u662f\u4e24\u4e2a\u5217\u8868\uff1a\u8c03\u7528\u6210\u5458\u51fd\u6570\u540d\u548c\u8c03\u7528\u7684\u53c2\u6570\u3002<code>Solution</code>&nbsp;\u7684\u6784\u9020\u51fd\u6570\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u6570\u7ec4&nbsp;<code>w</code>\u3002<code>pickIndex</code>&nbsp;\u6ca1\u6709\u53c2\u6570\u3002\u8f93\u5165\u53c2\u6570\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5373\u4f7f\u53c2\u6570\u4e3a\u7a7a\uff0c\u4e5f\u4f1a\u8f93\u5165\u4e00\u4e2a [] \u7a7a\u5217\u8868\u3002</p>\n",
        "titleZh": "\u6309\u6743\u91cd\u968f\u673a\u9009\u62e9",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            },
            {
                "tag": "Random",
                "link": "random",
                "tagZh": null
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Uber",
            "LinkedIn",
            "Yelp",
            "Two Sigma",
            "Rubrik",
            "DoorDash"
        ]
    },
    {
        "leetId": "529",
        "link": "minesweeper",
        "title": "Minesweeper",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "53.5%",
        "questionDescription": "<p>Let&#39;s play the minesweeper game (<a href=\"https://en.wikipedia.org/wiki/Minesweeper_(video_game)\">Wikipedia</a>, <a href=\"http://minesweeperonline.com\">online game</a>)!</p>\r\n\r\n<p>You are given a 2D char matrix representing the game board. <b>&#39;M&#39;</b> represents an <b>unrevealed</b> mine, <b>&#39;E&#39;</b> represents an <b>unrevealed</b> empty square, <b>&#39;B&#39;</b> represents a <b>revealed</b> blank square that has no adjacent (above, below, left, right, and all 4 diagonals) mines, <b>digit</b> (&#39;1&#39; to &#39;8&#39;) represents how many mines are adjacent to this <b>revealed</b> square, and finally <b>&#39;X&#39;</b> represents a <b>revealed</b> mine.</p>\r\n\r\n<p>Now given the next click position (row and column indices) among all the <b>unrevealed</b> squares (&#39;M&#39; or &#39;E&#39;), return the board after revealing this position according to the following rules:</p>\r\n\r\n<ol>\r\n\t<li>If a mine (&#39;M&#39;) is revealed, then the game is over - change it to <b>&#39;X&#39;</b>.</li>\r\n\t<li>If an empty square (&#39;E&#39;) with <b>no adjacent mines</b> is revealed, then change it to revealed blank (&#39;B&#39;) and all of its adjacent <b>unrevealed</b> squares should be revealed recursively.</li>\r\n\t<li>If an empty square (&#39;E&#39;) with <b>at least one adjacent mine</b> is revealed, then change it to a digit (&#39;1&#39; to &#39;8&#39;) representing the number of adjacent mines.</li>\r\n\t<li>Return the board when no more squares will be revealed.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n\r\n[[&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;],\r\n [&#39;E&#39;, &#39;E&#39;, &#39;M&#39;, &#39;E&#39;, &#39;E&#39;],\r\n [&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;],\r\n [&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;]]\r\n\r\nClick : [3,0]\r\n\r\n<b>Output:</b> \r\n\r\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;M&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\r\n\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/minesweeper_example_1.png\" style=\"width: 100%; max-width: 400px\" />\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n\r\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;M&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\r\n\r\nClick : [1,2]\r\n\r\n<b>Output:</b> \r\n\r\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;X&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\r\n\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/minesweeper_example_2.png\" style=\"width: 100%; max-width: 400px\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The range of the input matrix&#39;s height and width is [1,50].</li>\r\n\t<li>The click position will only be an unrevealed square (&#39;M&#39; or &#39;E&#39;), which also means the input board contains at least one clickable square.</li>\r\n\t<li>The input board won&#39;t be a stage when game is over (some mines have been revealed).</li>\r\n\t<li>For simplicity, not mentioned rules should be ignored in this problem. For example, you <b>don&#39;t</b> need to reveal all the unrevealed mines when the game is over, consider any cases that you will win the game or flag any squares.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u8ba9\u6211\u4eec\u4e00\u8d77\u6765\u73a9\u626b\u96f7\u6e38\u620f\uff01</p>\r\n\r\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6e38\u620f\u677f\u7684\u4e8c\u7ef4\u5b57\u7b26\u77e9\u9635\u3002&nbsp;<strong>&#39;M&#39;</strong>&nbsp;\u4ee3\u8868\u4e00\u4e2a<strong>\u672a\u6316\u51fa\u7684</strong>\u5730\u96f7\uff0c<strong>&#39;E&#39;</strong>&nbsp;\u4ee3\u8868\u4e00\u4e2a<strong>\u672a\u6316\u51fa\u7684</strong>\u7a7a\u65b9\u5757\uff0c<strong>&#39;B&#39;&nbsp;</strong>\u4ee3\u8868\u6ca1\u6709\u76f8\u90bb\uff08\u4e0a\uff0c\u4e0b\uff0c\u5de6\uff0c\u53f3\uff0c\u548c\u6240\u67094\u4e2a\u5bf9\u89d2\u7ebf\uff09\u5730\u96f7\u7684<strong>\u5df2\u6316\u51fa\u7684</strong>\u7a7a\u767d\u65b9\u5757\uff0c<strong>\u6570\u5b57</strong>\uff08&#39;1&#39; \u5230 &#39;8&#39;\uff09\u8868\u793a\u6709\u591a\u5c11\u5730\u96f7\u4e0e\u8fd9\u5757<strong>\u5df2\u6316\u51fa\u7684</strong>\u65b9\u5757\u76f8\u90bb\uff0c<strong>&#39;X&#39;</strong>&nbsp;\u5219\u8868\u793a\u4e00\u4e2a<strong>\u5df2\u6316\u51fa\u7684</strong>\u5730\u96f7\u3002</p>\r\n\r\n<p>\u73b0\u5728\u7ed9\u51fa\u5728\u6240\u6709<strong>\u672a\u6316\u51fa\u7684</strong>\u65b9\u5757\u4e2d\uff08&#39;M&#39;\u6216\u8005&#39;E&#39;\uff09\u7684\u4e0b\u4e00\u4e2a\u70b9\u51fb\u4f4d\u7f6e\uff08\u884c\u548c\u5217\u7d22\u5f15\uff09\uff0c\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff0c\u8fd4\u56de\u76f8\u5e94\u4f4d\u7f6e\u88ab\u70b9\u51fb\u540e\u5bf9\u5e94\u7684\u9762\u677f\uff1a</p>\r\n\r\n<ol>\r\n\t<li>\u5982\u679c\u4e00\u4e2a\u5730\u96f7\uff08&#39;M&#39;\uff09\u88ab\u6316\u51fa\uff0c\u6e38\u620f\u5c31\u7ed3\u675f\u4e86- \u628a\u5b83\u6539\u4e3a&nbsp;<strong>&#39;X&#39;</strong>\u3002</li>\r\n\t<li>\u5982\u679c\u4e00\u4e2a<strong>\u6ca1\u6709\u76f8\u90bb\u5730\u96f7</strong>\u7684\u7a7a\u65b9\u5757\uff08&#39;E&#39;\uff09\u88ab\u6316\u51fa\uff0c\u4fee\u6539\u5b83\u4e3a\uff08&#39;B&#39;\uff09\uff0c\u5e76\u4e14\u6240\u6709\u548c\u5176\u76f8\u90bb\u7684\u65b9\u5757\u90fd\u5e94\u8be5\u88ab\u9012\u5f52\u5730\u63ed\u9732\u3002</li>\r\n\t<li>\u5982\u679c\u4e00\u4e2a<strong>\u81f3\u5c11\u4e0e\u4e00\u4e2a\u5730\u96f7\u76f8\u90bb</strong>\u7684\u7a7a\u65b9\u5757\uff08&#39;E&#39;\uff09\u88ab\u6316\u51fa\uff0c\u4fee\u6539\u5b83\u4e3a\u6570\u5b57\uff08&#39;1&#39;\u5230&#39;8&#39;\uff09\uff0c\u8868\u793a\u76f8\u90bb\u5730\u96f7\u7684\u6570\u91cf\u3002</li>\r\n\t<li>\u5982\u679c\u5728\u6b64\u6b21\u70b9\u51fb\u4e2d\uff0c\u82e5\u65e0\u66f4\u591a\u65b9\u5757\u53ef\u88ab\u63ed\u9732\uff0c\u5219\u8fd4\u56de\u9762\u677f\u3002</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165:</strong> \r\n\r\n[[&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;],\r\n [&#39;E&#39;, &#39;E&#39;, &#39;M&#39;, &#39;E&#39;, &#39;E&#39;],\r\n [&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;],\r\n [&#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;, &#39;E&#39;]]\r\n\r\nClick : [3,0]\r\n\r\n<strong>\u8f93\u51fa:</strong> \r\n\r\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;M&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\r\n\r\n<strong>\u89e3\u91ca:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/minesweeper_example_1.png\" style=\"width: 100%; max-width: 400px\">\r\n</pre>\r\n\r\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165:</strong> \r\n\r\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;M&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\r\n\r\nClick : [1,2]\r\n\r\n<strong>\u8f93\u51fa:</strong> \r\n\r\n[[&#39;B&#39;, &#39;1&#39;, &#39;E&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;X&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;B&#39;],\r\n [&#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;, &#39;B&#39;]]\r\n\r\n<strong>\u89e3\u91ca:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/minesweeper_example_2.png\" style=\"width: 100%; max-width: 400px\">\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\r\n\r\n<ol>\r\n\t<li>\u8f93\u5165\u77e9\u9635\u7684\u5bbd\u548c\u9ad8\u7684\u8303\u56f4\u4e3a [1,50]\u3002</li>\r\n\t<li>\u70b9\u51fb\u7684\u4f4d\u7f6e\u53ea\u80fd\u662f\u672a\u88ab\u6316\u51fa\u7684\u65b9\u5757 (&#39;M&#39; \u6216\u8005 &#39;E&#39;)\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u9762\u677f\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u53ef\u70b9\u51fb\u7684\u65b9\u5757\u3002</li>\r\n\t<li>\u8f93\u5165\u9762\u677f\u4e0d\u4f1a\u662f\u6e38\u620f\u7ed3\u675f\u7684\u72b6\u6001\uff08\u5373\u6709\u5730\u96f7\u5df2\u88ab\u6316\u51fa\uff09\u3002</li>\r\n\t<li>\u7b80\u5355\u8d77\u89c1\uff0c\u672a\u63d0\u53ca\u7684\u89c4\u5219\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\u53ef\u88ab\u5ffd\u7565\u3002\u4f8b\u5982\uff0c\u5f53\u6e38\u620f\u7ed3\u675f\u65f6\u4f60\u4e0d\u9700\u8981\u6316\u51fa\u6240\u6709\u5730\u96f7\uff0c\u8003\u8651\u6240\u6709\u4f60\u53ef\u80fd\u8d62\u5f97\u6e38\u620f\u6216\u6807\u8bb0\u65b9\u5757\u7684\u60c5\u51b5\u3002</li>\r\n</ol>",
        "titleZh": "\u626b\u96f7\u6e38\u620f",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber"
        ]
    },
    {
        "leetId": "530",
        "link": "minimum-absolute-difference-in-bst",
        "title": "Minimum Absolute Difference in BST",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "52.6%",
        "questionDescription": "<p>Given a binary search tree with non-negative values, find the minimum <a href=\"https://en.wikipedia.org/wiki/Absolute_difference\">absolute difference</a> between values of any two nodes.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\n\r\n   1\r\n    \\\r\n     3\r\n    /\r\n   2\r\n\r\n<b>Output:</b>\r\n1\r\n\r\n<b>Explanation:</b>\r\nThe minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b> There are at least two nodes in this BST.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6240\u6709\u8282\u70b9\u4e3a\u975e\u8d1f\u503c\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u6c42\u6811\u4e2d\u4efb\u610f\u4e24\u8282\u70b9\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u6700\u5c0f\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n\n   1\n    \\\n     3\n    /\n   2\n\n<strong>\u8f93\u51fa:</strong>\n1\n\n<strong>\u89e3\u91ca:\n</strong>\u6700\u5c0f\u7edd\u5bf9\u5dee\u4e3a1\uff0c\u5176\u4e2d 2 \u548c 1 \u7684\u5dee\u7684\u7edd\u5bf9\u503c\u4e3a 1\uff08\u6216\u8005 2 \u548c 3\uff09\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f: </strong>\u6811\u4e2d\u81f3\u5c11\u67092\u4e2a\u8282\u70b9\u3002</p>\n",
        "titleZh": "\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u5c0f\u7edd\u5bf9\u5dee",
        "tags": [
            {
                "tag": "Binary Search Tree",
                "link": "binary-search-tree",
                "tagZh": "\u4e8c\u53c9\u641c\u7d22\u6811"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "531",
        "link": "lonely-pixel-i",
        "title": "Lonely Pixel I",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "7",
        "questionDescription": "\n<p>Given a picture consisting of black and white pixels, find the number of <b>black</b> lonely pixels.</p>\n<p>The picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively. </p>\n<p>A black lonely pixel is character 'B' that located at a specific position where the same row and same column don't have any other black pixels.</p>\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b> \n[['W', 'W', 'B'],\n ['W', 'B', 'W'],\n ['B', 'W', 'W']]\n\n<b>Output:</b> 3\n<b>Explanation:</b> All the three 'B's are black lonely pixels.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The range of width and height of the input 2D array is [1,500].</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a picture consisting of black and white pixels, find the number of <b>black</b> lonely pixels.</p>\n<p>The picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively. </p>\n<p>A black lonely pixel is character 'B' that located at a specific position where the same row and same column don't have any other black pixels.</p>\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b> \n[['W', 'W', 'B'],\n ['W', 'B', 'W'],\n ['B', 'W', 'W']]\n\n<b>Output:</b> 3\n<b>Explanation:</b> All the three 'B's are black lonely pixels.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The range of width and height of the input 2D array is [1,500].</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "532",
        "link": "k-diff-pairs-in-an-array",
        "title": "K-diff Pairs in an Array",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "31.4%",
        "questionDescription": "<p>\r\nGiven an array of integers and an integer <b>k</b>, you need to find the number of <b>unique</b> k-diff pairs in the array. Here a <b>k-diff</b> pair is defined as an integer pair (i, j), where <b>i</b> and <b>j</b> are both numbers in the array and their <a href = \"https://en.wikipedia.org/wiki/Absolute_difference\">absolute difference</a> is <b>k</b>.\r\n</p>\r\n\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [3, 1, 4, 1, 5], k = 2\r\n<b>Output:</b> 2\r\n<b>Explanation: </b>There are two 2-diff pairs in the array, (1, 3) and (3, 5).</br>Although we have two 1s in the input, we should only return the number of <b>unique</b> pairs.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b>[1, 2, 3, 4, 5], k = 1\r\n<b>Output: </b>4\r\n<b>Explanation:</b> There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input: </b>[1, 3, 1, 5, 4], k = 0\r\n<b>Output: </b>1\r\n<b>Explanation:</b> There is one 0-diff pair in the array, (1, 1).\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The pairs (i, j) and (j, i) count as the same pair.</li>\r\n<li>The length of the array won't exceed 10,000.</li>\r\n<li>All the integers in the given input belong to the range: [-1e7, 1e7].</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570&nbsp;<strong>k</strong>, \u4f60\u9700\u8981\u5728\u6570\u7ec4\u91cc\u627e\u5230<strong>\u4e0d\u540c\u7684&nbsp;</strong>k-diff \u6570\u5bf9\u3002\u8fd9\u91cc\u5c06&nbsp;<strong>k-diff</strong>&nbsp;\u6570\u5bf9\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u6574\u6570\u5bf9 (i, j), \u5176\u4e2d<strong> i </strong>\u548c<strong> j </strong>\u90fd\u662f\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\uff0c\u4e14\u4e24\u6570\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u662f&nbsp;<strong>k</strong>.</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [3, 1, 4, 1, 5], k = 2\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca: </strong>\u6570\u7ec4\u4e2d\u6709\u4e24\u4e2a 2-diff \u6570\u5bf9, (1, 3) \u548c (3, 5)\u3002\n\u5c3d\u7ba1\u6570\u7ec4\u4e2d\u6709\u4e24\u4e2a1\uff0c\u4f46\u6211\u4eec\u53ea\u5e94\u8fd4\u56de\u4e0d\u540c\u7684\u6570\u5bf9\u7684\u6570\u91cf\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>[1, 2, 3, 4, 5], k = 1\n<strong>\u8f93\u51fa: </strong>4\n<strong>\u89e3\u91ca:</strong> \u6570\u7ec4\u4e2d\u6709\u56db\u4e2a 1-diff \u6570\u5bf9, (1, 2), (2, 3), (3, 4) \u548c (4, 5)\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>[1, 3, 1, 5, 4], k = 0\n<strong>\u8f93\u51fa: </strong>1\n<strong>\u89e3\u91ca:</strong> \u6570\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a 0-diff \u6570\u5bf9\uff0c(1, 1)\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u6570\u5bf9 (i, j) \u548c\u6570\u5bf9&nbsp;(j, i) \u88ab\u7b97\u4f5c\u540c\u4e00\u6570\u5bf9\u3002</li>\n\t<li>\u6570\u7ec4\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc710,000\u3002</li>\n\t<li>\u6240\u6709\u8f93\u5165\u7684\u6574\u6570\u7684\u8303\u56f4\u5728&nbsp;[-1e7, 1e7]\u3002</li>\n</ol>\n",
        "titleZh": "\u6570\u7ec4\u4e2d\u7684K-diff\u6570\u5bf9",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Amazon",
            "Bloomberg",
            "Salesforce",
            "Paypal"
        ]
    },
    {
        "leetId": "533",
        "link": "lonely-pixel-ii",
        "title": "Lonely Pixel II",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n<p>Given a picture consisting of black and white pixels, and a positive integer N, find the number of black pixels located at some specific row <b>R</b> and column <b>C</b> that align with all the following rules:</p>\n<ol>\n<li> Row R and column C both contain exactly N black pixels.</li>\n<li> For all rows that have a black pixel at column C, they should be exactly the same as row R</li>\n</ol>\n<p>The picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively. </p>\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b>                                            \n[['W', 'B', 'W', 'B', 'B', 'W'],    \n ['W', 'B', 'W', 'B', 'B', 'W'],    \n ['W', 'B', 'W', 'B', 'B', 'W'],    \n ['W', 'W', 'B', 'W', 'B', 'W']] \n\nN = 3\n<b>Output:</b> 6\n<b>Explanation:</b> All the bold 'B' are the black pixels we need (all 'B's at column 1 and 3).\n        0    1    2    3    4    5         column index                                            \n0    [['W', <b>'B'</b>, 'W', <b>'B'</b>, 'B', 'W'],    \n1     ['W', <b>'B'</b>, 'W', <b>'B'</b>, 'B', 'W'],    \n2     ['W', <b>'B'</b>, 'W', <b>'B'</b>, 'B', 'W'],    \n3     ['W', 'W', 'B', 'W', 'B', 'W']]    \nrow index\n\nTake 'B' at row R = 0 and column C = 1 as an example:\nRule 1, row R = 0 and column C = 1 both have exactly N = 3 black pixels. \nRule 2, the rows have black pixel at column C = 1 are row 0, row 1 and row 2. They are exactly the same as row R = 0.\n\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The range of width and height of the input 2D array is [1,200].</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a picture consisting of black and white pixels, and a positive integer N, find the number of black pixels located at some specific row <b>R</b> and column <b>C</b> that align with all the following rules:</p>\n<ol>\n<li> Row R and column C both contain exactly N black pixels.</li>\n<li> For all rows that have a black pixel at column C, they should be exactly the same as row R</li>\n</ol>\n<p>The picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively. </p>\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b>                                            \n[['W', 'B', 'W', 'B', 'B', 'W'],    \n ['W', 'B', 'W', 'B', 'B', 'W'],    \n ['W', 'B', 'W', 'B', 'B', 'W'],    \n ['W', 'W', 'B', 'W', 'B', 'W']] \n\nN = 3\n<b>Output:</b> 6\n<b>Explanation:</b> All the bold 'B' are the black pixels we need (all 'B's at column 1 and 3).\n        0    1    2    3    4    5         column index                                            \n0    [['W', <b>'B'</b>, 'W', <b>'B'</b>, 'B', 'W'],    \n1     ['W', <b>'B'</b>, 'W', <b>'B'</b>, 'B', 'W'],    \n2     ['W', <b>'B'</b>, 'W', <b>'B'</b>, 'B', 'W'],    \n3     ['W', 'W', 'B', 'W', 'B', 'W']]    \nrow index\n\nTake 'B' at row R = 0 and column C = 1 as an example:\nRule 1, row R = 0 and column C = 1 both have exactly N = 3 black pixels. \nRule 2, the rows have black pixel at column C = 1 are row 0, row 1 and row 2. They are exactly the same as row R = 0.\n\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The range of width and height of the input 2D array is [1,200].</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "535",
        "link": "encode-and-decode-tinyurl",
        "title": "Encode and Decode TinyURL",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "78.4%",
        "questionDescription": "<blockquote>Note: This is a companion problem to the <a href=\"https://leetcode.com/discuss/interview-question/system-design/\" target=\"_blank\">System Design</a> problem: <a href=\"https://leetcode.com/discuss/interview-question/124658/Design-a-URL-Shortener-(-TinyURL-)-System/\" target=\"_blank\">Design TinyURL</a>.</blockquote>\r\n\r\n<p>TinyURL is a URL shortening service where you enter a URL such as <code>https://leetcode.com/problems/design-tinyurl</code> and it returns a short URL such as <code>http://tinyurl.com/4e9iAk</code>.</p>\r\n\r\n<p>Design the <code>encode</code> and <code>decode</code> methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.</p>\r\n",
        "questionDescriptionZh": "<p>TinyURL\u662f\u4e00\u79cdURL\u7b80\u5316\u670d\u52a1\uff0c \u6bd4\u5982\uff1a\u5f53\u4f60\u8f93\u5165\u4e00\u4e2aURL&nbsp;<code>https://leetcode.com/problems/design-tinyurl</code>&nbsp;\u65f6\uff0c\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a\u7b80\u5316\u7684URL&nbsp;<code>http://tinyurl.com/4e9iAk</code>.</p>\n\n<p>\u8981\u6c42\uff1a\u8bbe\u8ba1\u4e00\u4e2a TinyURL \u7684\u52a0\u5bc6&nbsp;<code>encode</code>&nbsp;\u548c\u89e3\u5bc6&nbsp;<code>decode</code>&nbsp;\u7684\u65b9\u6cd5\u3002\u4f60\u7684\u52a0\u5bc6\u548c\u89e3\u5bc6\u7b97\u6cd5\u5982\u4f55\u8bbe\u8ba1\u548c\u8fd0\u4f5c\u662f\u6ca1\u6709\u9650\u5236\u7684\uff0c\u4f60\u53ea\u9700\u8981\u4fdd\u8bc1\u4e00\u4e2aURL\u53ef\u4ee5\u88ab\u52a0\u5bc6\u6210\u4e00\u4e2aTinyURL\uff0c\u5e76\u4e14\u8fd9\u4e2aTinyURL\u53ef\u4ee5\u7528\u89e3\u5bc6\u65b9\u6cd5\u6062\u590d\u6210\u539f\u672c\u7684URL\u3002</p>\n",
        "titleZh": "TinyURL \u7684\u52a0\u5bc6\u4e0e\u89e3\u5bc6",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Adobe",
            "LinkedIn",
            "Alibaba",
            "Baidu",
            "Salesforce",
            "Palantir Technologies"
        ]
    },
    {
        "leetId": "536",
        "link": "construct-binary-tree-from-string",
        "title": "Construct Binary Tree from String",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n<p>You need to construct a binary tree from a string consisting of parenthesis and integers. </p>\n<p>The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure. </p>\n<p>You always start to construct the <b>left</b> child node of the parent first if it exists.</p>\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b> \"4(2(3)(1))(6(5))\"\n<b>Output:</b> return the tree root node representing the following tree:\n\n       4\n     /   \\\n    2     6\n   / \\   / \n  3   1 5   \n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>There will only be <code>'('</code>,  <code>')'</code>,  <code>'-'</code> and  <code>'0'</code> ~ <code>'9'</code> in the input string.</li>\n<li>An empty tree is represented by <code>\"\"</code> instead of <code>\"()\"</code>.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>You need to construct a binary tree from a string consisting of parenthesis and integers. </p>\n<p>The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure. </p>\n<p>You always start to construct the <b>left</b> child node of the parent first if it exists.</p>\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b> \"4(2(3)(1))(6(5))\"\n<b>Output:</b> return the tree root node representing the following tree:\n\n       4\n     /   \\\n    2     6\n   / \\   / \n  3   1 5   \n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>There will only be <code>'('</code>,  <code>')'</code>,  <code>'-'</code> and  <code>'0'</code> ~ <code>'9'</code> in the input string.</li>\n<li>An empty tree is represented by <code>\"\"</code> instead of <code>\"()\"</code>.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Amazon",
            "Facebook"
        ]
    },
    {
        "leetId": "537",
        "link": "complex-number-multiplication",
        "title": "Complex Number Multiplication",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "63.4%",
        "questionDescription": "<p>\r\nGiven two strings representing two <a href = \"https://en.wikipedia.org/wiki/Complex_number\">complex numbers</a>.</p>\r\n\r\n<p>\r\nYou need to return a string representing their multiplication. Note i<sup>2</sup> = -1 according to the definition.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"1+1i\", \"1+1i\"\r\n<b>Output:</b> \"0+2i\"\r\n<b>Explanation:</b> (1 + i) * (1 + i) = 1 + i<sup>2</sup> + 2 * i = 2i, and you need convert it to the form of 0+2i.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"1+-1i\", \"1+-1i\"\r\n<b>Output:</b> \"0+-2i\"\r\n<b>Explanation:</b> (1 - i) * (1 - i) = 1 + i<sup>2</sup> - 2 * i = -2i, and you need convert it to the form of 0+-2i.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<ol>\r\n<li>The input strings will not have extra blank.</li>\r\n<li>The input strings will be given in the form of <b>a+bi</b>, where the integer <b>a</b> and <b>b</b> will both belong to the range of [-100, 100]. And <b>the output should be also in this form</b>.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u8868\u793a<a href=\"https://baike.baidu.com/item/%E5%A4%8D%E6%95%B0/254365?fr=aladdin\">\u590d\u6570</a>\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u8fd4\u56de\u8868\u793a\u5b83\u4eec\u4e58\u79ef\u7684\u5b57\u7b26\u4e32\u3002\u6ce8\u610f\uff0c\u6839\u636e\u5b9a\u4e49 i<sup>2</sup> = -1 \u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;1+1i&quot;, &quot;1+1i&quot;\n<strong>\u8f93\u51fa:</strong> &quot;0+2i&quot;\n<strong>\u89e3\u91ca:</strong> (1 + i) * (1 + i) = 1 + i<sup>2</sup> + 2 * i = 2i \uff0c\u4f60\u9700\u8981\u5c06\u5b83\u8f6c\u6362\u4e3a 0+2i \u7684\u5f62\u5f0f\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;1+-1i&quot;, &quot;1+-1i&quot;\n<strong>\u8f93\u51fa:</strong> &quot;0+-2i&quot;\n<strong>\u89e3\u91ca:</strong> (1 - i) * (1 - i) = 1 + i<sup>2</sup> - 2 * i = -2i \uff0c\u4f60\u9700\u8981\u5c06\u5b83\u8f6c\u6362\u4e3a 0+-2i \u7684\u5f62\u5f0f\u3002 \n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u5b57\u7b26\u4e32\u4e0d\u5305\u542b\u989d\u5916\u7684\u7a7a\u683c\u3002</li>\n\t<li>\u8f93\u5165\u5b57\u7b26\u4e32\u5c06\u4ee5&nbsp;<strong>a+bi</strong> \u7684\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5176\u4e2d\u6574\u6570 <strong>a</strong> \u548c <strong>b</strong> \u7684\u8303\u56f4\u5747\u5728 [-100, 100] \u4e4b\u95f4\u3002<strong>\u8f93\u51fa\u4e5f\u5e94\u5f53\u7b26\u5408\u8fd9\u79cd\u5f62\u5f0f</strong>\u3002</li>\n</ol>\n",
        "titleZh": "\u590d\u6570\u4e58\u6cd5",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "538",
        "link": "convert-bst-to-greater-tree",
        "title": "Convert BST to Greater Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "51.8%",
        "questionDescription": "<p>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p>\r\n\r\n<p>\r\n<b>Example:</b>\r\n<pre>\r\n<b>Input:</b> The root of a Binary Search Tree like this:\r\n              5\r\n            /   \\\r\n           2     13\r\n\r\n<b>Output:</b> The root of a Greater Tree like this:\r\n             18\r\n            /   \\\r\n          20     13\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff08Binary Search Tree\uff09\uff0c\u628a\u5b83\u8f6c\u6362\u6210\u4e3a\u7d2f\u52a0\u6811\uff08Greater Tree)\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u662f\u539f\u6765\u7684\u8282\u70b9\u503c\u52a0\u4e0a\u6240\u6709\u5927\u4e8e\u5b83\u7684\u8282\u70b9\u503c\u4e4b\u548c\u3002</p>\n\n<p><strong>\u4f8b\u5982\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \u4e8c\u53c9\u641c\u7d22\u6811:\n              5\n            /   \\\n           2     13\n\n<strong>\u8f93\u51fa:</strong> \u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811:\n             18\n            /   \\\n          20     13\n</pre>\n",
        "titleZh": "\u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "539",
        "link": "minimum-time-difference",
        "title": "Minimum Time Difference",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "47.3%",
        "questionDescription": "Given a list of 24-hour clock time points in \"Hour:Minutes\" format, find the minimum <b>minutes</b> difference between any two time points in the list. \r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [\"23:59\",\"00:00\"]\r\n<b>Output:</b> 1\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The number of time points in the given list is at least 2 and won't exceed 20000.</li>\r\n<li>The input time is legal and ranges from 00:00 to 23:59.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a 24 \u5c0f\u65f6\u5236\uff08\u5c0f\u65f6:\u5206\u949f\uff09\u7684\u65f6\u95f4\u5217\u8868\uff0c\u627e\u51fa\u5217\u8868\u4e2d\u4efb\u610f\u4e24\u4e2a\u65f6\u95f4\u7684\u6700\u5c0f\u65f6\u95f4\u5dee\u5e76\u5df2\u5206\u949f\u6570\u8868\u793a\u3002</p>\n\n<p><br />\n<strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [&quot;23:59&quot;,&quot;00:00&quot;]\n<strong>\u8f93\u51fa:</strong> 1\n</pre>\n\n<p><br />\n<strong>\u5907\u6ce8:</strong></p>\n\n<ol>\n\t<li>\u5217\u8868\u4e2d\u65f6\u95f4\u6570\u5728 2~20000 \u4e4b\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u65f6\u95f4\u53d6\u503c\u5728 00:00~23:59 \u4e4b\u95f4\u3002</li>\n</ol>\n",
        "titleZh": "\u6700\u5c0f\u65f6\u95f4\u5dee",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Palantir Technologies",
            "Palantir"
        ]
    },
    {
        "leetId": "540",
        "link": "single-element-in-a-sorted-array",
        "title": "Single Element in a Sorted Array",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "62.3%",
        "questionDescription": "<p>\r\nGiven a sorted array consisting of only integers where every element appears twice except for one element which appears once. Find this single element that appears only once. \r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,1,2,3,3,4,4,8,8]\r\n<b>Output:</b> 2\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [3,3,7,7,10,11,11]\r\n<b>Output:</b> 10\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nYour solution should run in O(log n) time and O(1) space.\r\n</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6574\u6570\u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f1a\u51fa\u73b0\u4e24\u6b21\uff0c\u552f\u6709\u4e00\u4e2a\u6570\u53ea\u4f1a\u51fa\u73b0\u4e00\u6b21\uff0c\u627e\u51fa\u8fd9\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,1,2,3,3,4,4,8,8]\n<strong>\u8f93\u51fa:</strong> 2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [3,3,7,7,10,11,11]\n<strong>\u8f93\u51fa:</strong> 10\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong> \u60a8\u7684\u65b9\u6848\u5e94\u8be5\u5728 O(log n)\u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1)\u7a7a\u95f4\u590d\u6742\u5ea6\u4e2d\u8fd0\u884c\u3002</p>\n",
        "titleZh": "\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u5355\u4e00\u5143\u7d20",
        "tags": [],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Adobe"
        ]
    },
    {
        "leetId": "541",
        "link": "reverse-string-ii",
        "title": "Reverse String II",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "45.7%",
        "questionDescription": "</p>\r\nGiven a string and an integer k, you need to reverse the first k characters for every 2k characters counting from the start of the string. If there are less than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.\r\n</p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> s = \"abcdefg\", k = 2\r\n<b>Output:</b> \"bacdfeg\"\r\n</pre>\r\n</p>\r\n\r\n<b>Restrictions:</b> </b>\r\n<ol>\r\n<li> The string consists of lower English letters only.</li>\r\n<li> Length of the given string and k will in the range [1, 10000]</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u548c\u4e00\u4e2a\u6574\u6570 k\uff0c\u4f60\u9700\u8981\u5bf9\u4ece\u5b57\u7b26\u4e32\u5f00\u5934\u7b97\u8d77\u7684\u6bcf\u4e2a 2k \u4e2a\u5b57\u7b26\u7684\u524dk\u4e2a\u5b57\u7b26\u8fdb\u884c\u53cd\u8f6c\u3002\u5982\u679c\u5269\u4f59\u5c11\u4e8e k \u4e2a\u5b57\u7b26\uff0c\u5219\u5c06\u5269\u4f59\u7684\u6240\u6709\u5168\u90e8\u53cd\u8f6c\u3002\u5982\u679c\u6709\u5c0f\u4e8e 2k \u4f46\u5927\u4e8e\u6216\u7b49\u4e8e k \u4e2a\u5b57\u7b26\uff0c\u5219\u53cd\u8f6c\u524d k \u4e2a\u5b57\u7b26\uff0c\u5e76\u5c06\u5269\u4f59\u7684\u5b57\u7b26\u4fdd\u6301\u539f\u6837\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> s = &quot;abcdefg&quot;, k = 2\n<strong>\u8f93\u51fa:</strong> &quot;bacdfeg&quot;\n</pre>\n\n<p><strong>\u8981\u6c42:</strong></p>\n\n<ol>\n\t<li>\u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u7684\u82f1\u6587\u5b57\u6bcd\u3002</li>\n\t<li>\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u548c k \u5728[1, 10000]\u8303\u56f4\u5185\u3002</li>\n</ol>\n",
        "titleZh": "\u53cd\u8f6c\u5b57\u7b26\u4e32 II",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "542",
        "link": "01-matrix",
        "title": "01 Matrix",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "31.9%",
        "questionDescription": "<p>\r\nGiven a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.\r\n</p>\r\nThe distance between two adjacent cells is 1.\r\n\r\n<p><b>Example 1: </b><br>\r\nInput:\r\n<pre>\r\n0 0 0\r\n0 1 0\r\n0 0 0\r\n</pre>\r\nOutput:\r\n<pre>\r\n0 0 0\r\n0 1 0\r\n0 0 0\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2: </b><br>\r\nInput:\r\n<pre>\r\n0 0 0\r\n0 1 0\r\n1 1 1\r\n</pre>\r\nOutput:\r\n<pre>\r\n0 0 0\r\n0 1 0\r\n1 2 1\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The number of elements of the given matrix will not exceed 10,000.</li>\r\n<li>There are at least one 0 in the given matrix.</li>\r\n<li>The cells are adjacent in only four directions: up, down, left and right.</li>\r\n</ol>\r\n</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u77e9\u9635\uff0c\u627e\u51fa\u6bcf\u4e2a\u5143\u7d20\u5230\u6700\u8fd1\u7684 0 \u7684\u8ddd\u79bb\u3002</p>\n\n<p>\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u95f4\u7684\u8ddd\u79bb\u4e3a 1 \u3002</p>\n\n<p><strong>\u793a\u4f8b 1: </strong><br />\n\u8f93\u5165:</p>\n\n<pre>\n0 0 0\n0 1 0\n0 0 0\n</pre>\n\n<p>\u8f93\u51fa:</p>\n\n<pre>\n0 0 0\n0 1 0\n0 0 0\n</pre>\n\n<p><strong>\u793a\u4f8b 2: </strong><br />\n\u8f93\u5165:</p>\n\n<pre>\n0 0 0\n0 1 0\n1 1 1\n</pre>\n\n<p>\u8f93\u51fa:</p>\n\n<pre>\n0 0 0\n0 1 0\n1 2 1\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u77e9\u9635\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u8d85\u8fc7 10000\u3002</li>\n\t<li>\u7ed9\u5b9a\u77e9\u9635\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u5143\u7d20\u662f 0\u3002</li>\n\t<li>\u77e9\u9635\u4e2d\u7684\u5143\u7d20\u53ea\u5728\u56db\u4e2a\u65b9\u5411\u4e0a\u76f8\u90bb: \u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u3002</li>\n</ol>\n",
        "titleZh": "01 \u77e9\u9635",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Uber"
        ]
    },
    {
        "leetId": "543",
        "link": "diameter-of-binary-tree",
        "title": "Diameter of Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "43.1%",
        "questionDescription": "<p>\r\nGiven a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the <b>longest</b> path between any two nodes in a tree. This path may or may not pass through the root.\r\n</p>\r\n\r\n<p>\r\n<b>Example:</b><br />\r\nGiven a binary tree <br />\r\n<pre>\r\n          1\r\n         / \\\r\n        2   3\r\n       / \\     \r\n      4   5    \r\n</pre>\r\n</p>\r\n<p>\r\nReturn <b>3</b>, which is the length of the path [4,2,1,3] or [5,2,1,3].\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe length of path between two nodes is represented by the number of edges between them.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u4f60\u9700\u8981\u8ba1\u7b97\u5b83\u7684\u76f4\u5f84\u957f\u5ea6\u3002\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u76f4\u5f84\u957f\u5ea6\u662f\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u8def\u5f84\u957f\u5ea6\u4e2d\u7684\u6700\u5927\u503c\u3002\u8fd9\u6761\u8def\u5f84\u53ef\u80fd\u7a7f\u8fc7\u6839\u7ed3\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b :</strong><br />\n\u7ed9\u5b9a\u4e8c\u53c9\u6811</p>\n\n<pre>\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n</pre>\n\n<p>\u8fd4\u56de&nbsp;<strong>3</strong>, \u5b83\u7684\u957f\u5ea6\u662f\u8def\u5f84 [4,2,1,3] \u6216\u8005&nbsp;[5,2,1,3]\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u4e24\u7ed3\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u662f\u4ee5\u5b83\u4eec\u4e4b\u95f4\u8fb9\u7684\u6570\u76ee\u8868\u793a\u3002</p>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u76f4\u5f84",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Apple",
            "Yahoo",
            "Alibaba",
            "Snapchat",
            "Tencent",
            "Samsung",
            "Intel"
        ]
    },
    {
        "leetId": "544",
        "link": "output-contest-matches",
        "title": "Output Contest Matches",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n<p>\nDuring the NBA playoffs, we always arrange the rather strong team to play with the rather weak team, like make the rank 1 team play with the rank n<sub>th</sub> team, which is a good strategy to make the contest more interesting. Now, you're given <b>n</b> teams, you need to output their <b>final</b> contest matches in the form of a string.\n</p>\n<p>The <b>n</b> teams are given in the form of positive integers from 1 to n, which represents their initial rank. (Rank 1 is the strongest team and Rank n is the weakest team.) We'll use parentheses('(', ')') and commas(',') to represent the contest team pairing - parentheses('(' , ')') for pairing and commas(',') for partition. During the pairing process in each round, you always need to follow the strategy of making the rather strong one pair with the rather weak one.</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> 2\n<b>Output:</b> (1,2)\n<b>Explanation:</b> \nInitially, we have the team 1 and the team 2, placed like: 1,2.\nThen we pair the team (1,2) together with '(', ')' and ',', which is the final answer.\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> 4\n<b>Output:</b> ((1,4),(2,3))\n<b>Explanation:</b> \nIn the first round, we pair the team 1 and 4, the team 2 and 3 together, as we need to make the strong team and weak team together.\nAnd we got (1,4),(2,3).\nIn the second round, the winners of (1,4) and (2,3) need to play again to generate the final winner, so you need to add the paratheses outside them.\nAnd we got the final answer ((1,4),(2,3)).\n</pre>\n<p></p>\n<p><b>Example 3:</b><br/>\n</p><pre><b>Input:</b> 8\n<b>Output:</b> (((1,8),(4,5)),((2,7),(3,6)))\n<b>Explanation:</b> \nFirst round: (1,8),(2,7),(3,6),(4,5)\nSecond round: ((1,8),(4,5)),((2,7),(3,6))\nThird round: (((1,8),(4,5)),((2,7),(3,6)))\nSince the third round will generate the final winner, you need to output the answer (((1,8),(4,5)),((2,7),(3,6))).\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The <b>n</b> is in range [2, 2<sup>12</sup>].</li>\n<li>We ensure that the input <b>n</b> can be converted into the form 2<sup>k</sup>, where k is a positive integer.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>\nDuring the NBA playoffs, we always arrange the rather strong team to play with the rather weak team, like make the rank 1 team play with the rank n<sub>th</sub> team, which is a good strategy to make the contest more interesting. Now, you're given <b>n</b> teams, you need to output their <b>final</b> contest matches in the form of a string.\n</p>\n<p>The <b>n</b> teams are given in the form of positive integers from 1 to n, which represents their initial rank. (Rank 1 is the strongest team and Rank n is the weakest team.) We'll use parentheses('(', ')') and commas(',') to represent the contest team pairing - parentheses('(' , ')') for pairing and commas(',') for partition. During the pairing process in each round, you always need to follow the strategy of making the rather strong one pair with the rather weak one.</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> 2\n<b>Output:</b> (1,2)\n<b>Explanation:</b> \nInitially, we have the team 1 and the team 2, placed like: 1,2.\nThen we pair the team (1,2) together with '(', ')' and ',', which is the final answer.\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> 4\n<b>Output:</b> ((1,4),(2,3))\n<b>Explanation:</b> \nIn the first round, we pair the team 1 and 4, the team 2 and 3 together, as we need to make the strong team and weak team together.\nAnd we got (1,4),(2,3).\nIn the second round, the winners of (1,4) and (2,3) need to play again to generate the final winner, so you need to add the paratheses outside them.\nAnd we got the final answer ((1,4),(2,3)).\n</pre>\n<p></p>\n<p><b>Example 3:</b><br/>\n</p><pre><b>Input:</b> 8\n<b>Output:</b> (((1,8),(4,5)),((2,7),(3,6)))\n<b>Explanation:</b> \nFirst round: (1,8),(2,7),(3,6),(4,5)\nSecond round: ((1,8),(4,5)),((2,7),(3,6))\nThird round: (((1,8),(4,5)),((2,7),(3,6)))\nSince the third round will generate the final winner, you need to output the answer (((1,8),(4,5)),((2,7),(3,6))).\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The <b>n</b> is in range [2, 2<sup>12</sup>].</li>\n<li>We ensure that the input <b>n</b> can be converted into the form 2<sup>k</sup>, where k is a positive integer.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "545",
        "link": "boundary-of-binary-tree",
        "title": "Boundary of Binary Tree",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "35",
        "questionDescription": "\n<p>Given a binary tree, return the values of its boundary in <b>anti-clockwise</b> direction starting from root.\nBoundary includes left boundary, leaves, and right boundary in order without duplicate nodes. </p>\n<p><b>Left boundary</b> is defined as the path from root to the <b>left-most</b> node. <b>Right boundary</b> is defined as the path from root to the <b>right-most</b> node. If the root doesn't have left subtree or right subtree, then the root itself is left boundary or right boundary. Note this definition only applies to the input binary tree, and not applies to any subtrees.</p>\n<p>The <b>left-most</b> node is defined as a <b>leaf</b> node you could reach when you always firstly travel to the left subtree if exists. If not, travel to the right subtree. Repeat until you reach a leaf node.</p>\n<p>The <b>right-most</b> node is also defined by the same way with left and right exchanged.</p>\n<p>\n<b>Example 1</b><br/>\n</p><pre><b>Input:</b>\n  1\n   \\\n    2\n   / \\\n  3   4\n\n<b>Ouput:</b>\n[1, 3, 4, 2]\n\n<b>Explanation:</b>\nThe root doesn't have left subtree, so the root itself is left boundary.\nThe leaves are node 3 and 4.\nThe right boundary are node 1,2,4. Note the anti-clockwise direction means you should output reversed right boundary.\nSo order them in anti-clockwise without duplicates and we have [1,3,4,2].\n</pre>\n<p></p>\n<p>\n<b>Example 2</b><br/>\n</p><pre><b>Input:</b>\n    ____1_____\n   /          \\\n  2            3\n / \\          / \n4   5        6   \n   / \\      / \\\n  7   8    9  10  \n       \n<b>Ouput:</b>\n[1,2,4,7,8,9,10,6,3]\n\n<b>Explanation:</b>\nThe left boundary are node 1,2,4. (4 is the left-most node according to definition)\nThe leaves are node 4,7,8,9,10.\nThe right boundary are node 1,3,6,10. (10 is the right-most node).\nSo order them in anti-clockwise without duplicate nodes we have [1,2,4,7,8,9,10,6,3].\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a binary tree, return the values of its boundary in <b>anti-clockwise</b> direction starting from root.\nBoundary includes left boundary, leaves, and right boundary in order without duplicate nodes. </p>\n<p><b>Left boundary</b> is defined as the path from root to the <b>left-most</b> node. <b>Right boundary</b> is defined as the path from root to the <b>right-most</b> node. If the root doesn't have left subtree or right subtree, then the root itself is left boundary or right boundary. Note this definition only applies to the input binary tree, and not applies to any subtrees.</p>\n<p>The <b>left-most</b> node is defined as a <b>leaf</b> node you could reach when you always firstly travel to the left subtree if exists. If not, travel to the right subtree. Repeat until you reach a leaf node.</p>\n<p>The <b>right-most</b> node is also defined by the same way with left and right exchanged.</p>\n<p>\n<b>Example 1</b><br/>\n</p><pre><b>Input:</b>\n  1\n   \\\n    2\n   / \\\n  3   4\n\n<b>Ouput:</b>\n[1, 3, 4, 2]\n\n<b>Explanation:</b>\nThe root doesn't have left subtree, so the root itself is left boundary.\nThe leaves are node 3 and 4.\nThe right boundary are node 1,2,4. Note the anti-clockwise direction means you should output reversed right boundary.\nSo order them in anti-clockwise without duplicates and we have [1,3,4,2].\n</pre>\n<p></p>\n<p>\n<b>Example 2</b><br/>\n</p><pre><b>Input:</b>\n    ____1_____\n   /          \\\n  2            3\n / \\          / \n4   5        6   \n   / \\      / \\\n  7   8    9  10  \n       \n<b>Ouput:</b>\n[1,2,4,7,8,9,10,6,3]\n\n<b>Explanation:</b>\nThe left boundary are node 1,2,4. (4 is the left-most node according to definition)\nThe leaves are node 4,7,8,9,10.\nThe right boundary are node 1,3,6,10. (10 is the right-most node).\nSo order them in anti-clockwise without duplicate nodes we have [1,2,4,7,8,9,10,6,3].\n</pre>\n<p></p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Apple",
            "Yahoo",
            "eBay"
        ]
    },
    {
        "leetId": "546",
        "link": "remove-boxes",
        "title": "Remove Boxes",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "43.3%",
        "questionDescription": "<p>Given several boxes with different colors represented by different positive numbers. <br />\r\nYou may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (composed of k boxes, k >= 1), remove them and get <code>k*k</code> points.<br />\r\nFind the maximum points you can get.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br>\r\nInput: \r\n<pre>\r\n[1, 3, 2, 2, 2, 3, 4, 3, 1]\r\n</pre>\r\nOutput:\r\n<pre>\r\n23\r\n</pre>\r\nExplanation: \r\n<pre>\r\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \r\n----> [1, 3, 3, 4, 3, 1] (3*3=9 points) \r\n----> [1, 3, 3, 3, 1] (1*1=1 points) \r\n----> [1, 1] (3*3=9 points) \r\n----> [] (2*2=4 points)\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe number of boxes <code>n</code> would not exceed 100.\r\n</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e00\u4e9b\u4e0d\u540c\u989c\u8272\u7684\u76d2\u5b50\uff0c\u76d2\u5b50\u7684\u989c\u8272\u7531\u6570\u5b57\u8868\u793a\uff0c\u5373\u4e0d\u540c\u7684\u6570\u5b57\u8868\u793a\u4e0d\u540c\u7684\u989c\u8272\u3002<br />\n\u4f60\u5c06\u7ecf\u8fc7\u82e5\u5e72\u8f6e\u64cd\u4f5c\u53bb\u53bb\u6389\u76d2\u5b50\uff0c\u76f4\u5230\u6240\u6709\u7684\u76d2\u5b50\u90fd\u53bb\u6389\u4e3a\u6b62\u3002\u6bcf\u4e00\u8f6e\u4f60\u53ef\u4ee5\u79fb\u9664\u5177\u6709\u76f8\u540c\u989c\u8272\u7684\u8fde\u7eed k \u4e2a\u76d2\u5b50\uff08k&nbsp;&gt;= 1\uff09\uff0c\u8fd9\u6837\u4e00\u8f6e\u4e4b\u540e\u4f60\u5c06\u5f97\u5230 <code>k*k</code> \u4e2a\u79ef\u5206\u3002<br />\n\u5f53\u4f60\u5c06\u6240\u6709\u76d2\u5b50\u90fd\u53bb\u6389\u4e4b\u540e\uff0c\u6c42\u4f60\u80fd\u83b7\u5f97\u7684\u6700\u5927\u79ef\u5206\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong><br />\n\u8f93\u5165:</p>\n\n<pre>\n[1, 3, 2, 2, 2, 3, 4, 3, 1]\n</pre>\n\n<p>\u8f93\u51fa:</p>\n\n<pre>\n23\n</pre>\n\n<p>\u89e3\u91ca:</p>\n\n<pre>\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \n----&gt; [1, 3, 3, 4, 3, 1] (3*3=9 \u5206) \n----&gt; [1, 3, 3, 3, 1] (1*1=1 \u5206) \n----&gt; [1, 1] (3*3=9 \u5206) \n----&gt; [] (2*2=4 \u5206)\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong>\u76d2\u5b50\u7684\u603b\u6570 <code>n</code> \u4e0d\u4f1a\u8d85\u8fc7 100\u3002</p>\n",
        "titleZh": "\u79fb\u9664\u76d2\u5b50",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Tencent"
        ]
    },
    {
        "leetId": "547",
        "link": "friend-circles",
        "title": "Friend Circles",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "49.7%",
        "questionDescription": "<p>\r\nThere are <b>N</b> students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a <b>direct</b> friend of B, and B is a <b>direct</b> friend of C, then A is an <b>indirect</b> friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.\r\n</p>\r\n\r\n<p>\r\nGiven a <b>N*N</b> matrix <b>M</b> representing the friend relationship between students in the class. If M[i][j] = 1, then the i<sub>th</sub> and j<sub>th</sub> students are <b>direct</b> friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\n[[1,1,0],\r\n [1,1,0],\r\n [0,0,1]]\r\n<b>Output:</b> 2\r\n<b>Explanation:</b>The 0<sub>th</sub> and 1<sub>st</sub> students are direct friends, so they are in a friend circle. <br/>The 2<sub>nd</sub> student himself is in a friend circle. So return 2.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\n[[1,1,0],\r\n [1,1,1],\r\n [0,1,1]]\r\n<b>Output:</b> 1\r\n<b>Explanation:</b>The 0<sub>th</sub> and 1<sub>st</sub> students are direct friends, the 1<sub>st</sub> and 2<sub>nd</sub> students are direct friends, <br/>so the 0<sub>th</sub> and 2<sub>nd</sub> students are indirect friends. All of them are in the same friend circle, so return 1.\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>N is in range [1,200].</li>\r\n<li>M[i][i] = 1 for all students.</li>\r\n<li>If M[i][j] = 1, then M[j][i] = 1.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u73ed\u4e0a\u6709&nbsp;<strong>N&nbsp;</strong>\u540d\u5b66\u751f\u3002\u5176\u4e2d\u6709\u4e9b\u4eba\u662f\u670b\u53cb\uff0c\u6709\u4e9b\u5219\u4e0d\u662f\u3002\u4ed6\u4eec\u7684\u53cb\u8c0a\u5177\u6709\u662f\u4f20\u9012\u6027\u3002\u5982\u679c\u5df2\u77e5 A \u662f B&nbsp;\u7684\u670b\u53cb\uff0cB \u662f C&nbsp;\u7684\u670b\u53cb\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a A \u4e5f\u662f C&nbsp;\u7684\u670b\u53cb\u3002\u6240\u8c13\u7684\u670b\u53cb\u5708\uff0c\u662f\u6307\u6240\u6709\u670b\u53cb\u7684\u96c6\u5408\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<strong>N * N&nbsp;</strong>\u7684\u77e9\u9635&nbsp;<strong>M</strong>\uff0c\u8868\u793a\u73ed\u7ea7\u4e2d\u5b66\u751f\u4e4b\u95f4\u7684\u670b\u53cb\u5173\u7cfb\u3002\u5982\u679cM[i][j] = 1\uff0c\u8868\u793a\u5df2\u77e5\u7b2c i \u4e2a\u548c j \u4e2a\u5b66\u751f<strong>\u4e92\u4e3a</strong>\u670b\u53cb\u5173\u7cfb\uff0c\u5426\u5219\u4e3a\u4e0d\u77e5\u9053\u3002\u4f60\u5fc5\u987b\u8f93\u51fa\u6240\u6709\u5b66\u751f\u4e2d\u7684\u5df2\u77e5\u7684\u670b\u53cb\u5708\u603b\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n[[1,1,0],\n [1,1,0],\n [0,0,1]]\n<strong>\u8f93\u51fa:</strong> 2 \n<strong>\u8bf4\u660e\uff1a</strong>\u5df2\u77e5\u5b66\u751f0\u548c\u5b66\u751f1\u4e92\u4e3a\u670b\u53cb\uff0c\u4ed6\u4eec\u5728\u4e00\u4e2a\u670b\u53cb\u5708\u3002\n\u7b2c2\u4e2a\u5b66\u751f\u81ea\u5df1\u5728\u4e00\u4e2a\u670b\u53cb\u5708\u3002\u6240\u4ee5\u8fd4\u56de2\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n[[1,1,0],\n [1,1,1],\n [0,1,1]]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u8bf4\u660e\uff1a</strong>\u5df2\u77e5\u5b66\u751f0\u548c\u5b66\u751f1\u4e92\u4e3a\u670b\u53cb\uff0c\u5b66\u751f1\u548c\u5b66\u751f2\u4e92\u4e3a\u670b\u53cb\uff0c\u6240\u4ee5\u5b66\u751f0\u548c\u5b66\u751f2\u4e5f\u662f\u670b\u53cb\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e09\u4e2a\u5728\u4e00\u4e2a\u670b\u53cb\u5708\uff0c\u8fd4\u56de1\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>N \u5728[1,200]\u7684\u8303\u56f4\u5185\u3002</li>\n\t<li>\u5bf9\u4e8e\u6240\u6709\u5b66\u751f\uff0c\u6709M[i][i] = 1\u3002</li>\n\t<li>\u5982\u679c\u6709M[i][j] = 1\uff0c\u5219\u6709M[j][i] = 1\u3002</li>\n</ol>\n",
        "titleZh": "\u670b\u53cb\u5708",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "LinkedIn",
            "Alibaba",
            "Twitter",
            "VMware",
            "Pocket Gems",
            "Two Sigma"
        ]
    },
    {
        "leetId": "548",
        "link": "split-array-with-equal-sum",
        "title": "Split Array with Equal Sum",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n<p>\nGiven an array with n integers, you need to find if there are triplets  (i, j, k) which satisfies following conditions:\n</p><ol>\n<li> 0 &lt; i, i + 1 &lt; j, j + 1 &lt; k &lt; n - 1 </li>\n<li> Sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) should be equal. </li>\n</ol>\nwhere we define that subarray (L, R) represents a slice of the original array starting from the element indexed L to the element indexed R.\n<p></p>\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b> [1,2,1,2,1,2,1]\n<b>Output:</b> True\n<b>Explanation:</b>\ni = 1, j = 3, k = 5. \nsum(0, i - 1) = sum(0, 0) = 1\nsum(i + 1, j - 1) = sum(2, 2) = 1\nsum(j + 1, k - 1) = sum(4, 4) = 1\nsum(k + 1, n - 1) = sum(6, 6) = 1\n</pre>\n<p></p>\n<b>Note:</b>\n<ol>\n<li> 1 &lt;= n &lt;= 2000. </li>\n<li> Elements in the given array will be in range [-1,000,000, 1,000,000]. </li>\n</ol>\n",
        "questionDescriptionZh": "\n<p>\nGiven an array with n integers, you need to find if there are triplets  (i, j, k) which satisfies following conditions:\n</p><ol>\n<li> 0 &lt; i, i + 1 &lt; j, j + 1 &lt; k &lt; n - 1 </li>\n<li> Sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) should be equal. </li>\n</ol>\nwhere we define that subarray (L, R) represents a slice of the original array starting from the element indexed L to the element indexed R.\n<p></p>\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b> [1,2,1,2,1,2,1]\n<b>Output:</b> True\n<b>Explanation:</b>\ni = 1, j = 3, k = 5. \nsum(0, i - 1) = sum(0, 0) = 1\nsum(i + 1, j - 1) = sum(2, 2) = 1\nsum(j + 1, k - 1) = sum(4, 4) = 1\nsum(k + 1, n - 1) = sum(6, 6) = 1\n</pre>\n<p></p>\n<b>Note:</b>\n<ol>\n<li> 1 &lt;= n &lt;= 2000. </li>\n<li> Elements in the given array will be in range [-1,000,000, 1,000,000]. </li>\n</ol>\n",
        "companies": [
            "Facebook",
            "Alibaba"
        ]
    },
    {
        "leetId": "549",
        "link": "binary-tree-longest-consecutive-sequence-ii",
        "title": "Binary Tree Longest Consecutive Sequence II",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "21",
        "questionDescription": "\n<p>Given a binary tree, you need to find the length of Longest Consecutive Path in Binary Tree. </p>\n<p>Especially, this path can be either increasing or decreasing. For example, [1,2,3,4] and [4,3,2,1] are both considered valid, but the path [1,2,4,3] is not valid. On the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b>\n        1\n       / \\\n      2   3\n<b>Output:</b> 2\n<b>Explanation:</b> The longest consecutive path is [1, 2] or [2, 1].\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b>\n        2\n       / \\\n      1   3\n<b>Output:</b> 3\n<b>Explanation:</b> The longest consecutive path is [1, 2, 3] or [3, 2, 1].\n</pre>\n<p></p>\n<p><b>Note:</b>\nAll the values of tree nodes are in the range of [-1e7, 1e7].\n</p>\n",
        "questionDescriptionZh": "\n<p>Given a binary tree, you need to find the length of Longest Consecutive Path in Binary Tree. </p>\n<p>Especially, this path can be either increasing or decreasing. For example, [1,2,3,4] and [4,3,2,1] are both considered valid, but the path [1,2,4,3] is not valid. On the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b>\n        1\n       / \\\n      2   3\n<b>Output:</b> 2\n<b>Explanation:</b> The longest consecutive path is [1, 2] or [2, 1].\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b>\n        2\n       / \\\n      1   3\n<b>Output:</b> 3\n<b>Explanation:</b> The longest consecutive path is [1, 2, 3] or [3, 2, 1].\n</pre>\n<p></p>\n<p><b>Note:</b>\nAll the values of tree nodes are in the range of [-1e7, 1e7].\n</p>\n",
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "551",
        "link": "student-attendance-record-i",
        "title": "Student Attendance Record I",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "46.8%",
        "questionDescription": "You are given a string representing an attendance record for a student. The record only contains the following three characters:\r\n\r\n<p>\r\n<ol>\r\n<li><b>'A'</b> : Absent. </li>\r\n<li><b>'L'</b> : Late.</li>\r\n<li> <b>'P'</b> : Present. </li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\nA student could be rewarded if his attendance record doesn't contain <b>more than one 'A' (absent)</b> or <b>more than two continuous 'L' (late)</b>.    </p>\r\n\r\n<p>You need to return whether the student could be rewarded according to his attendance record.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"PPALLP\"\r\n<b>Output:</b> True\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"PPALLL\"\r\n<b>Output:</b> False\r\n</pre>\r\n</p>\r\n\r\n\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u4ee3\u8868\u4e00\u4e2a\u5b66\u751f\u7684\u51fa\u52e4\u8bb0\u5f55\uff0c\u8fd9\u4e2a\u8bb0\u5f55\u4ec5\u5305\u542b\u4ee5\u4e0b\u4e09\u4e2a\u5b57\u7b26\uff1a</p>\n\n<ol>\n\t<li><strong>&#39;A&#39;</strong> : Absent\uff0c\u7f3a\u52e4</li>\n\t<li><strong>&#39;L&#39;</strong> : Late\uff0c\u8fdf\u5230</li>\n\t<li><strong>&#39;P&#39;</strong> : Present\uff0c\u5230\u573a</li>\n</ol>\n\n<p>\u5982\u679c\u4e00\u4e2a\u5b66\u751f\u7684\u51fa\u52e4\u8bb0\u5f55\u4e2d\u4e0d<strong>\u8d85\u8fc7\u4e00\u4e2a&#39;A&#39;(\u7f3a\u52e4)</strong>\u5e76\u4e14<strong>\u4e0d\u8d85\u8fc7\u4e24\u4e2a\u8fde\u7eed\u7684&#39;L&#39;(\u8fdf\u5230)</strong>,\u90a3\u4e48\u8fd9\u4e2a\u5b66\u751f\u4f1a\u88ab\u5956\u8d4f\u3002</p>\n\n<p>\u4f60\u9700\u8981\u6839\u636e\u8fd9\u4e2a\u5b66\u751f\u7684\u51fa\u52e4\u8bb0\u5f55\u5224\u65ad\u4ed6\u662f\u5426\u4f1a\u88ab\u5956\u8d4f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;PPALLP&quot;\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;PPALLL&quot;\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n",
        "titleZh": "\u5b66\u751f\u51fa\u52e4\u8bb0\u5f55 I",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "552",
        "link": "student-attendance-record-ii",
        "title": "Student Attendance Record II",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "34.6%",
        "questionDescription": "<p>Given a positive integer <b>n</b>, return the number of all possible attendance records with length n, which will be regarded as rewardable. The answer may be very large, return it after mod 10<sup>9</sup> + 7.</p>\r\n\r\n<p>A student attendance record is a string that only contains the following three characters:</p>\r\n\r\n<p>\r\n<ol>\r\n<li><b>'A'</b> : Absent. </li>\r\n<li><b>'L'</b> : Late.</li>\r\n<li> <b>'P'</b> : Present. </li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\nA record is regarded as rewardable if it doesn't contain <b>more than one 'A' (absent)</b> or <b>more than two continuous 'L' (late)</b>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> n = 2\r\n<b>Output:</b> 8 \r\n<b>Explanation:</b>\r\nThere are 8 records with length 2 will be regarded as rewardable:\r\n\"PP\" , \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\r\nOnly \"AA\" won't be regarded as rewardable owing to more than one absent times. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe value of <b>n</b> won't exceed 100,000.\r\n</p>\r\n\r\n\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<strong>n</strong>\uff0c\u8fd4\u56de\u957f\u5ea6\u4e3a n \u7684\u6240\u6709\u53ef\u88ab\u89c6\u4e3a\u53ef\u5956\u52b1\u7684\u51fa\u52e4\u8bb0\u5f55\u7684\u6570\u91cf\u3002 \u7b54\u6848\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u4f60\u53ea\u9700\u8fd4\u56de\u7ed3\u679cmod 10<sup>9</sup> + 7\u7684\u503c\u3002</p>\n\n<p>\u5b66\u751f\u51fa\u52e4\u8bb0\u5f55\u662f\u53ea\u5305\u542b\u4ee5\u4e0b\u4e09\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff1a</p>\n\n<ol>\n\t<li><strong>&#39;A&#39;</strong> : Absent\uff0c\u7f3a\u52e4</li>\n\t<li><strong>&#39;L&#39;</strong> : Late\uff0c\u8fdf\u5230</li>\n\t<li><strong>&#39;P&#39;</strong> : Present\uff0c\u5230\u573a</li>\n</ol>\n\n<p>\u5982\u679c\u8bb0\u5f55\u4e0d\u5305\u542b<strong>\u591a\u4e8e\u4e00\u4e2a&#39;A&#39;\uff08\u7f3a\u52e4\uff09</strong>\u6216<strong>\u8d85\u8fc7\u4e24\u4e2a\u8fde\u7eed\u7684&#39;L&#39;\uff08\u8fdf\u5230\uff09</strong>\uff0c\u5219\u8be5\u8bb0\u5f55\u88ab\u89c6\u4e3a\u53ef\u5956\u52b1\u7684\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> n = 2\n<strong>\u8f93\u51fa:</strong> 8 <strong>\n\u89e3\u91ca\uff1a</strong>\n\u67098\u4e2a\u957f\u5ea6\u4e3a2\u7684\u8bb0\u5f55\u5c06\u88ab\u89c6\u4e3a\u53ef\u5956\u52b1\uff1a\n&quot;PP&quot; , &quot;AP&quot;, &quot;PA&quot;, &quot;LP&quot;, &quot;PL&quot;, &quot;AL&quot;, &quot;LA&quot;, &quot;LL&quot;\n\u53ea\u6709&quot;AA&quot;\u4e0d\u4f1a\u88ab\u89c6\u4e3a\u53ef\u5956\u52b1\uff0c\u56e0\u4e3a\u7f3a\u52e4\u6b21\u6570\u8d85\u8fc7\u4e00\u6b21\u3002</pre>\n\n<p><strong>\u6ce8\u610f\uff1an </strong>\u7684\u503c\u4e0d\u4f1a\u8d85\u8fc7100000\u3002</p>\n",
        "titleZh": "\u5b66\u751f\u51fa\u52e4\u8bb0\u5f55 II",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "553",
        "link": "optimal-division",
        "title": "Optimal Division",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "51.6%",
        "questionDescription": "<p>Given a list of <b>positive integers</b>, the adjacent integers will perform the float division. For example, [2,3,4] -> 2 / 3 / 4.</p>\r\n\r\n<p>However, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the <b>maximum</b> result, and return the corresponding expression in string format. <b>Your expression should NOT contain redundant parenthesis.</b></p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> [1000,100,10,2]\r\n<b>Output:</b> \"1000/(100/10/2)\"\r\n<b>Explanation:</b>\r\n1000/(100/10/2) = 1000/((100/10)/2) = 200\r\nHowever, the bold parenthesis in \"1000/(<b>(</b>100/10<b>)</b>/2)\" are redundant, <br/>since they don't influence the operation priority. So you should return \"1000/(100/10/2)\". \r\n\r\nOther cases:\r\n1000/(100/10)/2 = 50\r\n1000/(100/(10/2)) = 50\r\n1000/100/10/2 = 0.5\r\n1000/100/(10/2) = 2\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<ol>\r\n<li>The length of the input array is [1, 10].</li>\r\n<li>Elements in the given array will be in range [2, 1000].</li>\r\n<li>There is only one optimal division for each test case.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u7ec4<strong>\u6b63\u6574\u6570\uff0c</strong>\u76f8\u90bb\u7684\u6574\u6570\u4e4b\u95f4\u5c06\u4f1a\u8fdb\u884c\u6d6e\u70b9\u9664\u6cd5\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c&nbsp;[2,3,4] -&gt; 2 / 3 / 4 \u3002</p>\n\n<p>\u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u5728\u4efb\u610f\u4f4d\u7f6e\u6dfb\u52a0\u4efb\u610f\u6570\u76ee\u7684\u62ec\u53f7\uff0c\u6765\u6539\u53d8\u7b97\u6570\u7684\u4f18\u5148\u7ea7\u3002\u4f60\u9700\u8981\u627e\u51fa\u600e\u4e48\u6dfb\u52a0\u62ec\u53f7\uff0c\u624d\u80fd\u5f97\u5230<strong>\u6700\u5927\u7684</strong>\u7ed3\u679c\uff0c\u5e76\u4e14\u8fd4\u56de\u76f8\u5e94\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u7684\u8868\u8fbe\u5f0f\u3002<strong>\u4f60\u7684\u8868\u8fbe\u5f0f\u4e0d\u5e94\u8be5\u542b\u6709\u5197\u4f59\u7684\u62ec\u53f7\u3002</strong></p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1000,100,10,2]\n<strong>\u8f93\u51fa:</strong> &quot;1000/(100/10/2)&quot;\n<strong>\u89e3\u91ca:</strong>\n1000/(100/10/2) = 1000/((100/10)/2) = 200\n\u4f46\u662f\uff0c\u4ee5\u4e0b\u52a0\u7c97\u7684\u62ec\u53f7 &quot;1000/(<strong>(</strong>100/10<strong>)</strong>/2)&quot; \u662f\u5197\u4f59\u7684\uff0c\n\u56e0\u4e3a\u4ed6\u4eec\u5e76\u4e0d\u5f71\u54cd\u64cd\u4f5c\u7684\u4f18\u5148\u7ea7\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u8fd4\u56de &quot;1000/(100/10/2)&quot;\u3002\n\n\u5176\u4ed6\u7528\u4f8b:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u6570\u7ec4\u7684\u957f\u5ea6\u5728 [1, 10] \u4e4b\u95f4\u3002</li>\n\t<li>\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u90fd\u5728 [2, 1000] \u4e4b\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u53ea\u6709\u4e00\u4e2a\u6700\u4f18\u9664\u6cd5\u89e3\u3002</li>\n</ol>\n",
        "titleZh": "\u6700\u4f18\u9664\u6cd5",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "554",
        "link": "brick-wall",
        "title": "Brick Wall",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "44.5%",
        "questionDescription": "<p>There is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height but different width. You want to draw a vertical line from the <b>top</b> to the <b>bottom</b> and cross the <b>least</b> bricks.</p>\r\n\r\n<p>The brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right.</p>\r\n\r\n<p>If your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least bricks and return the number of crossed bricks.</p>\r\n\r\n<p><b>You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks. </b></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [[1,2,2,1],\r\n        [3,1,2],\r\n        [1,3,2],\r\n        [2,4],\r\n        [3,1,2],\r\n        [1,3,1,1]]\r\n\r\n<b>Output:</b> 2\r\n\r\n<b>Explanation:</b> \r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/brick_wall.png\" style=\"width: 100%; max-width: 350px\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The width sum of bricks in different rows are the same and won&#39;t exceed INT_MAX.</li>\r\n\t<li>The number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won&#39;t exceed 20,000.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u4f60\u7684\u9762\u524d\u6709\u4e00\u5835\u65b9\u5f62\u7684\u3001\u7531\u591a\u884c\u7816\u5757\u7ec4\u6210\u7684\u7816\u5899\u3002&nbsp;\u8fd9\u4e9b\u7816\u5757\u9ad8\u5ea6\u76f8\u540c\u4f46\u662f\u5bbd\u5ea6\u4e0d\u540c\u3002\u4f60\u73b0\u5728\u8981\u753b\u4e00\u6761<strong>\u81ea\u9876\u5411\u4e0b</strong>\u7684\u3001\u7a7f\u8fc7<strong>\u6700\u5c11</strong>\u7816\u5757\u7684\u5782\u7ebf\u3002</p>\r\n\r\n<p>\u7816\u5899\u7531\u884c\u7684\u5217\u8868\u8868\u793a\u3002 \u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u4e2a\u4ee3\u8868\u4ece\u5de6\u81f3\u53f3\u6bcf\u5757\u7816\u7684\u5bbd\u5ea6\u7684\u6574\u6570\u5217\u8868\u3002</p>\r\n\r\n<p>\u5982\u679c\u4f60\u753b\u7684\u7ebf\u53ea\u662f\u4ece\u7816\u5757\u7684\u8fb9\u7f18\u7ecf\u8fc7\uff0c\u5c31\u4e0d\u7b97\u7a7f\u8fc7\u8fd9\u5757\u7816\u3002\u4f60\u9700\u8981\u627e\u51fa\u600e\u6837\u753b\u624d\u80fd\u4f7f\u8fd9\u6761\u7ebf\u7a7f\u8fc7\u7684\u7816\u5757\u6570\u91cf\u6700\u5c11\uff0c\u5e76\u4e14\u8fd4\u56de\u7a7f\u8fc7\u7684\u7816\u5757\u6570\u91cf\u3002</p>\r\n\r\n<p><strong>\u4f60\u4e0d\u80fd\u6cbf\u7740\u5899\u7684\u4e24\u4e2a\u5782\u76f4\u8fb9\u7f18\u4e4b\u4e00\u753b\u7ebf\uff0c\u8fd9\u6837\u663e\u7136\u662f\u6ca1\u6709\u7a7f\u8fc7\u4e00\u5757\u7816\u7684\u3002</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165:</strong> [[1,2,2,1],\r\n      [3,1,2],\r\n      [1,3,2],\r\n      [2,4],\r\n      [3,1,2],\r\n      [1,3,1,1]]\r\n\r\n<strong>\u8f93\u51fa:</strong> 2\r\n\r\n<strong>\u89e3\u91ca:</strong> \r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/brick_wall.png\" style=\"width: 100%; max-width: 350px\">\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u63d0\u793a\uff1a</strong></p>\r\n\r\n<ol>\r\n\t<li>\u6bcf\u4e00\u884c\u7816\u5757\u7684\u5bbd\u5ea6\u4e4b\u548c\u5e94\u8be5\u76f8\u7b49\uff0c\u5e76\u4e14\u4e0d\u80fd\u8d85\u8fc7 INT_MAX\u3002</li>\r\n\t<li>\u6bcf\u4e00\u884c\u7816\u5757\u7684\u6570\u91cf\u5728&nbsp;[1,10,000] \u8303\u56f4\u5185\uff0c&nbsp;\u5899\u7684\u9ad8\u5ea6\u5728&nbsp;[1,10,000] \u8303\u56f4\u5185\uff0c&nbsp;\u603b\u7684\u7816\u5757\u6570\u91cf\u4e0d\u8d85\u8fc7 20,000\u3002</li>\r\n</ol>",
        "titleZh": "\u7816\u5899",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Facebook",
            "Bloomberg",
            "Adobe"
        ]
    },
    {
        "leetId": "555",
        "link": "split-concatenated-strings",
        "title": "Split Concatenated Strings",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n<p>Given a list of strings, you could concatenate these strings together into a loop, where for each string you could choose to reverse it or not. Among all the possible loops, you need to find the lexicographically biggest string after cutting the loop, which will make the looped string into a regular one.</p>\n<p>Specifically, to find the lexicographically biggest string, you need to experience two phases: \n</p><ol>\n<li>Concatenate all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given.</li>\n<li>Cut and make one breakpoint in any place of the loop, which will make the looped string into a regular one starting from the character at the cutpoint. </li>\n</ol>\n<p></p>\n<p>And your job is to find the lexicographically biggest one among all the possible regular strings.</p>\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b> \"abc\", \"xyz\"\n<b>Output:</b> \"zyxcba\"\n<b>Explanation:</b> You can get the looped string \"-abcxyz-\", \"-abczyx-\", \"-cbaxyz-\", \"-cbazyx-\", <br/>where '-' represents the looped status. <br/>The answer string came from the fourth looped one, <br/>where you could cut from the middle character 'a' and get \"zyxcba\".\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The input strings will only contain lowercase letters.</li>\n<li>The total length of all the strings will not over 1,000.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a list of strings, you could concatenate these strings together into a loop, where for each string you could choose to reverse it or not. Among all the possible loops, you need to find the lexicographically biggest string after cutting the loop, which will make the looped string into a regular one.</p>\n<p>Specifically, to find the lexicographically biggest string, you need to experience two phases: \n</p><ol>\n<li>Concatenate all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given.</li>\n<li>Cut and make one breakpoint in any place of the loop, which will make the looped string into a regular one starting from the character at the cutpoint. </li>\n</ol>\n<p></p>\n<p>And your job is to find the lexicographically biggest one among all the possible regular strings.</p>\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b> \"abc\", \"xyz\"\n<b>Output:</b> \"zyxcba\"\n<b>Explanation:</b> You can get the looped string \"-abcxyz-\", \"-abczyx-\", \"-cbaxyz-\", \"-cbazyx-\", <br/>where '-' represents the looped status. <br/>The answer string came from the fourth looped one, <br/>where you could cut from the middle character 'a' and get \"zyxcba\".\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The input strings will only contain lowercase letters.</li>\n<li>The total length of all the strings will not over 1,000.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Alibaba"
        ]
    },
    {
        "leetId": "556",
        "link": "next-greater-element-iii",
        "title": "Next Greater Element III",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "23.8%",
        "questionDescription": "<p>Given a positive <strong>32-bit</strong> integer <strong>n</strong>, you need to find the smallest <strong>32-bit</strong> integer which has exactly the same digits existing in the integer <strong>n</strong> and is greater in value than n. If no such positive <strong>32-bit</strong> integer exists, you need to return -1.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 12\r\n<strong>Output:</strong> 21\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 21\r\n<strong>Output:</strong> -1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>32\u4f4d</strong>\u6b63\u6574\u6570&nbsp;<strong>n</strong>\uff0c\u4f60\u9700\u8981\u627e\u5230\u6700\u5c0f\u7684<strong>32\u4f4d</strong>\u6574\u6570\uff0c\u5176\u4e0e&nbsp;<strong>n&nbsp;</strong>\u4e2d\u5b58\u5728\u7684\u4f4d\u6570\u5b8c\u5168\u76f8\u540c\uff0c\u5e76\u4e14\u5176\u503c\u5927\u4e8en\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684<strong>32\u4f4d</strong>\u6574\u6570\uff0c\u5219\u8fd4\u56de-1\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 12\n<strong>\u8f93\u51fa:</strong> 21\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 21\n<strong>\u8f93\u51fa:</strong> -1\n</pre>\n",
        "titleZh": "\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 III",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Adobe"
        ]
    },
    {
        "leetId": "557",
        "link": "reverse-words-in-a-string-iii",
        "title": "Reverse Words in a String III",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "64.6%",
        "questionDescription": "<p>Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"Let's take LeetCode contest\"\r\n<b>Output:</b> \"s'teL ekat edoCteeL tsetnoc\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nIn the string, each word is separated by single space and there will not be any extra space in the string.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u7684\u5b57\u7b26\u987a\u5e8f\uff0c\u540c\u65f6\u4ecd\u4fdd\u7559\u7a7a\u683c\u548c\u5355\u8bcd\u7684\u521d\u59cb\u987a\u5e8f\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n\u8f93\u5165: &quot;Let&#39;s take LeetCode contest&quot;\n\u8f93\u51fa: &quot;s&#39;teL ekat edoCteeL tsetnoc&quot;<strong><strong><strong>&nbsp;</strong></strong></strong>\n</pre>\n\n<p><strong><strong><strong><strong>\u6ce8\u610f\uff1a</strong></strong></strong></strong>\u5728\u5b57\u7b26\u4e32\u4e2d\uff0c\u6bcf\u4e2a\u5355\u8bcd\u7531\u5355\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32\u4e2d\u4e0d\u4f1a\u6709\u4efb\u4f55\u989d\u5916\u7684\u7a7a\u683c\u3002</p>\n",
        "titleZh": "\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd III",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Microsoft",
            "Adobe",
            "Apple",
            "Alibaba",
            "Tencent",
            "VMware",
            "Zappos"
        ]
    },
    {
        "leetId": "558",
        "link": "quad-tree-intersection",
        "title": "Quad Tree Intersection",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "41.0%",
        "questionDescription": "<p>A quadtree is a tree data in which each internal node has exactly four children: <code>topLeft</code>, <code>topRight</code>, <code>bottomLeft</code> and <code>bottomRight</code>. Quad trees are often used to partition a two-dimensional space by recursively subdividing it into four quadrants or regions.</p>\r\n\r\n<p>We want to store True/False information in our quad tree. The quad tree is used to represent a <code>N * N</code> boolean grid. For each node, it will be subdivided into four children nodes <strong>until the values in the region it represents are all the same</strong>. Each node has another two boolean attributes : <code>isLeaf</code> and <code>val</code>. <code>isLeaf</code> is true if and only if the node is a leaf node. The <code>val</code> attribute for a leaf node contains the value of the region it represents.</p>\r\n\r\n<p>For example, below are two quad trees A and B:</p>\r\n\r\n<pre>\r\nA:\r\n+-------+-------+   T: true\r\n|       |       |   F: false\r\n|   T   |   T   |\r\n|       |       |\r\n+-------+-------+\r\n|       |       |\r\n|   F   |   F   |\r\n|       |       |\r\n+-------+-------+\r\ntopLeft: T\r\ntopRight: T\r\nbottomLeft: F\r\nbottomRight: F\r\n\r\nB:               \r\n+-------+---+---+\r\n|       | F | F |\r\n|   T   +---+---+\r\n|       | T | T |\r\n+-------+---+---+\r\n|       |       |\r\n|   T   |   F   |\r\n|       |       |\r\n+-------+-------+\r\ntopLeft: T\r\ntopRight:\r\n     topLeft: F\r\n     topRight: F\r\n     bottomLeft: T\r\n     bottomRight: T\r\nbottomLeft: T\r\nbottomRight: F\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Your task is to implement a function that will take two quadtrees and return a quadtree that represents the logical OR (or union) of the two trees.</p>\r\n\r\n<pre>\r\nA:                 B:                 C (A or B):\r\n+-------+-------+  +-------+---+---+  +-------+-------+\r\n|       |       |  |       | F | F |  |       |       |\r\n|   T   |   T   |  |   T   +---+---+  |   T   |   T   |\r\n|       |       |  |       | T | T |  |       |       |\r\n+-------+-------+  +-------+---+---+  +-------+-------+\r\n|       |       |  |       |       |  |       |       |\r\n|   F   |   F   |  |   T   |   F   |  |   T   |   F   |\r\n|       |       |  |       |       |  |       |       |\r\n+-------+-------+  +-------+-------+  +-------+-------+\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>Both <code>A</code> and <code>B</code>&nbsp;represent grids of size <code>N * N</code>.</li>\r\n\t<li><code>N</code> is guaranteed to be a power of 2.</li>\r\n\t<li>If you want to know more about the quad tree, you can refer to its <a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>.</li>\r\n\t<li>The logic OR operation is defined as this: &quot;A or B&quot; is true if <code>A is true</code>, or if <code>B is true</code>, or if <code>both A and B are true</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u56db\u53c9\u6811\u662f\u4e00\u79cd\u6811\u6570\u636e\uff0c\u5176\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u6070\u597d\u6709\u56db\u4e2a\u5b50\u7ed3\u70b9\uff1a<code>topLeft</code>\u3001<code>topRight</code>\u3001<code>bottomLeft</code>&nbsp;\u548c&nbsp;<code>bottomRight</code>\u3002\u56db\u53c9\u6811\u901a\u5e38\u88ab\u7528\u6765\u5212\u5206\u4e00\u4e2a\u4e8c\u7ef4\u7a7a\u95f4\uff0c\u9012\u5f52\u5730\u5c06\u5176\u7ec6\u5206\u4e3a\u56db\u4e2a\u8c61\u9650\u6216\u533a\u57df\u3002</p>\n\n<p>\u6211\u4eec\u5e0c\u671b\u5728\u56db\u53c9\u6811\u4e2d\u5b58\u50a8 True/False \u4fe1\u606f\u3002\u56db\u53c9\u6811\u7528\u6765\u8868\u793a <code>N * N</code> \u7684\u5e03\u5c14\u7f51\u683c\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9, \u5b83\u5c06\u88ab\u7b49\u5206\u6210\u56db\u4e2a\u5b69\u5b50\u7ed3\u70b9<strong>\u76f4\u5230\u8fd9\u4e2a\u533a\u57df\u5185\u7684\u503c\u90fd\u662f\u76f8\u540c\u7684</strong>\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u53e6\u5916\u4e24\u4e2a\u5e03\u5c14\u5c5e\u6027\uff1a<code>isLeaf</code>&nbsp;\u548c&nbsp;<code>ival</code>\u3002\u5f53\u8fd9\u4e2a\u8282\u70b9\u662f\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u65f6&nbsp;<code>isLeaf</code>&nbsp;\u4e3a\u771f\u3002<code>val</code>&nbsp;\u53d8\u91cf\u50a8\u5b58\u53f6\u5b50\u7ed3\u70b9\u6240\u4ee3\u8868\u7684\u533a\u57df\u7684\u503c\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u4e0b\u9762\u662f\u4e24\u4e2a\u56db\u53c9\u6811 A \u548c B\uff1a</p>\n\n<pre>A:\n+-------+-------+   T: true\n|       |       |   F: false\n|   T   |   T   |\n|       |       |\n+-------+-------+\n|       |       |\n|   F   |   F   |\n|       |       |\n+-------+-------+\ntopLeft: T\ntopRight: T\nbottomLeft: F\nbottomRight: F\n\nB:               \n+-------+---+---+\n|       | F | F |\n|   T   +---+---+\n|       | T | T |\n+-------+---+---+\n|       |       |\n|   T   |   F   |\n|       |       |\n+-------+-------+\ntopLeft: T\ntopRight:\n     topLeft: F\n     topRight: F\n     bottomLeft: T\n     bottomRight: T\nbottomLeft: T\nbottomRight: F\n</pre>\n\n<p>&nbsp;</p>\n\n<p>\u4f60\u7684\u4efb\u52a1\u662f\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6839\u636e\u4e24\u4e2a\u56db\u53c9\u6811\u8fd4\u56de\u8868\u793a\u8fd9\u4e24\u4e2a\u56db\u53c9\u6811\u7684\u903b\u8f91\u6216(\u6216\u5e76)\u7684\u56db\u53c9\u6811\u3002</p>\n\n<pre>A:                 B:                 C (A or B):\n+-------+-------+  +-------+---+---+  +-------+-------+\n|       |       |  |       | F | F |  |       |       |\n|   T   |   T   |  |   T   +---+---+  |   T   |   T   |\n|       |       |  |       | T | T |  |       |       |\n+-------+-------+  +-------+---+---+  +-------+-------+\n|       |       |  |       |       |  |       |       |\n|   F   |   F   |  |   T   |   F   |  |   T   |   F   |\n|       |       |  |       |       |  |       |       |\n+-------+-------+  +-------+-------+  +-------+-------+\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\u90fd\u8868\u793a\u5927\u5c0f\u4e3a&nbsp;<code>N * N</code>&nbsp;\u7684\u7f51\u683c\u3002</li>\n\t<li><code>N</code>&nbsp;\u5c06\u786e\u4fdd\u662f 2 \u7684\u6574\u6b21\u5e42\u3002</li>\n\t<li>\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u56db\u53c9\u6811\u7684\u77e5\u8bc6\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a>&nbsp;\u9875\u9762\u3002</li>\n\t<li>\u903b\u8f91\u6216\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\u5982\u679c&nbsp;<code>A \u4e3a True</code> \uff0c\u6216\u8005&nbsp;<code>B \u4e3a True</code> \uff0c\u6216\u8005&nbsp;<code>A \u548c B \u90fd\u4e3a True</code>\uff0c\u5219 &quot;A \u6216 B&quot; \u4e3a True\u3002</li>\n</ol>\n",
        "titleZh": "\u56db\u53c9\u6811\u4ea4\u96c6",
        "tags": [],
        "companies": [
            "Sumologic"
        ]
    },
    {
        "leetId": "559",
        "link": "maximum-depth-of-n-ary-tree",
        "title": "Maximum Depth of N-ary Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "65.3%",
        "questionDescription": "<p>Given a n-ary tree, find its maximum depth.</p>\r\n\r\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\r\n\r\n<p>For example, given a <code>3-ary</code> tree:</p>\r\n&nbsp;\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>We should return its max depth, which is 3.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The depth of the tree is at most <code>1000</code>.</li>\r\n\t<li>The total number of nodes is at most <code>5000</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a N \u53c9\u6811\uff0c\u627e\u5230\u5176\u6700\u5927\u6df1\u5ea6\u3002</p>\r\n\r\n<p>\u6700\u5927\u6df1\u5ea6\u662f\u6307\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u603b\u6570\u3002</p>\r\n\r\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<code>3\u53c9\u6811</code>&nbsp;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>\u6211\u4eec\u5e94\u8fd4\u56de\u5176\u6700\u5927\u6df1\u5ea6\uff0c3\u3002</p>\r\n\r\n<p><strong>\u8bf4\u660e:</strong></p>\r\n\r\n<ol>\r\n\t<li>\u6811\u7684\u6df1\u5ea6\u4e0d\u4f1a\u8d85\u8fc7&nbsp;<code>1000</code>\u3002</li>\r\n\t<li>\u6811\u7684\u8282\u70b9\u603b\u4e0d\u4f1a\u8d85\u8fc7&nbsp;<code>5000</code>\u3002</li>\r\n</ol>",
        "titleZh": "N\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "SAP"
        ]
    },
    {
        "leetId": "560",
        "link": "subarray-sum-equals-k",
        "title": "Subarray Sum Equals K",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "36.4%",
        "questionDescription": "<p>Given an array of integers and an integer <b>k</b>, you need to find the total number of continuous subarrays whose sum equals to <b>k</b>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>nums = [1,1,1], k = 2\r\n<b>Output:</b> 2\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of the array is in range [1, 20,000].</li>\r\n<li>The range of numbers in the array is [-1000, 1000] and the range of the integer <b>k</b> is [-1e7, 1e7].</li>\r\n</ol>\r\n</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570&nbsp;<strong>k\uff0c</strong>\u4f60\u9700\u8981\u627e\u5230\u8be5\u6570\u7ec4\u4e2d\u548c\u4e3a&nbsp;<strong>k&nbsp;</strong>\u7684\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\u7684\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1 :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>nums = [1,1,1], k = 2\n<strong>\u8f93\u51fa:</strong> 2 , [1,1] \u4e0e [1,1] \u4e3a\u4e24\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e :</strong></p>\n\n<ol>\n\t<li>\u6570\u7ec4\u7684\u957f\u5ea6\u4e3a [1, 20,000]\u3002</li>\n\t<li>\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u8303\u56f4\u662f [-1000, 1000] \uff0c\u4e14\u6574\u6570&nbsp;<strong>k&nbsp;</strong>\u7684\u8303\u56f4\u662f&nbsp;[-1e7, 1e7]\u3002</li>\n</ol>\n",
        "titleZh": "\u548c\u4e3aK\u7684\u5b50\u6570\u7ec4",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "Alibaba",
            "Snapchat",
            "Goldman Sachs",
            "Expedia",
            "Indeed",
            "Yandex",
            "Twilio"
        ]
    },
    {
        "leetId": "561",
        "link": "array-partition-i",
        "title": "Array Partition I",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "64.6%",
        "questionDescription": "<p>\r\nGiven an array of <b>2n</b> integers, your task is to group these integers into <b>n</b> pairs of integer, say (a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), ..., (a<sub>n</sub>, b<sub>n</sub>) which makes sum of min(a<sub>i</sub>, b<sub>i</sub>) for all i from 1 to n as large as possible.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,4,3,2]\r\n\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><b>n</b> is a positive integer, which is in the range of [1, 10000].</li>\r\n<li>All the integers in the array will be in the range of [-10000, 10000].</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u957f\u5ea6\u4e3a&nbsp;<strong>2n&nbsp;</strong>\u7684\u6570\u7ec4, \u4f60\u7684\u4efb\u52a1\u662f\u5c06\u8fd9\u4e9b\u6570\u5206\u6210&nbsp;<strong>n </strong>\u5bf9, \u4f8b\u5982 (a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), ..., (a<sub>n</sub>, b<sub>n</sub>) \uff0c\u4f7f\u5f97\u4ece1 \u5230&nbsp;n \u7684 min(a<sub>i</sub>, b<sub>i</sub>) \u603b\u548c\u6700\u5927\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,4,3,2]\n\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> n \u7b49\u4e8e 2, \u6700\u5927\u603b\u548c\u4e3a 4 = min(1, 2) + min(3, 4).\n</pre>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><strong>n</strong>&nbsp;\u662f\u6b63\u6574\u6570,\u8303\u56f4\u5728 [1, 10000].</li>\n\t<li>\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u8303\u56f4\u5728 [-10000, 10000].</li>\n</ol>\n",
        "titleZh": "\u6570\u7ec4\u62c6\u5206 I",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Bloomberg",
            "Adobe",
            "Apple"
        ]
    },
    {
        "leetId": "562",
        "link": "longest-line-of-consecutive-one-in-matrix",
        "title": "Longest Line of Consecutive One in Matrix",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n                Given a 01 matrix <b>M</b>, find the longest line of consecutive one in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal.\n\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b>\n[[0,1,1,0],\n [0,1,1,0],\n [0,0,0,1]]\n<b>Output:</b> 3\n</pre>\n<p></p>\n<p>\n<b>Hint:</b>\nThe number of elements in the given matrix will not exceed 10,000.\n</p>\n",
        "questionDescriptionZh": "\n                Given a 01 matrix <b>M</b>, find the longest line of consecutive one in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal.\n\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b>\n[[0,1,1,0],\n [0,1,1,0],\n [0,0,0,1]]\n<b>Output:</b> 3\n</pre>\n<p></p>\n<p>\n<b>Hint:</b>\nThe number of elements in the given matrix will not exceed 10,000.\n</p>\n",
        "companies": [
            "Google",
            "DoorDash"
        ]
    },
    {
        "leetId": "563",
        "link": "binary-tree-tilt",
        "title": "Binary Tree Tilt",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "47.7%",
        "questionDescription": "<p>Given a binary tree, return the tilt of the <b>whole tree</b>.</p>\r\n\r\n<p>The tilt of a <b>tree node</b> is defined as the <b>absolute difference</b> between the sum of all left subtree node values and the sum of all right subtree node values. Null node has tilt 0.</p>\r\n\r\n<p>The tilt of the <b>whole tree</b> is defined as the sum of all nodes' tilt.</p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\n         1\r\n       /   \\\r\n      2     3\r\n<b>Output:</b> 1\r\n<b>Explanation:</b> \r\nTilt of node 2 : 0\r\nTilt of node 3 : 0\r\nTilt of node 1 : |2-3| = 1\r\nTilt of binary tree : 0 + 0 + 1 = 1\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<ol>\r\n<li>The sum of node values in any subtree won't exceed the range of 32-bit integer. </li>\r\n<li>All the tilt values won't exceed the range of 32-bit integer.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8ba1\u7b97<strong>\u6574\u4e2a\u6811</strong>\u7684\u5761\u5ea6\u3002</p>\n\n<p>\u4e00\u4e2a\u6811\u7684<strong>\u8282\u70b9\u7684\u5761\u5ea6</strong>\u5b9a\u4e49\u5373\u4e3a\uff0c\u8be5\u8282\u70b9\u5de6\u5b50\u6811\u7684\u7ed3\u70b9\u4e4b\u548c\u548c\u53f3\u5b50\u6811\u7ed3\u70b9\u4e4b\u548c\u7684<strong>\u5dee\u7684\u7edd\u5bf9\u503c</strong>\u3002\u7a7a\u7ed3\u70b9\u7684\u7684\u5761\u5ea6\u662f0\u3002</p>\n\n<p><strong>\u6574\u4e2a\u6811</strong>\u7684\u5761\u5ea6\u5c31\u662f\u5176\u6240\u6709\u8282\u70b9\u7684\u5761\u5ea6\u4e4b\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n         1\n       /   \\\n      2     3\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> \n\u7ed3\u70b9\u7684\u5761\u5ea6 2 : 0\n\u7ed3\u70b9\u7684\u5761\u5ea6 3 : 0\n\u7ed3\u70b9\u7684\u5761\u5ea6 1 : |2-3| = 1\n\u6811\u7684\u5761\u5ea6 : 0 + 0 + 1 = 1\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u4efb\u4f55\u5b50\u6811\u7684\u7ed3\u70b9\u7684\u548c\u4e0d\u4f1a\u8d85\u8fc732\u4f4d\u6574\u6570\u7684\u8303\u56f4\u3002</li>\n\t<li>\u5761\u5ea6\u7684\u503c\u4e0d\u4f1a\u8d85\u8fc732\u4f4d\u6574\u6570\u7684\u8303\u56f4\u3002</li>\n</ol>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u5761\u5ea6",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Indeed"
        ]
    },
    {
        "leetId": "564",
        "link": "find-the-closest-palindrome",
        "title": "Find the Closest Palindrome",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "10.8%",
        "questionDescription": "<p>Given an integer n, find the closest integer (not including itself), which is a palindrome. </p>\r\n\r\n<p>The 'closest' is defined as absolute difference minimized between two integers.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"123\"\r\n<b>Output:</b> \"121\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The input <b>n</b> is a positive integer represented by string, whose length will not exceed 18.</li>\r\n<li>If there is a tie, return the smaller one as answer.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n \uff0c\u4f60\u9700\u8981\u627e\u5230\u4e0e\u5b83\u6700\u8fd1\u7684\u56de\u6587\u6570\uff08\u4e0d\u5305\u62ec\u81ea\u8eab\uff09\u3002</p>\n\n<p>&ldquo;\u6700\u8fd1\u7684&rdquo;\u5b9a\u4e49\u4e3a\u4e24\u4e2a\u6574\u6570<strong>\u5dee\u7684\u7edd\u5bf9\u503c</strong>\u6700\u5c0f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;123&quot;\n<strong>\u8f93\u51fa:</strong> &quot;121&quot;\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><strong>n </strong>\u662f\u7531\u5b57\u7b26\u4e32\u8868\u793a\u7684\u6b63\u6574\u6570\uff0c\u5176\u957f\u5ea6\u4e0d\u8d85\u8fc718\u3002</li>\n\t<li>\u5982\u679c\u6709\u591a\u4e2a\u7ed3\u679c\uff0c\u8fd4\u56de\u6700\u5c0f\u7684\u90a3\u4e2a\u3002</li>\n</ol>\n",
        "titleZh": "\u5bfb\u627e\u6700\u8fd1\u7684\u56de\u6587\u6570",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Yelp",
            "Pinterest",
            "Two Sigma"
        ]
    },
    {
        "leetId": "565",
        "link": "array-nesting",
        "title": "Array Nesting",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "46.7%",
        "questionDescription": "<p>A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.</p>\r\n\r\n<p>Suppose the first element in S starts with the selection of element A[i] of index = i, the next element in S should be A[A[i]], and then A[A[A[i]]]&hellip; By that analogy, we stop adding right before a duplicate element occurs in S.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> A = [5,4,0,3,1,6,2]\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> \r\nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\r\n\r\nOne of the longest S[K]:\r\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>N is an integer within the range [1, 20,000].</li>\r\n\t<li>The elements of A are all distinct.</li>\r\n\t<li>Each element of A is an integer within the range [0, N-1].</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7d22\u5f15\u4ece<code>0</code>\u5f00\u59cb\u957f\u5ea6\u4e3a<code>N</code>\u7684\u6570\u7ec4<code>A</code>\uff0c\u5305\u542b<code>0</code>\u5230<code>N - 1</code>\u7684\u6240\u6709\u6574\u6570\u3002\u627e\u5230\u5e76\u8fd4\u56de\u6700\u5927\u7684\u96c6\u5408<code>S</code>\uff0c<code>S[i] = {A[i], A[A[i]], A[A[A[i]]], ... }</code>\u4e14\u9075\u5b88\u4ee5\u4e0b\u7684\u89c4\u5219\u3002</p>\n\n<p>\u5047\u8bbe\u9009\u62e9\u7d22\u5f15\u4e3a<code>i</code>\u7684\u5143\u7d20<code>A[i]</code>\u4e3a<code>S</code>\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c<code>S</code>\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u5e94\u8be5\u662f<code>A[A[i]]</code>\uff0c\u4e4b\u540e\u662f<code>A[A[A[i]]]...</code> \u4ee5\u6b64\u7c7b\u63a8\uff0c\u4e0d\u65ad\u6dfb\u52a0\u76f4\u5230<code>S</code>\u51fa\u73b0\u91cd\u590d\u7684\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> A = [5,4,0,3,1,6,2]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\n\n\u5176\u4e2d\u4e00\u79cd\u6700\u957f\u7684 S[K]:\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>N</code>\u662f<code>[1, 20,000]</code>\u4e4b\u95f4\u7684\u6574\u6570\u3002</li>\n\t<li><code>A</code>\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002</li>\n\t<li><code>A</code>\u4e2d\u7684\u5143\u7d20\u5927\u5c0f\u5728<code>[0, N-1]</code>\u4e4b\u95f4\u3002</li>\n</ol>\n",
        "titleZh": "\u6570\u7ec4\u5d4c\u5957",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Apple"
        ]
    },
    {
        "leetId": "566",
        "link": "reshape-the-matrix",
        "title": "Reshape the Matrix",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "58.9%",
        "questionDescription": "<p>In MATLAB, there is a very useful function called 'reshape', which can reshape a matrix into a new one with different size but keep its original data.\r\n</p>\r\n\r\n<p>\r\nYou're given a matrix represented by a two-dimensional array, and two <b>positive</b> integers <b>r</b> and <b>c</b> representing the <b>row</b> number and <b>column</b> number of the wanted reshaped matrix, respectively.</p>\r\n\r\n <p>The reshaped matrix need to be filled with all the elements of the original matrix in the same <b>row-traversing</b> order as they were.\r\n</p>\r\n\r\n<p>\r\nIf the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nnums = \r\n[[1,2],\r\n [3,4]]\r\nr = 1, c = 4\r\n<b>Output:</b> \r\n[[1,2,3,4]]\r\n<b>Explanation:</b><br>The <b>row-traversing</b> of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nnums = \r\n[[1,2],\r\n [3,4]]\r\nr = 2, c = 4\r\n<b>Output:</b> \r\n[[1,2],\r\n [3,4]]\r\n<b>Explanation:</b><br>There is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the original matrix.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The height and width of the given matrix is in range [1, 100].</li>\r\n<li>The given r and c are all positive.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u5728MATLAB\u4e2d\uff0c\u6709\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u51fd\u6570 <code>reshape</code>\uff0c\u5b83\u53ef\u4ee5\u5c06\u4e00\u4e2a\u77e9\u9635\u91cd\u5851\u4e3a\u53e6\u4e00\u4e2a\u5927\u5c0f\u4e0d\u540c\u7684\u65b0\u77e9\u9635\uff0c\u4f46\u4fdd\u7559\u5176\u539f\u59cb\u6570\u636e\u3002</p>\n\n<p>\u7ed9\u51fa\u4e00\u4e2a\u7531\u4e8c\u7ef4\u6570\u7ec4\u8868\u793a\u7684\u77e9\u9635\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6b63\u6574\u6570<code>r</code>\u548c<code>c</code>\uff0c\u5206\u522b\u8868\u793a\u60f3\u8981\u7684\u91cd\u6784\u7684\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002</p>\n\n<p>\u91cd\u6784\u540e\u7684\u77e9\u9635\u9700\u8981\u5c06\u539f\u59cb\u77e9\u9635\u7684\u6240\u6709\u5143\u7d20\u4ee5\u76f8\u540c\u7684<strong>\u884c\u904d\u5386\u987a\u5e8f</strong>\u586b\u5145\u3002</p>\n\n<p>\u5982\u679c\u5177\u6709\u7ed9\u5b9a\u53c2\u6570\u7684<code>reshape</code>\u64cd\u4f5c\u662f\u53ef\u884c\u4e14\u5408\u7406\u7684\uff0c\u5219\u8f93\u51fa\u65b0\u7684\u91cd\u5851\u77e9\u9635\uff1b\u5426\u5219\uff0c\u8f93\u51fa\u539f\u59cb\u77e9\u9635\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nnums = \n[[1,2],\n [3,4]]\nr = 1, c = 4\n<strong>\u8f93\u51fa:</strong> \n[[1,2,3,4]]\n<strong>\u89e3\u91ca:</strong>\n\u884c\u904d\u5386nums\u7684\u7ed3\u679c\u662f [1,2,3,4]\u3002\u65b0\u7684\u77e9\u9635\u662f 1 * 4 \u77e9\u9635, \u7528\u4e4b\u524d\u7684\u5143\u7d20\u503c\u4e00\u884c\u4e00\u884c\u586b\u5145\u65b0\u77e9\u9635\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nnums = \n[[1,2],\n [3,4]]\nr = 2, c = 4\n<strong>\u8f93\u51fa:</strong> \n[[1,2],\n [3,4]]\n<strong>\u89e3\u91ca:</strong>\n\u6ca1\u6709\u529e\u6cd5\u5c06 2 * 2 \u77e9\u9635\u8f6c\u5316\u4e3a 2 * 4 \u77e9\u9635\u3002 \u6240\u4ee5\u8f93\u51fa\u539f\u77e9\u9635\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u77e9\u9635\u7684\u5bbd\u548c\u9ad8\u8303\u56f4\u5728 [1, 100]\u3002</li>\n\t<li>\u7ed9\u5b9a\u7684 r \u548c c \u90fd\u662f\u6b63\u6570\u3002</li>\n</ol>\n",
        "titleZh": "\u91cd\u5851\u77e9\u9635",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Mathworks"
        ]
    },
    {
        "leetId": "567",
        "link": "permutation-in-string",
        "title": "Permutation in String",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "31.5%",
        "questionDescription": "Given two strings <b>s1</b> and <b>s2</b>, write a function to return true if <b>s2</b> contains the permutation of <b>s1</b>. In other words, one of the first string's permutations is the <b>substring</b> of the second string.\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>s1 = \"ab\" s2 = \"eidbaooo\"\r\n<b>Output:</b>True\r\n<b>Explanation:</b> s2 contains one permutation of s1 (\"ba\").\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b>s1= \"ab\" s2 = \"eidboaoo\"\r\n<b>Output:</b> False\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The input strings only contain lower case letters.</li>\r\n<li>The length of both given strings is in range [1, 10,000].</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32&nbsp;<strong>s1</strong>&nbsp;\u548c&nbsp;<strong>s2</strong>\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad <strong>s2</strong> \u662f\u5426\u5305\u542b <strong>s1&nbsp;</strong>\u7684\u6392\u5217\u3002</p>\n\n<p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6392\u5217\u4e4b\u4e00\u662f\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>s1 = &quot;ab&quot; s2 = &quot;eidbaooo&quot;\n<strong>\u8f93\u51fa: </strong>True\n<strong>\u89e3\u91ca:</strong> s2 \u5305\u542b s1 \u7684\u6392\u5217\u4e4b\u4e00 (&quot;ba&quot;).\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>s1= &quot;ab&quot; s2 = &quot;eidboaoo&quot;\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd</li>\n\t<li>\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u90fd\u5728 [1, 10,000] \u4e4b\u95f4</li>\n</ol>\n",
        "titleZh": "\u5b57\u7b26\u4e32\u7684\u6392\u5217",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Yahoo",
            "Snapchat"
        ]
    },
    {
        "leetId": "568",
        "link": "maximum-vacation-days",
        "title": "Maximum Vacation Days",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "28",
        "questionDescription": "\n<p>\nLeetCode wants to give one of its best employees the option to travel among <b>N</b> cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.\n</p>\n<p><b>Rules and restrictions:</b><br/>\n</p><ol>\n<li>You can only travel among <b>N</b> cities, represented by indexes from 0 to N-1. Initially, you are in the city indexed 0 on <b>Monday</b>.</li>\n<li>The cities are connected by flights. The flights are represented as a <b>N*N</b> matrix (not necessary symmetrical), called <b>flights</b> representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, <b>flights[i][j] = 0</b>; Otherwise, <b>flights[i][j] = 1</b>. Also, <b>flights[i][i] = 0</b> for all i.</li>\n<li>You totally have <b>K</b> weeks (<b>each week has 7 days</b>) to travel. You can only take flights at most once <b>per day</b> and can only take flights on each week's <b>Monday</b> morning. Since flight time is so short, we don't consider the impact of flight time.</li>\n<li>For each city, you can only have restricted vacation days in different weeks, given an <b>N*K</b> matrix called <b>days</b> representing this relationship. For the value of <b>days[i][j]</b>, it represents the maximum days you could take vacation in the city <b>i</b> in the week <b>j</b>.</li>\n</ol>\n<p></p>\n<p>You're given the <b>flights</b> matrix and <b>days</b> matrix, and you need to output the maximum vacation days you could take during <b>K</b> weeks.</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b>flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]]\n<b>Output:</b> 12\n<b>Explanation:</b> <br/>Ans = 6 + 3 + 3 = 12. <br/>\nOne of the best strategies is:\n1st week : fly from city 0 to city 1 on Monday, and play 6 days and work 1 day. <br/>(Although you start at city 0, we could also fly to and start at other cities since it is Monday.) \n2nd week : fly from city 1 to city 2 on Monday, and play 3 days and work 4 days.\n3rd week : stay at city 2, and play 3 days and work 4 days.\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b>flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]]\n<b>Output:</b> 3\n<b>Explanation:</b> <br/>Ans = 1 + 1 + 1 = 3. <br/>\nSince there is no flights enable you to move to another city, you have to stay at city 0 for the whole 3 weeks. <br/>For each week, you only have one day to play and six days to work. <br/>So the maximum number of vacation days is 3.\n</pre>\n<p></p>\n<p><b>Example 3:</b><br/>\n</p><pre><b>Input:</b>flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]]\n<b>Output:</b> 21\n<b>Explanation:</b><br/>Ans = 7 + 7 + 7 = 21<br/>\nOne of the best strategies is:\n1st week : stay at city 0, and play 7 days. \n2nd week : fly from city 0 to city 1 on Monday, and play 7 days.\n3rd week : fly from city 1 to city 2 on Monday, and play 7 days.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li><b>N and K</b> are positive integers, which are in the range of [1, 100].</li>\n<li>In the matrix <b>flights</b>, all the values are integers in the range of [0, 1].</li>\n<li>In the matrix <b>days</b>, all the values are integers in the range [0, 7].</li>\n<li>You could stay at a city beyond the number of vacation days, but you should <b>work</b> on the extra days, which won't be counted as vacation days.</li>\n<li>If you fly from the city A to the city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.</li>\n<li>We don't consider the impact of flight hours towards the calculation of vacation days.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>\nLeetCode wants to give one of its best employees the option to travel among <b>N</b> cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.\n</p>\n<p><b>Rules and restrictions:</b><br/>\n</p><ol>\n<li>You can only travel among <b>N</b> cities, represented by indexes from 0 to N-1. Initially, you are in the city indexed 0 on <b>Monday</b>.</li>\n<li>The cities are connected by flights. The flights are represented as a <b>N*N</b> matrix (not necessary symmetrical), called <b>flights</b> representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, <b>flights[i][j] = 0</b>; Otherwise, <b>flights[i][j] = 1</b>. Also, <b>flights[i][i] = 0</b> for all i.</li>\n<li>You totally have <b>K</b> weeks (<b>each week has 7 days</b>) to travel. You can only take flights at most once <b>per day</b> and can only take flights on each week's <b>Monday</b> morning. Since flight time is so short, we don't consider the impact of flight time.</li>\n<li>For each city, you can only have restricted vacation days in different weeks, given an <b>N*K</b> matrix called <b>days</b> representing this relationship. For the value of <b>days[i][j]</b>, it represents the maximum days you could take vacation in the city <b>i</b> in the week <b>j</b>.</li>\n</ol>\n<p></p>\n<p>You're given the <b>flights</b> matrix and <b>days</b> matrix, and you need to output the maximum vacation days you could take during <b>K</b> weeks.</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b>flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]]\n<b>Output:</b> 12\n<b>Explanation:</b> <br/>Ans = 6 + 3 + 3 = 12. <br/>\nOne of the best strategies is:\n1st week : fly from city 0 to city 1 on Monday, and play 6 days and work 1 day. <br/>(Although you start at city 0, we could also fly to and start at other cities since it is Monday.) \n2nd week : fly from city 1 to city 2 on Monday, and play 3 days and work 4 days.\n3rd week : stay at city 2, and play 3 days and work 4 days.\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b>flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]]\n<b>Output:</b> 3\n<b>Explanation:</b> <br/>Ans = 1 + 1 + 1 = 3. <br/>\nSince there is no flights enable you to move to another city, you have to stay at city 0 for the whole 3 weeks. <br/>For each week, you only have one day to play and six days to work. <br/>So the maximum number of vacation days is 3.\n</pre>\n<p></p>\n<p><b>Example 3:</b><br/>\n</p><pre><b>Input:</b>flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]]\n<b>Output:</b> 21\n<b>Explanation:</b><br/>Ans = 7 + 7 + 7 = 21<br/>\nOne of the best strategies is:\n1st week : stay at city 0, and play 7 days. \n2nd week : fly from city 0 to city 1 on Monday, and play 7 days.\n3rd week : fly from city 1 to city 2 on Monday, and play 7 days.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li><b>N and K</b> are positive integers, which are in the range of [1, 100].</li>\n<li>In the matrix <b>flights</b>, all the values are integers in the range of [0, 1].</li>\n<li>In the matrix <b>days</b>, all the values are integers in the range [0, 7].</li>\n<li>You could stay at a city beyond the number of vacation days, but you should <b>work</b> on the extra days, which won't be counted as vacation days.</li>\n<li>If you fly from the city A to the city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.</li>\n<li>We don't consider the impact of flight hours towards the calculation of vacation days.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google",
            "Facebook",
            "Uber"
        ]
    },
    {
        "leetId": "572",
        "link": "subtree-of-another-tree",
        "title": "Subtree of Another Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "40.0%",
        "questionDescription": "<p>\r\nGiven two non-empty binary trees <b>s</b> and <b>t</b>, check whether tree <b>t</b> has exactly the same structure and node values with a subtree of <b>s</b>. A subtree of <b>s</b> is a tree consists of a node in <b>s</b> and all of this node's descendants. The tree <b>s</b> could also be considered as a subtree of itself.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br>\r\n\r\nGiven tree s:\r\n<pre>\r\n     3\r\n    / \\\r\n   4   5\r\n  / \\\r\n 1   2\r\n</pre>\r\nGiven tree t:\r\n<pre>\r\n   4 \r\n  / \\\r\n 1   2\r\n</pre>\r\nReturn <b>true</b>, because t has the same structure and node values with a subtree of s.\r\n</p>\r\n\r\n<p><b>Example 2:</b><br>\r\n\r\nGiven tree s:\r\n<pre>\r\n     3\r\n    / \\\r\n   4   5\r\n  / \\\r\n 1   2\r\n    /\r\n   0\r\n</pre>\r\nGiven tree t:\r\n<pre>\r\n   4\r\n  / \\\r\n 1   2\r\n</pre>\r\nReturn <b>false</b>.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u975e\u7a7a\u4e8c\u53c9\u6811 <strong>s</strong> \u548c <strong>t</strong>\uff0c\u68c0\u9a8c&nbsp;<strong>s</strong> \u4e2d\u662f\u5426\u5305\u542b\u548c <strong>t</strong> \u5177\u6709\u76f8\u540c\u7ed3\u6784\u548c\u8282\u70b9\u503c\u7684\u5b50\u6811\u3002<strong>s</strong> \u7684\u4e00\u4e2a\u5b50\u6811\u5305\u62ec <strong>s</strong> \u7684\u4e00\u4e2a\u8282\u70b9\u548c\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u5b50\u5b59\u3002<strong>s</strong> \u4e5f\u53ef\u4ee5\u770b\u505a\u5b83\u81ea\u8eab\u7684\u4e00\u68f5\u5b50\u6811\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong><br />\n\u7ed9\u5b9a\u7684\u6811 s:</p>\n\n<pre>\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n</pre>\n\n<p>\u7ed9\u5b9a\u7684\u6811 t\uff1a</p>\n\n<pre>\n   4 \n  / \\\n 1   2\n</pre>\n\n<p>\u8fd4\u56de <strong>true</strong>\uff0c\u56e0\u4e3a t \u4e0e s \u7684\u4e00\u4e2a\u5b50\u6811\u62e5\u6709\u76f8\u540c\u7684\u7ed3\u6784\u548c\u8282\u70b9\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 2:</strong><br />\n\u7ed9\u5b9a\u7684\u6811 s\uff1a</p>\n\n<pre>\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n    /\n   0\n</pre>\n\n<p>\u7ed9\u5b9a\u7684\u6811 t\uff1a</p>\n\n<pre>\n   4\n  / \\\n 1   2\n</pre>\n\n<p>\u8fd4\u56de <strong>false</strong>\u3002</p>\n",
        "titleZh": "\u53e6\u4e00\u4e2a\u6811\u7684\u5b50\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Alibaba",
            "eBay",
            "Tencent",
            "Samsung"
        ]
    },
    {
        "leetId": "573",
        "link": "squirrel-simulation",
        "title": "Squirrel Simulation",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n                There's a tree, a squirrel, and several nuts. Positions are represented by the cells in a 2D grid. Your goal is to find the <b>minimal</b> distance for the squirrel to collect all the nuts and put them under the tree one by one. The squirrel can only take at most <b>one nut</b> at one time and can move in four directions - up, down, left and right, to the adjacent cell. The distance is represented by the number of moves. \n\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> \nHeight : 5\nWidth : 7\nTree position : [2,2]\nSquirrel : [4,4]\nNuts : [[3,0], [2,5]]\n<b>Output:</b> 12\n<b>Explanation:</b>\n<img src=\"/static/images/problemset/squirrel_simulation.png\" width=\"40%\"/>\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>All given positions won't overlap.</li>\n<li>The squirrel can take at most one nut at one time.</li>\n<li>The given positions of nuts have no order.</li>\n<li>Height and width are positive integers. 3 &lt;= height * width &lt;= 10,000.</li>\n<li>The given positions contain at least one nut, only one tree and one squirrel.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n                There's a tree, a squirrel, and several nuts. Positions are represented by the cells in a 2D grid. Your goal is to find the <b>minimal</b> distance for the squirrel to collect all the nuts and put them under the tree one by one. The squirrel can only take at most <b>one nut</b> at one time and can move in four directions - up, down, left and right, to the adjacent cell. The distance is represented by the number of moves. \n\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> \nHeight : 5\nWidth : 7\nTree position : [2,2]\nSquirrel : [4,4]\nNuts : [[3,0], [2,5]]\n<b>Output:</b> 12\n<b>Explanation:</b>\n<img src=\"/static/images/problemset/squirrel_simulation.png\" width=\"40%\"/>\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>All given positions won't overlap.</li>\n<li>The squirrel can take at most one nut at one time.</li>\n<li>The given positions of nuts have no order.</li>\n<li>Height and width are positive integers. 3 &lt;= height * width &lt;= 10,000.</li>\n<li>The given positions contain at least one nut, only one tree and one squirrel.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Square"
        ]
    },
    {
        "leetId": "575",
        "link": "distribute-candies",
        "title": "Distribute Candies",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "59.6%",
        "questionDescription": "Given an integer array with <b>even</b> length, where different numbers in this array represent different <b>kinds</b> of candies. Each number means one candy of the corresponding kind. You need to distribute these candies <b>equally</b> in number to brother and sister. Return the maximum number of <b>kinds</b> of candies the sister could gain. \r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> candies = [1,1,2,2,3,3]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b>\r\nThere are three different kinds of candies (1, 2 and 3), and two candies for each kind.\r\nOptimal distribution: The sister has candies [1,2,3] and the brother has candies [1,2,3], too. \r\nThe sister has three different kinds of candies. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> candies = [1,1,2,3]\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> For example, the sister has candies [2,3] and the brother has candies [1,1]. \r\nThe sister has two different kinds of candies, the brother has only one kind of candies. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<ol>\r\n<li>The length of the given array is in range [2, 10,000], and will be even.</li>\r\n<li>The number in given array is in range [-100,000, 100,000].</li>\r\n<ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u5076\u6570</strong>\u957f\u5ea6\u7684\u6570\u7ec4\uff0c\u5176\u4e2d\u4e0d\u540c\u7684\u6570\u5b57\u4ee3\u8868\u7740\u4e0d\u540c\u79cd\u7c7b\u7684\u7cd6\u679c\uff0c\u6bcf\u4e00\u4e2a\u6570\u5b57\u4ee3\u8868\u4e00\u4e2a\u7cd6\u679c\u3002\u4f60\u9700\u8981\u628a\u8fd9\u4e9b\u7cd6\u679c<strong>\u5e73\u5747</strong>\u5206\u7ed9\u4e00\u4e2a\u5f1f\u5f1f\u548c\u4e00\u4e2a\u59b9\u59b9\u3002\u8fd4\u56de\u59b9\u59b9\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u7cd6\u679c\u7684\u79cd\u7c7b\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> candies = [1,1,2,2,3,3]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u6790: </strong>\u4e00\u5171\u6709\u4e09\u79cd\u79cd\u7c7b\u7684\u7cd6\u679c\uff0c\u6bcf\u4e00\u79cd\u90fd\u6709\u4e24\u4e2a\u3002\n     \u6700\u4f18\u5206\u914d\u65b9\u6848\uff1a\u59b9\u59b9\u83b7\u5f97[1,2,3],\u5f1f\u5f1f\u4e5f\u83b7\u5f97[1,2,3]\u3002\u8fd9\u6837\u4f7f\u59b9\u59b9\u83b7\u5f97\u7cd6\u679c\u7684\u79cd\u7c7b\u6570\u6700\u591a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2 :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> candies = [1,1,2,3]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u6790:</strong> \u59b9\u59b9\u83b7\u5f97\u7cd6\u679c[2,3],\u5f1f\u5f1f\u83b7\u5f97\u7cd6\u679c[1,1]\uff0c\u59b9\u59b9\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u7cd6\u679c\uff0c\u5f1f\u5f1f\u53ea\u6709\u4e00\u79cd\u3002\u8fd9\u6837\u4f7f\u5f97\u59b9\u59b9\u53ef\u4ee5\u83b7\u5f97\u7684\u7cd6\u679c\u79cd\u7c7b\u6570\u6700\u591a\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u6570\u7ec4\u7684\u957f\u5ea6\u4e3a[2, 10,000]\uff0c\u5e76\u4e14\u786e\u5b9a\u4e3a\u5076\u6570\u3002</li>\n\t<li>\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u5927\u5c0f\u5728\u8303\u56f4[-100,000, 100,000]\u5185\u3002\n\t<ol>\n\t</ol>\n\t</li>\n</ol>\n",
        "titleZh": "\u5206\u7cd6\u679c",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "LiveRamp"
        ]
    },
    {
        "leetId": "576",
        "link": "out-of-boundary-paths",
        "title": "Out of Boundary Paths",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "32.2%",
        "questionDescription": "<p>There is an <b>m</b> by <b>n</b> grid with a ball. Given the start coordinate <b>(i,j)</b> of the ball, you can move the ball to <b>adjacent</b> cell or cross the grid boundary in four directions (up, down, left, right). However, you can <b>at most</b> move <b>N</b> times. Find out the number of paths to move the ball out of grid boundary. The answer may be very large, return it after mod 10<sup>9</sup> + 7.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input: </b>m = 2, n = 2, N = 2, i = 0, j = 0\r\n<b>Output:</b> 6\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/13/out_of_boundary_paths_1.png\" style=\"width: 100%; max-width: 400px\" />\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input: </b>m = 1, n = 3, N = 3, i = 0, j = 1\r\n<b>Output:</b> 12\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/out_of_boundary_paths_2.png\" style=\"width: 100%; max-width: 400px\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>Once you move the ball out of boundary, you cannot move it back.</li>\r\n\t<li>The length and height of the grid is in range [1,50].</li>\r\n\t<li>N is in range [0,50].</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a <strong>m &times; n </strong>\u7684\u7f51\u683c\u548c\u4e00\u4e2a\u7403\u3002\u7403\u7684\u8d77\u59cb\u5750\u6807\u4e3a&nbsp;<strong>(i,j)</strong>&nbsp;\uff0c\u4f60\u53ef\u4ee5\u5c06\u7403\u79fb\u5230<strong>\u76f8\u90bb</strong>\u7684\u5355\u5143\u683c\u5185\uff0c\u6216\u8005\u5f80\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u56db\u4e2a\u65b9\u5411\u4e0a\u79fb\u52a8\u4f7f\u7403\u7a7f\u8fc7\u7f51\u683c\u8fb9\u754c\u3002\u4f46\u662f\uff0c\u4f60<strong>\u6700\u591a</strong>\u53ef\u4ee5\u79fb\u52a8&nbsp;<strong>N&nbsp;</strong>\u6b21\u3002\u627e\u51fa\u53ef\u4ee5\u5c06\u7403\u79fb\u51fa\u8fb9\u754c\u7684\u8def\u5f84\u6570\u91cf\u3002\u7b54\u6848\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u8fd4\u56de \u7ed3\u679c mod 10<sup>9</sup>&nbsp;+ 7 \u7684\u503c\u3002</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165: </strong>m = 2, n = 2, N = 2, i = 0, j = 0\r\n<strong>\u8f93\u51fa:</strong> 6\r\n<strong>\u89e3\u91ca:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/out_of_boundary_paths_1.png\" style=\"width: 100%; max-width: 400px\">\r\n</pre>\r\n\r\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165: </strong>m = 1, n = 3, N = 3, i = 0, j = 1\r\n<strong>\u8f93\u51fa:</strong> 12\r\n<strong>\u89e3\u91ca:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/out_of_boundary_paths_2.png\" style=\"width: 100%; max-width: 400px\">\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u8bf4\u660e:</strong></p>\r\n\r\n<ol>\r\n\t<li>\u7403\u4e00\u65e6\u51fa\u754c\uff0c\u5c31\u4e0d\u80fd\u518d\u88ab\u79fb\u52a8\u56de\u7f51\u683c\u5185\u3002</li>\r\n\t<li>\u7f51\u683c\u7684\u957f\u5ea6\u548c\u9ad8\u5ea6\u5728 [1,50] \u7684\u8303\u56f4\u5185\u3002</li>\r\n\t<li>N \u5728 [0,50] \u7684\u8303\u56f4\u5185\u3002</li>\r\n</ol>",
        "titleZh": "\u51fa\u754c\u7684\u8def\u5f84\u6570",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Baidu"
        ]
    },
    {
        "leetId": "581",
        "link": "shortest-unsorted-continuous-subarray",
        "title": "Shortest Unsorted Continuous Subarray",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "31.6%",
        "questionDescription": "<p>Given an integer array, you need to find one <b>continuous subarray</b> that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too. </p> \r\n\r\n<p>You need to find the <b>shortest</b> such subarray and output its length.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [2, 6, 4, 8, 10, 9, 15]\r\n<b>Output:</b> 5\r\n<b>Explanation:</b> You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>Then length of the input array is in range [1, 10,000].</li>\r\n<li>The input array may contain duplicates, so ascending order here means <b><=</b>. </li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5bfb\u627e\u4e00\u4e2a<strong>\u8fde\u7eed\u7684\u5b50\u6570\u7ec4</strong>\uff0c\u5982\u679c\u5bf9\u8fd9\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u6574\u4e2a\u6570\u7ec4\u90fd\u4f1a\u53d8\u4e3a\u5347\u5e8f\u6392\u5e8f\u3002</p>\n\n<p>\u4f60\u627e\u5230\u7684\u5b50\u6570\u7ec4\u5e94\u662f<strong>\u6700\u77ed</strong>\u7684\uff0c\u8bf7\u8f93\u51fa\u5b83\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [2, 6, 4, 8, 10, 9, 15]\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \u4f60\u53ea\u9700\u8981\u5bf9 [6, 4, 8, 10, 9] \u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u6574\u4e2a\u8868\u90fd\u4f1a\u53d8\u4e3a\u5347\u5e8f\u6392\u5e8f\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e :</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u5728&nbsp;[1, 10,000]\u3002</li>\n\t<li>\u8f93\u5165\u7684\u6570\u7ec4\u53ef\u80fd\u5305\u542b<strong>\u91cd\u590d</strong>\u5143\u7d20&nbsp;\uff0c\u6240\u4ee5<strong>\u5347\u5e8f</strong>\u7684\u610f\u601d\u662f<strong>&lt;=\u3002</strong></li>\n</ol>\n",
        "titleZh": "\u6700\u77ed\u65e0\u5e8f\u8fde\u7eed\u5b50\u6570\u7ec4",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Bloomberg",
            "LiveRamp"
        ]
    },
    {
        "leetId": "582",
        "link": "kill-process",
        "title": "Kill Process",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "38",
        "questionDescription": "\n<p>Given <b>n</b> processes, each process has a unique <b>PID (process id)</b> and its <b>PPID (parent process id)</b>. \n\n</p><p>Each process only has one parent process, but may have one or more children processes. This is just like a tree structure.  Only one process has PPID that is 0, which means this process has no parent process. All the PIDs will be distinct positive integers.</p>\n<p>We use two list of integers to represent a list of processes, where the first list contains PID for each process and the second list contains the corresponding PPID. </p>\n<p>Now given the two lists, and a PID representing a process you want to kill, return a list of PIDs of processes that will be killed in the end. You should assume that when a process is killed, all its children processes will be killed. No order is required for the final answer.</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> \npid =  [1, 3, 10, 5]\nppid = [3, 0, 5, 3]\nkill = 5\n<b>Output:</b> [5,10]\n<b>Explanation:</b> \n           3\n         /   \\\n        1     5\n             /\n            10\nKill 5 will also kill 10.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The given kill id is guaranteed to be one of the given PIDs.</li>\n<li>n &gt;= 1.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given <b>n</b> processes, each process has a unique <b>PID (process id)</b> and its <b>PPID (parent process id)</b>. \n\n</p><p>Each process only has one parent process, but may have one or more children processes. This is just like a tree structure.  Only one process has PPID that is 0, which means this process has no parent process. All the PIDs will be distinct positive integers.</p>\n<p>We use two list of integers to represent a list of processes, where the first list contains PID for each process and the second list contains the corresponding PPID. </p>\n<p>Now given the two lists, and a PID representing a process you want to kill, return a list of PIDs of processes that will be killed in the end. You should assume that when a process is killed, all its children processes will be killed. No order is required for the final answer.</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> \npid =  [1, 3, 10, 5]\nppid = [3, 0, 5, 3]\nkill = 5\n<b>Output:</b> [5,10]\n<b>Explanation:</b> \n           3\n         /   \\\n        1     5\n             /\n            10\nKill 5 will also kill 10.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The given kill id is guaranteed to be one of the given PIDs.</li>\n<li>n &gt;= 1.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "Yahoo",
            "Twitter"
        ]
    },
    {
        "leetId": "583",
        "link": "delete-operation-for-two-strings",
        "title": "Delete Operation for Two Strings",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "41.0%",
        "questionDescription": "<p>\r\nGiven two words <i>word1</i> and <i>word2</i>, find the minimum number of steps required to make <i>word1</i> and <i>word2</i> the same, where in each step you can delete one character in either string.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"sea\", \"eat\"\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of given words won't exceed 500.</li>\r\n<li>Characters in given words can only be lower-case letters.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd&nbsp;<em>word1&nbsp;</em>\u548c&nbsp;<em>word2</em>\uff0c\u627e\u5230\u4f7f\u5f97&nbsp;<em>word1&nbsp;</em>\u548c&nbsp;<em>word2&nbsp;</em>\u76f8\u540c\u6240\u9700\u7684\u6700\u5c0f\u6b65\u6570\uff0c\u6bcf\u6b65\u53ef\u4ee5\u5220\u9664\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;sea&quot;, &quot;eat&quot;\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u7b2c\u4e00\u6b65\u5c06&quot;sea&quot;\u53d8\u4e3a&quot;ea&quot;\uff0c\u7b2c\u4e8c\u6b65\u5c06&quot;eat&quot;\u53d8\u4e3a&quot;ea&quot;\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u5355\u8bcd\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7500\u3002</li>\n\t<li>\u7ed9\u5b9a\u5355\u8bcd\u4e2d\u7684\u5b57\u7b26\u53ea\u542b\u6709\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n",
        "titleZh": "\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5220\u9664\u64cd\u4f5c",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon"
        ]
    },
    {
        "leetId": "587",
        "link": "erect-the-fence",
        "title": "Erect the Fence",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "30.0%",
        "questionDescription": "<p>There are some trees, where each tree is represented by (x,y) coordinate in a two-dimensional garden. Your job is to fence the entire garden using the <b>minimum length</b> of rope as it is expensive. The garden is well fenced only if all the trees are enclosed. Your task is to help find the coordinates of trees which are exactly located on the fence perimeter.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\r\n<b>Output:</b> [[1,1],[2,0],[4,2],[3,3],[2,4]]\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/erect_the_fence_1.png\" style=\"width: 100%; max-width: 320px\" />\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [[1,2],[2,2],[4,2]]\r\n<b>Output:</b> [[1,2],[2,2],[4,2]]\r\n<b>Explanation:</b>\r\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/erect_the_fence_2.png\" style=\"width: 100%; max-width: 320px\" />\r\nEven you only have trees in a line, you need to use rope to enclose them. \r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>All trees should be enclosed together. You cannot cut the rope to enclose trees that will separate them in more than one group.</li>\r\n\t<li>All input integers will range from 0 to 100.</li>\r\n\t<li>The garden has at least one tree.</li>\r\n\t<li>All coordinates are distinct.</li>\r\n\t<li>Input points have <b>NO</b> order. No order required for output.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e00\u4e2a\u4e8c\u7ef4\u7684\u82b1\u56ed\u4e2d\uff0c\u6709\u4e00\u4e9b\u7528 (x, y) \u5750\u6807\u8868\u793a\u7684\u6811\u3002\u7531\u4e8e\u5b89\u88c5\u8d39\u7528\u5341\u5206\u6602\u8d35\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u5148\u7528<strong>\u6700\u77ed</strong>\u7684\u7ef3\u5b50\u56f4\u8d77\u6240\u6709\u7684\u6811\u3002\u53ea\u6709\u5f53\u6240\u6709\u7684\u6811\u90fd\u88ab\u7ef3\u5b50\u5305\u56f4\u65f6\uff0c\u82b1\u56ed\u624d\u80fd\u56f4\u597d\u6805\u680f\u3002\u4f60\u9700\u8981\u627e\u5230\u6b63\u597d\u4f4d\u4e8e\u6805\u680f\u8fb9\u754c\u4e0a\u7684\u6811\u7684\u5750\u6807\u3002</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u793a\u4f8b 1:</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165:</strong> [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\r\n<strong>\u8f93\u51fa:</strong> [[1,1],[2,0],[4,2],[3,3],[2,4]]\r\n<strong>\u89e3\u91ca:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/erect_the_fence_1.png\" style=\"width: 100%; max-width: 320px\">\r\n</pre>\r\n\r\n<p><strong>\u793a\u4f8b 2:</strong></p>\r\n\r\n<pre><strong>\u8f93\u5165:</strong> [[1,2],[2,2],[4,2]]\r\n<strong>\u8f93\u51fa:</strong> [[1,2],[2,2],[4,2]]\r\n<strong>\u89e3\u91ca:</strong>\r\n<img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/erect_the_fence_2.png\" style=\"width: 100%; max-width: 320px\">\r\n\u5373\u4f7f\u6811\u90fd\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\uff0c\u4f60\u4e5f\u9700\u8981\u5148\u7528\u7ef3\u5b50\u5305\u56f4\u5b83\u4eec\u3002\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u6ce8\u610f:</strong></p>\r\n\r\n<ol>\r\n\t<li>\u6240\u6709\u7684\u6811\u5e94\u5f53\u88ab\u56f4\u5728\u4e00\u8d77\u3002\u4f60\u4e0d\u80fd\u526a\u65ad\u7ef3\u5b50\u6765\u5305\u56f4\u6811\u6216\u8005\u628a\u6811\u5206\u6210\u4e00\u7ec4\u4ee5\u4e0a\u3002</li>\r\n\t<li>\u8f93\u5165\u7684\u6574\u6570\u5728 0 \u5230 100 \u4e4b\u95f4\u3002</li>\r\n\t<li>\u82b1\u56ed\u81f3\u5c11\u6709\u4e00\u68f5\u6811\u3002</li>\r\n\t<li>\u6240\u6709\u6811\u7684\u5750\u6807\u90fd\u662f\u4e0d\u540c\u7684\u3002</li>\r\n\t<li>\u8f93\u5165\u7684\u70b9<strong>\u6ca1\u6709</strong>\u987a\u5e8f\u3002\u8f93\u51fa\u987a\u5e8f\u4e5f\u6ca1\u6709\u8981\u6c42\u3002</li>\r\n</ol>",
        "titleZh": "\u5b89\u88c5\u6805\u680f",
        "tags": [
            {
                "tag": "Geometry",
                "link": "geometry",
                "tagZh": "\u51e0\u4f55"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "588",
        "link": "design-in-memory-file-system",
        "title": "Design In-Memory File System",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "39",
        "questionDescription": "\n<p>Design an in-memory file system to simulate the following functions:</p>\n<p><code>ls</code>: Given a path in string format. If it is a file path, return a list that only contains this file's name. If it is a directory path, return the list of file and directory names <b>in this directory</b>. Your output (file and directory names together) should in <b>lexicographic order</b>.</p>\n<p><code>mkdir</code>: Given a <b>directory path</b> that does not exist, you should make a new directory according to the path. If the middle directories in the path don't exist either, you should create them as well. This function has void return type. </p>\n<p><code>addContentToFile</code>: Given a <b>file path</b> and <b>file content</b> in string format. If the file doesn't exist, you need to create that file containing given content. If the file already exists, you need to <b>append</b> given content to original content. This function has void return type.</p>\n<p><code>readContentFromFile</code>: Given a <b>file path</b>, return its <b>content</b> in string format.</p>\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b> \n[\"FileSystem\",\"ls\",\"mkdir\",\"addContentToFile\",\"ls\",\"readContentFromFile\"]\n[[],[\"/\"],[\"/a/b/c\"],[\"/a/b/c/d\",\"hello\"],[\"/\"],[\"/a/b/c/d\"]]\n<b>Output:</b>\n[null,[],null,null,[\"a\"],\"hello\"]\n<b>Explanation:</b>\n<img alt=\"filesystem\" src=\"https://leetcode.com/static/images/problemset/filesystem.png\" width=\"66%\"/>\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>You can assume all file or directory paths are absolute paths which begin with <code>/</code> and do not end with <code>/</code> except that the path is just <code>\"/\"</code>.</li>\n<li>You can assume that all operations will be passed valid parameters and users will not attempt to retrieve file content or list a directory or file that does not exist.</li>\n<li>You can assume that all directory names and file names only contain lower-case letters, and same names won't exist in the same directory.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Design an in-memory file system to simulate the following functions:</p>\n<p><code>ls</code>: Given a path in string format. If it is a file path, return a list that only contains this file's name. If it is a directory path, return the list of file and directory names <b>in this directory</b>. Your output (file and directory names together) should in <b>lexicographic order</b>.</p>\n<p><code>mkdir</code>: Given a <b>directory path</b> that does not exist, you should make a new directory according to the path. If the middle directories in the path don't exist either, you should create them as well. This function has void return type. </p>\n<p><code>addContentToFile</code>: Given a <b>file path</b> and <b>file content</b> in string format. If the file doesn't exist, you need to create that file containing given content. If the file already exists, you need to <b>append</b> given content to original content. This function has void return type.</p>\n<p><code>readContentFromFile</code>: Given a <b>file path</b>, return its <b>content</b> in string format.</p>\n<p><b>Example:</b><br/>\n</p><pre><b>Input:</b> \n[\"FileSystem\",\"ls\",\"mkdir\",\"addContentToFile\",\"ls\",\"readContentFromFile\"]\n[[],[\"/\"],[\"/a/b/c\"],[\"/a/b/c/d\",\"hello\"],[\"/\"],[\"/a/b/c/d\"]]\n<b>Output:</b>\n[null,[],null,null,[\"a\"],\"hello\"]\n<b>Explanation:</b>\n<img alt=\"filesystem\" src=\"https://leetcode.com/static/images/problemset/filesystem.png\" width=\"66%\"/>\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>You can assume all file or directory paths are absolute paths which begin with <code>/</code> and do not end with <code>/</code> except that the path is just <code>\"/\"</code>.</li>\n<li>You can assume that all operations will be passed valid parameters and users will not attempt to retrieve file content or list a directory or file that does not exist.</li>\n<li>You can assume that all directory names and file names only contain lower-case letters, and same names won't exist in the same directory.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Amazon",
            "Airbnb",
            "Baidu"
        ]
    },
    {
        "leetId": "589",
        "link": "n-ary-tree-preorder-traversal",
        "title": "N-ary Tree Preorder Traversal",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "66.7%",
        "questionDescription": "<p>Given an n-ary tree, return the <i>preorder</i> traversal of its nodes&#39; values.</p>\r\n\r\n<p>For example, given a <code>3-ary</code> tree:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Return its preorder traversal as: <code>[1,3,5,6,2,4]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<p>Recursive solution is trivial, could you do it iteratively?</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a N \u53c9\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684<em>\u524d\u5e8f\u904d\u5386</em>\u3002</p>\r\n\r\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<code>3\u53c9\u6811</code>&nbsp;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>\u8fd4\u56de\u5176\u524d\u5e8f\u904d\u5386: <code>[1,3,5,6,2,4]</code>\u3002</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u8bf4\u660e:&nbsp;</strong>\u9012\u5f52\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fed\u4ee3\u6cd5\u5b8c\u6210\u6b64\u9898\u5417?</p>",
        "titleZh": "N\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ]
    },
    {
        "leetId": "590",
        "link": "n-ary-tree-postorder-traversal",
        "title": "N-ary Tree Postorder Traversal",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "66.7%",
        "questionDescription": "<p>Given an n-ary tree, return the <i>postorder</i> traversal of its nodes&#39; values.</p>\r\n\r\n<p>For example, given a <code>3-ary</code> tree:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Return its postorder traversal as: <code>[5,6,3,2,4,1]</code>.</p>\r\n&nbsp;\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<p>Recursive solution is trivial, could you do it iteratively?</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a N \u53c9\u6811\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684<em>\u540e\u5e8f\u904d\u5386</em>\u3002</p>\r\n\r\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<code>3\u53c9\u6811</code>&nbsp;:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>\u8fd4\u56de\u5176\u540e\u5e8f\u904d\u5386: <code>[5,6,3,2,4,1]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>\u8bf4\u660e:</strong>&nbsp;\u9012\u5f52\u6cd5\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fed\u4ee3\u6cd5\u5b8c\u6210\u6b64\u9898\u5417?</p>",
        "titleZh": "N\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ]
    },
    {
        "leetId": "591",
        "link": "tag-validator",
        "title": "Tag Validator",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "26.0%",
        "questionDescription": "<p>Given a string representing a code snippet, you need to implement a tag validator to parse the code and return whether it is valid. A code snippet is valid if all the following rules hold:<p>\r\n<ol>\r\n<li>The code must be wrapped in a <b>valid closed tag</b>. Otherwise, the code is invalid.</li>\r\n<li>A <b>closed tag</b> (not necessarily valid) has exactly the following format : <code>&lt;TAG_NAME&gt;TAG_CONTENT&lt;/TAG_NAME&gt;</code>. Among them, <code>&lt;TAG_NAME&gt;</code> is the start tag, and <code>&lt;/TAG_NAME&gt;</code> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is <b>valid</b> if and only if the TAG_NAME and TAG_CONTENT are valid.</li>\r\n<li>A <b>valid</b> <code>TAG_NAME</code> only contain <b>upper-case letters</b>, and has length in range [1,9]. Otherwise, the <code>TAG_NAME</code> is <b>invalid</b>.</li>\r\n<li>A <b>valid</b> <code>TAG_CONTENT</code> may contain other <b>valid closed tags</b>, <b>cdata</b> and any characters (see note1) <b>EXCEPT</b> unmatched <code>&lt;</code>, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the <code>TAG_CONTENT</code> is <b>invalid</b>.</li>\r\n<li>A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.</li>\r\n<li>A <code>&lt;</code> is unmatched if you cannot find a subsequent <code>></code>. And when you find a <code>&lt;</code> or <code>&lt;/</code>, all the subsequent characters until the next <code>></code> should be parsed as TAG_NAME  (not necessarily valid).</li>\r\n<li>The cdata has the following format : <code>&lt;![CDATA[CDATA_CONTENT]]&gt;</code>. The range of <code>CDATA_CONTENT</code> is defined as the characters between <code>&lt;![CDATA[</code> and the <b>first subsequent</b> <code>]]></code>. </li>\r\n<li><code>CDATA_CONTENT</code> may contain <b>any characters</b>. The function of cdata is to forbid the validator to parse <code>CDATA_CONTENT</code>, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as <b>regular characters</b>. </li>\r\n</ol>\r\n\r\n<p><b>Valid Code Examples:</b><br />\r\n<pre>\r\n<b>Input:</b> \"&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;\"<br />\r\n<b>Output:</b> True<br />\r\n<b>Explanation:</b> <br>\r\nThe code is wrapped in a closed tag : &lt;DIV> and &lt;/DIV>. <br>\r\nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. <br>\r\nAlthough CDATA_CONTENT has unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as tag.<br>\r\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.<br />\r\n\r\n<b>Input:</b> \"&lt;DIV>>>  ![cdata[]] &lt;![CDATA[&lt;div>]>]]>]]>>]&lt;/DIV>\"<br />\r\n<b>Output:</b> True<br />\r\n<b>Explanation:</b><br />\r\nWe first separate the code into : start_tag|tag_content|end_tag.<br />\r\nstart_tag -> <b>\"&lt;DIV&gt;\"</b><br />\r\nend_tag -> <b>\"&lt;/DIV>\"</b><br />\r\ntag_content could also be separated into : text1|cdata|text2.<br />\r\ntext1 -> <b>\">>  ![cdata[]] \"</b><br />\r\ncdata -> <b>\"&lt;![CDATA[&lt;div>]>]]>\"</b>, where the CDATA_CONTENT is <b>\"&lt;div>]>\"</b><br />\r\ntext2 -> <b>\"]]>>]\"</b><br />\r\n\r\nThe reason why start_tag is NOT <b>\"&lt;DIV>>>\"</b> is because of the rule 6.\r\nThe reason why cdata is NOT <b>\"&lt;![CDATA[&lt;div>]>]]>]]>\"</b> is because of the rule 7.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Invalid Code Examples:</b><br />\r\n<pre>\r\n<b>Input:</b> \"&lt;A>  &lt;B> &lt;/A>   &lt;/B>\"\r\n<b>Output:</b> False\r\n<b>Explanation:</b> Unbalanced. If \"&lt;A>\" is closed, then \"&lt;B>\" must be unmatched, and vice versa.\r\n\r\n<b>Input:</b> \"&lt;DIV&gt;  div tag is not closed  &lt;DIV&gt;\"\r\n<b>Output:</b> False\r\n\r\n<b>Input:</b> \"&lt;DIV&gt;  unmatched &lt  &lt;/DIV&gt;\"\r\n<b>Output:</b> False\r\n\r\n<b>Input:</b> \"&lt;DIV&gt; closed tags with invalid tag name  &lt;b>123&lt;/b> &lt;/DIV&gt;\"\r\n<b>Output:</b> False\r\n\r\n<b>Input:</b> \"&lt;DIV&gt; unmatched tags with invalid tag name  &lt;/1234567890> and &lt;CDATA[[]]>  &lt;/DIV&gt;\"\r\n<b>Output:</b> False\r\n\r\n<b>Input:</b> \"&lt;DIV&gt;  unmatched start tag &lt;B>  and unmatched end tag &lt;/C>  &lt;/DIV&gt;\"\r\n<b>Output:</b> False\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>For simplicity, you could assume the input code (including the <b>any characters</b> mentioned above) only contain <code>letters</code>, <code>digits</code>, <code>'&lt;'</code>,<code>'>'</code>,<code>'/'</code>,<code>'!'</code>,<code>'['</code>,<code>']'</code> and <code>' '</code>.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u793a\u4ee3\u7801\u7247\u6bb5\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u9a8c\u8bc1\u5668\u6765\u89e3\u6790\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5e76\u8fd4\u56de\u5b83\u662f\u5426\u5408\u6cd5\u3002\u5408\u6cd5\u7684\u4ee3\u7801\u7247\u6bb5\u9700\u8981\u9075\u5b88\u4ee5\u4e0b\u7684\u6240\u6709\u89c4\u5219\uff1a</p>\n\n<ol>\n\t<li>\u4ee3\u7801\u5fc5\u987b\u88ab<strong>\u5408\u6cd5\u7684\u95ed\u5408\u6807\u7b7e</strong>\u5305\u56f4\u3002\u5426\u5219\uff0c\u4ee3\u7801\u662f\u65e0\u6548\u7684\u3002</li>\n\t<li><strong>\u95ed\u5408\u6807\u7b7e</strong>\uff08\u4e0d\u4e00\u5b9a\u5408\u6cd5\uff09\u8981\u4e25\u683c\u7b26\u5408\u683c\u5f0f\uff1a<code>&lt;TAG_NAME&gt;TAG_CONTENT&lt;/TAG_NAME&gt;</code>\u3002\u5176\u4e2d\uff0c<code>&lt;TAG_NAME&gt;</code>\u662f\u8d77\u59cb\u6807\u7b7e\uff0c<code>&lt;/TAG_NAME&gt;</code>\u662f\u7ed3\u675f\u6807\u7b7e\u3002\u8d77\u59cb\u548c\u7ed3\u675f\u6807\u7b7e\u4e2d\u7684 TAG_NAME \u5e94\u5f53\u76f8\u540c\u3002\u5f53\u4e14\u4ec5\u5f53&nbsp;TAG_NAME \u548c TAG_CONTENT \u90fd\u662f\u5408\u6cd5\u7684\uff0c\u95ed\u5408\u6807\u7b7e\u624d\u662f<strong>\u5408\u6cd5\u7684</strong>\u3002</li>\n\t<li><strong>\u5408\u6cd5\u7684</strong>&nbsp;<code>TAG_NAME</code>&nbsp;\u4ec5\u542b\u6709<strong>\u5927\u5199\u5b57\u6bcd</strong>\uff0c\u957f\u5ea6\u5728\u8303\u56f4 [1,9] \u4e4b\u95f4\u3002\u5426\u5219\uff0c\u8be5&nbsp;<code>TAG_NAME</code>&nbsp;\u662f<strong>\u4e0d\u5408\u6cd5\u7684</strong>\u3002</li>\n\t<li><strong>\u5408\u6cd5\u7684</strong>&nbsp;<code>TAG_CONTENT</code>&nbsp;\u53ef\u4ee5\u5305\u542b\u5176\u4ed6<strong>\u5408\u6cd5\u7684\u95ed\u5408\u6807\u7b7e</strong>\uff0c<strong>cdata</strong>&nbsp;\uff08\u8bf7\u53c2\u8003\u89c4\u52197\uff09\u548c\u4efb\u610f\u5b57\u7b26\uff08\u6ce8\u610f\u53c2\u8003\u89c4\u52191\uff09<strong>\u9664\u4e86</strong>\u4e0d\u5339\u914d\u7684<code>&lt;</code>\u3001\u4e0d\u5339\u914d\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u6807\u7b7e\u3001\u4e0d\u5339\u914d\u7684\u6216\u5e26\u6709\u4e0d\u5408\u6cd5 TAG_NAME \u7684\u95ed\u5408\u6807\u7b7e\u3002\u5426\u5219\uff0c<code>TAG_CONTENT</code>&nbsp;\u662f<strong>\u4e0d\u5408\u6cd5\u7684</strong>\u3002</li>\n\t<li>\u4e00\u4e2a\u8d77\u59cb\u6807\u7b7e\uff0c\u5982\u679c\u6ca1\u6709\u5177\u6709\u76f8\u540c&nbsp;TAG_NAME \u7684\u7ed3\u675f\u6807\u7b7e\u4e0e\u4e4b\u5339\u914d\uff0c\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u53cd\u4e4b\u4ea6\u7136\u3002\u4e0d\u8fc7\uff0c\u4f60\u4e5f\u9700\u8981\u8003\u8651\u6807\u7b7e\u5d4c\u5957\u7684\u95ee\u9898\u3002</li>\n\t<li>\u4e00\u4e2a<code>&lt;</code>\uff0c\u5982\u679c\u4f60\u627e\u4e0d\u5230\u4e00\u4e2a\u540e\u7eed\u7684<code>&gt;</code>\u4e0e\u4e4b\u5339\u914d\uff0c\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u5e76\u4e14\u5f53\u4f60\u627e\u5230\u4e00\u4e2a<code>&lt;</code>\u6216<code>&lt;/</code>\u65f6\uff0c\u6240\u6709\u76f4\u5230\u4e0b\u4e00\u4e2a<code>&gt;</code>\u7684\u524d\u7684\u5b57\u7b26\uff0c\u90fd\u5e94\u5f53\u88ab\u89e3\u6790\u4e3a&nbsp;TAG_NAME\uff08\u4e0d\u4e00\u5b9a\u5408\u6cd5\uff09\u3002</li>\n\t<li>cdata \u6709\u5982\u4e0b\u683c\u5f0f\uff1a<code>&lt;![CDATA[CDATA_CONTENT]]&gt;</code>\u3002<code>CDATA_CONTENT</code>&nbsp;\u7684\u8303\u56f4\u88ab\u5b9a\u4e49\u6210&nbsp;<code>&lt;![CDATA[</code>&nbsp;\u548c<strong>\u540e\u7eed\u7684\u7b2c\u4e00\u4e2a</strong>&nbsp;<code>]]&gt;</code>\u4e4b\u95f4\u7684\u5b57\u7b26\u3002</li>\n\t<li><code>CDATA_CONTENT</code>&nbsp;\u53ef\u4ee5\u5305\u542b<strong>\u4efb\u610f\u5b57\u7b26</strong>\u3002cdata \u7684\u529f\u80fd\u662f\u963b\u6b62\u9a8c\u8bc1\u5668\u89e3\u6790<code>CDATA_CONTENT</code>\uff0c\u6240\u4ee5\u5373\u4f7f\u5176\u4e2d\u6709\u4e00\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u89e3\u6790\u4e3a\u6807\u7b7e\uff08\u65e0\u8bba\u5408\u6cd5\u8fd8\u662f\u4e0d\u5408\u6cd5\uff09\uff0c\u4e5f\u5e94\u8be5\u5c06\u5b83\u4eec\u89c6\u4e3a<strong>\u5e38\u89c4\u5b57\u7b26</strong>\u3002</li>\n</ol>\n\n<p><strong>\u5408\u6cd5\u4ee3\u7801\u7684\u4f8b\u5b50:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;&quot;\n\n<strong>\u8f93\u51fa:</strong> True\n\n<strong>\u89e3\u91ca:</strong> \n\n\u4ee3\u7801\u88ab\u5305\u542b\u5728\u4e86\u95ed\u5408\u7684\u6807\u7b7e\u5185\uff1a &lt;DIV&gt; \u548c &lt;/DIV&gt; \u3002\n\nTAG_NAME \u662f\u5408\u6cd5\u7684\uff0cTAG_CONTENT \u5305\u542b\u4e86\u4e00\u4e9b\u5b57\u7b26\u548c cdata \u3002 \n\n\u5373\u4f7f CDATA_CONTENT \u542b\u6709\u4e0d\u5339\u914d\u7684\u8d77\u59cb\u6807\u7b7e\u548c\u4e0d\u5408\u6cd5\u7684 TAG_NAME\uff0c\u5b83\u5e94\u8be5\u88ab\u89c6\u4e3a\u666e\u901a\u7684\u6587\u672c\uff0c\u800c\u4e0d\u662f\u6807\u7b7e\u3002\n\n\u6240\u4ee5 TAG_CONTENT \u662f\u5408\u6cd5\u7684\uff0c\u56e0\u6b64\u4ee3\u7801\u662f\u5408\u6cd5\u7684\u3002\u6700\u7ec8\u8fd4\u56deTrue\u3002\n\n\n<strong>\u8f93\u5165:</strong> &quot;&lt;DIV&gt;&gt;&gt;  ![cdata[]] &lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&gt;]&lt;/DIV&gt;&quot;\n\n<strong>\u8f93\u51fa:</strong> True\n\n<strong>\u89e3\u91ca:</strong>\n\n\u6211\u4eec\u9996\u5148\u5c06\u4ee3\u7801\u5206\u5272\u4e3a\uff1a start_tag|tag_content|end_tag \u3002\n\nstart_tag -&gt; <strong>&quot;&lt;DIV&gt;&quot;</strong>\n\nend_tag -&gt; <strong>&quot;&lt;/DIV&gt;&quot;</strong>\n\ntag_content \u4e5f\u53ef\u88ab\u5206\u5272\u4e3a\uff1a text1|cdata|text2 \u3002\n\ntext1 -&gt; <strong>&quot;&gt;&gt;  ![cdata[]] &quot;</strong>\n\ncdata -&gt; <strong>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;&quot;</strong> \uff0c\u5176\u4e2d CDATA_CONTENT \u4e3a <strong>&quot;&lt;div&gt;]&gt;&quot;</strong>\n\ntext2 -&gt; <strong>&quot;]]&gt;&gt;]&quot;</strong>\n\n\nstart_tag <strong>\u4e0d</strong>\u662f <strong>&quot;&lt;DIV&gt;&gt;&gt;&quot;</strong> \u7684\u539f\u56e0\u53c2\u7167\u89c4\u5219 6 \u3002\ncdata <strong>\u4e0d</strong>\u662f <strong>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&quot;</strong> \u7684\u539f\u56e0\u53c2\u7167\u89c4\u5219 7 \u3002\n</pre>\n\n<p><strong>\u4e0d\u5408\u6cd5\u4ee3\u7801\u7684\u4f8b\u5b50:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;&lt;A&gt;  &lt;B&gt; &lt;/A&gt;   &lt;/B&gt;&quot;\n<strong>\u8f93\u51fa:</strong> False\n<strong>\u89e3\u91ca:</strong> \u4e0d\u5408\u6cd5\u3002\u5982\u679c &quot;&lt;A&gt;&quot; \u662f\u95ed\u5408\u7684\uff0c\u90a3\u4e48 &quot;&lt;B&gt;&quot; \u4e00\u5b9a\u662f\u4e0d\u5339\u914d\u7684\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\n\n<strong>\u8f93\u5165:</strong> &quot;&lt;DIV&gt;  div tag is not closed  &lt;DIV&gt;&quot;\n<strong>\u8f93\u51fa:</strong> False\n\n<strong>\u8f93\u5165:</strong> &quot;&lt;DIV&gt;  unmatched &lt;  &lt;/DIV&gt;&quot;\n<strong>\u8f93\u51fa:</strong> False\n\n<strong>\u8f93\u5165:</strong> &quot;&lt;DIV&gt; closed tags with invalid tag name  &lt;b&gt;123&lt;/b&gt; &lt;/DIV&gt;&quot;\n<strong>\u8f93\u51fa:</strong> False\n\n<strong>\u8f93\u5165:</strong> &quot;&lt;DIV&gt; unmatched tags with invalid tag name  &lt;/1234567890&gt; and &lt;CDATA[[]]&gt;  &lt;/DIV&gt;&quot;\n<strong>\u8f93\u51fa:</strong> False\n\n<strong>\u8f93\u5165:</strong> &quot;&lt;DIV&gt;  unmatched start tag &lt;B&gt;  and unmatched end tag &lt;/C&gt;  &lt;/DIV&gt;&quot;\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u4e3a\u7b80\u660e\u8d77\u89c1\uff0c\u4f60\u53ef\u4ee5\u5047\u8bbe\u8f93\u5165\u7684\u4ee3\u7801\uff08\u5305\u62ec\u63d0\u5230\u7684<strong>\u4efb\u610f\u5b57\u7b26</strong>\uff09\u53ea\u5305\u542b<code>\u6570\u5b57</code>, <font color=\"#c7254e\" face=\"Menlo, Monaco, Consolas, Courier New, monospace\"><span style=\"background-color:#f9f2f4; font-size:12.6px\">\u5b57\u6bcd</span></font>, <code>&#39;&lt;&#39;</code>,<code>&#39;&gt;&#39;</code>,<code>&#39;/&#39;</code>,<code>&#39;!&#39;</code>,<code>&#39;[&#39;</code>,<code>&#39;]&#39;</code>\u548c<code>&#39; &#39;</code>\u3002</li>\n</ol>\n",
        "titleZh": "\u6807\u7b7e\u9a8c\u8bc1\u5668",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Microsoft"
        ]
    },
    {
        "leetId": "592",
        "link": "fraction-addition-and-subtraction",
        "title": "Fraction Addition and Subtraction",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "45.4%",
        "questionDescription": "<p>Given a string representing an expression of fraction addition and subtraction, you need to return the calculation result in string format. The final result should be <a href = \"https://en.wikipedia.org/wiki/Irreducible_fraction\">irreducible fraction</a>. If your final result is an integer, say <code>2</code>, you need to change it to the format of fraction that has denominator <code>1</code>. So in this case, <code>2</code> should be converted to <code>2/1</code>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\"-1/2+1/2\"\r\n<b>Output:</b> \"0/1\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b>\"-1/2+1/2+1/3\"\r\n<b>Output:</b> \"1/3\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b>\"1/3-1/2\"\r\n<b>Output:</b> \"-1/6\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 4:</b><br />\r\n<pre>\r\n<b>Input:</b>\"5/3+1/3\"\r\n<b>Output:</b> \"2/1\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The input string only contains <code>'0'</code> to <code>'9'</code>, <code>'/'</code>, <code>'+'</code> and <code>'-'</code>. So does the output.</li>\r\n<li>Each fraction (input and output) has format <code>\u00b1numerator/denominator</code>. If the first input fraction or the output is positive, then <code>'+'</code> will be omitted.</li>\r\n<li>The input only contains valid <b>irreducible fractions</b>, where the <b>numerator</b> and <b>denominator</b> of each fraction will always be in the range [1,10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.</li> \r\n<li>The number of given fractions will be in the range [1,10].</li>\r\n<li>The numerator and denominator of the <b>final result</b> are guaranteed to be valid and in the range of 32-bit int.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u793a\u5206\u6570\u52a0\u51cf\u8fd0\u7b97\u8868\u8fbe\u5f0f\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u5f62\u5f0f\u7684\u8ba1\u7b97\u7ed3\u679c\u3002&nbsp;\u8fd9\u4e2a\u7ed3\u679c\u5e94\u8be5\u662f\u4e0d\u53ef\u7ea6\u5206\u7684\u5206\u6570\uff0c\u5373<a href=\"https://baike.baidu.com/item/%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0\" target=\"_blank\">\u6700\u7b80\u5206\u6570</a>\u3002&nbsp;\u5982\u679c\u6700\u7ec8\u7ed3\u679c\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u4f8b\u5982&nbsp;<code>2</code>\uff0c\u4f60\u9700\u8981\u5c06\u5b83\u8f6c\u6362\u6210\u5206\u6570\u5f62\u5f0f\uff0c\u5176\u5206\u6bcd\u4e3a&nbsp;<code>1</code>\u3002\u6240\u4ee5\u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d, <code>2</code>&nbsp;\u5e94\u8be5\u88ab\u8f6c\u6362\u4e3a&nbsp;<code>2/1</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>&quot;-1/2+1/2&quot;\n<strong>\u8f93\u51fa:</strong> &quot;0/1&quot;\n</pre>\n\n<p><strong>&nbsp;\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>&quot;-1/2+1/2+1/3&quot;\n<strong>\u8f93\u51fa:</strong> &quot;1/3&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>&quot;1/3-1/2&quot;\n<strong>\u8f93\u51fa:</strong> &quot;-1/6&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>&quot;5/3+1/3&quot;\n<strong>\u8f93\u51fa:</strong> &quot;2/1&quot;\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u548c\u8f93\u51fa\u5b57\u7b26\u4e32\u53ea\u5305\u542b&nbsp;<code>&#39;0&#39;</code> \u5230&nbsp;<code>&#39;9&#39;</code>&nbsp;\u7684\u6570\u5b57\uff0c\u4ee5\u53ca&nbsp;<code>&#39;/&#39;</code>, <code>&#39;+&#39;</code> \u548c&nbsp;<code>&#39;-&#39;</code>\u3002&nbsp;</li>\n\t<li>\u8f93\u5165\u548c\u8f93\u51fa\u5206\u6570\u683c\u5f0f\u5747\u4e3a&nbsp;<code>&plusmn;\u5206\u5b50/\u5206\u6bcd</code>\u3002\u5982\u679c\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u5206\u6570\u6216\u8005\u8f93\u51fa\u7684\u5206\u6570\u662f\u6b63\u6570\uff0c\u5219&nbsp;<code>&#39;+&#39;</code>&nbsp;\u4f1a\u88ab\u7701\u7565\u6389\u3002</li>\n\t<li>\u8f93\u5165\u53ea\u5305\u542b\u5408\u6cd5\u7684<strong>\u6700\u7b80\u5206\u6570</strong>\uff0c\u6bcf\u4e2a\u5206\u6570\u7684<strong>\u5206\u5b50</strong>\u4e0e<strong>\u5206\u6bcd</strong>\u7684\u8303\u56f4\u662f&nbsp;&nbsp;[1,10]\u3002&nbsp;\u5982\u679c\u5206\u6bcd\u662f1\uff0c\u610f\u5473\u7740\u8fd9\u4e2a\u5206\u6570\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6574\u6570\u3002</li>\n\t<li>\u8f93\u5165\u7684\u5206\u6570\u4e2a\u6570\u8303\u56f4\u662f [1,10]\u3002</li>\n\t<li><strong>\u6700\u7ec8\u7ed3\u679c</strong>\u7684\u5206\u5b50\u4e0e\u5206\u6bcd\u4fdd\u8bc1\u662f 32 \u4f4d\u6574\u6570\u8303\u56f4\u5185\u7684\u6709\u6548\u6574\u6570\u3002</li>\n</ol>\n",
        "titleZh": "\u5206\u6570\u52a0\u51cf\u8fd0\u7b97",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Goldman Sachs",
            "IXL"
        ]
    },
    {
        "leetId": "593",
        "link": "valid-square",
        "title": "Valid Square",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "37.9%",
        "questionDescription": "<p>Given the coordinates of four points in 2D space, return whether the four points could construct a square.</p>\r\n\r\n<p>The coordinate (x,y) of a point is represented by an integer array with two integers.</p>\r\n\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\r\n<b>Output:</b> True\r\n</pre>\r\n</p>\r\n\r\n<p> Note: \r\n<ol>\r\n<li>All the input integers are in the range [-10000, 10000].</li>\r\n<li>A valid square has four equal sides with positive length and four equal angles (90-degree angles).</li>\r\n<li>Input points have no order.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\u56db\u70b9\u7684\u5750\u6807\uff0c\u8fd4\u56de\u56db\u70b9\u662f\u5426\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u6b63\u65b9\u5f62\u3002</p>\n\n<p>\u4e00\u4e2a\u70b9\u7684\u5750\u6807\uff08x\uff0cy\uff09\u7531\u4e00\u4e2a\u6709\u4e24\u4e2a\u6574\u6570\u7684\u6574\u6570\u6570\u7ec4\u8868\u793a\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u6240\u6709\u8f93\u5165\u6574\u6570\u90fd\u5728 [-10000\uff0c10000] \u8303\u56f4\u5185\u3002</li>\n\t<li>\u4e00\u4e2a\u6709\u6548\u7684\u6b63\u65b9\u5f62\u6709\u56db\u4e2a\u7b49\u957f\u7684\u6b63\u957f\u548c\u56db\u4e2a\u7b49\u89d2\uff0890\u5ea6\u89d2\uff09\u3002</li>\n\t<li>\u8f93\u5165\u70b9\u6ca1\u6709\u987a\u5e8f\u3002</li>\n</ol>\n",
        "titleZh": "\u6709\u6548\u7684\u6b63\u65b9\u5f62",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Yelp",
            "Pure Storage"
        ]
    },
    {
        "leetId": "594",
        "link": "longest-harmonious-subsequence",
        "title": "Longest Harmonious Subsequence",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "40.0%",
        "questionDescription": "<p>We define a harmonious array is an array where the difference between its maximum value and its minimum value is <b>exactly</b> 1.</p>\r\n\r\n<p>Now, given an integer array, you need to find the length of its longest harmonious subsequence among all its possible <a href=\"https://en.wikipedia.org/wiki/Subsequence\">subsequences</a>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,3,2,2,5,2,3,7]\r\n<b>Output:</b> 5\r\n<b>Explanation:</b> The longest harmonious subsequence is [3,2,2,2,3].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe length of the input array will not exceed 20,000.\r\n</p>\r\n\r\n",
        "questionDescriptionZh": "<p>\u548c\u8c10\u6570\u7ec4\u662f\u6307\u4e00\u4e2a\u6570\u7ec4\u91cc\u5143\u7d20\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u522b\u6b63\u597d\u662f1\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728\u6240\u6709\u53ef\u80fd\u7684\u5b50\u5e8f\u5217\u4e2d\u627e\u5230\u6700\u957f\u7684\u548c\u8c10\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,3,2,2,5,2,3,7]\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u539f\u56e0:</strong> \u6700\u957f\u7684\u548c\u8c10\u6570\u7ec4\u662f\uff1a[3,2,2,2,3].\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong> \u8f93\u5165\u7684\u6570\u7ec4\u957f\u5ea6\u6700\u5927\u4e0d\u8d85\u8fc720,000.</p>\n",
        "titleZh": "\u6700\u957f\u548c\u8c10\u5b50\u5e8f\u5217",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "LiveRamp"
        ]
    },
    {
        "leetId": "598",
        "link": "range-addition-ii",
        "title": "Range Addition II",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "47.8%",
        "questionDescription": "<p>Given an m * n matrix <b>M</b> initialized with all <b>0</b>'s and several update operations.</p>\r\n<p>Operations are represented by a 2D array, and each operation is represented by an array with two <b>positive</b> integers <b>a</b> and <b>b</b>, which means <b>M[i][j]</b> should be <b>added by one</b> for all <b>0 <= i < a</b> and <b>0 <= j < b</b>. </p>\r\n<p>You need to count and return the number of maximum integers in the matrix after performing all the operations.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nm = 3, n = 3\r\noperations = [[2,2],[3,3]]\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> \r\nInitially, M = \r\n[[0, 0, 0],\r\n [0, 0, 0],\r\n [0, 0, 0]]\r\n\r\nAfter performing [2,2], M = \r\n[[1, 1, 0],\r\n [1, 1, 0],\r\n [0, 0, 0]]\r\n\r\nAfter performing [3,3], M = \r\n[[2, 2, 1],\r\n [2, 2, 1],\r\n [1, 1, 1]]\r\n\r\nSo the maximum integer in M is 2, and there are four of it in M. So return 4.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The range of m and n is [1,40000].</li>\r\n<li>The range of a is [1,m], and the range of b is [1,n].</li>\r\n<li>The range of operations size won't exceed 10,000.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u521d\u59cb\u5143\u7d20\u5168\u90e8\u4e3a&nbsp;<strong>0</strong>\uff0c\u5927\u5c0f\u4e3a m*n \u7684\u77e9\u9635&nbsp;<strong>M&nbsp;</strong>\u4ee5\u53ca\u5728&nbsp;<strong>M&nbsp;</strong>\u4e0a\u7684\u4e00\u7cfb\u5217\u66f4\u65b0\u64cd\u4f5c\u3002</p>\n\n<p>\u64cd\u4f5c\u7528\u4e8c\u7ef4\u6570\u7ec4\u8868\u793a\uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u64cd\u4f5c\u7528\u4e00\u4e2a\u542b\u6709\u4e24\u4e2a<strong>\u6b63\u6574\u6570&nbsp;a</strong> \u548c <strong>b</strong> \u7684\u6570\u7ec4\u8868\u793a\uff0c\u542b\u4e49\u662f\u5c06\u6240\u6709\u7b26\u5408&nbsp;<strong>0 &lt;= i &lt; a</strong> \u4ee5\u53ca <strong>0 &lt;= j &lt; b</strong> \u7684\u5143\u7d20&nbsp;<strong>M[i][j]&nbsp;</strong>\u7684\u503c\u90fd<strong>\u589e\u52a0 1</strong>\u3002</p>\n\n<p>\u5728\u6267\u884c\u7ed9\u5b9a\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u540e\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u77e9\u9635\u4e2d\u542b\u6709\u6700\u5927\u6574\u6570\u7684\u5143\u7d20\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nm = 3, n = 3\noperations = [[2,2],[3,3]]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \n\u521d\u59cb\u72b6\u6001, M = \n[[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]]\n\n\u6267\u884c\u5b8c\u64cd\u4f5c [2,2] \u540e, M = \n[[1, 1, 0],\n [1, 1, 0],\n [0, 0, 0]]\n\n\u6267\u884c\u5b8c\u64cd\u4f5c [3,3] \u540e, M = \n[[2, 2, 1],\n [2, 2, 1],\n [1, 1, 1]]\n\nM \u4e2d\u6700\u5927\u7684\u6574\u6570\u662f 2, \u800c\u4e14 M \u4e2d\u67094\u4e2a\u503c\u4e3a2\u7684\u5143\u7d20\u3002\u56e0\u6b64\u8fd4\u56de 4\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>m \u548c n \u7684\u8303\u56f4\u662f&nbsp;[1,40000]\u3002</li>\n\t<li>a \u7684\u8303\u56f4\u662f [1,m]\uff0cb \u7684\u8303\u56f4\u662f [1,n]\u3002</li>\n\t<li>\u64cd\u4f5c\u6570\u76ee\u4e0d\u8d85\u8fc7 10000\u3002</li>\n</ol>\n",
        "titleZh": "\u8303\u56f4\u6c42\u548c II",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "IXL"
        ]
    },
    {
        "leetId": "599",
        "link": "minimum-index-sum-of-two-lists",
        "title": "Minimum Index Sum of Two Lists",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "44.7%",
        "questionDescription": "<p>\r\nSuppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings. \r\n</p>\r\n<p>\r\nYou need to help them find out their <b>common interest</b> with the <b>least list index sum</b>. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.\r\n</p>\r\n\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\r\n[\"Piatti\", \"The Grill at Torrey Pines\", \"Hungry Hunter Steakhouse\", \"Shogun\"]\r\n<b>Output:</b> [\"Shogun\"]\r\n<b>Explanation:</b> The only restaurant they both like is \"Shogun\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n[\"Shogun\", \"Tapioca Express\", \"Burger King\", \"KFC\"]\r\n[\"KFC\", \"Shogun\", \"Burger King\"]\r\n<b>Output:</b> [\"Shogun\"]\r\n<b>Explanation:</b> The restaurant they both like and have the least index sum is \"Shogun\" with index sum 1 (0+1).\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of both lists will be in the range of [1, 1000].</li>\r\n<li>The length of strings in both lists will be in the range of [1, 30].</li>\r\n<li>The index is starting from 0 to the list length minus 1.</li>\r\n<li>No duplicates in both lists.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u5047\u8bbeAndy\u548cDoris\u60f3\u5728\u665a\u9910\u65f6\u9009\u62e9\u4e00\u5bb6\u9910\u5385\uff0c\u5e76\u4e14\u4ed6\u4eec\u90fd\u6709\u4e00\u4e2a\u8868\u793a\u6700\u559c\u7231\u9910\u5385\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u9910\u5385\u7684\u540d\u5b57\u7528\u5b57\u7b26\u4e32\u8868\u793a\u3002</p>\n\n<p>\u4f60\u9700\u8981\u5e2e\u52a9\u4ed6\u4eec\u7528<strong>\u6700\u5c11\u7684\u7d22\u5f15\u548c</strong>\u627e\u51fa\u4ed6\u4eec<strong>\u5171\u540c\u559c\u7231\u7684\u9910\u5385</strong>\u3002 \u5982\u679c\u7b54\u6848\u4e0d\u6b62\u4e00\u4e2a\uff0c\u5219\u8f93\u51fa\u6240\u6709\u7b54\u6848\u5e76\u4e14\u4e0d\u8003\u8651\u987a\u5e8f\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u603b\u662f\u5b58\u5728\u4e00\u4e2a\u7b54\u6848\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]\n[&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]\n<strong>\u8f93\u51fa:</strong> [&quot;Shogun&quot;]\n<strong>\u89e3\u91ca:</strong> \u4ed6\u4eec\u552f\u4e00\u5171\u540c\u559c\u7231\u7684\u9910\u5385\u662f&ldquo;Shogun&rdquo;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]\n[&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]\n<strong>\u8f93\u51fa:</strong> [&quot;Shogun&quot;]\n<strong>\u89e3\u91ca:</strong> \u4ed6\u4eec\u5171\u540c\u559c\u7231\u4e14\u5177\u6709\u6700\u5c0f\u7d22\u5f15\u548c\u7684\u9910\u5385\u662f&ldquo;Shogun&rdquo;\uff0c\u5b83\u6709\u6700\u5c0f\u7684\u7d22\u5f15\u548c1(0+1)\u3002\n</pre>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li>\u4e24\u4e2a\u5217\u8868\u7684\u957f\u5ea6\u8303\u56f4\u90fd\u5728&nbsp;[1, 1000]\u5185\u3002</li>\n\t<li>\u4e24\u4e2a\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5c06\u5728[1\uff0c30]\u7684\u8303\u56f4\u5185\u3002</li>\n\t<li>\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0c\u5230\u5217\u8868\u7684\u957f\u5ea6\u51cf1\u3002</li>\n\t<li>\u4e24\u4e2a\u5217\u8868\u90fd\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002</li>\n</ol>\n",
        "titleZh": "\u4e24\u4e2a\u5217\u8868\u7684\u6700\u5c0f\u7d22\u5f15\u603b\u548c",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Yelp"
        ]
    },
    {
        "leetId": "600",
        "link": "non-negative-integers-without-consecutive-ones",
        "title": "Non-negative Integers without Consecutive Ones",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "25.4%",
        "questionDescription": "<p>Given a positive integer n, find the number of <b>non-negative</b> integers less than or equal to n, whose binary representations do NOT contain <b>consecutive ones</b>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> 5\r\n<b>Output:</b> 5\r\n<b>Explanation:</b> \r\nHere are the non-negative integers <= 5 with their corresponding binary representations:\r\n0 : 0\r\n1 : 1\r\n2 : 10\r\n3 : 11\r\n4 : 100\r\n5 : 101\r\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n1 <= n <= 10<sup>9</sup>\r\n</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n\uff0c\u627e\u51fa\u5c0f\u4e8e\u6216\u7b49\u4e8e n \u7684\u975e\u8d1f\u6574\u6570\u4e2d\uff0c\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u4e0d\u5305\u542b&nbsp;<strong>\u8fde\u7eed\u76841&nbsp;</strong>\u7684\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 5\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \n\u4e0b\u9762\u662f\u5e26\u6709\u76f8\u5e94\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570&lt;= 5\uff1a\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\n\u5176\u4e2d\uff0c\u53ea\u6709\u6574\u65703\u8fdd\u53cd\u89c4\u5219\uff08\u6709\u4e24\u4e2a\u8fde\u7eed\u76841\uff09\uff0c\u5176\u4ed65\u4e2a\u6ee1\u8db3\u89c4\u5219\u3002</pre>\n\n<p><strong>\u8bf4\u660e:</strong> 1 &lt;= n &lt;= 10<sup>9</sup></p>\n",
        "titleZh": "\u4e0d\u542b\u8fde\u7eed1\u7684\u975e\u8d1f\u6574\u6570",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Pocket Gems"
        ]
    },
    {
        "leetId": "604",
        "link": "design-compressed-string-iterator",
        "title": "Design Compressed String Iterator",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "9",
        "questionDescription": "\n<p>\nDesign and implement a data structure for a compressed string iterator. It should support the following operations: <code>next</code> and <code>hasNext</code>.\n</p>\n<p>\nThe given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.\n</p>\n<p>\n<code>next()</code> - if the original string still has uncompressed characters, return the next letter; Otherwise return a white space.<br/>\n<code>hasNext()</code> - Judge whether there is any letter needs to be uncompressed.\n</p>\n<p>\n<b>Note:</b><br/>\nPlease remember to <b>RESET</b> your class variables declared in StringIterator, as static/class variables are <b>persisted across multiple test cases</b>. Please see <a href=\"https://leetcode.com/faq/#different-output\">here</a> for more details.\n</p>\n<p><b>Example:</b>\n</p><pre>StringIterator iterator = new StringIterator(\"L1e2t1C1o1d1e1\");\n\niterator.next(); // return 'L'\niterator.next(); // return 'e'\niterator.next(); // return 'e'\niterator.next(); // return 't'\niterator.next(); // return 'C'\niterator.next(); // return 'o'\niterator.next(); // return 'd'\niterator.hasNext(); // return true\niterator.next(); // return 'e'\niterator.hasNext(); // return false\niterator.next(); // return ' '\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>\nDesign and implement a data structure for a compressed string iterator. It should support the following operations: <code>next</code> and <code>hasNext</code>.\n</p>\n<p>\nThe given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.\n</p>\n<p>\n<code>next()</code> - if the original string still has uncompressed characters, return the next letter; Otherwise return a white space.<br/>\n<code>hasNext()</code> - Judge whether there is any letter needs to be uncompressed.\n</p>\n<p>\n<b>Note:</b><br/>\nPlease remember to <b>RESET</b> your class variables declared in StringIterator, as static/class variables are <b>persisted across multiple test cases</b>. Please see <a href=\"https://leetcode.com/faq/#different-output\">here</a> for more details.\n</p>\n<p><b>Example:</b>\n</p><pre>StringIterator iterator = new StringIterator(\"L1e2t1C1o1d1e1\");\n\niterator.next(); // return 'L'\niterator.next(); // return 'e'\niterator.next(); // return 'e'\niterator.next(); // return 't'\niterator.next(); // return 'C'\niterator.next(); // return 'o'\niterator.next(); // return 'd'\niterator.hasNext(); // return true\niterator.next(); // return 'e'\niterator.hasNext(); // return false\niterator.next(); // return ' '\n</pre>\n<p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "605",
        "link": "can-place-flowers",
        "title": "Can Place Flowers",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "27.8%",
        "questionDescription": "<p>Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.</p>\r\n\r\n<p>Given a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number <b>n</b>, return if <b>n</b> new flowers can be planted in it without violating the no-adjacent-flowers rule.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> flowerbed = [1,0,0,0,1], n = 1\r\n<b>Output:</b> True\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> flowerbed = [1,0,0,0,1], n = 2\r\n<b>Output:</b> False\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The input array won't violate no-adjacent-flowers rule.</li>\r\n<li>The input array size is in the range of [1, 20000].</li>\r\n<li><b>n</b> is a non-negative integer which won't exceed the input array size.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u82b1\u575b\uff0c\u4e00\u90e8\u5206\u5730\u5757\u79cd\u690d\u4e86\u82b1\uff0c\u53e6\u4e00\u90e8\u5206\u5374\u6ca1\u6709\u3002\u53ef\u662f\uff0c\u82b1\u5349\u4e0d\u80fd\u79cd\u690d\u5728\u76f8\u90bb\u7684\u5730\u5757\u4e0a\uff0c\u5b83\u4eec\u4f1a\u4e89\u593a\u6c34\u6e90\uff0c\u4e24\u8005\u90fd\u4f1a\u6b7b\u53bb\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u82b1\u575b\uff08\u8868\u793a\u4e3a\u4e00\u4e2a\u6570\u7ec4\u5305\u542b0\u548c1\uff0c\u5176\u4e2d0\u8868\u793a\u6ca1\u79cd\u690d\u82b1\uff0c1\u8868\u793a\u79cd\u690d\u4e86\u82b1\uff09\uff0c\u548c\u4e00\u4e2a\u6570&nbsp;<strong>n&nbsp;</strong>\u3002\u80fd\u5426\u5728\u4e0d\u6253\u7834\u79cd\u690d\u89c4\u5219\u7684\u60c5\u51b5\u4e0b\u79cd\u5165&nbsp;<strong>n&nbsp;</strong>\u6735\u82b1\uff1f\u80fd\u5219\u8fd4\u56deTrue\uff0c\u4e0d\u80fd\u5219\u8fd4\u56deFalse\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> flowerbed = [1,0,0,0,1], n = 1\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> flowerbed = [1,0,0,0,1], n = 2\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u6570\u7ec4\u5185\u5df2\u79cd\u597d\u7684\u82b1\u4e0d\u4f1a\u8fdd\u53cd\u79cd\u690d\u89c4\u5219\u3002</li>\n\t<li>\u8f93\u5165\u7684\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u4e3a [1, 20000]\u3002</li>\n\t<li><strong>n</strong> \u662f\u975e\u8d1f\u6574\u6570\uff0c\u4e14\u4e0d\u4f1a\u8d85\u8fc7\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u3002</li>\n</ol>\n",
        "titleZh": "\u79cd\u82b1\u95ee\u9898",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "LinkedIn",
            "Cisco"
        ]
    },
    {
        "leetId": "606",
        "link": "construct-string-from-binary-tree",
        "title": "Construct String from Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "49.0%",
        "questionDescription": "<p>You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.</p>\r\n\r\n<p>The null node needs to be represented by empty parenthesis pair \"()\". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> Binary tree: [1,2,3,4]\r\n       1\r\n     /   \\\r\n    2     3\r\n   /    \r\n  4     \r\n\r\n<b>Output:</b> \"1(2(4))(3)\"\r\n<br/><b>Explanation:</b> Originallay it needs to be \"1(2(4)())(3()())\", <br/>but you need to omit all the unnecessary empty parenthesis pairs. <br/>And it will be \"1(2(4))(3)\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> Binary tree: [1,2,3,null,4]\r\n       1\r\n     /   \\\r\n    2     3\r\n     \\  \r\n      4 \r\n\r\n<b>Output:</b> \"1(2()(4))(3)\"\r\n<br/><b>Explanation:</b> Almost the same as the first example, <br/>except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u4f60\u9700\u8981\u91c7\u7528\u524d\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\uff0c\u5c06\u4e00\u4e2a\u4e8c\u53c9\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u7531\u62ec\u53f7\u548c\u6574\u6570\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u7a7a\u8282\u70b9\u5219\u7528\u4e00\u5bf9\u7a7a\u62ec\u53f7 &quot;()&quot; \u8868\u793a\u3002\u800c\u4e14\u4f60\u9700\u8981\u7701\u7565\u6240\u6709\u4e0d\u5f71\u54cd\u5b57\u7b26\u4e32\u4e0e\u539f\u59cb\u4e8c\u53c9\u6811\u4e4b\u95f4\u7684\u4e00\u5bf9\u4e00\u6620\u5c04\u5173\u7cfb\u7684\u7a7a\u62ec\u53f7\u5bf9\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \u4e8c\u53c9\u6811: [1,2,3,4]\n       1\n     /   \\\n    2     3\n   /    \n  4     \n\n<strong>\u8f93\u51fa:</strong> &quot;1(2(4))(3)&quot;\n\n<strong>\u89e3\u91ca:</strong> \u539f\u672c\u5c06\u662f&ldquo;1(2(4)())(3())&rdquo;\uff0c\n\u5728\u4f60\u7701\u7565\u6240\u6709\u4e0d\u5fc5\u8981\u7684\u7a7a\u62ec\u53f7\u5bf9\u4e4b\u540e\uff0c\n\u5b83\u5c06\u662f&ldquo;1(2(4))(3)&rdquo;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \u4e8c\u53c9\u6811: [1,2,3,null,4]\n       1\n     /   \\\n    2     3\n     \\  \n      4 \n\n<strong>\u8f93\u51fa:</strong> &quot;1(2()(4))(3)&quot;\n\n<strong>\u89e3\u91ca:</strong> \u548c\u7b2c\u4e00\u4e2a\u793a\u4f8b\u76f8\u4f3c\uff0c\n\u9664\u4e86\u6211\u4eec\u4e0d\u80fd\u7701\u7565\u7b2c\u4e00\u4e2a\u5bf9\u62ec\u53f7\u6765\u4e2d\u65ad\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u7684\u4e00\u5bf9\u4e00\u6620\u5c04\u5173\u7cfb\u3002\n</pre>\n",
        "titleZh": "\u6839\u636e\u4e8c\u53c9\u6811\u521b\u5efa\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Amazon",
            "Baidu"
        ]
    },
    {
        "leetId": "609",
        "link": "find-duplicate-file-in-system",
        "title": "Find Duplicate File in System",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "53.9%",
        "questionDescription": "<p>Given a list of directory info including directory path, and all the files with contents in this directory, you need to find out all the groups of duplicate files in the file system in terms of their paths.</p>\r\n\r\n<p>A group of duplicate files consists of at least <b>two</b> files that have exactly the same content.</p>\r\n\r\n<p>A single directory info string in the <b>input</b> list has the following format:</p>\r\n\r\n<p><code>&quot;root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)&quot;</code></p>\r\n\r\n<p>It means there are <b>n</b> files (<code>f1.txt</code>, <code>f2.txt</code> ... <code>fn.txt</code> with content <code>f1_content</code>, <code>f2_content</code> ... <code>fn_content</code>, respectively) in directory <code>root/d1/d2/.../dm</code>. Note that n &gt;= 1 and m &gt;= 0. If m = 0, it means the directory is just the root directory.</p>\r\n\r\n<p>The <b>output</b> is a list of group of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:</p>\r\n\r\n<p><code>&quot;directory_path/file_name.txt&quot;</code></p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\n[&quot;root/a 1.txt(abcd) 2.txt(efgh)&quot;, &quot;root/c 3.txt(abcd)&quot;, &quot;root/c/d 4.txt(efgh)&quot;, &quot;root 4.txt(efgh)&quot;]\r\n<b>Output:</b>  \r\n[[&quot;root/a/2.txt&quot;,&quot;root/c/d/4.txt&quot;,&quot;root/4.txt&quot;],[&quot;root/a/1.txt&quot;,&quot;root/c/3.txt&quot;]]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>No order is required for the final output.</li>\r\n\t<li>You may assume the directory name, file name and file content only has letters and digits, and the length of file content is in the range of [1,50].</li>\r\n\t<li>The number of files given is in the range of [1,20000].</li>\r\n\t<li>You may assume no files or directories share the same name in the same directory.</li>\r\n\t<li>You may assume each given directory info represents a unique directory. Directory path and file info are separated by a single blank space.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n<b>Follow-up beyond contest:</b>\r\n\r\n<ol>\r\n\t<li>Imagine you are given a real file system, how will you search files? DFS or BFS?</li>\r\n\t<li>If the file content is very large (GB level), how will you modify your solution?</li>\r\n\t<li>If you can only read the file by 1kb each time, how will you modify your solution?</li>\r\n\t<li>What is the time complexity of your modified solution? What is the most time-consuming part and memory consuming part of it? How to optimize?</li>\r\n\t<li>How to make sure the duplicated files you find are not false positive?</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u76ee\u5f55\u4fe1\u606f\u5217\u8868\uff0c\u5305\u62ec\u76ee\u5f55\u8def\u5f84\uff0c\u4ee5\u53ca\u8be5\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u5305\u542b\u5185\u5bb9\u7684\u6587\u4ef6\uff0c\u60a8\u9700\u8981\u627e\u5230\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u91cd\u590d\u6587\u4ef6\u7ec4\u7684\u8def\u5f84\u3002\u4e00\u7ec4\u91cd\u590d\u7684\u6587\u4ef6\u81f3\u5c11\u5305\u62ec<strong>\u4e8c\u4e2a</strong>\u5177\u6709\u5b8c\u5168\u76f8\u540c\u5185\u5bb9\u7684\u6587\u4ef6\u3002</p>\n\n<p><strong>\u8f93\u5165</strong>\u5217\u8868\u4e2d\u7684\u5355\u4e2a\u76ee\u5f55\u4fe1\u606f\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5982\u4e0b\uff1a</p>\n\n<p><code>&quot;root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)&quot;</code></p>\n\n<p>\u8fd9\u610f\u5473\u7740\u6709 n \u4e2a\u6587\u4ef6\uff08<code>f1.txt</code>,&nbsp;<code>f2.txt</code>&nbsp;...&nbsp;<code>fn.txt</code> \u7684\u5185\u5bb9\u5206\u522b\u662f <code>f1_content</code>,&nbsp;<code>f2_content</code>&nbsp;...&nbsp;<code>fn_content</code>\uff09\u5728\u76ee\u5f55&nbsp;<code>root/d1/d2/.../dm</code>&nbsp;\u4e0b\u3002\u6ce8\u610f\uff1an&gt;=1 \u4e14 m&gt;=0\u3002\u5982\u679c m=0\uff0c\u5219\u8868\u793a\u8be5\u76ee\u5f55\u662f\u6839\u76ee\u5f55\u3002</p>\n\n<p>\u8be5<strong>\u8f93\u51fa</strong>\u662f\u91cd\u590d\u6587\u4ef6\u8def\u5f84\u7ec4\u7684\u5217\u8868\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7ec4\uff0c\u5b83\u5305\u542b\u5177\u6709\u76f8\u540c\u5185\u5bb9\u7684\u6587\u4ef6\u7684\u6240\u6709\u6587\u4ef6\u8def\u5f84\u3002\u6587\u4ef6\u8def\u5f84\u662f\u5177\u6709\u4e0b\u5217\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff1a</p>\n\n<p><code>&quot;directory_path/file_name.txt&quot;</code></p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\n[&quot;root/a 1.txt(abcd) 2.txt(efgh)&quot;, &quot;root/c 3.txt(abcd)&quot;, &quot;root/c/d 4.txt(efgh)&quot;, &quot;root 4.txt(efgh)&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>  \n[[&quot;root/a/2.txt&quot;,&quot;root/c/d/4.txt&quot;,&quot;root/4.txt&quot;],[&quot;root/a/1.txt&quot;,&quot;root/c/3.txt&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\uff1a</strong></p>\n\n<ol>\n\t<li>\u6700\u7ec8\u8f93\u51fa\u4e0d\u9700\u8981\u987a\u5e8f\u3002</li>\n\t<li>\u60a8\u53ef\u4ee5\u5047\u8bbe\u76ee\u5f55\u540d\u3001\u6587\u4ef6\u540d\u548c\u6587\u4ef6\u5185\u5bb9\u53ea\u6709\u5b57\u6bcd\u548c\u6570\u5b57\uff0c\u5e76\u4e14\u6587\u4ef6\u5185\u5bb9\u7684\u957f\u5ea6\u5728 [1\uff0c50] \u7684\u8303\u56f4\u5185\u3002</li>\n\t<li>\u7ed9\u5b9a\u7684\u6587\u4ef6\u6570\u91cf\u5728 [1\uff0c20000] \u4e2a\u8303\u56f4\u5185\u3002</li>\n\t<li>\u60a8\u53ef\u4ee5\u5047\u8bbe\u5728\u540c\u4e00\u76ee\u5f55\u4e2d\u6ca1\u6709\u4efb\u4f55\u6587\u4ef6\u6216\u76ee\u5f55\u5171\u4eab\u76f8\u540c\u7684\u540d\u79f0\u3002</li>\n\t<li>\u60a8\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u7ed9\u5b9a\u7684\u76ee\u5f55\u4fe1\u606f\u4ee3\u8868\u4e00\u4e2a\u552f\u4e00\u7684\u76ee\u5f55\u3002\u76ee\u5f55\u8def\u5f84\u548c\u6587\u4ef6\u4fe1\u606f\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8d85\u8d8a\u7ade\u8d5b\u7684\u540e\u7eed\u884c\u52a8\uff1a</strong></p>\n\n<ol>\n\t<li>\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a\u771f\u6b63\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u60a8\u5c06\u5982\u4f55\u641c\u7d22\u6587\u4ef6\uff1f\u5e7f\u5ea6\u641c\u7d22\u8fd8\u662f\u5bbd\u5ea6\u641c\u7d22\uff1f</li>\n\t<li>\u5982\u679c\u6587\u4ef6\u5185\u5bb9\u975e\u5e38\u5927\uff08GB\u7ea7\u522b\uff09\uff0c\u60a8\u5c06\u5982\u4f55\u4fee\u6539\u60a8\u7684\u89e3\u51b3\u65b9\u6848\uff1f</li>\n\t<li>\u5982\u679c\u6bcf\u6b21\u53ea\u80fd\u8bfb\u53d6 1 kb \u7684\u6587\u4ef6\uff0c\u60a8\u5c06\u5982\u4f55\u4fee\u6539\u89e3\u51b3\u65b9\u6848\uff1f</li>\n\t<li>\u4fee\u6539\u540e\u7684\u89e3\u51b3\u65b9\u6848\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f\u5176\u4e2d\u6700\u8017\u65f6\u7684\u90e8\u5206\u548c\u6d88\u8017\u5185\u5b58\u7684\u90e8\u5206\u662f\u4ec0\u4e48\uff1f\u5982\u4f55\u4f18\u5316\uff1f</li>\n\t<li>\u5982\u4f55\u786e\u4fdd\u60a8\u53d1\u73b0\u7684\u91cd\u590d\u6587\u4ef6\u4e0d\u662f\u8bef\u62a5\uff1f</li>\n</ol>\n",
        "titleZh": "\u5728\u7cfb\u7edf\u4e2d\u67e5\u627e\u91cd\u590d\u6587\u4ef6",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Twitter",
            "Dropbox"
        ]
    },
    {
        "leetId": "611",
        "link": "valid-triangle-number",
        "title": "Valid Triangle Number",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "45.2%",
        "questionDescription": "Given an array consists of non-negative integers,  your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [2,2,3,4]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b>\r\nValid combinations are: \r\n2,3,4 (using the first 2)\r\n2,3,4 (using the second 2)\r\n2,2,3\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of the given array won't exceed 1000.</li>\r\n<li>The integers in the given array are in the range of [0, 1000].</li>\r\n</ol>\r\n</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u975e\u8d1f\u6574\u6570\u7684\u6570\u7ec4\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u7edf\u8ba1\u5176\u4e2d\u53ef\u4ee5\u7ec4\u6210\u4e09\u89d2\u5f62\u4e09\u6761\u8fb9\u7684\u4e09\u5143\u7ec4\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [2,2,3,4]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong>\n\u6709\u6548\u7684\u7ec4\u5408\u662f: \n2,3,4 (\u4f7f\u7528\u7b2c\u4e00\u4e2a 2)\n2,3,4 (\u4f7f\u7528\u7b2c\u4e8c\u4e2a 2)\n2,2,3\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u6570\u7ec4\u957f\u5ea6\u4e0d\u8d85\u8fc71000\u3002</li>\n\t<li>\u6570\u7ec4\u91cc\u6574\u6570\u7684\u8303\u56f4\u4e3a [0, 1000]\u3002</li>\n</ol>\n",
        "titleZh": "\u6709\u6548\u4e09\u89d2\u5f62\u7684\u4e2a\u6570",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Microsoft",
            "Bloomberg",
            "LinkedIn",
            "Expedia"
        ]
    },
    {
        "leetId": "616",
        "link": "add-bold-tag-in-string",
        "title": "Add Bold Tag in String",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "12",
        "questionDescription": "\n                Given a string <b>s</b> and a list of strings <b>dict</b>, you need to add a closed pair of bold tag <code>&lt;b&gt;</code> and <code>&lt;/b&gt;</code> to wrap the substrings in s that exist in dict. If two such substrings overlap, you need to wrap them together by only one pair of closed bold tag. Also, if two substrings wrapped by bold tags are consecutive, you need to combine them. \n\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> \ns = \"abcxyz123\"\ndict = [\"abc\",\"123\"]\n<b>Output:</b>\n\"&lt;b&gt;abc&lt;/b&gt;xyz&lt;b&gt;123&lt;/b&gt;\"\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> \ns = \"aaabbcc\"\ndict = [\"aaa\",\"aab\",\"bc\"]\n<b>Output:</b>\n\"&lt;b&gt;aaabbc&lt;/b&gt;c\"\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The given dict won't contain duplicates, and its length won't exceed 100.</li>\n<li>All the strings in input have length in range [1, 1000]. </li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n                Given a string <b>s</b> and a list of strings <b>dict</b>, you need to add a closed pair of bold tag <code>&lt;b&gt;</code> and <code>&lt;/b&gt;</code> to wrap the substrings in s that exist in dict. If two such substrings overlap, you need to wrap them together by only one pair of closed bold tag. Also, if two substrings wrapped by bold tags are consecutive, you need to combine them. \n\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> \ns = \"abcxyz123\"\ndict = [\"abc\",\"123\"]\n<b>Output:</b>\n\"&lt;b&gt;abc&lt;/b&gt;xyz&lt;b&gt;123&lt;/b&gt;\"\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> \ns = \"aaabbcc\"\ndict = [\"aaa\",\"aab\",\"bc\"]\n<b>Output:</b>\n\"&lt;b&gt;aaabbc&lt;/b&gt;c\"\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The given dict won't contain duplicates, and its length won't exceed 100.</li>\n<li>All the strings in input have length in range [1, 1000]. </li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "617",
        "link": "merge-two-binary-trees",
        "title": "Merge Two Binary Trees",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "69.4%",
        "questionDescription": "<p>Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.</p>\r\n\r\n<p>You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n\tTree 1                     Tree 2                  \r\n          1                         2                             \r\n         / \\                       / \\                            \r\n        3   2                     1   3                        \r\n       /                           \\   \\                      \r\n      5                             4   7                  \r\n<b>Output:</b> \r\nMerged tree:\r\n\t     3\r\n\t    / \\\r\n\t   4   5\r\n\t  / \\   \\ \r\n\t 5   4   7\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b> The merging process must start from the root nodes of both trees.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u4e8c\u53c9\u6811\uff0c\u60f3\u8c61\u5f53\u4f60\u5c06\u5b83\u4eec\u4e2d\u7684\u4e00\u4e2a\u8986\u76d6\u5230\u53e6\u4e00\u4e2a\u4e0a\u65f6\uff0c\u4e24\u4e2a\u4e8c\u53c9\u6811\u7684\u4e00\u4e9b\u8282\u70b9\u4fbf\u4f1a\u91cd\u53e0\u3002</p>\n\n<p>\u4f60\u9700\u8981\u5c06\u4ed6\u4eec\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684\u4e8c\u53c9\u6811\u3002\u5408\u5e76\u7684\u89c4\u5219\u662f\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u91cd\u53e0\uff0c\u90a3\u4e48\u5c06\u4ed6\u4eec\u7684\u503c\u76f8\u52a0\u4f5c\u4e3a\u8282\u70b9\u5408\u5e76\u540e\u7684\u65b0\u503c\uff0c\u5426\u5219<strong>\u4e0d\u4e3a&nbsp;</strong>NULL \u7684\u8282\u70b9\u5c06\u76f4\u63a5\u4f5c\u4e3a\u65b0\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\tTree 1                     Tree 2                  \n          1                         2                             \n         / \\                       / \\                            \n        3   2                     1   3                        \n       /                           \\   \\                      \n      5                             4   7                  \n<strong>\u8f93\u51fa:</strong> \n\u5408\u5e76\u540e\u7684\u6811:\n\t     3\n\t    / \\\n\t   4   5\n\t  / \\   \\ \n\t 5   4   7\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong>&nbsp;\u5408\u5e76\u5fc5\u987b\u4ece\u4e24\u4e2a\u6811\u7684\u6839\u8282\u70b9\u5f00\u59cb\u3002</p>\n",
        "titleZh": "\u5408\u5e76\u4e8c\u53c9\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Adobe"
        ]
    },
    {
        "leetId": "621",
        "link": "task-scheduler",
        "title": "Task Scheduler",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "43.7%",
        "questionDescription": "<p>Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks. Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.</p>\r\n\r\n<p>However, there is a non-negative cooling interval <b>n</b> that means between two <b>same tasks</b>, there must be at least n intervals that CPU are doing different tasks or just be idle.</p>\r\n\r\n<p>You need to return the <b>least</b> number of intervals the CPU will take to finish all the given tasks.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 2\r\n<b>Output:</b> 8\r\n<b>Explanation:</b> A -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The number of tasks is in the range [1, 10000].</li>\r\n\t<li>The integer n is in the range [0, 100].</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7528\u5b57\u7b26\u6570\u7ec4\u8868\u793a\u7684 CPU \u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\u5217\u8868\u3002\u5176\u4e2d\u5305\u542b\u4f7f\u7528\u5927\u5199\u7684 A - Z \u5b57\u6bcd\u8868\u793a\u768426 \u79cd\u4e0d\u540c\u79cd\u7c7b\u7684\u4efb\u52a1\u3002\u4efb\u52a1\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u6267\u884c\uff0c\u5e76\u4e14\u6bcf\u4e2a\u4efb\u52a1\u90fd\u53ef\u4ee5\u5728 1 \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6267\u884c\u5b8c\u3002CPU \u5728\u4efb\u4f55\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u90fd\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002</p>\n\n<p>\u7136\u800c\uff0c\u4e24\u4e2a<strong>\u76f8\u540c\u79cd\u7c7b</strong>\u7684\u4efb\u52a1\u4e4b\u95f4\u5fc5\u987b\u6709\u957f\u5ea6\u4e3a<strong>&nbsp;n </strong>\u7684\u51b7\u5374\u65f6\u95f4\uff0c\u56e0\u6b64\u81f3\u5c11\u6709\u8fde\u7eed n \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185 CPU \u5728\u6267\u884c\u4e0d\u540c\u7684\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002</p>\n\n<p>\u4f60\u9700\u8981\u8ba1\u7b97\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u6240\u9700\u8981\u7684<strong>\u6700\u77ed\u65f6\u95f4</strong>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 2\n<strong>\u8f93\u51fa:</strong> 8\n<strong>\u6267\u884c\u987a\u5e8f:</strong> A -&gt; B -&gt; (\u5f85\u547d) -&gt; A -&gt; B -&gt; (\u5f85\u547d) -&gt; A -&gt; B.\n</pre>\n\n<p><strong>\u6ce8\uff1a</strong></p>\n\n<ol>\n\t<li>\u4efb\u52a1\u7684\u603b\u4e2a\u6570\u4e3a&nbsp;[1, 10000]\u3002</li>\n\t<li>n \u7684\u53d6\u503c\u8303\u56f4\u4e3a [0, 100]\u3002</li>\n</ol>\n",
        "titleZh": "\u4efb\u52a1\u8c03\u5ea6\u5668",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Queue",
                "link": "queue",
                "tagZh": "\u961f\u5217"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Uber",
            "Apple",
            "Nutanix",
            "Rubrik"
        ]
    },
    {
        "leetId": "622",
        "link": "design-circular-queue",
        "title": "Design Circular Queue",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "38.2%",
        "questionDescription": "<p>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called &quot;Ring Buffer&quot;.</p>\r\n\r\n<p>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</p>\r\n\r\n<p>Your implementation should support following operations:</p>\r\n\r\n<ul>\r\n\t<li><code>MyCircularQueue(k)</code>: Constructor, set the size of the queue to be k.</li>\r\n\t<li><code>Front</code>: Get the front item from the queue. If the queue is empty, return -1.</li>\r\n\t<li><code>Rear</code>: Get the last item from the queue. If the queue is empty, return -1.</li>\r\n\t<li><code>enQueue(value)</code>: Insert an element into the circular queue. Return true if the operation is successful.</li>\r\n\t<li><code>deQueue()</code>: Delete an element from the circular queue. Return true if the operation is successful.</li>\r\n\t<li><code>isEmpty()</code>: Checks whether the circular queue is empty or not.</li>\r\n\t<li><code>isFull()</code>: Checks whether the circular queue is full or not.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nMyCircularQueue circularQueue = new MyCircularQueue(3); // set the size to be 3\r\ncircularQueue.enQueue(1); &nbsp;// return true\r\ncircularQueue.enQueue(2); &nbsp;// return true\r\ncircularQueue.enQueue(3); &nbsp;// return true\r\ncircularQueue.enQueue(4); &nbsp;// return false, the queue is full\r\ncircularQueue.Rear(); &nbsp;// return 3\r\ncircularQueue.isFull(); &nbsp;// return true\r\ncircularQueue.deQueue(); &nbsp;// return true\r\ncircularQueue.enQueue(4); &nbsp;// return true\r\ncircularQueue.Rear(); &nbsp;// return 4\r\n</pre>\r\n&nbsp;\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All values will be in the range of [0, 1000].</li>\r\n\t<li>The number of operations will be in the range of&nbsp;[1, 1000].</li>\r\n\t<li>Please do not use the built-in Queue library.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u8bbe\u8ba1\u4f60\u7684\u5faa\u73af\u961f\u5217\u5b9e\u73b0\u3002 \u5faa\u73af\u961f\u5217\u662f\u4e00\u79cd\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u5176\u64cd\u4f5c\u8868\u73b0\u57fa\u4e8e FIFO\uff08\u5148\u8fdb\u5148\u51fa\uff09\u539f\u5219\u5e76\u4e14\u961f\u5c3e\u88ab\u8fde\u63a5\u5728\u961f\u9996\u4e4b\u540e\u4ee5\u5f62\u6210\u4e00\u4e2a\u5faa\u73af\u3002\u5b83\u4e5f\u88ab\u79f0\u4e3a&ldquo;\u73af\u5f62\u7f13\u51b2\u5668&rdquo;\u3002</p>\n\n<p>\u5faa\u73af\u961f\u5217\u7684\u4e00\u4e2a\u597d\u5904\u662f\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u961f\u5217\u4e4b\u524d\u7528\u8fc7\u7684\u7a7a\u95f4\u3002\u5728\u4e00\u4e2a\u666e\u901a\u961f\u5217\u91cc\uff0c\u4e00\u65e6\u4e00\u4e2a\u961f\u5217\u6ee1\u4e86\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u63d2\u5165\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u4f7f\u5728\u961f\u5217\u524d\u9762\u4ecd\u6709\u7a7a\u95f4\u3002\u4f46\u662f\u4f7f\u7528\u5faa\u73af\u961f\u5217\uff0c\u6211\u4eec\u80fd\u4f7f\u7528\u8fd9\u4e9b\u7a7a\u95f4\u53bb\u5b58\u50a8\u65b0\u7684\u503c\u3002</p>\n\n<p>\u4f60\u7684\u5b9e\u73b0\u5e94\u8be5\u652f\u6301\u5982\u4e0b\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li><code>MyCircularQueue(k)</code>: \u6784\u9020\u5668\uff0c\u8bbe\u7f6e\u961f\u5217\u957f\u5ea6\u4e3a k \u3002</li>\n\t<li><code>Front</code>: \u4ece\u961f\u9996\u83b7\u53d6\u5143\u7d20\u3002\u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de -1 \u3002</li>\n\t<li><code>Rear</code>: \u83b7\u53d6\u961f\u5c3e\u5143\u7d20\u3002\u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de -1 \u3002</li>\n\t<li><code>enQueue(value)</code>: \u5411\u5faa\u73af\u961f\u5217\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u6210\u529f\u63d2\u5165\u5219\u8fd4\u56de\u771f\u3002</li>\n\t<li><code>deQueue()</code>: \u4ece\u5faa\u73af\u961f\u5217\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u6210\u529f\u5220\u9664\u5219\u8fd4\u56de\u771f\u3002</li>\n\t<li><code>isEmpty()</code>: \u68c0\u67e5\u5faa\u73af\u961f\u5217\u662f\u5426\u4e3a\u7a7a\u3002</li>\n\t<li><code>isFull()</code>: \u68c0\u67e5\u5faa\u73af\u961f\u5217\u662f\u5426\u5df2\u6ee1\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>MyCircularQueue circularQueue = new MycircularQueue(3); // \u8bbe\u7f6e\u957f\u5ea6\u4e3a 3\n\ncircularQueue.enQueue(1); &nbsp;// \u8fd4\u56de true\n\ncircularQueue.enQueue(2); &nbsp;// \u8fd4\u56de true\n\ncircularQueue.enQueue(3); &nbsp;// \u8fd4\u56de true\n\ncircularQueue.enQueue(4); &nbsp;// \u8fd4\u56de false\uff0c\u961f\u5217\u5df2\u6ee1\n\ncircularQueue.Rear(); &nbsp;// \u8fd4\u56de 3\n\ncircularQueue.isFull(); &nbsp;// \u8fd4\u56de true\n\ncircularQueue.deQueue(); &nbsp;// \u8fd4\u56de true\n\ncircularQueue.enQueue(4); &nbsp;// \u8fd4\u56de true\n\ncircularQueue.Rear(); &nbsp;// \u8fd4\u56de 4\n&nbsp;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u7684\u503c\u90fd\u5728 0&nbsp;\u81f3 1000 \u7684\u8303\u56f4\u5185\uff1b</li>\n\t<li>\u64cd\u4f5c\u6570\u5c06\u5728 1 \u81f3 1000 \u7684\u8303\u56f4\u5185\uff1b</li>\n\t<li>\u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684\u961f\u5217\u5e93\u3002</li>\n</ul>\n",
        "titleZh": "\u8bbe\u8ba1\u5faa\u73af\u961f\u5217",
        "tags": [
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            },
            {
                "tag": "Queue",
                "link": "queue",
                "tagZh": "\u961f\u5217"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook"
        ]
    },
    {
        "leetId": "623",
        "link": "add-one-row-to-tree",
        "title": "Add One Row to Tree",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "46.8%",
        "questionDescription": "<p>Given the root of a binary tree, then value <code>v</code> and depth <code>d</code>, you need to add a row of nodes with value <code>v</code> at the given depth <code>d</code>. The root node is at depth 1. </p>\r\n\r\n<p>The adding rule is: given a positive integer depth <code>d</code>, for each NOT null tree nodes <code>N</code> in depth <code>d-1</code>, create two tree nodes with value <code>v</code> as <code>N's</code> left subtree root and right subtree root. And <code>N's</code> <b>original left subtree</b> should be the left subtree of the new left subtree root, its <b>original right subtree</b> should be the right subtree of the new right subtree root. If depth <code>d</code> is 1 that means there is no depth d-1 at all, then create a tree node with value <b>v</b> as the new root of the whole original tree, and the original tree is the new root's left subtree.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nA binary tree as following:\r\n       4\r\n     /   \\\r\n    2     6\r\n   / \\   / \r\n  3   1 5   \r\n\r\n<b>v = 1</b>\r\n\r\n<b>d = 2</b>\r\n\r\n<b>Output:</b> \r\n       4\r\n      / \\\r\n     1   1\r\n    /     \\\r\n   2       6\r\n  / \\     / \r\n 3   1   5   \r\n\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nA binary tree as following:\r\n      4\r\n     /   \r\n    2    \r\n   / \\   \r\n  3   1    \r\n\r\n<b>v = 1</b>\r\n\r\n<b>d = 3</b>\r\n\r\n<b>Output:</b> \r\n      4\r\n     /   \r\n    2\r\n   / \\    \r\n  1   1\r\n /     \\  \r\n3       1\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The given d is in range [1, maximum depth of the given tree + 1].</li>\r\n<li>The given binary tree has at least one tree node.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u6839\u8282\u70b9\u4e3a\u7b2c1\u5c42\uff0c\u6df1\u5ea6\u4e3a 1\u3002\u5728\u5176\u7b2c&nbsp;<code>d</code>&nbsp;\u5c42\u8ffd\u52a0\u4e00\u884c\u503c\u4e3a&nbsp;<code>v</code>&nbsp;\u7684\u8282\u70b9\u3002</p>\n\n<p>\u6dfb\u52a0\u89c4\u5219\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6df1\u5ea6\u503c <code>d</code> \uff08\u6b63\u6574\u6570\uff09\uff0c\u9488\u5bf9\u6df1\u5ea6\u4e3a <code>d-1</code> \u5c42\u7684\u6bcf\u4e00<strong>\u975e\u7a7a</strong>\u8282\u70b9 <code>N</code>\uff0c\u4e3a <code>N</code> \u521b\u5efa\u4e24\u4e2a\u503c\u4e3a&nbsp;<code>v</code>&nbsp;\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u3002</p>\n\n<p>\u5c06&nbsp;<code>N</code> \u539f\u5148\u7684\u5de6\u5b50\u6811\uff0c\u8fde\u63a5\u4e3a\u65b0\u8282\u70b9&nbsp;<code>v</code> \u7684\u5de6\u5b50\u6811\uff1b\u5c06&nbsp;<code>N</code> \u539f\u5148\u7684\u53f3\u5b50\u6811\uff0c\u8fde\u63a5\u4e3a\u65b0\u8282\u70b9&nbsp;<code>v</code> \u7684\u53f3\u5b50\u6811\u3002</p>\n\n<p>\u5982\u679c <code>d</code> \u7684\u503c\u4e3a 1\uff0c\u6df1\u5ea6 d - 1 \u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6839\u8282\u70b9 <code>v</code>\uff0c\u539f\u5148\u7684\u6574\u68f5\u6811\u5c06\u4f5c\u4e3a <code>v</code> \u7684\u5de6\u5b50\u6811\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\u4e8c\u53c9\u6811\u5982\u4e0b\u6240\u793a:\n       4\n     /   \\\n    2     6\n   / \\   / \n  3   1 5   \n\n<strong>v = 1</strong>\n\n<strong>d = 2</strong>\n\n<strong>\u8f93\u51fa:</strong> \n       4\n      / \\\n     1   1\n    /     \\\n   2       6\n  / \\     / \n 3   1   5   \n\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\u4e8c\u53c9\u6811\u5982\u4e0b\u6240\u793a:\n      4\n     /   \n    2    \n   / \\   \n  3   1    \n\n<strong>v = 1</strong>\n\n<strong>d = 3</strong>\n\n<strong>\u8f93\u51fa:</strong> \n      4\n     /   \n    2\n   / \\    \n  1   1\n /     \\  \n3       1\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u6df1\u5ea6\u503c d \u7684\u8303\u56f4\u662f\uff1a[1\uff0c\u4e8c\u53c9\u6811\u6700\u5927\u6df1\u5ea6 + 1]\u3002</li>\n\t<li>\u8f93\u5165\u7684\u4e8c\u53c9\u6811\u81f3\u5c11\u6709\u4e00\u4e2a\u8282\u70b9\u3002</li>\n</ol>\n",
        "titleZh": "\u5728\u4e8c\u53c9\u6811\u4e2d\u589e\u52a0\u4e00\u884c",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Microsoft",
            "Gilt Groupe"
        ]
    },
    {
        "leetId": "624",
        "link": "maximum-distance-in-arrays",
        "title": "Maximum Distance in Arrays",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "22",
        "questionDescription": "\n<p>\nGiven <code>m</code> arrays, and each array is sorted in ascending order. Now you can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers <code>a</code> and <code>b</code> to be their absolute difference <code>|a-b|</code>. Your task is to find the maximum distance.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> \n[[1,2,3],\n [4,5],\n [1,2,3]]\n<b>Output:</b> 4\n<b>Explanation:</b> \nOne way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>Each given array will have at least 1 number. There will be at least two non-empty arrays.</li>\n<li>The total number of the integers in <b>all</b> the <code>m</code> arrays will be in the range of [2, 10000].</li>\n<li>The integers in the <code>m</code> arrays will be in the range of [-10000, 10000].</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>\nGiven <code>m</code> arrays, and each array is sorted in ascending order. Now you can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers <code>a</code> and <code>b</code> to be their absolute difference <code>|a-b|</code>. Your task is to find the maximum distance.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> \n[[1,2,3],\n [4,5],\n [1,2,3]]\n<b>Output:</b> 4\n<b>Explanation:</b> \nOne way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>Each given array will have at least 1 number. There will be at least two non-empty arrays.</li>\n<li>The total number of the integers in <b>all</b> the <code>m</code> arrays will be in the range of [2, 10000].</li>\n<li>The integers in the <code>m</code> arrays will be in the range of [-10000, 10000].</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Yahoo"
        ]
    },
    {
        "leetId": "625",
        "link": "minimum-factorization",
        "title": "Minimum Factorization",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n<p>Given a positive integer <code>a</code>, find the smallest positive integer <code>b</code> whose multiplication of each digit equals to <code>a</code>. </p>\n<p>\nIf there is no answer or the answer is not fit in 32-bit signed integer, then return 0.</p>\n<p>\n<b>Example 1</b><br/>\nInput:\n</p><pre>48 </pre>\nOutput:\n<pre>68</pre>\n<p></p>\n<p>\n<b>Example 2</b><br/>\nInput: \n</p><pre>15</pre>\n\nOutput:\n<pre>35</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a positive integer <code>a</code>, find the smallest positive integer <code>b</code> whose multiplication of each digit equals to <code>a</code>. </p>\n<p>\nIf there is no answer or the answer is not fit in 32-bit signed integer, then return 0.</p>\n<p>\n<b>Example 1</b><br/>\nInput:\n</p><pre>48 </pre>\nOutput:\n<pre>68</pre>\n<p></p>\n<p>\n<b>Example 2</b><br/>\nInput: \n</p><pre>15</pre>\n\nOutput:\n<pre>35</pre>\n<p></p>\n",
        "companies": [
            "Tencent"
        ]
    },
    {
        "leetId": "628",
        "link": "maximum-product-of-three-numbers",
        "title": "Maximum Product of Three Numbers",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "43.9%",
        "questionDescription": "<p>Given an integer array, find three numbers whose product is maximum and output the maximum product.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,2,3]\r\n<b>Output:</b> 6\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,2,3,4]\r\n<b>Output:</b> 24\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The length of the given array will be in range [3,10<sup>4</sup>] and all elements are in the range [-1000, 1000].</li>\r\n\t<li>Multiplication of any three numbers in the input won&#39;t exceed the range of 32-bit signed integer.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u51fa\u7531\u4e09\u4e2a\u6570\u7ec4\u6210\u7684\u6700\u5927\u4e58\u79ef\uff0c\u5e76\u8f93\u51fa\u8fd9\u4e2a\u4e58\u79ef\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3]\n<strong>\u8f93\u51fa:</strong> 6\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3,4]\n<strong>\u8f93\u51fa:</strong> 24\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u7684\u6574\u578b\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u662f[3,10<sup>4</sup>]\uff0c\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u5143\u7d20\u8303\u56f4\u662f[-1000, 1000]\u3002</li>\n\t<li>\u8f93\u5165\u7684\u6570\u7ec4\u4e2d\u4efb\u610f\u4e09\u4e2a\u6570\u7684\u4e58\u79ef\u4e0d\u4f1a\u8d85\u51fa32\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4\u3002</li>\n</ol>\n",
        "titleZh": "\u4e09\u4e2a\u6570\u7684\u6700\u5927\u4e58\u79ef",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Yahoo",
            "Goldman Sachs",
            "Intuit",
            "Redfin",
            "Symantec"
        ]
    },
    {
        "leetId": "629",
        "link": "k-inverse-pairs-array",
        "title": "K Inverse Pairs Array",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "39.3%",
        "questionDescription": "<p>Given two integers <code>n</code> and <code>k</code>, find how many different arrays consist of numbers from <code>1</code> to <code>n</code> such that there are exactly <code>k</code> inverse pairs.</p>\r\n\r\n<p>We define an inverse pair as following: For <code>i<sub>th</sub></code> and <code>j<sub>th</sub></code> element in the array, if <code>i</code> &lt; <code>j</code> and <code>a[i]</code> &gt; <code>a[j]</code> then it&#39;s an inverse pair; Otherwise, it&#39;s not.</p>\r\n\r\n<p>Since the answer may be very large, the answer should be modulo 10<sup>9</sup> + 7.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> n = 3, k = 0\r\n<b>Output:</b> 1\r\n<b>Explanation:</b> \r\nOnly the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pair.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> n = 3, k = 1\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> \r\nThe array [1,3,2] and [2,1,3] have exactly 1 inverse pair.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The integer <code>n</code> is in the range [1, 1000] and <code>k</code> is in the range [0, 1000].</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570&nbsp;<code>n</code>&nbsp;\u548c&nbsp;<code>k</code>\uff0c\u627e\u51fa\u6240\u6709\u5305\u542b\u4ece&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>n</code>&nbsp;\u7684\u6570\u5b57\uff0c\u4e14\u6070\u597d\u62e5\u6709&nbsp;<code>k</code>&nbsp;\u4e2a\u9006\u5e8f\u5bf9\u7684\u4e0d\u540c\u7684\u6570\u7ec4\u7684\u4e2a\u6570\u3002</p>\n\n<p>\u9006\u5e8f\u5bf9\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\u5bf9\u4e8e\u6570\u7ec4\u7684\u7b2c<code>i</code>\u4e2a\u548c\u7b2c&nbsp;<code>j</code>\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ee1<code>i</code>&nbsp;&lt;&nbsp;<code>j</code>\u4e14&nbsp;<code>a[i]</code>&nbsp;&gt;&nbsp;<code>a[j]</code>\uff0c\u5219\u5176\u4e3a\u4e00\u4e2a\u9006\u5e8f\u5bf9\uff1b\u5426\u5219\u4e0d\u662f\u3002</p>\n\n<p>\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u53ea\u9700\u8981\u8fd4\u56de \u7b54\u6848 mod 10<sup>9</sup>&nbsp;+ 7 \u7684\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> n = 3, k = 0\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> \n\u53ea\u6709\u6570\u7ec4 [1,2,3] \u5305\u542b\u4e86\u4ece1\u52303\u7684\u6574\u6570\u5e76\u4e14\u6b63\u597d\u62e5\u6709 0 \u4e2a\u9006\u5e8f\u5bf9\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> n = 3, k = 1\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\u6570\u7ec4 [1,3,2] \u548c [2,1,3] \u90fd\u6709 1 \u4e2a\u9006\u5e8f\u5bf9\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>&nbsp;<code>n</code>&nbsp;\u7684\u8303\u56f4\u662f [1, 1000] \u5e76\u4e14 <code>k</code> \u7684\u8303\u56f4\u662f [0, 1000]\u3002</li>\n</ol>\n",
        "titleZh": "K\u4e2a\u9006\u5e8f\u5bf9\u6570\u7ec4",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Works Applications"
        ]
    },
    {
        "leetId": "630",
        "link": "course-schedule-iii",
        "title": "Course Schedule III",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "25.5%",
        "questionDescription": "<p>There are <code>n</code> different online courses numbered from <code>1</code> to <code>n</code>. Each course has some duration(course length) <code>t</code> and closed on <code>d<sub>th</sub></code> day. A course should be taken <b>continuously</b> for <code>t</code> days and must be finished before or on the <code>d<sub>th</sub></code> day. You will start at the <code>1<sub>st</sub></code> day.</p>\r\n\r\n<p>Given <code>n</code> online courses represented by pairs <code>(t,d)</code>, your task is to find the maximal number of courses that can be taken.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> \r\nThere&#39;re totally 4 courses, but you can take 3 courses at most:\r\nFirst, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.\r\nSecond, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. \r\nThird, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. \r\nThe 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The integer 1 &lt;= d, t, n &lt;= 10,000.</li>\r\n\t<li>You can&#39;t take two courses simultaneously.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u8fd9\u91cc\u6709 <code>n</code> \u95e8\u4e0d\u540c\u7684\u5728\u7ebf\u8bfe\u7a0b\uff0c\u4ed6\u4eec\u6309\u4ece <code>1</code> \u5230 <code>n</code>&nbsp;\u7f16\u53f7\u3002\u6bcf\u4e00\u95e8\u8bfe\u7a0b\u6709\u4e00\u5b9a\u7684\u6301\u7eed\u4e0a\u8bfe\u65f6\u95f4\uff08\u8bfe\u7a0b\u65f6\u95f4\uff09<code>t</code> \u4ee5\u53ca\u5173\u95ed\u65f6\u95f4\u7b2c d<sub>&nbsp;</sub>\u5929\u3002\u4e00\u95e8\u8bfe\u8981\u6301\u7eed\u5b66\u4e60 <code>t</code> \u5929\u76f4\u5230\u7b2c d<span style=\"font-size:10.5px\"> </span>\u5929\u65f6\u8981\u5b8c\u6210\uff0c\u4f60\u5c06\u4f1a\u4ece\u7b2c 1 \u5929\u5f00\u59cb\u3002</p>\n\n<p>\u7ed9\u51fa <code>n</code> \u4e2a\u5728\u7ebf\u8bfe\u7a0b\u7528 <code>(t, d)</code> \u5bf9\u8868\u793a\u3002\u4f60\u7684\u4efb\u52a1\u662f\u627e\u51fa\u6700\u591a\u53ef\u4ee5\u4fee\u51e0\u95e8\u8bfe\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \n\u8fd9\u91cc\u4e00\u5171\u6709 4 \u95e8\u8bfe\u7a0b, \u4f46\u662f\u4f60\u6700\u591a\u53ef\u4ee5\u4fee 3 \u95e8:\n\u9996\u5148, \u4fee\u7b2c\u4e00\u95e8\u8bfe\u65f6, \u5b83\u8981\u8017\u8d39 100 \u5929\uff0c\u4f60\u4f1a\u5728\u7b2c 100 \u5929\u5b8c\u6210, \u5728\u7b2c 101 \u5929\u51c6\u5907\u4e0b\u95e8\u8bfe\u3002\n\u7b2c\u4e8c, \u4fee\u7b2c\u4e09\u95e8\u8bfe\u65f6, \u5b83\u4f1a\u8017\u8d39 1000 \u5929\uff0c\u6240\u4ee5\u4f60\u5c06\u5728\u7b2c 1100 \u5929\u7684\u65f6\u5019\u5b8c\u6210\u5b83, \u4ee5\u53ca\u5728\u7b2c 1101 \u5929\u5f00\u59cb\u51c6\u5907\u4e0b\u95e8\u8bfe\u7a0b\u3002\n\u7b2c\u4e09, \u4fee\u7b2c\u4e8c\u95e8\u8bfe\u65f6, \u5b83\u4f1a\u8017\u65f6 200 \u5929\uff0c\u6240\u4ee5\u4f60\u5c06\u4f1a\u5728\u7b2c 1300 \u5929\u65f6\u5b8c\u6210\u5b83\u3002\n\u7b2c\u56db\u95e8\u8bfe\u73b0\u5728\u4e0d\u80fd\u4fee\uff0c\u56e0\u4e3a\u4f60\u5c06\u4f1a\u5728\u7b2c 3300 \u5929\u5b8c\u6210\u5b83\uff0c\u8fd9\u5df2\u7ecf\u8d85\u51fa\u4e86\u5173\u95ed\u65e5\u671f\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li>\u6574\u6570 1 &lt;= d, t, n &lt;= 10,000 \u3002</li>\n\t<li>\u4f60\u4e0d\u80fd\u540c\u65f6\u4fee\u4e24\u95e8\u8bfe\u7a0b\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u8bfe\u7a0b\u8868 III",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google",
            "Works Applications",
            "WAP"
        ]
    },
    {
        "leetId": "631",
        "link": "design-excel-sum-formula",
        "title": "Design Excel Sum Formula",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "34",
        "questionDescription": "\n<p>Your task is to design the basic function of Excel and implement the function of sum formula.  Specifically, you need to implement the following functions:</p>\n<p><code>Excel(int H, char W):</code> This is the constructor. The inputs represents the height and width of the Excel form. <b>H</b> is a positive integer, range from 1 to 26. It represents the height. <b>W</b> is a character range from 'A' to 'Z'. It represents that the width is the number of characters from 'A' to <b>W</b>. The Excel form content is represented by a height * width 2D integer array <code>C</code>, it should be initialized to zero. You should assume that the first row of <code>C</code> starts from 1, and the first column of <code>C</code> starts from 'A'.</p>\n<br/>\n<p><code>void Set(int row, char column, int val):</code> Change the value at <code>C(row, column)</code> to be val.</p>\n<br/>\n<p><code>int Get(int row, char column):</code> Return the value at <code>C(row, column)</code>.</p>\n<br/>\n<p><code>int Sum(int row, char column, List of Strings : numbers):</code> This function calculate and set the value at <code>C(row, column)</code>, where the value should be the sum of cells represented by <code>numbers</code>. This function return the sum result at <code>C(row, column)</code>. This sum formula should exist until this cell is overlapped by another value or another sum formula.</p>\n<p><code>numbers</code> is a list of strings that each string represent a cell or a range of cells. If the string represent a single cell, then it has the following format : <code>ColRow</code>. For example, \"F7\" represents the cell at (7, F). </p>\n<p>If the string represent a range of cells, then it has the following format : <code>ColRow1:ColRow2</code>. The range will always be a rectangle, and ColRow1 represent the position of the top-left cell, and ColRow2 represents the position of the bottom-right cell. </p>\n<br/>\n<p><b>Example 1:</b><br/>\n</p><pre>Excel(3,\"C\"); \n// construct a 3*3 2D array with all zero.\n//   A B C\n// 1 0 0 0\n// 2 0 0 0\n// 3 0 0 0\n\nSet(1, \"A\", 2);\n// set C(1,\"A\") to be 2.\n//   A B C\n// 1 2 0 0\n// 2 0 0 0\n// 3 0 0 0\n\nSum(3, \"C\", [\"A1\", \"A1:B2\"]);\n// set C(3,\"C\") to be the sum of value at C(1,\"A\") and the values sum of the rectangle range whose top-left cell is C(1,\"A\") and bottom-right cell is C(2,\"B\"). Return 4. \n//   A B C\n// 1 2 0 0\n// 2 0 0 0\n// 3 0 0 4\n\nSet(2, \"B\", 2);\n// set C(2,\"B\") to be 2. Note C(3, \"C\") should also be changed.\n//   A B C\n// 1 2 0 0\n// 2 0 2 0\n// 3 0 0 6\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>You could assume that there won't be any circular sum reference. For example, A1 = sum(B1) and B1 = sum(A1).</li>\n<li> The test cases are using double-quotes to represent a character.</li>\n<li>Please remember to <b>RESET</b> your class variables declared in class Excel, as static/class variables are <b>persisted across multiple test cases</b>. Please see <a href=\"https://leetcode.com/faq/#different-output\">here</a> for more details.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Your task is to design the basic function of Excel and implement the function of sum formula.  Specifically, you need to implement the following functions:</p>\n<p><code>Excel(int H, char W):</code> This is the constructor. The inputs represents the height and width of the Excel form. <b>H</b> is a positive integer, range from 1 to 26. It represents the height. <b>W</b> is a character range from 'A' to 'Z'. It represents that the width is the number of characters from 'A' to <b>W</b>. The Excel form content is represented by a height * width 2D integer array <code>C</code>, it should be initialized to zero. You should assume that the first row of <code>C</code> starts from 1, and the first column of <code>C</code> starts from 'A'.</p>\n<br/>\n<p><code>void Set(int row, char column, int val):</code> Change the value at <code>C(row, column)</code> to be val.</p>\n<br/>\n<p><code>int Get(int row, char column):</code> Return the value at <code>C(row, column)</code>.</p>\n<br/>\n<p><code>int Sum(int row, char column, List of Strings : numbers):</code> This function calculate and set the value at <code>C(row, column)</code>, where the value should be the sum of cells represented by <code>numbers</code>. This function return the sum result at <code>C(row, column)</code>. This sum formula should exist until this cell is overlapped by another value or another sum formula.</p>\n<p><code>numbers</code> is a list of strings that each string represent a cell or a range of cells. If the string represent a single cell, then it has the following format : <code>ColRow</code>. For example, \"F7\" represents the cell at (7, F). </p>\n<p>If the string represent a range of cells, then it has the following format : <code>ColRow1:ColRow2</code>. The range will always be a rectangle, and ColRow1 represent the position of the top-left cell, and ColRow2 represents the position of the bottom-right cell. </p>\n<br/>\n<p><b>Example 1:</b><br/>\n</p><pre>Excel(3,\"C\"); \n// construct a 3*3 2D array with all zero.\n//   A B C\n// 1 0 0 0\n// 2 0 0 0\n// 3 0 0 0\n\nSet(1, \"A\", 2);\n// set C(1,\"A\") to be 2.\n//   A B C\n// 1 2 0 0\n// 2 0 0 0\n// 3 0 0 0\n\nSum(3, \"C\", [\"A1\", \"A1:B2\"]);\n// set C(3,\"C\") to be the sum of value at C(1,\"A\") and the values sum of the rectangle range whose top-left cell is C(1,\"A\") and bottom-right cell is C(2,\"B\"). Return 4. \n//   A B C\n// 1 2 0 0\n// 2 0 0 0\n// 3 0 0 4\n\nSet(2, \"B\", 2);\n// set C(2,\"B\") to be 2. Note C(3, \"C\") should also be changed.\n//   A B C\n// 1 2 0 0\n// 2 0 2 0\n// 3 0 0 6\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>You could assume that there won't be any circular sum reference. For example, A1 = sum(B1) and B1 = sum(A1).</li>\n<li> The test cases are using double-quotes to represent a character.</li>\n<li>Please remember to <b>RESET</b> your class variables declared in class Excel, as static/class variables are <b>persisted across multiple test cases</b>. Please see <a href=\"https://leetcode.com/faq/#different-output\">here</a> for more details.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Amazon",
            "Microsoft"
        ]
    },
    {
        "leetId": "632",
        "link": "smallest-range",
        "title": "Smallest Range",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "41.0%",
        "questionDescription": "<p>You have <code>k</code> lists of sorted integers in ascending order. Find the <b>smallest</b> range that includes at least one number from each of the <code>k</code> lists. </p>\r\n\r\n<p>We define the range [a,b] is smaller than range [c,d] if <code>b-a < d-c</code> or <code>a < c</code> if <code>b-a == d-c</code>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>[[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]\r\n<b>Output:</b> [20,24]\r\n<b>Explanation:</b> \r\nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\r\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\r\nList 3: [5, 18, 22, 30], 22 is in range [20,24].\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b><br/>\r\n<ol>\r\n<li>The given list may contain duplicates, so ascending order means >= here.</li>\r\n<li>1 <= <code>k</code> <= 3500</li>\r\n<li> -10<sup>5</sup> <= <code>value of elements</code> <= 10<sup>5</sup>.</li>\r\n<li><b>For Java users, please note that the input type has been changed to List&lt;List&lt;Integer&gt;&gt;. And after you reset the code template, you'll see this point.</b></li>\r\n</ol>\r\n<br/>\r\n</p>",
        "questionDescriptionZh": "<p>\u4f60\u6709&nbsp;<code>k</code>&nbsp;\u4e2a\u5347\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4\u3002\u627e\u5230\u4e00\u4e2a<strong>\u6700\u5c0f</strong>\u533a\u95f4\uff0c\u4f7f\u5f97&nbsp;<code>k</code>&nbsp;\u4e2a\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5217\u8868\u81f3\u5c11\u6709\u4e00\u4e2a\u6570\u5305\u542b\u5728\u5176\u4e2d\u3002</p>\n\n<p>\u6211\u4eec\u5b9a\u4e49\u5982\u679c&nbsp;<code>b-a &lt; d-c</code>&nbsp;\u6216\u8005\u5728&nbsp;<code>b-a == d-c</code>&nbsp;\u65f6&nbsp;<code>a &lt; c</code>\uff0c\u5219\u533a\u95f4 [a,b] \u6bd4 [c,d] \u5c0f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>[[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]\n<strong>\u8f93\u51fa:</strong> [20,24]\n<strong>\u89e3\u91ca:</strong> \n\u5217\u8868 1\uff1a[4, 10, 15, 24, 26]\uff0c24 \u5728\u533a\u95f4 [20,24] \u4e2d\u3002\n\u5217\u8868 2\uff1a[0, 9, 12, 20]\uff0c20 \u5728\u533a\u95f4 [20,24] \u4e2d\u3002\n\u5217\u8868 3\uff1a[5, 18, 22, 30]\uff0c22 \u5728\u533a\u95f4 [20,24] \u4e2d\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u7684\u5217\u8868\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u5347\u5e8f\u8868\u793a &gt;= \u3002</li>\n\t<li>1 &lt;= <code>k</code> &lt;= 3500</li>\n\t<li>-10<sup>5</sup> &lt;= <code>\u5143\u7d20\u7684\u503c</code>&nbsp;&lt;= 10<sup>5</sup></li>\n\t<li><strong>\u5bf9\u4e8e\u4f7f\u7528Java\u7684\u7528\u6237\uff0c\u8bf7\u6ce8\u610f\u4f20\u5165\u7c7b\u578b\u5df2\u4fee\u6539\u4e3aList&lt;List&lt;Integer&gt;&gt;\u3002\u91cd\u7f6e\u4ee3\u7801\u6a21\u677f\u540e\u53ef\u4ee5\u770b\u5230\u8fd9\u9879\u6539\u52a8\u3002</strong></li>\n</ol>\n",
        "titleZh": "\u6700\u5c0f\u533a\u95f4",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Lyft",
            "Pinterest"
        ]
    },
    {
        "leetId": "633",
        "link": "sum-of-square-numbers",
        "title": "Sum of Square Numbers",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "29.9%",
        "questionDescription": "<p>Given a non-negative integer <code>c</code>, your task is to decide whether there&#39;re two integers <code>a</code> and <code>b</code> such that a<sup>2</sup> + b<sup>2</sup> = c.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 5\r\n<b>Output:</b> True\r\n<b>Explanation:</b> 1 * 1 + 2 * 2 = 5\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 3\r\n<b>Output:</b> False\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570&nbsp;<code>c</code>&nbsp;\uff0c\u4f60\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u6574\u6570 <code>a</code> \u548c <code>b</code>\uff0c\u4f7f\u5f97&nbsp;a<sup>2</sup> + b<sup>2</sup> = c\u3002</p>\n\n<p><strong>\u793a\u4f8b1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 5\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong> 1 * 1 + 2 * 2 = 5\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 3\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n",
        "titleZh": "\u5e73\u65b9\u6570\u4e4b\u548c",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Facebook",
            "LinkedIn"
        ]
    },
    {
        "leetId": "634",
        "link": "find-the-derangement-of-an-array",
        "title": "Find the Derangement of An Array",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n<p>\nIn combinatorial mathematics, a derangement is a permutation of the elements of a set, such that no element appears in its original position.\n</p>\n<p>\nThere's originally an array consisting of <code>n</code> integers from 1 to <code>n</code> in ascending order, you need to find the number of derangement it can generate.\n</p>\n<p>\nAlso, since the answer may be very large, you should return the output mod 10<sup>9</sup> + 7.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> 3\n<b>Output:</b> 2\n<b>Explanation:</b> The original array is [1,2,3]. The two derangements are [2,3,1] and [3,1,2].\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n<code>n</code> is in the range of [1, 10<sup>6</sup>].\n</p>\n",
        "questionDescriptionZh": "\n<p>\nIn combinatorial mathematics, a derangement is a permutation of the elements of a set, such that no element appears in its original position.\n</p>\n<p>\nThere's originally an array consisting of <code>n</code> integers from 1 to <code>n</code> in ascending order, you need to find the number of derangement it can generate.\n</p>\n<p>\nAlso, since the answer may be very large, you should return the output mod 10<sup>9</sup> + 7.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> 3\n<b>Output:</b> 2\n<b>Explanation:</b> The original array is [1,2,3]. The two derangements are [2,3,1] and [3,1,2].\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n<code>n</code> is in the range of [1, 10<sup>6</sup>].\n</p>\n",
        "companies": [
            "IXL"
        ]
    },
    {
        "leetId": "635",
        "link": "design-log-storage-system",
        "title": "Design Log Storage System",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "43",
        "questionDescription": "\n<p>You are given several logs that each log contains a unique id and timestamp. Timestamp is a string that has the following format: <code>Year:Month:Day:Hour:Minute:Second</code>, for example, <code>2017:01:01:23:59:59</code>. All domains are zero-padded decimal numbers. </p>\n<p>Design a log storage system to implement the following functions:</p>\n<p><code>void Put(int id, string timestamp)</code>: Given a log's unique id and timestamp, store the log in your storage system.</p>\n<br/>\n<p><code>int[] Retrieve(String start, String end, String granularity)</code>: Return the id of logs whose timestamps are within the range from start to end. Start and end all have the same format as timestamp. However, granularity means the time level for consideration. For example, start = \"2017:01:01:23:59:59\", end = \"2017:01:02:23:59:59\", granularity = \"Day\", it means that we need to find the logs within the range from Jan. 1st 2017 to Jan. 2nd 2017.</p>\n<p><b>Example 1:</b><br/>\n</p><pre>put(1, \"2017:01:01:23:59:59\");\nput(2, \"2017:01:01:22:59:59\");\nput(3, \"2016:01:01:00:00:00\");\nretrieve(\"2016:01:01:01:01:01\",\"2017:01:01:23:00:00\",\"Year\"); // return [1,2,3], because you need to return all logs within 2016 and 2017.\nretrieve(\"2016:01:01:01:01:01\",\"2017:01:01:23:00:00\",\"Hour\"); // return [1,2], because you need to return all logs start from 2016:01:01:01 to 2017:01:01:23, where log 3 is left outside the range.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>There will be at most 300 operations of Put or Retrieve.</li>\n<li>Year ranges from [2000,2017]. Hour ranges from [00,23].</li>\n<li>Output for Retrieve has no order required.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>You are given several logs that each log contains a unique id and timestamp. Timestamp is a string that has the following format: <code>Year:Month:Day:Hour:Minute:Second</code>, for example, <code>2017:01:01:23:59:59</code>. All domains are zero-padded decimal numbers. </p>\n<p>Design a log storage system to implement the following functions:</p>\n<p><code>void Put(int id, string timestamp)</code>: Given a log's unique id and timestamp, store the log in your storage system.</p>\n<br/>\n<p><code>int[] Retrieve(String start, String end, String granularity)</code>: Return the id of logs whose timestamps are within the range from start to end. Start and end all have the same format as timestamp. However, granularity means the time level for consideration. For example, start = \"2017:01:01:23:59:59\", end = \"2017:01:02:23:59:59\", granularity = \"Day\", it means that we need to find the logs within the range from Jan. 1st 2017 to Jan. 2nd 2017.</p>\n<p><b>Example 1:</b><br/>\n</p><pre>put(1, \"2017:01:01:23:59:59\");\nput(2, \"2017:01:01:22:59:59\");\nput(3, \"2016:01:01:00:00:00\");\nretrieve(\"2016:01:01:01:01:01\",\"2017:01:01:23:00:00\",\"Year\"); // return [1,2,3], because you need to return all logs within 2016 and 2017.\nretrieve(\"2016:01:01:01:01:01\",\"2017:01:01:23:00:00\",\"Hour\"); // return [1,2], because you need to return all logs start from 2016:01:01:01 to 2017:01:01:23, where log 3 is left outside the range.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>There will be at most 300 operations of Put or Retrieve.</li>\n<li>Year ranges from [2000,2017]. Hour ranges from [00,23].</li>\n<li>Output for Retrieve has no order required.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Snapchat",
            "Twitter",
            "Zenefits"
        ]
    },
    {
        "leetId": "636",
        "link": "exclusive-time-of-functions",
        "title": "Exclusive Time of Functions",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "43.5%",
        "questionDescription": "<p>Given the running logs of <b>n</b> functions that are executed in a nonpreemptive single threaded CPU, find the exclusive time of these functions. </p>\r\n\r\n<p>Each function has a unique id, start from <b>0</b> to <b>n-1</b>. A function may be called recursively or by another function.</p>\r\n\r\n<p>A log is a string has this format : <code>function_id:start_or_end:timestamp</code>. For example, <code>\"0:start:0\"</code> means function 0 starts from the very beginning of time 0. <code>\"0:end:0\"</code> means function 0 ends to the very end of time 0. </p>\r\n\r\n<p>Exclusive time of a function is defined as the time spent within this function, the time spent by calling other functions should not be considered as this function's exclusive time. You should return the exclusive time of each function sorted by their function id.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\nn = 2\r\nlogs = \r\n[\"0:start:0\",\r\n \"1:start:2\",\r\n \"1:end:5\",\r\n \"0:end:6\"]\r\n<b>Output:</b>[3, 4]\r\n<b>Explanation:</b>\r\nFunction 0 starts at time 0, then it executes 2 units of time and reaches the end of time 1. \r\nNow function 0 <b>calls function 1</b>, function 1 starts at time 2, executes 4 units of time and end at time 5.\r\nFunction 0 is running again at time 6, and also end at the time 6, thus executes 1 unit of time. \r\nSo function 0 totally execute 2 + 1 = 3 units of time, and function 1 totally execute 4 units of time.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>Input logs will be sorted by timestamp, NOT log id.</li>\r\n<li>Your output should be sorted by function id, which means the 0th element of your output corresponds to the exclusive time of function 0.</li>\r\n<li>Two functions won't start or end at the same time.</li>\r\n<li>Functions could be called recursively, and will always end.</li>\r\n<li>1 <= n <= 100</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e00\u4e2a\u975e\u62a2\u5360\u5355\u7ebf\u7a0bCPU\u7684 <strong>n </strong>\u4e2a\u51fd\u6570\u8fd0\u884c\u65e5\u5fd7\uff0c\u627e\u5230\u51fd\u6570\u7684\u72ec\u5360\u65f6\u95f4\u3002</p>\n\n<p>\u6bcf\u4e2a\u51fd\u6570\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 Id\uff0c\u4ece <strong>0</strong> \u5230<strong> n-1</strong>\uff0c\u51fd\u6570\u53ef\u80fd\u4f1a\u9012\u5f52\u8c03\u7528\u6216\u8005\u88ab\u5176\u4ed6\u51fd\u6570\u8c03\u7528\u3002</p>\n\n<p>\u65e5\u5fd7\u662f\u5177\u6709\u4ee5\u4e0b\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\uff1a<code>function_id\uff1astart_or_end\uff1atimestamp</code>\u3002\u4f8b\u5982\uff1a<code>&quot;0:start:0&quot;</code>&nbsp;\u8868\u793a\u51fd\u6570 0 \u4ece 0 \u65f6\u523b\u5f00\u59cb\u8fd0\u884c\u3002<code>&quot;0:end:0&quot;</code>&nbsp;\u8868\u793a\u51fd\u6570 0 \u5728 0 \u65f6\u523b\u7ed3\u675f\u3002</p>\n\n<p>\u51fd\u6570\u7684\u72ec\u5360\u65f6\u95f4\u5b9a\u4e49\u662f\u5728\u8be5\u65b9\u6cd5\u4e2d\u82b1\u8d39\u7684\u65f6\u95f4\uff0c\u8c03\u7528\u5176\u4ed6\u51fd\u6570\u82b1\u8d39\u7684\u65f6\u95f4\u4e0d\u7b97\u8be5\u51fd\u6570\u7684\u72ec\u5360\u65f6\u95f4\u3002\u4f60\u9700\u8981\u6839\u636e\u51fd\u6570\u7684 Id \u6709\u5e8f\u5730\u8fd4\u56de\u6bcf\u4e2a\u51fd\u6570\u7684\u72ec\u5360\u65f6\u95f4\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nn = 2\nlogs = \n[&quot;0:start:0&quot;,\n &quot;1:start:2&quot;,\n &quot;1:end:5&quot;,\n &quot;0:end:6&quot;]\n<strong>\u8f93\u51fa:</strong>[3, 4]\n<strong>\u8bf4\u660e\uff1a</strong>\n\u51fd\u6570 0 \u5728\u65f6\u523b 0 \u5f00\u59cb\uff0c\u5728\u6267\u884c\u4e86  2\u4e2a\u65f6\u95f4\u5355\u4f4d\u7ed3\u675f\u4e8e\u65f6\u523b 1\u3002\n\u73b0\u5728\u51fd\u6570 0 \u8c03\u7528\u51fd\u6570 1\uff0c\u51fd\u6570 1 \u5728\u65f6\u523b 2 \u5f00\u59cb\uff0c\u6267\u884c 4 \u4e2a\u65f6\u95f4\u5355\u4f4d\u540e\u7ed3\u675f\u4e8e\u65f6\u523b 5\u3002\n\u51fd\u6570 0 \u518d\u6b21\u5728\u65f6\u523b 6 \u5f00\u59cb\u6267\u884c\uff0c\u5e76\u5728\u65f6\u523b 6 \u7ed3\u675f\u8fd0\u884c\uff0c\u4ece\u800c\u6267\u884c\u4e86 1 \u4e2a\u65f6\u95f4\u5355\u4f4d\u3002\n\u6240\u4ee5\u51fd\u6570 0 \u603b\u5171\u7684\u6267\u884c\u4e86 2 +1 =3 \u4e2a\u65f6\u95f4\u5355\u4f4d\uff0c\u51fd\u6570 1 \u603b\u5171\u6267\u884c\u4e86 4 \u4e2a\u65f6\u95f4\u5355\u4f4d\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u65e5\u5fd7\u4f1a\u6839\u636e\u65f6\u95f4\u6233\u6392\u5e8f\uff0c\u800c\u4e0d\u662f\u6839\u636e\u65e5\u5fd7Id\u6392\u5e8f\u3002</li>\n\t<li>\u4f60\u7684\u8f93\u51fa\u4f1a\u6839\u636e\u51fd\u6570Id\u6392\u5e8f\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u4f60\u7684\u8f93\u51fa\u6570\u7ec4\u4e2d\u5e8f\u53f7\u4e3a 0 \u7684\u5143\u7d20\u76f8\u5f53\u4e8e\u51fd\u6570 0 \u7684\u6267\u884c\u65f6\u95f4\u3002</li>\n\t<li>\u4e24\u4e2a\u51fd\u6570\u4e0d\u4f1a\u5728\u540c\u65f6\u5f00\u59cb\u6216\u7ed3\u675f\u3002</li>\n\t<li>\u51fd\u6570\u5141\u8bb8\u88ab\u9012\u5f52\u8c03\u7528\uff0c\u76f4\u5230\u8fd0\u884c\u7ed3\u675f\u3002</li>\n\t<li>1 &lt;= n &lt;= 100</li>\n</ol>\n",
        "titleZh": "\u51fd\u6570\u7684\u72ec\u5360\u65f6\u95f4",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Apple",
            "LinkedIn"
        ]
    },
    {
        "leetId": "637",
        "link": "average-of-levels-in-binary-tree",
        "title": "Average of Levels in Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "58.3%",
        "questionDescription": "Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n<b>Output:</b> [3, 14.5, 11]\r\n<b>Explanation:</b>\r\nThe average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The range of node's value is in the range of 32-bit signed integer.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u4e8c\u53c9\u6811, \u8fd4\u56de\u4e00\u4e2a\u7531\u6bcf\u5c42\u8282\u70b9\u5e73\u5747\u503c\u7ec4\u6210\u7684\u6570\u7ec4.</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n<strong>\u8f93\u51fa:</strong> [3, 14.5, 11]\n<strong>\u89e3\u91ca:</strong>\n\u7b2c0\u5c42\u7684\u5e73\u5747\u503c\u662f 3,  \u7b2c1\u5c42\u662f 14.5, \u7b2c2\u5c42\u662f 11. \u56e0\u6b64\u8fd4\u56de [3, 14.5, 11].\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u8282\u70b9\u503c\u7684\u8303\u56f4\u572832\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u5185\u3002</li>\n</ol>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u5c42\u5e73\u5747\u503c",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook"
        ]
    },
    {
        "leetId": "638",
        "link": "shopping-offers",
        "title": "Shopping Offers",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "53.6%",
        "questionDescription": "<p>\r\nIn LeetCode Store, there are some kinds of items to sell. Each item has a price.\r\n</p>\r\n\r\n<p>\r\nHowever, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\r\n</p>\r\n\r\n<p>\r\nYou are given the each item's price, a set of special offers, and the number we need to buy for each item.\r\nThe job is to output the lowest price you have to pay for <b>exactly</b> certain items as given, where you could make optimal use of the special offers.\r\n</p>\r\n\r\n<p>\r\nEach special offer is represented in the form of an array, the last number represents the price you need to pay for this special offer, other numbers represents how many specific items you could get if you buy this offer.\r\n</p>\r\n\r\n<p>You could use any of special offers as many times as you want.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [2,5], [[3,0,5],[1,2,10]], [3,2]\r\n<b>Output:</b> 14\r\n<b>Explanation:</b> \r\nThere are two kinds of items, A and B. Their prices are $2 and $5 respectively. \r\nIn special offer 1, you can pay $5 for 3A and 0B\r\nIn special offer 2, you can pay $10 for 1A and 2B. \r\nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]\r\n<b>Output:</b> 11\r\n<b>Explanation:</b> \r\nThe price of A is $2, and $3 for B, $4 for C. \r\nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \r\nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \r\nYou cannot add more items, though only $9 for 2A ,2B and 1C.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\n<ol>\r\n<li>There are at most 6 kinds of items, 100 special offers.</li>\r\n<li>For each item, you need to buy at most 6 of them.</li>\r\n<li>You are <b>not</b> allowed to buy more items than you want, even if that would lower the overall price.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u5728LeetCode\u5546\u5e97\u4e2d\uff0c \u6709\u8bb8\u591a\u5728\u552e\u7684\u7269\u54c1\u3002</p>\n\n<p>\u7136\u800c\uff0c\u4e5f\u6709\u4e00\u4e9b\u5927\u793c\u5305\uff0c\u6bcf\u4e2a\u5927\u793c\u5305\u4ee5\u4f18\u60e0\u7684\u4ef7\u683c\u6346\u7ed1\u9500\u552e\u4e00\u7ec4\u7269\u54c1\u3002</p>\n\n<p>\u73b0\u7ed9\u5b9a\u6bcf\u4e2a\u7269\u54c1\u7684\u4ef7\u683c\uff0c\u6bcf\u4e2a\u5927\u793c\u5305\u5305\u542b\u7269\u54c1\u7684\u6e05\u5355\uff0c\u4ee5\u53ca\u5f85\u8d2d\u7269\u54c1\u6e05\u5355\u3002\u8bf7\u8f93\u51fa<strong>\u786e\u5207</strong>\u5b8c\u6210\u5f85\u8d2d\u6e05\u5355\u7684\u6700\u4f4e\u82b1\u8d39\u3002</p>\n\n<p>\u6bcf\u4e2a\u5927\u793c\u5305\u7684\u7531\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u4e00\u7ec4\u6570\u636e\u63cf\u8ff0\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4ee3\u8868\u5927\u793c\u5305\u7684\u4ef7\u683c\uff0c\u5176\u4ed6\u6570\u5b57\u5206\u522b\u8868\u793a\u5185\u542b\u7684\u5176\u4ed6\u79cd\u7c7b\u7269\u54c1\u7684\u6570\u91cf\u3002</p>\n\n<p>\u4efb\u610f\u5927\u793c\u5305\u53ef\u65e0\u9650\u6b21\u8d2d\u4e70\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [2,5], [[3,0,5],[1,2,10]], [3,2]\n<strong>\u8f93\u51fa:</strong> 14\n<strong>\u89e3\u91ca:</strong> \n\u6709A\u548cB\u4e24\u79cd\u7269\u54c1\uff0c\u4ef7\u683c\u5206\u522b\u4e3a&yen;2\u548c&yen;5\u3002\n\u5927\u793c\u53051\uff0c\u4f60\u53ef\u4ee5\u4ee5&yen;5\u7684\u4ef7\u683c\u8d2d\u4e703A\u548c0B\u3002\n\u5927\u793c\u53052\uff0c \u4f60\u53ef\u4ee5\u4ee5&yen;10\u7684\u4ef7\u683c\u8d2d\u4e701A\u548c2B\u3002\n\u4f60\u9700\u8981\u8d2d\u4e703\u4e2aA\u548c2\u4e2aB\uff0c \u6240\u4ee5\u4f60\u4ed8\u4e86&yen;10\u8d2d\u4e70\u4e861A\u548c2B\uff08\u5927\u793c\u53052\uff09\uff0c\u4ee5\u53ca&yen;4\u8d2d\u4e702A\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]\n<strong>\u8f93\u51fa:</strong> 11\n<strong>\u89e3\u91ca:</strong> \nA\uff0cB\uff0cC\u7684\u4ef7\u683c\u5206\u522b\u4e3a&yen;2\uff0c&yen;3\uff0c&yen;4.\n\u4f60\u53ef\u4ee5\u7528&yen;4\u8d2d\u4e701A\u548c2B\uff0c\u4e5f\u53ef\u4ee5\u7528&yen;9\u8d2d\u4e702A\uff0c2B\u548c1C\u3002\n\u4f60\u9700\u8981\u4e701A\uff0c2B\u548c1C\uff0c\u6240\u4ee5\u4f60\u4ed8\u4e86&yen;4\u4e70\u4e861A\u548c1B\uff08\u5927\u793c\u53051\uff09\uff0c\u4ee5\u53ca&yen;3\u8d2d\u4e701B\uff0c &yen;4\u8d2d\u4e701C\u3002\n\u4f60\u4e0d\u53ef\u4ee5\u8d2d\u4e70\u8d85\u51fa\u5f85\u8d2d\u6e05\u5355\u7684\u7269\u54c1\uff0c\u5c3d\u7ba1\u8d2d\u4e70\u5927\u793c\u53052\u66f4\u52a0\u4fbf\u5b9c\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u6700\u591a6\u79cd\u7269\u54c1\uff0c 100\u79cd\u5927\u793c\u5305\u3002</li>\n\t<li>\u6bcf\u79cd\u7269\u54c1\uff0c\u4f60\u6700\u591a\u53ea\u9700\u8981\u8d2d\u4e706\u4e2a\u3002</li>\n\t<li>\u4f60\u4e0d\u53ef\u4ee5\u8d2d\u4e70\u8d85\u51fa\u5f85\u8d2d\u6e05\u5355\u7684\u7269\u54c1\uff0c\u5373\u4f7f\u66f4\u4fbf\u5b9c\u3002</li>\n</ol>\n",
        "titleZh": "\u5927\u793c\u5305",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "639",
        "link": "decode-ways-ii",
        "title": "Decode Ways II",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "22.5%",
        "questionDescription": "<p>\r\nA message containing letters from <code>A-Z</code> is being encoded to numbers using the following mapping way:\r\n</p>\r\n\r\n<pre>\r\n'A' -> 1\r\n'B' -> 2\r\n...\r\n'Z' -> 26\r\n</pre>\r\n\r\n<p>\r\nBeyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.\r\n</p>\r\n\r\n\r\n<p>\r\nGiven the encoded message containing digits and the character '*', return the total number of ways to decode it.\r\n</p>\r\n\r\n<p>\r\nAlso, since the answer may be very large, you should return the output mod 10<sup>9</sup> + 7.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"*\"\r\n<b>Output:</b> 9\r\n<b>Explanation:</b> The encoded message can be decoded to the string: \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"1*\"\r\n<b>Output:</b> 9 + 9 = 18\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of the input string will fit in range [1, 10<sup>5</sup>].</li>\r\n<li>The input string will only contain the character '*' and digits '0' - '9'.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u4e00\u6761\u5305\u542b\u5b57\u6bcd&nbsp;<code>A-Z</code> \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u7684\u65b9\u5f0f\u8fdb\u884c\u4e86\u7f16\u7801\uff1a</p>\n\n<pre>&#39;A&#39; -&gt; 1\n&#39;B&#39; -&gt; 2\n...\n&#39;Z&#39; -&gt; 26\n</pre>\n\n<p>\u9664\u4e86\u4e0a\u8ff0\u7684\u6761\u4ef6\u4ee5\u5916\uff0c\u73b0\u5728\u52a0\u5bc6\u5b57\u7b26\u4e32\u53ef\u4ee5\u5305\u542b\u5b57\u7b26 &#39;*&#39;\u4e86\uff0c\u5b57\u7b26&#39;*&#39;\u53ef\u4ee5\u88ab\u5f53\u505a1\u52309\u5f53\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u6570\u5b57\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u6761\u5305\u542b\u6570\u5b57\u548c\u5b57\u7b26&#39;*&#39;\u7684\u52a0\u5bc6\u4fe1\u606f\uff0c\u8bf7\u786e\u5b9a\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002</p>\n\n<p>\u540c\u65f6\uff0c\u7531\u4e8e\u7ed3\u679c\u503c\u53ef\u80fd\u4f1a\u76f8\u5f53\u7684\u5927\uff0c\u6240\u4ee5\u4f60\u5e94\u5f53\u5bf910<sup>9</sup>&nbsp;+ 7\u53d6\u6a21\u3002\uff08\u7ffb\u8bd1\u8005\u6807\u6ce8\uff1a\u6b64\u5904\u53d6\u6a21\u4e3b\u8981\u662f\u4e3a\u4e86\u9632\u6b62\u6ea2\u51fa\uff09</p>\n\n<p><strong>\u793a\u4f8b 1 :</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;*&quot;\n<strong>\u8f93\u51fa:</strong> 9\n<strong>\u89e3\u91ca:</strong> \u52a0\u5bc6\u7684\u4fe1\u606f\u53ef\u4ee5\u88ab\u89e3\u5bc6\u4e3a: &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;.\n</pre>\n\n<p><strong>\u793a\u4f8b 2 :</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;1*&quot;\n<strong>\u8f93\u51fa:</strong> 9 + 9 = 18\uff08\u7ffb\u8bd1\u8005\u6807\u6ce8\uff1a\u8fd9\u91cc1*\u53ef\u4ee5\u5206\u89e3\u4e3a1,* \u6216\u8005\u5f53\u505a1*\u6765\u5904\u7406\uff0c\u6240\u4ee5\u7ed3\u679c\u662f9+9=18\uff09\n</pre>\n\n<p><strong>\u8bf4\u660e :</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u8303\u56f4\u662f [1, 10<sup>5</sup>]\u3002</li>\n\t<li>\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53ea\u4f1a\u5305\u542b\u5b57\u7b26 &#39;*&#39; \u548c \u6570\u5b57&#39;0&#39; - &#39;9&#39;\u3002</li>\n</ol>\n",
        "titleZh": "\u89e3\u7801\u65b9\u6cd5 2",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Facebook"
        ]
    },
    {
        "leetId": "640",
        "link": "solve-the-equation",
        "title": "Solve the Equation",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "36.5%",
        "questionDescription": "<p>\r\nSolve a given equation and return the value of <code>x</code> in the form of string \"x=#value\". The equation contains only '+', '-' operation, the variable <code>x</code> and its coefficient.\r\n</p>\r\n\r\n<p>\r\nIf there is no solution for the equation, return \"No solution\".\r\n</p>\r\n<p>\r\nIf there are infinite solutions for the equation, return \"Infinite solutions\".\r\n</p>\r\n<p>\r\nIf there is exactly one solution for the equation, we ensure that the value of <code>x</code> is an integer.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"x+5-3+x=6+x-2\"\r\n<b>Output:</b> \"x=2\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"x=x\"\r\n<b>Output:</b> \"Infinite solutions\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"2x=x\"\r\n<b>Output:</b> \"x=0\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 4:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"2x+3x-6x=x+2\"\r\n<b>Output:</b> \"x=-1\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 5:</b><br/>\r\n<pre>\r\n<b>Input:</b> \"x=x+2\"\r\n<b>Output:</b> \"No solution\"\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u6c42\u89e3\u4e00\u4e2a\u7ed9\u5b9a\u7684\u65b9\u7a0b\uff0c\u5c06<code>x</code>\u4ee5\u5b57\u7b26\u4e32&quot;x=#value&quot;\u7684\u5f62\u5f0f\u8fd4\u56de\u3002\u8be5\u65b9\u7a0b\u4ec5\u5305\u542b&#39;+&#39;\uff0c&#39; - &#39;\u64cd\u4f5c\uff0c\u53d8\u91cf&nbsp;<code>x</code>&nbsp;\u548c\u5176\u5bf9\u5e94\u7cfb\u6570\u3002</p>\n\n<p>\u5982\u679c\u65b9\u7a0b\u6ca1\u6709\u89e3\uff0c\u8bf7\u8fd4\u56de&ldquo;No solution&rdquo;\u3002</p>\n\n<p>\u5982\u679c\u65b9\u7a0b\u6709\u65e0\u9650\u89e3\uff0c\u5219\u8fd4\u56de&ldquo;Infinite solutions&rdquo;\u3002</p>\n\n<p>\u5982\u679c\u65b9\u7a0b\u4e2d\u53ea\u6709\u4e00\u4e2a\u89e3\uff0c\u8981\u4fdd\u8bc1\u8fd4\u56de\u503c&nbsp;<code>x</code>&nbsp;\u662f\u4e00\u4e2a\u6574\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;x+5-3+x=6+x-2&quot;\n<strong>\u8f93\u51fa:</strong> &quot;x=2&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;x=x&quot;\n<strong>\u8f93\u51fa:</strong> &quot;Infinite solutions&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;2x=x&quot;\n<strong>\u8f93\u51fa:</strong> &quot;x=0&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;2x+3x-6x=x+2&quot;\n<strong>\u8f93\u51fa:</strong> &quot;x=-1&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 5:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;x=x+2&quot;\n<strong>\u8f93\u51fa:</strong> &quot;No solution&quot;\n</pre>\n",
        "titleZh": "\u6c42\u89e3\u65b9\u7a0b",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Uber"
        ]
    },
    {
        "leetId": "641",
        "link": "design-circular-deque",
        "title": "Design Circular Deque",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "43.1%",
        "questionDescription": "<p>Design your implementation of the circular double-ended queue (deque).</p>\r\n\r\n<p>Your implementation should support following operations:</p>\r\n\r\n<ul>\r\n\t<li><code>MyCircularDeque(k)</code>: Constructor, set the size of the deque to be k.</li>\r\n\t<li><code>insertFront()</code>: Adds an item at the front of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>insertLast()</code>: Adds an item at the rear of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>deleteFront()</code>: Deletes an item from the front of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>deleteLast()</code>: Deletes an item from the rear of Deque. Return true if the operation is successful.</li>\r\n\t<li><code>getFront()</code>: Gets the front item from the Deque. If the deque is empty, return -1.</li>\r\n\t<li><code>getRear()</code>: Gets the last item from Deque. If the deque is empty, return -1.</li>\r\n\t<li><code>isEmpty()</code>: Checks whether Deque is empty or not.&nbsp;</li>\r\n\t<li><code>isFull()</code>: Checks whether Deque is full or not.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nMyCircularDeque circularDeque = new MycircularDeque(3); // set the size to be 3\r\ncircularDeque.insertLast(1);\t\t\t// return true\r\ncircularDeque.insertLast(2);\t\t\t// return true\r\ncircularDeque.insertFront(3);\t\t\t// return true\r\ncircularDeque.insertFront(4);\t\t\t// return false, the queue is full\r\ncircularDeque.getRear();  \t\t\t// return 2\r\ncircularDeque.isFull();\t\t\t\t// return true\r\ncircularDeque.deleteLast();\t\t\t// return true\r\ncircularDeque.insertFront(4);\t\t\t// return true\r\ncircularDeque.getFront();\t\t\t// return 4\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All values will be in the range of [0, 1000].</li>\r\n\t<li>The number of operations will be in the range of&nbsp;[1, 1000].</li>\r\n\t<li>Please do not use the built-in Deque library.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u8bbe\u8ba1\u5b9e\u73b0\u53cc\u7aef\u961f\u5217\u3002<br>\n\u4f60\u7684\u5b9e\u73b0\u9700\u8981\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li>MyCircularDeque(k)\uff1a\u6784\u9020\u51fd\u6570,\u53cc\u7aef\u961f\u5217\u7684\u5927\u5c0f\u4e3ak\u3002</li>\n\t<li>insertFront()\uff1a\u5c06\u4e00\u4e2a\u5143\u7d20\u6dfb\u52a0\u5230\u53cc\u7aef\u961f\u5217\u5934\u90e8\u3002 \u5982\u679c\u64cd\u4f5c\u6210\u529f\u8fd4\u56de true\u3002</li>\n\t<li>insertLast()\uff1a\u5c06\u4e00\u4e2a\u5143\u7d20\u6dfb\u52a0\u5230\u53cc\u7aef\u961f\u5217\u5c3e\u90e8\u3002\u5982\u679c\u64cd\u4f5c\u6210\u529f\u8fd4\u56de true\u3002</li>\n\t<li>deleteFront()\uff1a\u4ece\u53cc\u7aef\u961f\u5217\u5934\u90e8\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002 \u5982\u679c\u64cd\u4f5c\u6210\u529f\u8fd4\u56de true\u3002</li>\n\t<li>deleteLast()\uff1a\u4ece\u53cc\u7aef\u961f\u5217\u5c3e\u90e8\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u64cd\u4f5c\u6210\u529f\u8fd4\u56de true\u3002</li>\n\t<li>getFront()\uff1a\u4ece\u53cc\u7aef\u961f\u5217\u5934\u90e8\u83b7\u5f97\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u53cc\u7aef\u961f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de -1\u3002</li>\n\t<li>getRear()\uff1a\u83b7\u5f97\u53cc\u7aef\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002&nbsp;\u5982\u679c\u53cc\u7aef\u961f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de -1\u3002</li>\n\t<li>isEmpty()\uff1a\u68c0\u67e5\u53cc\u7aef\u961f\u5217\u662f\u5426\u4e3a\u7a7a\u3002</li>\n\t<li>isFull()\uff1a\u68c0\u67e5\u53cc\u7aef\u961f\u5217\u662f\u5426\u6ee1\u4e86\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>MyCircularDeque circularDeque = new MycircularDeque(3); // \u8bbe\u7f6e\u5bb9\u91cf\u5927\u5c0f\u4e3a3\ncircularDeque.insertLast(1);\t\t\t        // \u8fd4\u56de true\ncircularDeque.insertLast(2);\t\t\t        // \u8fd4\u56de true\ncircularDeque.insertFront(3);\t\t\t        // \u8fd4\u56de true\ncircularDeque.insertFront(4);\t\t\t        // \u5df2\u7ecf\u6ee1\u4e86\uff0c\u8fd4\u56de false\ncircularDeque.getRear();  \t\t\t\t// \u8fd4\u56de 2\ncircularDeque.isFull();\t\t\t\t        // \u8fd4\u56de true\ncircularDeque.deleteLast();\t\t\t        // \u8fd4\u56de true\ncircularDeque.insertFront(4);\t\t\t        // \u8fd4\u56de true\ncircularDeque.getFront();\t\t\t\t// \u8fd4\u56de 4\n&nbsp;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u503c\u7684\u8303\u56f4\u4e3a [1, 1000]</li>\n\t<li>\u64cd\u4f5c\u6b21\u6570\u7684\u8303\u56f4\u4e3a [1, 1000]</li>\n\t<li>\u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684\u53cc\u7aef\u961f\u5217\u5e93\u3002</li>\n</ul>\n",
        "titleZh": "\u8bbe\u8ba1\u5faa\u73af\u53cc\u7aef\u961f\u5217",
        "tags": [
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            },
            {
                "tag": "Queue",
                "link": "queue",
                "tagZh": "\u961f\u5217"
            }
        ]
    },
    {
        "leetId": "642",
        "link": "design-search-autocomplete-system",
        "title": "Design Search Autocomplete System",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "60",
        "questionDescription": "\n<p>Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character <code>'#'</code>). For <b>each character</b> they type <b>except '#'</b>, you need to return the <b>top 3</b> historical hot sentences that have prefix the same as the part of sentence already typed. Here are the specific rules:</p>\n<ol>\n<li>The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before. </li>\n<li>The returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same degree of hot, you need to use ASCII-code order (smaller one appears first). </li>\n<li>If less than 3 hot sentences exist, then just return as many as you can.</li>\n<li>When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.</li>\n</ol>\n<p>Your job is to implement the following functions:</p>\n<p>The constructor function:</p>\n<p><code>AutocompleteSystem(String[] sentences, int[] times):</code> This is the constructor. The input is <b>historical data</b>. <code>Sentences</code> is a string array consists of previously typed sentences. <code>Times</code> is the corresponding times a sentence has been typed. Your system should record these historical data.</p>\n<p>Now, the user wants to input a new sentence. The following function will provide the next character the user types: </p>\n<p><code>List&lt;String&gt; input(char c):</code> The input <code>c</code> is the next character typed by the user. The character will only be lower-case letters (<code>'a'</code> to <code>'z'</code>), blank space (<code>' '</code>) or a special character (<code>'#'</code>). Also, the previously typed sentence should be recorded in your system. The output will be the <b>top 3</b> historical hot sentences that have prefix the same as the part of sentence already typed.</p>\n<br/>\n<p><b>Example:</b><br/>\n<b>Operation:</b> AutocompleteSystem([\"i love you\", \"island\",\"ironman\", \"i love leetcode\"], [5,3,2,2])\n<br/>\nThe system have already tracked down the following sentences and their corresponding times:\n<br/>\n<code>\"i love you\"</code> : <code>5</code> times\n<br/>\n<code>\"island\"</code> : <code>3</code> times\n<br/>\n<code>\"ironman\"</code> : <code>2</code> times\n<br/>\n<code>\"i love leetcode\"</code> : <code>2</code> times\n<br/>\nNow, the user begins another search:\n<br/><br/>\n<b>Operation:</b> input('i')\n<br/>\n<b>Output:</b> [\"i love you\", \"island\",\"i love leetcode\"]\n<br/>\n<b>Explanation:</b>\n<br/>\nThere are four sentences that have prefix <code>\"i\"</code>. Among them, \"ironman\" and \"i love leetcode\" have same hot degree. Since <code>' '</code> has ASCII code 32 and <code>'r'</code> has ASCII code 114, \"i love leetcode\" should be in front of \"ironman\". Also we only need to output top 3 hot sentences, so \"ironman\" will be ignored.\n<br/><br/>\n<b>Operation:</b> input(' ')\n<br/>\n<b>Output:</b> [\"i love you\",\"i love leetcode\"]\n<br/>\n<b>Explanation:</b>\n<br/>\nThere are only two sentences that have prefix <code>\"i \"</code>.\n<br/><br/>\n<b>Operation:</b> input('a')\n<br/>\n<b>Output:</b> []\n<br/>\n<b>Explanation:</b>\n<br/>\nThere are no sentences that have prefix <code>\"i a\"</code>.\n<br/><br/>\n<b>Operation:</b> input('#')\n<br/>\n<b>Output:</b> []\n<br/>\n<b>Explanation:</b>\n<br/>\nThe user finished the input, the sentence <code>\"i a\"</code> should be saved as a historical sentence in system. And the following input will be counted as a new search.\n<br/>\n</p>\n<br/>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The input sentence will always start with a letter and end with '#', and only one blank space will exist between two words. </li>\n<li>The number of <b>complete sentences</b> that to be searched won't exceed 100. The length of each sentence including those in the historical data won't exceed 100. </li>\n<li>Please use double-quote instead of single-quote when you write test cases even for a character input.</li>\n<li>Please remember to <b>RESET</b> your class variables declared in class AutocompleteSystem, as static/class variables are <b>persisted across multiple test cases</b>. Please see <a href=\"https://leetcode.com/faq/#different-output\">here</a> for more details.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character <code>'#'</code>). For <b>each character</b> they type <b>except '#'</b>, you need to return the <b>top 3</b> historical hot sentences that have prefix the same as the part of sentence already typed. Here are the specific rules:</p>\n<ol>\n<li>The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before. </li>\n<li>The returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same degree of hot, you need to use ASCII-code order (smaller one appears first). </li>\n<li>If less than 3 hot sentences exist, then just return as many as you can.</li>\n<li>When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.</li>\n</ol>\n<p>Your job is to implement the following functions:</p>\n<p>The constructor function:</p>\n<p><code>AutocompleteSystem(String[] sentences, int[] times):</code> This is the constructor. The input is <b>historical data</b>. <code>Sentences</code> is a string array consists of previously typed sentences. <code>Times</code> is the corresponding times a sentence has been typed. Your system should record these historical data.</p>\n<p>Now, the user wants to input a new sentence. The following function will provide the next character the user types: </p>\n<p><code>List&lt;String&gt; input(char c):</code> The input <code>c</code> is the next character typed by the user. The character will only be lower-case letters (<code>'a'</code> to <code>'z'</code>), blank space (<code>' '</code>) or a special character (<code>'#'</code>). Also, the previously typed sentence should be recorded in your system. The output will be the <b>top 3</b> historical hot sentences that have prefix the same as the part of sentence already typed.</p>\n<br/>\n<p><b>Example:</b><br/>\n<b>Operation:</b> AutocompleteSystem([\"i love you\", \"island\",\"ironman\", \"i love leetcode\"], [5,3,2,2])\n<br/>\nThe system have already tracked down the following sentences and their corresponding times:\n<br/>\n<code>\"i love you\"</code> : <code>5</code> times\n<br/>\n<code>\"island\"</code> : <code>3</code> times\n<br/>\n<code>\"ironman\"</code> : <code>2</code> times\n<br/>\n<code>\"i love leetcode\"</code> : <code>2</code> times\n<br/>\nNow, the user begins another search:\n<br/><br/>\n<b>Operation:</b> input('i')\n<br/>\n<b>Output:</b> [\"i love you\", \"island\",\"i love leetcode\"]\n<br/>\n<b>Explanation:</b>\n<br/>\nThere are four sentences that have prefix <code>\"i\"</code>. Among them, \"ironman\" and \"i love leetcode\" have same hot degree. Since <code>' '</code> has ASCII code 32 and <code>'r'</code> has ASCII code 114, \"i love leetcode\" should be in front of \"ironman\". Also we only need to output top 3 hot sentences, so \"ironman\" will be ignored.\n<br/><br/>\n<b>Operation:</b> input(' ')\n<br/>\n<b>Output:</b> [\"i love you\",\"i love leetcode\"]\n<br/>\n<b>Explanation:</b>\n<br/>\nThere are only two sentences that have prefix <code>\"i \"</code>.\n<br/><br/>\n<b>Operation:</b> input('a')\n<br/>\n<b>Output:</b> []\n<br/>\n<b>Explanation:</b>\n<br/>\nThere are no sentences that have prefix <code>\"i a\"</code>.\n<br/><br/>\n<b>Operation:</b> input('#')\n<br/>\n<b>Output:</b> []\n<br/>\n<b>Explanation:</b>\n<br/>\nThe user finished the input, the sentence <code>\"i a\"</code> should be saved as a historical sentence in system. And the following input will be counted as a new search.\n<br/>\n</p>\n<br/>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The input sentence will always start with a letter and end with '#', and only one blank space will exist between two words. </li>\n<li>The number of <b>complete sentences</b> that to be searched won't exceed 100. The length of each sentence including those in the historical data won't exceed 100. </li>\n<li>Please use double-quote instead of single-quote when you write test cases even for a character input.</li>\n<li>Please remember to <b>RESET</b> your class variables declared in class AutocompleteSystem, as static/class variables are <b>persisted across multiple test cases</b>. Please see <a href=\"https://leetcode.com/faq/#different-output\">here</a> for more details.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Salesforce",
            "Lyft",
            "Indeed"
        ]
    },
    {
        "leetId": "643",
        "link": "maximum-average-subarray-i",
        "title": "Maximum Average Subarray I",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "33.3%",
        "questionDescription": "<p>Given an array consisting of <code>n</code> integers, find the contiguous subarray of given length <code>k</code> that has the maximum average value. And you need to output the maximum average value.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,12,-5,-6,50,3], k = 4\r\n<b>Output:</b> 12.75\r\n<b>Explanation:</b> Maximum average is (12-5-6+50)/4 = 51/4 = 12.75\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>1 &lt;= <code>k</code> &lt;= <code>n</code> &lt;= 30,000.</li>\r\n\t<li>Elements of the given array will be in the range [-10,000, 10,000].</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a <code>n</code> \u4e2a\u6574\u6570\uff0c\u627e\u51fa\u5e73\u5747\u6570\u6700\u5927\u4e14\u957f\u5ea6\u4e3a <code>k</code> \u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5e76\u8f93\u51fa\u8be5\u6700\u5927\u5e73\u5747\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [1,12,-5,-6,50,3], k = 4\n<strong>\u8f93\u51fa:</strong> 12.75\n<strong>\u89e3\u91ca:</strong> \u6700\u5927\u5e73\u5747\u6570 (12-5-6+50)/4 = 51/4 = 12.75\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>1 &lt;= <code>k</code> &lt;= <code>n</code> &lt;= 30,000\u3002</li>\n\t<li>\u6240\u7ed9\u6570\u636e\u8303\u56f4 [-10,000\uff0c10,000]\u3002</li>\n</ol>\n",
        "titleZh": "\u5b50\u6570\u7ec4\u6700\u5927\u5e73\u5747\u6570 I",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Adobe"
        ]
    },
    {
        "leetId": "644",
        "link": "maximum-average-subarray-ii",
        "title": "Maximum Average Subarray II",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "0",
        "questionDescription": "\n<p>\nGiven an array consisting of <code>n</code> integers, find the contiguous subarray whose <b>length is greater than or equal to</b> <code>k</code> that has the maximum average value. And you need to output the maximum average value.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> [1,12,-5,-6,50,3], k = 4\n<b>Output:</b> 12.75\n<b>Explanation:</b>\nwhen length is 5, maximum average value is 10.8,\nwhen length is 6, maximum average value is 9.16667.\nThus return 12.75.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>1 &lt;= <code>k</code> &lt;= <code>n</code> &lt;= 10,000.</li>\n<li>Elements of the given array will be in range [-10,000, 10,000].</li>\n<li>The answer with the calculation error less than 10<sup>-5</sup> will be accepted.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>\nGiven an array consisting of <code>n</code> integers, find the contiguous subarray whose <b>length is greater than or equal to</b> <code>k</code> that has the maximum average value. And you need to output the maximum average value.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> [1,12,-5,-6,50,3], k = 4\n<b>Output:</b> 12.75\n<b>Explanation:</b>\nwhen length is 5, maximum average value is 10.8,\nwhen length is 6, maximum average value is 9.16667.\nThus return 12.75.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>1 &lt;= <code>k</code> &lt;= <code>n</code> &lt;= 10,000.</li>\n<li>Elements of the given array will be in range [-10,000, 10,000].</li>\n<li>The answer with the calculation error less than 10<sup>-5</sup> will be accepted.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "645",
        "link": "set-mismatch",
        "title": "Set Mismatch",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "35.2%",
        "questionDescription": "<p>\r\nThe set <code>S</code> originally contains numbers from 1 to <code>n</code>. But unfortunately, due to the data error, one of the numbers in the set got duplicated to <b>another</b> number in the set, which results in repetition of one number and loss of another number. \r\n</p>\r\n\r\n<p>\r\nGiven an array <code>nums</code> representing the data status of this set after the error. Your task is to firstly find the number occurs twice and then find the number that is missing. Return them in the form of an array.\r\n</p>\r\n\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> nums = [1,2,2,4]\r\n<b>Output:</b> [2,3]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The given array size will in the range [2, 10000].</li>\r\n<li>The given array's numbers won't have any order.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u96c6\u5408 <code>S</code> \u5305\u542b\u4ece1\u5230&nbsp;<code>n</code>&nbsp;\u7684\u6574\u6570\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u56e0\u4e3a\u6570\u636e\u9519\u8bef\uff0c\u5bfc\u81f4\u96c6\u5408\u91cc\u9762\u67d0\u4e00\u4e2a\u5143\u7d20\u590d\u5236\u4e86\u6210\u4e86\u96c6\u5408\u91cc\u9762\u7684\u53e6\u5916\u4e00\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5bfc\u81f4\u96c6\u5408\u4e22\u5931\u4e86\u4e00\u4e2a\u6574\u6570\u5e76\u4e14\u6709\u4e00\u4e2a\u5143\u7d20\u91cd\u590d\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 <code>nums</code> \u4ee3\u8868\u4e86\u96c6\u5408 <code>S</code> \u53d1\u751f\u9519\u8bef\u540e\u7684\u7ed3\u679c\u3002\u4f60\u7684\u4efb\u52a1\u662f\u9996\u5148\u5bfb\u627e\u5230\u91cd\u590d\u51fa\u73b0\u7684\u6574\u6570\uff0c\u518d\u627e\u5230\u4e22\u5931\u7684\u6574\u6570\uff0c\u5c06\u5b83\u4eec\u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> nums = [1,2,2,4]\n<strong>\u8f93\u51fa:</strong> [2,3]\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6570\u7ec4\u7684\u957f\u5ea6\u8303\u56f4\u662f&nbsp;[2, 10000]\u3002</li>\n\t<li>\u7ed9\u5b9a\u7684\u6570\u7ec4\u662f\u65e0\u5e8f\u7684\u3002</li>\n</ol>\n",
        "titleZh": "\u9519\u8bef\u7684\u96c6\u5408",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "646",
        "link": "maximum-length-of-pair-chain",
        "title": "Maximum Length of Pair Chain",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "48.4%",
        "questionDescription": "<p>\r\nYou are given <code>n</code> pairs of numbers. In every pair, the first number is always smaller than the second number.\r\n</p>\r\n\r\n<p>\r\nNow, we define a pair <code>(c, d)</code> can follow another pair <code>(a, b)</code> if and only if <code>b < c</code>. Chain of pairs can be formed in this fashion. \r\n</p>\r\n\r\n<p>\r\nGiven a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.\r\n</p>\r\n\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [[1,2], [2,3], [3,4]]\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> The longest chain is [1,2] -> [3,4]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The number of given pairs will be in the range [1, 1000].</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u51fa&nbsp;<code>n</code>&nbsp;\u4e2a\u6570\u5bf9\u3002&nbsp;\u5728\u6bcf\u4e00\u4e2a\u6570\u5bf9\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u603b\u662f\u6bd4\u7b2c\u4e8c\u4e2a\u6570\u5b57\u5c0f\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u79cd\u8ddf\u968f\u5173\u7cfb\uff0c\u5f53\u4e14\u4ec5\u5f53&nbsp;<code>b &lt; c</code>&nbsp;\u65f6\uff0c\u6570\u5bf9<code>(c, d)</code>&nbsp;\u624d\u53ef\u4ee5\u8ddf\u5728&nbsp;<code>(a, b)</code>&nbsp;\u540e\u9762\u3002\u6211\u4eec\u7528\u8fd9\u79cd\u5f62\u5f0f\u6765\u6784\u9020\u4e00\u4e2a\u6570\u5bf9\u94fe\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5bf9\u6570\u96c6\u5408\uff0c\u627e\u51fa\u80fd\u591f\u5f62\u6210\u7684\u6700\u957f\u6570\u5bf9\u94fe\u7684\u957f\u5ea6\u3002\u4f60\u4e0d\u9700\u8981\u7528\u5230\u6240\u6709\u7684\u6570\u5bf9\uff0c\u4f60\u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\u9009\u62e9\u5176\u4e2d\u7684\u4e00\u4e9b\u6570\u5bf9\u6765\u6784\u9020\u3002</p>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [[1,2], [2,3], [3,4]]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u6700\u957f\u7684\u6570\u5bf9\u94fe\u662f [1,2] -&gt; [3,4]\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u51fa\u6570\u5bf9\u7684\u4e2a\u6570\u5728&nbsp;[1, 1000] \u8303\u56f4\u5185\u3002</li>\n</ol>\n",
        "titleZh": "\u6700\u957f\u6570\u5bf9\u94fe",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "647",
        "link": "palindromic-substrings",
        "title": "Palindromic Substrings",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "52.3%",
        "questionDescription": "<p>Given a string, your task is to count how many palindromic substrings in this string.</p>\r\n\r\n<p>The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;abc&quot;\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> Three palindromic strings: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;aaa&quot;\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> Six palindromic strings: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The input string length won&#39;t exceed 1000.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6709\u591a\u5c11\u4e2a\u56de\u6587\u5b50\u4e32\u3002</p>\n\n<p>\u5177\u6709\u4e0d\u540c\u5f00\u59cb\u4f4d\u7f6e\u6216\u7ed3\u675f\u4f4d\u7f6e\u7684\u5b50\u4e32\uff0c\u5373\u4f7f\u662f\u7531\u76f8\u540c\u7684\u5b57\u7b26\u7ec4\u6210\uff0c\u4e5f\u4f1a\u88ab\u8ba1\u4e3a\u662f\u4e0d\u540c\u7684\u5b50\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;abc&quot;\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u4e09\u4e2a\u56de\u6587\u5b50\u4e32: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;.\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;aaa&quot;\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u8bf4\u660e:</strong> 6\u4e2a\u56de\u6587\u5b50\u4e32: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;.\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc71000\u3002</li>\n</ol>\n",
        "titleZh": "\u56de\u6587\u5b50\u4e32",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Twitter",
            "Expedia",
            "SAP",
            "Coursera",
            "Pure Storage"
        ]
    },
    {
        "leetId": "648",
        "link": "replace-words",
        "title": "Replace Words",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "49.0%",
        "questionDescription": "<p>In English, we have a concept called <code>root</code>, which can be followed by some other words to form another longer word - let&#39;s call this word <code>successor</code>. For example, the root <code>an</code>, followed by <code>other</code>, which can form another word <code>another</code>.</p>\r\n\r\n<p>Now, given a dictionary consisting of many roots and a sentence. You need to replace all the <code>successor</code> in the sentence with the <code>root</code> forming it. If a <code>successor</code> has many <code>roots</code> can form it, replace it with the root with the shortest length.</p>\r\n\r\n<p>You need to output the sentence after the replacement.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> dict = [&quot;cat&quot;, &quot;bat&quot;, &quot;rat&quot;]\r\nsentence = &quot;the cattle was rattled by the battery&quot;\r\n<b>Output:</b> &quot;the cat was rat by the bat&quot;\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The input will only have lower-case letters.</li>\r\n\t<li>1 &lt;= dict words number &lt;= 1000</li>\r\n\t<li>1 &lt;= sentence words number &lt;= 1000</li>\r\n\t<li>1 &lt;= root length &lt;= 100</li>\r\n\t<li>1 &lt;= sentence words length &lt;= 1000</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u5728\u82f1\u8bed\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u53eb\u505a&nbsp;<code>\u8bcd\u6839</code>(root)\u7684\u6982\u5ff5\uff0c\u5b83\u53ef\u4ee5\u8ddf\u7740\u5176\u4ed6\u4e00\u4e9b\u8bcd\u7ec4\u6210\u53e6\u4e00\u4e2a\u8f83\u957f\u7684\u5355\u8bcd&mdash;&mdash;\u6211\u4eec\u79f0\u8fd9\u4e2a\u8bcd\u4e3a&nbsp;<code>\u7ee7\u627f\u8bcd</code>(successor)\u3002\u4f8b\u5982\uff0c\u8bcd\u6839<code>an</code>\uff0c\u8ddf\u968f\u7740\u5355\u8bcd&nbsp;<code>other</code>(\u5176\u4ed6)\uff0c\u53ef\u4ee5\u5f62\u6210\u65b0\u7684\u5355\u8bcd&nbsp;<code>another</code>(\u53e6\u4e00\u4e2a)\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7531\u8bb8\u591a\u8bcd\u6839\u7ec4\u6210\u7684\u8bcd\u5178\u548c\u4e00\u4e2a\u53e5\u5b50\u3002\u4f60\u9700\u8981\u5c06\u53e5\u5b50\u4e2d\u7684\u6240\u6709<code>\u7ee7\u627f\u8bcd</code>\u7528<code>\u8bcd\u6839</code>\u66ff\u6362\u6389\u3002\u5982\u679c<code>\u7ee7\u627f\u8bcd</code>\u6709\u8bb8\u591a\u53ef\u4ee5\u5f62\u6210\u5b83\u7684<code>\u8bcd\u6839</code>\uff0c\u5219\u7528\u6700\u77ed\u7684\u8bcd\u6839\u66ff\u6362\u5b83\u3002</p>\n\n<p>\u4f60\u9700\u8981\u8f93\u51fa\u66ff\u6362\u4e4b\u540e\u7684\u53e5\u5b50\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> dict(\u8bcd\u5178) = [&quot;cat&quot;, &quot;bat&quot;, &quot;rat&quot;]\nsentence(\u53e5\u5b50) = &quot;the cattle was rattled by the battery&quot;\n<strong>\u8f93\u51fa:</strong> &quot;the cat was rat by the bat&quot;\n</pre>\n\n<p><strong>\u6ce8:</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li>1 &lt;= \u5b57\u5178\u5355\u8bcd\u6570 &lt;=1000</li>\n\t<li>1 &lt;=&nbsp; \u53e5\u4e2d\u8bcd\u8bed\u6570&nbsp;&lt;= 1000</li>\n\t<li>1 &lt;= \u8bcd\u6839\u957f\u5ea6 &lt;= 100</li>\n\t<li>1 &lt;= \u53e5\u4e2d\u8bcd\u8bed\u957f\u5ea6&nbsp;&lt;= 1000</li>\n</ol>\n",
        "titleZh": "\u5355\u8bcd\u66ff\u6362",
        "tags": [
            {
                "tag": "Trie",
                "link": "trie",
                "tagZh": "\u5b57\u5178\u6811"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Uber",
            "Adobe"
        ]
    },
    {
        "leetId": "649",
        "link": "dota2-senate",
        "title": "Dota2 Senate",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "34.7%",
        "questionDescription": "<p>In the world of Dota2, there are two parties: the <code>Radiant</code> and the <code>Dire</code>.</p>\r\n\r\n<p>The Dota2 senate consists of senators coming from two parties. Now the senate wants to make a decision about a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise <code>one</code> of the two rights:</p>\r\n\r\n<ol>\r\n\t<li><code>Ban one senator&#39;s right</code>:<br />\r\n\tA senator can make another senator lose <b>all his rights</b> in this and all the following rounds.</li>\r\n\t<li><code>Announce the victory</code>:<br />\r\n\tIf this senator found the senators who still have rights to vote are all from <b>the same party</b>, he can announce the victory and make the decision about the change in the game.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Given a string representing each senator&#39;s party belonging. The character &#39;R&#39; and &#39;D&#39; represent the <code>Radiant</code> party and the <code>Dire</code> party respectively. Then if there are <code>n</code> senators, the size of the given string will be <code>n</code>.</p>\r\n\r\n<p>The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.</p>\r\n\r\n<p>Suppose every senator is smart enough and will play the best strategy for his own party, you need to predict which party will finally announce the victory and make the change in the Dota2 game. The output should be <code>Radiant</code> or <code>Dire</code>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;RD&quot;\r\n<b>Output:</b> &quot;Radiant&quot;\r\n<b>Explanation:</b> The first senator comes from Radiant and he can just ban the next senator&#39;s right in the round 1. \r\nAnd the second senator can&#39;t exercise any rights any more since his right has been banned. \r\nAnd in the round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;RDD&quot;\r\n<b>Output:</b> &quot;Dire&quot;\r\n<b>Explanation:</b> \r\nThe first senator comes from Radiant and he can just ban the next senator&#39;s right in the round 1. \r\nAnd the second senator can&#39;t exercise any rights anymore since his right has been banned. \r\nAnd the third senator comes from Dire and he can ban the first senator&#39;s right in the round 1. \r\nAnd in the round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The length of the given string will in the range [1, 10,000].</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>&nbsp;Dota2 \u7684\u4e16\u754c\u91cc\u6709\u4e24\u4e2a\u9635\u8425\uff1a<code>Radiant</code>(\u5929\u8f89)\u548c&nbsp;<code>Dire</code>(\u591c\u9b47)</p>\n\n<p>Dota2 \u53c2\u8bae\u9662\u7531\u6765\u81ea\u4e24\u6d3e\u7684\u53c2\u8bae\u5458\u7ec4\u6210\u3002\u73b0\u5728\u53c2\u8bae\u9662\u5e0c\u671b\u5bf9\u4e00\u4e2a Dota2 \u6e38\u620f\u91cc\u7684\u6539\u53d8\u4f5c\u51fa\u51b3\u5b9a\u3002\u4ed6\u4eec\u4ee5\u4e00\u4e2a\u57fa\u4e8e\u8f6e\u4e3a\u8fc7\u7a0b\u7684\u6295\u7968\u8fdb\u884c\u3002\u5728\u6bcf\u4e00\u8f6e\u4e2d\uff0c\u6bcf\u4e00\u4f4d\u53c2\u8bae\u5458\u90fd\u53ef\u4ee5\u884c\u4f7f\u4e24\u9879\u6743\u5229\u4e2d\u7684<code><strong>\u4e00</strong></code>\u9879\uff1a</p>\n\n<ol>\n\t<li>\n\t<p><code>\u7981\u6b62\u4e00\u540d\u53c2\u8bae\u5458\u7684\u6743\u5229</code>\uff1a</p>\n\n\t<p>\u53c2\u8bae\u5458\u53ef\u4ee5\u8ba9\u53e6\u4e00\u4f4d\u53c2\u8bae\u5458\u5728\u8fd9\u4e00\u8f6e\u548c\u968f\u540e\u7684\u51e0\u8f6e\u4e2d\u4e27\u5931<strong>\u6240\u6709\u7684\u6743\u5229</strong>\u3002</p>\n\t</li>\n\t<li>\n\t<p><code>\u5ba3\u5e03\u80dc\u5229</code>\uff1a</p>\n\t</li>\n</ol>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \u5982\u679c\u53c2\u8bae\u5458\u53d1\u73b0\u6709\u6743\u5229\u6295\u7968\u7684\u53c2\u8bae\u5458\u90fd\u662f<strong>\u540c\u4e00\u4e2a\u9635\u8425\u7684</strong>\uff0c\u4ed6\u53ef\u4ee5\u5ba3\u5e03\u80dc\u5229\u5e76\u51b3\u5b9a\u5728\u6e38\u620f\u4e2d\u7684\u6709\u5173\u53d8\u5316\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ee3\u8868\u6bcf\u4e2a\u53c2\u8bae\u5458\u7684\u9635\u8425\u3002\u5b57\u6bcd &ldquo;R&rdquo; \u548c &ldquo;D&rdquo; \u5206\u522b\u4ee3\u8868\u4e86&nbsp;<code>Radiant</code>\uff08\u5929\u8f89\uff09\u548c&nbsp;<code>Dire</code>\uff08\u591c\u9b47\uff09\u3002\u7136\u540e\uff0c\u5982\u679c\u6709 <code>n</code> \u4e2a\u53c2\u8bae\u5458\uff0c\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u5927\u5c0f\u5c06\u662f&nbsp;<code>n</code>\u3002</p>\n\n<p>\u4ee5\u8f6e\u4e3a\u57fa\u7840\u7684\u8fc7\u7a0b\u4ece\u7ed9\u5b9a\u987a\u5e8f\u7684\u7b2c\u4e00\u4e2a\u53c2\u8bae\u5458\u5f00\u59cb\u5230\u6700\u540e\u4e00\u4e2a\u53c2\u8bae\u5458\u7ed3\u675f\u3002\u8fd9\u4e00\u8fc7\u7a0b\u5c06\u6301\u7eed\u5230\u6295\u7968\u7ed3\u675f\u3002\u6240\u6709\u5931\u53bb\u6743\u5229\u7684\u53c2\u8bae\u5458\u5c06\u5728\u8fc7\u7a0b\u4e2d\u88ab\u8df3\u8fc7\u3002</p>\n\n<p>\u5047\u8bbe\u6bcf\u4e00\u4f4d\u53c2\u8bae\u5458\u90fd\u8db3\u591f\u806a\u660e\uff0c\u4f1a\u4e3a\u81ea\u5df1\u7684\u653f\u515a\u505a\u51fa\u6700\u597d\u7684\u7b56\u7565\uff0c\u4f60\u9700\u8981\u9884\u6d4b\u54ea\u4e00\u65b9\u6700\u7ec8\u4f1a\u5ba3\u5e03\u80dc\u5229\u5e76\u5728 Dota2 \u6e38\u620f\u4e2d\u51b3\u5b9a\u6539\u53d8\u3002\u8f93\u51fa\u5e94\u8be5\u662f&nbsp;<code>Radiant</code>&nbsp;\u6216&nbsp;<code>Dire</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;RD&quot;\n<strong>\u8f93\u51fa:</strong> &quot;Radiant&quot;\n<strong>\u89e3\u91ca:  </strong><code>\u7b2c\u4e00\u4e2a\u53c2\u8bae\u5458\u6765\u81ea  Radiant \u9635\u8425\u5e76\u4e14\u4ed6\u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e00\u9879\u6743\u5229\u8ba9\u7b2c\u4e8c\u4e2a\u53c2\u8bae\u5458\u5931\u53bb\u6743\u529b\uff0c\u56e0\u6b64\u7b2c\u4e8c\u4e2a\u53c2\u8bae\u5458\u5c06\u88ab\u8df3\u8fc7\u56e0\u4e3a\u4ed6\u6ca1\u6709\u4efb\u4f55\u6743\u5229\u3002\u7136\u540e\u5728\u7b2c\u4e8c\u8f6e\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u4e2a\u53c2\u8bae\u5458\u53ef\u4ee5\u5ba3\u5e03\u80dc\u5229\uff0c\u56e0\u4e3a\u4ed6\u662f\u552f\u4e00\u4e00\u4e2a\u6709\u6295\u7968\u6743\u7684\u4eba</code>\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;RDD&quot;\n<strong>\u8f93\u51fa:</strong> &quot;Dire&quot;\n<strong>\u89e3\u91ca:</strong> \n\u7b2c\u4e00\u8f6e\u4e2d,\u7b2c\u4e00\u4e2a<code>\u6765\u81ea Radiant \u9635\u8425\u7684</code>\u53c2\u8bae\u5458\u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e00\u9879\u6743\u5229\u7981\u6b62\u7b2c\u4e8c\u4e2a\u53c2\u8bae\u5458\u7684\u6743\u5229\n\u7b2c\u4e8c\u4e2a<code>\u6765\u81ea Dire \u9635\u8425\u7684</code>\u53c2\u8bae\u5458\u4f1a\u88ab\u8df3\u8fc7\u56e0\u4e3a\u4ed6\u7684\u6743\u5229\u88ab\u7981\u6b62\n\u7b2c\u4e09\u4e2a<code>\u6765\u81ea Dire \u9635\u8425\u7684</code>\u53c2\u8bae\u5458\u53ef\u4ee5\u4f7f\u7528\u4ed6\u7684\u7b2c\u4e00\u9879\u6743\u5229\u7981\u6b62\u7b2c\u4e00\u4e2a\u53c2\u8bae\u5458\u7684\u6743\u5229\n\u56e0\u6b64\u5728\u7b2c\u4e8c\u8f6e\u53ea\u5269\u4e0b\u7b2c\u4e09\u4e2a\u53c2\u8bae\u5458\u62e5\u6709\u6295\u7968\u7684\u6743\u5229,\u4e8e\u662f\u4ed6\u53ef\u4ee5\u5ba3\u5e03\u80dc\u5229\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5728 [1, 10,000] \u4e4b\u95f4.</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "Dota2 \u53c2\u8bae\u9662",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Valve"
        ]
    },
    {
        "leetId": "650",
        "link": "2-keys-keyboard",
        "title": "2 Keys Keyboard",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "40.7%",
        "questionDescription": "<p>Initially on a notepad only one character &#39;A&#39; is present. You can perform two operations on this notepad for each step:</p>\r\n\r\n<ol>\r\n\t<li><code>Copy All</code>: You can copy all the characters present on the notepad (partial copy is not allowed).</li>\r\n\t<li><code>Paste</code>: You can paste the characters which are copied <b>last time</b>.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Given a number <code>n</code>. You have to get <b>exactly</b> <code>n</code> &#39;A&#39; on the notepad by performing the minimum number of steps permitted. Output the minimum number of steps to get <code>n</code> &#39;A&#39;.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 3\r\n<b>Output:</b> 3\r\n<b>Explanation:</b>\r\nIntitally, we have one character &#39;A&#39;.\r\nIn step 1, we use <b>Copy All</b> operation.\r\nIn step 2, we use <b>Paste</b> operation to get &#39;AA&#39;.\r\nIn step 3, we use <b>Paste</b> operation to get &#39;AAA&#39;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The <code>n</code> will be in the range [1, 1000].</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u6700\u521d\u5728\u4e00\u4e2a\u8bb0\u4e8b\u672c\u4e0a\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26 &#39;A&#39;\u3002\u4f60\u6bcf\u6b21\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u8bb0\u4e8b\u672c\u8fdb\u884c\u4e24\u79cd\u64cd\u4f5c\uff1a</p>\n\n<ol>\n\t<li><code>Copy All</code> (\u590d\u5236\u5168\u90e8) : \u4f60\u53ef\u4ee5\u590d\u5236\u8fd9\u4e2a\u8bb0\u4e8b\u672c\u4e2d\u7684\u6240\u6709\u5b57\u7b26(\u90e8\u5206\u7684\u590d\u5236\u662f\u4e0d\u5141\u8bb8\u7684)\u3002</li>\n\t<li><code>Paste</code> (\u7c98\u8d34) : \u4f60\u53ef\u4ee5\u7c98\u8d34\u4f60<strong>\u4e0a\u4e00\u6b21</strong>\u590d\u5236\u7684\u5b57\u7b26\u3002</li>\n</ol>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57&nbsp;<code>n</code>&nbsp;\u3002\u4f60\u9700\u8981\u4f7f\u7528\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u5728\u8bb0\u4e8b\u672c\u4e2d\u6253\u5370\u51fa<strong>\u6070\u597d</strong>&nbsp;<code>n</code>&nbsp;\u4e2a &#39;A&#39;\u3002\u8f93\u51fa\u80fd\u591f\u6253\u5370\u51fa&nbsp;<code>n</code>&nbsp;\u4e2a &#39;A&#39; \u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 3\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong>\n\u6700\u521d, \u6211\u4eec\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26 &#39;A&#39;\u3002\n\u7b2c 1 \u6b65, \u6211\u4eec\u4f7f\u7528 <strong>Copy All</strong> \u64cd\u4f5c\u3002\n\u7b2c 2 \u6b65, \u6211\u4eec\u4f7f\u7528 <strong>Paste </strong>\u64cd\u4f5c\u6765\u83b7\u5f97 &#39;AA&#39;\u3002\n\u7b2c 3 \u6b65, \u6211\u4eec\u4f7f\u7528 <strong>Paste</strong> \u64cd\u4f5c\u6765\u83b7\u5f97 &#39;AAA&#39;\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li><code>n</code>&nbsp;\u7684\u53d6\u503c\u8303\u56f4\u662f [1, 1000] \u3002</li>\n</ol>\n",
        "titleZh": "\u53ea\u6709\u4e24\u4e2a\u952e\u7684\u952e\u76d8",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Microsoft",
            "Tencent"
        ]
    },
    {
        "leetId": "651",
        "link": "4-keys-keyboard",
        "title": "4 Keys Keyboard",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n<p>Imagine you have a special keyboard with the following keys: </p>\n<p><code>Key 1: (A)</code>:  Print one 'A' on screen.</p>\n<p><code>Key 2: (Ctrl-A)</code>: Select the whole screen.</p>\n<p><code>Key 3: (Ctrl-C)</code>: Copy selection to buffer.</p>\n<p><code>Key 4: (Ctrl-V)</code>: Print buffer on screen appending it after what has already been printed. </p>\n<p>Now, you can only press the keyboard for <b>N</b> times (with the above four keys), find out the maximum numbers of 'A' you can print on screen.</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> N = 3\n<b>Output:</b> 3\n<b>Explanation:</b> \nWe can at most get 3 A's on screen by pressing following key sequence:\nA, A, A\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> N = 7\n<b>Output:</b> 9\n<b>Explanation:</b> \nWe can at most get 9 A's on screen by pressing following key sequence:\nA, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>1 &lt;= N &lt;= 50 </li>\n<li>Answers will be in the range of 32-bit signed integer.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Imagine you have a special keyboard with the following keys: </p>\n<p><code>Key 1: (A)</code>:  Print one 'A' on screen.</p>\n<p><code>Key 2: (Ctrl-A)</code>: Select the whole screen.</p>\n<p><code>Key 3: (Ctrl-C)</code>: Copy selection to buffer.</p>\n<p><code>Key 4: (Ctrl-V)</code>: Print buffer on screen appending it after what has already been printed. </p>\n<p>Now, you can only press the keyboard for <b>N</b> times (with the above four keys), find out the maximum numbers of 'A' you can print on screen.</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> N = 3\n<b>Output:</b> 3\n<b>Explanation:</b> \nWe can at most get 3 A's on screen by pressing following key sequence:\nA, A, A\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> N = 7\n<b>Output:</b> 9\n<b>Explanation:</b> \nWe can at most get 9 A's on screen by pressing following key sequence:\nA, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>1 &lt;= N &lt;= 50 </li>\n<li>Answers will be in the range of 32-bit signed integer.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google",
            "Microsoft"
        ]
    },
    {
        "leetId": "652",
        "link": "find-duplicate-subtrees",
        "title": "Find Duplicate Subtrees",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "49.1%",
        "questionDescription": "<p>Given a binary tree, return all duplicate subtrees. For each kind of duplicate subtrees, you only need to return the root node of any <b>one</b> of them.</p>\r\n\r\n<p>Two trees are duplicate if they have the same structure with same node values.</p>\r\n\r\n<p><b>Example 1: </b></p>\r\n\r\n<pre>\r\n        1\r\n       / \\\r\n      2   3\r\n     /   / \\\r\n    4   2   4\r\n       /\r\n      4\r\n</pre>\r\n\r\n<p>The following are two duplicate subtrees:</p>\r\n\r\n<pre>\r\n      2\r\n     /\r\n    4\r\n</pre>\r\n\r\n<p>and</p>\r\n\r\n<pre>\r\n    4\r\n</pre>\r\nTherefore, you need to return above trees&#39; root in the form of a list.",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u6240\u6709\u91cd\u590d\u7684\u5b50\u6811\u3002\u5bf9\u4e8e\u540c\u4e00\u7c7b\u7684\u91cd\u590d\u5b50\u6811\uff0c\u4f60\u53ea\u9700\u8981\u8fd4\u56de\u5176\u4e2d\u4efb\u610f<strong>\u4e00\u68f5</strong>\u7684\u6839\u7ed3\u70b9\u5373\u53ef\u3002</p>\n\n<p>\u4e24\u68f5\u6811\u91cd\u590d\u662f\u6307\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684\u7ed3\u6784\u4ee5\u53ca\u76f8\u540c\u7684\u7ed3\u70b9\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>        1\n       / \\\n      2   3\n     /   / \\\n    4   2   4\n       /\n      4\n</pre>\n\n<p>\u4e0b\u9762\u662f\u4e24\u4e2a\u91cd\u590d\u7684\u5b50\u6811\uff1a</p>\n\n<pre>      2\n     /\n    4\n</pre>\n\n<p>\u548c</p>\n\n<pre>    4\n</pre>\n\n<p>\u56e0\u6b64\uff0c\u4f60\u9700\u8981\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u8fd4\u56de\u4e0a\u8ff0\u91cd\u590d\u5b50\u6811\u7684\u6839\u7ed3\u70b9\u3002</p>\n",
        "titleZh": "\u5bfb\u627e\u91cd\u590d\u7684\u5b50\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Uber",
            "Snapchat",
            "Lyft"
        ]
    },
    {
        "leetId": "653",
        "link": "two-sum-iv-input-is-a-bst",
        "title": "Two Sum IV - Input is a BST",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "50.1%",
        "questionDescription": "<p>Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n    5\r\n   / \\\r\n  3   6\r\n / \\   \\\r\n2   4   7\r\n\r\nTarget = 9\r\n\r\n<b>Output:</b> True\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n    5\r\n   / \\\r\n  3   6\r\n / \\   \\\r\n2   4   7\r\n\r\nTarget = 28\r\n\r\n<b>Output:</b> False\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u7ed3\u679c\uff0c\u5982\u679c BST \u4e2d\u5b58\u5728\u4e24\u4e2a\u5143\u7d20\u4e14\u5b83\u4eec\u7684\u548c\u7b49\u4e8e\u7ed9\u5b9a\u7684\u76ee\u6807\u7ed3\u679c\uff0c\u5219\u8fd4\u56de true\u3002</p>\n\n<p><strong>\u6848\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 9\n\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6848\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n    5\n   / \\\n  3   6\n / \\   \\\n2   4   7\n\nTarget = 28\n\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u4e24\u6570\u4e4b\u548c IV - \u8f93\u5165 BST",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Adobe",
            "Snapchat",
            "Samsung",
            "ServiceNow"
        ]
    },
    {
        "leetId": "654",
        "link": "maximum-binary-tree",
        "title": "Maximum Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "73.2%",
        "questionDescription": "<p>\r\nGiven an integer array with no duplicates. A maximum tree building on this array is defined as follow:\r\n<ol>\r\n<li>The root is the maximum number in the array. </li>\r\n<li>The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.</li>\r\n<li>The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.</li> \r\n</ol>\r\n</p>\r\n\r\n<p>\r\nConstruct the maximum tree by the given array and output the root node of this tree.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [3,2,1,6,0,5]\r\n<b>Output:</b> return the tree root node representing the following tree:\r\n\r\n      6\r\n    /   \\\r\n   3     5\r\n    \\    / \r\n     2  0   \r\n       \\\r\n        1\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The size of the given array will be in the range [1,1000].</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u542b\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4\u3002\u4e00\u4e2a\u4ee5\u6b64\u6570\u7ec4\u6784\u5efa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u5b9a\u4e49\u5982\u4e0b\uff1a</p>\n\n<ol>\n\t<li>\u4e8c\u53c9\u6811\u7684\u6839\u662f\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u5143\u7d20\u3002</li>\n\t<li>\u5de6\u5b50\u6811\u662f\u901a\u8fc7\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u5de6\u8fb9\u90e8\u5206\u6784\u9020\u51fa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u3002</li>\n\t<li>\u53f3\u5b50\u6811\u662f\u901a\u8fc7\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u53f3\u8fb9\u90e8\u5206\u6784\u9020\u51fa\u7684\u6700\u5927\u4e8c\u53c9\u6811\u3002</li>\n</ol>\n\n<p>\u901a\u8fc7\u7ed9\u5b9a\u7684\u6570\u7ec4\u6784\u5efa\u6700\u5927\u4e8c\u53c9\u6811\uff0c\u5e76\u4e14\u8f93\u51fa\u8fd9\u4e2a\u6811\u7684\u6839\u8282\u70b9\u3002</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [3,2,1,6,0,5]\n<strong>\u8f93\u5165:</strong> \u8fd4\u56de\u4e0b\u9762\u8fd9\u68f5\u6811\u7684\u6839\u8282\u70b9\uff1a\n\n      6\n    /   \\\n   3     5\n    \\    / \n     2  0   \n       \\\n        1\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u7684\u6570\u7ec4\u7684\u5927\u5c0f\u5728 [1, 1000] \u4e4b\u95f4\u3002</li>\n</ol>\n",
        "titleZh": "\u6700\u5927\u4e8c\u53c9\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Facebook",
            "Microsoft",
            "Lyft"
        ]
    },
    {
        "leetId": "655",
        "link": "print-binary-tree",
        "title": "Print Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "48.2%",
        "questionDescription": "<p>Print a binary tree in an m*n 2D string array following these rules: </p>\r\n\r\n<ol>\r\n<li>The row number <code>m</code> should be equal to the height of the given binary tree.</li>\r\n<li>The column number <code>n</code> should always be an odd number.</li>\r\n<li>The root node's value (in string format) should be put in the exactly middle of the first row it can be put. The column and the row where the root node belongs will separate the rest space into two parts (<b>left-bottom part and right-bottom part</b>). You should print the left subtree in the left-bottom part and print the right subtree in the right-bottom part. The left-bottom part and the right-bottom part should have the same size. Even if one subtree is none while the other is not, you don't need to print anything for the none subtree but still need to leave the space as large as that for the other subtree. However, if two subtrees are none, then you don't need to leave space for both of them. </li>\r\n<li>Each unused space should contain an empty string <code>\"\"</code>.</li>\r\n<li>Print the subtrees following the same rules.</li>\r\n</ol>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n     1\r\n    /\r\n   2\r\n<b>Output:</b>\r\n[[\"\", \"1\", \"\"],\r\n [\"2\", \"\", \"\"]]\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n     1\r\n    / \\\r\n   2   3\r\n    \\\r\n     4\r\n<b>Output:</b>\r\n[[\"\", \"\", \"\", \"1\", \"\", \"\", \"\"],\r\n [\"\", \"2\", \"\", \"\", \"\", \"3\", \"\"],\r\n [\"\", \"\", \"4\", \"\", \"\", \"\", \"\"]]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n      1\r\n     / \\\r\n    2   5\r\n   / \r\n  3 \r\n / \r\n4 \r\n<b>Output:</b>\r\n\r\n[[\"\",  \"\",  \"\", \"\",  \"\", \"\", \"\", \"1\", \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]\r\n [\"\",  \"\",  \"\", \"2\", \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"5\", \"\", \"\", \"\"]\r\n [\"\",  \"3\", \"\", \"\",  \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]\r\n [\"4\", \"\",  \"\", \"\",  \"\", \"\", \"\", \"\",  \"\",  \"\",  \"\",  \"\",  \"\", \"\", \"\"]]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe height of binary tree is in the range of [1, 10].\r\n</p>",
        "questionDescriptionZh": "<p>\u5728\u4e00\u4e2a m*n \u7684\u4e8c\u7ef4\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u8f93\u51fa\u4e8c\u53c9\u6811\uff0c\u5e76\u9075\u5b88\u4ee5\u4e0b\u89c4\u5219\uff1a</p>\n\n<ol>\n\t<li>\u884c\u6570&nbsp;<code>m</code>&nbsp;\u5e94\u5f53\u7b49\u4e8e\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u3002</li>\n\t<li>\u5217\u6570&nbsp;<code>n</code>&nbsp;\u5e94\u5f53\u603b\u662f\u5947\u6570\u3002</li>\n\t<li>\u6839\u8282\u70b9\u7684\u503c\uff08\u4ee5\u5b57\u7b26\u4e32\u683c\u5f0f\u7ed9\u51fa\uff09\u5e94\u5f53\u653e\u5728\u53ef\u653e\u7f6e\u7684\u7b2c\u4e00\u884c\u6b63\u4e2d\u95f4\u3002\u6839\u8282\u70b9\u6240\u5728\u7684\u884c\u4e0e\u5217\u4f1a\u5c06\u5269\u4f59\u7a7a\u95f4\u5212\u5206\u4e3a\u4e24\u90e8\u5206\uff08<strong>\u5de6\u4e0b\u90e8\u5206\u548c\u53f3\u4e0b\u90e8\u5206</strong>\uff09\u3002\u4f60\u5e94\u8be5\u5c06\u5de6\u5b50\u6811\u8f93\u51fa\u5728\u5de6\u4e0b\u90e8\u5206\uff0c\u53f3\u5b50\u6811\u8f93\u51fa\u5728\u53f3\u4e0b\u90e8\u5206\u3002\u5de6\u4e0b\u548c\u53f3\u4e0b\u90e8\u5206\u5e94\u5f53\u6709\u76f8\u540c\u7684\u5927\u5c0f\u3002\u5373\u4f7f\u4e00\u4e2a\u5b50\u6811\u4e3a\u7a7a\u800c\u53e6\u4e00\u4e2a\u975e\u7a7a\uff0c\u4f60\u4e0d\u9700\u8981\u4e3a\u7a7a\u7684\u5b50\u6811\u8f93\u51fa\u4efb\u4f55\u4e1c\u897f\uff0c\u4f46\u4ecd\u9700\u8981\u4e3a\u53e6\u4e00\u4e2a\u5b50\u6811\u7559\u51fa\u8db3\u591f\u7684\u7a7a\u95f4\u3002\u7136\u800c\uff0c\u5982\u679c\u4e24\u4e2a\u5b50\u6811\u90fd\u4e3a\u7a7a\u5219\u4e0d\u9700\u8981\u4e3a\u5b83\u4eec\u7559\u51fa\u4efb\u4f55\u7a7a\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u672a\u4f7f\u7528\u7684\u7a7a\u95f4\u5e94\u5305\u542b\u4e00\u4e2a\u7a7a\u7684\u5b57\u7b26\u4e32<code>&quot;&quot;</code>\u3002</li>\n\t<li>\u4f7f\u7528\u76f8\u540c\u7684\u89c4\u5219\u8f93\u51fa\u5b50\u6811\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n     1\n    /\n   2\n<strong>\u8f93\u51fa:</strong>\n[[&quot;&quot;, &quot;1&quot;, &quot;&quot;],\n [&quot;2&quot;, &quot;&quot;, &quot;&quot;]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n     1\n    / \\\n   2   3\n    \\\n     4\n<strong>\u8f93\u51fa:</strong>\n[[&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;1&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;],\n [&quot;&quot;, &quot;2&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;3&quot;, &quot;&quot;],\n [&quot;&quot;, &quot;&quot;, &quot;4&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]]\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n      1\n     / \\\n    2   5\n   / \n  3 \n / \n4 \n<strong>\u8f93\u51fa:</strong>\n[[&quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;1&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]\n [&quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;2&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;5&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]\n [&quot;&quot;,  &quot;3&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]\n [&quot;4&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]]\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong> \u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u5728\u8303\u56f4 [1, 10] \u4e2d\u3002</p>\n",
        "titleZh": "\u8f93\u51fa\u4e8c\u53c9\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Microsoft",
            "Uber",
            "LinkedIn",
            "Houzz",
            "Poynt"
        ]
    },
    {
        "leetId": "656",
        "link": "coin-path",
        "title": "Coin Path",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "0",
        "questionDescription": "\n<p>\nGiven an array <code>A</code> (index starts at <code>1</code>) consisting of N integers: A<sub>1</sub>, A<sub>2</sub>, ..., A<sub>N</sub>\u00a0and an integer <code>B</code>. The integer <code>B</code> denotes that from any place (suppose the index is <code>i</code>) in the array <code>A</code>, you can jump to any one of the place in the array <code>A</code> indexed <code>i+1</code>, <code>i+2</code>, \u2026, <code>i+B</code> if this place can be jumped to. Also, if you step on the index <code>i</code>, you have to pay A<sub>i</sub>\u00a0coins. If A<sub>i</sub>\u00a0is -1, it means you can\u2019t jump to the place indexed <code>i</code> in the array.\n</p>\n<p>\nNow, you start from the place indexed <code>1</code> in the array <code>A</code>, and your aim is to reach the place indexed <code>N</code> using the minimum coins. You need to return the path of indexes (starting from 1 to N) in the array you should take to get to the place indexed <code>N</code> using minimum coins.\n</p>\n<p>\nIf there are multiple paths with the same cost, return the lexicographically smallest such path.\n</p>\n<p>\nIf it's not possible to reach the place indexed N then you need to return an empty array.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> [1,2,4,-1,2], 2\n<b>Output:</b> [1,3,5]\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> [1,2,4,-1,2], 1\n<b>Output:</b> []\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>Path Pa<sub>1</sub>, Pa<sub>2</sub>, ..., Pa<sub>n</sub>\u00a0is lexicographically smaller than Pb<sub>1</sub>, Pb<sub>2</sub>, ..., Pb<sub>m</sub>, if and only if at the first <code>i</code> where Pa<sub>i</sub>\u00a0and Pb<sub>i</sub>\u00a0differ, Pa<sub>i</sub>\u00a0&lt; Pb<sub>i</sub>; when no such\u00a0<code>i</code>\u00a0exists, then\u00a0<code>n</code> &lt; <code>m</code>.</li>\n<li>A<sub>1</sub> &gt;= 0. A<sub>2</sub>, ..., A<sub>N</sub> (if exist) will in the range of [-1, 100]. </li>\n<li>Length of A is in the range of [1, 1000].</li>\n<li>B is in the range of [1, 100].</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>\nGiven an array <code>A</code> (index starts at <code>1</code>) consisting of N integers: A<sub>1</sub>, A<sub>2</sub>, ..., A<sub>N</sub>\u00a0and an integer <code>B</code>. The integer <code>B</code> denotes that from any place (suppose the index is <code>i</code>) in the array <code>A</code>, you can jump to any one of the place in the array <code>A</code> indexed <code>i+1</code>, <code>i+2</code>, \u2026, <code>i+B</code> if this place can be jumped to. Also, if you step on the index <code>i</code>, you have to pay A<sub>i</sub>\u00a0coins. If A<sub>i</sub>\u00a0is -1, it means you can\u2019t jump to the place indexed <code>i</code> in the array.\n</p>\n<p>\nNow, you start from the place indexed <code>1</code> in the array <code>A</code>, and your aim is to reach the place indexed <code>N</code> using the minimum coins. You need to return the path of indexes (starting from 1 to N) in the array you should take to get to the place indexed <code>N</code> using minimum coins.\n</p>\n<p>\nIf there are multiple paths with the same cost, return the lexicographically smallest such path.\n</p>\n<p>\nIf it's not possible to reach the place indexed N then you need to return an empty array.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> [1,2,4,-1,2], 2\n<b>Output:</b> [1,3,5]\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> [1,2,4,-1,2], 1\n<b>Output:</b> []\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>Path Pa<sub>1</sub>, Pa<sub>2</sub>, ..., Pa<sub>n</sub>\u00a0is lexicographically smaller than Pb<sub>1</sub>, Pb<sub>2</sub>, ..., Pb<sub>m</sub>, if and only if at the first <code>i</code> where Pa<sub>i</sub>\u00a0and Pb<sub>i</sub>\u00a0differ, Pa<sub>i</sub>\u00a0&lt; Pb<sub>i</sub>; when no such\u00a0<code>i</code>\u00a0exists, then\u00a0<code>n</code> &lt; <code>m</code>.</li>\n<li>A<sub>1</sub> &gt;= 0. A<sub>2</sub>, ..., A<sub>N</sub> (if exist) will in the range of [-1, 100]. </li>\n<li>Length of A is in the range of [1, 1000].</li>\n<li>B is in the range of [1, 100].</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "657",
        "link": "judge-route-circle",
        "title": "Judge Route Circle",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "69.4%",
        "questionDescription": "<p>There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot <strong>ends up at (0, 0)</strong> after it completes its moves.</p>\r\n\r\n<p>The move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.</p>\r\n\r\n<p><strong>Note</strong>: The way that the robot is &quot;facing&quot; is irrelevant. &quot;R&quot; will always make the robot move to the right once, &quot;L&quot; will always make it move left, etc. Also, assume that the magnitude of the robot&#39;s movement is the same for each move.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;UD&quot;\r\n<b>Output:</b> true \r\n<strong>Explanation</strong>: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;LL&quot;\r\n<b>Output:</b> false\r\n<strong>Explanation</strong>: The robot moves left twice. It ends up two &quot;moves&quot; to the left of the origin. We return false because it is not at the origin at the end of its moves.\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u6709\u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u539f\u70b9 (0, 0) \u5f00\u59cb\u3002\u7ed9\u51fa\u5b83\u7684\u79fb\u52a8\u987a\u5e8f\uff0c\u5224\u65ad\u8fd9\u4e2a\u673a\u5668\u4eba\u5728\u5b8c\u6210\u79fb\u52a8\u540e\u662f\u5426\u5728<strong>&nbsp;(0, 0) \u5904\u7ed3\u675f</strong>\u3002</p>\n\n<p>\u79fb\u52a8\u987a\u5e8f\u7531\u5b57\u7b26\u4e32\u8868\u793a\u3002\u5b57\u7b26 move[i] \u8868\u793a\u5176\u7b2c i \u6b21\u79fb\u52a8\u3002\u673a\u5668\u4eba\u7684\u6709\u6548\u52a8\u4f5c\u6709&nbsp;<code>R</code>\uff08\u53f3\uff09\uff0c<code>L</code>\uff08\u5de6\uff09\uff0c<code>U</code>\uff08\u4e0a\uff09\u548c <code>D</code>\uff08\u4e0b\uff09\u3002\u5982\u679c\u673a\u5668\u4eba\u5728\u5b8c\u6210\u6240\u6709\u52a8\u4f5c\u540e\u8fd4\u56de\u539f\u70b9\uff0c\u5219\u8fd4\u56de true\u3002\u5426\u5219\uff0c\u8fd4\u56de false\u3002</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u673a\u5668\u4eba&ldquo;\u9762\u671d&rdquo;\u7684\u65b9\u5411\u65e0\u5173\u7d27\u8981\u3002 &ldquo;R&rdquo; \u5c06\u59cb\u7ec8\u4f7f\u673a\u5668\u4eba\u5411\u53f3\u79fb\u52a8\u4e00\u6b21\uff0c&ldquo;L&rdquo; \u5c06\u59cb\u7ec8\u5411\u5de6\u79fb\u52a8\u7b49\u3002\u6b64\u5916\uff0c\u5047\u8bbe\u6bcf\u6b21\u79fb\u52a8\u673a\u5668\u4eba\u7684\u79fb\u52a8\u5e45\u5ea6\u76f8\u540c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;UD&quot;\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca\uff1a</strong>\u673a\u5668\u4eba\u5411\u4e0a\u79fb\u52a8\u4e00\u6b21\uff0c\u7136\u540e\u5411\u4e0b\u79fb\u52a8\u4e00\u6b21\u3002\u6240\u6709\u52a8\u4f5c\u90fd\u5177\u6709\u76f8\u540c\u7684\u5e45\u5ea6\uff0c\u56e0\u6b64\u5b83\u6700\u7ec8\u56de\u5230\u5b83\u5f00\u59cb\u7684\u539f\u70b9\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8fd4\u56de true\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> &quot;LL&quot;\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca\uff1a</strong>\u673a\u5668\u4eba\u5411\u5de6\u79fb\u52a8\u4e24\u6b21\u3002\u5b83\u6700\u7ec8\u4f4d\u4e8e\u539f\u70b9\u7684\u5de6\u4fa7\uff0c\u8ddd\u539f\u70b9\u6709\u4e24\u6b21 &ldquo;\u79fb\u52a8&rdquo; \u7684\u8ddd\u79bb\u3002\u6211\u4eec\u8fd4\u56de false\uff0c\u56e0\u4e3a\u5b83\u5728\u79fb\u52a8\u7ed3\u675f\u65f6\u6ca1\u6709\u8fd4\u56de\u539f\u70b9\u3002</pre>\n",
        "titleZh": "\u673a\u5668\u4eba\u80fd\u5426\u8fd4\u56de\u539f\u70b9",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Adobe",
            "Alibaba",
            "Airbnb",
            "Goldman Sachs",
            "Works Applications",
            "Indeed",
            "Qualtrics",
            "LiveRamp"
        ]
    },
    {
        "leetId": "658",
        "link": "find-k-closest-elements",
        "title": "Find K Closest Elements",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "37.2%",
        "questionDescription": "<p>\r\nGiven a sorted array, two integers <code>k</code> and <code>x</code>, find the <code>k</code> closest elements to <code>x</code> in the array.  The result should also be sorted in ascending order.\r\nIf there is a tie,  the smaller elements are always preferred.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,2,3,4,5], k=4, x=3\r\n<b>Output:</b> [1,2,3,4]\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,2,3,4,5], k=4, x=-1\r\n<b>Output:</b> [1,2,3,4]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The value k is positive and will always be smaller than the length of the sorted array.</li>\r\n<li> Length of the given array is positive and will not exceed 10<sup>4</sup></li>\r\n<li> Absolute value of elements in the array and x will not exceed 10<sup>4</sup></li>\r\n</ol>\r\n</p>\r\n\r\n<hr />\r\n\r\n<p>\r\n<b><font color=\"red\">UPDATE (2017/9/19):</font></b><br />\r\nThe <i>arr</i> parameter had been changed to an <b>array of integers</b> (instead of a list of integers). <b><i>Please reload the code definition to get the latest changes</i></b>.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u597d\u7684\u6570\u7ec4\uff0c\u4e24\u4e2a\u6574\u6570 <code>k</code> \u548c <code>x</code>\uff0c\u4ece\u6570\u7ec4\u4e2d\u627e\u5230\u6700\u9760\u8fd1 <code>x</code>\uff08\u4e24\u6570\u4e4b\u5dee\u6700\u5c0f\uff09\u7684 <code>k</code> \u4e2a\u6570\u3002\u8fd4\u56de\u7684\u7ed3\u679c\u5fc5\u987b\u8981\u662f\u6309\u5347\u5e8f\u6392\u597d\u7684\u3002\u5982\u679c\u6709\u4e24\u4e2a\u6570\u4e0e <code>x</code> \u7684\u5dee\u503c\u4e00\u6837\uff0c\u4f18\u5148\u9009\u62e9\u6570\u503c\u8f83\u5c0f\u7684\u90a3\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3,4,5], k=4, x=3\n<strong>\u8f93\u51fa:</strong> [1,2,3,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3,4,5], k=4, x=-1\n<strong>\u8f93\u51fa:</strong> [1,2,3,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>k \u7684\u503c\u4e3a\u6b63\u6570\uff0c\u4e14\u603b\u662f\u5c0f\u4e8e\u7ed9\u5b9a\u6392\u5e8f\u6570\u7ec4\u7684\u957f\u5ea6\u3002</li>\n\t<li>\u6570\u7ec4\u4e0d\u4e3a\u7a7a\uff0c\u4e14\u957f\u5ea6\u4e0d\u8d85\u8fc7 10<sup>4</sup></li>\n\t<li>\u6570\u7ec4\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u4e0e&nbsp;x \u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 10<sup>4</sup></li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u66f4\u65b0(2017/9/19):</strong><br />\n\u8fd9\u4e2a\u53c2\u6570 <em>arr</em> \u5df2\u7ecf\u88ab\u6539\u53d8\u4e3a\u4e00\u4e2a<strong>\u6574\u6570\u6570\u7ec4</strong>\uff08\u800c\u4e0d\u662f\u6574\u6570\u5217\u8868\uff09\u3002<strong><em>&nbsp;\u8bf7\u91cd\u65b0\u52a0\u8f7d\u4ee3\u7801\u5b9a\u4e49\u4ee5\u83b7\u53d6\u6700\u65b0\u66f4\u6539\u3002</em></strong></p>\n",
        "titleZh": "\u627e\u5230 K \u4e2a\u6700\u63a5\u8fd1\u7684\u5143\u7d20",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "LinkedIn"
        ]
    },
    {
        "leetId": "659",
        "link": "split-array-into-consecutive-subsequences",
        "title": "Split Array into Consecutive Subsequences",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "38.1%",
        "questionDescription": "<p>You are given an integer array sorted in ascending order (may contain duplicates), you need to split them into several subsequences, where each subsequences consist of at least 3 consecutive integers. Return whether you can make such a split.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,2,3,3,4,5]\r\n<b>Output:</b> True\r\n<b>Explanation:</b>\r\nYou can split them into two consecutive subsequences : \r\n1, 2, 3\r\n3, 4, 5\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,2,3,3,4,4,5,5]\r\n<b>Output:</b> True\r\n<b>Explanation:</b>\r\nYou can split them into two consecutive subsequences : \r\n1, 2, 3, 4, 5\r\n3, 4, 5\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,2,3,4,4,5]\r\n<b>Output:</b> False\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of the input is in range of [1, 10000]</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u8f93\u5165\u4e00\u4e2a\u6309\u5347\u5e8f\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff08\u53ef\u80fd\u5305\u542b\u91cd\u590d\u6570\u5b57\uff09\uff0c\u4f60\u9700\u8981\u5c06\u5b83\u4eec\u5206\u5272\u6210\u51e0\u4e2a\u5b50\u5e8f\u5217\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b50\u5e8f\u5217\u81f3\u5c11\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u6574\u6570\u3002\u8fd4\u56de\u4f60\u662f\u5426\u80fd\u505a\u51fa\u8fd9\u6837\u7684\u5206\u5272\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3,3,4,5]\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong>\n\u4f60\u53ef\u4ee5\u5206\u5272\u51fa\u8fd9\u6837\u4e24\u4e2a\u8fde\u7eed\u5b50\u5e8f\u5217 : \n1, 2, 3\n3, 4, 5\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3,3,4,4,5,5]\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong>\n\u4f60\u53ef\u4ee5\u5206\u5272\u51fa\u8fd9\u6837\u4e24\u4e2a\u8fde\u7eed\u5b50\u5e8f\u5217 : \n1, 2, 3, 4, 5\n3, 4, 5\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,3,4,4,5]\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u8f93\u5165\u7684\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u4e3a [1, 10000]</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u5206\u5272\u6570\u7ec4\u4e3a\u8fde\u7eed\u5b50\u5e8f\u5217",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "660",
        "link": "remove-9",
        "title": "Remove 9",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "0",
        "questionDescription": "\n<p>Start from integer 1, remove any integer that contains 9 such as 9, 19, 29... </p>\n<p>So now, you will have a new integer sequence: 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, ...</p>\n<p>Given a positive integer <code>n</code>, you need to return the n-th integer after removing. Note that 1 will be the first integer.</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> 9\n<b>Output:</b> 10\n</pre>\n<p></p>\n<p>\n<b> Hint</b>: n will not exceed <code>9 x 10^8</code>.\n</p>\n",
        "questionDescriptionZh": "\n<p>Start from integer 1, remove any integer that contains 9 such as 9, 19, 29... </p>\n<p>So now, you will have a new integer sequence: 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, ...</p>\n<p>Given a positive integer <code>n</code>, you need to return the n-th integer after removing. Note that 1 will be the first integer.</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> 9\n<b>Output:</b> 10\n</pre>\n<p></p>\n<p>\n<b> Hint</b>: n will not exceed <code>9 x 10^8</code>.\n</p>\n",
        "companies": [
            "Houzz"
        ]
    },
    {
        "leetId": "661",
        "link": "image-smoother",
        "title": "Image Smoother",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "46.3%",
        "questionDescription": "<p>Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself.  If a cell has less than 8 surrounding cells, then use as many as you can.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n[[1,1,1],\r\n [1,0,1],\r\n [1,1,1]]\r\n<b>Output:</b>\r\n[[0, 0, 0],\r\n [0, 0, 0],\r\n [0, 0, 0]]\r\n<b>Explanation:</b>\r\nFor the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\r\nFor the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\r\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The value in the given matrix is in the range of [0, 255].</li>\r\n<li>The length and width of the given matrix are in the range of [1, 150].</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u5305\u542b\u6574\u6570\u7684\u4e8c\u7ef4\u77e9\u9635 M \u8868\u793a\u4e00\u4e2a\u56fe\u7247\u7684\u7070\u5ea6\u3002\u4f60\u9700\u8981\u8bbe\u8ba1\u4e00\u4e2a\u5e73\u6ed1\u5668\u6765\u8ba9\u6bcf\u4e00\u4e2a\u5355\u5143\u7684\u7070\u5ea6\u6210\u4e3a\u5e73\u5747\u7070\u5ea6&nbsp;(\u5411\u4e0b\u820d\u5165) \uff0c\u5e73\u5747\u7070\u5ea6\u7684\u8ba1\u7b97\u662f\u5468\u56f4\u76848\u4e2a\u5355\u5143\u548c\u5b83\u672c\u8eab\u7684\u503c\u6c42\u5e73\u5747\uff0c\u5982\u679c\u5468\u56f4\u7684\u5355\u5143\u683c\u4e0d\u8db3\u516b\u4e2a\uff0c\u5219\u5c3d\u53ef\u80fd\u591a\u7684\u5229\u7528\u5b83\u4eec\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\n[[1,1,1],\n [1,0,1],\n [1,1,1]]\n<strong>\u8f93\u51fa:</strong>\n[[0, 0, 0],\n [0, 0, 0],\n [0, 0, 0]]\n<strong>\u89e3\u91ca:</strong>\n\u5bf9\u4e8e\u70b9 (0,0), (0,2), (2,0), (2,2): \u5e73\u5747(3/4) = \u5e73\u5747(0.75) = 0\n\u5bf9\u4e8e\u70b9 (0,1), (1,0), (1,2), (2,1): \u5e73\u5747(5/6) = \u5e73\u5747(0.83333333) = 0\n\u5bf9\u4e8e\u70b9 (1,1): \u5e73\u5747(8/9) = \u5e73\u5747(0.88888889) = 0\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u77e9\u9635\u4e2d\u7684\u6574\u6570\u8303\u56f4\u4e3a [0, 255]\u3002</li>\n\t<li>\u77e9\u9635\u7684\u957f\u548c\u5bbd\u7684\u8303\u56f4\u5747\u4e3a&nbsp;[1, 150]\u3002</li>\n</ol>\n",
        "titleZh": "\u56fe\u7247\u5e73\u6ed1\u5668",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Amazon",
            "Pure Storage"
        ]
    },
    {
        "leetId": "662",
        "link": "maximum-width-of-binary-tree",
        "title": "Maximum Width of Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "32.9%",
        "questionDescription": "<p>Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a <b>full binary tree</b>, but some nodes are null.</p>\r\n\r\n<p>The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the <code>null</code> nodes between the end-nodes are also counted into the length calculation.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n\r\n           1\r\n         /   \\\r\n        3     2\r\n       / \\     \\  \r\n      5   3     9 \r\n\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> The maximum width existing in the third level with the length 4 (5,3,null,9).\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n\r\n          1\r\n         /  \r\n        3    \r\n       / \\       \r\n      5   3     \r\n\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> The maximum width existing in the third level with the length 2 (5,3).\r\n</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n\r\n          1\r\n         / \\\r\n        3   2 \r\n       /        \r\n      5      \r\n\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> The maximum width existing in the second level with the length 2 (3,2).\r\n</pre>\r\n\r\n<p><b>Example 4:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n\r\n          1\r\n         / \\\r\n        3   2\r\n       /     \\  \r\n      5       9 \r\n     /         \\\r\n    6           7\r\n<b>Output:</b> 8\r\n<b>Explanation:</b>The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).\r\n\r\n\r\n</pre>\r\n\r\n<p><b>Note:</b> Answer will in the range of 32-bit signed integer.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u83b7\u53d6\u8fd9\u4e2a\u6811\u7684\u6700\u5927\u5bbd\u5ea6\u3002\u6811\u7684\u5bbd\u5ea6\u662f\u6240\u6709\u5c42\u4e2d\u7684\u6700\u5927\u5bbd\u5ea6\u3002\u8fd9\u4e2a\u4e8c\u53c9\u6811\u4e0e<strong>\u6ee1\u4e8c\u53c9\u6811\uff08full binary tree\uff09</strong>\u7ed3\u6784\u76f8\u540c\uff0c\u4f46\u4e00\u4e9b\u8282\u70b9\u4e3a\u7a7a\u3002</p>\n\n<p>\u6bcf\u4e00\u5c42\u7684\u5bbd\u5ea6\u88ab\u5b9a\u4e49\u4e3a\u4e24\u4e2a\u7aef\u70b9\uff08\u8be5\u5c42\u6700\u5de6\u548c\u6700\u53f3\u7684\u975e\u7a7a\u8282\u70b9\uff0c\u4e24\u7aef\u70b9\u95f4\u7684<code>null</code>\u8282\u70b9\u4e5f\u8ba1\u5165\u957f\u5ea6\uff09\u4e4b\u95f4\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\n           1\n         /   \\\n        3     2\n       / \\     \\  \n      5   3     9 \n\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u6700\u5927\u503c\u51fa\u73b0\u5728\u6811\u7684\u7b2c 3 \u5c42\uff0c\u5bbd\u5ea6\u4e3a 4 (5,3,null,9)\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\n          1\n         /  \n        3    \n       / \\       \n      5   3     \n\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u6700\u5927\u503c\u51fa\u73b0\u5728\u6811\u7684\u7b2c 3 \u5c42\uff0c\u5bbd\u5ea6\u4e3a 2 (5,3)\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\n          1\n         / \\\n        3   2 \n       /        \n      5      \n\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u6700\u5927\u503c\u51fa\u73b0\u5728\u6811\u7684\u7b2c 2 \u5c42\uff0c\u5bbd\u5ea6\u4e3a 2 (3,2)\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n\n          1\n         / \\\n        3   2\n       /     \\  \n      5       9 \n     /         \\\n    6           7\n<strong>\u8f93\u51fa:</strong> 8\n<strong>\u89e3\u91ca:</strong> \u6700\u5927\u503c\u51fa\u73b0\u5728\u6811\u7684\u7b2c 4 \u5c42\uff0c\u5bbd\u5ea6\u4e3a 8 (6,null,null,null,null,null,null,7)\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong> \u7b54\u6848\u572832\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u8868\u793a\u8303\u56f4\u5185\u3002</p>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u6700\u5927\u5bbd\u5ea6",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Snapchat"
        ]
    },
    {
        "leetId": "663",
        "link": "equal-tree-partition",
        "title": "Equal Tree Partition",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "11",
        "questionDescription": "\n<p>\nGiven a binary tree with <code>n</code> nodes, your task is to check if it's possible to partition the tree to two trees which have the equal sum of values after removing <b>exactly</b> one edge on the original tree.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b>     \n    5\n   / \\\n  10 10\n    /  \\\n   2   3\n\n<b>Output:</b> True\n<b>Explanation:</b> \n    5\n   / \n  10\n      \nSum: 15\n\n   10\n  /  \\\n 2    3\n\nSum: 15\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b>     \n    1\n   / \\\n  2  10\n    /  \\\n   2   20\n\n<b>Output:</b> False\n<b>Explanation:</b> You can't split the tree into two trees with equal sum after removing exactly one edge on the tree.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The range of tree node value is in the range of [-100000, 100000].</li>\n<li>1 &lt;= n &lt;= 10000</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>\nGiven a binary tree with <code>n</code> nodes, your task is to check if it's possible to partition the tree to two trees which have the equal sum of values after removing <b>exactly</b> one edge on the original tree.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b>     \n    5\n   / \\\n  10 10\n    /  \\\n   2   3\n\n<b>Output:</b> True\n<b>Explanation:</b> \n    5\n   / \n  10\n      \nSum: 15\n\n   10\n  /  \\\n 2    3\n\nSum: 15\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b>     \n    1\n   / \\\n  2  10\n    /  \\\n   2   20\n\n<b>Output:</b> False\n<b>Explanation:</b> You can't split the tree into two trees with equal sum after removing exactly one edge on the tree.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The range of tree node value is in the range of [-100000, 100000].</li>\n<li>1 &lt;= n &lt;= 10000</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Amazon",
            "Facebook",
            "Snapchat"
        ]
    },
    {
        "leetId": "664",
        "link": "strange-printer",
        "title": "Strange Printer",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "29.7%",
        "questionDescription": "<p>\r\nThere is a strange printer with the following two special requirements:\r\n\r\n<ol>\r\n<li>The printer can only print a sequence of the same character each time.</li>\r\n<li>At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.</li>\r\n</ol>\r\n\r\n</p>\r\n\r\n<p>\r\nGiven a string consists of lower English letters only, your job is to count the minimum number of turns the printer needed in order to print it.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"aaabbb\"\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> Print \"aaa\" first and then print \"bbb\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"aba\"\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Hint</b>: Length of the given string will not exceed 100.</p>",
        "questionDescriptionZh": "<p>\u6709\u53f0\u5947\u602a\u7684\u6253\u5370\u673a\u6709\u4ee5\u4e0b\u4e24\u4e2a\u7279\u6b8a\u8981\u6c42\uff1a</p>\n\n<ol>\n\t<li>\u6253\u5370\u673a\u6bcf\u6b21\u53ea\u80fd\u6253\u5370\u540c\u4e00\u4e2a\u5b57\u7b26\u5e8f\u5217\u3002</li>\n\t<li>\u6bcf\u6b21\u53ef\u4ee5\u5728\u4efb\u610f\u8d77\u59cb\u548c\u7ed3\u675f\u4f4d\u7f6e\u6253\u5370\u65b0\u5b57\u7b26\uff0c\u5e76\u4e14\u4f1a\u8986\u76d6\u6389\u539f\u6765\u5df2\u6709\u7684\u5b57\u7b26\u3002</li>\n</ol>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8ba1\u7b97\u8fd9\u4e2a\u6253\u5370\u673a\u6253\u5370\u5b83\u9700\u8981\u7684\u6700\u5c11\u6b21\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;aaabbb&quot;\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u9996\u5148\u6253\u5370 &quot;aaa&quot; \u7136\u540e\u6253\u5370 &quot;bbb&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;aba&quot;\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u9996\u5148\u6253\u5370 &quot;aaa&quot; \u7136\u540e\u5728\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u6253\u5370 &quot;b&quot; \u8986\u76d6\u6389\u539f\u6765\u7684\u5b57\u7b26 &#39;a&#39;\u3002</pre>\n\n<p><strong>\u63d0\u793a</strong>: \u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 100\u3002</p>\n",
        "titleZh": "\u5947\u602a\u7684\u6253\u5370\u673a",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "NetEase"
        ]
    },
    {
        "leetId": "665",
        "link": "non-decreasing-array",
        "title": "Non-decreasing Array",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "19.5%",
        "questionDescription": "<p>\r\nGiven an array with <code>n</code> integers, your task is to check if it could become non-decreasing by modifying <b>at most</b> <code>1</code> element.\r\n</p>\r\n\r\n<p>\r\nWe define an array is non-decreasing if <code>array[i] <= array[i + 1]</code> holds for every <code>i</code> (1 <= i < n).\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [4,2,3]\r\n<b>Output:</b> True\r\n<b>Explanation:</b> You could modify the first <code>4</code> to <code>1</code> to get a non-decreasing array.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [4,2,1]\r\n<b>Output:</b> False\r\n<b>Explanation:</b> You can't get a non-decreasing array by modify at most one element.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe <code>n</code> belongs to [1, 10,000].\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a&nbsp;<code>n</code>&nbsp;\u7684\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u5224\u65ad\u5728<strong>\u6700\u591a</strong>\u6539\u53d8&nbsp;<code>1</code> \u4e2a\u5143\u7d20\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u6570\u7ec4\u80fd\u5426\u53d8\u6210\u4e00\u4e2a\u975e\u9012\u51cf\u6570\u5217\u3002</p>\n\n<p>\u6211\u4eec\u662f\u8fd9\u6837\u5b9a\u4e49\u4e00\u4e2a\u975e\u9012\u51cf\u6570\u5217\u7684\uff1a&nbsp;\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u6240\u6709\u7684&nbsp;<code>i</code> (1 &lt;= i &lt; n)\uff0c\u6ee1\u8db3&nbsp;<code>array[i] &lt;= array[i + 1]</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [4,2,3]\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong> \u4f60\u53ef\u4ee5\u901a\u8fc7\u628a\u7b2c\u4e00\u4e2a4\u53d8\u62101\u6765\u4f7f\u5f97\u5b83\u6210\u4e3a\u4e00\u4e2a\u975e\u9012\u51cf\u6570\u5217\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [4,2,1]\n<strong>\u8f93\u51fa:</strong> False\n<strong>\u89e3\u91ca:</strong> \u4f60\u4e0d\u80fd\u5728\u53ea\u6539\u53d8\u4e00\u4e2a\u5143\u7d20\u7684\u60c5\u51b5\u4e0b\u5c06\u5176\u53d8\u4e3a\u975e\u9012\u51cf\u6570\u5217\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:&nbsp;&nbsp;</strong><code>n</code> \u7684\u8303\u56f4\u4e3a [1, 10,000]\u3002</p>\n",
        "titleZh": "\u975e\u9012\u51cf\u6570\u5217",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Bloomberg"
        ]
    },
    {
        "leetId": "666",
        "link": "path-sum-iv",
        "title": "Path Sum IV",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n<p>\nIf the depth of a tree is smaller than <code>5</code>, then this tree can be represented by a list of three-digits integers.\n</p>\n<p>\nFor each integer in this list:<br/>\n</p><ol>\n<li>The hundreds digit represents the depth <code>D</code> of this node, <code>1 &lt;= D &lt;= 4.</code></li>\n<li>The tens digit represents the position <code>P</code> of this node in the level it belongs to, <code>1 &lt;= P &lt;= 8</code>. The position is the same as that in a full binary tree. </li>\n<li>The units digit represents the value <code>V</code> of this node, <code>0 &lt;= V &lt;= 9.</code></li>\n</ol>\n<p></p>\n<p>\nGiven a list of <code>ascending</code> three-digits integers representing a binary with the depth smaller than 5. You need to return the sum of all paths from the root towards the leaves.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> [113, 215, 221]\n<b>Output:</b> 12\n<b>Explanation:</b> \nThe tree that the list represents is:\n    3\n   / \\\n  5   1\n\nThe path sum is (3 + 5) + (3 + 1) = 12.\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> [113, 221]\n<b>Output:</b> 4\n<b>Explanation:</b> \nThe tree that the list represents is: \n    3\n     \\\n      1\n\nThe path sum is (3 + 1) = 4.\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>\nIf the depth of a tree is smaller than <code>5</code>, then this tree can be represented by a list of three-digits integers.\n</p>\n<p>\nFor each integer in this list:<br/>\n</p><ol>\n<li>The hundreds digit represents the depth <code>D</code> of this node, <code>1 &lt;= D &lt;= 4.</code></li>\n<li>The tens digit represents the position <code>P</code> of this node in the level it belongs to, <code>1 &lt;= P &lt;= 8</code>. The position is the same as that in a full binary tree. </li>\n<li>The units digit represents the value <code>V</code> of this node, <code>0 &lt;= V &lt;= 9.</code></li>\n</ol>\n<p></p>\n<p>\nGiven a list of <code>ascending</code> three-digits integers representing a binary with the depth smaller than 5. You need to return the sum of all paths from the root towards the leaves.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> [113, 215, 221]\n<b>Output:</b> 12\n<b>Explanation:</b> \nThe tree that the list represents is:\n    3\n   / \\\n  5   1\n\nThe path sum is (3 + 5) + (3 + 1) = 12.\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> [113, 221]\n<b>Output:</b> 4\n<b>Explanation:</b> \nThe tree that the list represents is: \n    3\n     \\\n      1\n\nThe path sum is (3 + 1) = 4.\n</pre>\n<p></p>\n",
        "companies": [
            "Alibaba"
        ]
    },
    {
        "leetId": "667",
        "link": "beautiful-arrangement-ii",
        "title": "Beautiful Arrangement II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "52.8%",
        "questionDescription": "<p>\r\nGiven two integers <code>n</code> and <code>k</code>, you need to construct a list which contains <code>n</code> different positive integers ranging from <code>1</code> to <code>n</code> and obeys the following requirement: <br/>\r\n\r\nSuppose this list is [a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, ... , a<sub>n</sub>], then the list [|a<sub>1</sub> - a<sub>2</sub>|, |a<sub>2</sub> - a<sub>3</sub>|, |a<sub>3</sub> - a<sub>4</sub>|, ... , |a<sub>n-1</sub> - a<sub>n</sub>|] has exactly <code>k</code> distinct integers.\r\n</p>\r\n\r\n<p>\r\nIf there are multiple answers, print any of them.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br/>\r\n<pre>\r\n<b>Input:</b> n = 3, k = 1\r\n<b>Output:</b> [1, 2, 3]\r\n<b>Explanation:</b> The [1, 2, 3] has three different positive integers ranging from 1 to 3, and the [1, 1] has exactly 1 distinct integer: 1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> n = 3, k = 2\r\n<b>Output:</b> [1, 3, 2]\r\n<b>Explanation:</b> The [1, 3, 2] has three different positive integers ranging from 1 to 3, and the [2, 1] has exactly 2 distinct integers: 1 and 2.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The <code>n</code> and <code>k</code> are in the range 1 <= k < n <= 10<sup>4</sup>.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570&nbsp;<code>n</code>&nbsp;\u548c&nbsp;<code>k</code>\uff0c\u4f60\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u5305\u542b\u4ece&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>n</code>&nbsp;\u7684 <code>n</code>&nbsp;\u4e2a\u4e0d\u540c\u6574\u6570\uff0c\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a</p>\n\n<p>\u2460 \u5982\u679c\u8fd9\u4e2a\u6570\u7ec4\u662f [a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, ... , a<sub>n</sub>] \uff0c\u90a3\u4e48\u6570\u7ec4&nbsp;[|a<sub>1</sub> - a<sub>2</sub>|, |a<sub>2</sub> - a<sub>3</sub>|, |a<sub>3</sub> - a<sub>4</sub>|, ... , |a<sub>n-1</sub> - a<sub>n</sub>|] \u4e2d\u5e94\u8be5\u6709\u4e14\u4ec5\u6709&nbsp;k \u4e2a\u4e0d\u540c\u6574\u6570\uff1b.</p>\n\n<p>\u2461 \u5982\u679c\u5b58\u5728\u591a\u79cd\u7b54\u6848\uff0c\u4f60\u53ea\u9700\u5b9e\u73b0\u5e76\u8fd4\u56de\u5176\u4e2d\u4efb\u610f\u4e00\u79cd.</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> n = 3, k = 1\n<strong>\u8f93\u51fa:</strong> [1, 2, 3]\n<strong>\u89e3\u91ca:</strong> [1, 2, 3] \u5305\u542b 3 \u4e2a\u8303\u56f4\u5728 1-3 \u7684\u4e0d\u540c\u6574\u6570\uff0c \u5e76\u4e14 [1, 1] \u4e2d\u6709\u4e14\u4ec5\u6709 1 \u4e2a\u4e0d\u540c\u6574\u6570 : 1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> n = 3, k = 2\n<strong>\u8f93\u51fa:</strong> [1, 3, 2]\n<strong>\u89e3\u91ca:</strong> [1, 3, 2] \u5305\u542b 3 \u4e2a\u8303\u56f4\u5728 1-3 \u7684\u4e0d\u540c\u6574\u6570\uff0c \u5e76\u4e14 [2, 1] \u4e2d\u6709\u4e14\u4ec5\u6709 2 \u4e2a\u4e0d\u540c\u6574\u6570: 1 \u548c 2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li>&nbsp;<code>n</code>&nbsp;\u548c&nbsp;<code>k</code>&nbsp;\u6ee1\u8db3\u6761\u4ef6&nbsp;1 &lt;= k &lt; n &lt;= 10<sup>4</sup>.</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u4f18\u7f8e\u7684\u6392\u5217 II",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "668",
        "link": "kth-smallest-number-in-multiplication-table",
        "title": "Kth Smallest Number in Multiplication Table",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "29.9%",
        "questionDescription": "<p>\r\nNearly every one have used the <a href=\"https://en.wikipedia.org/wiki/Multiplication_table\">Multiplication Table</a>. But could you find out the <code>k-th</code> smallest number quickly from the multiplication table?\r\n</p>\r\n\r\n<p>\r\nGiven the height <code>m</code> and the length <code>n</code> of a <code>m * n</code> Multiplication Table, and a positive integer <code>k</code>, you need to return the <code>k-th</code> smallest number in this table.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> m = 3, n = 3, k = 5\r\n<b>Output:</b> \r\n<b>Explanation:</b> \r\nThe Multiplication Table:\r\n1\t2\t3\r\n2\t4\t6\r\n3\t6\t9\r\n\r\nThe 5-th smallest number is 3 (1, 2, 2, 3, 3).\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> m = 2, n = 3, k = 6\r\n<b>Output:</b> \r\n<b>Explanation:</b> \r\nThe Multiplication Table:\r\n1\t2\t3\r\n2\t4\t6\r\n\r\nThe 6-th smallest number is 6 (1, 2, 2, 3, 4, 6).\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The <code>m</code> and <code>n</code> will be in the range [1, 30000].</li>\r\n<li>The <code>k</code> will be in the range [1, m * n]</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u51e0\u4e4e\u6bcf\u4e00\u4e2a\u4eba\u90fd\u7528&nbsp;<a href=\"https://baike.baidu.com/item/%E4%B9%98%E6%B3%95%E8%A1%A8\">\u4e58\u6cd5\u8868</a>\u3002\u4f46\u662f\u4f60\u80fd\u5728\u4e58\u6cd5\u8868\u4e2d\u5feb\u901f\u627e\u5230\u7b2c<code>k</code>\u5c0f\u7684\u6570\u5b57\u5417\uff1f</p>\n\n<p>\u7ed9\u5b9a\u9ad8\u5ea6<code>m</code>&nbsp;\u3001\u5bbd\u5ea6<code>n</code> \u7684\u4e00\u5f20&nbsp;<code>m * n</code>\u7684\u4e58\u6cd5\u8868\uff0c\u4ee5\u53ca\u6b63\u6574\u6570<code>k</code>\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u8868\u4e2d\u7b2c<code>k</code>&nbsp;\u5c0f\u7684\u6570\u5b57\u3002</p>\n\n<p><strong>\u4f8b&nbsp;1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> m = 3, n = 3, k = 5\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \n\u4e58\u6cd5\u8868:\n1\t2\t3\n2\t4\t6\n3\t6\t9\n\n\u7b2c5\u5c0f\u7684\u6570\u5b57\u662f 3 (1, 2, 2, 3, 3).\n</pre>\n\n<p><strong>\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> m = 2, n = 3, k = 6\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> \n\u4e58\u6cd5\u8868:\n1\t2\t3\n2\t4\t6\n\n\u7b2c6\u5c0f\u7684\u6570\u5b57\u662f 6 (1, 2, 2, 3, 4, 6).\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li><code>m</code> \u548c&nbsp;<code>n</code>&nbsp;\u7684\u8303\u56f4\u5728 [1, 30000] \u4e4b\u95f4\u3002</li>\n\t<li><code>k</code> \u7684\u8303\u56f4\u5728 [1, m * n] \u4e4b\u95f4\u3002</li>\n</ol>\n",
        "titleZh": "\u4e58\u6cd5\u8868\u4e2d\u7b2ck\u5c0f\u7684\u6570",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "669",
        "link": "trim-a-binary-search-tree",
        "title": "Trim a Binary Search Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "60.4%",
        "questionDescription": "<p>\r\nGiven a binary search tree and the lowest and highest boundaries as <code>L</code> and <code>R</code>, trim the tree so that all its elements lies in <code>[L, R]</code> (R >= L). You might need to change the root of the tree, so the result should return the new root of the trimmed binary search tree.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\n    1\r\n   / \\\r\n  0   2\r\n\r\n  L = 1\r\n  R = 2\r\n\r\n<b>Output:</b> \r\n    1\r\n      \\\r\n       2\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\n    3\r\n   / \\\r\n  0   4\r\n   \\\r\n    2\r\n   /\r\n  1\r\n\r\n  L = 1\r\n  R = 3\r\n\r\n<b>Output:</b> \r\n      3\r\n     / \r\n   2   \r\n  /\r\n 1\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u540c\u65f6\u7ed9\u5b9a\u6700\u5c0f\u8fb9\u754c<code>L</code>&nbsp;\u548c\u6700\u5927\u8fb9\u754c&nbsp;<code>R</code>\u3002\u901a\u8fc7\u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4f7f\u5f97\u6240\u6709\u8282\u70b9\u7684\u503c\u5728<code>[L, R]</code>\u4e2d (R&gt;=L) \u3002\u4f60\u53ef\u80fd\u9700\u8981\u6539\u53d8\u6811\u7684\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u7ed3\u679c\u5e94\u5f53\u8fd4\u56de\u4fee\u526a\u597d\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b0\u7684\u6839\u8282\u70b9\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n    1\n   / \\\n  0   2\n\n  L = 1\n  R = 2\n\n<strong>\u8f93\u51fa:</strong> \n    1\n      \\\n       2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n    3\n   / \\\n  0   4\n   \\\n    2\n   /\n  1\n\n  L = 1\n  R = 3\n\n<strong>\u8f93\u51fa:</strong> \n      3\n     / \n   2   \n  /\n 1\n</pre>\n",
        "titleZh": "\u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Amazon",
            "Microsoft",
            "Bloomberg"
        ]
    },
    {
        "leetId": "670",
        "link": "maximum-swap",
        "title": "Maximum Swap",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "34.5%",
        "questionDescription": "<p>\r\nGiven a non-negative integer, you could swap two digits <b>at most</b> once to get the maximum valued number. Return the maximum valued number you could get.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> 2736\r\n<b>Output:</b> 7236\r\n<b>Explanation:</b> Swap the number 2 and the number 7.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> 9973\r\n<b>Output:</b> 9973\r\n<b>Explanation:</b> No swap.\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The given number is in the range [0, 10<sup>8</sup>]</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u4f60<strong>\u81f3\u591a</strong>\u53ef\u4ee5\u4ea4\u6362\u4e00\u6b21\u6570\u5b57\u4e2d\u7684\u4efb\u610f\u4e24\u4f4d\u3002\u8fd4\u56de\u4f60\u80fd\u5f97\u5230\u7684\u6700\u5927\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1 :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 2736\n<strong>\u8f93\u51fa:</strong> 7236\n<strong>\u89e3\u91ca:</strong> \u4ea4\u6362\u6570\u5b572\u548c\u6570\u5b577\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2 :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 9973\n<strong>\u8f93\u51fa:</strong> 9973\n<strong>\u89e3\u91ca:</strong> \u4e0d\u9700\u8981\u4ea4\u6362\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6570\u5b57\u7684\u8303\u56f4\u662f&nbsp;[0, 10<sup>8</sup>]</li>\n</ol>\n",
        "titleZh": "\u6700\u5927\u4ea4\u6362",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Facebook"
        ]
    },
    {
        "leetId": "671",
        "link": "second-minimum-node-in-a-binary-tree",
        "title": "Second Minimum Node In a Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "44.8%",
        "questionDescription": "<p>\r\nGiven a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly <code>two</code> or <code>zero</code> sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. \r\n</p>\r\n\r\n<p>\r\nGiven such a binary tree, you need to output the <b>second minimum</b> value in the set made of all the nodes' value in the whole tree. \r\n</p>\r\n\r\n<p>\r\nIf no such second minimum value exists, output -1 instead.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\n    2\r\n   / \\\r\n  2   5\r\n     / \\\r\n    5   7\r\n\r\n<b>Output:</b> 5\r\n<b>Explanation:</b> The smallest value is 2, the second smallest value is 5.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\n    2\r\n   / \\\r\n  2   2\r\n\r\n<b>Output:</b> -1\r\n<b>Explanation:</b> The smallest value is 2, but there isn't any second smallest value.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7279\u6b8a\u7684\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u6b63\u6570\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u91cf\u53ea\u80fd\u4e3a&nbsp;<code>2</code>&nbsp;\u6216&nbsp;<code>0</code>\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u7684\u503c\u4e0d\u5927\u4e8e\u5b83\u7684\u5b50\u8282\u70b9\u7684\u503c\u3002&nbsp;</p>\n\n<p>\u7ed9\u51fa\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u4f60\u9700\u8981\u8f93\u51fa\u6240\u6709\u8282\u70b9\u4e2d\u7684<strong>\u7b2c\u4e8c\u5c0f\u7684\u503c\u3002</strong>\u5982\u679c\u7b2c\u4e8c\u5c0f\u7684\u503c\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u8f93\u51fa -1 <strong>\u3002</strong></p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n    2\n   / \\\n  2   5\n     / \\\n    5   7\n\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u8bf4\u660e:</strong> \u6700\u5c0f\u7684\u503c\u662f 2 \uff0c\u7b2c\u4e8c\u5c0f\u7684\u503c\u662f 5 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n    2\n   / \\\n  2   2\n\n<strong>\u8f93\u51fa:</strong> -1\n<strong>\u8bf4\u660e:</strong> \u6700\u5c0f\u7684\u503c\u662f 2, \u4f46\u662f\u4e0d\u5b58\u5728\u7b2c\u4e8c\u5c0f\u7684\u503c\u3002\n</pre>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u4e2d\u7b2c\u4e8c\u5c0f\u7684\u8282\u70b9",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Microsoft",
            "LinkedIn"
        ]
    },
    {
        "leetId": "672",
        "link": "bulb-switcher-ii",
        "title": "Bulb Switcher II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "46.1%",
        "questionDescription": "<p>There is a room with <code>n</code> lights which are turned on initially and 4 buttons on the wall. After performing exactly <code>m</code> unknown operations towards buttons, you need to return how many different kinds of status of the <code>n</code> lights could be.</p>\r\n\r\n<p>Suppose <code>n</code> lights are labeled as number [1, 2, 3 ..., n], function of these 4 buttons are given below:</p>\r\n\r\n<ol>\r\n\t<li>Flip all the lights.</li>\r\n\t<li>Flip lights with even numbers.</li>\r\n\t<li>Flip lights with odd numbers.</li>\r\n\t<li>Flip lights with (3k + 1) numbers, k = 0, 1, 2, ...</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> n = 1, m = 1.\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> Status can be: [on], [off]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> n = 2, m = 1.\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> Status can be: [on, off], [off, on], [off, off]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> n = 3, m = 1.\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> Status can be: [off, on, off], [on, off, on], [off, off, off], [off, on, on].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b> <code>n</code> and <code>m</code> both fit in range [0, 1000].</p>\r\n",
        "questionDescriptionZh": "<p>\u73b0\u6709\u4e00\u4e2a\u623f\u95f4\uff0c\u5899\u4e0a\u6302\u6709&nbsp;<code>n</code>&nbsp;\u53ea\u5df2\u7ecf\u6253\u5f00\u7684\u706f\u6ce1\u548c 4 \u4e2a\u6309\u94ae\u3002\u5728\u8fdb\u884c\u4e86&nbsp;<code>m</code>&nbsp;\u6b21\u672a\u77e5\u64cd\u4f5c\u540e\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u8fd9&nbsp;<code>n</code>&nbsp;\u53ea\u706f\u6ce1\u53ef\u80fd\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u72b6\u6001\u3002</p>\n\n<p>\u5047\u8bbe\u8fd9 <code>n</code> \u53ea\u706f\u6ce1\u88ab\u7f16\u53f7\u4e3a [1, 2, 3 ..., n]\uff0c\u8fd9 4 \u4e2a\u6309\u94ae\u7684\u529f\u80fd\u5982\u4e0b\uff1a</p>\n\n<ol>\n\t<li>\u5c06\u6240\u6709\u706f\u6ce1\u7684\u72b6\u6001\u53cd\u8f6c\uff08\u5373\u5f00\u53d8\u4e3a\u5173\uff0c\u5173\u53d8\u4e3a\u5f00\uff09</li>\n\t<li>\u5c06\u7f16\u53f7\u4e3a\u5076\u6570\u7684\u706f\u6ce1\u7684\u72b6\u6001\u53cd\u8f6c</li>\n\t<li>\u5c06\u7f16\u53f7\u4e3a\u5947\u6570\u7684\u706f\u6ce1\u7684\u72b6\u6001\u53cd\u8f6c</li>\n\t<li>\u5c06\u7f16\u53f7\u4e3a <code>3k+1</code> \u7684\u706f\u6ce1\u7684\u72b6\u6001\u53cd\u8f6c\uff08k = 0, 1, 2, ...)</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 1, m = 1.\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u8bf4\u660e:</strong> \u72b6\u6001\u4e3a: [\u5f00], [\u5173]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 2, m = 1.\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u8bf4\u660e:</strong> \u72b6\u6001\u4e3a: [\u5f00, \u5173], [\u5173, \u5f00], [\u5173, \u5173]\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 3, m = 1.\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u8bf4\u660e:</strong> \u72b6\u6001\u4e3a: [\u5173, \u5f00, \u5173], [\u5f00, \u5173, \u5f00], [\u5173, \u5173, \u5173], [\u5173, \u5f00, \u5f00].\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>&nbsp;<code>n</code>&nbsp;\u548c&nbsp;<code>m</code> \u90fd\u5c5e\u4e8e [0, 1000].</p>\n",
        "titleZh": "\u706f\u6ce1\u5f00\u5173 \u2161",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Microsoft"
        ]
    },
    {
        "leetId": "673",
        "link": "number-of-longest-increasing-subsequence",
        "title": "Number of Longest Increasing Subsequence",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "27.9%",
        "questionDescription": "<p>\r\nGiven an unsorted array of integers, find the number of longest increasing subsequence.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,3,5,4,7]\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [2,2,2,2,2]\r\n<b>Output:</b> 5\r\n<b>Explanation:</b> The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nLength of the given array will be not exceed 2000 and the answer is guaranteed to be fit in 32-bit signed int.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,3,5,4,7]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \u6709\u4e24\u4e2a\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u5206\u522b\u662f [1, 3, 4, 7] \u548c[1, 3, 5, 7]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [2,2,2,2,2]\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u662f1\uff0c\u5e76\u4e14\u5b58\u57285\u4e2a\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u4e3a1\uff0c\u56e0\u6b64\u8f93\u51fa5\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong>&nbsp;\u7ed9\u5b9a\u7684\u6570\u7ec4\u957f\u5ea6\u4e0d\u8d85\u8fc7 2000 \u5e76\u4e14\u7ed3\u679c\u4e00\u5b9a\u662f32\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002</p>\n",
        "titleZh": "\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u4e2a\u6570",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Facebook",
            "Alibaba"
        ]
    },
    {
        "leetId": "674",
        "link": "longest-continuous-increasing-subsequence",
        "title": "Longest Continuous Increasing Subsequence",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "39.9%",
        "questionDescription": "<p>\r\nGiven an unsorted array of integers, find the length of longest <code>continuous</code> increasing subsequence (subarray).\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,3,5,4,7]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> The longest continuous increasing subsequence is [1,3,5], its length is 3. \r\nEven though [1,3,5,7] is also an increasing subsequence, it's not a continuous one where 5 and 7 are separated by 4. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [2,2,2,2,2]\r\n<b>Output:</b> 1\r\n<b>Explanation:</b> The longest continuous increasing subsequence is [2], its length is 1. \r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nLength of the array will not exceed 10,000.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u672a\u7ecf\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u5230\u6700\u957f\u4e14<strong>\u8fde\u7eed</strong>\u7684\u7684\u9012\u589e\u5e8f\u5217\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,3,5,4,7]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u6700\u957f\u8fde\u7eed\u9012\u589e\u5e8f\u5217\u662f [1,3,5], \u957f\u5ea6\u4e3a3\u3002\n\u5c3d\u7ba1 [1,3,5,7] \u4e5f\u662f\u5347\u5e8f\u7684\u5b50\u5e8f\u5217, \u4f46\u5b83\u4e0d\u662f\u8fde\u7eed\u7684\uff0c\u56e0\u4e3a5\u548c7\u5728\u539f\u6570\u7ec4\u91cc\u88ab4\u9694\u5f00\u3002 \n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [2,2,2,2,2]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> \u6700\u957f\u8fde\u7eed\u9012\u589e\u5e8f\u5217\u662f [2], \u957f\u5ea6\u4e3a1\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong>\u6570\u7ec4\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc710000\u3002</p>\n",
        "titleZh": "\u6700\u957f\u8fde\u7eed\u9012\u589e\u5e8f\u5217",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Facebook"
        ]
    },
    {
        "leetId": "675",
        "link": "cut-off-trees-for-golf-event",
        "title": "Cut Off Trees for Golf Event",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "23.9%",
        "questionDescription": "<p>You are asked to cut off trees in a forest for a golf event. The forest is represented as a non-negative 2D map, in this map:</p>\r\n\r\n<ol>\r\n\t<li><code>0</code> represents the <code>obstacle</code> can&#39;t be reached.</li>\r\n\t<li><code>1</code> represents the <code>ground</code> can be walked through.</li>\r\n\t<li><code>The place with number bigger than 1</code> represents a <code>tree</code> can be walked through, and this positive number represents the tree&#39;s height.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>You are asked to cut off <b>all</b> the trees in this forest in the order of tree&#39;s height - always cut off the tree with lowest height first. And after cutting, the original place has the tree will become a grass (value 1).</p>\r\n\r\n<p>You will start from the point (0, 0) and you should output the minimum steps <b>you need to walk</b> to cut off all the trees. If you can&#39;t cut off all the trees, output -1 in that situation.</p>\r\n\r\n<p>You are guaranteed that no two <code>trees</code> have the same height and there is at least one tree needs to be cut off.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n[\r\n [1,2,3],\r\n [0,0,4],\r\n [7,6,5]\r\n]\r\n<b>Output:</b> 6\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n[\r\n [1,2,3],\r\n [0,0,0],\r\n [7,6,5]\r\n]\r\n<b>Output:</b> -1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n[\r\n [2,3,4],\r\n [0,0,5],\r\n [8,7,6]\r\n]\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> You started from the point (0,0) and you can cut off the tree in (0,0) directly without walking.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Hint</b>: size of the given matrix will not exceed 50x50.</p>\r\n",
        "questionDescriptionZh": "<p>\u4f60\u88ab\u8bf7\u6765\u7ed9\u4e00\u4e2a\u8981\u4e3e\u529e\u9ad8\u5c14\u592b\u6bd4\u8d5b\u7684\u6811\u6797\u780d\u6811. \u6811\u6797\u7531\u4e00\u4e2a\u975e\u8d1f\u7684\u4e8c\u7ef4\u6570\u7ec4\u8868\u793a\uff0c \u5728\u8fd9\u4e2a\u6570\u7ec4\u4e2d\uff1a</p>\n\n<ol>\n\t<li><code>0</code> \u8868\u793a\u969c\u788d\uff0c\u65e0\u6cd5\u89e6\u78b0\u5230.</li>\n\t<li><code>1</code>&nbsp;\u8868\u793a\u53ef\u4ee5\u884c\u8d70\u7684\u5730\u9762.</li>\n\t<li><code>\u6bd41\u5927\u7684\u6570</code>&nbsp;\u8868\u793a\u4e00\u9897\u5141\u8bb8\u8d70\u8fc7\u7684\u6811\u7684\u9ad8\u5ea6.</li>\n</ol>\n\n<p>\u4f60\u88ab\u8981\u6c42\u6309\u7167\u6811\u7684\u9ad8\u5ea6\u4ece\u4f4e\u5411\u9ad8\u780d\u6389\u6240\u6709\u7684\u6811\uff0c\u6bcf\u780d\u8fc7\u4e00\u9897\u6811\uff0c\u6811\u7684\u9ad8\u5ea6\u53d8\u4e3a1\u3002</p>\n\n<p>\u4f60\u5c06\u4ece\uff080\uff0c0\uff09\u70b9\u5f00\u59cb\u5de5\u4f5c\uff0c\u4f60\u5e94\u8be5\u8fd4\u56de\u4f60\u780d\u5b8c\u6240\u6709\u6811\u9700\u8981\u8d70\u7684\u6700\u5c0f\u6b65\u6570\u3002 \u5982\u679c\u4f60\u65e0\u6cd5\u780d\u5b8c\u6240\u6709\u7684\u6811\uff0c\u8fd4\u56de -1 \u3002</p>\n\n<p>\u53ef\u4ee5\u4fdd\u8bc1\u7684\u662f\uff0c\u6ca1\u6709\u4e24\u68f5\u6811\u7684\u9ad8\u5ea6\u662f\u76f8\u540c\u7684\uff0c\u5e76\u4e14\u81f3\u5c11\u6709\u4e00\u9897\u6811\u9700\u8981\u4f60\u780d\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n[\n [1,2,3],\n [0,0,4],\n [7,6,5]\n]\n<strong>\u8f93\u51fa:</strong> 6\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n[\n [1,2,3],\n [0,0,0],\n [7,6,5]\n]\n<strong>\u8f93\u51fa:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \n[\n [2,3,4],\n [0,0,5],\n [8,7,6]\n]\n<strong>\u8f93\u51fa:</strong> 6\n\n<strong>\u89e3\u91ca:</strong> (0,0) \u4f4d\u7f6e\u7684\u6811\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u780d\u53bb\uff0c\u4e0d\u7528\u7b97\u6b65\u6570\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a</strong>: \u77e9\u9635\u5927\u5c0f\u4e0d\u4f1a\u8d85\u8fc7 50x50 \u3002</p>\n",
        "titleZh": "\u4e3a\u9ad8\u5c14\u592b\u6bd4\u8d5b\u780d\u6811",
        "tags": [
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "676",
        "link": "implement-magic-dictionary",
        "title": "Implement Magic Dictionary",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "48.5%",
        "questionDescription": "<p>\r\nImplement a magic directory with <code>buildDict</code>, and <code>search</code> methods.\r\n</p>\r\n\r\n<p>\r\nFor the method <code>buildDict</code>, you'll be given a list of non-repetitive words to build a dictionary.\r\n</p>\r\n\r\n<p>\r\nFor the method <code>search</code>, you'll be given a word, and judge whether if you modify <b>exactly</b> one character into <b>another</b> character in this word, the modified word is in the dictionary you just built.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\nInput: buildDict([\"hello\", \"leetcode\"]), Output: Null\r\nInput: search(\"hello\"), Output: False\r\nInput: search(\"hhllo\"), Output: True\r\nInput: search(\"hell\"), Output: False\r\nInput: search(\"leetcoded\"), Output: False\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>You may assume that all the inputs are consist of lowercase letters <code>a-z</code>.</li>\r\n<li>For contest purpose, the test data is rather small by now. You could think about highly efficient algorithm after the contest.</li>\r\n<li>Please remember to <b>RESET</b> your class variables declared in class MagicDictionary, as static/class variables are <b>persisted across multiple test cases</b>. Please see <a href=\"https://leetcode.com/faq/#different-output\">here</a> for more details.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u5b9e\u73b0\u4e00\u4e2a\u5e26\u6709<code>buildDict</code>, \u4ee5\u53ca&nbsp;<code>search</code>\u65b9\u6cd5\u7684\u9b54\u6cd5\u5b57\u5178\u3002</p>\n\n<p>\u5bf9\u4e8e<code>buildDict</code>\u65b9\u6cd5\uff0c\u4f60\u5c06\u88ab\u7ed9\u5b9a\u4e00\u4e32\u4e0d\u91cd\u590d\u7684\u5355\u8bcd\u6765\u6784\u5efa\u4e00\u4e2a\u5b57\u5178\u3002</p>\n\n<p>\u5bf9\u4e8e<code>search</code>\u65b9\u6cd5\uff0c\u4f60\u5c06\u88ab\u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\uff0c\u5e76\u4e14\u5224\u5b9a\u80fd\u5426\u53ea\u5c06\u8fd9\u4e2a\u5355\u8bcd\u4e2d<strong>\u4e00\u4e2a</strong>\u5b57\u6bcd\u6362\u6210\u53e6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u4f7f\u5f97\u6240\u5f62\u6210\u7684\u65b0\u5355\u8bcd\u5b58\u5728\u4e8e\u4f60\u6784\u5efa\u7684\u5b57\u5178\u4e2d\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\nInput: buildDict([&quot;hello&quot;, &quot;leetcode&quot;]), Output: Null\nInput: search(&quot;hello&quot;), Output: False\nInput: search(&quot;hhllo&quot;), Output: True\nInput: search(&quot;hell&quot;), Output: False\nInput: search(&quot;leetcoded&quot;), Output: False\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u8f93\u5165\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd&nbsp;<code>a-z</code>\u3002</li>\n\t<li>\u4e3a\u4e86\u4fbf\u4e8e\u7ade\u8d5b\uff0c\u6d4b\u8bd5\u6240\u7528\u7684\u6570\u636e\u91cf\u5f88\u5c0f\u3002\u4f60\u53ef\u4ee5\u5728\u7ade\u8d5b\u7ed3\u675f\u540e\uff0c\u8003\u8651\u66f4\u9ad8\u6548\u7684\u7b97\u6cd5\u3002</li>\n\t<li>\u8bf7\u8bb0\u4f4f<strong>\u91cd\u7f6e</strong>MagicDictionary\u7c7b\u4e2d\u58f0\u660e\u7684\u7c7b\u53d8\u91cf\uff0c\u56e0\u4e3a\u9759\u6001/\u7c7b\u53d8\u91cf\u4f1a\u5728\u591a\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u4fdd\u7559\u3002 \u8bf7\u53c2\u9605<a href=\"http://leetcode.com/faq/#different-output\">\u8fd9\u91cc</a>\u4e86\u89e3\u66f4\u591a\u8be6\u60c5\u3002</li>\n</ol>\n",
        "titleZh": "\u5b9e\u73b0\u4e00\u4e2a\u9b54\u6cd5\u5b57\u5178",
        "tags": [
            {
                "tag": "Trie",
                "link": "trie",
                "tagZh": "\u5b57\u5178\u6811"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "677",
        "link": "map-sum-pairs",
        "title": "Map Sum Pairs",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "58.1%",
        "questionDescription": "<p>\r\nImplement a MapSum class with <code>insert</code>, and <code>sum</code> methods.\r\n</p>\r\n\r\n<p>\r\nFor the method <code>insert</code>, you'll be given a pair of (string, integer). The string represents the key and the integer represents the value. If the key already existed, then the original key-value pair will be overridden to the new one.\r\n</p>\r\n\r\n<p>\r\nFor the method <code>sum</code>, you'll be given a string representing the prefix, and you need to return the sum of all the pairs' value whose key starts with the prefix.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\nInput: insert(\"apple\", 3), Output: Null\r\nInput: sum(\"ap\"), Output: 3\r\nInput: insert(\"app\", 2), Output: Null\r\nInput: sum(\"ap\"), Output: 5\r\n</pre>\r\n</p>\r\n",
        "questionDescriptionZh": "<p>\u5b9e\u73b0\u4e00\u4e2a MapSum \u7c7b\u91cc\u7684\u4e24\u4e2a\u65b9\u6cd5\uff0c<code>insert</code>&nbsp;\u548c&nbsp;<code>sum</code>\u3002</p>\n\n<p>\u5bf9\u4e8e\u65b9\u6cd5&nbsp;<code>insert</code>\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u5bf9\uff08\u5b57\u7b26\u4e32\uff0c\u6574\u6570\uff09\u7684\u952e\u503c\u5bf9\u3002\u5b57\u7b26\u4e32\u8868\u793a\u952e\uff0c\u6574\u6570\u8868\u793a\u503c\u3002\u5982\u679c\u952e\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u6765\u7684\u952e\u503c\u5bf9\u5c06\u88ab\u66ff\u4ee3\u6210\u65b0\u7684\u952e\u503c\u5bf9\u3002</p>\n\n<p>\u5bf9\u4e8e\u65b9\u6cd5 <code>sum</code>\uff0c\u4f60\u5c06\u5f97\u5230\u4e00\u4e2a\u8868\u793a\u524d\u7f00\u7684\u5b57\u7b26\u4e32\uff0c\u4f60\u9700\u8981\u8fd4\u56de\u6240\u6709\u4ee5\u8be5\u524d\u7f00\u5f00\u5934\u7684\u952e\u7684\u503c\u7684\u603b\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\u8f93\u5165: insert(&quot;apple&quot;, 3), \u8f93\u51fa: Null\n\u8f93\u5165: sum(&quot;ap&quot;), \u8f93\u51fa: 3\n\u8f93\u5165: insert(&quot;app&quot;, 2), \u8f93\u51fa: Null\n\u8f93\u5165: sum(&quot;ap&quot;), \u8f93\u51fa: 5\n</pre>\n",
        "titleZh": "\u952e\u503c\u6620\u5c04",
        "tags": [
            {
                "tag": "Trie",
                "link": "trie",
                "tagZh": "\u5b57\u5178\u6811"
            }
        ],
        "companies": [
            "Akuna Capital"
        ]
    },
    {
        "leetId": "678",
        "link": "valid-parenthesis-string",
        "title": "Valid Parenthesis String",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "25.5%",
        "questionDescription": "<p>\r\nGiven a string containing only three types of characters: '(', ')' and '*', write a function to check whether this string is valid. We define the validity of a string by these rules:\r\n<ol>\r\n<li>Any left parenthesis <code>'('</code> must have a corresponding right parenthesis <code>')'</code>.</li>\r\n<li>Any right parenthesis <code>')'</code> must have a corresponding left parenthesis <code>'('</code>.</li>\r\n<li>Left parenthesis <code>'('</code> must go before the corresponding right parenthesis <code>')'</code>.</li>\r\n<li><code>'*'</code> could be treated as a single right parenthesis <code>')'</code> or a single left parenthesis <code>'('</code> or an empty string.</li>\r\n<li>An empty string is also valid.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"()\"\r\n<b>Output:</b> True\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"(*)\"\r\n<b>Output:</b> True\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> \"(*))\"\r\n<b>Output:</b> True\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The string size will be in the range [1, 100].</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u4e09\u79cd\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff1a<code>\uff08&nbsp;</code>\uff0c<code>\uff09</code>&nbsp;\u548c <code>*</code>\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u68c0\u9a8c\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u6709\u6548\u5b57\u7b26\u4e32\u3002\u6709\u6548\u5b57\u7b26\u4e32\u5177\u6709\u5982\u4e0b\u89c4\u5219\uff1a</p>\n\n<ol>\n\t<li>\u4efb\u4f55\u5de6\u62ec\u53f7 <code>(</code>&nbsp;\u5fc5\u987b\u6709\u76f8\u5e94\u7684\u53f3\u62ec\u53f7 <code>)</code>\u3002</li>\n\t<li>\u4efb\u4f55\u53f3\u62ec\u53f7 <code>)</code>&nbsp;\u5fc5\u987b\u6709\u76f8\u5e94\u7684\u5de6\u62ec\u53f7 <code>(</code>&nbsp;\u3002</li>\n\t<li>\u5de6\u62ec\u53f7 <code>(</code> \u5fc5\u987b\u5728\u5bf9\u5e94\u7684\u53f3\u62ec\u53f7\u4e4b\u524d <code>)</code>\u3002</li>\n\t<li><code>*</code>&nbsp;\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5355\u4e2a\u53f3\u62ec\u53f7 <code>)</code>&nbsp;\uff0c\u6216\u5355\u4e2a\u5de6\u62ec\u53f7 <code>(</code>&nbsp;\uff0c\u6216\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u3002</li>\n\t<li>\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u4e5f\u88ab\u89c6\u4e3a\u6709\u6548\u5b57\u7b26\u4e32\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;()&quot;\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;(*)&quot;\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;(*))&quot;\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u5b57\u7b26\u4e32\u5927\u5c0f\u5c06\u5728 [1\uff0c100] \u8303\u56f4\u5185\u3002</li>\n</ol>\n",
        "titleZh": "\u6709\u6548\u7684\u62ec\u53f7\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Yahoo",
            "Alibaba"
        ]
    },
    {
        "leetId": "679",
        "link": "24-game",
        "title": "24 Game",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "37.4%",
        "questionDescription": "<p>\r\nYou have 4 cards each containing a number from 1 to 9.  You need to judge whether they could operated through <code>*</code>, <code>/</code>, <code>+</code>, <code>-</code>, <code>(</code>, <code>)</code> to get the value of 24.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [4, 1, 8, 7]\r\n<b>Output:</b> True\r\n<b>Explanation:</b> (8-4) * (7-1) = 24\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [1, 2, 1, 2]\r\n<b>Output:</b> False\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The division operator <code>/</code> represents real division, not integer division.  For example, 4 / (1 - 2/3) = 12.</li>\r\n<li>Every operation done is between two numbers.  In particular, we cannot use <code>-</code> as a unary operator.  For example, with <code>[1, 1, 1, 1]</code> as input, the expression <code>-1 - 1 - 1 - 1</code> is not allowed.</li>\r\n<li>You cannot concatenate numbers together.  For example, if the input is <code>[1, 2, 1, 2]</code>, we cannot write this as 12 + 12.</li>\r\n</ol>\r\n</p>\r\n</p>",
        "questionDescriptionZh": "<p>\u4f60\u6709 4 \u5f20\u5199\u6709 1 \u5230 9 \u6570\u5b57\u7684\u724c\u3002\u4f60\u9700\u8981\u5224\u65ad\u662f\u5426\u80fd\u901a\u8fc7&nbsp;<code>*</code>\uff0c<code>/</code>\uff0c<code>+</code>\uff0c<code>-</code>\uff0c<code>(</code>\uff0c<code>)</code>&nbsp;\u7684\u8fd0\u7b97\u5f97\u5230 24\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [4, 1, 8, 7]\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong> (8-4) * (7-1) = 24\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1, 2, 1, 2]\n<strong>\u8f93\u51fa:</strong> False\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u9664\u6cd5\u8fd0\u7b97\u7b26&nbsp;<code>/</code>&nbsp;\u8868\u793a\u5b9e\u6570\u9664\u6cd5\uff0c\u800c\u4e0d\u662f\u6574\u6570\u9664\u6cd5\u3002\u4f8b\u5982 4 / (1 - 2/3) = 12 \u3002</li>\n\t<li>\u6bcf\u4e2a\u8fd0\u7b97\u7b26\u5bf9\u4e24\u4e2a\u6570\u8fdb\u884c\u8fd0\u7b97\u3002\u7279\u522b\u662f\u6211\u4eec\u4e0d\u80fd\u7528&nbsp;<code>-</code>&nbsp;\u4f5c\u4e3a\u4e00\u5143\u8fd0\u7b97\u7b26\u3002\u4f8b\u5982\uff0c<code>[1, 1, 1, 1]</code>&nbsp;\u4f5c\u4e3a\u8f93\u5165\u65f6\uff0c\u8868\u8fbe\u5f0f&nbsp;<code>-1 - 1 - 1 - 1</code>&nbsp;\u662f\u4e0d\u5141\u8bb8\u7684\u3002</li>\n\t<li>\u4f60\u4e0d\u80fd\u5c06\u6570\u5b57\u8fde\u63a5\u5728\u4e00\u8d77\u3002\u4f8b\u5982\uff0c\u8f93\u5165\u4e3a&nbsp;<code>[1, 2, 1, 2]</code>&nbsp;\u65f6\uff0c\u4e0d\u80fd\u5199\u6210 12 + 12 \u3002</li>\n</ol>\n",
        "titleZh": "24\u70b9\u6e38\u620f",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Microsoft",
            "Uber",
            "Twitter"
        ]
    },
    {
        "leetId": "680",
        "link": "valid-palindrome-ii",
        "title": "Valid Palindrome II",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "30.0%",
        "questionDescription": "<p>\r\nGiven a non-empty string <code>s</code>, you may delete <b>at most</b> one character.  Judge whether you can make it a palindrome.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"aba\"\r\n<b>Output:</b> True\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"abca\"\r\n<b>Output:</b> True\r\n<b>Explanation:</b> You could delete the character 'c'.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The string will only contain lowercase characters a-z.\r\nThe maximum length of the string is 50000.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32&nbsp;<code>s</code>\uff0c<strong>\u6700\u591a</strong>\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\u3002\u5224\u65ad\u662f\u5426\u80fd\u6210\u4e3a\u56de\u6587\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;aba&quot;\n<strong>\u8f93\u51fa:</strong> True\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;abca&quot;\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong> \u4f60\u53ef\u4ee5\u5220\u9664c\u5b57\u7b26\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\u3002\u5b57\u7b26\u4e32\u7684\u6700\u5927\u957f\u5ea6\u662f50000\u3002</li>\n</ol>\n",
        "titleZh": "\u9a8c\u8bc1\u56de\u6587\u5b57\u7b26\u4e32 \u2161",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Yahoo",
            "Zenefits"
        ]
    },
    {
        "leetId": "681",
        "link": "next-closest-time",
        "title": "Next Closest Time",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "73",
        "questionDescription": "\n<p>Given a time represented in the format \"HH:MM\", form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.</p>\n<p>You may assume the given input string is always valid. For example, \"01:34\", \"12:09\" are all valid. \"1:34\", \"12:9\" are all invalid.</p>\n<p><b>Example 1:</b>\n</p><pre><b>Input:</b> \"19:34\"\n<b>Output:</b> \"19:39\"\n<b>Explanation:</b> The next closest time choosing from digits <b>1</b>, <b>9</b>, <b>3</b>, <b>4</b>, is <b>19:39</b>, which occurs 5 minutes later.  It is not <b>19:33</b>, because this occurs 23 hours and 59 minutes later.\n</pre>\n<p></p>\n<p><b>Example 2:</b>\n</p><pre><b>Input:</b> \"23:59\"\n<b>Output:</b> \"22:22\"\n<b>Explanation:</b> The next closest time choosing from digits <b>2</b>, <b>3</b>, <b>5</b>, <b>9</b>, is <b>22:22</b>. It may be assumed that the returned time is next day's time since it is smaller than the input time numerically.\n</pre>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a time represented in the format \"HH:MM\", form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.</p>\n<p>You may assume the given input string is always valid. For example, \"01:34\", \"12:09\" are all valid. \"1:34\", \"12:9\" are all invalid.</p>\n<p><b>Example 1:</b>\n</p><pre><b>Input:</b> \"19:34\"\n<b>Output:</b> \"19:39\"\n<b>Explanation:</b> The next closest time choosing from digits <b>1</b>, <b>9</b>, <b>3</b>, <b>4</b>, is <b>19:39</b>, which occurs 5 minutes later.  It is not <b>19:33</b>, because this occurs 23 hours and 59 minutes later.\n</pre>\n<p></p>\n<p><b>Example 2:</b>\n</p><pre><b>Input:</b> \"23:59\"\n<b>Output:</b> \"22:22\"\n<b>Explanation:</b> The next closest time choosing from digits <b>2</b>, <b>3</b>, <b>5</b>, <b>9</b>, is <b>22:22</b>. It may be assumed that the returned time is next day's time since it is smaller than the input time numerically.\n</pre>\n<p></p>\n",
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "682",
        "link": "baseball-game",
        "title": "Baseball Game",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "61.6%",
        "questionDescription": "<p>\r\nYou're now a baseball game point recorder.\r\n</p>\r\n\r\n<p>\r\nGiven a list of strings, each string can be one of the 4 following types:\r\n<ol>\r\n<li><code>Integer</code> (one round's score): Directly represents the number of points you get in this round.</li>\r\n<li><code>\"+\"</code> (one round's score): Represents that the points you get in this round are the sum of the last two <code>valid</code> round's points.</li>\r\n<li><code>\"D\"</code> (one round's score): Represents that the points you get in this round are the doubled data of the last <code>valid</code> round's points.</li>\r\n<li><code>\"C\"</code> (an operation, which isn't a round's score): Represents the last <code>valid</code> round's points you get were invalid and should be removed.</li>\r\n</ol>\r\n</p>\r\n\r\n<p>\r\nEach round's operation is permanent and could have an impact on the round before and the round after.\r\n</p>\r\n\r\n<p>\r\nYou need to return the sum of the points you could get in all the rounds.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [\"5\",\"2\",\"C\",\"D\",\"+\"]\r\n<b>Output:</b> 30\r\n<b>Explanation:</b> \r\nRound 1: You could get 5 points. The sum is: 5.\r\nRound 2: You could get 2 points. The sum is: 7.\r\nOperation 1: The round 2's data was invalid. The sum is: 5.  \r\nRound 3: You could get 10 points (the round 2's data has been removed). The sum is: 15.\r\nRound 4: You could get 5 + 10 = 15 points. The sum is: 30.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\r\n<b>Output:</b> 27\r\n<b>Explanation:</b> \r\nRound 1: You could get 5 points. The sum is: 5.\r\nRound 2: You could get -2 points. The sum is: 3.\r\nRound 3: You could get 4 points. The sum is: 7.\r\nOperation 1: The round 3's data is invalid. The sum is: 3.  \r\nRound 4: You could get -4 points (the round 3's data has been removed). The sum is: -1.\r\nRound 5: You could get 9 points. The sum is: 8.\r\nRound 6: You could get -4 + 9 = 5 points. The sum is 13.\r\nRound 7: You could get 9 + 5 = 14 points. The sum is 27.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\n<li>The size of the input list will be between 1 and 1000.</li>\r\n<li>Every integer represented in the list will be between -30000 and 30000.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u4f60\u73b0\u5728\u662f\u68d2\u7403\u6bd4\u8d5b\u8bb0\u5f55\u5458\u3002<br>\n\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u662f\u4ee5\u4e0b\u56db\u79cd\u7c7b\u578b\u4e4b\u4e00\uff1a<br>\n1.<code>\u6574\u6570</code>\uff08\u4e00\u8f6e\u7684\u5f97\u5206\uff09\uff1a\u76f4\u63a5\u8868\u793a\u60a8\u5728\u672c\u8f6e\u4e2d\u83b7\u5f97\u7684\u79ef\u5206\u6570\u3002<br>\n2. <code>&quot;+&quot;</code>\uff08\u4e00\u8f6e\u7684\u5f97\u5206\uff09\uff1a\u8868\u793a\u672c\u8f6e\u83b7\u5f97\u7684\u5f97\u5206\u662f\u524d\u4e24\u8f6e<code>\u6709\u6548</code>&nbsp;\u56de\u5408\u5f97\u5206\u7684\u603b\u548c\u3002<br>\n3. <code>&quot;D&quot;</code>\uff08\u4e00\u8f6e\u7684\u5f97\u5206\uff09\uff1a\u8868\u793a\u672c\u8f6e\u83b7\u5f97\u7684\u5f97\u5206\u662f\u524d\u4e00\u8f6e<code>\u6709\u6548</code>&nbsp;\u56de\u5408\u5f97\u5206\u7684\u4e24\u500d\u3002<br>\n4. <code>&quot;C&quot;</code>\uff08\u4e00\u4e2a\u64cd\u4f5c\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u56de\u5408\u7684\u5206\u6570\uff09\uff1a\u8868\u793a\u60a8\u83b7\u5f97\u7684\u6700\u540e\u4e00\u4e2a<code>\u6709\u6548</code>&nbsp;\u56de\u5408\u7684\u5206\u6570\u662f\u65e0\u6548\u7684\uff0c\u5e94\u8be5\u88ab\u79fb\u9664\u3002<br>\n<br>\n\u6bcf\u4e00\u8f6e\u7684\u64cd\u4f5c\u90fd\u662f\u6c38\u4e45\u6027\u7684\uff0c\u53ef\u80fd\u4f1a\u5bf9\u524d\u4e00\u8f6e\u548c\u540e\u4e00\u8f6e\u4ea7\u751f\u5f71\u54cd\u3002<br>\n\u4f60\u9700\u8981\u8fd4\u56de\u4f60\u5728\u6240\u6709\u56de\u5408\u4e2d\u5f97\u5206\u7684\u603b\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [&quot;5&quot;,&quot;2&quot;,&quot;C&quot;,&quot;D&quot;,&quot;+&quot;]\n<strong>\u8f93\u51fa:</strong> 30\n<strong>\u89e3\u91ca:</strong> \n\u7b2c1\u8f6e\uff1a\u4f60\u53ef\u4ee5\u5f97\u52305\u5206\u3002\u603b\u548c\u662f\uff1a5\u3002\n\u7b2c2\u8f6e\uff1a\u4f60\u53ef\u4ee5\u5f97\u52302\u5206\u3002\u603b\u548c\u662f\uff1a7\u3002\n\u64cd\u4f5c1\uff1a\u7b2c2\u8f6e\u7684\u6570\u636e\u65e0\u6548\u3002\u603b\u548c\u662f\uff1a5\u3002\n\u7b2c3\u8f6e\uff1a\u4f60\u53ef\u4ee5\u5f97\u523010\u5206\uff08\u7b2c2\u8f6e\u7684\u6570\u636e\u5df2\u88ab\u5220\u9664\uff09\u3002\u603b\u6570\u662f\uff1a15\u3002\n\u7b2c4\u8f6e\uff1a\u4f60\u53ef\u4ee5\u5f97\u52305 + 10 = 15\u5206\u3002\u603b\u6570\u662f\uff1a30\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [&quot;5&quot;,&quot;-2&quot;,&quot;4&quot;,&quot;C&quot;,&quot;D&quot;,&quot;9&quot;,&quot;+&quot;,&quot;+&quot;]\n<strong>\u8f93\u51fa:</strong> 27\n<strong>\u89e3\u91ca:</strong> \n\u7b2c1\u8f6e\uff1a\u4f60\u53ef\u4ee5\u5f97\u52305\u5206\u3002\u603b\u548c\u662f\uff1a5\u3002\n\u7b2c2\u8f6e\uff1a\u4f60\u53ef\u4ee5\u5f97\u5230-2\u5206\u3002\u603b\u6570\u662f\uff1a3\u3002\n\u7b2c3\u8f6e\uff1a\u4f60\u53ef\u4ee5\u5f97\u52304\u5206\u3002\u603b\u548c\u662f\uff1a7\u3002\n\u64cd\u4f5c1\uff1a\u7b2c3\u8f6e\u7684\u6570\u636e\u65e0\u6548\u3002\u603b\u6570\u662f\uff1a3\u3002\n\u7b2c4\u8f6e\uff1a\u4f60\u53ef\u4ee5\u5f97\u5230-4\u5206\uff08\u7b2c\u4e09\u8f6e\u7684\u6570\u636e\u5df2\u88ab\u5220\u9664\uff09\u3002\u603b\u548c\u662f\uff1a-1\u3002\n\u7b2c5\u8f6e\uff1a\u4f60\u53ef\u4ee5\u5f97\u52309\u5206\u3002\u603b\u6570\u662f\uff1a8\u3002\n\u7b2c6\u8f6e\uff1a\u4f60\u53ef\u4ee5\u5f97\u5230-4 + 9 = 5\u5206\u3002\u603b\u6570\u662f13\u3002\n\u7b2c7\u8f6e\uff1a\u4f60\u53ef\u4ee5\u5f97\u52309 + 5 = 14\u5206\u3002\u603b\u6570\u662f27\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li>\u8f93\u5165\u5217\u8868\u7684\u5927\u5c0f\u5c06\u4ecb\u4e8e1\u548c1000\u4e4b\u95f4\u3002</li>\n\t<li>\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u90fd\u5c06\u4ecb\u4e8e-30000\u548c30000\u4e4b\u95f4\u3002</li>\n</ul>\n",
        "titleZh": "\u68d2\u7403\u6bd4\u8d5b",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "683",
        "link": "k-empty-slots",
        "title": "K Empty Slots",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "71",
        "questionDescription": "\n<p>\nThere is a garden with <code>N</code> slots. In each slot, there is a flower. The <code>N</code> flowers will bloom one by one in <code>N</code> days. In each day, there will be <code>exactly</code> one flower blooming and it will be in the status of blooming since then.\n</p>\n<p>\nGiven an array <code>flowers</code> consists of number from <code>1</code> to <code>N</code>. Each number in the array represents the place where the flower will open in that day.\n</p>\n<p>\nFor example, <code>flowers[i] = x</code> means that the unique flower that blooms at day <code>i</code> will be at position <code>x</code>, where <code>i</code> and <code>x</code> will be in the range from <code>1</code> to <code>N</code>.\n</p>\n<p>\nAlso given an integer <code>k</code>, you need to output in which day there exists two flowers in the status of blooming, and also the number of flowers between them is <code>k</code> and these flowers are not blooming.\n</p>\n<p>\nIf there isn't such day, output -1.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> \nflowers: [1,3,2]\nk: 1\n<b>Output:</b> 2\n<b>Explanation:</b> In the second day, the first and the third flower have become blooming.\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> \nflowers: [1,2,3]\nk: 1\n<b>Output:</b> -1\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The given array will be in the range [1, 20000].</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>\nThere is a garden with <code>N</code> slots. In each slot, there is a flower. The <code>N</code> flowers will bloom one by one in <code>N</code> days. In each day, there will be <code>exactly</code> one flower blooming and it will be in the status of blooming since then.\n</p>\n<p>\nGiven an array <code>flowers</code> consists of number from <code>1</code> to <code>N</code>. Each number in the array represents the place where the flower will open in that day.\n</p>\n<p>\nFor example, <code>flowers[i] = x</code> means that the unique flower that blooms at day <code>i</code> will be at position <code>x</code>, where <code>i</code> and <code>x</code> will be in the range from <code>1</code> to <code>N</code>.\n</p>\n<p>\nAlso given an integer <code>k</code>, you need to output in which day there exists two flowers in the status of blooming, and also the number of flowers between them is <code>k</code> and these flowers are not blooming.\n</p>\n<p>\nIf there isn't such day, output -1.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> \nflowers: [1,3,2]\nk: 1\n<b>Output:</b> 2\n<b>Explanation:</b> In the second day, the first and the third flower have become blooming.\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> \nflowers: [1,2,3]\nk: 1\n<b>Output:</b> -1\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The given array will be in the range [1, 20000].</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Microsoft"
        ]
    },
    {
        "leetId": "684",
        "link": "redundant-connection",
        "title": "Redundant Connection",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "48.1%",
        "questionDescription": "<p>\r\nIn this problem, a tree is an <b>undirected</b> graph that is connected and has no cycles.\r\n</p><p>\r\nThe given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added.  The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\r\n</p><p>\r\nThe resulting graph is given as a 2D-array of <code>edges</code>.  Each element of <code>edges</code> is a pair <code>[u, v]</code> with <code>u < v</code>, that represents an <b>undirected</b> edge connecting nodes <code>u</code> and <code>v</code>.\r\n</p><p>\r\nReturn an edge that can be removed so that the resulting graph is a tree of N nodes.  If there are multiple answers, return the answer that occurs last in the given 2D-array.  The answer edge <code>[u, v]</code> should be in the same format, with <code>u < v</code>.\r\n</p><p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [[1,2], [1,3], [2,3]]\r\n<b>Output:</b> [2,3]\r\n<b>Explanation:</b> The given undirected graph will be like this:\r\n  1\r\n / \\\r\n2 - 3\r\n</pre>\r\n</p>\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [[1,2], [2,3], [3,4], [1,4], [1,5]]\r\n<b>Output:</b> [1,4]\r\n<b>Explanation:</b> The given undirected graph will be like this:\r\n5 - 1 - 2\r\n    |   |\r\n    4 - 3\r\n</pre>\r\n</p>\r\n<p><b>Note:</b><br />\r\n<li>The size of the input 2D-array will be between 3 and 1000.</li>\r\n<li>Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.</li>\r\n</p>\r\n\r\n<br />\r\n\r\n<p>\r\n<b><font color=\"red\">Update (2017-09-26):</font></b><br>\r\nWe have overhauled the problem description + test cases and specified clearly the graph is an <b><i>undirected</i></b> graph. For the <b><i>directed</i></b> graph follow up please see <b><a href=\"https://leetcode.com/problems/redundant-connection-ii/description/\">Redundant Connection II</a></b>). We apologize for any inconvenience caused.\r\n</p>",
        "questionDescriptionZh": "<p>\u5728\u672c\u95ee\u9898\u4e2d, \u6811\u6307\u7684\u662f\u4e00\u4e2a\u8fde\u901a\u4e14\u65e0\u73af\u7684<strong>\u65e0\u5411</strong>\u56fe\u3002</p>\n\n<p>\u8f93\u5165\u4e00\u4e2a\u56fe\uff0c\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9 (\u8282\u70b9\u503c\u4e0d\u91cd\u590d1, 2, ..., N) \u7684\u6811\u53ca\u4e00\u6761\u9644\u52a0\u7684\u8fb9\u6784\u6210\u3002\u9644\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u57281\u5230N\u4e2d\u95f4\uff0c\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002</p>\n\n<p>\u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u4ee5<code>\u8fb9</code>\u7ec4\u6210\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002\u6bcf\u4e00\u4e2a<code>\u8fb9</code>\u7684\u5143\u7d20\u662f\u4e00\u5bf9<code>[u, v]</code>&nbsp;\uff0c\u6ee1\u8db3&nbsp;<code>u &lt; v</code>\uff0c\u8868\u793a\u8fde\u63a5\u9876\u70b9<code>u</code>&nbsp;\u548c<code>v</code>\u7684<strong>\u65e0\u5411</strong>\u56fe\u7684\u8fb9\u3002</p>\n\n<p>\u8fd4\u56de\u4e00\u6761\u53ef\u4ee5\u5220\u53bb\u7684\u8fb9\uff0c\u4f7f\u5f97\u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9\u7684\u6811\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u6700\u540e\u51fa\u73b0\u7684\u8fb9\u3002\u7b54\u6848\u8fb9&nbsp;<code>[u, v]</code> \u5e94\u6ee1\u8db3\u76f8\u540c\u7684\u683c\u5f0f&nbsp;<code>u &lt; v</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[1,2], [1,3], [2,3]]\n<strong>\u8f93\u51fa:</strong> [2,3]\n<strong>\u89e3\u91ca:</strong> \u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e3a:\n  1\n / \\\n2 - 3\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[1,2], [2,3], [3,4], [1,4], [1,5]]\n<strong>\u8f93\u51fa:</strong> [1,4]\n<strong>\u89e3\u91ca:</strong> \u7ed9\u5b9a\u7684\u65e0\u5411\u56fe\u4e3a:\n5 - 1 - 2\n    |   |\n    4 - 3\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u8f93\u5165\u7684\u4e8c\u7ef4\u6570\u7ec4\u5927\u5c0f\u5728 3 \u5230 1000\u3002</li>\n\t<li>\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u6574\u6570\u57281\u5230N\u4e4b\u95f4\uff0c\u5176\u4e2dN\u662f\u8f93\u5165\u6570\u7ec4\u7684\u5927\u5c0f\u3002</li>\n</ul>\n\n<p><strong>\u66f4\u65b0(2017-09-26):</strong><br>\n\u6211\u4eec\u5df2\u7ecf\u91cd\u65b0\u68c0\u67e5\u4e86\u95ee\u9898\u63cf\u8ff0\u53ca\u6d4b\u8bd5\u7528\u4f8b\uff0c\u660e\u786e\u56fe\u662f<em><strong>\u65e0\u5411&nbsp;</strong></em>\u56fe\u3002\u5bf9\u4e8e\u6709\u5411\u56fe\u8be6\u89c1<strong><a href=\"https://leetcodechina.com/problems/redundant-connection-ii/description/\">\u5197\u4f59\u8fde\u63a5II</a>\u3002</strong>\u5bf9\u4e8e\u9020\u6210\u4efb\u4f55\u4e0d\u4fbf\uff0c\u6211\u4eec\u6df1\u611f\u6b49\u610f\u3002</p>\n",
        "titleZh": "\u5197\u4f59\u8fde\u63a5",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "685",
        "link": "redundant-connection-ii",
        "title": "Redundant Connection II",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "27.9%",
        "questionDescription": "<p>\r\nIn this problem, a rooted tree is a <b>directed</b> graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\r\n</p><p>\r\nThe given input is a directed graph that started as a rooted tree with N nodes (with distinct values 1, 2, ..., N), with one additional directed edge added.  The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\r\n</p><p>\r\nThe resulting graph is given as a 2D-array of <code>edges</code>.  Each element of <code>edges</code> is a pair <code>[u, v]</code> that represents a <b>directed</b> edge connecting nodes <code>u</code> and <code>v</code>, where <code>u</code> is a parent of child <code>v</code>.\r\n</p><p>\r\nReturn an edge that can be removed so that the resulting graph is a rooted tree of N nodes.  If there are multiple answers, return the answer that occurs last in the given 2D-array.\r\n</p><p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [[1,2], [1,3], [2,3]]\r\n<b>Output:</b> [2,3]\r\n<b>Explanation:</b> The given directed graph will be like this:\r\n  1\r\n / \\\r\nv   v\r\n2-->3\r\n</pre>\r\n</p>\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [[1,2], [2,3], [3,4], [4,1], [1,5]]\r\n<b>Output:</b> [4,1]\r\n<b>Explanation:</b> The given directed graph will be like this:\r\n5 <- 1 -> 2\r\n     ^    |\r\n     |    v\r\n     4 <- 3\r\n</pre>\r\n</p>\r\n<p><b>Note:</b><br />\r\n<li>The size of the input 2D-array will be between 3 and 1000.</li>\r\n<li>Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u5728\u672c\u95ee\u9898\u4e2d\uff0c\u6709\u6839\u6811\u6307\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684<strong>\u6709\u5411</strong>\u56fe\u3002\u8be5\u6811\u53ea\u6709\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6240\u6709\u5176\u4ed6\u8282\u70b9\u90fd\u662f\u8be5\u6839\u8282\u70b9\u7684\u540e\u7ee7\u3002\u6bcf\u4e00\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u7236\u8282\u70b9\uff0c\u9664\u4e86\u6839\u8282\u70b9\u6ca1\u6709\u7236\u8282\u70b9\u3002</p>\n\n<p>\u8f93\u5165\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u8be5\u56fe\u7531\u4e00\u4e2a\u6709\u7740N\u4e2a\u8282\u70b9 (\u8282\u70b9\u503c\u4e0d\u91cd\u590d1, 2, ..., N) \u7684\u6811\u53ca\u4e00\u6761\u9644\u52a0\u7684\u8fb9\u6784\u6210\u3002\u9644\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u57281\u5230N\u4e2d\u95f4\uff0c\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002</p>\n\n<p>\u7ed3\u679c\u56fe\u662f\u4e00\u4e2a\u4ee5<code>\u8fb9</code>\u7ec4\u6210\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002 \u6bcf\u4e00\u4e2a<code>\u8fb9</code> \u7684\u5143\u7d20\u662f\u4e00\u5bf9 <code>[u, v]</code>\uff0c\u7528\u4ee5\u8868\u793a<strong>\u6709\u5411</strong>\u56fe\u4e2d\u8fde\u63a5\u9876\u70b9 <code>u</code> and <code>v</code>\u548c\u9876\u70b9\u7684\u8fb9\uff0c\u5176\u4e2d\u7236\u8282\u70b9<code>u</code>\u662f\u5b50\u8282\u70b9<code>v</code>\u7684\u4e00\u4e2a\u7236\u8282\u70b9\u3002</p>\n\n<p>\u8fd4\u56de\u4e00\u6761\u80fd\u5220\u9664\u7684\u8fb9\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u56fe\u662f\u6709N\u4e2a\u8282\u70b9\u7684\u6709\u6839\u6811\u3002\u82e5\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u8fd4\u56de\u6700\u540e\u51fa\u73b0\u5728\u7ed9\u5b9a\u4e8c\u7ef4\u6570\u7ec4\u7684\u7b54\u6848\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [[1,2], [1,3], [2,3]]\n<strong>\u8f93\u51fa:</strong> [2,3]\n<strong>\u89e3\u91ca:</strong> \u7ed9\u5b9a\u7684\u6709\u5411\u56fe\u5982\u4e0b:\n  1\n / \\\nv   v\n2--&gt;3\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [[1,2], [2,3], [3,4], [4,1], [1,5]]\n<strong>\u8f93\u51fa:</strong> [4,1]\n<strong>\u89e3\u91ca:</strong> \u7ed9\u5b9a\u7684\u6709\u5411\u56fe\u5982\u4e0b:\n5 &lt;- 1 -&gt; 2\n     ^    |\n     |    v\n     4 &lt;- 3\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u4e8c\u7ef4\u6570\u7ec4\u5927\u5c0f\u7684\u57283\u52301000\u8303\u56f4\u5185\u3002</li>\n\t<li>\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u57281\u5230N\u4e4b\u95f4\uff0c\u5176\u4e2d N \u662f\u4e8c\u7ef4\u6570\u7ec4\u7684\u5927\u5c0f\u3002</li>\n</ul>\n",
        "titleZh": "\u5197\u4f59\u8fde\u63a5 II",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "686",
        "link": "repeated-string-match",
        "title": "Repeated String Match",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "28.6%",
        "questionDescription": "<p>Given two strings A and B, find the minimum number of times A has to be repeated such that B is a substring of it. If no such solution, return -1.</p>\r\n\r\n<p>For example, with A = &quot;abcd&quot; and B = &quot;cdabcdab&quot;.</p>\r\n\r\n<p>Return 3, because by repeating A three times (&ldquo;abcdabcdabcd&rdquo;), B is a substring of it; and B is not a substring of A repeated two times (&quot;abcdabcd&quot;).</p>\r\n\r\n<p><b>Note:</b><br />\r\nThe length of <code>A</code> and <code>B</code> will be between 1 and 10000.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 A \u548c B, \u5bfb\u627e\u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32A\u7684\u6700\u5c0f\u6b21\u6570\uff0c\u4f7f\u5f97\u5b57\u7b26\u4e32B\u6210\u4e3a\u53e0\u52a0\u540e\u7684\u5b57\u7b26\u4e32A\u7684\u5b50\u4e32\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de -1\u3002</p>\n\n<p>\u4e3e\u4e2a\u4f8b\u5b50\uff0cA = &quot;abcd&quot;\uff0cB = &quot;cdabcdab&quot;\u3002</p>\n\n<p>\u7b54\u6848\u4e3a 3\uff0c&nbsp;\u56e0\u4e3a A \u91cd\u590d\u53e0\u52a0\u4e09\u904d\u540e\u4e3a&nbsp;&ldquo;abcdabcdabcd&rdquo;\uff0c\u6b64\u65f6 B \u662f\u5176\u5b50\u4e32\uff1bA \u91cd\u590d\u53e0\u52a0\u4e24\u904d\u540e\u4e3a&quot;abcdabcd&quot;\uff0cB \u5e76\u4e0d\u662f\u5176\u5b50\u4e32\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<p>&nbsp;<code>A</code>&nbsp;\u4e0e&nbsp;<code>B</code>&nbsp;\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u57281\u548c10000\u533a\u95f4\u8303\u56f4\u5185\u3002</p>\n",
        "titleZh": "\u91cd\u590d\u53e0\u52a0\u5b57\u7b26\u4e32\u5339\u914d",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "687",
        "link": "longest-univalue-path",
        "title": "Longest Univalue Path",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "33.8%",
        "questionDescription": "<p>Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.</p>\r\n\r\n<p><b>Note:</b> The length of path between two nodes is represented by the number of edges between them.</p>\r\n\r\n<p>\r\n<b>Example 1:</b>\r\n</p>\r\n\r\n\r\n<p>\r\nInput:\r\n<pre>\r\n              5\r\n             / \\\r\n            4   5\r\n           / \\   \\\r\n          1   1   5\r\n</pre>\r\n</p>\r\n\r\n<p>\r\nOutput:\r\n<pre>\r\n2\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Example 2:</b>\r\n</p>\r\n\r\n\r\n<p>\r\nInput:\r\n<pre>\r\n              1\r\n             / \\\r\n            4   5\r\n           / \\   \\\r\n          4   4   5\r\n</pre>\r\n</p>\r\n\r\n<p>\r\nOutput:\r\n<pre>\r\n2\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe given binary tree has not more than 10000 nodes.  The height of the tree is not more than 1000.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u5230\u6700\u957f\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u8def\u5f84\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5177\u6709\u76f8\u540c\u503c\u3002 \u8fd9\u6761\u8def\u5f84\u53ef\u4ee5\u7ecf\u8fc7\u4e5f\u53ef\u4ee5\u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9\u3002</p>\n\n<p><strong>\u6ce8\u610f</strong>\uff1a\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u7531\u5b83\u4eec\u4e4b\u95f4\u7684\u8fb9\u6570\u8868\u793a\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<p>\u8f93\u5165:</p>\n\n<pre>\n              5\n             / \\\n            4   5\n           / \\   \\\n          1   1   5\n</pre>\n\n<p>\u8f93\u51fa:</p>\n\n<pre>\n2\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<p>\u8f93\u5165:</p>\n\n<pre>\n              1\n             / \\\n            4   5\n           / \\   \\\n          4   4   5\n</pre>\n\n<p>\u8f93\u51fa:</p>\n\n<pre>\n2\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong> \u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u4e0d\u8d85\u8fc710000\u4e2a\u7ed3\u70b9\u3002&nbsp;\u6811\u7684\u9ad8\u5ea6\u4e0d\u8d85\u8fc71000\u3002</p>\n",
        "titleZh": "\u6700\u957f\u540c\u503c\u8def\u5f84",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Recursion",
                "link": "recursion",
                "tagZh": "\u9012\u5f52"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Alibaba"
        ]
    },
    {
        "leetId": "688",
        "link": "knight-probability-in-chessboard",
        "title": "Knight Probability in Chessboard",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "40.0%",
        "questionDescription": "<p>On an <code>N</code>x<code>N</code> chessboard, a knight starts at the <code>r</code>-th row and <code>c</code>-th column and attempts to make exactly <code>K</code> moves. The rows and columns are 0 indexed, so the top-left square is <code>(0, 0)</code>, and the bottom-right square is <code>(N-1, N-1)</code>.</p>\r\n\r\n<p>A chess knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/knight.png\" style=\"width: 200px; height: 200px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.</p>\r\n\r\n<p>The knight continues moving until it has made exactly <code>K</code> moves or has moved off the chessboard. Return the probability that the knight remains on the board after it has stopped moving.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> 3, 2, 0, 0\r\n<b>Output:</b> 0.0625\r\n<b>Explanation:</b> There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\r\nFrom each of those positions, there are also two moves that will keep the knight on the board.\r\nThe total probability the knight stays on the board is 0.0625.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li><code>N</code> will be between 1 and 25.</li>\r\n\t<li><code>K</code> will be between 0 and 100.</li>\r\n\t<li>The knight always initially starts on the board.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5df2\u77e5\u4e00\u4e2a&nbsp;<code>N</code>x<code>N</code>&nbsp;\u7684\u56fd\u9645\u8c61\u68cb\u68cb\u76d8\uff0c\u68cb\u76d8\u7684\u884c\u53f7\u548c\u5217\u53f7\u90fd\u662f\u4ece 0 \u5f00\u59cb\u3002\u5373\u6700\u5de6\u4e0a\u89d2\u7684\u683c\u5b50\u8bb0\u4e3a&nbsp;<code>(0, 0)</code>\uff0c\u6700\u53f3\u4e0b\u89d2\u7684\u8bb0\u4e3a&nbsp;<code>(N-1, N-1)</code>\u3002&nbsp;</p>\n\n<p>\u73b0\u6709\u4e00\u4e2a &ldquo;\u9a6c&rdquo;\uff08\u4e5f\u8bd1\u4f5c &ldquo;\u9a91\u58eb&rdquo;\uff09\u4f4d\u4e8e&nbsp;<code>(r, c)</code>&nbsp;\uff0c\u5e76\u6253\u7b97\u8fdb\u884c&nbsp;<code>K</code> \u6b21\u79fb\u52a8\u3002&nbsp;</p>\n\n<p>\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u56fd\u9645\u8c61\u68cb\u7684 &ldquo;\u9a6c&rdquo; \u6bcf\u4e00\u6b65\u5148\u6cbf\u6c34\u5e73\u6216\u5782\u76f4\u65b9\u5411\u79fb\u52a8 2 \u4e2a\u683c\u5b50\uff0c\u7136\u540e\u5411\u4e0e\u4e4b\u76f8\u5782\u76f4\u7684\u65b9\u5411\u518d\u79fb\u52a8 1 \u4e2a\u683c\u5b50\uff0c\u5171\u6709 8 \u4e2a\u53ef\u9009\u7684\u4f4d\u7f6e\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/knight.png\" style=\"height: 200px; width: 200px;\"></p>\n\n<p>&nbsp;</p>\n\n<p>\u73b0\u5728 &ldquo;\u9a6c&rdquo; \u6bcf\u4e00\u6b65\u90fd\u4ece\u53ef\u9009\u7684\u4f4d\u7f6e\uff08\u5305\u62ec\u68cb\u76d8\u5916\u90e8\u7684\uff09\u4e2d\u72ec\u7acb\u968f\u673a\u5730\u9009\u62e9\u4e00\u4e2a\u8fdb\u884c\u79fb\u52a8\uff0c\u76f4\u5230\u79fb\u52a8\u4e86&nbsp;<code>K</code>&nbsp;\u6b21\u6216\u8df3\u5230\u4e86\u68cb\u76d8\u5916\u9762\u3002</p>\n\n<p>\u6c42\u79fb\u52a8\u7ed3\u675f\u540e\uff0c&ldquo;\u9a6c&rdquo; \u4ecd\u7559\u5728\u68cb\u76d8\u4e0a\u7684\u6982\u7387\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> 3, 2, 0, 0\n<strong>\u8f93\u51fa:</strong> 0.0625\n<strong>\u89e3\u91ca:</strong> \n\u8f93\u5165\u7684\u6570\u636e\u4f9d\u6b21\u4e3a N, K, r, c\n\u7b2c 1 \u6b65\u65f6\uff0c\u6709\u4e14\u53ea\u6709 2 \u79cd\u8d70\u6cd5\u4ee4 &ldquo;\u9a6c&rdquo; \u53ef\u4ee5\u7559\u5728\u68cb\u76d8\u4e0a\uff08\u8df3\u5230\uff081,2\uff09\u6216\uff082,1\uff09\uff09\u3002\u5bf9\u4e8e\u4ee5\u4e0a\u7684\u4e24\u79cd\u60c5\u51b5\uff0c\u5404\u81ea\u5728\u7b2c2\u6b65\u5747\u6709\u4e14\u53ea\u67092\u79cd\u8d70\u6cd5\u4ee4 &ldquo;\u9a6c&rdquo; \u4ecd\u7136\u7559\u5728\u68cb\u76d8\u4e0a\u3002\n\u6240\u4ee5 &ldquo;\u9a6c&rdquo; \u5728\u7ed3\u675f\u540e\u4ecd\u5728\u68cb\u76d8\u4e0a\u7684\u6982\u7387\u4e3a 0.0625\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li><code>N</code> \u7684\u53d6\u503c\u8303\u56f4\u4e3a [1, 25]</li>\n\t<li><code>K</code>&nbsp;\u7684\u53d6\u503c\u8303\u56f4\u4e3a [0, 100]</li>\n\t<li>\u5f00\u59cb\u65f6\uff0c&ldquo;\u9a6c&rdquo; \u603b\u662f\u4f4d\u4e8e\u68cb\u76d8\u4e0a</li>\n</ul>\n",
        "titleZh": "\u201c\u9a6c\u201d\u5728\u68cb\u76d8\u4e0a\u7684\u6982\u7387",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Goldman Sachs"
        ]
    },
    {
        "leetId": "689",
        "link": "maximum-sum-of-3-non-overlapping-subarrays",
        "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "40.4%",
        "questionDescription": "<p>\r\nIn a given array <code>nums</code> of positive integers, find three non-overlapping subarrays with maximum sum.\r\n</p>\r\n<p>\r\nEach subarray will be of size <code>k</code>, and we want to maximize the sum of all <code>3*k</code> entries.\r\n</p>\r\n<p>\r\nReturn the result as a list of indices representing the starting position of each interval (0-indexed).  If there are multiple answers, return the lexicographically smallest one.\r\n</p>\r\n<p><b>Example:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,2,1,2,6,7,5,1], 2\r\n<b>Output:</b> [0, 3, 5]\r\n<b>Explanation:</b> Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\r\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\n<li><code>nums.length</code> will be between 1 and 20000.</li>\r\n<li><code>nums[i]</code> will be between 1 and 65535.</li>\r\n<li><code>k</code> will be between 1 and floor(nums.length / 3).</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u6570\u7ec4&nbsp;<code>nums</code>&nbsp;\u7531\u6b63\u6574\u6570\u7ec4\u6210\uff0c\u627e\u5230\u4e09\u4e2a\u4e92\u4e0d\u91cd\u53e0\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u3002</p>\n\n<p>\u6bcf\u4e2a\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u4e3a<code>k</code>\uff0c\u6211\u4eec\u8981\u4f7f\u8fd9<code>3*k</code>\u4e2a\u9879\u7684\u548c\u6700\u5927\u5316\u3002</p>\n\n<p>\u8fd4\u56de\u6bcf\u4e2a\u533a\u95f4\u8d77\u59cb\u7d22\u5f15\u7684\u5217\u8868\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002\u5982\u679c\u6709\u591a\u4e2a\u7ed3\u679c\uff0c\u8fd4\u56de\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u4e00\u4e2a\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,1,2,6,7,5,1], 2\n<strong>\u8f93\u51fa:</strong> [0, 3, 5]\n<strong>\u89e3\u91ca:</strong> \u5b50\u6570\u7ec4 [1, 2], [2, 6], [7, 5] \u5bf9\u5e94\u7684\u8d77\u59cb\u7d22\u5f15\u4e3a [0, 3, 5]\u3002\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u53d6 [2, 1], \u4f46\u662f\u7ed3\u679c [1, 3, 5] \u5728\u5b57\u5178\u5e8f\u4e0a\u66f4\u5927\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>nums.length</code>\u7684\u8303\u56f4\u5728<code>[1, 20000]</code>\u4e4b\u95f4\u3002</li>\n\t<li><code>nums[i]</code>\u7684\u8303\u56f4\u5728<code>[1, 65535]</code>\u4e4b\u95f4\u3002</li>\n\t<li><code>k</code>\u7684\u8303\u56f4\u5728<code>[1, floor(nums.length / 3)]</code>\u4e4b\u95f4\u3002</li>\n</ul>\n",
        "titleZh": "\u4e09\u4e2a\u65e0\u91cd\u53e0\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "690",
        "link": "employee-importance",
        "title": "Employee Importance",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "49.7%",
        "questionDescription": "<p>You are given a data structure of employee information, which includes the employee&#39;s <b>unique id</b>, his <b>importance value</b> and his <b>direct</b> subordinates&#39; id.</p>\r\n\r\n<p>For example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. They have importance value 15, 10 and 5, respectively. Then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is <b>not direct</b>.</p>\r\n\r\n<p>Now given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all his subordinates.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\r\n<b>Output:</b> 11\r\n<b>Explanation:</b>\r\nEmployee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3. They both have importance value 3. So the total importance value of employee 1 is 5 + 3 + 3 = 11.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>One employee has at most one <b>direct</b> leader and may have several subordinates.</li>\r\n\t<li>The maximum number of employees won&#39;t exceed 2000.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4fdd\u5b58\u5458\u5de5\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u5305\u542b\u4e86\u5458\u5de5<strong>\u552f\u4e00\u7684id</strong>\uff0c<strong>\u91cd\u8981\u5ea6&nbsp;</strong>\u548c <strong>\u76f4\u7cfb\u4e0b\u5c5e\u7684id</strong>\u3002</p>\n\n<p>\u6bd4\u5982\uff0c\u5458\u5de51\u662f\u5458\u5de52\u7684\u9886\u5bfc\uff0c\u5458\u5de52\u662f\u5458\u5de53\u7684\u9886\u5bfc\u3002\u4ed6\u4eec\u76f8\u5e94\u7684\u91cd\u8981\u5ea6\u4e3a15, 10, 5\u3002\u90a3\u4e48\u5458\u5de51\u7684\u6570\u636e\u7ed3\u6784\u662f[1, 15, [2]]\uff0c\u5458\u5de52\u7684\u6570\u636e\u7ed3\u6784\u662f[2, 10, [3]]\uff0c\u5458\u5de53\u7684\u6570\u636e\u7ed3\u6784\u662f[3, 5, []]\u3002\u6ce8\u610f\u867d\u7136\u5458\u5de53\u4e5f\u662f\u5458\u5de51\u7684\u4e00\u4e2a\u4e0b\u5c5e\uff0c\u4f46\u662f\u7531\u4e8e<strong>\u5e76\u4e0d\u662f\u76f4\u7cfb</strong>\u4e0b\u5c5e\uff0c\u56e0\u6b64\u6ca1\u6709\u4f53\u73b0\u5728\u5458\u5de51\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u3002</p>\n\n<p>\u73b0\u5728\u8f93\u5165\u4e00\u4e2a\u516c\u53f8\u7684\u6240\u6709\u5458\u5de5\u4fe1\u606f\uff0c\u4ee5\u53ca\u5355\u4e2a\u5458\u5de5id\uff0c\u8fd4\u56de\u8fd9\u4e2a\u5458\u5de5\u548c\u4ed6\u6240\u6709\u4e0b\u5c5e\u7684\u91cd\u8981\u5ea6\u4e4b\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\n<strong>\u8f93\u51fa:</strong> 11\n<strong>\u89e3\u91ca:</strong>\n\u5458\u5de51\u81ea\u8eab\u7684\u91cd\u8981\u5ea6\u662f5\uff0c\u4ed6\u6709\u4e24\u4e2a\u76f4\u7cfb\u4e0b\u5c5e2\u548c3\uff0c\u800c\u4e142\u548c3\u7684\u91cd\u8981\u5ea6\u5747\u4e3a3\u3002\u56e0\u6b64\u5458\u5de51\u7684\u603b\u91cd\u8981\u5ea6\u662f 5 + 3 + 3 = 11\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u4e00\u4e2a\u5458\u5de5\u6700\u591a\u6709\u4e00\u4e2a<strong>\u76f4\u7cfb</strong>\u9886\u5bfc\uff0c\u4f46\u662f\u53ef\u4ee5\u6709\u591a\u4e2a<strong>\u76f4\u7cfb</strong>\u4e0b\u5c5e</li>\n\t<li>\u5458\u5de5\u6570\u91cf\u4e0d\u8d85\u8fc72000\u3002</li>\n</ol>\n",
        "titleZh": "\u5458\u5de5\u7684\u91cd\u8981\u6027",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Amazon",
            "Uber"
        ]
    },
    {
        "leetId": "691",
        "link": "stickers-to-spell-word",
        "title": "Stickers to Spell Word",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "45.9%",
        "questionDescription": "<p>\r\nWe are given N different types of stickers.  Each sticker has a lowercase English word on it.\r\n</p><p>\r\nYou would like to spell out the given <code>target</code> string by cutting individual letters from your collection of stickers and rearranging them.\r\n</p><p>\r\nYou can use each sticker more than once if you want, and you have infinite quantities of each sticker.\r\n</p><p>\r\nWhat is the minimum number of stickers that you need to spell out the <code>target</code>?  If the task is impossible, return -1.\r\n</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n<p>Input:<pre>\r\n[\"with\", \"example\", \"science\"], \"thehat\"\r\n</pre></p>\r\n\r\n<p>Output:<pre>\r\n3\r\n</pre></p>\r\n\r\n<p>Explanation:<pre>\r\nWe can use 2 \"with\" stickers, and 1 \"example\" sticker.\r\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\r\nAlso, this is the minimum number of stickers necessary to form the target string.\r\n</pre></p>\r\n\r\n<p><b>Example 2:</b></p>\r\n<p>Input:<pre>\r\n[\"notice\", \"possible\"], \"basicbasic\"\r\n</pre></p>\r\n\r\n<p>Output:<pre>\r\n-1\r\n</pre></p>\r\n\r\n<p>Explanation:<pre>\r\nWe can't form the target \"basicbasic\" from cutting letters from the given stickers.\r\n</pre></p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>stickers</code> has length in the range <code>[1, 50]</code>.</li>\r\n<li><code>stickers</code> consists of lowercase English words (without apostrophes).</li>\r\n<li><code>target</code> has length in the range <code>[1, 15]</code>, and consists of lowercase English letters.</li>\r\n<li>In all test cases, all words were chosen <u>randomly</u> from the 1000 most common US English words, and the target was chosen as a concatenation of two random words.</li>\r\n<li>The time limit may be more challenging than usual.  It is expected that a 50 sticker test case can be solved within 35ms on average.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u6211\u4eec\u7ed9\u51fa\u4e86 N \u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u8d34\u7eb8\u3002\u6bcf\u4e2a\u8d34\u7eb8\u4e0a\u90fd\u6709\u4e00\u4e2a\u5c0f\u5199\u7684\u82f1\u6587\u5355\u8bcd\u3002</p>\n\n<p>\u4f60\u5e0c\u671b\u4ece\u81ea\u5df1\u7684\u8d34\u7eb8\u96c6\u5408\u4e2d\u88c1\u526a\u5355\u4e2a\u5b57\u6bcd\u5e76\u91cd\u65b0\u6392\u5217\u5b83\u4eec\uff0c\u4ece\u800c\u62fc\u5199\u51fa\u7ed9\u5b9a\u7684\u76ee\u6807\u5b57\u7b26\u4e32 <code>target</code>\u3002</p>\n\n<p>\u5982\u679c\u4f60\u613f\u610f\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u4e0d\u6b62\u4e00\u6b21\u5730\u4f7f\u7528\u6bcf\u4e00\u5f20\u8d34\u7eb8\uff0c\u800c\u4e14\u6bcf\u4e00\u5f20\u8d34\u7eb8\u7684\u6570\u91cf\u90fd\u662f\u65e0\u9650\u7684\u3002</p>\n\n<p>\u62fc\u51fa\u76ee\u6807&nbsp;<code>target</code> \u6240\u9700\u7684\u6700\u5c0f\u8d34\u7eb8\u6570\u91cf\u662f\u591a\u5c11\uff1f\u5982\u679c\u4efb\u52a1\u4e0d\u53ef\u80fd\uff0c\u5219\u8fd4\u56de -1\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p>\u8f93\u5165\uff1a</p>\n\n<pre>[&quot;with&quot;, &quot;example&quot;, &quot;science&quot;], &quot;thehat&quot;\n</pre>\n\n<p>\u8f93\u51fa\uff1a</p>\n\n<pre>3\n</pre>\n\n<p>\u89e3\u91ca\uff1a</p>\n\n<pre>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 2 \u4e2a &quot;with&quot; \u8d34\u7eb8\uff0c\u548c 1 \u4e2a &quot;example&quot; \u8d34\u7eb8\u3002\n\u628a\u8d34\u7eb8\u4e0a\u7684\u5b57\u6bcd\u526a\u4e0b\u6765\u5e76\u91cd\u65b0\u6392\u5217\u540e\uff0c\u5c31\u53ef\u4ee5\u5f62\u6210\u76ee\u6807 &ldquo;thehat&ldquo; \u4e86\u3002\n\u6b64\u5916\uff0c\u8fd9\u662f\u5f62\u6210\u76ee\u6807\u5b57\u7b26\u4e32\u6240\u9700\u7684\u6700\u5c0f\u8d34\u7eb8\u6570\u91cf\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p>\u8f93\u5165\uff1a</p>\n\n<pre>[&quot;notice&quot;, &quot;possible&quot;], &quot;basicbasic&quot;\n</pre>\n\n<p>\u8f93\u51fa\uff1a</p>\n\n<pre>-1\n</pre>\n\n<p>\u89e3\u91ca\uff1a</p>\n\n<pre>\u6211\u4eec\u4e0d\u80fd\u901a\u8fc7\u526a\u5207\u7ed9\u5b9a\u8d34\u7eb8\u7684\u5b57\u6bcd\u6765\u5f62\u6210\u76ee\u6807&ldquo;basicbasic&rdquo;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>stickers</code> \u957f\u5ea6\u8303\u56f4\u662f&nbsp;<code>[1, 50]</code>\u3002</li>\n\t<li><code>stickers</code> \u7531\u5c0f\u5199\u82f1\u6587\u5355\u8bcd\u7ec4\u6210\uff08\u4e0d\u5e26\u6487\u53f7\uff09\u3002</li>\n\t<li><code>target</code> \u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 15]</code>&nbsp;\u8303\u56f4\u5185\uff0c\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n\t<li>\u5728\u6240\u6709\u7684\u6d4b\u8bd5\u6848\u4f8b\u4e2d\uff0c\u6240\u6709\u7684\u5355\u8bcd\u90fd\u662f\u4ece 1000 \u4e2a\u6700\u5e38\u89c1\u7684\u7f8e\u56fd\u82f1\u8bed\u5355\u8bcd\u4e2d\u968f\u673a\u9009\u53d6\u7684\uff0c\u76ee\u6807\u662f\u4e24\u4e2a\u968f\u673a\u5355\u8bcd\u7684\u4e32\u8054\u3002</li>\n\t<li>\u65f6\u95f4\u9650\u5236\u53ef\u80fd\u6bd4\u5e73\u65f6\u66f4\u5177\u6311\u6218\u6027\u3002\u9884\u8ba1 50 \u4e2a\u8d34\u7eb8\u7684\u6d4b\u8bd5\u6848\u4f8b\u5e73\u5747\u53ef\u572835ms\u5185\u89e3\u51b3\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u8d34\u7eb8\u62fc\u8bcd",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "IXL"
        ]
    },
    {
        "leetId": "692",
        "link": "top-k-frequent-words",
        "title": "Top K Frequent Words",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "38.2%",
        "questionDescription": "<p>Given a non-empty list of words, return the <i>k</i> most frequent elements.</p>\r\n<p>Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], k = 2\r\n<b>Output:</b> [\"i\", \"love\"]\r\n<b>Explanation:</b> \"i\" and \"love\" are the two most frequent words.\r\n    Note that \"i\" comes before \"love\" due to a lower alphabetical order.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], k = 4\r\n<b>Output:</b> [\"the\", \"is\", \"sunny\", \"day\"]\r\n<b>Explanation:</b> \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words,\r\n    with the number of occurrence being 4, 3, 2 and 1 respectively.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>You may assume <i>k</i> is always valid, 1 &le; <i>k</i> &le; number of unique elements.</li>\r\n<li>Input words contain only lowercase letters.</li>\r\n</ol>\r\n</p>\r\n\r\n<p><b>Follow up:</b><br />\r\n<ol>\r\n<li>Try to solve it in <i>O</i>(<i>n</i> log <i>k</i>) time and <i>O</i>(<i>n</i>) extra space.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u4e00\u975e\u7a7a\u7684\u5355\u8bcd\u5217\u8868\uff0c\u8fd4\u56de\u524d&nbsp;<em>k&nbsp;</em>\u4e2a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5355\u8bcd\u3002</p>\n\n<p>\u8fd4\u56de\u7684\u7b54\u6848\u5e94\u8be5\u6309\u5355\u8bcd\u51fa\u73b0\u9891\u7387\u7531\u9ad8\u5230\u4f4e\u6392\u5e8f\u3002\u5982\u679c\u4e0d\u540c\u7684\u5355\u8bcd\u6709\u76f8\u540c\u51fa\u73b0\u9891\u7387\uff0c\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [&quot;i&quot;, &quot;love&quot;, &quot;leetcode&quot;, &quot;i&quot;, &quot;love&quot;, &quot;coding&quot;], k = 2\n<strong>\u8f93\u51fa:</strong> [&quot;i&quot;, &quot;love&quot;]\n<strong>\u89e3\u6790:</strong> &quot;i&quot; \u548c &quot;love&quot; \u4e3a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u5747\u4e3a2\u6b21\u3002\n    \u6ce8\u610f\uff0c\u6309\u5b57\u6bcd\u987a\u5e8f &quot;i&quot; \u5728 &quot;love&quot; \u4e4b\u524d\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [&quot;the&quot;, &quot;day&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;the&quot;, &quot;the&quot;, &quot;the&quot;, &quot;sunny&quot;, &quot;is&quot;, &quot;is&quot;], k = 4\n<strong>\u8f93\u51fa:</strong> [&quot;the&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;day&quot;]\n<strong>\u89e3\u6790:</strong> &quot;the&quot;, &quot;is&quot;, &quot;sunny&quot; \u548c &quot;day&quot; \u662f\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u56db\u4e2a\u5355\u8bcd\uff0c\n    \u51fa\u73b0\u6b21\u6570\u4f9d\u6b21\u4e3a 4, 3, 2 \u548c 1 \u6b21\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u5047\u5b9a <em>k</em> \u603b\u4e3a\u6709\u6548\u503c\uff0c 1 &le; <em>k</em> &le; \u96c6\u5408\u5143\u7d20\u6570\u3002</li>\n\t<li>\u8f93\u5165\u7684\u5355\u8bcd\u5747\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6269\u5c55\u7ec3\u4e60\uff1a</strong></p>\n\n<ol>\n\t<li>\u5c1d\u8bd5\u4ee5&nbsp;<em>O</em>(<em>n</em> log <em>k</em>) \u65f6\u95f4\u590d\u6742\u5ea6\u548c&nbsp;<em>O</em>(<em>n</em>) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u3002</li>\n</ol>\n",
        "titleZh": "\u524dK\u4e2a\u9ad8\u9891\u5355\u8bcd",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Trie",
                "link": "trie",
                "tagZh": "\u5b57\u5178\u6811"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Apple",
            "LinkedIn",
            "Yahoo",
            "Twitter",
            "Goldman Sachs",
            "Yelp",
            "VMware",
            "Salesforce",
            "Pocket Gems",
            "TripAdvisor"
        ]
    },
    {
        "leetId": "693",
        "link": "binary-number-with-alternating-bits",
        "title": "Binary Number with Alternating Bits",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "59.2%",
        "questionDescription": "<p>Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> 5\r\n<b>Output:</b> True\r\n<b>Explanation:</b>\r\nThe binary representation of 5 is: 101\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> 7\r\n<b>Output:</b> False\r\n<b>Explanation:</b>\r\nThe binary representation of 7 is: 111.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> 11\r\n<b>Output:</b> False\r\n<b>Explanation:</b>\r\nThe binary representation of 11 is: 1011.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 4:</b><br />\r\n<pre>\r\n<b>Input:</b> 10\r\n<b>Output:</b> True\r\n<b>Explanation:</b>\r\nThe binary representation of 10 is: 1010.\r\n</pre>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u68c0\u67e5\u4ed6\u662f\u5426\u4e3a\u4ea4\u66ff\u4f4d\u4e8c\u8fdb\u5236\u6570\uff1a\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u4ed6\u7684\u4e8c\u8fdb\u5236\u6570\u76f8\u90bb\u7684\u4e24\u4e2a\u4f4d\u6570\u6c38\u4e0d\u76f8\u7b49\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 5\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong>\n5\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 101\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 7\n<strong>\u8f93\u51fa:</strong> False\n<strong>\u89e3\u91ca:</strong>\n7\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 111\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 11\n<strong>\u8f93\u51fa:</strong> False\n<strong>\u89e3\u91ca:</strong>\n11\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 1011\n</pre>\n\n<p><strong>&nbsp;\u793a\u4f8b 4:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> 10\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong>\n10\u7684\u4e8c\u8fdb\u5236\u6570\u662f: 1010\n</pre>\n",
        "titleZh": "\u4ea4\u66ff\u4f4d\u4e8c\u8fdb\u5236\u6570",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ],
        "companies": [
            "Yahoo"
        ]
    },
    {
        "leetId": "694",
        "link": "number-of-distinct-islands",
        "title": "Number of Distinct Islands",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "32",
        "questionDescription": "\n<p>Given a non-empty 2D array <code>grid</code> of 0's and 1's, an <b>island</b> is a group of <code>1</code>'s (representing land) connected 4-directionally (horizontal or vertical.)  You may assume all four edges of the grid are surrounded by water.</p>\n<p>Count the number of <b>distinct</b> islands.  An island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.</p>\n<p><b>Example 1:</b><br/>\n</p><pre>11000\n11000\n00011\n00011\n</pre>\nGiven the above grid map, return <code>1</code>.\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre>11011\n10000\n00001\n11011</pre>\nGiven the above grid map, return <code>3</code>.<br/><br/>\nNotice that:\n<pre>11\n1\n</pre>\nand\n<pre> 1\n11\n</pre>\nare considered different island shapes, because we do not consider reflection / rotation.\n<p></p>\n<p><b>Note:</b>\nThe length of each dimension in the given <code>grid</code> does not exceed 50.\n</p>\n",
        "questionDescriptionZh": "\n<p>Given a non-empty 2D array <code>grid</code> of 0's and 1's, an <b>island</b> is a group of <code>1</code>'s (representing land) connected 4-directionally (horizontal or vertical.)  You may assume all four edges of the grid are surrounded by water.</p>\n<p>Count the number of <b>distinct</b> islands.  An island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.</p>\n<p><b>Example 1:</b><br/>\n</p><pre>11000\n11000\n00011\n00011\n</pre>\nGiven the above grid map, return <code>1</code>.\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre>11011\n10000\n00001\n11011</pre>\nGiven the above grid map, return <code>3</code>.<br/><br/>\nNotice that:\n<pre>11\n1\n</pre>\nand\n<pre> 1\n11\n</pre>\nare considered different island shapes, because we do not consider reflection / rotation.\n<p></p>\n<p><b>Note:</b>\nThe length of each dimension in the given <code>grid</code> does not exceed 50.\n</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "LinkedIn",
            "Lyft"
        ]
    },
    {
        "leetId": "695",
        "link": "max-area-of-island",
        "title": "Max Area of Island",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "53.6%",
        "questionDescription": "<p>Given a non-empty 2D array <code>grid</code> of 0&#39;s and 1&#39;s, an <b>island</b> is a group of <code>1</code>&#39;s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p>\r\n\r\n<p>Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\r\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\r\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\r\n [0,1,0,0,1,1,0,0,<b>1</b>,0,<b>1</b>,0,0],\r\n [0,1,0,0,1,1,0,0,<b>1</b>,<b>1</b>,<b>1</b>,0,0],\r\n [0,0,0,0,0,0,0,0,0,0,<b>1</b>,0,0],\r\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\r\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\r\n</pre>\r\nGiven the above grid, return <code>6</code>. Note the answer is not 11, because the island must be connected 4-directionally.\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n[[0,0,0,0,0,0,0,0]]</pre>\r\nGiven the above grid, return <code>0</code>.\r\n\r\n<p><b>Note:</b> The length of each dimension in the given <code>grid</code> does not exceed 50.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u4e86\u4e00\u4e9b 0 \u548c 1\u7684\u975e\u7a7a\u4e8c\u7ef4\u6570\u7ec4&nbsp;<code>grid</code>&nbsp;, \u4e00\u4e2a&nbsp;<strong>\u5c9b\u5c7f</strong>&nbsp;\u662f\u7531\u56db\u4e2a\u65b9\u5411 (\u6c34\u5e73\u6216\u5782\u76f4) \u7684&nbsp;<code>1</code>&nbsp;(\u4ee3\u8868\u571f\u5730) \u6784\u6210\u7684\u7ec4\u5408\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u4e8c\u7ef4\u77e9\u9635\u7684\u56db\u4e2a\u8fb9\u7f18\u90fd\u88ab\u6c34\u5305\u56f4\u7740\u3002</p>\n\n<p>\u627e\u5230\u7ed9\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u6700\u5927\u7684\u5c9b\u5c7f\u9762\u79ef\u3002(\u5982\u679c\u6ca1\u6709\u5c9b\u5c7f\uff0c\u5219\u8fd4\u56de\u9762\u79ef\u4e3a0\u3002)</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\n [0,1,0,0,1,1,0,0,<strong>1</strong>,0,<strong>1</strong>,0,0],\n [0,1,0,0,1,1,0,0,<strong>1</strong>,<strong>1</strong>,<strong>1</strong>,0,0],\n [0,0,0,0,0,0,0,0,0,0,<strong>1</strong>,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\n</pre>\n\n<p>\u5bf9\u4e8e\u4e0a\u9762\u8fd9\u4e2a\u7ed9\u5b9a\u77e9\u9635\u5e94\u8fd4\u56de&nbsp;<code>6</code>\u3002\u6ce8\u610f\u7b54\u6848\u4e0d\u5e94\u8be5\u662f11\uff0c\u56e0\u4e3a\u5c9b\u5c7f\u53ea\u80fd\u5305\u542b\u6c34\u5e73\u6216\u5782\u76f4\u7684\u56db\u4e2a\u65b9\u5411\u7684&lsquo;1&rsquo;\u3002</p>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n[[0,0,0,0,0,0,0,0]]</pre>\n\n<p>\u5bf9\u4e8e\u4e0a\u9762\u8fd9\u4e2a\u7ed9\u5b9a\u7684\u77e9\u9635, \u8fd4\u56de&nbsp;<code>0</code>\u3002</p>\n\n<p><strong>\u6ce8\u610f:&nbsp;</strong>\u7ed9\u5b9a\u7684\u77e9\u9635<code>grid</code>&nbsp;\u7684\u957f\u5ea6\u548c\u5bbd\u5ea6\u90fd\u4e0d\u8d85\u8fc7 50\u3002</p>\n",
        "titleZh": "\u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Uber",
            "Adobe",
            "LinkedIn",
            "Alibaba",
            "Intuit",
            "Qualtrics",
            "Affirm",
            "DoorDash",
            "Sumologic"
        ]
    },
    {
        "leetId": "696",
        "link": "count-binary-substrings",
        "title": "Count Binary Substrings",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "46.0%",
        "questionDescription": "<p>Give a string <code>s</code>, count the number of non-empty (contiguous) substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively. \r\n</p>\r\n<p>Substrings that occur multiple times are counted the number of times they occur.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \"00110011\"\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\r\n<br>Notice that some of these substrings repeat and are counted the number of times they occur.\r\n<br>Also, \"00110011\" is not a valid substring because <b>all</b> the 0's (and 1's) are not grouped together.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \"10101\"\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>s.length</code> will be between 1 and 50,000.</li>\r\n<li><code>s</code> will only consist of \"0\" or \"1\" characters.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<code>s</code>\uff0c\u8ba1\u7b97\u5177\u6709\u76f8\u540c\u6570\u91cf0\u548c1\u7684\u975e\u7a7a(\u8fde\u7eed)\u5b50\u5b57\u7b26\u4e32\u7684\u6570\u91cf\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5b50\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u67090\u548c\u6240\u67091\u90fd\u662f\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u3002</p>\n\n<p>\u91cd\u590d\u51fa\u73b0\u7684\u5b50\u4e32\u8981\u8ba1\u7b97\u5b83\u4eec\u51fa\u73b0\u7684\u6b21\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1 :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;00110011&quot;\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> \u67096\u4e2a\u5b50\u4e32\u5177\u6709\u76f8\u540c\u6570\u91cf\u7684\u8fde\u7eed1\u548c0\uff1a&ldquo;0011&rdquo;\uff0c&ldquo;01&rdquo;\uff0c&ldquo;1100&rdquo;\uff0c&ldquo;10&rdquo;\uff0c&ldquo;0011&rdquo; \u548c &ldquo;01&rdquo;\u3002\n\n\u8bf7\u6ce8\u610f\uff0c\u4e00\u4e9b\u91cd\u590d\u51fa\u73b0\u7684\u5b50\u4e32\u8981\u8ba1\u7b97\u5b83\u4eec\u51fa\u73b0\u7684\u6b21\u6570\u3002\n\n\u53e6\u5916\uff0c&ldquo;00110011&rdquo;\u4e0d\u662f\u6709\u6548\u7684\u5b50\u4e32\uff0c\u56e0\u4e3a\u6240\u6709\u76840\uff08\u548c1\uff09\u6ca1\u6709\u7ec4\u5408\u5728\u4e00\u8d77\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2 :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> &quot;10101&quot;\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u67094\u4e2a\u5b50\u4e32\uff1a&ldquo;10&rdquo;\uff0c&ldquo;01&rdquo;\uff0c&ldquo;10&rdquo;\uff0c&ldquo;01&rdquo;\uff0c\u5b83\u4eec\u5177\u6709\u76f8\u540c\u6570\u91cf\u7684\u8fde\u7eed1\u548c0\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li><code>s.length</code>&nbsp;\u57281\u523050,000\u4e4b\u95f4\u3002</li>\n\t<li><code>s</code>&nbsp;\u53ea\u5305\u542b&ldquo;0&rdquo;\u6216&ldquo;1&rdquo;\u5b57\u7b26\u3002</li>\n</ul>\n",
        "titleZh": "\u8ba1\u6570\u4e8c\u8fdb\u5236\u5b50\u4e32",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Adobe",
            "Helix"
        ]
    },
    {
        "leetId": "697",
        "link": "degree-of-an-array",
        "title": "Degree of an Array",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "45.4%",
        "questionDescription": "<p>Given a non-empty array of non-negative integers <code>nums</code>, the <b>degree</b> of this array is defined as the maximum frequency of any one of its elements.</p>\r\n<p>Your task is to find the smallest possible length of a (contiguous) subarray of <code>nums</code>, that has the same degree as <code>nums</code>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [1, 2, 2, 3, 1]\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> \r\nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\r\nOf the subarrays that have the same degree:\r\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\r\nThe shortest length is 2. So return 2.\r\n</pre>\r\n</p>\r\n\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [1,2,2,3,1,4,2]\r\n<b>Output:</b> 6\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>nums.length</code> will be between 1 and 50,000.</li>\r\n<li><code>nums[i]</code> will be an integer between 0 and 49,999.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u4e14\u53ea\u5305\u542b\u975e\u8d1f\u6570\u7684\u6574\u6570\u6570\u7ec4&nbsp;<code>nums</code>, \u6570\u7ec4\u7684\u5ea6\u7684\u5b9a\u4e49\u662f\u6307\u6570\u7ec4\u91cc\u4efb\u4e00\u5143\u7d20\u51fa\u73b0\u9891\u6570\u7684\u6700\u5927\u503c\u3002</p>\n\n<p>\u4f60\u7684\u4efb\u52a1\u662f\u627e\u5230\u4e0e&nbsp;<code>nums</code>&nbsp;\u62e5\u6709\u76f8\u540c\u5927\u5c0f\u7684\u5ea6\u7684\u6700\u77ed\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1, 2, 2, 3, 1]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\u8f93\u5165\u6570\u7ec4\u7684\u5ea6\u662f2\uff0c\u56e0\u4e3a\u5143\u7d201\u548c2\u7684\u51fa\u73b0\u9891\u6570\u6700\u5927\uff0c\u5747\u4e3a2.\n\u8fde\u7eed\u5b50\u6570\u7ec4\u91cc\u9762\u62e5\u6709\u76f8\u540c\u5ea6\u7684\u6709\u5982\u4e0b\u6240\u793a:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\n\u6700\u77ed\u8fde\u7eed\u5b50\u6570\u7ec4[2, 2]\u7684\u957f\u5ea6\u4e3a2\uff0c\u6240\u4ee5\u8fd4\u56de2.\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [1,2,2,3,1,4,2]\n<strong>\u8f93\u51fa:</strong> 6\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>nums.length</code>&nbsp;\u57281\u523050,000\u533a\u95f4\u8303\u56f4\u5185\u3002</li>\n\t<li><code>nums[i]</code>&nbsp;\u662f\u4e00\u4e2a\u57280\u523049,999\u8303\u56f4\u5185\u7684\u6574\u6570\u3002</li>\n</ul>\n",
        "titleZh": "\u6570\u7ec4\u7684\u5ea6",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Amazon",
            "Bloomberg",
            "Adobe",
            "Walmart Labs",
            "VMware",
            "Pocket Gems",
            "Mathworks",
            "Visa",
            "IXL",
            "Drawbridge",
            "GE Digital"
        ]
    },
    {
        "leetId": "698",
        "link": "partition-to-k-equal-sum-subsets",
        "title": "Partition to K Equal Sum Subsets",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "37.1%",
        "questionDescription": "<p>Given an array of integers <code>nums</code> and a positive integer <code>k</code>, find whether it&#39;s possible to divide this array into <code>k</code> non-empty subsets whose sums are all equal.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> nums = [4, 3, 2, 3, 5, 2, 1], k = 4\r\n<b>Output:</b> True\r\n<b>Explanation:</b> It&#39;s possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= k &lt;= len(nums) &lt;= 16</code>.</li>\r\n\t<li><code>0 &lt; nums[i] &lt; 10000</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;&nbsp;<code>nums</code> \u548c\u4e00\u4e2a\u6b63\u6574\u6570 <code>k</code>\uff0c\u627e\u51fa\u662f\u5426\u6709\u53ef\u80fd\u628a\u8fd9\u4e2a\u6570\u7ec4\u5206\u6210 <code>k</code> \u4e2a\u975e\u7a7a\u5b50\u96c6\uff0c\u5176\u603b\u548c\u90fd\u76f8\u7b49\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong> nums = [4, 3, 2, 3, 5, 2, 1], k = 4\n<strong>\u8f93\u51fa\uff1a</strong> True\n<strong>\u8bf4\u660e\uff1a</strong> \u6709\u53ef\u80fd\u5c06\u5176\u5206\u6210 4 \u4e2a\u5b50\u96c6\uff085\uff09\uff0c\uff081,4\uff09\uff0c\uff082,3\uff09\uff0c\uff082,3\uff09\u7b49\u4e8e\u603b\u548c\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= len(nums) &lt;= 16</code></li>\n\t<li><code>0 &lt; nums[i] &lt; 10000</code></li>\n</ul>\n",
        "titleZh": "\u5212\u5206\u4e3ak\u4e2a\u76f8\u7b49\u7684\u5b50\u96c6",
        "tags": [
            {
                "tag": "Recursion",
                "link": "recursion",
                "tagZh": "\u9012\u5f52"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Bloomberg",
            "Uber",
            "LinkedIn",
            "VMware"
        ]
    },
    {
        "leetId": "699",
        "link": "falling-squares",
        "title": "Falling Squares",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "35.7%",
        "questionDescription": "<p>On an infinite number line (x-axis), we drop given squares in the order they are given.</p>\r\n<p>The <code>i</code>-th square dropped (<code>positions[i] = (left, side_length)</code>) is a square with the left-most point being <code>positions[i][0]</code> and sidelength <code>positions[i][1]</code>.</p>\r\n<p>The square is dropped with the bottom edge parallel to the number line, and from a higher height than all currently landed squares.  We wait for each square to stick before dropping the next.</p>\r\n<p>The squares are infinitely sticky on their bottom edge, and will remain fixed to any positive length surface they touch (either the number line or another square).  Squares dropped adjacent to each other will not stick together prematurely.</p>\r\n\r\n<br>\r\n<p>Return a list <code>ans</code> of heights.  Each height <code>ans[i]</code> represents the current highest height of any square we have dropped, after dropping squares represented by <code>positions[0], positions[1], ..., positions[i]</code>.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [[1, 2], [2, 3], [6, 1]]\r\n<b>Output:</b> [2, 5, 5]\r\n<b>Explanation:</b>\r\n<p>\r\nAfter the first drop of <code>positions[0] = [1, 2]:\r\n_aa\r\n_aa\r\n-------\r\n</code>The maximum height of any square is 2.\r\n</p><p>\r\nAfter the second drop of <code>positions[1] = [2, 3]:\r\n__aaa\r\n__aaa\r\n__aaa\r\n_aa__\r\n_aa__\r\n--------------\r\n</code>The maximum height of any square is 5.  \r\nThe larger square stays on top of the smaller square despite where its center\r\nof gravity is, because squares are infinitely sticky on their bottom edge.\r\n</p><p>\r\nAfter the third drop of <code>positions[1] = [6, 1]:\r\n__aaa\r\n__aaa\r\n__aaa\r\n_aa\r\n_aa___a\r\n--------------\r\n</code>The maximum height of any square is still 5.\r\n\r\nThus, we return an answer of <code>[2, 5, 5]</code>.\r\n</pre>\r\n</p>\r\n\r\n<br>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [[100, 100], [200, 100]]\r\n<b>Output:</b> [100, 100]\r\n<b>Explanation:</b> Adjacent squares don't get stuck prematurely - only their bottom edge can stick to surfaces.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>1 <= positions.length <= 1000</code>.</li>\r\n<li><code>1 <= positions[i][0] <= 10^8</code>.</li>\r\n<li><code>1 <= positions[i][1] <= 10^6</code>.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u5728\u65e0\u9650\u957f\u7684\u6570\u8f74\uff08\u5373 x \u8f74\uff09\u4e0a\uff0c\u6211\u4eec\u6839\u636e\u7ed9\u5b9a\u7684\u987a\u5e8f\u653e\u7f6e\u5bf9\u5e94\u7684\u6b63\u65b9\u5f62\u65b9\u5757\u3002</p>\n\n<p>\u7b2c <code>i</code> \u4e2a\u6389\u843d\u7684\u65b9\u5757\uff08<code>positions[i] = (left, side_length)</code>\uff09\u662f\u6b63\u65b9\u5f62\uff0c\u5176\u4e2d&nbsp;<code>left \u8868\u793a\u8be5\u65b9\u5757\u6700\u5de6\u8fb9\u7684\u70b9\u4f4d\u7f6e(positions[i][0])\uff0cside_length \u8868\u793a\u8be5\u65b9\u5757\u7684\u8fb9\u957f(positions[i][1])\u3002</code></p>\n\n<p>\u6bcf\u4e2a\u65b9\u5757\u7684\u5e95\u90e8\u8fb9\u7f18\u5e73\u884c\u4e8e\u6570\u8f74\uff08\u5373 x \u8f74\uff09\uff0c\u5e76\u4e14\u4ece\u4e00\u4e2a\u6bd4\u76ee\u524d\u6240\u6709\u7684\u843d\u5730\u65b9\u5757\u66f4\u9ad8\u7684\u9ad8\u5ea6\u6389\u843d\u800c\u4e0b\u3002\u5728\u4e0a\u4e00\u4e2a\u65b9\u5757\u7ed3\u675f\u6389\u843d\uff0c\u5e76\u4fdd\u6301\u9759\u6b62\u540e\uff0c\u624d\u5f00\u59cb\u6389\u843d\u65b0\u65b9\u5757\u3002</p>\n\n<p>\u65b9\u5757\u7684\u5e95\u8fb9\u5177\u6709\u975e\u5e38\u5927\u7684\u7c98\u6027\uff0c\u5e76\u5c06\u4fdd\u6301\u56fa\u5b9a\u5728\u5b83\u4eec\u6240\u63a5\u89e6\u7684\u4efb\u4f55\u957f\u5ea6\u8868\u9762\u4e0a\uff08\u65e0\u8bba\u662f\u6570\u8f74\u8fd8\u662f\u5176\u4ed6\u65b9\u5757\uff09\u3002\u90bb\u63a5\u6389\u843d\u7684\u8fb9\u4e0d\u4f1a\u8fc7\u65e9\u5730\u7c98\u5408\u5728\u4e00\u8d77\uff0c<code>\u56e0\u4e3a\u53ea\u6709\u5e95\u8fb9\u624d\u5177\u6709\u7c98\u6027\u3002</code></p>\n\n<p>&nbsp;</p>\n\n<p>\u8fd4\u56de\u4e00\u4e2a\u5806\u53e0\u9ad8\u5ea6\u5217\u8868&nbsp;<code>ans</code> \u3002\u6bcf\u4e00\u4e2a\u5806\u53e0\u9ad8\u5ea6&nbsp;<code>ans[i]</code>&nbsp;\u8868\u793a\u5728\u901a\u8fc7&nbsp;<code>positions[0], positions[1], ..., positions[i]</code>&nbsp;\u8868\u793a\u7684\u65b9\u5757\u6389\u843d\u7ed3\u675f\u540e\uff0c\u76ee\u524d\u6240\u6709\u5df2\u7ecf\u843d\u7a33\u7684\u65b9\u5757\u5806\u53e0\u7684\u6700\u9ad8\u9ad8\u5ea6\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[1, 2], [2, 3], [6, 1]]\n<strong>\u8f93\u51fa:</strong> [2, 5, 5]\n<strong>\u89e3\u91ca:\n\n</strong>\u7b2c\u4e00\u4e2a\u65b9\u5757 <code>positions[0] = [1, 2] </code>\u6389\u843d\uff1a\n<code>_aa\n_aa\n-------\n</code>\u65b9\u5757\u6700\u5927\u9ad8\u5ea6\u4e3a 2 \u3002\n\n\u7b2c\u4e8c\u4e2a\u65b9\u5757 <code>positions[1] = [2, 3] </code>\u6389\u843d\uff1a\n<code>__aaa\n__aaa\n__aaa\n_aa__\n_aa__\n--------------\n</code>\u65b9\u5757\u6700\u5927\u9ad8\u5ea6\u4e3a5\u3002\n\u5927\u7684\u65b9\u5757\u4fdd\u6301\u5728\u8f83\u5c0f\u7684\u65b9\u5757\u7684\u9876\u90e8\uff0c\u4e0d\u8bba\u5b83\u7684\u91cd\u5fc3\u5728\u54ea\u91cc\uff0c\u56e0\u4e3a\u65b9\u5757\u7684\u5e95\u90e8\u8fb9\u7f18\u6709\u975e\u5e38\u5927\u7684\u7c98\u6027\u3002\n\n\u7b2c\u4e09\u4e2a\u65b9\u5757 <code>positions[1] = [6, 1] </code>\u6389\u843d\uff1a\n<code>__aaa\n__aaa\n__aaa\n_aa\n_aa___a\n-------------- \n</code>\u65b9\u5757\u6700\u5927\u9ad8\u5ea6\u4e3a5\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u8fd4\u56de\u7ed3\u679c<code>[2, 5, 5]\u3002</code>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> [[100, 100], [200, 100]]\n<strong>\u8f93\u51fa:</strong> [100, 100]\n<strong>\u89e3\u91ca:</strong> \u76f8\u90bb\u7684\u65b9\u5757\u4e0d\u4f1a\u8fc7\u65e9\u5730\u5361\u4f4f\uff0c\u53ea\u6709\u5b83\u4eec\u7684\u5e95\u90e8\u8fb9\u7f18\u624d\u80fd\u7c98\u5728\u8868\u9762\u4e0a\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= positions.length &lt;= 1000</code>.</li>\n\t<li><code>1 &lt;= positions[i][0] &lt;= 10^8</code>.</li>\n\t<li><code>1 &lt;= positions[i][1] &lt;= 10^6</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u6389\u843d\u7684\u65b9\u5757",
        "tags": [
            {
                "tag": "Segment Tree",
                "link": "segment-tree",
                "tagZh": "\u7ebf\u6bb5\u6811"
            },
            {
                "tag": "Binary Search Tree",
                "link": "binary-search-tree",
                "tagZh": "\u4e8c\u53c9\u641c\u7d22\u6811"
            }
        ],
        "companies": [
            "Facebook",
            "Uber",
            "Square"
        ]
    },
    {
        "leetId": "700",
        "link": "search-in-a-binary-search-tree",
        "title": "Search in a Binary Search Tree",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "66.3%",
        "questionDescription": "<p>Given the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node&#39;s value equals the given value. Return the subtree rooted with that node. If such node doesn&#39;t exist, you should return NULL.</p>\r\n\r\n<p>For example,&nbsp;</p>\r\n\r\n<pre>\r\nGiven the tree:\r\n        4\r\n       / \\\r\n      2   7\r\n     / \\\r\n    1   3\r\n\r\nAnd the value to search: 2\r\n</pre>\r\n\r\n<p>You should return this subtree:</p>\r\n\r\n<pre>\r\n      2     \r\n     / \\   \r\n    1   3\r\n</pre>\r\n\r\n<p>In the example above, if we want to search the value <code>5</code>, since there is no node with value <code>5</code>, we should return <code>NULL</code>.</p>\r\n\r\n<p>Note that an empty tree is represented by <code>NULL</code>, therefore you would see the expected output (serialized tree format) as&nbsp;<code>[]</code>, not <code>null</code>.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\u7684\u6839\u8282\u70b9\u548c\u4e00\u4e2a\u503c\u3002 \u4f60\u9700\u8981\u5728BST\u4e2d\u627e\u5230\u8282\u70b9\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u8282\u70b9\u3002 \u8fd4\u56de\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u3002 \u5982\u679c\u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de NULL\u3002</p>\n\n<p>\u4f8b\u5982\uff0c</p>\n\n<pre>\n\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811:\n\n        4\n       / \\\n      2   7\n     / \\\n    1   3\n\n\u548c\u503c: 2\n</pre>\n\n<p>\u4f60\u5e94\u8be5\u8fd4\u56de\u5982\u4e0b\u5b50\u6811:</p>\n\n<pre>\n      2     \n     / \\   \n    1   3\n</pre>\n\n<p>\u5728\u4e0a\u8ff0\u793a\u4f8b\u4e2d\uff0c\u5982\u679c\u8981\u627e\u7684\u503c\u662f <code>5</code>\uff0c\u4f46\u56e0\u4e3a\u6ca1\u6709\u8282\u70b9\u503c\u4e3a <code>5</code>\uff0c\u6211\u4eec\u5e94\u8be5\u8fd4\u56de <code>NULL</code>\u3002</p>\n",
        "titleZh": "\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "IBM"
        ]
    },
    {
        "leetId": "701",
        "link": "insert-into-a-binary-search-tree",
        "title": "Insert into a Binary Search Tree",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "63.2%",
        "questionDescription": "<p>Given the root node of a binary search tree (BST) and a value to be inserted into the tree,&nbsp;insert the value into the BST. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.</p>\r\n\r\n<p>Note that there may exist&nbsp;multiple valid ways for the&nbsp;insertion, as long as the tree remains a BST after insertion. You can return any of them.</p>\r\n\r\n<p>For example,&nbsp;</p>\r\n\r\n<pre>\r\nGiven the tree:\r\n        4\r\n       / \\\r\n      2   7\r\n     / \\\r\n    1   3\r\nAnd the value to insert: 5\r\n</pre>\r\n\r\n<p>You can return this binary search tree:</p>\r\n\r\n<pre>\r\n         4\r\n       /   \\\r\n      2     7\r\n     / \\   /\r\n    1   3 5\r\n</pre>\r\n\r\n<p>This tree is also valid:</p>\r\n\r\n<pre>\r\n         5\r\n       /   \\\r\n      2     7\r\n     / \\   \r\n    1   3\r\n         \\\r\n          4\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\u7684\u6839\u8282\u70b9\u548c\u8981\u63d2\u5165\u6811\u4e2d\u7684\u503c\uff0c\u5c06\u503c\u63d2\u5165\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u8fd4\u56de\u63d2\u5165\u540e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9\u3002 \u4fdd\u8bc1\u539f\u59cb\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u4e0d\u5b58\u5728\u65b0\u503c\u3002</p>\n\n<p>\u6ce8\u610f\uff0c\u53ef\u80fd\u5b58\u5728\u591a\u79cd\u6709\u6548\u7684\u63d2\u5165\u65b9\u5f0f\uff0c\u53ea\u8981\u6811\u5728\u63d2\u5165\u540e\u4ecd\u4fdd\u6301\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\u5373\u53ef\u3002 \u4f60\u53ef\u4ee5\u8fd4\u56de\u4efb\u610f\u6709\u6548\u7684\u7ed3\u679c\u3002</p>\n\n<p>\u4f8b\u5982,&nbsp;</p>\n\n<pre>\n\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811:\n\n        4\n       / \\\n      2   7\n     / \\\n    1   3\n\n\u548c \u63d2\u5165\u7684\u503c: 5\n</pre>\n\n<p>\u4f60\u53ef\u4ee5\u8fd4\u56de\u8fd9\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811:</p>\n\n<pre>\n         4\n       /   \\\n      2     7\n     / \\   /\n    1   3 5\n</pre>\n\n<p>\u6216\u8005\u8fd9\u4e2a\u6811\u4e5f\u662f\u6709\u6548\u7684:</p>\n\n<pre>\n         5\n       /   \\\n      2     7\n     / \\   \n    1   3\n         \\\n          4\n</pre>\n",
        "titleZh": "\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u63d2\u5165\u64cd\u4f5c",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "LinkedIn"
        ]
    },
    {
        "leetId": "702",
        "link": "search-in-a-sorted-array-of-unknown-size",
        "title": "Search in a Sorted Array of Unknown Size",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n<p>Given an\u00a0integer array sorted in ascending order, write a function to search <code>target</code> in <code>nums</code>.\u00a0 If <code>target</code> exists, then return its index, otherwise return <code>-1</code>. <strong>However, the array size is unknown to you</strong>. You may only access the array using an <code>ArrayReader</code>\u00a0interface, where\u00a0<code>ArrayReader.get(k)</code> returns the element of the array at index <code>k</code>\u00a0(0-indexed).</p>\n<p>You may assume all integers in the array are less than\u00a0<code>10000</code>, and if you access the array out of bounds, <code>ArrayReader.get</code> will return <code>2147483647</code>.</p>\n<p>\u00a0</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> <code>array</code> = [-1,0,3,5,9,12], <code>target</code> = 9\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 9 exists in <code>nums</code> and its index is 4\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> <code>array</code> = [-1,0,3,5,9,12], <code>target</code> = 2\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> 2 does not exist in <code>nums</code> so return -1</pre>\n<p>\u00a0</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li>You may assume that all elements in the array are unique.</li>\n<li>The value of each element in the array\u00a0will be in the range <code>[-9999, 9999]</code>.</li>\n</ol>\n",
        "questionDescriptionZh": "\n<p>Given an\u00a0integer array sorted in ascending order, write a function to search <code>target</code> in <code>nums</code>.\u00a0 If <code>target</code> exists, then return its index, otherwise return <code>-1</code>. <strong>However, the array size is unknown to you</strong>. You may only access the array using an <code>ArrayReader</code>\u00a0interface, where\u00a0<code>ArrayReader.get(k)</code> returns the element of the array at index <code>k</code>\u00a0(0-indexed).</p>\n<p>You may assume all integers in the array are less than\u00a0<code>10000</code>, and if you access the array out of bounds, <code>ArrayReader.get</code> will return <code>2147483647</code>.</p>\n<p>\u00a0</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> <code>array</code> = [-1,0,3,5,9,12], <code>target</code> = 9\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 9 exists in <code>nums</code> and its index is 4\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> <code>array</code> = [-1,0,3,5,9,12], <code>target</code> = 2\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> 2 does not exist in <code>nums</code> so return -1</pre>\n<p>\u00a0</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li>You may assume that all elements in the array are unique.</li>\n<li>The value of each element in the array\u00a0will be in the range <code>[-9999, 9999]</code>.</li>\n</ol>\n",
        "companies": [
            "Google",
            "eBay"
        ]
    },
    {
        "leetId": "703",
        "link": "kth-largest-element-in-a-stream",
        "title": "Kth Largest Element in a Stream",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "36.5%",
        "questionDescription": "<p>Design a class to find&nbsp;the <strong>k</strong>th largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>\r\n\r\n<p>Your&nbsp;<code>KthLargest</code>&nbsp;class will have a constructor which accepts an integer <code>k</code> and an integer array <code>nums</code>, which contains initial elements from&nbsp;the stream. For each call to the method <code>KthLargest.add</code>, return the element representing the kth largest element in the stream.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nint k = 3;\r\nint[] arr = [4,5,8,2];\r\nKthLargest kthLargest = new KthLargest(3, arr);\r\nkthLargest.add(3);&nbsp; &nbsp;// returns 4\r\nkthLargest.add(5);&nbsp; &nbsp;// returns 5\r\nkthLargest.add(10);&nbsp; // returns 5\r\nkthLargest.add(9);&nbsp; &nbsp;// returns 8\r\nkthLargest.add(4);&nbsp; &nbsp;// returns 8\r\n</pre>\r\n\r\n<p><strong>Note: </strong><br />\r\nYou may assume that&nbsp;<code>nums</code>&#39; length&nbsp;&ge;&nbsp;<code>k-1</code>&nbsp;and <code>k</code> &ge;&nbsp;1.</p>\r\n",
        "questionDescriptionZh": "<p>\u8bbe\u8ba1\u4e00\u4e2a\u627e\u5230\u6570\u636e\u6d41\u4e2d\u7b2cK\u5927\u5143\u7d20\u7684\u7c7b\uff08class\uff09\u3002\u6ce8\u610f\u662f\u6392\u5e8f\u540e\u7684\u7b2cK\u5927\u5143\u7d20\uff0c\u4e0d\u662f\u7b2cK\u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002</p>\n\n<p>\u4f60\u7684&nbsp;<code>KthLargest</code>&nbsp;\u7c7b\u9700\u8981\u4e00\u4e2a\u540c\u65f6\u63a5\u6536\u6574\u6570&nbsp;<code>k</code> \u548c\u6574\u6570\u6570\u7ec4<code>nums</code>&nbsp;\u7684\u6784\u9020\u5668\uff0c\u5b83\u5305\u542b\u6570\u636e\u6d41\u4e2d\u7684\u521d\u59cb\u5143\u7d20\u3002\u6bcf\u6b21\u8c03\u7528&nbsp;<code>KthLargest.add</code>\uff0c\u8fd4\u56de\u5f53\u524d\u6570\u636e\u6d41\u4e2d\u7b2cK\u5927\u7684\u5143\u7d20\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\nint k = 3;\nint[] arr = [4,5,8,2];\nKthLargest kthLargest = new KthLargest(3, arr);\nkthLargest.add(3);&nbsp; &nbsp;// returns 4\nkthLargest.add(5);&nbsp; &nbsp;// returns 5\nkthLargest.add(10);&nbsp; // returns 5\nkthLargest.add(9);&nbsp; &nbsp;// returns 8\nkthLargest.add(4);&nbsp; &nbsp;// returns 8\n</pre>\n\n<p><strong>\u8bf4\u660e: </strong><br />\n\u4f60\u53ef\u4ee5\u5047\u8bbe&nbsp;<code>nums</code>&nbsp;\u7684\u957f\u5ea6&ge;&nbsp;<code>k-1</code>&nbsp;\u4e14<code>k</code> &ge;&nbsp;1\u3002</p>\n",
        "titleZh": "\u6570\u636e\u6d41\u4e2d\u7684\u7b2cK\u5927\u5143\u7d20",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "eBay"
        ]
    },
    {
        "leetId": "704",
        "link": "binary-search",
        "title": "Binary Search",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "48.3%",
        "questionDescription": "<p>Given a <strong>sorted</strong> (in ascending order) integer array <code>nums</code> of <code>n</code> elements and a <code>target</code> value, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index, otherwise return <code>-1</code>.</p>\r\n\r\n<p><br />\r\n<strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 9\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> 9 exists in <code>nums</code> and its index is 4\r\n\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 2\r\n<strong>Output:</strong> -1\r\n<strong>Explanation:</strong> 2 does not exist in <code>nums</code> so return -1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>You may assume that all elements in <code>nums</code> are unique.</li>\r\n\t<li><code>n</code> will be in the range <code>[1, 10000]</code>.</li>\r\n\t<li>The value of each element in <code>nums</code> will be in the range <code>[-9999, 9999]</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<code>n</code>&nbsp;\u4e2a\u5143\u7d20\u6709\u5e8f\u7684\uff08\u5347\u5e8f\uff09\u6574\u578b\u6570\u7ec4&nbsp;<code>nums</code> \u548c\u4e00\u4e2a\u76ee\u6807\u503c&nbsp;<code>target</code> &nbsp;\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u641c\u7d22&nbsp;<code>nums</code>&nbsp;\u4e2d\u7684 <code>target</code>\uff0c\u5982\u679c\u76ee\u6807\u503c\u5b58\u5728\u8fd4\u56de\u4e0b\u6807\uff0c\u5426\u5219\u8fd4\u56de <code>-1</code>\u3002</p>\n\n<p><br>\n<strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 9\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> 9 \u51fa\u73b0\u5728 <code>nums</code> \u4e2d\u5e76\u4e14\u4e0b\u6807\u4e3a 4\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 2\n<strong>\u8f93\u51fa:</strong> -1\n<strong>\u89e3\u91ca:</strong> 2 \u4e0d\u5b58\u5728 <code>nums</code> \u4e2d\u56e0\u6b64\u8fd4\u56de -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u4f60\u53ef\u4ee5\u5047\u8bbe <code>nums</code>&nbsp;\u4e2d\u7684\u6240\u6709\u5143\u7d20\u662f\u4e0d\u91cd\u590d\u7684\u3002</li>\n\t<li><code>n</code>&nbsp;\u5c06\u5728&nbsp;<code>[1, 10000]</code>\u4e4b\u95f4\u3002</li>\n\t<li><code>nums</code>&nbsp;\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5c06\u5728&nbsp;<code>[-9999, 9999]</code>\u4e4b\u95f4\u3002</li>\n</ol>\n",
        "titleZh": "\u4e8c\u5206\u67e5\u627e",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ]
    },
    {
        "leetId": "705",
        "link": "design-hashset",
        "title": "Design HashSet",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "53.8%",
        "questionDescription": "<p>Design a HashSet&nbsp;without using any built-in hash table libraries.</p>\r\n\r\n<p>To be specific, your design should include these functions:</p>\r\n\r\n<ul>\r\n\t<li><code>add(value)</code>:&nbsp;Insert a value into the HashSet.&nbsp;</li>\r\n\t<li><code>contains(value)</code> : Return whether the value exists in the HashSet or not.</li>\r\n\t<li><code>remove(value)</code>: Remove a value in&nbsp;the HashSet. If the value does not exist in the HashSet, do nothing.</li>\r\n</ul>\r\n\r\n<p><br />\r\n<strong>Example:</strong></p>\r\n\r\n<pre>\r\nMyHashSet hashSet = new MyHashSet();\r\nhashSet.add(1); &nbsp; &nbsp; &nbsp; &nbsp; \r\nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; \r\nhashSet.contains(1); &nbsp;&nbsp;&nbsp;// returns true\r\nhashSet.contains(3); &nbsp;&nbsp;&nbsp;// returns false (not found)\r\nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// returns true\r\nhashSet.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// returns false (already removed)\r\n</pre>\r\n\r\n<p><br />\r\n<strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All values will be in the range of <code>[0, 1000000]</code>.</li>\r\n\t<li>The number of operations will be in the range of&nbsp;<code>[1, 10000]</code>.</li>\r\n\t<li>Please do not use the built-in HashSet library.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u4e0d\u4f7f\u7528\u4efb\u4f55\u5185\u5efa\u7684\u54c8\u5e0c\u8868\u5e93\u8bbe\u8ba1\u4e00\u4e2a\u54c8\u5e0c\u96c6\u5408</p>\n\n<p>\u5177\u4f53\u5730\u8bf4\uff0c\u4f60\u7684\u8bbe\u8ba1\u5e94\u8be5\u5305\u542b\u4ee5\u4e0b\u7684\u529f\u80fd</p>\n\n<ul>\n\t<li><code>add(value)</code>\uff1a\u5411\u54c8\u5e0c\u96c6\u5408\u4e2d\u63d2\u5165\u4e00\u4e2a\u503c\u3002</li>\n\t<li><code>contains(value)</code> \uff1a\u8fd4\u56de\u54c8\u5e0c\u96c6\u5408\u4e2d\u662f\u5426\u5b58\u5728\u8fd9\u4e2a\u503c\u3002</li>\n\t<li><code>remove(value)</code>\uff1a\u5c06\u7ed9\u5b9a\u503c\u4ece\u54c8\u5e0c\u96c6\u5408\u4e2d\u5220\u9664\u3002\u5982\u679c\u54c8\u5e0c\u96c6\u5408\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u503c\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002</li>\n</ul>\n\n<p><br>\n<strong>\u793a\u4f8b:</strong></p>\n\n<pre>MyHashSet hashSet = new MyHashSet();\nhashSet.add(1); &nbsp; &nbsp; &nbsp; &nbsp; \nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; \nhashSet.contains(1); &nbsp;&nbsp;&nbsp;// \u8fd4\u56de true\nhashSet.contains(3); &nbsp;&nbsp;&nbsp;// \u8fd4\u56de false (\u672a\u627e\u5230)\nhashSet.add(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// \u8fd4\u56de true\nhashSet.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashSet.contains(2); &nbsp;&nbsp;&nbsp;// \u8fd4\u56de  false (\u5df2\u7ecf\u88ab\u5220\u9664)\n</pre>\n\n<p><br>\n<strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u7684\u503c\u90fd\u5728&nbsp;<code>[1, 1000000]</code>\u7684\u8303\u56f4\u5185\u3002</li>\n\t<li>\u64cd\u4f5c\u7684\u603b\u6570\u76ee\u5728<code>[1, 10000]</code>\u8303\u56f4\u5185\u3002</li>\n\t<li>\u4e0d\u8981\u4f7f\u7528\u5185\u5efa\u7684\u54c8\u5e0c\u96c6\u5408\u5e93\u3002</li>\n</ul>\n",
        "titleZh": "\u8bbe\u8ba1\u54c8\u5e0c\u96c6\u5408",
        "tags": [
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ]
    },
    {
        "leetId": "706",
        "link": "design-hashmap",
        "title": "Design HashMap",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "54.5%",
        "questionDescription": "<p>Design a HashMap&nbsp;without using any built-in hash table libraries.</p>\r\n\r\n<p>To be specific, your design should include these functions:</p>\r\n\r\n<ul>\r\n\t<li><code>put(key, value)</code> :&nbsp;Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value.</li>\r\n\t<li><code>get(key)</code>: Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.</li>\r\n\t<li><code>remove(key)</code> :&nbsp;Remove the mapping for the value key if this map contains the mapping for the key.</li>\r\n</ul>\r\n\r\n<p><br />\r\n<strong>Example:</strong></p>\r\n\r\n<pre>\r\nMyHashMap hashMap = new MyHashMap();\r\nhashMap.put(1, 1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\r\nhashMap.put(2, 2); &nbsp; &nbsp; &nbsp; &nbsp; \r\nhashMap.get(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns 1\r\nhashMap.get(3); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns -1 (not found)\r\nhashMap.put(2, 1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// update the existing value\r\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns 1 \r\nhashMap.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// remove the mapping for 2\r\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// returns -1 (not found) \r\n</pre>\r\n\r\n<p><br />\r\n<strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All keys and values will be in the range of <code>[0, 1000000]</code>.</li>\r\n\t<li>The number of operations will be in the range of&nbsp;<code>[1, 10000]</code>.</li>\r\n\t<li>Please do not use the built-in HashMap library.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u4e0d\u4f7f\u7528\u4efb\u4f55\u5185\u5efa\u7684\u54c8\u5e0c\u8868\u5e93\u8bbe\u8ba1\u4e00\u4e2a\u54c8\u5e0c\u6620\u5c04</p>\n\n<p>\u5177\u4f53\u5730\u8bf4\uff0c\u4f60\u7684\u8bbe\u8ba1\u5e94\u8be5\u5305\u542b\u4ee5\u4e0b\u7684\u529f\u80fd</p>\n\n<ul>\n\t<li><code>put(key, value)</code>\uff1a\u5411\u54c8\u5e0c\u6620\u5c04\u4e2d\u63d2\u5165(\u952e,\u503c)\u7684\u6570\u503c\u5bf9\u3002\u5982\u679c\u952e\u5bf9\u5e94\u7684\u503c\u5df2\u7ecf\u5b58\u5728\uff0c\u66f4\u65b0\u8fd9\u4e2a\u503c\u3002</li>\n\t<li><code>get(key)</code>\uff1a\u8fd4\u56de\u7ed9\u5b9a\u7684\u952e\u6240\u5bf9\u5e94\u7684\u503c\uff0c\u5982\u679c\u6620\u5c04\u4e2d\u4e0d\u5305\u542b\u8fd9\u4e2a\u952e\uff0c\u8fd4\u56de-1\u3002</li>\n\t<li><code>remove(key)</code>\uff1a\u5982\u679c\u6620\u5c04\u4e2d\u5b58\u5728\u8fd9\u4e2a\u952e\uff0c\u5220\u9664\u8fd9\u4e2a\u6570\u503c\u5bf9\u3002</li>\n</ul>\n\n<p><br />\n<strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\nMyHashMap hashMap = new MyHashMap();\nhashMap.put(1, 1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\nhashMap.put(2, 2); &nbsp; &nbsp; &nbsp; &nbsp; \nhashMap.get(1); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// \u8fd4\u56de 1\nhashMap.get(3); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// \u8fd4\u56de -1 (\u672a\u627e\u5230)\nhashMap.put(2, 1); &nbsp; &nbsp; &nbsp; &nbsp; // \u66f4\u65b0\u5df2\u6709\u7684\u503c\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// \u8fd4\u56de 1 \nhashMap.remove(2); &nbsp; &nbsp; &nbsp; &nbsp; // \u5220\u9664\u952e\u4e3a2\u7684\u6570\u636e\nhashMap.get(2); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// \u8fd4\u56de -1 (\u672a\u627e\u5230) \n</pre>\n\n<p><br />\n<strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u7684\u503c\u90fd\u5728&nbsp;<code>[1, 1000000]</code>\u7684\u8303\u56f4\u5185\u3002</li>\n\t<li>\u64cd\u4f5c\u7684\u603b\u6570\u76ee\u5728<code>[1, 10000]</code>\u8303\u56f4\u5185\u3002</li>\n\t<li>\u4e0d\u8981\u4f7f\u7528\u5185\u5efa\u7684\u54c8\u5e0c\u5e93\u3002</li>\n</ul>\n",
        "titleZh": "\u8bbe\u8ba1\u54c8\u5e0c\u6620\u5c04",
        "tags": [
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Amazon",
            "Microsoft",
            "Adobe",
            "Apple",
            "LinkedIn",
            "Twitter",
            "Goldman Sachs",
            "Salesforce"
        ]
    },
    {
        "leetId": "707",
        "link": "design-linked-list",
        "title": "Design Linked List",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "24.9%",
        "questionDescription": "<p>Design your&nbsp;implementation of the linked list. You can choose to use the singly linked list or the doubly linked list. A node in a singly&nbsp;linked list should have two attributes: <code>val</code>&nbsp;and <code>next</code>. <code>val</code> is the value of the current node, and <code>next</code>&nbsp;is&nbsp;a&nbsp;pointer/reference to the next node. If you want to use the doubly linked list,&nbsp;you will need&nbsp;one more attribute <code>prev</code> to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.</p>\r\n\r\n<p>Implement these functions in your linked list class:</p>\r\n\r\n<ul>\r\n\t<li>get(index) : Get the value of&nbsp;the <code>index</code>-th&nbsp;node in the linked list. If the index is invalid, return <code>-1</code>.</li>\r\n\t<li>addAtHead(val) : Add a node of value <code>val</code>&nbsp;before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</li>\r\n\t<li>addAtTail(val) : Append a node of value <code>val</code>&nbsp;to the last element of the linked list.</li>\r\n\t<li>addAtIndex(index, val) : Add a node of value <code>val</code>&nbsp;before the <code>index</code>-th&nbsp;node in the linked list.&nbsp;If <code>index</code>&nbsp;equals&nbsp;to the length of&nbsp;linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.</li>\r\n\t<li>deleteAtIndex(index) : Delete&nbsp;the <code>index</code>-th&nbsp;node in the linked list, if the index is valid.</li>\r\n</ul>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nMyLinkedList linkedList = new MyLinkedList();\r\nlinkedList.addAtHead(1);\r\nlinkedList.addAtTail(3);\r\nlinkedList.addAtIndex(1, 2);  // linked list becomes 1-&gt;2-&gt;3\r\nlinkedList.get(1);            // returns 2\r\nlinkedList.deleteAtIndex(1);  // now the linked list is 1-&gt;3\r\nlinkedList.get(1);&nbsp;&nbsp;&nbsp;         // returns 3\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All values will be in the range of <code>[1, 1000]</code>.</li>\r\n\t<li>The number of operations will be in the range of&nbsp;<code>[1, 1000]</code>.</li>\r\n\t<li>Please do not use the built-in LinkedList library.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u8bbe\u8ba1\u94fe\u8868\u7684\u5b9e\u73b0\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u5355\u94fe\u8868\u6216\u53cc\u94fe\u8868\u3002\u5355\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u5e94\u8be5\u5177\u6709\u4e24\u4e2a\u5c5e\u6027\uff1a<code>val</code>&nbsp;\u548c&nbsp;<code>next</code>\u3002<code>val</code>&nbsp;\u662f\u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c<code>next</code>&nbsp;\u662f\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488/\u5f15\u7528\u3002\u5982\u679c\u8981\u4f7f\u7528\u53cc\u5411\u94fe\u8868\uff0c\u5219\u8fd8\u9700\u8981\u4e00\u4e2a\u5c5e\u6027&nbsp;<code>prev</code>&nbsp;\u4ee5\u6307\u793a\u94fe\u8868\u4e2d\u7684\u4e0a\u4e00\u4e2a\u8282\u70b9\u3002\u5047\u8bbe\u94fe\u8868\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f 0-index \u7684\u3002</p>\n\n<p>\u5728\u94fe\u8868\u7c7b\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff1a</p>\n\n<ul>\n\t<li>get(index)\uff1a\u83b7\u53d6\u94fe\u8868\u4e2d\u7b2c&nbsp;<code>index</code>&nbsp;\u4e2a\u8282\u70b9\u7684\u503c\u3002\u5982\u679c\u7d22\u5f15\u65e0\u6548\uff0c\u5219\u8fd4\u56de<code>-1</code>\u3002</li>\n\t<li>addAtHead(val)\uff1a\u5728\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u6dfb\u52a0\u4e00\u4e2a\u503c\u4e3a&nbsp;<code>val</code>&nbsp;\u7684\u8282\u70b9\u3002\u63d2\u5165\u540e\uff0c\u65b0\u8282\u70b9\u5c06\u6210\u4e3a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002</li>\n\t<li>addAtTail(val)\uff1a\u5c06\u503c\u4e3a&nbsp;<code>val</code> \u7684\u8282\u70b9\u8ffd\u52a0\u5230\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002</li>\n\t<li>addAtIndex(index,val)\uff1a\u5728\u94fe\u8868\u4e2d\u7684\u7b2c&nbsp;<code>index</code>&nbsp;\u4e2a\u8282\u70b9\u4e4b\u524d\u6dfb\u52a0\u503c\u4e3a&nbsp;<code>val</code>&nbsp; \u7684\u8282\u70b9\u3002\u5982\u679c&nbsp;<code>index</code>&nbsp;\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u5219\u8be5\u8282\u70b9\u5c06\u9644\u52a0\u5230\u94fe\u8868\u7684\u672b\u5c3e\u3002\u5982\u679c <code>index</code> \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\uff0c\u5219\u4e0d\u4f1a\u63d2\u5165\u8282\u70b9\u3002</li>\n\t<li>deleteAtIndex(index)\uff1a\u5982\u679c\u7d22\u5f15&nbsp;<code>index</code> \u6709\u6548\uff0c\u5219\u5220\u9664\u94fe\u8868\u4e2d\u7684\u7b2c&nbsp;<code>index</code> \u4e2a\u8282\u70b9\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>MyLinkedList linkedList = new MyLinkedList();\nlinkedList.addAtHead(1);\nlinkedList.addAtTail(3);\nlinkedList.addAtIndex(1,2);   //\u94fe\u8868\u53d8\u4e3a1-&gt; 2-&gt; 3\nlinkedList.get(1);            //\u8fd4\u56de2\nlinkedList.deleteAtIndex(1);  //\u73b0\u5728\u94fe\u8868\u662f1-&gt; 3\nlinkedList.get(1);            //\u8fd4\u56de3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u503c\u90fd\u5728&nbsp;<code>[1, 1000]</code>&nbsp;\u4e4b\u5185\u3002</li>\n\t<li>\u64cd\u4f5c\u6b21\u6570\u5c06\u5728&nbsp;&nbsp;<code>[1, 1000]</code>&nbsp;\u4e4b\u5185\u3002</li>\n\t<li>\u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684 LinkedList \u5e93\u3002</li>\n</ul>\n",
        "titleZh": "\u8bbe\u8ba1\u94fe\u8868",
        "tags": [
            {
                "tag": "Design",
                "link": "design",
                "tagZh": "\u8bbe\u8ba1"
            },
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "708",
        "link": "insert-into-a-cyclic-sorted-list",
        "title": "Insert into a Cyclic Sorted List",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "16",
        "questionDescription": "\n<p>Given a node from a cyclic linked list which is sorted in ascending order, write a function to insert a value into the list such that it remains a cyclic sorted list. The given node can be a reference to <em>any</em> single node in the list, and may not be necessarily the smallest value in the cyclic list.</p>\n<p>If there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the cyclic list should remain sorted.</p>\n<p>If the list is empty (i.e., given node is <code>null</code>), you should create a new single cyclic list and return the reference to that single node. Otherwise, you should return the original given node.</p>\n<p>The following example may help you understand the problem better:</p>\n<p>\u00a0</p>\n<p><img src=\"/static/images/problemset/InsertCyclicBefore.png\" style=\"height:25%; width:25%\"/><br/>\n<br/>\n<small>In the figure above, there is a cyclic sorted list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list.</small></p>\n<p>\u00a0</p>\n<p>\u00a0</p>\n<p>\u00a0</p>\n<p><img src=\"/static/images/problemset/InsertCyclicAfter.png\" style=\"height:40%; width:40%\"/><br/>\n<br/>\n<small>The new node should insert between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3.</small></p>\n<p>\u00a0</p>\n<p>\u00a0</p>\n",
        "questionDescriptionZh": "\n<p>Given a node from a cyclic linked list which is sorted in ascending order, write a function to insert a value into the list such that it remains a cyclic sorted list. The given node can be a reference to <em>any</em> single node in the list, and may not be necessarily the smallest value in the cyclic list.</p>\n<p>If there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the cyclic list should remain sorted.</p>\n<p>If the list is empty (i.e., given node is <code>null</code>), you should create a new single cyclic list and return the reference to that single node. Otherwise, you should return the original given node.</p>\n<p>The following example may help you understand the problem better:</p>\n<p>\u00a0</p>\n<p><img src=\"/static/images/problemset/InsertCyclicBefore.png\" style=\"height:25%; width:25%\"/><br/>\n<br/>\n<small>In the figure above, there is a cyclic sorted list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list.</small></p>\n<p>\u00a0</p>\n<p>\u00a0</p>\n<p>\u00a0</p>\n<p><img src=\"/static/images/problemset/InsertCyclicAfter.png\" style=\"height:40%; width:40%\"/><br/>\n<br/>\n<small>The new node should insert between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3.</small></p>\n<p>\u00a0</p>\n<p>\u00a0</p>\n",
        "companies": [
            "Google",
            "Facebook",
            "Microsoft"
        ]
    },
    {
        "leetId": "709",
        "link": "to-lower-case",
        "title": "To Lower Case",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "73.2%",
        "questionDescription": "<p>Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;Hello&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;hello&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;here&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;here&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;LOVELY&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">&quot;lovely&quot;</span>\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5b9e\u73b0\u51fd\u6570 ToLowerCase()\uff0c\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570 str\uff0c\u5e76\u5c06\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u5927\u5199\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e4b\u540e\u8fd4\u56de\u65b0\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>&quot;Hello&quot;\n<strong>\u8f93\u51fa: </strong>&quot;hello&quot;</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>&quot;here&quot;\n<strong>\u8f93\u51fa: </strong>&quot;here&quot;</pre>\n\n<p><strong>\u793a\u4f8b</strong><strong>&nbsp;3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>&quot;LOVELY&quot;\n<strong>\u8f93\u51fa: </strong>&quot;lovely&quot;\n</pre>\n",
        "titleZh": "\u8f6c\u6362\u6210\u5c0f\u5199\u5b57\u6bcd",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Adobe",
            "Apple"
        ]
    },
    {
        "leetId": "710",
        "link": "random-pick-with-blacklist",
        "title": "Random Pick with Blacklist",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "26.9%",
        "questionDescription": "<p>Given a blacklist&nbsp;<code>B</code> containing unique integers&nbsp;from <code>[0, N)</code>, write a function to return a uniform random integer from <code>[0, N)</code> which is <strong>NOT</strong>&nbsp;in <code>B</code>.</p>\r\n\r\n<p>Optimize it such that it minimizes the call to system&rsquo;s <code>Math.random()</code>.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 1000000000</code></li>\r\n\t<li><code>0 &lt;= B.length &lt; min(100000, N)</code></li>\r\n\t<li><code>[0, N)</code>&nbsp;does NOT include N. See <a href=\"https://en.wikipedia.org/wiki/Interval_(mathematics)\" target=\"_blank\">interval notation</a>.</li>\r\n</ol>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-1-1\">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\r\n</span><span id=\"example-input-1-2\">[[1,[]],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,0,0,0]</span>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-2-1\">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\r\n</span><span id=\"example-input-2-2\">[[2,[]],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,1,1,1]</span>\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-3-1\">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\r\n</span><span id=\"example-input-3-2\">[[3,[1]],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[null,0,0,2]</span>\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: \r\n</strong><span id=\"example-input-4-1\">[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\r\n</span><span id=\"example-input-4-2\">[[4,[2]],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">[null,1,3,1]</span>\r\n</pre>\r\n\r\n<p><strong>Explanation of Input Syntax:</strong></p>\r\n\r\n<p>The input is two lists:&nbsp;the subroutines called&nbsp;and their&nbsp;arguments.&nbsp;<code>Solution</code>&#39;s&nbsp;constructor has two arguments,&nbsp;<code>N</code> and the blacklist <code>B</code>. <code>pick</code> has no arguments.&nbsp;Arguments&nbsp;are&nbsp;always wrapped with a list, even if there aren&#39;t any.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b [0\uff0cn ) \u4e2d\u72ec\u7279\u7684\u6574\u6570\u7684\u9ed1\u540d\u5355 B\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u4ece [ 0\uff0cn ) \u4e2d\u8fd4\u56de\u4e00\u4e2a<strong>\u4e0d\u5728</strong> B \u4e2d\u7684\u968f\u673a\u6574\u6570\u3002</p>\n\n<p>\u5bf9\u5b83\u8fdb\u884c\u4f18\u5316\u4f7f\u5176\u5c3d\u91cf\u5c11\u8c03\u7528\u7cfb\u7edf\u65b9\u6cd5 <code>Math.random()</code> \u3002</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 1000000000</code></li>\n\t<li><code>0 &lt;= B.length &lt; min(100000, N)</code></li>\n\t<li><code>[0, N)</code>&nbsp;\u4e0d\u5305\u542b&nbsp;N\uff0c\u8be6\u7ec6\u53c2\u89c1&nbsp;<a href=\"https://en.wikipedia.org/wiki/Interval_(mathematics)\" target=\"_blank\">interval notation</a>&nbsp;\u3002</li>\n</ol>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[1,[]],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,0,0,0]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[2,[]],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,1,1,1]\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[3,[1]],[],[],[]]\n<strong>Output: </strong>[null,0,0,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: \n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\n[[4,[2]],[],[],[]]\n<strong>\u8f93\u51fa: </strong>[null,1,3,1]\n</pre>\n\n<p><strong>\u8f93\u5165\u8bed\u6cd5\u8bf4\u660e\uff1a</strong></p>\n\n<p>\u8f93\u5165\u662f\u4e24\u4e2a\u5217\u8868\uff1a\u8c03\u7528\u6210\u5458\u51fd\u6570\u540d\u548c\u8c03\u7528\u7684\u53c2\u6570\u3002<code>Solution</code>\u7684\u6784\u9020\u51fd\u6570\u6709\u4e24\u4e2a\u53c2\u6570\uff0c<code>N</code>&nbsp;\u548c\u9ed1\u540d\u5355&nbsp;<code>B</code>\u3002<code>pick</code>&nbsp;\u6ca1\u6709\u53c2\u6570\uff0c\u8f93\u5165\u53c2\u6570\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5373\u4f7f\u53c2\u6570\u4e3a\u7a7a\uff0c\u4e5f\u4f1a\u8f93\u5165\u4e00\u4e2a [] \u7a7a\u5217\u8868\u3002</p>\n",
        "titleZh": "\u9ed1\u540d\u5355\u4e2d\u7684\u968f\u673a\u6570",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            },
            {
                "tag": "Random",
                "link": "random",
                "tagZh": null
            }
        ],
        "companies": [
            "Google",
            "Uber"
        ]
    },
    {
        "leetId": "711",
        "link": "number-of-distinct-islands-ii",
        "title": "Number of Distinct Islands II",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "0",
        "questionDescription": "\n<p>Given a non-empty 2D array <code>grid</code> of 0's and 1's, an <b>island</b> is a group of <code>1</code>'s (representing land) connected 4-directionally (horizontal or vertical.)  You may assume all four edges of the grid are surrounded by water.</p>\n<p>Count the number of <b>distinct</b> islands.  An island is considered to be the same as another if they have the same shape, or have the same shape after <b>rotation</b> (90, 180, or 270 degrees only) or <b>reflection</b> (left/right direction or up/down direction).</p>\n<p><b>Example 1:</b><br/>\n</p><pre>11000\n10000\n00001\n00011\n</pre>\nGiven the above grid map, return <code>1</code>.\n<br/><br/>\nNotice that:\n<pre>11\n1\n</pre>\nand\n<pre> 1\n11\n</pre>\nare considered <b>same</b> island shapes. Because if we make a 180 degrees clockwise rotation on the first island, then two islands will have the same shapes.\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre>11100\n10001\n01001\n01110</pre>\nGiven the above grid map, return <code>2</code>.<br/>\n<br/>\nHere are the two distinct islands:\n<pre>111\n1\n</pre>\nand\n<pre>1\n1\n</pre>\n<br/>\nNotice that:\n<pre>111\n1\n</pre>\nand\n<pre>1\n111\n</pre>\nare considered <b>same</b> island shapes. Because if we flip the first array in the up/down direction, then they have the same shapes.\n<p></p>\n<p><b>Note:</b>\nThe length of each dimension in the given <code>grid</code> does not exceed 50.\n</p>\n",
        "questionDescriptionZh": "\n<p>Given a non-empty 2D array <code>grid</code> of 0's and 1's, an <b>island</b> is a group of <code>1</code>'s (representing land) connected 4-directionally (horizontal or vertical.)  You may assume all four edges of the grid are surrounded by water.</p>\n<p>Count the number of <b>distinct</b> islands.  An island is considered to be the same as another if they have the same shape, or have the same shape after <b>rotation</b> (90, 180, or 270 degrees only) or <b>reflection</b> (left/right direction or up/down direction).</p>\n<p><b>Example 1:</b><br/>\n</p><pre>11000\n10000\n00001\n00011\n</pre>\nGiven the above grid map, return <code>1</code>.\n<br/><br/>\nNotice that:\n<pre>11\n1\n</pre>\nand\n<pre> 1\n11\n</pre>\nare considered <b>same</b> island shapes. Because if we make a 180 degrees clockwise rotation on the first island, then two islands will have the same shapes.\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre>11100\n10001\n01001\n01110</pre>\nGiven the above grid map, return <code>2</code>.<br/>\n<br/>\nHere are the two distinct islands:\n<pre>111\n1\n</pre>\nand\n<pre>1\n1\n</pre>\n<br/>\nNotice that:\n<pre>111\n1\n</pre>\nand\n<pre>1\n111\n</pre>\nare considered <b>same</b> island shapes. Because if we flip the first array in the up/down direction, then they have the same shapes.\n<p></p>\n<p><b>Note:</b>\nThe length of each dimension in the given <code>grid</code> does not exceed 50.\n</p>\n",
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "712",
        "link": "minimum-ascii-delete-sum-for-two-strings",
        "title": "Minimum ASCII Delete Sum for Two Strings",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "53.7%",
        "questionDescription": "<p>Given two strings <code>s1, s2</code>, find the lowest ASCII sum of deleted characters to make two strings equal.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> s1 = \"sea\", s2 = \"eat\"\r\n<b>Output:</b> 231\r\n<b>Explanation:</b> Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\r\nDeleting \"t\" from \"eat\" adds 116 to the sum.\r\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> s1 = \"delete\", s2 = \"leet\"\r\n<b>Output:</b> 403\r\n<b>Explanation:</b> Deleting \"dee\" from \"delete\" to turn the string into \"let\",\r\nadds 100[d]+101[e]+101[e] to the sum.  Deleting \"e\" from \"leet\" adds 101[e] to the sum.\r\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\r\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>0 < s1.length, s2.length <= 1000</code>.</li>\r\n<li>All elements of each string will have an ASCII value in <code>[97, 122]</code>.</li> \r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32<code>s1, s2</code>\uff0c\u627e\u5230\u4f7f\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\u6240\u9700\u5220\u9664\u5b57\u7b26\u7684ASCII\u503c\u7684\u6700\u5c0f\u548c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> s1 = &quot;sea&quot;, s2 = &quot;eat&quot;\n<strong>\u8f93\u51fa:</strong> 231\n<strong>\u89e3\u91ca:</strong> \u5728 &quot;sea&quot; \u4e2d\u5220\u9664 &quot;s&quot; \u5e76\u5c06 &quot;s&quot; \u7684\u503c(115)\u52a0\u5165\u603b\u548c\u3002\n\u5728 &quot;eat&quot; \u4e2d\u5220\u9664 &quot;t&quot; \u5e76\u5c06 116 \u52a0\u5165\u603b\u548c\u3002\n\u7ed3\u675f\u65f6\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\uff0c115 + 116 = 231 \u5c31\u662f\u7b26\u5408\u6761\u4ef6\u7684\u6700\u5c0f\u548c\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> s1 = &quot;delete&quot;, s2 = &quot;leet&quot;\n<strong>\u8f93\u51fa:</strong> 403\n<strong>\u89e3\u91ca:</strong> \u5728 &quot;delete&quot; \u4e2d\u5220\u9664 &quot;dee&quot; \u5b57\u7b26\u4e32\u53d8\u6210 &quot;let&quot;\uff0c\n\u5c06 100[d]+101[e]+101[e] \u52a0\u5165\u603b\u548c\u3002\u5728 &quot;leet&quot; \u4e2d\u5220\u9664 &quot;e&quot; \u5c06 101[e] \u52a0\u5165\u603b\u548c\u3002\n\u7ed3\u675f\u65f6\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\u90fd\u7b49\u4e8e &quot;let&quot;\uff0c\u7ed3\u679c\u5373\u4e3a 100+101+101+101 = 403 \u3002\n\u5982\u679c\u6539\u4e3a\u5c06\u4e24\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a &quot;lee&quot; \u6216 &quot;eet&quot;\uff0c\u6211\u4eec\u4f1a\u5f97\u5230 433 \u6216 417 \u7684\u7ed3\u679c\uff0c\u6bd4\u7b54\u6848\u66f4\u5927\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>0 &lt; s1.length, s2.length &lt;= 1000</code>\u3002</li>\n\t<li>\u6240\u6709\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26ASCII\u503c\u5728<code>[97, 122]</code>\u4e4b\u95f4\u3002</li>\n</ul>\n",
        "titleZh": "\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u5c0fASCII\u5220\u9664\u548c",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "TripleByte"
        ]
    },
    {
        "leetId": "713",
        "link": "subarray-product-less-than-k",
        "title": "Subarray Product Less Than K",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "29.5%",
        "questionDescription": "<p>Your are given an array of positive integers <code>nums</code>.</p>\r\n<p>Count and print the number of (contiguous) subarrays where the product of all the elements in the subarray is less than <code>k</code>.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> nums = [10, 5, 2, 6], k = 100\r\n<b>Output:</b> 8\r\n<b>Explanation:</b> The 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6].\r\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>0 < nums.length <= 50000</code>.</li>\r\n<li><code>0 < nums[i] < 1000</code>.</li>\r\n<li><code>0 <= k < 10^6</code>.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4&nbsp;<code>nums</code>\u3002</p>\n\n<p>\u627e\u51fa\u8be5\u6570\u7ec4\u5185\u4e58\u79ef\u5c0f\u4e8e&nbsp;<code>k</code>&nbsp;\u7684\u8fde\u7eed\u7684\u5b50\u6570\u7ec4\u7684\u4e2a\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> nums = [10,5,2,6], k = 100\n<strong>\u8f93\u51fa:</strong> 8\n<strong>\u89e3\u91ca:</strong> 8\u4e2a\u4e58\u79ef\u5c0f\u4e8e100\u7684\u5b50\u6570\u7ec4\u5206\u522b\u4e3a: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]\u3002\n\u9700\u8981\u6ce8\u610f\u7684\u662f [10,5,2] \u5e76\u4e0d\u662f\u4e58\u79ef\u5c0f\u4e8e100\u7684\u5b50\u6570\u7ec4\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>0 &lt; nums.length &lt;= 50000</code></li>\n\t<li><code>0 &lt; nums[i] &lt; 1000</code></li>\n\t<li><code>0 &lt;= k &lt; 10^6</code></li>\n</ul>\n",
        "titleZh": "\u4e58\u79ef\u5c0f\u4e8eK\u7684\u5b50\u6570\u7ec4",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Facebook",
            "Bloomberg",
            "Expedia",
            "Coursera",
            "Akuna Capital",
            "Affirm",
            "Yatra"
        ]
    },
    {
        "leetId": "714",
        "link": "best-time-to-buy-and-sell-stock-with-transaction-fee",
        "title": "Best Time to Buy and Sell Stock with Transaction Fee",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "48.2%",
        "questionDescription": "<p>Your are given an array of integers <code>prices</code>, for which the <code>i</code>-th element is the price of a given stock on day <code>i</code>; and a non-negative integer <code>fee</code> representing a transaction fee.</p>\r\n<p>You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.  You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)</p>\r\n<p>Return the maximum profit you can make.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> prices = [1, 3, 2, 8, 4, 9], fee = 2\r\n<b>Output:</b> 8\r\n<b>Explanation:</b> The maximum profit can be achieved by:\r\n<li>Buying at prices[0] = 1</li><li>Selling at prices[3] = 8</li><li>Buying at prices[4] = 4</li><li>Selling at prices[5] = 9</li>The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>0 < prices.length <= 50000</code>.</li>\r\n<li><code>0 < prices[i] < 50000</code>.</li>\r\n<li><code>0 <= fee < 50000</code>.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>prices</code>\uff0c\u5176\u4e2d\u7b2c&nbsp;<code>i</code>&nbsp;\u4e2a\u5143\u7d20\u4ee3\u8868\u4e86\u7b2c&nbsp;<code>i</code>&nbsp;\u5929\u7684\u80a1\u7968\u4ef7\u683c \uff1b\u975e\u8d1f\u6574\u6570&nbsp;<code>fee</code> \u4ee3\u8868\u4e86\u4ea4\u6613\u80a1\u7968\u7684\u624b\u7eed\u8d39\u7528\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u65e0\u9650\u6b21\u5730\u5b8c\u6210\u4ea4\u6613\uff0c\u4f46\u662f\u4f60\u6bcf\u6b21\u4ea4\u6613\u90fd\u9700\u8981\u4ed8\u624b\u7eed\u8d39\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u8d2d\u4e70\u4e86\u4e00\u4e2a\u80a1\u7968\uff0c\u5728\u5356\u51fa\u5b83\u4e4b\u524d\u4f60\u5c31\u4e0d\u80fd\u518d\u7ee7\u7eed\u8d2d\u4e70\u80a1\u7968\u4e86\u3002</p>\n\n<p>\u8fd4\u56de\u83b7\u5f97\u5229\u6da6\u7684\u6700\u5927\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> prices = [1, 3, 2, 8, 4, 9], fee = 2\n<strong>\u8f93\u51fa:</strong> 8\n<strong>\u89e3\u91ca:</strong> \u80fd\u591f\u8fbe\u5230\u7684\u6700\u5927\u5229\u6da6:  \n\u5728\u6b64\u5904\u4e70\u5165&nbsp;prices[0] = 1\n\u5728\u6b64\u5904\u5356\u51fa prices[3] = 8\n\u5728\u6b64\u5904\u4e70\u5165 prices[4] = 4\n\u5728\u6b64\u5904\u5356\u51fa prices[5] = 9\n\u603b\u5229\u6da6:&nbsp;((8 - 1) - 2) + ((9 - 4) - 2) = 8.</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>0 &lt; prices.length &lt;= 50000</code>.</li>\n\t<li><code>0 &lt; prices[i] &lt; 50000</code>.</li>\n\t<li><code>0 &lt;= fee &lt; 50000</code>.</li>\n</ul>\n",
        "titleZh": "\u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Bloomberg"
        ]
    },
    {
        "leetId": "715",
        "link": "range-module",
        "title": "Range Module",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "29.0%",
        "questionDescription": "<p>A Range Module is a module that tracks ranges of numbers. Your task is to design and implement the following interfaces in an efficient manner.</p>\r\n\r\n<p><li><code>addRange(int left, int right)</code> Adds the half-open interval <code>[left, right)</code>, tracking every real number in that interval.  Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval <code>[left, right)</code> that are not already tracked.</li></p>\r\n\r\n<p><li><code>queryRange(int left, int right)</code> Returns true if and only if every real number in the interval <code>[left, right)</code>\r\n is currently being tracked.</li></p>\r\n\r\n<p><li><code>removeRange(int left, int right)</code> Stops tracking every real number currently being tracked in the interval <code>[left, right)</code>.</li></p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>addRange(10, 20)</b>: null\r\n<b>removeRange(14, 16)</b>: null\r\n<b>queryRange(10, 14)</b>: true (Every number in [10, 14) is being tracked)\r\n<b>queryRange(13, 15)</b>: false (Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\r\n<b>queryRange(16, 17)</b>: true (The number 16 in [16, 17) is still being tracked, despite the remove operation)\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>A half open interval <code>[left, right)</code> denotes all real numbers <code>left <= x < right</code>.</li>\r\n\r\n<li><code>0 < left < right < 10^9</code> in all calls to <code>addRange, queryRange, removeRange</code>.</li>\r\n<li>The total number of calls to <code>addRange</code> in a single test case is at most <code>1000</code>.</li>\r\n<li>The total number of calls to <code>queryRange</code> in a single test case is at most <code>5000</code>.</li>\r\n<li>The total number of calls to <code>removeRange</code> in a single test case is at most <code>1000</code>.</li>\r\n</p>",
        "questionDescriptionZh": "<p>Range \u6a21\u5757\u662f\u8ddf\u8e2a\u6570\u5b57\u8303\u56f4\u7684\u6a21\u5757\u3002\u4f60\u7684\u4efb\u52a1\u662f\u4ee5\u4e00\u79cd\u6709\u6548\u7684\u65b9\u5f0f\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4ee5\u4e0b\u63a5\u53e3\u3002</p>\n\n<ul>\n\t<li><code>addRange(int left, int right)</code> \u6dfb\u52a0\u534a\u5f00\u533a\u95f4&nbsp;<code>[left, right)</code>\uff0c\u8ddf\u8e2a\u8be5\u533a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u5b9e\u6570\u3002\u6dfb\u52a0\u4e0e\u5f53\u524d\u8ddf\u8e2a\u7684\u6570\u5b57\u90e8\u5206\u91cd\u53e0\u7684\u533a\u95f4\u65f6\uff0c\u5e94\u5f53\u6dfb\u52a0\u5728\u533a\u95f4&nbsp;<code>[left, right)</code>&nbsp;\u4e2d\u5c1a\u672a\u8ddf\u8e2a\u7684\u4efb\u4f55\u6570\u5b57\u5230\u8be5\u533a\u95f4\u4e2d\u3002</li>\n\t<li><code>queryRange(int left, int right)</code>&nbsp;\u53ea\u6709\u5728\u5f53\u524d\u6b63\u5728\u8ddf\u8e2a\u533a\u95f4&nbsp;<code>[left, right)</code>&nbsp;\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b9e\u6570\u65f6\uff0c\u624d\u8fd4\u56de true\u3002</li>\n\t<li><code>removeRange(int left, int right)</code>&nbsp;\u505c\u6b62\u8ddf\u8e2a\u533a\u95f4&nbsp;<code>[left, right)</code>&nbsp;\u4e2d\u5f53\u524d\u6b63\u5728\u8ddf\u8e2a\u7684\u6bcf\u4e2a\u5b9e\u6570\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>addRange(10, 20)</strong>: null\n<strong>removeRange(14, 16)</strong>: null\n<strong>queryRange(10, 14)</strong>: true \uff08\u533a\u95f4 [10, 14) \u4e2d\u7684\u6bcf\u4e2a\u6570\u90fd\u6b63\u5728\u88ab\u8ddf\u8e2a\uff09\n<strong>queryRange(13, 15)</strong>: false \uff08\u672a\u8ddf\u8e2a\u533a\u95f4 [13, 15) \u4e2d\u50cf 14, 14.03, 14.17 \u8fd9\u6837\u7684\u6570\u5b57\uff09\n<strong>queryRange(16, 17)</strong>: true \uff08\u5c3d\u7ba1\u6267\u884c\u4e86\u5220\u9664\u64cd\u4f5c\uff0c\u533a\u95f4 [16, 17) \u4e2d\u7684\u6570\u5b57 16 \u4ecd\u7136\u4f1a\u88ab\u8ddf\u8e2a\uff09\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u534a\u5f00\u533a\u95f4&nbsp;<code>[left, right)</code>&nbsp;\u8868\u793a\u6240\u6709\u6ee1\u8db3&nbsp;<code>left &lt;= x &lt; right</code>&nbsp;\u7684\u5b9e\u6570\u3002</li>\n\t<li>\u5bf9&nbsp;<code>addRange, queryRange, removeRange</code>&nbsp;\u7684\u6240\u6709\u8c03\u7528\u4e2d&nbsp;<code>0 &lt; left &lt; right &lt; 10^9</code>\u3002</li>\n\t<li>\u5728\u5355\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\uff0c\u5bf9&nbsp;<code>addRange</code>&nbsp;\u7684\u8c03\u7528\u603b\u6570\u4e0d\u8d85\u8fc7&nbsp;<code>1000</code>&nbsp;\u6b21\u3002</li>\n\t<li>\u5728\u5355\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\uff0c\u5bf9&nbsp; <code>queryRange</code> \u7684\u8c03\u7528\u603b\u6570\u4e0d\u8d85\u8fc7 <code>5000</code> \u6b21\u3002</li>\n\t<li>\u5728\u5355\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\uff0c\u5bf9 <code>removeRange</code> \u7684\u8c03\u7528\u603b\u6570\u4e0d\u8d85\u8fc7&nbsp;<code>1000</code>&nbsp;\u6b21\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n",
        "titleZh": "Range \u6a21\u5757",
        "tags": [
            {
                "tag": "Segment Tree",
                "link": "segment-tree",
                "tagZh": "\u7ebf\u6bb5\u6811"
            },
            {
                "tag": "Binary Search Tree",
                "link": "binary-search-tree",
                "tagZh": "\u4e8c\u53c9\u641c\u7d22\u6811"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "LinkedIn",
            "Coupang",
            "Machine Zone"
        ]
    },
    {
        "leetId": "716",
        "link": "max-stack",
        "title": "Max Stack",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "59",
        "questionDescription": "\n<p>Design a max stack that supports push, pop, top, peekMax and popMax.</p>\n<p>\n</p><ol>\n<li>push(x) -- Push element x onto stack.</li>\n<li>pop() -- Remove the element on top of the stack and return it.</li>\n<li>top() -- Get the element on the top.</li>\n<li>peekMax() -- Retrieve the maximum element in the stack.</li>\n<li>popMax() -- Retrieve the maximum element in the stack, and remove it. If you find more than one maximum elements, only remove the top-most one.</li>\n</ol>\n<p></p>\n<p><b>Example 1:</b><br/>\n</p><pre>MaxStack stack = new MaxStack();\nstack.push(5); \nstack.push(1);\nstack.push(5);\nstack.top(); -&gt; 5\nstack.popMax(); -&gt; 5\nstack.top(); -&gt; 1\nstack.peekMax(); -&gt; 5\nstack.pop(); -&gt; 1\nstack.top(); -&gt; 5\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>-1e7 &lt;= x &lt;= 1e7</li>\n<li>Number of operations won't exceed 10000.</li>\n<li>The last four operations won't be called when stack is empty.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Design a max stack that supports push, pop, top, peekMax and popMax.</p>\n<p>\n</p><ol>\n<li>push(x) -- Push element x onto stack.</li>\n<li>pop() -- Remove the element on top of the stack and return it.</li>\n<li>top() -- Get the element on the top.</li>\n<li>peekMax() -- Retrieve the maximum element in the stack.</li>\n<li>popMax() -- Retrieve the maximum element in the stack, and remove it. If you find more than one maximum elements, only remove the top-most one.</li>\n</ol>\n<p></p>\n<p><b>Example 1:</b><br/>\n</p><pre>MaxStack stack = new MaxStack();\nstack.push(5); \nstack.push(1);\nstack.push(5);\nstack.top(); -&gt; 5\nstack.popMax(); -&gt; 5\nstack.top(); -&gt; 1\nstack.peekMax(); -&gt; 5\nstack.pop(); -&gt; 1\nstack.top(); -&gt; 5\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>-1e7 &lt;= x &lt;= 1e7</li>\n<li>Number of operations won't exceed 10000.</li>\n<li>The last four operations won't be called when stack is empty.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "LinkedIn",
            "Lyft"
        ]
    },
    {
        "leetId": "717",
        "link": "1-bit-and-2-bit-characters",
        "title": "1-bit and 2-bit Characters",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "42.4%",
        "questionDescription": "<p>We have two special characters. The first character can be represented by one bit <code>0</code>. The second character can be represented by two bits (<code>10</code> or <code>11</code>).  </p>\r\n\r\n<p>Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nbits = [1, 0, 0]\r\n<b>Output:</b> True\r\n<b>Explanation:</b> \r\nThe only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nbits = [1, 1, 1, 0]\r\n<b>Output:</b> False\r\n<b>Explanation:</b> \r\nThe only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li><code>1 <= len(bits) <= 1000</code>.</li>\r\n<li><code>bits[i]</code> is always <code>0</code> or <code>1</code>.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u6709\u4e24\u79cd\u7279\u6b8a\u5b57\u7b26\u3002\u7b2c\u4e00\u79cd\u5b57\u7b26\u53ef\u4ee5\u7528\u4e00\u6bd4\u7279<code>0</code>\u6765\u8868\u793a\u3002\u7b2c\u4e8c\u79cd\u5b57\u7b26\u53ef\u4ee5\u7528\u4e24\u6bd4\u7279(<code>10</code>&nbsp;\u6216&nbsp;<code>11</code>)\u6765\u8868\u793a\u3002</p>\n\n<p>\u73b0\u7ed9\u4e00\u4e2a\u7531\u82e5\u5e72\u6bd4\u7279\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002\u95ee\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5fc5\u5b9a\u4e3a\u4e00\u4e2a\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u603b\u662f\u75310\u7ed3\u675f\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nbits = [1, 0, 0]\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong> \n\u552f\u4e00\u7684\u7f16\u7801\u65b9\u5f0f\u662f\u4e00\u4e2a\u4e24\u6bd4\u7279\u5b57\u7b26\u548c\u4e00\u4e2a\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nbits = [1, 1, 1, 0]\n<strong>\u8f93\u51fa:</strong> False\n<strong>\u89e3\u91ca:</strong> \n\u552f\u4e00\u7684\u7f16\u7801\u65b9\u5f0f\u662f\u4e24\u6bd4\u7279\u5b57\u7b26\u548c\u4e24\u6bd4\u7279\u5b57\u7b26\u3002\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u662f\u4e00\u6bd4\u7279\u5b57\u7b26\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= len(bits) &lt;= 1000</code>.</li>\n\t<li><code>bits[i]</code> \u603b\u662f<code>0</code> \u6216&nbsp;<code>1</code>.</li>\n</ul>\n",
        "titleZh": "1\u6bd4\u7279\u4e0e2\u6bd4\u7279\u5b57\u7b26",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Quora",
            "IXL"
        ]
    },
    {
        "leetId": "718",
        "link": "maximum-length-of-repeated-subarray",
        "title": "Maximum Length of Repeated Subarray",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "43.5%",
        "questionDescription": "<p>Given two integer arrays <code>A</code> and <code>B</code>, return the maximum length of an subarray that appears in both arrays.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\nA: [1,2,3,2,1]\r\nB: [3,2,1,4,7]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> \r\nThe repeated subarray with maximum length is [3, 2, 1].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>1 &lt;= len(A), len(B) &lt;= 1000</li>\r\n\t<li>0 &lt;= A[i], B[i] &lt; 100</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u4e24\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\uff0c\u8fd4\u56de\u4e24\u4e2a\u6570\u7ec4\u4e2d\u516c\u5171\u7684\u3001\u957f\u5ea6\u6700\u957f\u7684\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\nA: [1,2,3,2,1]\nB: [3,2,1,4,7]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \n\u957f\u5ea6\u6700\u957f\u7684\u516c\u5171\u5b50\u6570\u7ec4\u662f [3, 2, 1]\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>1 &lt;= len(A), len(B) &lt;= 1000</li>\n\t<li>0 &lt;= A[i], B[i] &lt; 100</li>\n</ol>\n",
        "titleZh": "\u6700\u957f\u91cd\u590d\u5b50\u6570\u7ec4",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Yahoo",
            "Alibaba",
            "Pinterest",
            "Intuit",
            "Indeed",
            "Citadel"
        ]
    },
    {
        "leetId": "719",
        "link": "find-k-th-smallest-pair-distance",
        "title": "Find K-th Smallest Pair Distance",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "28.0%",
        "questionDescription": "<p>Given an integer array, return the k-th smallest <b>distance</b> among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B. </p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\nnums = [1,3,1]\r\nk = 1\r\n<b>Output: 0</b> \r\n<b>Explanation:</b>\r\nHere are all the pairs:\r\n(1,3) -> 2\r\n(1,1) -> 0\r\n(3,1) -> 2\r\nThen the 1st smallest distance pair is (1,1), and its distance is 0.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><code>2 <= len(nums) <= 10000</code>.</li>\r\n<li><code>0 <= nums[i] < 1000000</code>.</li>\r\n<li><code>1 <= k <= len(nums) * (len(nums) - 1) / 2</code>.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u8fd4\u56de\u6240\u6709\u6570\u5bf9\u4e4b\u95f4\u7684\u7b2c k \u4e2a\u6700\u5c0f<strong>\u8ddd\u79bb</strong>\u3002\u4e00\u5bf9 (A, B) \u7684\u8ddd\u79bb\u88ab\u5b9a\u4e49\u4e3a A \u548c B \u4e4b\u95f4\u7684\u7edd\u5bf9\u5dee\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>\nnums = [1,3,1]\nk = 1\n<strong>\u8f93\u51fa\uff1a0</strong> \n<strong>\u89e3\u91ca\uff1a</strong>\n\u6240\u6709\u6570\u5bf9\u5982\u4e0b\uff1a\n(1,3) -&gt; 2\n(1,1) -&gt; 0\n(3,1) -&gt; 2\n\u56e0\u6b64\u7b2c 1 \u4e2a\u6700\u5c0f\u8ddd\u79bb\u7684\u6570\u5bf9\u662f (1,1)\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a 0\u3002\n</pre>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= len(nums) &lt;= 10000</code>.</li>\n\t<li><code>0 &lt;= nums[i] &lt; 1000000</code>.</li>\n\t<li><code>1 &lt;= k &lt;= len(nums) * (len(nums) - 1) / 2</code>.</li>\n</ol>\n",
        "titleZh": "\u627e\u51fa\u7b2c k \u5c0f\u7684\u8ddd\u79bb\u5bf9",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "720",
        "link": "longest-word-in-dictionary",
        "title": "Longest Word in Dictionary",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "41.2%",
        "questionDescription": "<p>Given a list of strings <code>words</code> representing an English Dictionary, find the longest word in <code>words</code> that can be built one character at a time by other words in <code>words</code>.  If there is more than one possible answer, return the longest word with the smallest lexicographical order.</p>  If there is no answer, return the empty string.\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nwords = [\"w\",\"wo\",\"wor\",\"worl\", \"world\"]\r\n<b>Output:</b> \"world\"\r\n<b>Explanation:</b> \r\nThe word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nwords = [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]\r\n<b>Output:</b> \"apple\"\r\n<b>Explanation:</b> \r\nBoth \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>All the strings in the input will only contain lowercase letters.</li>\r\n<li>The length of <code>words</code> will be in the range <code>[1, 1000]</code>.</li>\r\n<li>The length of <code>words[i]</code> will be in the range <code>[1, 30]</code>.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4<code>words</code>\u7ec4\u6210\u7684\u4e00\u672c\u82f1\u8bed\u8bcd\u5178\u3002\u4ece\u4e2d\u627e\u51fa\u6700\u957f\u7684\u4e00\u4e2a\u5355\u8bcd\uff0c\u8be5\u5355\u8bcd\u662f\u7531<code>words</code>\u8bcd\u5178\u4e2d\u5176\u4ed6\u5355\u8bcd\u9010\u6b65\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u7ec4\u6210\u3002\u82e5\u5176\u4e2d\u6709\u591a\u4e2a\u53ef\u884c\u7684\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u7b54\u6848\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5355\u8bcd\u3002</p>\n\n<p>\u82e5\u65e0\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nwords = [&quot;w&quot;,&quot;wo&quot;,&quot;wor&quot;,&quot;worl&quot;, &quot;world&quot;]\n<strong>\u8f93\u51fa:</strong> &quot;world&quot;\n<strong>\u89e3\u91ca:</strong> \n\u5355\u8bcd&quot;world&quot;\u53ef\u7531&quot;w&quot;, &quot;wo&quot;, &quot;wor&quot;, \u548c &quot;worl&quot;\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bcd\u7ec4\u6210\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nwords = [&quot;a&quot;, &quot;banana&quot;, &quot;app&quot;, &quot;appl&quot;, &quot;ap&quot;, &quot;apply&quot;, &quot;apple&quot;]\n<strong>\u8f93\u51fa:</strong> &quot;apple&quot;\n<strong>\u89e3\u91ca:</strong> \n&quot;apply&quot;\u548c&quot;apple&quot;\u90fd\u80fd\u7531\u8bcd\u5178\u4e2d\u7684\u5355\u8bcd\u7ec4\u6210\u3002\u4f46\u662f&quot;apple&quot;\u5f97\u5b57\u5178\u5e8f\u5c0f\u4e8e&quot;apply&quot;\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u90fd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li><code>words</code>\u6570\u7ec4\u957f\u5ea6\u8303\u56f4\u4e3a<code>[1,1000]</code>\u3002</li>\n\t<li><code>words[i]</code>\u7684\u957f\u5ea6\u8303\u56f4\u4e3a<code>[1,30]</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u8bcd\u5178\u4e2d\u6700\u957f\u7684\u5355\u8bcd",
        "tags": [
            {
                "tag": "Trie",
                "link": "trie",
                "tagZh": "\u5b57\u5178\u6811"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Pinterest",
            "Quip"
        ]
    },
    {
        "leetId": "721",
        "link": "accounts-merge",
        "title": "Accounts Merge",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "28.2%",
        "questionDescription": "<p>Given a list <code>accounts</code>, each element <code>accounts[i]</code> is a list of strings, where the first element <code>accounts[i][0]</code> is a <i>name</i>, and the rest of the elements are <i>emails</i> representing emails of the account.</p>\r\n\r\n<p>Now, we would like to merge these accounts.  Two accounts definitely belong to the same person if there is some email that is common to both accounts.  Note that even if two accounts have the same name, they may belong to different people as people could have the same name.  A person can have any number of accounts initially, but all of their accounts definitely have the same name.</p>\r\n\r\n<p>After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails <b>in sorted order</b>.  The accounts themselves can be returned in any order.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre style=\"white-space: pre-wrap\">\r\n<b>Input:</b> \r\naccounts = [[\"John\", \"johnsmith@mail.com\", \"john00@mail.com\"], [\"John\", \"johnnybravo@mail.com\"], [\"John\", \"johnsmith@mail.com\", \"john_newyork@mail.com\"], [\"Mary\", \"mary@mail.com\"]]\r\n<b>Output:</b> [[\"John\", 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com'],  [\"John\", \"johnnybravo@mail.com\"], [\"Mary\", \"mary@mail.com\"]]\r\n<b>Explanation:</b> \r\nThe first and third John's are the same person as they have the common email \"johnsmith@mail.com\".\r\nThe second John and Mary are different people as none of their email addresses are used by other accounts.\r\nWe could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], \r\n['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>accounts</code> will be in the range <code>[1, 1000]</code>.</li>\r\n<li>The length of <code>accounts[i]</code> will be in the range <code>[1, 10]</code>.</li>\r\n<li>The length of <code>accounts[i][j]</code> will be in the range <code>[1, 30]</code>.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868 <code>accounts</code>\uff0c\u6bcf\u4e2a\u5143\u7d20 <code>accounts[i]</code>&nbsp;\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20 <code>accounts[i][0]</code>&nbsp;\u662f&nbsp;<em>\u540d\u79f0 (name)</em>\uff0c\u5176\u4f59\u5143\u7d20\u662f <em>emails </em>\u8868\u793a\u8be5\u5e10\u6237\u7684\u90ae\u7bb1\u5730\u5740\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u60f3\u5408\u5e76\u8fd9\u4e9b\u5e10\u6237\u3002\u5982\u679c\u4e24\u4e2a\u5e10\u6237\u90fd\u6709\u4e00\u4e9b\u5171\u540c\u7684\u90ae\u4ef6\u5730\u5740\uff0c\u5219\u4e24\u4e2a\u5e10\u6237\u5fc5\u5b9a\u5c5e\u4e8e\u540c\u4e00\u4e2a\u4eba\u3002\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u4e24\u4e2a\u5e10\u6237\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\uff0c\u5b83\u4eec\u4e5f\u53ef\u80fd\u5c5e\u4e8e\u4e0d\u540c\u7684\u4eba\uff0c\u56e0\u4e3a\u4eba\u4eec\u53ef\u80fd\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u3002\u4e00\u4e2a\u4eba\u6700\u521d\u53ef\u4ee5\u62e5\u6709\u4efb\u610f\u6570\u91cf\u7684\u5e10\u6237\uff0c\u4f46\u5176\u6240\u6709\u5e10\u6237\u90fd\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u3002</p>\n\n<p>\u5408\u5e76\u5e10\u6237\u540e\uff0c\u6309\u4ee5\u4e0b\u683c\u5f0f\u8fd4\u56de\u5e10\u6237\uff1a\u6bcf\u4e2a\u5e10\u6237\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u540d\u79f0\uff0c\u5176\u4f59\u5143\u7d20\u662f\u6309\u987a\u5e8f\u6392\u5217\u7684\u90ae\u7bb1\u5730\u5740\u3002accounts \u672c\u8eab\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u3002</p>\n\n<p><strong>\u4f8b\u5b50 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \naccounts = [[&quot;John&quot;, &quot;johnsmith@mail.com&quot;, &quot;john00@mail.com&quot;], [&quot;John&quot;, &quot;johnnybravo@mail.com&quot;], [&quot;John&quot;, &quot;johnsmith@mail.com&quot;, &quot;john_newyork@mail.com&quot;], [&quot;Mary&quot;, &quot;mary@mail.com&quot;]]\n<strong>Output:</strong> [[&quot;John&quot;, &#39;john00@mail.com&#39;, &#39;john_newyork@mail.com&#39;, &#39;johnsmith@mail.com&#39;],  [&quot;John&quot;, &quot;johnnybravo@mail.com&quot;], [&quot;Mary&quot;, &quot;mary@mail.com&quot;]]\n<strong>Explanation:</strong> \n  \u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a John \u662f\u540c\u4e00\u4e2a\u4eba\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6709\u5171\u540c\u7684\u7535\u5b50\u90ae\u4ef6 &quot;johnsmith@mail.com&quot;\u3002 \n  \u7b2c\u4e8c\u4e2a John \u548c Mary \u662f\u4e0d\u540c\u7684\u4eba\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u6ca1\u6709\u88ab\u5176\u4ed6\u5e10\u6237\u4f7f\u7528\u3002\n  \u6211\u4eec\u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u8fd9\u4e9b\u5217\u8868\uff0c\u4f8b\u5982\u7b54\u6848[[&#39;Mary&#39;\uff0c&#39;mary@mail.com&#39;]\uff0c[&#39;John&#39;\uff0c&#39;johnnybravo@mail.com&#39;]\uff0c\n  [&#39;John&#39;\uff0c&#39;john00@mail.com&#39;\uff0c&#39;john_newyork@mail.com&#39;\uff0c&#39;johnsmith@mail.com&#39;]]\u4ecd\u7136\u4f1a\u88ab\u63a5\u53d7\u3002\n\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li><code>accounts</code>\u7684\u957f\u5ea6\u5c06\u5728<code>[1\uff0c1000]</code>\u7684\u8303\u56f4\u5185\u3002</li>\n\t<li><code>accounts[i]</code>\u7684\u957f\u5ea6\u5c06\u5728<code>[1\uff0c10]</code>\u7684\u8303\u56f4\u5185\u3002</li>\n\t<li><code>accounts[i][j]</code>\u7684\u957f\u5ea6\u5c06\u5728<code>[1\uff0c30]</code>\u7684\u8303\u56f4\u5185\u3002</li>\n</ul>\n",
        "titleZh": "\u8d26\u6237\u5408\u5e76",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            }
        ],
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "722",
        "link": "remove-comments",
        "title": "Remove Comments",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "23.1%",
        "questionDescription": "<p>Given a C++ program, remove comments from it. The program <code>source</code> is an array where <code>source[i]</code> is the <code>i</code>-th line of the source code.  This represents the result of splitting the original source code string by the newline character <code>\\n</code>.</p>\r\n\r\n<p>In C++, there are two types of comments, line comments, and block comments.</p>\r\n<p>\r\nThe string <code>//</code> denotes a line comment, which represents that it and rest of the characters to the right of it in the same line should be ignored.\r\n</p><p>\r\nThe string <code>/*</code> denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of <code>*/</code> should be ignored.  (Here, occurrences happen in reading order: line by line from left to right.)  To be clear, the string <code>/*/</code> does not yet end the block comment, as the ending would be overlapping the beginning.\r\n</p><p>\r\nThe first effective comment takes precedence over others: if the string <code>//</code> occurs in a block comment, it is ignored. Similarly, if the string <code>/*</code> occurs in a line or block comment, it is also ignored.\r\n</p><p>\r\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\r\n</p><p>\r\nThere will be no control characters, single quote, or double quote characters.  For example, <code>source = \"string s = \"/* Not a comment. */\";\"</code> will not be a test case.  (Also, nothing else such as defines or macros will interfere with the comments.)\r\n</p><p>\r\nIt is guaranteed that every open block comment will eventually be closed, so <code>/*</code> outside of a line or block comment always starts a new comment.\r\n</p><p>\r\nFinally, implicit newline characters can be deleted by block comments.  Please see the examples below for details.\r\n</p>\r\n\r\n<p>After removing the comments from the source code, return the source code in the same format.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre style=\"white-space: pre-wrap\">\r\n<b>Input:</b> \r\nsource = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\r\n\r\nThe line by line code is visualized as below:\r\n/*Test program */\r\nint main()\r\n{ \r\n  // variable declaration \r\nint a, b, c;\r\n/* This is a test\r\n   multiline  \r\n   comment for \r\n   testing */\r\na = b + c;\r\n}\r\n\r\n<b>Output:</b> [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\r\n\r\nThe line by line code is visualized as below:\r\nint main()\r\n{ \r\n  \r\nint a, b, c;\r\na = b + c;\r\n}\r\n\r\n<b>Explanation:</b> \r\nThe string <code>/*</code> denotes a block comment, including line 1 and lines 6-9. The string <code>//</code> denotes line 4 as comments.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre style=\"white-space: pre-wrap\">\r\n<b>Input:</b> \r\nsource = [\"a/*comment\", \"line\", \"more_comment*/b\"]\r\n<b>Output:</b> [\"ab\"]\r\n<b>Explanation:</b> The original source string is \"a/*comment<b>\\n</b>line<b>\\n</b>more_comment*/b\", where we have bolded the newline characters.  After deletion, the <i>implicit</i> newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>source</code> is in the range <code>[1, 100]</code>.</li>\r\n<li>The length of <code>source[i]</code> is in the range <code>[0, 80]</code>.</li>\r\n<li>Every open block comment is eventually closed.</li>\r\n<li>There are no single-quote, double-quote, or control characters in the source code.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u4e00\u4e2a C++ \u7a0b\u5e8f\uff0c\u5220\u9664\u7a0b\u5e8f\u4e2d\u7684\u6ce8\u91ca\u3002\u8fd9\u4e2a\u7a0b\u5e8f<code>source</code>\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u4e2d<code>source[i]</code>\u8868\u793a\u7b2c<code>i</code>\u884c\u6e90\u7801\u3002&nbsp;\u8fd9\u8868\u793a\u6bcf\u884c\u6e90\u7801\u7531<code>\\n</code>\u5206\u9694\u3002</p>\n\n<p>\u5728 C++ \u4e2d\u6709\u4e24\u79cd\u6ce8\u91ca\u98ce\u683c\uff0c\u884c\u5185\u6ce8\u91ca\u548c\u5757\u6ce8\u91ca\u3002</p>\n\n<p>\u5b57\u7b26\u4e32<code>//</code> \u8868\u793a\u884c\u6ce8\u91ca\uff0c\u8868\u793a<code>//</code>\u548c\u5176\u53f3\u4fa7\u7684\u5176\u4f59\u5b57\u7b26\u5e94\u8be5\u88ab\u5ffd\u7565\u3002</p>\n\n<p>\u5b57\u7b26\u4e32<code>/*</code> \u8868\u793a\u4e00\u4e2a\u5757\u6ce8\u91ca\uff0c\u5b83\u8868\u793a\u76f4\u5230<code>*/</code>\u7684\u4e0b\u4e00\u4e2a\uff08\u975e\u91cd\u53e0\uff09\u51fa\u73b0\u7684\u6240\u6709\u5b57\u7b26\u90fd\u5e94\u8be5\u88ab\u5ffd\u7565\u3002\uff08\u9605\u8bfb\u987a\u5e8f\u4e3a\u4ece\u5de6\u5230\u53f3\uff09\u975e\u91cd\u53e0\u662f\u6307\uff0c\u5b57\u7b26\u4e32<code>/*/</code>\u5e76\u6ca1\u6709\u7ed3\u675f\u5757\u6ce8\u91ca\uff0c\u56e0\u4e3a\u6ce8\u91ca\u7684\u7ed3\u5c3e\u4e0e\u5f00\u5934\u76f8\u91cd\u53e0\u3002</p>\n\n<p>\u7b2c\u4e00\u4e2a\u6709\u6548\u6ce8\u91ca\u4f18\u5148\u4e8e\u5176\u4ed6\u6ce8\u91ca\uff1a\u5982\u679c\u5b57\u7b26\u4e32<code>//</code>\u51fa\u73b0\u5728\u5757\u6ce8\u91ca\u4e2d\u4f1a\u88ab\u5ffd\u7565\u3002 \u540c\u6837\uff0c\u5982\u679c\u5b57\u7b26\u4e32<code>/*</code>\u51fa\u73b0\u5728\u884c\u6216\u5757\u6ce8\u91ca\u4e2d\u4e5f\u4f1a\u88ab\u5ffd\u7565\u3002</p>\n\n<p>\u5982\u679c\u4e00\u884c\u5728\u5220\u9664\u6ce8\u91ca\u4e4b\u540e\u53d8\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48<strong>\u4e0d\u8981</strong>\u8f93\u51fa\u8be5\u884c\u3002\u5373\uff0c\u7b54\u6848\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u662f\u975e\u7a7a\u7684\u3002</p>\n\n<p>\u6837\u4f8b\u4e2d<strong>\u6ca1\u6709</strong>\u63a7\u5236\u5b57\u7b26\uff0c\u5355\u5f15\u53f7\u6216\u53cc\u5f15\u53f7\u5b57\u7b26\u3002\u6bd4\u5982\uff0c<code>source = &quot;string s = &quot;/* Not a comment. */&quot;;&quot;</code> \u4e0d\u4f1a\u51fa\u73b0\u5728\u6d4b\u8bd5\u6837\u4f8b\u91cc\u3002\uff08\u6b64\u5916\uff0c\u6ca1\u6709\u5176\u4ed6\u5185\u5bb9\uff08\u5982\u5b9a\u4e49\u6216\u5b8f\uff09\u4f1a\u5e72\u6270\u6ce8\u91ca\u3002\uff09</p>\n\n<p>\u6211\u4eec\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u5757\u6ce8\u91ca\u6700\u7ec8\u90fd\u4f1a\u88ab\u95ed\u5408\uff0c \u6240\u4ee5\u5728\u884c\u6216\u5757\u6ce8\u91ca\u4e4b\u5916\u7684<code>/*</code>\u603b\u662f\u5f00\u59cb\u65b0\u7684\u6ce8\u91ca\u3002</p>\n\n<p>\u6700\u540e\uff0c\u9690\u5f0f\u6362\u884c\u7b26<strong>\u53ef\u4ee5</strong>\u901a\u8fc7\u5757\u6ce8\u91ca\u5220\u9664\u3002 \u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4e0b\u9762\u7684\u793a\u4f8b\u3002</p>\n\n<p>\u4ece\u6e90\u4ee3\u7801\u4e2d\u5220\u9664\u6ce8\u91ca\u540e\uff0c\u9700\u8981\u4ee5\u76f8\u540c\u7684\u683c\u5f0f\u8fd4\u56de\u6e90\u4ee3\u7801\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nsource = [&quot;/*Test program */&quot;, &quot;int main()&quot;, &quot;{ &quot;, &quot;  // variable declaration &quot;, &quot;int a, b, c;&quot;, &quot;/* This is a test&quot;, &quot;   multiline  &quot;, &quot;   comment for &quot;, &quot;   testing */&quot;, &quot;a = b + c;&quot;, &quot;}&quot;]\n\n\u793a\u4f8b\u4ee3\u7801\u53ef\u4ee5\u7f16\u6392\u6210\u8fd9\u6837:\n/*Test program */\nint main()\n{ \n  // variable declaration \nint a, b, c;\n/* This is a test\n   multiline  \n   comment for \n   testing */\na = b + c;\n}\n\n<strong>\u8f93\u51fa:</strong> [&quot;int main()&quot;,&quot;{ &quot;,&quot;  &quot;,&quot;int a, b, c;&quot;,&quot;a = b + c;&quot;,&quot;}&quot;]\n\n\u7f16\u6392\u540e:\nint main()\n{ \n  \nint a, b, c;\na = b + c;\n}\n\n<strong>\u89e3\u91ca:</strong> \n\u7b2c 1 \u884c\u548c\u7b2c 6-9 \u884c\u7684\u5b57\u7b26\u4e32 /* \u8868\u793a\u5757\u6ce8\u91ca\u3002\u7b2c 4 \u884c\u7684\u5b57\u7b26\u4e32 // \u8868\u793a\u884c\u6ce8\u91ca\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nsource = [&quot;a/*comment&quot;, &quot;line&quot;, &quot;more_comment*/b&quot;]\n<strong>\u8f93\u51fa:</strong> [&quot;ab&quot;]\n<strong>\u89e3\u91ca:</strong> \u539f\u59cb\u7684 source \u5b57\u7b26\u4e32\u662f &quot;a/*comment<strong>\\n</strong>line<strong>\\n</strong>more_comment*/b&quot;, \u5176\u4e2d\u6211\u4eec\u7528\u7c97\u4f53\u663e\u793a\u4e86\u6362\u884c\u7b26\u3002\u5220\u9664\u6ce8\u91ca\u540e\uff0c\u9690\u542b\u7684\u6362\u884c\u7b26\u88ab\u5220\u9664\uff0c\u7559\u4e0b\u5b57\u7b26\u4e32 &quot;ab&quot; \u7528\u6362\u884c\u7b26\u5206\u9694\u6210\u6570\u7ec4\u65f6\u5c31\u662f [&quot;ab&quot;].\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>source</code>\u7684\u957f\u5ea6\u8303\u56f4\u4e3a<code>[1, 100]</code>.</li>\n\t<li><code>source[i]</code>\u7684\u957f\u5ea6\u8303\u56f4\u4e3a<code>[0, 80]</code>.</li>\n\t<li>\u6bcf\u4e2a\u5757\u6ce8\u91ca\u90fd\u4f1a\u88ab\u95ed\u5408\u3002</li>\n\t<li>\u7ed9\u5b9a\u7684\u6e90\u7801\u4e2d\u4e0d\u4f1a\u6709\u5355\u5f15\u53f7\u3001\u53cc\u5f15\u53f7\u6216\u5176\u4ed6\u63a7\u5236\u5b57\u7b26\u3002</li>\n</ul>\n",
        "titleZh": "\u5220\u9664\u6ce8\u91ca",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Microsoft",
            "Uber",
            "Goldman Sachs",
            "Nutanix",
            "Qualtrics"
        ]
    },
    {
        "leetId": "723",
        "link": "candy-crush",
        "title": "Candy Crush",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "47",
        "questionDescription": "\n<p>This question is about implementing a basic elimination algorithm for Candy Crush.</p>\n<p>Given a 2D integer array <code>board</code> representing the grid of candy, different positive integers <code>board[i][j]</code> represent different types of candies.  A value of <code>board[i][j] = 0</code> represents that the cell at position <code>(i, j)</code> is empty.  The given board represents the state of the game following the player's move.  Now, you need to restore the board to a <i>stable state</i> by crushing candies according to the following rules:</p>\n<ol>\n<li>If three or more candies of the same type are adjacent vertically or horizontally, \"crush\" them all at the same time - these positions become empty.</li>\n<li>After crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or bottom at the same time. (No new candies will drop outside the top boundary.)</li>\n<li>After the above steps, there may exist more candies that can be crushed.  If so, you need to repeat the above steps.</li>\n<li>If there does not exist more candies that can be crushed (ie. the board is <i>stable</i>), then return the current board.</li>\n</ol>\n<p>You need to perform the above rules until the board becomes stable, then return the current board.</p>\n<p><b>Example 1:</b><br/>\n</p><pre style=\"white-space: pre-line\"><b>Input:</b>\nboard = \n[[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314],[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,2,713,714],[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]]\n<b>Output:</b>\n[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[110,0,0,0,114],[210,0,0,0,214],[310,0,0,113,314],[410,0,0,213,414],[610,211,112,313,614],[710,311,412,613,714],[810,411,512,713,1014]]\n<b>Explanation:</b> \n<img src=\"/static/images/problemset/candy_crush_example_2.png\"/>\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The length of <code>board</code> will be in the range [3, 50].</li>\n<li>The length of <code>board[i]</code> will be in the range [3, 50].</li>\n<li>Each <code>board[i][j]</code> will initially start as an integer in the range [1, 2000].</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>This question is about implementing a basic elimination algorithm for Candy Crush.</p>\n<p>Given a 2D integer array <code>board</code> representing the grid of candy, different positive integers <code>board[i][j]</code> represent different types of candies.  A value of <code>board[i][j] = 0</code> represents that the cell at position <code>(i, j)</code> is empty.  The given board represents the state of the game following the player's move.  Now, you need to restore the board to a <i>stable state</i> by crushing candies according to the following rules:</p>\n<ol>\n<li>If three or more candies of the same type are adjacent vertically or horizontally, \"crush\" them all at the same time - these positions become empty.</li>\n<li>After crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or bottom at the same time. (No new candies will drop outside the top boundary.)</li>\n<li>After the above steps, there may exist more candies that can be crushed.  If so, you need to repeat the above steps.</li>\n<li>If there does not exist more candies that can be crushed (ie. the board is <i>stable</i>), then return the current board.</li>\n</ol>\n<p>You need to perform the above rules until the board becomes stable, then return the current board.</p>\n<p><b>Example 1:</b><br/>\n</p><pre style=\"white-space: pre-line\"><b>Input:</b>\nboard = \n[[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314],[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,2,713,714],[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]]\n<b>Output:</b>\n[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[110,0,0,0,114],[210,0,0,0,214],[310,0,0,113,314],[410,0,0,213,414],[610,211,112,313,614],[710,311,412,613,714],[810,411,512,713,1014]]\n<b>Explanation:</b> \n<img src=\"/static/images/problemset/candy_crush_example_2.png\"/>\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li>The length of <code>board</code> will be in the range [3, 50].</li>\n<li>The length of <code>board[i]</code> will be in the range [3, 50].</li>\n<li>Each <code>board[i][j]</code> will initially start as an integer in the range [1, 2000].</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google",
            "Bloomberg",
            "Rubrik"
        ]
    },
    {
        "leetId": "724",
        "link": "find-pivot-index",
        "title": "Find Pivot Index",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "34.7%",
        "questionDescription": "<p>Given an array of integers <code>nums</code>, write a method that returns the &quot;pivot&quot; index of this array.</p>\r\n\r\n<p>We define the pivot index as the index where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index.</p>\r\n\r\n<p>If no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\nnums = [1, 7, 3, 6, 5, 6]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> \r\nThe sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.\r\nAlso, 3 is the first index where this occurs.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\nnums = [1, 2, 3]\r\n<b>Output:</b> -1\r\n<b>Explanation:</b> \r\nThere is no index that satisfies the conditions in the problem statement.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>The length of <code>nums</code> will be in the range <code>[0, 10000]</code>.</li>\r\n\t<li>Each element <code>nums[i]</code> will be an integer in the range <code>[-1000, 1000]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u7c7b\u578b\u7684\u6570\u7ec4&nbsp;<code>nums</code>\uff0c\u8bf7\u7f16\u5199\u4e00\u4e2a\u80fd\u591f\u8fd4\u56de\u6570\u7ec4<strong>&ldquo;\u4e2d\u5fc3\u7d22\u5f15&rdquo;</strong>\u7684\u65b9\u6cd5\u3002</p>\n\n<p>\u6211\u4eec\u662f\u8fd9\u6837\u5b9a\u4e49\u6570\u7ec4<strong>\u4e2d\u5fc3\u7d22\u5f15</strong>\u7684\uff1a\u6570\u7ec4\u4e2d\u5fc3\u7d22\u5f15\u7684\u5de6\u4fa7\u6240\u6709\u5143\u7d20\u76f8\u52a0\u7684\u548c\u7b49\u4e8e\u53f3\u4fa7\u6240\u6709\u5143\u7d20\u76f8\u52a0\u7684\u548c\u3002</p>\n\n<p>\u5982\u679c\u6570\u7ec4\u4e0d\u5b58\u5728\u4e2d\u5fc3\u7d22\u5f15\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u8fd4\u56de -1\u3002\u5982\u679c\u6570\u7ec4\u6709\u591a\u4e2a\u4e2d\u5fc3\u7d22\u5f15\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u8fd4\u56de\u6700\u9760\u8fd1\u5de6\u8fb9\u7684\u90a3\u4e00\u4e2a\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nnums = [1, 7, 3, 6, 5, 6]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \n\u7d22\u5f153 (nums[3] = 6) \u7684\u5de6\u4fa7\u6570\u4e4b\u548c(1 + 7 + 3 = 11)\uff0c\u4e0e\u53f3\u4fa7\u6570\u4e4b\u548c(5 + 6 = 11)\u76f8\u7b49\u3002\n\u540c\u65f6, 3 \u4e5f\u662f\u7b2c\u4e00\u4e2a\u7b26\u5408\u8981\u6c42\u7684\u4e2d\u5fc3\u7d22\u5f15\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nnums = [1, 2, 3]\n<strong>\u8f93\u51fa:</strong> -1\n<strong>\u89e3\u91ca:</strong> \n\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u6ee1\u8db3\u6b64\u6761\u4ef6\u7684\u4e2d\u5fc3\u7d22\u5f15\u3002</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>nums</code> \u7684\u957f\u5ea6\u8303\u56f4\u4e3a&nbsp;<code>[0, 10000]</code>\u3002</li>\n\t<li>\u4efb\u4f55\u4e00\u4e2a&nbsp;<code>nums[i]</code> \u5c06\u4f1a\u662f\u4e00\u4e2a\u8303\u56f4\u5728&nbsp;<code>[-1000, 1000]</code>\u7684\u6574\u6570\u3002</li>\n</ul>\n",
        "titleZh": "\u5bfb\u627e\u6570\u7ec4\u7684\u4e2d\u5fc3\u7d22\u5f15",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Bloomberg",
            "Apple",
            "Baidu",
            "Coupang",
            "Radius"
        ]
    },
    {
        "leetId": "725",
        "link": "split-linked-list-in-parts",
        "title": "Split Linked List in Parts",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "47.1%",
        "questionDescription": "<p>Given a (singly) linked list with head node <code>root</code>, write a function to split the linked list into <code>k</code> consecutive linked list \"parts\".\r\n</p><p>\r\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than 1.  This may lead to some parts being null.\r\n</p><p>\r\nThe parts should be in order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal parts occurring later.\r\n</p><p>\r\nReturn a List of ListNode's representing the linked list parts that are formed.\r\n</p>\r\n\r\nExamples\r\n1->2->3->4, k = 5 // 5 equal parts\r\n[ [1], \r\n[2],\r\n[3],\r\n[4],\r\nnull ]\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre style=\"white-space: pre-line\">\r\n<b>Input:</b> \r\nroot = [1, 2, 3], k = 5\r\n<b>Output:</b> [[1],[2],[3],[],[]]\r\n<b>Explanation:</b>\r\nThe input and each element of the output are ListNodes, not arrays.\r\nFor example, the input root has root.val = 1, root.next.val = 2, \\root.next.next.val = 3, and root.next.next.next = null.\r\nThe first element output[0] has output[0].val = 1, output[0].next = null.\r\nThe last element output[4] is null, but it's string representation as a ListNode is [].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nroot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\r\n<b>Output:</b> [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\r\n<b>Explanation:</b>\r\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>root</code> will be in the range <code>[0, 1000]</code>.</li>\r\n<li>Each value of a node in the input will be an integer in the range <code>[0, 999]</code>.</li>\r\n<li><code>k</code> will be an integer in the range <code>[1, 50]</code>.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5934\u7ed3\u70b9\u4e3a <code>root</code> \u7684\u94fe\u8868, \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u4ee5\u5c06\u94fe\u8868\u5206\u9694\u4e3a <code>k</code> \u4e2a\u8fde\u7eed\u7684\u90e8\u5206\u3002</p>\n\n<p>\u6bcf\u90e8\u5206\u7684\u957f\u5ea6\u5e94\u8be5\u5c3d\u53ef\u80fd\u7684\u76f8\u7b49: \u4efb\u610f\u4e24\u90e8\u5206\u7684\u957f\u5ea6\u5dee\u8ddd\u4e0d\u80fd\u8d85\u8fc7 1\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u80fd\u6709\u4e9b\u90e8\u5206\u4e3a null\u3002</p>\n\n<p>\u8fd9k\u4e2a\u90e8\u5206\u5e94\u8be5\u6309\u7167\u5728\u94fe\u8868\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u8fdb\u884c\u8f93\u51fa\uff0c\u5e76\u4e14\u6392\u5728\u524d\u9762\u7684\u90e8\u5206\u7684\u957f\u5ea6\u5e94\u8be5\u5927\u4e8e\u6216\u7b49\u4e8e\u540e\u9762\u7684\u957f\u5ea6\u3002</p>\n\n<p>\u8fd4\u56de\u4e00\u4e2a\u7b26\u5408\u4e0a\u8ff0\u89c4\u5219\u7684\u94fe\u8868\u7684\u5217\u8868\u3002</p>\n\n<p>\u4e3e\u4f8b\uff1a 1-&gt;2-&gt;3-&gt;4, k = 5 // 5 \u7ed3\u679c [ [1], [2], [3], [4], null ]</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nroot = [1, 2, 3], k = 5\n<strong>\u8f93\u51fa:</strong> [[1],[2],[3],[],[]]\n<strong>\u89e3\u91ca:</strong>\n\u8f93\u5165\u8f93\u51fa\u5404\u90e8\u5206\u90fd\u5e94\u8be5\u662f\u94fe\u8868\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u3002\n\u4f8b\u5982, \u8f93\u5165\u7684\u7ed3\u70b9 root \u7684 val= 1, root.next.val = 2, \\root.next.next.val = 3, \u4e14 root.next.next.next = null\u3002\n\u7b2c\u4e00\u4e2a\u8f93\u51fa output[0] \u662f output[0].val = 1, output[0].next = null\u3002\n\u6700\u540e\u4e00\u4e2a\u5143\u7d20 output[4] \u4e3a null, \u5b83\u4ee3\u8868\u4e86\u6700\u540e\u4e00\u4e2a\u90e8\u5206\u4e3a\u7a7a\u94fe\u8868\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nroot = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\n<strong>\u8f93\u51fa:</strong> [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\n<strong>\u89e3\u91ca:</strong>\n\u8f93\u5165\u88ab\u5206\u6210\u4e86\u51e0\u4e2a\u8fde\u7eed\u7684\u90e8\u5206\uff0c\u5e76\u4e14\u6bcf\u90e8\u5206\u7684\u957f\u5ea6\u76f8\u5dee\u4e0d\u8d85\u8fc71.\u524d\u9762\u90e8\u5206\u7684\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e\u540e\u9762\u90e8\u5206\u7684\u957f\u5ea6\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ul>\n\t<li><code>root</code> \u7684\u957f\u5ea6\u8303\u56f4\uff1a&nbsp;<code>[0, 1000]</code>.</li>\n\t<li>\u8f93\u5165\u7684\u6bcf\u4e2a\u8282\u70b9\u7684\u5927\u5c0f\u8303\u56f4\uff1a<code>[0, 999]</code>.</li>\n\t<li><code>k</code>&nbsp;\u7684\u53d6\u503c\u8303\u56f4\uff1a&nbsp;<code>[1, 50]</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u5206\u9694\u94fe\u8868",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon"
        ]
    },
    {
        "leetId": "726",
        "link": "number-of-atoms",
        "title": "Number of Atoms",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "40.2%",
        "questionDescription": "<p>Given a chemical <code>formula</code> (given as a string), return the count of each atom.\r\n</p><p>\r\nAn atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.\r\n</p><p>\r\n1 or more digits representing the count of that element may follow if the count is greater than 1.  If the count is 1, no digits will follow.  For example, H2O and H2O2 are possible, but H1O2 is impossible.\r\n</p><p>\r\nTwo formulas concatenated together produce another formula.  For example, H2O2He3Mg4 is also a formula.  \r\n</p><p>\r\nA formula placed in parentheses, and a count (optionally added) is also a formula.  For example, (H2O2) and (H2O2)3 are formulas.\r\n</p><p>\r\nGiven a formula, output the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nformula = \"H2O\"\r\n<b>Output:</b> \"H2O\"\r\n<b>Explanation:</b> \r\nThe count of elements are {'H': 2, 'O': 1}.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nformula = \"Mg(OH)2\"\r\n<b>Output:</b> \"H2MgO2\"\r\n<b>Explanation:</b> \r\nThe count of elements are {'H': 2, 'Mg': 1, 'O': 2}.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nformula = \"K4(ON(SO3)2)2\"\r\n<b>Output:</b> \"K4N2O14S4\"\r\n<b>Explanation:</b> \r\nThe count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>All atom names consist of lowercase letters, except for the first character which is uppercase.</li>\r\n<li>The length of <code>formula</code> will be in the range <code>[1, 1000]</code>.</li>\r\n<li><code>formula</code> will only consist of letters, digits, and round parentheses, and is a valid formula as defined in the problem.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5316\u5b66\u5f0f<code>formula</code>\uff08\u4f5c\u4e3a\u5b57\u7b26\u4e32\uff09\uff0c\u8fd4\u56de\u6bcf\u79cd\u539f\u5b50\u7684\u6570\u91cf\u3002</p>\n\n<p>\u539f\u5b50\u603b\u662f\u4ee5\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\u5f00\u59cb\uff0c\u63a5\u7740\u8ddf\u968f0\u4e2a\u6216\u4efb\u610f\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u8868\u793a\u539f\u5b50\u7684\u540d\u5b57\u3002</p>\n\n<p>\u5982\u679c\u6570\u91cf\u5927\u4e8e 1\uff0c\u539f\u5b50\u540e\u4f1a\u8ddf\u7740\u6570\u5b57\u8868\u793a\u539f\u5b50\u7684\u6570\u91cf\u3002\u5982\u679c\u6570\u91cf\u7b49\u4e8e 1 \u5219\u4e0d\u4f1a\u8ddf\u6570\u5b57\u3002\u4f8b\u5982\uff0cH2O \u548c H2O2 \u662f\u53ef\u884c\u7684\uff0c\u4f46 H1O2 \u8fd9\u4e2a\u8868\u8fbe\u662f\u4e0d\u53ef\u884c\u7684\u3002</p>\n\n<p>\u4e24\u4e2a\u5316\u5b66\u5f0f\u8fde\u5728\u4e00\u8d77\u662f\u65b0\u7684\u5316\u5b66\u5f0f\u3002\u4f8b\u5982&nbsp;H2O2He3Mg4 \u4e5f\u662f\u5316\u5b66\u5f0f\u3002</p>\n\n<p>\u4e00\u4e2a\u62ec\u53f7\u4e2d\u7684\u5316\u5b66\u5f0f\u548c\u6570\u5b57\uff08\u53ef\u9009\u62e9\u6027\u6dfb\u52a0\uff09\u4e5f\u662f\u5316\u5b66\u5f0f\u3002\u4f8b\u5982 (H2O2) \u548c (H2O2)3 \u662f\u5316\u5b66\u5f0f\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5316\u5b66\u5f0f\uff0c\u8f93\u51fa\u6240\u6709\u539f\u5b50\u7684\u6570\u91cf\u3002\u683c\u5f0f\u4e3a\uff1a\u7b2c\u4e00\u4e2a\uff08\u6309\u5b57\u5178\u5e8f\uff09\u539f\u5b50\u7684\u540d\u5b50\uff0c\u8ddf\u7740\u5b83\u7684\u6570\u91cf\uff08\u5982\u679c\u6570\u91cf\u5927\u4e8e 1\uff09\uff0c\u7136\u540e\u662f\u7b2c\u4e8c\u4e2a\u539f\u5b50\u7684\u540d\u5b57\uff08\u6309\u5b57\u5178\u5e8f\uff09\uff0c\u8ddf\u7740\u5b83\u7684\u6570\u91cf\uff08\u5982\u679c\u6570\u91cf\u5927\u4e8e 1\uff09\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nformula = &quot;H2O&quot;\n<strong>\u8f93\u51fa:</strong> &quot;H2O&quot;\n<strong>\u89e3\u91ca:</strong> \n\u539f\u5b50\u7684\u6570\u91cf\u662f {&#39;H&#39;: 2, &#39;O&#39;: 1}\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nformula = &quot;Mg(OH)2&quot;\n<strong>\u8f93\u51fa:</strong> &quot;H2MgO2&quot;\n<strong>\u89e3\u91ca:</strong> \n\u539f\u5b50\u7684\u6570\u91cf\u662f {&#39;H&#39;: 2, &#39;Mg&#39;: 1, &#39;O&#39;: 2}\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nformula = &quot;K4(ON(SO3)2)2&quot;\n<strong>\u8f93\u51fa:</strong> &quot;K4N2O14S4&quot;\n<strong>\u89e3\u91ca:</strong> \n\u539f\u5b50\u7684\u6570\u91cf\u662f {&#39;K&#39;: 4, &#39;N&#39;: 2, &#39;O&#39;: 14, &#39;S&#39;: 4}\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u539f\u5b50\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u4e3a\u5927\u5199\uff0c\u5269\u4f59\u5b57\u6bcd\u90fd\u662f\u5c0f\u5199\u3002</li>\n\t<li><code>formula</code>\u7684\u957f\u5ea6\u5728<code>[1, 1000]</code>\u4e4b\u95f4\u3002</li>\n\t<li><code>formula</code>\u53ea\u5305\u542b\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u5706\u62ec\u53f7\uff0c\u5e76\u4e14\u9898\u76ee\u4e2d\u7ed9\u5b9a\u7684\u662f\u5408\u6cd5\u7684\u5316\u5b66\u5f0f\u3002</li>\n</ul>\n",
        "titleZh": "\u539f\u5b50\u7684\u6570\u91cf",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Recursion",
                "link": "recursion",
                "tagZh": "\u9012\u5f52"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Adobe",
            "Pinterest"
        ]
    },
    {
        "leetId": "727",
        "link": "minimum-window-subsequence",
        "title": "Minimum Window Subsequence",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "30",
        "questionDescription": "\n<p>Given strings <code>S</code> and <code>T</code>, find the minimum (contiguous) <b>substring</b> <code>W</code> of <code>S</code>, so that <code>T</code> is a <b>subsequence</b> of <code>W</code>.</p>\n<p>If there is no such window in <code>S</code> that covers all characters in <code>T</code>, return the empty string <code>\"\"</code>. If there are multiple such minimum-length windows, return the one with the left-most starting index.</p>\n<p><b>Example 1:</b></p>\n<pre><b>Input:</b> \nS = \"abcdebdde\", T = \"bde\"\n<b>Output:</b> \"bcde\"\n<b>Explanation:</b> \n\"bcde\" is the answer because it occurs before \"bdde\" which has the same length.\n\"deb\" is not a smaller window because the elements of T in the window must occur in order.\n</pre>\n<p>\u00a0</p>\n<p><b>Note:</b></p>\n<ul>\n<li>All the strings in the input will only contain lowercase letters.</li>\n<li>The length of <code>S</code> will be in the range <code>[1, 20000]</code>.</li>\n<li>The length of <code>T</code> will be in the range <code>[1, 100]</code>.</li>\n</ul>\n<p>\u00a0</p>\n",
        "questionDescriptionZh": "\n<p>Given strings <code>S</code> and <code>T</code>, find the minimum (contiguous) <b>substring</b> <code>W</code> of <code>S</code>, so that <code>T</code> is a <b>subsequence</b> of <code>W</code>.</p>\n<p>If there is no such window in <code>S</code> that covers all characters in <code>T</code>, return the empty string <code>\"\"</code>. If there are multiple such minimum-length windows, return the one with the left-most starting index.</p>\n<p><b>Example 1:</b></p>\n<pre><b>Input:</b> \nS = \"abcdebdde\", T = \"bde\"\n<b>Output:</b> \"bcde\"\n<b>Explanation:</b> \n\"bcde\" is the answer because it occurs before \"bdde\" which has the same length.\n\"deb\" is not a smaller window because the elements of T in the window must occur in order.\n</pre>\n<p>\u00a0</p>\n<p><b>Note:</b></p>\n<ul>\n<li>All the strings in the input will only contain lowercase letters.</li>\n<li>The length of <code>S</code> will be in the range <code>[1, 20000]</code>.</li>\n<li>The length of <code>T</code> will be in the range <code>[1, 100]</code>.</li>\n</ul>\n<p>\u00a0</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "eBay"
        ]
    },
    {
        "leetId": "728",
        "link": "self-dividing-numbers",
        "title": "Self Dividing Numbers",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "67.0%",
        "questionDescription": "<p>\r\nA <i>self-dividing number</i> is a number that is divisible by every digit it contains.\r\n</p><p>\r\nFor example, 128 is a self-dividing number because <code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, and <code>128 % 8 == 0</code>.\r\n</p><p>\r\nAlso, a self-dividing number is not allowed to contain the digit zero.\r\n</p><p>\r\nGiven a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.\r\n</p>\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nleft = 1, right = 22\r\n<b>Output:</b> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The boundaries of each input argument are <code>1 <= left <= right <= 10000</code>.</li>\r\n</p>",
        "questionDescriptionZh": "<p><em>\u81ea\u9664\u6570&nbsp;</em>\u662f\u6307\u53ef\u4ee5\u88ab\u5b83\u5305\u542b\u7684\u6bcf\u4e00\u4f4d\u6570\u9664\u5c3d\u7684\u6570\u3002</p>\n\n<p>\u4f8b\u5982\uff0c128 \u662f\u4e00\u4e2a\u81ea\u9664\u6570\uff0c\u56e0\u4e3a&nbsp;<code>128 % 1 == 0</code>\uff0c<code>128 % 2 == 0</code>\uff0c<code>128 % 8 == 0</code>\u3002</p>\n\n<p>\u8fd8\u6709\uff0c\u81ea\u9664\u6570\u4e0d\u5141\u8bb8\u5305\u542b 0 \u3002</p>\n\n<p>\u7ed9\u5b9a\u4e0a\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u6570\u5b57\uff0c\u8f93\u51fa\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u7684\u5143\u7d20\u662f\u8fb9\u754c\uff08\u542b\u8fb9\u754c\uff09\u5185\u6240\u6709\u7684\u81ea\u9664\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong> \n\u4e0a\u8fb9\u754cleft = 1, \u4e0b\u8fb9\u754cright = 22\n<strong>\u8f93\u51fa\uff1a</strong> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li>\u6bcf\u4e2a\u8f93\u5165\u53c2\u6570\u7684\u8fb9\u754c\u6ee1\u8db3&nbsp;<code>1 &lt;= left &lt;= right &lt;= 10000</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u81ea\u9664\u6570",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Epic Systems"
        ]
    },
    {
        "leetId": "729",
        "link": "my-calendar-i",
        "title": "My Calendar I",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "39.9%",
        "questionDescription": "<p>Implement a <code>MyCalendar</code> class to store your events. A new event can be added if adding the event will not cause a double booking.</p>\r\n\r\n<p>Your class will have the method, <code>book(int start, int end)</code>. Formally, this represents a booking on the half open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p>\r\n\r\n<p>A <i>double booking</i> happens when two events have some non-empty intersection (ie., there is some time that is common to both events.)</p>\r\n\r\n<p>For each call to the method <code>MyCalendar.book</code>, return <code>true</code> if the event can be added to the calendar successfully without causing a double booking. Otherwise, return <code>false</code> and do not add the event to the calendar.</p>\r\nYour class will be called like this: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nMyCalendar();\r\nMyCalendar.book(10, 20); // returns true\r\nMyCalendar.book(15, 25); // returns false\r\nMyCalendar.book(20, 30); // returns true\r\n<b>Explanation:</b> \r\nThe first event can be booked.  The second can&#39;t because time 15 is already booked by another event.\r\nThe third event can be booked, as the first event takes every time less than 20, but not including 20.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>The number of calls to <code>MyCalendar.book</code> per test case will be at most <code>1000</code>.</li>\r\n\t<li>In calls to <code>MyCalendar.book(start, end)</code>, <code>start</code> and <code>end</code> are integers in the range <code>[0, 10^9]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u5b9e\u73b0\u4e00\u4e2a <code>MyCalendar</code> \u7c7b\u6765\u5b58\u653e\u4f60\u7684\u65e5\u7a0b\u5b89\u6392\u3002\u5982\u679c\u8981\u6dfb\u52a0\u7684\u65f6\u95f4\u5185\u6ca1\u6709\u5176\u4ed6\u5b89\u6392\uff0c\u5219\u53ef\u4ee5\u5b58\u50a8\u8fd9\u4e2a\u65b0\u7684\u65e5\u7a0b\u5b89\u6392\u3002</p>\n\n<p><code>MyCalendar</code> \u6709\u4e00\u4e2a <code>book(int start, int end)</code>\u65b9\u6cd5\u3002\u5b83\u610f\u5473\u7740\u5728 start \u5230 end \u65f6\u95f4\u5185\u589e\u52a0\u4e00\u4e2a\u65e5\u7a0b\u5b89\u6392\uff0c\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u65f6\u95f4\u662f\u534a\u5f00\u533a\u95f4\uff0c\u5373 <code>[start, end)</code>, \u5b9e\u6570&nbsp;<code>x</code> \u7684\u8303\u56f4\u4e3a\uff0c &nbsp;<code>start &lt;= x &lt; end</code>\u3002</p>\n\n<p>\u5f53\u4e24\u4e2a\u65e5\u7a0b\u5b89\u6392\u6709\u4e00\u4e9b\u65f6\u95f4\u4e0a\u7684\u4ea4\u53c9\u65f6\uff08\u4f8b\u5982\u4e24\u4e2a\u65e5\u7a0b\u5b89\u6392\u90fd\u5728\u540c\u4e00\u65f6\u95f4\u5185\uff09\uff0c\u5c31\u4f1a\u4ea7\u751f\u91cd\u590d\u9884\u8ba2\u3002</p>\n\n<p>\u6bcf\u6b21\u8c03\u7528 <code>MyCalendar.book</code>\u65b9\u6cd5\u65f6\uff0c\u5982\u679c\u53ef\u4ee5\u5c06\u65e5\u7a0b\u5b89\u6392\u6210\u529f\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d\u800c\u4e0d\u4f1a\u5bfc\u81f4\u91cd\u590d\u9884\u8ba2\uff0c\u8fd4\u56de <code>true</code>\u3002\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>&nbsp;\u5e76\u4e14\u4e0d\u8981\u5c06\u8be5\u65e5\u7a0b\u5b89\u6392\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d\u3002</p>\n\n<p>\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8c03\u7528 <code>MyCalendar</code> \u7c7b: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>MyCalendar();\nMyCalendar.book(10, 20); // returns true\nMyCalendar.book(15, 25); // returns false\nMyCalendar.book(20, 30); // returns true\n<strong>\u89e3\u91ca:</strong> \n\u7b2c\u4e00\u4e2a\u65e5\u7a0b\u5b89\u6392\u53ef\u4ee5\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d.  \u7b2c\u4e8c\u4e2a\u65e5\u7a0b\u5b89\u6392\u4e0d\u80fd\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d\uff0c\u56e0\u4e3a\u65f6\u95f4 15 \u5df2\u7ecf\u88ab\u7b2c\u4e00\u4e2a\u65e5\u7a0b\u5b89\u6392\u9884\u5b9a\u4e86\u3002\n\u7b2c\u4e09\u4e2a\u65e5\u7a0b\u5b89\u6392\u53ef\u4ee5\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d\uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u65e5\u7a0b\u5b89\u6392\u5e76\u4e0d\u5305\u542b\u65f6\u95f4 20 \u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8c03\u7528&nbsp;<code>MyCalendar.book</code>&nbsp;\u51fd\u6570\u6700\u591a\u4e0d\u8d85\u8fc7&nbsp;<code>100</code>\u6b21\u3002</li>\n\t<li>\u8c03\u7528\u51fd\u6570&nbsp;<code>MyCalendar.book(start, end)</code>\u65f6\uff0c&nbsp;<code>start</code> \u548c&nbsp;<code>end</code> \u7684\u53d6\u503c\u8303\u56f4\u4e3a&nbsp;<code>[0, 10^9]</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u6211\u7684\u65e5\u7a0b\u5b89\u6392\u8868 I",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft"
        ]
    },
    {
        "leetId": "730",
        "link": "count-different-palindromic-subsequences",
        "title": "Count Different Palindromic Subsequences",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "37.4%",
        "questionDescription": "<p>\r\nGiven a string S, find the number of different non-empty palindromic subsequences in S, and <b>return that number modulo <code>10^9 + 7</code>.</b>\r\n</p><p>\r\nA subsequence of a string S is obtained by deleting 0 or more characters from S.\r\n</p><p>\r\nA sequence is palindromic if it is equal to the sequence reversed.\r\n</p><p>\r\nTwo sequences <code>A_1, A_2, ...</code> and <code>B_1, B_2, ...</code> are different if there is some <code>i</code> for which <code>A_i != B_i</code>.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nS = 'bccb'\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> \r\nThe 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\r\nNote that 'bcb' is counted only once, even though it occurs twice.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nS = 'abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba'\r\n<b>Output:</b> 104860361\r\n<b>Explanation:</b> \r\nThere are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10^9 + 7.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>S</code> will be in the range <code>[1, 1000]</code>.</li>\r\n<li>Each character <code>S[i]</code> will be in the set <code>{'a', 'b', 'c', 'd'}</code>.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 S\uff0c\u627e\u51fa S \u4e2d\u4e0d\u540c\u7684\u975e\u7a7a\u56de\u6587\u5b50\u5e8f\u5217\u4e2a\u6570\uff0c\u5e76<strong>\u8fd4\u56de\u8be5\u6570\u5b57\u4e0e <code>10^9 + 7 </code>\u7684\u6a21\u3002</strong></p>\n\n<p>\u901a\u8fc7\u4ece S \u4e2d\u5220\u9664 0 \u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\u6765\u83b7\u5f97\u5b50\u5b57\u7b26\u5e8f\u5217\u3002</p>\n\n<p>\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u5e8f\u5217\u4e0e\u5b83\u53cd\u8f6c\u540e\u7684\u5b57\u7b26\u5e8f\u5217\u4e00\u81f4\uff0c\u90a3\u4e48\u5b83\u662f\u56de\u6587\u5b57\u7b26\u5e8f\u5217\u3002</p>\n\n<p>\u5982\u679c\u5bf9\u4e8e\u67d0\u4e2a&nbsp;&nbsp;<code>i</code>\uff0c<code>A_i != B_i</code>\uff0c\u90a3\u4e48&nbsp;<code>A_1, A_2, ...</code> \u548c&nbsp;<code>B_1, B_2, ...</code> \u8fd9\u4e24\u4e2a\u5b57\u7b26\u5e8f\u5217\u662f\u4e0d\u540c\u7684\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\nS = &#39;bccb&#39;\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\n6 \u4e2a\u4e0d\u540c\u7684\u975e\u7a7a\u56de\u6587\u5b50\u5b57\u7b26\u5e8f\u5217\u5206\u522b\u4e3a\uff1a&#39;b&#39;, &#39;c&#39;, &#39;bb&#39;, &#39;cc&#39;, &#39;bcb&#39;, &#39;bccb&#39;\u3002\n\u6ce8\u610f\uff1a&#39;bcb&#39; \u867d\u7136\u51fa\u73b0\u4e24\u6b21\u4f46\u4ec5\u8ba1\u6570\u4e00\u6b21\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\nS = &#39;abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba&#39;\n<strong>\u8f93\u51fa\uff1a</strong>104860361\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5171\u6709 3104860382 \u4e2a\u4e0d\u540c\u7684\u975e\u7a7a\u56de\u6587\u5b50\u5b57\u7b26\u5e8f\u5217\uff0c\u5bf9 10^9 + 7 \u53d6\u6a21\u4e3a 104860361\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u7684\u957f\u5ea6\u5c06\u5728<code>[1, 1000]</code>\u8303\u56f4\u5185\u3002</li>\n\t<li>\u6bcf\u4e2a\u5b57\u7b26&nbsp;<code>S[i]</code>&nbsp;\u5c06\u4f1a\u662f\u96c6\u5408&nbsp;<code>{&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;}</code>&nbsp;\u4e2d\u7684\u67d0\u4e00\u4e2a\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u7edf\u8ba1\u4e0d\u540c\u56de\u6587\u5b50\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "LinkedIn",
            "Pure Storage"
        ]
    },
    {
        "leetId": "731",
        "link": "my-calendar-ii",
        "title": "My Calendar II",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "40.3%",
        "questionDescription": "<p>Implement a <code>MyCalendarTwo</code> class to store your events. A new event can be added if adding the event will not cause a <b>triple</b> booking.</p>\r\n\r\n<p>Your class will have one method, <code>book(int start, int end)</code>. Formally, this represents a booking on the half open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p>\r\n\r\n<p>A <i>triple booking</i> happens when <b>three</b> events have some non-empty intersection (ie., there is some time that is common to all 3 events.)</p>\r\n\r\n<p>For each call to the method <code>MyCalendar.book</code>, return <code>true</code> if the event can be added to the calendar successfully without causing a <b>triple</b> booking. Otherwise, return <code>false</code> and do not add the event to the calendar.</p>\r\nYour class will be called like this: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nMyCalendar();\r\nMyCalendar.book(10, 20); // returns true\r\nMyCalendar.book(50, 60); // returns true\r\nMyCalendar.book(10, 40); // returns true\r\nMyCalendar.book(5, 15); // returns false\r\nMyCalendar.book(5, 10); // returns true\r\nMyCalendar.book(25, 55); // returns true\r\n<b>Explanation:</b> \r\nThe first two events can be booked.  The third event can be double booked.\r\nThe fourth event (5, 15) can&#39;t be booked, because it would result in a triple booking.\r\nThe fifth event (5, 10) can be booked, as it does not use time 10 which is already double booked.\r\nThe sixth event (25, 55) can be booked, as the time in [25, 40) will be double booked with the third event;\r\nthe time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>The number of calls to <code>MyCalendar.book</code> per test case will be at most <code>1000</code>.</li>\r\n\t<li>In calls to <code>MyCalendar.book(start, end)</code>, <code>start</code> and <code>end</code> are integers in the range <code>[0, 10^9]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u5b9e\u73b0\u4e00\u4e2a <code>MyCalendar</code> \u7c7b\u6765\u5b58\u653e\u4f60\u7684\u65e5\u7a0b\u5b89\u6392\u3002\u5982\u679c\u8981\u6dfb\u52a0\u7684\u65f6\u95f4\u5185\u4e0d\u4f1a\u5bfc\u81f4\u4e09\u91cd\u9884\u8ba2\u65f6\uff0c\u5219\u53ef\u4ee5\u5b58\u50a8\u8fd9\u4e2a\u65b0\u7684\u65e5\u7a0b\u5b89\u6392\u3002</p>\n\n<p><code>MyCalendar</code> \u6709\u4e00\u4e2a <code>book(int start, int end)</code>\u65b9\u6cd5\u3002\u5b83\u610f\u5473\u7740\u5728start\u5230end\u65f6\u95f4\u5185\u589e\u52a0\u4e00\u4e2a\u65e5\u7a0b\u5b89\u6392\uff0c\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u65f6\u95f4\u662f\u534a\u5f00\u533a\u95f4\uff0c\u5373 <code>[start, end)</code>, \u5b9e\u6570&nbsp;<code>x</code> \u7684\u8303\u56f4\u4e3a\uff0c &nbsp;<code>start &lt;= x &lt; end</code>\u3002</p>\n\n<p>\u5f53\u4e09\u4e2a\u65e5\u7a0b\u5b89\u6392\u6709\u4e00\u4e9b\u65f6\u95f4\u4e0a\u7684\u4ea4\u53c9\u65f6\uff08\u4f8b\u5982\u4e09\u4e2a\u65e5\u7a0b\u5b89\u6392\u90fd\u5728\u540c\u4e00\u65f6\u95f4\u5185\uff09\uff0c\u5c31\u4f1a\u4ea7\u751f\u4e09\u91cd\u9884\u8ba2\u3002</p>\n\n<p>\u6bcf\u6b21\u8c03\u7528 <code>MyCalendar.book</code>\u65b9\u6cd5\u65f6\uff0c\u5982\u679c\u53ef\u4ee5\u5c06\u65e5\u7a0b\u5b89\u6392\u6210\u529f\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d\u800c\u4e0d\u4f1a\u5bfc\u81f4\u4e09\u91cd\u9884\u8ba2\uff0c\u8fd4\u56de <code>true</code>\u3002\u5426\u5219\uff0c\u8fd4\u56de <code>false</code> \u5e76\u4e14\u4e0d\u8981\u5c06\u8be5\u65e5\u7a0b\u5b89\u6392\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d\u3002</p>\n\n<p>\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8c03\u7528<code>MyCalendar</code> \u7c7b: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>MyCalendar();\nMyCalendar.book(10, 20); // returns true\nMyCalendar.book(50, 60); // returns true\nMyCalendar.book(10, 40); // returns true\nMyCalendar.book(5, 15); // returns false\nMyCalendar.book(5, 10); // returns true\nMyCalendar.book(25, 55); // returns true\n<strong>\u89e3\u91ca:</strong> \n\u524d\u4e24\u4e2a\u65e5\u7a0b\u5b89\u6392\u53ef\u4ee5\u6dfb\u52a0\u81f3\u65e5\u5386\u4e2d\u3002 \u7b2c\u4e09\u4e2a\u65e5\u7a0b\u5b89\u6392\u4f1a\u5bfc\u81f4\u53cc\u91cd\u9884\u8ba2\uff0c\u4f46\u53ef\u4ee5\u6dfb\u52a0\u81f3\u65e5\u5386\u4e2d\u3002\n\u7b2c\u56db\u4e2a\u65e5\u7a0b\u5b89\u6392\u6d3b\u52a8\uff085,15\uff09\u4e0d\u80fd\u6dfb\u52a0\u81f3\u65e5\u5386\u4e2d\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5bfc\u81f4\u4e09\u91cd\u9884\u8ba2\u3002\n\u7b2c\u4e94\u4e2a\u65e5\u7a0b\u5b89\u6392\uff085,10\uff09\u53ef\u4ee5\u6dfb\u52a0\u81f3\u65e5\u5386\u4e2d\uff0c\u56e0\u4e3a\u5b83\u672a\u4f7f\u7528\u5df2\u7ecf\u53cc\u91cd\u9884\u8ba2\u7684\u65f6\u95f410\u3002\n\u7b2c\u516d\u4e2a\u65e5\u7a0b\u5b89\u6392\uff0825,55\uff09\u53ef\u4ee5\u6dfb\u52a0\u81f3\u65e5\u5386\u4e2d\uff0c\u56e0\u4e3a\u65f6\u95f4 [25,40] \u5c06\u548c\u7b2c\u4e09\u4e2a\u65e5\u7a0b\u5b89\u6392\u53cc\u91cd\u9884\u8ba2\uff1b\n\u65f6\u95f4 [40,50] \u5c06\u5355\u72ec\u9884\u8ba2\uff0c\u65f6\u95f4 [50,55\uff09\u5c06\u548c\u7b2c\u4e8c\u4e2a\u65e5\u7a0b\u5b89\u6392\u53cc\u91cd\u9884\u8ba2\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8c03\u7528&nbsp;<code>MyCalendar.book</code>&nbsp;\u51fd\u6570\u6700\u591a\u4e0d\u8d85\u8fc7&nbsp;<code>100</code>\u6b21\u3002</li>\n\t<li>\u8c03\u7528\u51fd\u6570&nbsp;<code>MyCalendar.book(start, end)</code>\u65f6\uff0c&nbsp;<code>start</code> \u548c&nbsp;<code>end</code> \u7684\u53d6\u503c\u8303\u56f4\u4e3a&nbsp;<code>[0, 10^9]</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u6211\u7684\u65e5\u7a0b\u5b89\u6392\u8868 II",
        "tags": [
            {
                "tag": "Binary Search Tree",
                "link": "binary-search-tree",
                "tagZh": "\u4e8c\u53c9\u641c\u7d22\u6811"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "732",
        "link": "my-calendar-iii",
        "title": "My Calendar III",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "44.7%",
        "questionDescription": "<p>Implement a <code>MyCalendarThree</code> class to store your events. A new event can <b>always</b> be added.</p>\r\n\r\n<p>Your class will have one method, <code>book(int start, int end)</code>. Formally, this represents a booking on the half open interval <code>[start, end)</code>, the range of real numbers <code>x</code> such that <code>start &lt;= x &lt; end</code>.</p>\r\n\r\n<p>A <i>K-booking</i> happens when <b>K</b> events have some non-empty intersection (ie., there is some time that is common to all K events.)</p>\r\n\r\n<p>For each call to the method <code>MyCalendar.book</code>, return an integer <code>K</code> representing the largest integer such that there exists a <code>K</code>-booking in the calendar.</p>\r\nYour class will be called like this: <code>MyCalendarThree cal = new MyCalendarThree();</code> <code>MyCalendarThree.book(start, end)</code>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\nMyCalendarThree();\r\nMyCalendarThree.book(10, 20); // returns 1\r\nMyCalendarThree.book(50, 60); // returns 1\r\nMyCalendarThree.book(10, 40); // returns 2\r\nMyCalendarThree.book(5, 15); // returns 3\r\nMyCalendarThree.book(5, 10); // returns 3\r\nMyCalendarThree.book(25, 55); // returns 3\r\n<b>Explanation:</b> \r\nThe first two events can be booked and are disjoint, so the maximum K-booking is a 1-booking.\r\nThe third event [10, 40) intersects the first event, and the maximum K-booking is a 2-booking.\r\nThe remaining events cause the maximum K-booking to be only a 3-booking.\r\nNote that the last event locally causes a 2-booking, but the answer is still 3 because\r\neg. [10, 20), [10, 40), and [5, 15) are still triple booked.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>The number of calls to <code>MyCalendarThree.book</code> per test case will be at most <code>400</code>.</li>\r\n\t<li>In calls to <code>MyCalendarThree.book(start, end)</code>, <code>start</code> and <code>end</code> are integers in the range <code>[0, 10^9]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u5b9e\u73b0\u4e00\u4e2a <code>MyCalendar</code> \u7c7b\u6765\u5b58\u653e\u4f60\u7684\u65e5\u7a0b\u5b89\u6392\uff0c\u4f60\u53ef\u4ee5\u4e00\u76f4\u6dfb\u52a0\u65b0\u7684\u65e5\u7a0b\u5b89\u6392\u3002</p>\n\n<p><code>MyCalendar</code> \u6709\u4e00\u4e2a <code>book(int start, int end)</code>\u65b9\u6cd5\u3002\u5b83\u610f\u5473\u7740\u5728start\u5230end\u65f6\u95f4\u5185\u589e\u52a0\u4e00\u4e2a\u65e5\u7a0b\u5b89\u6392\uff0c\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u65f6\u95f4\u662f\u534a\u5f00\u533a\u95f4\uff0c\u5373 <code>[start, end)</code>, \u5b9e\u6570&nbsp;<code>x</code> \u7684\u8303\u56f4\u4e3a\uff0c &nbsp;<code>start &lt;= x &lt; end</code>\u3002</p>\n\n<p>\u5f53 <strong>K</strong> \u4e2a\u65e5\u7a0b\u5b89\u6392\u6709\u4e00\u4e9b\u65f6\u95f4\u4e0a\u7684\u4ea4\u53c9\u65f6\uff08\u4f8b\u5982K\u4e2a\u65e5\u7a0b\u5b89\u6392\u90fd\u5728\u540c\u4e00\u65f6\u95f4\u5185\uff09\uff0c\u5c31\u4f1a\u4ea7\u751f <strong>K</strong> \u6b21\u9884\u8ba2\u3002</p>\n\n<p>\u6bcf\u6b21\u8c03\u7528 <code>MyCalendar.book</code>\u65b9\u6cd5\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u6574\u6570 <code>K</code> \uff0c\u8868\u793a\u6700\u5927\u7684 <code>K</code> \u6b21\u9884\u8ba2\u3002</p>\n\n<p>\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8c03\u7528<code>MyCalendar</code> \u7c7b: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\nMyCalendarThree();\nMyCalendarThree.book(10, 20); // returns 1\nMyCalendarThree.book(50, 60); // returns 1\nMyCalendarThree.book(10, 40); // returns 2\nMyCalendarThree.book(5, 15); // returns 3\nMyCalendarThree.book(5, 10); // returns 3\nMyCalendarThree.book(25, 55); // returns 3\n<strong>\u89e3\u91ca:</strong> \n\u524d\u4e24\u4e2a\u65e5\u7a0b\u5b89\u6392\u53ef\u4ee5\u9884\u8ba2\u5e76\u4e14\u4e0d\u76f8\u4ea4\uff0c\u6240\u4ee5\u6700\u5927\u7684K\u6b21\u9884\u8ba2\u662f1\u3002\n\u7b2c\u4e09\u4e2a\u65e5\u7a0b\u5b89\u6392[10,40]\u4e0e\u7b2c\u4e00\u4e2a\u65e5\u7a0b\u5b89\u6392\u76f8\u4ea4\uff0c\u6700\u9ad8\u7684K\u6b21\u9884\u8ba2\u4e3a2\u3002\n\u5176\u4f59\u7684\u65e5\u7a0b\u5b89\u6392\u7684\u6700\u9ad8K\u6b21\u9884\u8ba2\u4ec5\u4e3a3\u3002\n\u8bf7\u6ce8\u610f\uff0c\u6700\u540e\u4e00\u6b21\u65e5\u7a0b\u5b89\u6392\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5c40\u90e8\u6700\u9ad8K\u6b21\u9884\u8ba2\u4e3a2\uff0c\u4f46\u7b54\u6848\u4ecd\u7136\u662f3\uff0c\u539f\u56e0\u662f\u4ece\u5f00\u59cb\u5230\u6700\u540e\uff0c\u65f6\u95f4[10,20]\uff0c[10,40]\u548c[5,15]\u4ecd\u7136\u4f1a\u5bfc\u81f43\u6b21\u9884\u8ba2\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u8c03\u7528&nbsp;<code>MyCalendar.book</code>&nbsp;\u51fd\u6570\u6700\u591a\u4e0d\u8d85\u8fc7&nbsp;<code>400</code>\u6b21\u3002</li>\n\t<li>\u8c03\u7528\u51fd\u6570&nbsp;<code>MyCalendar.book(start, end)</code>\u65f6\uff0c&nbsp;<code>start</code> \u548c&nbsp;<code>end</code> \u7684\u53d6\u503c\u8303\u56f4\u4e3a&nbsp;<code>[0, 10^9]</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u6211\u7684\u65e5\u7a0b\u5b89\u6392\u8868 III",
        "tags": [
            {
                "tag": "Segment Tree",
                "link": "segment-tree",
                "tagZh": "\u7ebf\u6bb5\u6811"
            },
            {
                "tag": "Binary Search Tree",
                "link": "binary-search-tree",
                "tagZh": "\u4e8c\u53c9\u641c\u7d22\u6811"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "733",
        "link": "flood-fill",
        "title": "Flood Fill",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "49.9%",
        "questionDescription": "<p>\r\nAn <code>image</code> is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).\r\n</p><p>\r\nGiven a coordinate <code>(sr, sc)</code> representing the starting pixel (row and column) of the flood fill, and a pixel value <code>newColor</code>, \"flood fill\" the image.\r\n</p><p>\r\nTo perform a \"flood fill\", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on.  Replace the color of all of the aforementioned pixels with the newColor.\r\n</p><p>\r\nAt the end, return the modified image.\r\n</p>\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nimage = [[1,1,1],[1,1,0],[1,0,1]]\r\nsr = 1, sc = 1, newColor = 2\r\n<b>Output:</b> [[2,2,2],[2,2,0],[2,0,1]]\r\n<b>Explanation:</b> \r\nFrom the center of the image (with position (sr, sc) = (1, 1)), all pixels connected \r\nby a path of the same color as the starting pixel are colored with the new color.\r\nNote the bottom corner is not colored 2, because it is not 4-directionally connected\r\nto the starting pixel.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>image</code> and <code>image[0]</code> will be in the range <code>[1, 50]</code>.</li>\r\n<li>The given starting pixel will satisfy <code>0 <= sr < image.length</code> and <code>0 <= sc < image[0].length</code>.</li>\r\n<li>The value of each color in <code>image[i][j]</code> and <code>newColor</code> will be an integer in <code>[0, 65535]</code>.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u6709\u4e00\u5e45\u4ee5\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4\u8868\u793a\u7684\u56fe\u753b\uff0c\u6bcf\u4e00\u4e2a\u6574\u6570\u8868\u793a\u8be5\u56fe\u753b\u7684\u50cf\u7d20\u503c\u5927\u5c0f\uff0c\u6570\u503c\u5728 0 \u5230 65535 \u4e4b\u95f4\u3002</p>\n\n<p>\u7ed9\u4f60\u4e00\u4e2a\u5750\u6807&nbsp;<code>(sr, sc)</code>&nbsp;\u8868\u793a\u56fe\u50cf\u6e32\u67d3\u5f00\u59cb\u7684\u50cf\u7d20\u503c\uff08\u884c \uff0c\u5217\uff09\u548c\u4e00\u4e2a\u65b0\u7684\u989c\u8272\u503c&nbsp;<code>newColor</code>\uff0c\u8ba9\u4f60\u91cd\u65b0\u4e0a\u8272\u8fd9\u5e45\u56fe\u50cf\u3002</p>\n\n<p>\u4e3a\u4e86\u5b8c\u6210\u4e0a\u8272\u5de5\u4f5c\uff0c\u4ece\u521d\u59cb\u5750\u6807\u5f00\u59cb\uff0c\u8bb0\u5f55\u521d\u59cb\u5750\u6807\u7684\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u4e0a\u50cf\u7d20\u503c\u4e0e\u521d\u59cb\u5750\u6807\u76f8\u540c\u7684\u76f8\u8fde\u50cf\u7d20\u70b9\uff0c\u63a5\u7740\u518d\u8bb0\u5f55\u8fd9\u56db\u4e2a\u65b9\u5411\u4e0a\u7b26\u5408\u6761\u4ef6\u7684\u50cf\u7d20\u70b9\u4e0e\u4ed6\u4eec\u5bf9\u5e94\u56db\u4e2a\u65b9\u5411\u4e0a\u50cf\u7d20\u503c\u4e0e\u521d\u59cb\u5750\u6807\u76f8\u540c\u7684\u76f8\u8fde\u50cf\u7d20\u70b9\uff0c&hellip;&hellip;\uff0c\u91cd\u590d\u8be5\u8fc7\u7a0b\u3002\u5c06\u6240\u6709\u6709\u8bb0\u5f55\u7684\u50cf\u7d20\u70b9\u7684\u989c\u8272\u503c\u6539\u4e3a\u65b0\u7684\u989c\u8272\u503c\u3002</p>\n\n<p>\u6700\u540e\u8fd4\u56de\u7ecf\u8fc7\u4e0a\u8272\u6e32\u67d3\u540e\u7684\u56fe\u50cf\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nimage = [[1,1,1],[1,1,0],[1,0,1]]\nsr = 1, sc = 1, newColor = 2\n<strong>\u8f93\u51fa:</strong> [[2,2,2],[2,2,0],[2,0,1]]\n<strong>\u89e3\u6790:</strong> \n\u5728\u56fe\u50cf\u7684\u6b63\u4e2d\u95f4\uff0c(\u5750\u6807(sr,sc)=(1,1)),\n\u5728\u8def\u5f84\u4e0a\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u50cf\u7d20\u70b9\u7684\u989c\u8272\u90fd\u88ab\u66f4\u6539\u62102\u3002\n\u6ce8\u610f\uff0c\u53f3\u4e0b\u89d2\u7684\u50cf\u7d20\u6ca1\u6709\u66f4\u6539\u4e3a2\uff0c\n\u56e0\u4e3a\u5b83\u4e0d\u662f\u5728\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u4e0a\u4e0e\u521d\u59cb\u70b9\u76f8\u8fde\u7684\u50cf\u7d20\u70b9\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>image</code> \u548c&nbsp;<code>image[0]</code>&nbsp;\u7684\u957f\u5ea6\u5728\u8303\u56f4&nbsp;<code>[1, 50]</code> \u5185\u3002</li>\n\t<li>\u7ed9\u51fa\u7684\u521d\u59cb\u70b9\u5c06\u6ee1\u8db3&nbsp;<code>0 &lt;= sr &lt; image.length</code> \u548c&nbsp;<code>0 &lt;= sc &lt; image[0].length</code>\u3002</li>\n\t<li><code>image[i][j]</code> \u548c&nbsp;<code>newColor</code>&nbsp;\u8868\u793a\u7684\u989c\u8272\u503c\u5728\u8303\u56f4&nbsp;<code>[0, 65535]</code>\u5185\u3002</li>\n</ul>\n",
        "titleZh": "\u56fe\u50cf\u6e32\u67d3",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Bloomberg",
            "Uber",
            "Snapchat",
            "Zillow"
        ]
    },
    {
        "leetId": "734",
        "link": "sentence-similarity",
        "title": "Sentence Similarity",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "37",
        "questionDescription": "\n<p>Given two sentences <code>words1, words2</code> (each represented as an array of strings), and a list of similar word pairs <code>pairs</code>, determine if two sentences are similar.\n</p><p>\nFor example, \"great acting skills\" and \"fine drama talent\" are similar, if the similar word pairs are <code>pairs = [[\"great\", \"fine\"],\n [\"acting\",\"drama\"], [\"skills\",\"talent\"]]</code>.\n</p><p>\nNote that the similarity relation is not transitive. For example, if \"great\" and \"fine\" are similar, and \"fine\" and \"good\" are similar, \"great\" and \"good\" are <b>not</b> necessarily similar.\n</p><p>\nHowever, similarity is symmetric.  For example, \"great\" and \"fine\" being similar is the same as \"fine\" and \"great\" being similar.\n</p><p>\nAlso, a word is always similar with itself.  For example, the sentences <code>words1 = [\"great\"], words2 = [\"great\"], pairs = []</code> are similar, even though there are no specified similar word pairs.\n</p><p>\nFinally, sentences can only be similar if they have the same number of words.  So a sentence like <code>words1 = [\"great\"]</code> can never be similar to <code>words2 = [\"doubleplus\",\"good\"]</code>.\n</p>\n<p><b>Note:</b>\n</p><li>The length of <code>words1</code> and <code>words2</code> will not exceed <code>1000</code>.</li>\n<li>The length of <code>pairs</code> will not exceed <code>2000</code>.</li>\n<li>The length of each <code>pairs[i]</code> will be <code>2</code>.</li>\n<li>The length of each <code>words[i]</code> and <code>pairs[i][j]</code> will be in the range <code>[1, 20]</code>.</li>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given two sentences <code>words1, words2</code> (each represented as an array of strings), and a list of similar word pairs <code>pairs</code>, determine if two sentences are similar.\n</p><p>\nFor example, \"great acting skills\" and \"fine drama talent\" are similar, if the similar word pairs are <code>pairs = [[\"great\", \"fine\"],\n [\"acting\",\"drama\"], [\"skills\",\"talent\"]]</code>.\n</p><p>\nNote that the similarity relation is not transitive. For example, if \"great\" and \"fine\" are similar, and \"fine\" and \"good\" are similar, \"great\" and \"good\" are <b>not</b> necessarily similar.\n</p><p>\nHowever, similarity is symmetric.  For example, \"great\" and \"fine\" being similar is the same as \"fine\" and \"great\" being similar.\n</p><p>\nAlso, a word is always similar with itself.  For example, the sentences <code>words1 = [\"great\"], words2 = [\"great\"], pairs = []</code> are similar, even though there are no specified similar word pairs.\n</p><p>\nFinally, sentences can only be similar if they have the same number of words.  So a sentence like <code>words1 = [\"great\"]</code> can never be similar to <code>words2 = [\"doubleplus\",\"good\"]</code>.\n</p>\n<p><b>Note:</b>\n</p><li>The length of <code>words1</code> and <code>words2</code> will not exceed <code>1000</code>.</li>\n<li>The length of <code>pairs</code> will not exceed <code>2000</code>.</li>\n<li>The length of each <code>pairs[i]</code> will be <code>2</code>.</li>\n<li>The length of each <code>words[i]</code> and <code>pairs[i][j]</code> will be in the range <code>[1, 20]</code>.</li>\n<p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "735",
        "link": "asteroid-collision",
        "title": "Asteroid Collision",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "30.5%",
        "questionDescription": "<p>\r\nWe are given an array <code>asteroids</code> of integers representing asteroids in a row.\r\n</p><p>\r\nFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left).  Each asteroid moves at the same speed.\r\n</p><p>\r\nFind out the state of the asteroids after all collisions.  If two asteroids meet, the smaller one will explode.  If both are the same size, both will explode.  Two asteroids moving in the same direction will never meet.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nasteroids = [5, 10, -5]\r\n<b>Output:</b> [5, 10]\r\n<b>Explanation:</b> \r\nThe 10 and -5 collide resulting in 10.  The 5 and 10 never collide.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nasteroids = [8, -8]\r\n<b>Output:</b> []\r\n<b>Explanation:</b> \r\nThe 8 and -8 collide exploding each other.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nasteroids = [10, 2, -5]\r\n<b>Output:</b> [10]\r\n<b>Explanation:</b> \r\nThe 2 and -5 collide resulting in -5.  The 10 and -5 collide resulting in 10.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 4:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nasteroids = [-2, -1, 1, 2]\r\n<b>Output:</b> [-2, -1, 1, 2]\r\n<b>Explanation:</b> \r\nThe -2 and -1 are moving left, while the 1 and 2 are moving right.\r\nAsteroids moving the same direction never meet, so no asteroids will meet each other.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The length of <code>asteroids</code> will be at most <code>10000</code>.</li>\r\n<li>Each asteroid will be a non-zero integer in the range <code>[-1000, 1000].</code>.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>asteroids</code>\uff0c\u8868\u793a\u5728\u540c\u4e00\u884c\u7684\u884c\u661f\u3002</p>\n\n<p>\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u5176\u7edd\u5bf9\u503c\u8868\u793a\u884c\u661f\u7684\u5927\u5c0f\uff0c\u6b63\u8d1f\u8868\u793a\u884c\u661f\u7684\u79fb\u52a8\u65b9\u5411\uff08\u6b63\u8868\u793a\u5411\u53f3\u79fb\u52a8\uff0c\u8d1f\u8868\u793a\u5411\u5de6\u79fb\u52a8\uff09\u3002\u6bcf\u4e00\u9897\u884c\u661f\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u79fb\u52a8\u3002</p>\n\n<p>\u627e\u51fa\u78b0\u649e\u540e\u5269\u4e0b\u7684\u6240\u6709\u884c\u661f\u3002\u78b0\u649e\u89c4\u5219\uff1a\u4e24\u4e2a\u884c\u661f\u76f8\u4e92\u78b0\u649e\uff0c\u8f83\u5c0f\u7684\u884c\u661f\u4f1a\u7206\u70b8\u3002\u5982\u679c\u4e24\u9897\u884c\u661f\u5927\u5c0f\u76f8\u540c\uff0c\u5219\u4e24\u9897\u884c\u661f\u90fd\u4f1a\u7206\u70b8\u3002\u4e24\u9897\u79fb\u52a8\u65b9\u5411\u76f8\u540c\u7684\u884c\u661f\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\u78b0\u649e\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nasteroids = [5, 10, -5]\n<strong>\u8f93\u51fa:</strong> [5, 10]\n<strong>\u89e3\u91ca:</strong> \n10 \u548c -5 \u78b0\u649e\u540e\u53ea\u5269\u4e0b 10\u3002 5 \u548c 10 \u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\u78b0\u649e\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nasteroids = [8, -8]\n<strong>\u8f93\u51fa:</strong> []\n<strong>\u89e3\u91ca:</strong> \n8 \u548c -8 \u78b0\u649e\u540e\uff0c\u4e24\u8005\u90fd\u53d1\u751f\u7206\u70b8\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nasteroids = [10, 2, -5]\n<strong>\u8f93\u51fa:</strong> [10]\n<strong>\u89e3\u91ca:</strong> \n2 \u548c -5 \u53d1\u751f\u78b0\u649e\u540e\u5269\u4e0b -5\u300210 \u548c -5 \u53d1\u751f\u78b0\u649e\u540e\u5269\u4e0b 10\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nasteroids = [-2, -1, 1, 2]\n<strong>\u8f93\u51fa:</strong> [-2, -1, 1, 2]\n<strong>\u89e3\u91ca:</strong> \n-2 \u548c -1 \u5411\u5de6\u79fb\u52a8\uff0c\u800c 1 \u548c 2 \u5411\u53f3\u79fb\u52a8\u3002\n\u7531\u4e8e\u79fb\u52a8\u65b9\u5411\u76f8\u540c\u7684\u884c\u661f\u4e0d\u4f1a\u53d1\u751f\u78b0\u649e\uff0c\u6240\u4ee5\u6700\u7ec8\u6ca1\u6709\u884c\u661f\u53d1\u751f\u78b0\u649e\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u6570\u7ec4&nbsp;<code>asteroids</code> \u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7&nbsp;<code>10000</code>\u3002</li>\n\t<li>\u6bcf\u4e00\u9897\u884c\u661f\u7684\u5927\u5c0f\u90fd\u662f\u975e\u96f6\u6574\u6570\uff0c\u8303\u56f4\u662f&nbsp;<code>[-1000, 1000]</code>&nbsp;\u3002</li>\n</ul>\n",
        "titleZh": "\u884c\u661f\u78b0\u649e",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            }
        ],
        "companies": [
            "Microsoft",
            "Uber",
            "eBay",
            "Lyft"
        ]
    },
    {
        "leetId": "736",
        "link": "parse-lisp-expression",
        "title": "Parse Lisp Expression",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "40.3%",
        "questionDescription": "<p>\r\nYou are given a string <code>expression</code> representing a Lisp-like expression to return the integer value of.\r\n</p><p>\r\nThe syntax for these expressions is given as follows.\r\n</p><p>\r\n<li>An expression is either an integer, a let-expression, an add-expression, a mult-expression, or an assigned variable.  Expressions always evaluate to a single integer.</li>\r\n</p><p>\r\n<li>(An integer could be positive or negative.)</li>\r\n</p><p>\r\n<li>A let-expression takes the form <code>(let v1 e1 v2 e2 ... vn en expr)</code>, where <code>let</code> is always the string <code>\"let\"</code>, then there are 1 or more pairs of alternating variables and expressions, meaning that the first variable <code>v1</code> is assigned the value of the expression <code>e1</code>, the second variable <code>v2</code> is assigned the value of the expression <code>e2</code>, and so on <b>sequentially</b>; and then the value of this let-expression is the value of the expression <code>expr</code>.</li>\r\n</p><p>\r\n<li>An add-expression takes the form <code>(add e1 e2)</code> where <code>add</code> is always the string <code>\"add\"</code>, there are always two expressions <code>e1, e2</code>, and this expression evaluates to the addition of the evaluation of <code>e1</code> and the evaluation of <code>e2</code>.</li>\r\n</p><p>\r\n<li>A mult-expression takes the form <code>(mult e1 e2)</code> where <code>mult</code> is always the string <code>\"mult\"</code>, there are always two expressions <code>e1, e2</code>, and this expression evaluates to the multiplication of the evaluation of <code>e1</code> and the evaluation of <code>e2</code>.</li>\r\n</p><p>\r\n<li>For the purposes of this question, we will use a smaller subset of variable names.  A variable starts with a lowercase letter, then zero or more lowercase letters or digits.  Additionally for your convenience, the names \"add\", \"let\", or \"mult\" are protected and will never be used as variable names.</li>\r\n</p><p>\r\n<li>Finally, there is the concept of scope.  When an expression of a variable name is evaluated, <b>within the context of that evaluation</b>, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially.  It is guaranteed that every expression is legal.  Please see the examples for more details on scope.</li>\r\n</p>\r\n\r\n<p><b>Evaluation Examples:</b><br />\r\n<pre>\r\n<b>Input:</b> (add 1 2)\r\n<b>Output:</b> 3\r\n\r\n<b>Input:</b> (mult 3 (add 2 3))\r\n<b>Output:</b> 15\r\n\r\n<b>Input:</b> (let x 2 (mult x 5))\r\n<b>Output:</b> 10\r\n\r\n<b>Input:</b> (let x 2 (mult x (let x 3 y 4 (add x y))))\r\n<b>Output:</b> 14\r\n<b>Explanation:</b> In the expression (add x y), when checking for the value of the variable x,\r\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\r\nSince x = 3 is found first, the value of x is 3.\r\n\r\n<b>Input:</b> (let x 3 x 2 x)\r\n<b>Output:</b> 2\r\n<b>Explanation:</b> Assignment in let statements is processed sequentially.\r\n\r\n<b>Input:</b> (let x 1 y 2 x (add x y) (add x y))\r\n<b>Output:</b> 5\r\n<b>Explanation:</b> The first (add x y) evaluates as 3, and is assigned to x.\r\nThe second (add x y) evaluates as 3+2 = 5.\r\n\r\n<b>Input:</b> (let x 2 (add (let x 3 (let x 4 x)) x))\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> Even though (let x 4 x) has a deeper scope, it is outside the context\r\nof the final x in the add-expression.  That final x will equal 2.\r\n\r\n<b>Input:</b> (let a1 3 b2 (add a1 1) b2) \r\n<b>Output</b> 4\r\n<b>Explanation:</b> Variable names can contain digits after the first character.\r\n\r\n</pre>\r\n\r\n<p><b>Note:</b>\r\n<li>The given string <code>expression</code> is well formatted: There are no leading or trailing spaces, there is only a single space separating different components of the string, and no space between adjacent parentheses.  The expression is guaranteed to be legal and evaluate to an integer.</li>\r\n<li>The length of <code>expression</code> is at most 2000.  (It is also non-empty, as that would not be a legal expression.)</li>\r\n<li>The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7c7b\u4f3c Lisp \u8bed\u53e5\u7684\u8868\u8fbe\u5f0f <code>expression</code>\uff0c\u6c42\u51fa\u5176\u8ba1\u7b97\u7ed3\u679c\u3002</p>\n\n<p>\u8868\u8fbe\u5f0f\u8bed\u6cd5\u5982\u4e0b\u6240\u793a:</p>\n\n<ul>\n\t<li>\u8868\u8fbe\u5f0f\u53ef\u4ee5\u4e3a\u6574\u6570\uff0clet \u8bed\u6cd5\uff0cadd \u8bed\u6cd5\uff0cmult \u8bed\u6cd5\u3002\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u603b\u662f\u4e00\u4e2a\u6574\u6570\u3002</li>\n\t<li>(\u6574\u6570\u53ef\u4ee5\u662f\u6b63\u6574\u6570\u3001\u8d1f\u6574\u6570\u30010)</li>\n\t<li>let \u8bed\u6cd5\u8868\u793a\u4e3a&nbsp;<code>(let v1 e1 v2 e2 ... vn en expr)</code>,&nbsp;\u5176\u4e2d&nbsp;<code>let</code>\u8bed\u6cd5\u603b\u662f\u4ee5\u5b57\u7b26\u4e32&nbsp;<code>&quot;let&quot;</code>\u6765\u8868\u793a\uff0c\u63a5\u4e0b\u6765\u4f1a\u8ddf\u968f\u4e00\u4e2a\u6216\u591a\u4e2a\u4ea4\u66ff\u53d8\u91cf\u6216\u8868\u8fbe\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u53d8\u91cf&nbsp;<code>v1</code>\u88ab\u5206\u914d\u4e3a\u8868\u8fbe\u5f0f&nbsp;<code>e1</code>&nbsp;\u7684\u503c\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf&nbsp;<code>v2</code>&nbsp;\u88ab\u5206\u914d\u4e3a\u8868\u8fbe\u5f0f&nbsp;<code>e2</code>&nbsp;\u7684\u503c\uff0c<strong>\u4ee5\u6b64\u7c7b\u63a8</strong>\uff1b\u6700\u7ec8 let \u8bed\u6cd5\u7684\u503c\u4e3a&nbsp;<code>expr</code>\u8868\u8fbe\u5f0f\u7684\u503c\u3002</li>\n\t<li>add\u8bed\u6cd5\u8868\u793a\u4e3a&nbsp;<code>(add e1 e2)</code>\uff0c\u5176\u4e2d&nbsp;<code>add</code>&nbsp;\u8bed\u6cd5\u603b\u662f\u4ee5\u5b57\u7b26\u4e32&nbsp;<code>&quot;add&quot;</code>\u6765\u8868\u793a\uff0c\u8be5\u8bed\u6cd5\u603b\u662f\u6709\u4e24\u4e2a\u8868\u8fbe\u5f0f<code>e1</code><font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\"><span style=\"background-color:#ffffff; font-size:14px\">\u3001</span></font><code>e2</code>, \u8be5\u8bed\u6cd5\u7684\u6700\u7ec8\u7ed3\u679c\u662f&nbsp;<code>e1</code> \u8868\u8fbe\u5f0f\u7684\u503c\u4e0e&nbsp;<code>e2</code>&nbsp;\u8868\u8fbe\u5f0f\u7684\u503c\u4e4b<strong>\u548c</strong>\u3002</li>\n\t<li>mult\u8bed\u6cd5\u8868\u793a\u4e3a&nbsp;<code>(mult e1 e2)</code>&nbsp;\uff0c\u5176\u4e2d&nbsp;<code>mult</code>&nbsp;\u8bed\u6cd5\u603b\u662f\u4ee5\u5b57\u7b26\u4e32<code>&quot;mult&quot;</code>\u8868\u793a\uff0c \u8be5\u8bed\u6cd5\u603b\u662f\u6709\u4e24\u4e2a\u8868\u8fbe\u5f0f <code>e1</code>\u3001<code>e2</code>\uff0c\u8be5\u8bed\u6cd5\u7684\u6700\u7ec8\u7ed3\u679c\u662f&nbsp;<code>e1</code> \u8868\u8fbe\u5f0f\u7684\u503c\u4e0e&nbsp;<code>e2</code>&nbsp;\u8868\u8fbe\u5f0f\u7684\u503c\u4e4b<strong>\u79ef</strong>\u3002</li>\n\t<li>\u5728\u8be5\u9898\u76ee\u4e2d\uff0c\u53d8\u91cf\u7684\u547d\u540d\u4ee5\u5c0f\u5199\u5b57\u7b26\u5f00\u59cb\uff0c\u4e4b\u540e\u8ddf\u968f0\u4e2a\u6216\u591a\u4e2a\u5c0f\u5199\u5b57\u7b26\u6216\u6570\u5b57\u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c&quot;add&quot;\uff0c&quot;let&quot;\uff0c&quot;mult&quot;\u4f1a\u88ab\u5b9a\u4e49\u4e3a&quot;\u5173\u952e\u5b57&quot;\uff0c\u4e0d\u4f1a\u5728\u8868\u8fbe\u5f0f\u7684\u53d8\u91cf\u547d\u540d\u4e2d\u51fa\u73b0\u3002</li>\n\t<li>\u6700\u540e\uff0c\u8981\u8bf4\u4e00\u4e0b\u8303\u56f4\u7684\u6982\u5ff5\u3002\u5728\u505a\u8ba1\u7b97\u65f6\uff0c<strong>\u9700\u8981\u6ce8\u610f\u4f18\u5148\u7ea7</strong>\uff0c\u5728\u6700\u5185\u5c42(\u6839\u636e\u62ec\u53f7)\u7684\u8868\u8fbe\u5f0f\u7684\u503c\u5e94\u8be5\u5148\u8ba1\u7b97,\u7136\u540e\u4f9d\u6b21\u8ba1\u7b97\u5916\u5c42\u7684\u8868\u8fbe\u5f0f\u3002\u6211\u4eec\u5c06\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u7684\u8868\u8fbe\u5f0f\u90fd\u662f\u5408\u6cd5\u7684\u3002\u6709\u5173\u8303\u56f4\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u793a\u4f8b\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> (add 1 2)\n<strong>\u8f93\u51fa:</strong> 3\n\n<strong>\u8f93\u5165:</strong> (mult 3 (add 2 3))\n<strong>\u8f93\u51fa:</strong> 15\n\n<strong>\u8f93\u5165:</strong> (let x 2 (mult x 5))\n<strong>\u8f93\u51fa:</strong> 10\n\n<strong>\u8f93\u5165:</strong> (let x 2 (mult x (let x 3 y 4 (add x y))))\n<strong>\u8f93\u51fa:</strong> 14\n<strong>\u89e3\u91ca:</strong> \n\u8868\u8fbe\u5f0f (add x y), \u5728\u83b7\u53d6 x \u503c\u65f6, \u6211\u4eec\u5e94\u5f53\u7531\u6700\u5185\u5c42\u4f9d\u6b21\u5411\u5916\u8ba1\u7b97, \u9996\u5148\u9047\u5230\u4e86 x=3, \u6240\u4ee5\u6b64\u5904\u7684 x \u503c\u662f 3.\n\n\n<strong>\u8f93\u5165:</strong> (let x 3 x 2 x)\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> let \u8bed\u53e5\u4e2d\u7684\u8d4b\u503c\u8fd0\u7b97\u6309\u987a\u5e8f\u5904\u7406\u5373\u53ef\n\n<strong>\u8f93\u5165:</strong> (let x 1 y 2 x (add x y) (add x y))\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \n\u7b2c\u4e00\u4e2a (add x y) \u8ba1\u7b97\u7ed3\u679c\u662f 3\uff0c\u5e76\u4e14\u5c06\u6b64\u503c\u8d4b\u7ed9\u4e86 x \u3002\n\u7b2c\u4e8c\u4e2a (add x y) \u8ba1\u7b97\u7ed3\u679c\u5c31\u662f 3+2 = 5 \u3002\n\n<strong>\u8f93\u5165:</strong> (let x 2 (add (let x 3 (let x 4 x)) x))\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> \n(let x 4 x) \u4e2d\u7684 x \u7684\u4f5c\u7528\u8303\u56f4\u4ec5\u5728()\u4e4b\u5185\u3002\u6240\u4ee5\u6700\u7ec8\u505a\u52a0\u6cd5\u64cd\u4f5c\u65f6\uff0cx \u7684\u503c\u662f 2 \u3002\n\n<strong>\u8f93\u5165:</strong> (let a1 3 b2 (add a1 1) b2) \n<strong>\u8f93\u51fa: </strong>4\n<strong>\u89e3\u91ca:</strong> \n\u53d8\u91cf\u547d\u540d\u65f6\u53ef\u4ee5\u5728\u7b2c\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\u540e\u8ddf\u968f\u6570\u5b57.\n\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u6211\u4eec\u7ed9\u5b9a\u7684&nbsp;<code>expression</code>&nbsp;\u8868\u8fbe\u5f0f\u90fd\u662f\u683c\u5f0f\u5316\u540e\u7684\uff1a\u8868\u8fbe\u5f0f\u524d\u540e\u6ca1\u6709\u591a\u4f59\u7684\u7a7a\u683c\uff0c\u8868\u8fbe\u5f0f\u7684\u4e0d\u540c\u90e8\u5206(\u5173\u952e\u5b57\u3001\u53d8\u91cf\u3001\u8868\u8fbe\u5f0f)\u4e4b\u95f4\u4ec5\u4f7f\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u5272\uff0c\u5e76\u4e14\u5728\u76f8\u90bb\u62ec\u53f7\u4e4b\u95f4\u4e5f\u6ca1\u6709\u7a7a\u683c\u3002\u6211\u4eec\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u5747\u4e3a\u5408\u6cd5\u7684\u4e14\u6700\u7ec8\u7ed3\u679c\u4e3a\u6574\u6570\u3002</li>\n\t<li>\u6211\u4eec\u7ed9\u5b9a\u7684\u8868\u8fbe\u5f0f\u957f\u5ea6\u6700\u591a\u4e3a 2000&nbsp;(\u8868\u8fbe\u5f0f\u4e5f\u4e0d\u4f1a\u4e3a\u7a7a\uff0c\u56e0\u4e3a\u90a3\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f)\u3002</li>\n\t<li>\u6700\u7ec8\u7684\u7ed3\u679c\u548c\u4e2d\u95f4\u7684\u8ba1\u7b97\u7ed3\u679c\u90fd\u5c06\u662f\u4e00\u4e2a 32 \u4f4d\u6574\u6570\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n",
        "titleZh": "Lisp \u8bed\u6cd5\u89e3\u6790",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Apple",
            "Affirm"
        ]
    },
    {
        "leetId": "737",
        "link": "sentence-similarity-ii",
        "title": "Sentence Similarity II",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "37",
        "questionDescription": "\n<p>Given two sentences <code>words1, words2</code> (each represented as an array of strings), and a list of similar word pairs <code>pairs</code>, determine if two sentences are similar.\n</p><p>\nFor example, <code>words1 = [\"great\", \"acting\", \"skills\"]</code> and <code>words2 = [\"fine\", \"drama\", \"talent\"]</code> are similar, if the similar word pairs are <code>pairs = [[\"great\", \"good\"], [\"fine\", \"good\"], \n [\"acting\",\"drama\"], [\"skills\",\"talent\"]]</code>.\n</p><p>\nNote that the similarity relation <b>is</b> transitive. For example, if \"great\" and \"good\" are similar, and \"fine\" and \"good\" are similar, then \"great\" and \"fine\" <b>are similar</b>.\n</p><p>\nSimilarity is also symmetric.  For example, \"great\" and \"fine\" being similar is the same as \"fine\" and \"great\" being similar.\n</p><p>\nAlso, a word is always similar with itself.  For example, the sentences <code>words1 = [\"great\"], words2 = [\"great\"], pairs = []</code> are similar, even though there are no specified similar word pairs.\n</p><p>\nFinally, sentences can only be similar if they have the same number of words.  So a sentence like <code>words1 = [\"great\"]</code> can never be similar to <code>words2 = [\"doubleplus\",\"good\"]</code>.\n</p>\n<p><b>Note:</b>\n</p><li>The length of <code>words1</code> and <code>words2</code> will not exceed <code>1000</code>.</li>\n<li>The length of <code>pairs</code> will not exceed <code>2000</code>.</li>\n<li>The length of each <code>pairs[i]</code> will be <code>2</code>.</li>\n<li>The length of each <code>words[i]</code> and <code>pairs[i][j]</code> will be in the range <code>[1, 20]</code>.</li>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given two sentences <code>words1, words2</code> (each represented as an array of strings), and a list of similar word pairs <code>pairs</code>, determine if two sentences are similar.\n</p><p>\nFor example, <code>words1 = [\"great\", \"acting\", \"skills\"]</code> and <code>words2 = [\"fine\", \"drama\", \"talent\"]</code> are similar, if the similar word pairs are <code>pairs = [[\"great\", \"good\"], [\"fine\", \"good\"], \n [\"acting\",\"drama\"], [\"skills\",\"talent\"]]</code>.\n</p><p>\nNote that the similarity relation <b>is</b> transitive. For example, if \"great\" and \"good\" are similar, and \"fine\" and \"good\" are similar, then \"great\" and \"fine\" <b>are similar</b>.\n</p><p>\nSimilarity is also symmetric.  For example, \"great\" and \"fine\" being similar is the same as \"fine\" and \"great\" being similar.\n</p><p>\nAlso, a word is always similar with itself.  For example, the sentences <code>words1 = [\"great\"], words2 = [\"great\"], pairs = []</code> are similar, even though there are no specified similar word pairs.\n</p><p>\nFinally, sentences can only be similar if they have the same number of words.  So a sentence like <code>words1 = [\"great\"]</code> can never be similar to <code>words2 = [\"doubleplus\",\"good\"]</code>.\n</p>\n<p><b>Note:</b>\n</p><li>The length of <code>words1</code> and <code>words2</code> will not exceed <code>1000</code>.</li>\n<li>The length of <code>pairs</code> will not exceed <code>2000</code>.</li>\n<li>The length of each <code>pairs[i]</code> will be <code>2</code>.</li>\n<li>The length of each <code>words[i]</code> and <code>pairs[i][j]</code> will be in the range <code>[1, 20]</code>.</li>\n<p></p>\n",
        "companies": [
            "Google",
            "Bloomberg"
        ]
    },
    {
        "leetId": "738",
        "link": "monotone-increasing-digits",
        "title": "Monotone Increasing Digits",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "37.4%",
        "questionDescription": "<p>\r\nGiven a non-negative integer <code>N</code>, find the largest number that is less than or equal to <code>N</code> with monotone increasing digits.\r\n</p><p>\r\n(Recall that an integer has <i>monotone increasing digits</i> if and only if each pair of adjacent digits <code>x</code> and <code>y</code> satisfy <code>x <= y</code>.)\r\n</p><p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> N = 10\r\n<b>Output:</b> 9\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> N = 1234\r\n<b>Output:</b> 1234\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> N = 332\r\n<b>Output:</b> 299\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<code>N</code> is an integer in the range <code>[0, 10^9]</code>.\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570&nbsp;<code>N</code>\uff0c\u627e\u51fa\u5c0f\u4e8e\u6216\u7b49\u4e8e&nbsp;<code>N</code>&nbsp;\u7684\u6700\u5927\u7684\u6574\u6570\uff0c\u540c\u65f6\u8fd9\u4e2a\u6574\u6570\u9700\u8981\u6ee1\u8db3\u5176\u5404\u4e2a\u4f4d\u6570\u4e0a\u7684\u6570\u5b57\u662f\u5355\u8c03\u9012\u589e\u3002</p>\n\n<p>\uff08\u5f53\u4e14\u4ec5\u5f53\u6bcf\u4e2a\u76f8\u90bb\u4f4d\u6570\u4e0a\u7684\u6570\u5b57&nbsp;<code>x</code>&nbsp;\u548c&nbsp;<code>y</code>&nbsp;\u6ee1\u8db3&nbsp;<code>x &lt;= y</code>&nbsp;\u65f6\uff0c\u6211\u4eec\u79f0\u8fd9\u4e2a\u6574\u6570\u662f\u5355\u8c03\u9012\u589e\u7684\u3002\uff09</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> N = 10\n<strong>\u8f93\u51fa:</strong> 9\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> N = 1234\n<strong>\u8f93\u51fa:</strong> 1234\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> N = 332\n<strong>\u8f93\u51fa:</strong> 299\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong> <code>N</code>&nbsp;\u662f\u5728&nbsp;<code>[0, 10^9]</code>&nbsp;\u8303\u56f4\u5185\u7684\u4e00\u4e2a\u6574\u6570\u3002</p>\n",
        "titleZh": "\u5355\u8c03\u9012\u589e\u7684\u6570\u5b57",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "739",
        "link": "daily-temperatures",
        "title": "Daily Temperatures",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "58.4%",
        "questionDescription": "<p>\r\nGiven a list of daily temperatures <code>T</code>, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature.  If there is no future day for which this is possible, put <code>0</code> instead.\r\n</p><p>\r\nFor example, given the list of temperatures <code>T = [73, 74, 75, 71, 69, 72, 76, 73]</code>, your output should be <code>[1, 1, 4, 2, 1, 1, 0, 0]</code>.\r\n</p>\r\n\r\n<p><b>Note:</b>\r\nThe length of <code>temperatures</code> will be in the range <code>[1, 30000]</code>.\r\nEach temperature will be an integer in the range <code>[30, 100]</code>.\r\n</p>",
        "questionDescriptionZh": "<p>\u6839\u636e\u6bcf\u65e5 <code>\u6c14\u6e29</code> \u5217\u8868\uff0c\u8bf7\u91cd\u65b0\u751f\u6210\u4e00\u4e2a\u5217\u8868\uff0c\u5bf9\u5e94\u4f4d\u7f6e\u7684\u8f93\u5165\u662f\u4f60\u9700\u8981\u518d\u7b49\u5f85\u591a\u4e45\u6e29\u5ea6\u624d\u4f1a\u5347\u9ad8\u7684\u5929\u6570\u3002\u5982\u679c\u4e4b\u540e\u90fd\u4e0d\u4f1a\u5347\u9ad8\uff0c\u8bf7\u8f93\u5165&nbsp;<code>0</code> \u6765\u4ee3\u66ff\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868&nbsp;<code>temperatures = [73, 74, 75, 71, 69, 72, 76, 73]</code>\uff0c\u4f60\u7684\u8f93\u51fa\u5e94\u8be5\u662f&nbsp;<code>[1, 1, 4, 2, 1, 1, 0, 0]</code>\u3002</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong><code>\u6c14\u6e29</code> \u5217\u8868\u957f\u5ea6\u7684\u8303\u56f4\u662f&nbsp;<code>[1, 30000]</code>\u3002\u6bcf\u4e2a\u6c14\u6e29\u7684\u503c\u7684\u90fd\u662f&nbsp;<code>[30, 100]</code>&nbsp;\u8303\u56f4\u5185\u7684\u6574\u6570\u3002</p>\n",
        "titleZh": "\u6bcf\u65e5\u6e29\u5ea6",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Yahoo"
        ]
    },
    {
        "leetId": "740",
        "link": "delete-and-earn",
        "title": "Delete and Earn",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "46.7%",
        "questionDescription": "<p>Given an array <code>nums</code> of integers, you can perform operations on the array.</p>\r\n\r\n<p>In each operation, you pick any <code>nums[i]</code> and delete it to earn <code>nums[i]</code> points. After, you must delete <b>every</b> element equal to <code>nums[i] - 1</code> or <code>nums[i] + 1</code>.</p>\r\n\r\n<p>You start with 0 points. Return the maximum number of points you can earn by applying such operations.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> nums = [3, 4, 2]\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> \r\nDelete 4 to earn 4 points, consequently 3 is also deleted.\r\nThen, delete 2 to earn 2 points. 6 total points are earned.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> nums = [2, 2, 3, 3, 3, 4]\r\n<b>Output:</b> 9\r\n<b>Explanation:</b> \r\nDelete 3 to earn 3 points, deleting both 2&#39;s and the 4.\r\nThen, delete 3 again to earn 3 points, and 3 again to earn 3 points.\r\n9 total points are earned.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>The length of <code>nums</code> is at most <code>20000</code>.</li>\r\n\t<li>Each element <code>nums[i]</code> is an integer in the range <code>[1, 10000]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>nums</code>&nbsp;\uff0c\u4f60\u53ef\u4ee5\u5bf9\u5b83\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\u3002</p>\n\n<p>\u6bcf\u6b21\u64cd\u4f5c\u4e2d\uff0c\u9009\u62e9\u4efb\u610f\u4e00\u4e2a&nbsp;<code>nums[i]</code>&nbsp;\uff0c\u5220\u9664\u5b83\u5e76\u83b7\u5f97&nbsp;<code>nums[i]</code>&nbsp;\u7684\u70b9\u6570\u3002\u4e4b\u540e\uff0c\u4f60\u5fc5\u987b\u5220\u9664<strong>\u6bcf\u4e2a</strong>\u7b49\u4e8e&nbsp;<code>nums[i] - 1</code>&nbsp;\u6216&nbsp;<code>nums[i] + 1</code>&nbsp;\u7684\u5143\u7d20\u3002</p>\n\n<p>\u5f00\u59cb\u4f60\u62e5\u6709 0 \u4e2a\u70b9\u6570\u3002\u8fd4\u56de\u4f60\u80fd\u901a\u8fc7\u8fd9\u4e9b\u64cd\u4f5c\u83b7\u5f97\u7684\u6700\u5927\u70b9\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> nums = [3, 4, 2]\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> \n\u5220\u9664 4 \u6765\u83b7\u5f97 4 \u4e2a\u70b9\u6570\uff0c\u56e0\u6b64 3 \u4e5f\u88ab\u5220\u9664\u3002\n\u4e4b\u540e\uff0c\u5220\u9664 2 \u6765\u83b7\u5f97 2 \u4e2a\u70b9\u6570\u3002\u603b\u5171\u83b7\u5f97 6 \u4e2a\u70b9\u6570\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> nums = [2, 2, 3, 3, 3, 4]\n<strong>\u8f93\u51fa:</strong> 9\n<strong>\u89e3\u91ca:</strong> \n\u5220\u9664 3 \u6765\u83b7\u5f97 3 \u4e2a\u70b9\u6570\uff0c\u63a5\u7740\u8981\u5220\u9664\u4e24\u4e2a 2 \u548c 4 \u3002\n\u4e4b\u540e\uff0c\u518d\u6b21\u5220\u9664 3 \u83b7\u5f97 3 \u4e2a\u70b9\u6570\uff0c\u518d\u6b21\u5220\u9664 3 \u83b7\u5f97 3 \u4e2a\u70b9\u6570\u3002\n\u603b\u5171\u83b7\u5f97 9 \u4e2a\u70b9\u6570\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>nums</code>\u7684\u957f\u5ea6\u6700\u5927\u4e3a<code>20000</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u6574\u6570<code>nums[i]</code>\u7684\u5927\u5c0f\u90fd\u5728<code>[1, 10000]</code>\u8303\u56f4\u5185\u3002</li>\n</ul>\n",
        "titleZh": "\u5220\u9664\u4e0e\u83b7\u5f97\u70b9\u6570",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Salesforce",
            "Zenefits",
            "Pocket Gems",
            "Akuna Capital",
            "Quip"
        ]
    },
    {
        "leetId": "741",
        "link": "cherry-pickup",
        "title": "Cherry Pickup",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "23.7%",
        "questionDescription": "<p>In a N x N <code>grid</code> representing a field of cherries, each cell is one of three possible integers.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>0 means the cell is empty, so you can pass through;</li>\r\n\t<li>1 means the cell contains a cherry, that you can pick up and pass through;</li>\r\n\t<li>-1 means the cell contains a thorn that blocks your way.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Your task is to collect maximum number of cherries possible by following the rules below:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>Starting at the position (0, 0) and reaching (N-1, N-1) by moving right or down through valid path cells (cells with value 0 or 1);</li>\r\n\t<li>After reaching (N-1, N-1), returning to (0, 0) by moving left or up through valid path cells;</li>\r\n\t<li>When passing through a path cell containing a cherry, you pick it up and the cell becomes an empty cell (0);</li>\r\n\t<li>If there is no valid path between (0, 0) and (N-1, N-1), then no cherries can be collected.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> grid =\r\n[[0, 1, -1],\r\n [1, 0, -1],\r\n [1, 1,  1]]\r\n<b>Output:</b> 5\r\n<b>Explanation:</b> \r\nThe player started at (0, 0) and went down, down, right right to reach (2, 2).\r\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\r\nThen, the player went left, up, up, left to return home, picking up one more cherry.\r\nThe total number of cherries picked up is 5, and this is the maximum possible.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li><code>grid</code> is an <code>N</code> by <code>N</code> 2D array, with <code>1 &lt;= N &lt;= 50</code>.</li>\r\n\t<li>Each <code>grid[i][j]</code> is an integer in the set <code>{-1, 0, 1}</code>.</li>\r\n\t<li>It is guaranteed that grid[0][0] and grid[N-1][N-1] are not -1.</li>\r\n\t<li>\r\n\t<p>&nbsp;</p>\r\n\t</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u4e00\u4e2aN x N\u7684\u7f51\u683c<code>(grid)</code>&nbsp;\u4ee3\u8868\u4e86\u4e00\u5757\u6a31\u6843\u5730\uff0c\u6bcf\u4e2a\u683c\u5b50\u7531\u4ee5\u4e0b\u4e09\u79cd\u6570\u5b57\u7684\u4e00\u79cd\u6765\u8868\u793a\uff1a</p>\n\n<ul>\n\t<li>0 \u8868\u793a\u8fd9\u4e2a\u683c\u5b50\u662f\u7a7a\u7684\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u7a7f\u8fc7\u5b83\u3002</li>\n\t<li>1 \u8868\u793a\u8fd9\u4e2a\u683c\u5b50\u91cc\u88c5\u7740\u4e00\u4e2a\u6a31\u6843\uff0c\u4f60\u53ef\u4ee5\u6458\u5230\u6a31\u6843\u7136\u540e\u7a7f\u8fc7\u5b83\u3002</li>\n\t<li>-1 \u8868\u793a\u8fd9\u4e2a\u683c\u5b50\u91cc\u6709\u8346\u68d8\uff0c\u6321\u7740\u4f60\u7684\u8def\u3002</li>\n</ul>\n\n<p>\u4f60\u7684\u4efb\u52a1\u662f\u5728\u9075\u5b88\u4e0b\u5217\u89c4\u5219\u7684\u60c5\u51b5\u4e0b\uff0c\u5c3d\u53ef\u80fd\u7684\u6458\u5230\u6700\u591a\u6a31\u6843\uff1a</p>\n\n<ul>\n\t<li>\u4ece\u4f4d\u7f6e&nbsp;(0, 0) \u51fa\u53d1\uff0c\u6700\u540e\u5230\u8fbe (N-1, N-1) \uff0c\u53ea\u80fd\u5411\u4e0b\u6216\u5411\u53f3\u8d70\uff0c\u5e76\u4e14\u53ea\u80fd\u7a7f\u8d8a\u6709\u6548\u7684\u683c\u5b50\uff08\u5373\u53ea\u53ef\u4ee5\u7a7f\u8fc7\u503c\u4e3a0\u6216\u80051\u7684\u683c\u5b50\uff09\uff1b</li>\n\t<li>\u5f53\u5230\u8fbe (N-1, N-1) \u540e\uff0c\u4f60\u8981\u7ee7\u7eed\u8d70\uff0c\u76f4\u5230\u8fd4\u56de\u5230 (0, 0) \uff0c\u53ea\u80fd\u5411\u4e0a\u6216\u5411\u5de6\u8d70\uff0c\u5e76\u4e14\u53ea\u80fd\u7a7f\u8d8a\u6709\u6548\u7684\u683c\u5b50\uff1b</li>\n\t<li>\u5f53\u4f60\u7ecf\u8fc7\u4e00\u4e2a\u683c\u5b50\u4e14\u8fd9\u4e2a\u683c\u5b50\u5305\u542b\u4e00\u4e2a\u6a31\u6843\u65f6\uff0c\u4f60\u5c06\u6458\u5230\u6a31\u6843\u5e76\u4e14\u8fd9\u4e2a\u683c\u5b50\u4f1a\u53d8\u6210\u7a7a\u7684\uff08\u503c\u53d8\u4e3a0\uff09\uff1b</li>\n\t<li>\u5982\u679c\u5728 (0, 0) \u548c (N-1, N-1) \u4e4b\u95f4\u4e0d\u5b58\u5728\u4e00\u6761\u53ef\u7ecf\u8fc7\u7684\u8def\u5f84\uff0c\u5219\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u6a31\u6843\u80fd\u88ab\u6458\u5230\u3002</li>\n</ul>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> grid =\n[[0, 1, -1],\n [1, 0, -1],\n [1, 1,  1]]\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca\uff1a</strong> \n\u73a9\u5bb6\u4ece\uff080,0\uff09\u70b9\u51fa\u53d1\uff0c\u7ecf\u8fc7\u4e86\u5411\u4e0b\u8d70\uff0c\u5411\u4e0b\u8d70\uff0c\u5411\u53f3\u8d70\uff0c\u5411\u53f3\u8d70\uff0c\u5230\u8fbe\u4e86\u70b9(2, 2)\u3002\n\u5728\u8fd9\u8d9f\u5355\u7a0b\u4e2d\uff0c\u603b\u5171\u6458\u5230\u4e864\u9897\u6a31\u6843\uff0c\u77e9\u9635\u53d8\u6210\u4e86[[0,1,-1],[0,0,-1],[0,0,0]]\u3002\n\u63a5\u7740\uff0c\u8fd9\u540d\u73a9\u5bb6\u5411\u5de6\u8d70\uff0c\u5411\u4e0a\u8d70\uff0c\u5411\u4e0a\u8d70\uff0c\u5411\u5de6\u8d70\uff0c\u8fd4\u56de\u4e86\u8d77\u59cb\u70b9\uff0c\u53c8\u6458\u5230\u4e861\u9897\u6a31\u6843\u3002\n\u5728\u65c5\u7a0b\u4e2d\uff0c\u603b\u5171\u6458\u5230\u4e865\u9897\u6a31\u6843\uff0c\u8fd9\u662f\u53ef\u4ee5\u6458\u5230\u7684\u6700\u5927\u503c\u4e86\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>grid</code> \u662f\u4e00\u4e2a&nbsp;<code>N</code> * <code>N</code> \u7684\u4e8c\u7ef4\u6570\u7ec4\uff0cN\u7684\u53d6\u503c\u8303\u56f4\u662f<code>1 &lt;= N &lt;= 50</code>\u3002</li>\n\t<li>\u6bcf\u4e00\u4e2a&nbsp;<code>grid[i][j]</code> \u90fd\u662f\u96c6\u5408&nbsp;<code>{-1, 0, 1}</code>\u5176\u4e2d\u7684\u4e00\u4e2a\u6570\u3002</li>\n\t<li>\u53ef\u4ee5\u4fdd\u8bc1\u8d77\u70b9&nbsp;<code>grid[0][0]</code>&nbsp;\u548c\u7ec8\u70b9&nbsp;<code>grid[N-1][N-1]</code>&nbsp;\u7684\u503c\u90fd\u4e0d\u4f1a\u662f -1\u3002</li>\n</ul>\n",
        "titleZh": "\u6458\u6a31\u6843",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Uber",
            "Akuna Capital"
        ]
    },
    {
        "leetId": "742",
        "link": "closest-leaf-in-a-binary-tree",
        "title": "Closest Leaf in a Binary Tree",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "16",
        "questionDescription": "\n<p>Given a binary tree <b>where every node has a unique value</b>, and a target key <code>k</code>, find the value of the nearest leaf node to target <code>k</code> in the tree.\n</p><p>\nHere, <i>nearest</i> to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the tree.  Also, a node is called a <i>leaf</i> if it has no children.\n</p><p>\nIn the following examples, the input tree is represented in flattened form row by row.\nThe actual <code>root</code> tree given will be a TreeNode object.\n</p><p>\n<b>Example 1:</b>\n</p><pre><b>Input:</b>\nroot = [1, 3, 2], k = 1\nDiagram of binary tree:\n          1\n         / \\\n        3   2\n\n<b>Output:</b> 2 (or 3)\n\n<b>Explanation:</b> Either 2 or 3 is the nearest leaf node to the target of 1.\n</pre>\n<p></p><p>\n<b>Example 2:</b>\n</p><pre><b>Input:</b>\nroot = [1], k = 1\n<b>Output:</b> 1\n\n<b>Explanation:</b> The nearest leaf node is the root node itself.\n</pre>\n<p></p>\n<p>\n<b>Example 3:</b>\n</p><pre><b>Input:</b>\nroot = [1,2,3,4,null,null,null,5,null,6], k = 2\nDiagram of binary tree:\n             1\n            / \\\n           2   3\n          /\n         4\n        /\n       5\n      /\n     6\n\n<b>Output:</b> 3\n<b>Explanation:</b> The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li><code>root</code> represents a binary tree with at least <code>1</code> node and at most <code>1000</code> nodes.</li>\n<li>Every node has a unique <code>node.val</code> in range <code>[1, 1000]</code>.</li>\n<li>There exists some node in the given binary tree for which <code>node.val == k</code>.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>Given a binary tree <b>where every node has a unique value</b>, and a target key <code>k</code>, find the value of the nearest leaf node to target <code>k</code> in the tree.\n</p><p>\nHere, <i>nearest</i> to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the tree.  Also, a node is called a <i>leaf</i> if it has no children.\n</p><p>\nIn the following examples, the input tree is represented in flattened form row by row.\nThe actual <code>root</code> tree given will be a TreeNode object.\n</p><p>\n<b>Example 1:</b>\n</p><pre><b>Input:</b>\nroot = [1, 3, 2], k = 1\nDiagram of binary tree:\n          1\n         / \\\n        3   2\n\n<b>Output:</b> 2 (or 3)\n\n<b>Explanation:</b> Either 2 or 3 is the nearest leaf node to the target of 1.\n</pre>\n<p></p><p>\n<b>Example 2:</b>\n</p><pre><b>Input:</b>\nroot = [1], k = 1\n<b>Output:</b> 1\n\n<b>Explanation:</b> The nearest leaf node is the root node itself.\n</pre>\n<p></p>\n<p>\n<b>Example 3:</b>\n</p><pre><b>Input:</b>\nroot = [1,2,3,4,null,null,null,5,null,6], k = 2\nDiagram of binary tree:\n             1\n            / \\\n           2   3\n          /\n         4\n        /\n       5\n      /\n     6\n\n<b>Output:</b> 3\n<b>Explanation:</b> The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li><code>root</code> represents a binary tree with at least <code>1</code> node and at most <code>1000</code> nodes.</li>\n<li>Every node has a unique <code>node.val</code> in range <code>[1, 1000]</code>.</li>\n<li>There exists some node in the given binary tree for which <code>node.val == k</code>.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Databricks"
        ]
    },
    {
        "leetId": "743",
        "link": "network-delay-time",
        "title": "Network Delay Time",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "42.2%",
        "questionDescription": "<p>There are <code>N</code> network nodes, labelled <code>1</code> to <code>N</code>.</p>\r\n\r\n<p>Given <code>times</code>, a list of travel times as <b>directed</b> edges <code>times[i] = (u, v, w)</code>, where <code>u</code> is the source node, <code>v</code> is the target node, and <code>w</code> is the time it takes for a signal to travel from source to target.</p>\r\n\r\n<p>Now, we send a signal from a certain node <code>K</code>. How long will it take for all nodes to receive the signal? If it is impossible, return <code>-1</code>.</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li><code>N</code> will be in the range <code>[1, 100]</code>.</li>\r\n\t<li><code>K</code> will be in the range <code>[1, N]</code>.</li>\r\n\t<li>The length of <code>times</code> will be in the range <code>[1, 6000]</code>.</li>\r\n\t<li>All edges <code>times[i] = (u, v, w)</code> will have <code>1 &lt;= u, v &lt;= N</code> and <code>0 &lt;= w &lt;= 100</code>.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u6709&nbsp;<code>N</code>&nbsp;\u4e2a\u7f51\u7edc\u8282\u70b9\uff0c\u6807\u8bb0\u4e3a&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>N</code>\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5217\u8868&nbsp;<code>times</code>\uff0c\u8868\u793a\u4fe1\u53f7\u7ecf\u8fc7<strong>\u6709\u5411</strong>\u8fb9\u7684\u4f20\u9012\u65f6\u95f4\u3002&nbsp;<code>times[i] = (u, v, w)</code>\uff0c\u5176\u4e2d&nbsp;<code>u</code>&nbsp;\u662f\u6e90\u8282\u70b9\uff0c<code>v</code>&nbsp;\u662f\u76ee\u6807\u8282\u70b9\uff0c <code>w</code>&nbsp;\u662f\u4e00\u4e2a\u4fe1\u53f7\u4ece\u6e90\u8282\u70b9\u4f20\u9012\u5230\u76ee\u6807\u8282\u70b9\u7684\u65f6\u95f4\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u5411\u5f53\u524d\u7684\u8282\u70b9&nbsp;<code>K</code>&nbsp;\u53d1\u9001\u4e86\u4e00\u4e2a\u4fe1\u53f7\u3002\u9700\u8981\u591a\u4e45\u624d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u90fd\u6536\u5230\u4fe1\u53f7\uff1f\u5982\u679c\u4e0d\u80fd\u4f7f\u6240\u6709\u8282\u70b9\u6536\u5230\u4fe1\u53f7\uff0c\u8fd4\u56de&nbsp;<code>-1</code>\u3002</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;\u7684\u8303\u56f4\u5728&nbsp;<code>[1, 100]</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li><code>K</code>&nbsp;\u7684\u8303\u56f4\u5728&nbsp;<code>[1, N]</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li><code>times</code>&nbsp;\u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 6000]</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li>\u6240\u6709\u7684\u8fb9&nbsp;<code>times[i] = (u, v, w)</code>&nbsp;\u90fd\u6709&nbsp;<code>1 &lt;= u, v &lt;= N</code>&nbsp;\u4e14&nbsp;<code>0 &lt;= w &lt;= 100</code>\u3002</li>\n</ol>\n",
        "titleZh": "\u7f51\u7edc\u5ef6\u8fdf\u65f6\u95f4",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Pocket Gems",
            "Akuna Capital"
        ]
    },
    {
        "leetId": "744",
        "link": "find-smallest-letter-greater-than-target",
        "title": "Find Smallest Letter Greater Than Target",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "42.2%",
        "questionDescription": "<p>\r\nGiven a list of sorted characters <code>letters</code> containing only lowercase letters, and given a target letter <code>target</code>, find the smallest element in the list that is larger than the given target.\r\n</p><p>\r\nLetters also wrap around.  For example, if the target is <code>target = 'z'</code> and <code>letters = ['a', 'b']</code>, the answer is <code>'a'</code>.\r\n</p>\r\n\r\n<p><b>Examples:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"a\"\r\n<b>Output:</b> \"c\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"c\"\r\n<b>Output:</b> \"f\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"d\"\r\n<b>Output:</b> \"f\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"g\"\r\n<b>Output:</b> \"j\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"j\"\r\n<b>Output:</b> \"c\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"k\"\r\n<b>Output:</b> \"c\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><code>letters</code> has a length in range <code>[2, 10000]</code>.</li>\r\n<li><code>letters</code> consists of lowercase letters, and contains at least 2 unique letters.</li>\r\n<li><code>target</code> is a lowercase letter.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u6709\u5e8f\u6570\u7ec4<code>letters</code>&nbsp;\u548c\u4e00\u4e2a\u76ee\u6807\u5b57\u6bcd&nbsp;<code>target</code>\uff0c\u5bfb\u627e\u6709\u5e8f\u6570\u7ec4\u91cc\u9762\u6bd4\u76ee\u6807\u5b57\u6bcd\u5927\u7684\u6700\u5c0f\u5b57\u6bcd\u3002</p>\n\n<p>\u6570\u7ec4\u91cc\u5b57\u6bcd\u7684\u987a\u5e8f\u662f\u5faa\u73af\u7684\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u76ee\u6807\u5b57\u6bcd<code>target = &#39;z&#39;</code> \u5e76\u4e14\u6709\u5e8f\u6570\u7ec4\u4e3a&nbsp;<code>letters = [&#39;a&#39;, &#39;b&#39;]</code>\uff0c\u5219\u7b54\u6848\u8fd4\u56de&nbsp;<code>&#39;a&#39;</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;a&quot;\n<strong>\u8f93\u51fa:</strong> &quot;c&quot;\n\n<strong>\u8f93\u5165:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;c&quot;\n<strong>\u8f93\u51fa:</strong> &quot;f&quot;\n\n<strong>\u8f93\u5165:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;d&quot;\n<strong>\u8f93\u51fa:</strong> &quot;f&quot;\n\n<strong>\u8f93\u5165:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;g&quot;\n<strong>\u8f93\u51fa:</strong> &quot;j&quot;\n\n<strong>\u8f93\u5165:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;j&quot;\n<strong>\u8f93\u51fa:</strong> &quot;c&quot;\n\n<strong>\u8f93\u5165:</strong>\nletters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]\ntarget = &quot;k&quot;\n<strong>\u8f93\u51fa:</strong> &quot;c&quot;\n</pre>\n\n<p><strong>\u6ce8:</strong></p>\n\n<ol>\n\t<li><code>letters</code>\u957f\u5ea6\u8303\u56f4\u5728<code>[2, 10000]</code>\u533a\u95f4\u5185\u3002</li>\n\t<li><code>letters</code> \u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff0c\u6700\u5c11\u5305\u542b\u4e24\u4e2a\u4e0d\u540c\u7684\u5b57\u6bcd\u3002</li>\n\t<li>\u76ee\u6807\u5b57\u6bcd<code>target</code> \u662f\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n",
        "titleZh": "\u5bfb\u627e\u6bd4\u76ee\u6807\u5b57\u6bcd\u5927\u7684\u6700\u5c0f\u5b57\u6bcd",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "LinkedIn"
        ]
    },
    {
        "leetId": "745",
        "link": "prefix-and-suffix-search",
        "title": "Prefix and Suffix Search",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "25.2%",
        "questionDescription": "<p>Given many <code>words</code>, <code>words[i]</code> has weight <code>i</code>.</p>\r\n\r\n<p>Design a class <code>WordFilter</code> that supports one function, <code>WordFilter.f(String prefix, String suffix)</code>. It will return the word with given <code>prefix</code> and <code>suffix</code> with maximum weight. If no word exists, return -1.</p>\r\n\r\n<p><b>Examples:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\nWordFilter([&quot;apple&quot;])\r\nWordFilter.f(&quot;a&quot;, &quot;e&quot;) // returns 0\r\nWordFilter.f(&quot;b&quot;, &quot;&quot;) // returns -1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li><code>words</code> has length in range <code>[1, 15000]</code>.</li>\r\n\t<li>For each test case, up to <code>words.length</code> queries <code>WordFilter.f</code> may be made.</li>\r\n\t<li><code>words[i]</code> has length in range <code>[1, 10]</code>.</li>\r\n\t<li><code>prefix, suffix</code> have lengths in range <code>[0, 10]</code>.</li>\r\n\t<li><code>words[i]</code> and <code>prefix, suffix</code> queries consist of lowercase letters only.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u591a\u4e2a&nbsp;<code>words</code>\uff0c<code>words[i]</code>&nbsp;\u7684\u6743\u91cd\u4e3a&nbsp;<code>i</code>&nbsp;\u3002</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u7c7b&nbsp;<code>WordFilter</code>&nbsp;\u5b9e\u73b0\u51fd\u6570<code>WordFilter.f(String prefix, String suffix)</code>\u3002\u8fd9\u4e2a\u51fd\u6570\u5c06\u8fd4\u56de\u5177\u6709\u524d\u7f00&nbsp;<code>prefix</code>&nbsp;\u548c\u540e\u7f00<code>suffix</code>&nbsp;\u7684\u8bcd\u7684\u6700\u5927\u6743\u91cd\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u8bcd\uff0c\u8fd4\u56de -1\u3002</p>\n\n<p><strong>\u4f8b\u5b50:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong>\nWordFilter([&quot;apple&quot;])\nWordFilter.f(&quot;a&quot;, &quot;e&quot;) // \u8fd4\u56de 0\nWordFilter.f(&quot;b&quot;, &quot;&quot;) // \u8fd4\u56de -1\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>words</code>\u7684\u957f\u5ea6\u5728<code>[1, 15000]</code>\u4e4b\u95f4\u3002</li>\n\t<li>\u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6700\u591a\u4f1a\u6709<code>words.length</code>\u6b21\u5bf9<code>WordFilter.f</code>\u7684\u8c03\u7528\u3002</li>\n\t<li><code>words[i]</code>\u7684\u957f\u5ea6\u5728<code>[1, 10]</code>\u4e4b\u95f4\u3002</li>\n\t<li><code>prefix, suffix</code>\u7684\u957f\u5ea6\u5728<code>[0, 10]</code>\u4e4b\u524d\u3002</li>\n\t<li><code>words[i]</code>\u548c<code>prefix, suffix</code>\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n",
        "titleZh": "\u524d\u7f00\u548c\u540e\u7f00\u641c\u7d22",
        "tags": [
            {
                "tag": "Trie",
                "link": "trie",
                "tagZh": "\u5b57\u5178\u6811"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Uber"
        ]
    },
    {
        "leetId": "746",
        "link": "min-cost-climbing-stairs",
        "title": "Min Cost Climbing Stairs",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "41.4%",
        "questionDescription": "<p>\r\nOn a staircase, the <code>i</code>-th step has some non-negative cost <code>cost[i]</code> assigned (0 indexed).\r\n</p><p>\r\nOnce you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> cost = [10, 15, 20]\r\n<b>Output:</b> 15\r\n<b>Explanation:</b> Cheapest is start on cost[1], pay that cost and go to the top.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\r\n<b>Output:</b> 6\r\n<b>Explanation:</b> Cheapest is start on cost[0], and only step on 1s, skipping cost[3].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><code>cost</code> will have a length in the range <code>[2, 1000]</code>.</li>\r\n<li>Every <code>cost[i]</code> will be an integer in the range <code>[0, 999]</code>.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u6570\u7ec4\u7684\u6bcf\u4e2a\u7d22\u5f15\u505a\u4e3a\u4e00\u4e2a\u9636\u68af\uff0c\u7b2c&nbsp;<code>i</code>\u4e2a\u9636\u68af\u5bf9\u5e94\u7740\u4e00\u4e2a\u975e\u8d1f\u6570\u7684\u4f53\u529b\u82b1\u8d39\u503c&nbsp;<code>cost[i]</code>(\u7d22\u5f15\u4ece0\u5f00\u59cb)\u3002</p>\n\n<p>\u6bcf\u5f53\u4f60\u722c\u4e0a\u4e00\u4e2a\u9636\u68af\u4f60\u90fd\u8981\u82b1\u8d39\u5bf9\u5e94\u7684\u4f53\u529b\u82b1\u8d39\u503c\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u9009\u62e9\u7ee7\u7eed\u722c\u4e00\u4e2a\u9636\u68af\u6216\u8005\u722c\u4e24\u4e2a\u9636\u68af\u3002</p>\n\n<p>\u60a8\u9700\u8981\u627e\u5230\u8fbe\u5230\u697c\u5c42\u9876\u90e8\u7684\u6700\u4f4e\u82b1\u8d39\u3002\u5728\u5f00\u59cb\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u7d22\u5f15\u4e3a 0 \u6216 1 \u7684\u5143\u7d20\u4f5c\u4e3a\u521d\u59cb\u9636\u68af\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> cost = [10, 15, 20]\n<strong>\u8f93\u51fa:</strong> 15\n<strong>\u89e3\u91ca:</strong> \u6700\u4f4e\u82b1\u8d39\u662f\u4ececost[1]\u5f00\u59cb\uff0c\u7136\u540e\u8d70\u4e24\u6b65\u5373\u53ef\u5230\u9636\u68af\u9876\uff0c\u4e00\u5171\u82b1\u8d3915\u3002\n</pre>\n\n<p><strong>&nbsp;\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\n<strong>\u8f93\u51fa:</strong> 6\n<strong>\u89e3\u91ca:</strong> \u6700\u4f4e\u82b1\u8d39\u65b9\u5f0f\u662f\u4ececost[0]\u5f00\u59cb\uff0c\u9010\u4e2a\u7ecf\u8fc7\u90a3\u4e9b1\uff0c\u8df3\u8fc7cost[3]\uff0c\u4e00\u5171\u82b1\u8d396\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li><code>cost</code>&nbsp;\u7684\u957f\u5ea6\u5c06\u4f1a\u5728&nbsp;<code>[2, 1000]</code>\u3002</li>\n\t<li>\u6bcf\u4e00\u4e2a&nbsp;<code>cost[i]</code> \u5c06\u4f1a\u662f\u4e00\u4e2aInteger\u7c7b\u578b\uff0c\u8303\u56f4\u4e3a&nbsp;<code>[0, 999]</code>\u3002</li>\n</ol>\n",
        "titleZh": "\u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Amazon",
            "Adobe",
            "Goldman Sachs"
        ]
    },
    {
        "leetId": "747",
        "link": "largest-number-at-least-twice-of-others",
        "title": "Largest Number At Least Twice of Others",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "38.6%",
        "questionDescription": "<p>In a given integer array <code>nums</code>, there is always exactly one largest element.</p>\r\n\r\n<p>Find whether the largest element in the array is at least twice as much as every other number in the array.</p>\r\n\r\n<p>If it is, return the <strong>index</strong> of the largest element, otherwise return -1.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [3, 6, 1, 0]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong> 6 is the largest integer, and for every other number in the array x,\r\n6 is more than twice as big as x.  The index of value 6 is 1, so we return 1.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [1, 2, 3, 4]\r\n<strong>Output:</strong> -1\r\n<strong>Explanation:</strong> 4 isn&#39;t at least as big as twice the value of 3, so we return -1.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>nums</code> will have a length in the range <code>[1, 50]</code>.</li>\r\n\t<li>Every <code>nums[i]</code> will be an integer in the range <code>[0, 99]</code>.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6570\u7ec4<code>nums</code>\u4e2d\uff0c\u603b\u662f\u5b58\u5728\u4e00\u4e2a\u6700\u5927\u5143\u7d20 \u3002</p>\n\n<p>\u67e5\u627e\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u5143\u7d20\u662f\u5426\u81f3\u5c11\u662f\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5176\u4ed6\u6570\u5b57\u7684\u4e24\u500d\u3002</p>\n\n<p>\u5982\u679c\u662f\uff0c\u5219\u8fd4\u56de\u6700\u5927\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56de-1\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> nums = [3, 6, 1, 0]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> 6\u662f\u6700\u5927\u7684\u6574\u6570, \u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u5176\u4ed6\u6574\u6570,\n6\u5927\u4e8e\u6570\u7ec4\u4e2d\u5176\u4ed6\u5143\u7d20\u7684\u4e24\u500d\u30026\u7684\u7d22\u5f15\u662f1, \u6240\u4ee5\u6211\u4eec\u8fd4\u56de1.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> nums = [1, 2, 3, 4]\n<strong>\u8f93\u51fa:</strong> -1\n<strong>\u89e3\u91ca:</strong> 4\u6ca1\u6709\u8d85\u8fc73\u7684\u4e24\u500d\u5927, \u6240\u4ee5\u6211\u4eec\u8fd4\u56de -1.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>nums</code>&nbsp;\u7684\u957f\u5ea6\u8303\u56f4\u5728<code>[1, 50]</code>.</li>\n\t<li>\u6bcf\u4e2a&nbsp;<code>nums[i]</code>&nbsp;\u7684\u6574\u6570\u8303\u56f4\u5728&nbsp;<code>[0, 99]</code>.</li>\n</ol>\n",
        "titleZh": "\u81f3\u5c11\u662f\u5176\u4ed6\u6570\u5b57\u4e24\u500d\u7684\u6700\u5927\u6570",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "748",
        "link": "shortest-completing-word",
        "title": "Shortest Completing Word",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "52.3%",
        "questionDescription": "<p>\r\nFind the minimum length word from a given dictionary <code>words</code>, which has all the letters from the string <code>licensePlate</code>.  Such a word is said to <i>complete</i> the given string <code>licensePlate</code>\r\n</p><p>\r\nHere, for letters we ignore case.  For example, <code>\"P\"</code> on the <code>licensePlate</code> still matches <code>\"p\"</code> on the word.\r\n</p><p>\r\nIt is guaranteed an answer exists.  If there are multiple answers, return the one that occurs first in the array.\r\n</p><p>\r\nThe license plate might have the same letter occurring multiple times.  For example, given a <code>licensePlate</code> of <code>\"PP\"</code>, the word <code>\"pair\"</code> does not complete the <code>licensePlate</code>, but the word <code>\"supper\"</code> does.\r\n</p><p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> licensePlate = \"1s3 PSt\", words = [\"step\", \"steps\", \"stripe\", \"stepple\"]\r\n<b>Output:</b> \"steps\"\r\n<b>Explanation:</b> The smallest length word that contains the letters \"S\", \"P\", \"S\", and \"T\".\r\nNote that the answer is not \"step\", because the letter \"s\" must occur in the word twice.\r\nAlso note that we ignored case for the purposes of comparing whether a letter exists in the word.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> licensePlate = \"1s3 456\", words = [\"looks\", \"pest\", \"stew\", \"show\"]\r\n<b>Output:</b> \"pest\"\r\n<b>Explanation:</b> There are 3 smallest length words that contains the letters \"s\".\r\nWe return the one that occurred first.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><code>licensePlate</code> will be a string with length in range <code>[1, 7]</code>.</li>\r\n<li><code>licensePlate</code> will contain digits, spaces, or letters (uppercase or lowercase).</li>\r\n<li><code>words</code> will have a length in the range <code>[10, 1000]</code>.</li>\r\n<li>Every <code>words[i]</code> will consist of lowercase letters, and have length in range <code>[1, 15]</code>.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u5982\u679c\u5355\u8bcd\u5217\u8868\uff08<code>words</code>\uff09\u4e2d\u7684\u4e00\u4e2a\u5355\u8bcd\u5305\u542b\u724c\u7167\uff08<code>licensePlate</code>\uff09\u4e2d\u6240\u6709\u7684\u5b57\u6bcd\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u4e4b\u4e3a\u5b8c\u6574\u8bcd\u3002\u5728\u6240\u6709\u5b8c\u6574\u8bcd\u4e2d\uff0c\u6700\u77ed\u7684\u5355\u8bcd\u6211\u4eec\u79f0\u4e4b\u4e3a\u6700\u77ed\u5b8c\u6574\u8bcd\u3002</p>\n\n<p>\u5355\u8bcd\u5728\u5339\u914d\u724c\u7167\u4e2d\u7684\u5b57\u6bcd\u65f6\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u6bd4\u5982\u724c\u7167\u4e2d\u7684&nbsp;<code>&quot;P&quot;</code>&nbsp;\u4f9d\u7136\u53ef\u4ee5\u5339\u914d\u5355\u8bcd\u4e2d\u7684&nbsp;<code>&quot;p&quot;</code>&nbsp;\u5b57\u6bcd\u3002</p>\n\n<p>\u6211\u4eec\u4fdd\u8bc1\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u6700\u77ed\u5b8c\u6574\u8bcd\u3002\u5f53\u6709\u591a\u4e2a\u5355\u8bcd\u90fd\u7b26\u5408\u6700\u77ed\u5b8c\u6574\u8bcd\u7684\u5339\u914d\u6761\u4ef6\u65f6\u53d6\u5355\u8bcd\u5217\u8868\u4e2d\u6700\u9760\u524d\u7684\u4e00\u4e2a\u3002</p>\n\n<p>\u724c\u7167\u4e2d\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u76f8\u540c\u7684\u5b57\u7b26\uff0c\u6bd4\u5982\u8bf4\uff1a\u5bf9\u4e8e\u724c\u7167 <code>&quot;PP&quot;</code>\uff0c\u5355\u8bcd&nbsp;<code>&quot;pair&quot;</code>&nbsp;\u65e0\u6cd5\u5339\u914d\uff0c\u4f46\u662f&nbsp;<code>&quot;supper&quot;</code>&nbsp;\u53ef\u4ee5\u5339\u914d\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>licensePlate = &quot;1s3 PSt&quot;, words = [&quot;step&quot;, &quot;steps&quot;, &quot;stripe&quot;, &quot;stepple&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;steps&quot;\n<strong>\u8bf4\u660e\uff1a</strong>\u6700\u77ed\u5b8c\u6574\u8bcd\u5e94\u8be5\u5305\u62ec &quot;s&quot;\u3001&quot;p&quot;\u3001&quot;s&quot; \u4ee5\u53ca &quot;t&quot;\u3002\u5bf9\u4e8e &quot;step&quot; \u5b83\u53ea\u5305\u542b\u4e00\u4e2a &quot;s&quot; \u6240\u4ee5\u5b83\u4e0d\u7b26\u5408\u6761\u4ef6\u3002\u540c\u65f6\u5728\u5339\u914d\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5ffd\u7565\u724c\u7167\u4e2d\u7684\u5927\u5c0f\u5199\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>licensePlate = &quot;1s3 456&quot;, words = [&quot;looks&quot;, &quot;pest&quot;, &quot;stew&quot;, &quot;show&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;pest&quot;\n<strong>\u8bf4\u660e\uff1a</strong>\u5b58\u5728 3 \u4e2a\u5305\u542b\u5b57\u6bcd &quot;s&quot; \u4e14\u6709\u7740\u6700\u77ed\u957f\u5ea6\u7684\u5b8c\u6574\u8bcd\uff0c\u4f46\u6211\u4eec\u8fd4\u56de\u6700\u5148\u51fa\u73b0\u7684\u5b8c\u6574\u8bcd\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li>\u724c\u7167<code>\uff08licensePlate\uff09</code>\u7684\u957f\u5ea6\u5728\u533a\u57df<code>[1, 7]</code>\u4e2d\u3002</li>\n\t<li>\u724c\u7167<code>\uff08licensePlate\uff09</code>\u5c06\u4f1a\u5305\u542b\u6570\u5b57\u3001\u7a7a\u683c\u3001\u6216\u8005\u5b57\u6bcd\uff08\u5927\u5199\u548c\u5c0f\u5199\uff09\u3002</li>\n\t<li>\u5355\u8bcd\u5217\u8868<code>\uff08words\uff09</code>\u957f\u5ea6\u5728\u533a\u95f4&nbsp;<code>[10, 1000]</code>&nbsp;\u4e2d\u3002</li>\n\t<li>\u6bcf\u4e00\u4e2a\u5355\u8bcd&nbsp;<code>words[i]</code>&nbsp;\u90fd\u662f\u5c0f\u5199\uff0c\u5e76\u4e14\u957f\u5ea6\u5728\u533a\u95f4&nbsp;<code>[1, 15]</code>&nbsp;\u4e2d\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u6700\u77ed\u5b8c\u6574\u8bcd",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "LinkedIn"
        ]
    },
    {
        "leetId": "749",
        "link": "contain-virus",
        "title": "Contain Virus",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "53.5%",
        "questionDescription": "<p>\r\nA virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\r\n</p><p>\r\nThe world is modeled as a 2-D array of cells, where <code>0</code> represents uninfected cells, and <code>1</code> represents cells contaminated with the virus.  A wall (and only one wall) can be installed <b>between any two 4-directionally adjacent cells</b>, on the shared boundary.\r\n</p><p>\r\nEvery night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall.\r\nResources are limited. Each day, you can install walls around only one region -- the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night. There will never be a tie.\r\n</p><p>\r\nCan you save the day? If so, what is the number of walls required? If not, and the world becomes fully infected, return the number of walls used.\r\n</p><p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> grid = \r\n[[0,1,0,0,0,0,0,1],\r\n [0,1,0,0,0,0,0,1],\r\n [0,0,0,0,0,0,0,1],\r\n [0,0,0,0,0,0,0,0]]\r\n<b>Output:</b> 10\r\n<b>Explanation:</b>\r\nThere are 2 contaminated regions.\r\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\r\n\r\n[[0,1,0,0,0,0,1,1],\r\n [0,1,0,0,0,0,1,1],\r\n [0,0,0,0,0,0,1,1],\r\n [0,0,0,0,0,0,0,1]]\r\n\r\nOn the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> grid = \r\n[[1,1,1],\r\n [1,0,1],\r\n [1,1,1]]\r\n<b>Output:</b> 4\r\n<b>Explanation:</b> Even though there is only one cell saved, there are 4 walls built.\r\nNotice that walls are only built on the shared boundary of two different cells.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> grid = \r\n[[1,1,1,0,0,0,0,0,0],\r\n [1,0,1,0,1,1,1,1,1],\r\n [1,1,1,0,0,0,0,0,0]]\r\n<b>Output:</b> 13\r\n<b>Explanation:</b> The region on the left only builds two new walls.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The number of rows and columns of <code>grid</code> will each be in the range <code>[1, 50]</code>.</li>\r\n<li>Each <code>grid[i][j]</code> will be either <code>0</code> or <code>1</code>.</li>\r\n<li>Throughout the described process, there is always a contiguous viral region that will infect <b>strictly more</b> uncontaminated squares in the next round.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u75c5\u6bd2\u6269\u6563\u5f97\u5f88\u5feb\uff0c\u73b0\u5728\u4f60\u7684\u4efb\u52a1\u662f\u5c3d\u53ef\u80fd\u5730\u901a\u8fc7\u5b89\u88c5\u9632\u706b\u5899\u6765\u9694\u79bb\u75c5\u6bd2\u3002</p>\n\n<p>\u5047\u8bbe\u4e16\u754c\u7531\u4e8c\u7ef4\u77e9\u9635\u7ec4\u6210\uff0c<code>0</code> \u8868\u793a\u8be5\u533a\u57df\u672a\u611f\u67d3\u75c5\u6bd2\uff0c\u800c <code>1</code> \u8868\u793a\u8be5\u533a\u57df\u5df2\u611f\u67d3\u75c5\u6bd2\u3002\u53ef\u4ee5\u5728\u4efb\u610f 2 \u4e2a\u56db\u65b9\u5411\u76f8\u90bb\u5355\u5143\u4e4b\u95f4\u7684\u5171\u4eab\u8fb9\u754c\u4e0a\u5b89\u88c5\u4e00\u4e2a\u9632\u706b\u5899\uff08\u5e76\u4e14\u53ea\u6709\u4e00\u4e2a\u9632\u706b\u5899\uff09\u3002</p>\n\n<p>\u6bcf\u5929\u665a\u4e0a\uff0c\u75c5\u6bd2\u4f1a\u4ece\u88ab\u611f\u67d3\u533a\u57df\u5411\u76f8\u90bb\u672a\u611f\u67d3\u533a\u57df\u6269\u6563\uff0c\u9664\u975e\u88ab\u9632\u706b\u5899\u9694\u79bb\u3002\u73b0\u7531\u4e8e\u8d44\u6e90\u6709\u9650\uff0c\u6bcf\u5929\u4f60\u53ea\u80fd\u5b89\u88c5\u4e00\u7cfb\u5217\u9632\u706b\u5899\u6765\u9694\u79bb\u5176\u4e2d\u4e00\u4e2a\u88ab\u75c5\u6bd2\u611f\u67d3\u7684\u533a\u57df\uff08\u4e00\u4e2a\u533a\u57df\u6216\u8fde\u7eed\u7684\u4e00\u7247\u533a\u57df\uff09\uff0c\u4e14\u8be5\u611f\u67d3\u533a\u57df\u5bf9\u672a\u611f\u67d3\u533a\u57df\u7684\u5a01\u80c1\u6700\u5927\u4e14\u4fdd\u8bc1\u552f\u4e00\u3002</p>\n\n<p>\u4f60\u9700\u8981\u52aa\u529b\u4f7f\u5f97\u6700\u540e\u6709\u90e8\u5206\u533a\u57df\u4e0d\u88ab\u75c5\u6bd2\u611f\u67d3\uff0c\u5982\u679c\u53ef\u4ee5\u6210\u529f\uff0c\u90a3\u4e48\u8fd4\u56de\u9700\u8981\u4f7f\u7528\u7684\u9632\u706b\u5899\u4e2a\u6570; \u5982\u679c\u65e0\u6cd5\u5b9e\u73b0\uff0c\u5219\u8fd4\u56de\u5728\u4e16\u754c\u88ab\u75c5\u6bd2\u5168\u90e8\u611f\u67d3\u65f6\u5df2\u5b89\u88c5\u7684\u9632\u706b\u5899\u4e2a\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> grid = \n[[0,1,0,0,0,0,0,1],\n [0,1,0,0,0,0,0,1],\n [0,0,0,0,0,0,0,1],\n [0,0,0,0,0,0,0,0]]\n<strong>\u8f93\u51fa:</strong> 10\n<strong>\u8bf4\u660e:</strong>\n\u4e00\u5171\u6709\u4e24\u5757\u88ab\u75c5\u6bd2\u611f\u67d3\u7684\u533a\u57df: \u4ece\u5de6\u5f80\u53f3\u7b2c\u4e00\u5757\u9700\u8981 5 \u4e2a\u9632\u706b\u5899\uff0c\u540c\u65f6\u82e5\u8be5\u533a\u57df\u4e0d\u9694\u79bb\uff0c\u665a\u4e0a\u5c06\u611f\u67d3 5 \u4e2a\u672a\u611f\u67d3\u533a\u57df\uff08\u5373\u88ab\u5a01\u80c1\u7684\u672a\u611f\u67d3\u533a\u57df\u4e2a\u6570\u4e3a 5\uff09;\n\u7b2c\u4e8c\u5757\u9700\u8981 4 \u4e2a\u9632\u706b\u5899\uff0c\u540c\u7406\u88ab\u5a01\u80c1\u7684\u672a\u611f\u67d3\u533a\u57df\u4e2a\u6570\u662f 4\u3002\u56e0\u6b64\uff0c\u7b2c\u4e00\u5929\u5148\u9694\u79bb\u5de6\u8fb9\u7684\u611f\u67d3\u533a\u57df\uff0c\u7ecf\u8fc7\u4e00\u665a\u540e\uff0c\u75c5\u6bd2\u4f20\u64ad\u540e\u4e16\u754c\u5982\u4e0b:\n[[0,1,0,0,0,0,1,1],\n [0,1,0,0,0,0,1,1],\n [0,0,0,0,0,0,1,1],\n [0,0,0,0,0,0,0,1]]\n\u7b2c\u4e8c\u9898\uff0c\u53ea\u5269\u4e0b\u4e00\u5757\u672a\u9694\u79bb\u7684\u88ab\u611f\u67d3\u7684\u8fde\u7eed\u533a\u57df\uff0c\u6b64\u65f6\u9700\u8981\u5b89\u88c5 5 \u4e2a\u9632\u706b\u5899\uff0c\u4e14\u5b89\u88c5\u5b8c\u6bd5\u540e\u75c5\u6bd2\u9694\u79bb\u4efb\u52a1\u5b8c\u6210\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> grid = \n[[1,1,1],\n [1,0,1],\n [1,1,1]]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u8bf4\u660e:</strong> \n\u6b64\u65f6\u53ea\u9700\u8981\u5b89\u88c5 4 \u9762\u9632\u706b\u5899\uff0c\u5c31\u6709\u4e00\u5c0f\u533a\u57df\u53ef\u4ee5\u5e78\u5b58\uff0c\u4e0d\u88ab\u75c5\u6bd2\u611f\u67d3\u3002\n\u6ce8\u610f\u4e0d\u9700\u8981\u5728\u4e16\u754c\u8fb9\u754c\u5efa\u7acb\u9632\u706b\u5899\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;3:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> grid = \n[[1,1,1,0,0,0,0,0,0],\n [1,0,1,0,1,1,1,1,1],\n [1,1,1,0,0,0,0,0,0]]\n<strong>\u8f93\u51fa:</strong> 13\n<strong>\u8bf4\u660e:</strong> \n\u5728\u9694\u79bb\u53f3\u8fb9\u611f\u67d3\u533a\u57df\u540e\uff0c\u9694\u79bb\u5de6\u8fb9\u75c5\u6bd2\u533a\u57df\u53ea\u9700\u8981 2 \u4e2a\u9632\u706b\u5899\u4e86\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li><code>grid</code> \u7684\u884c\u6570\u548c\u5217\u6570\u8303\u56f4\u662f [1, 50]\u3002</li>\n\t<li>&nbsp;<code>grid[i][j]</code>&nbsp;\u53ea\u5305\u542b&nbsp;<code>0</code>&nbsp;\u6216&nbsp;<code>1</code>&nbsp;\u3002</li>\n\t<li>\u9898\u76ee\u4fdd\u8bc1\u6bcf\u6b21\u9009\u53d6\u611f\u67d3\u533a\u57df\u8fdb\u884c\u9694\u79bb\u65f6\uff0c\u4e00\u5b9a\u5b58\u5728\u552f\u4e00\u4e00\u4e2a\u5bf9\u672a\u611f\u67d3\u533a\u57df\u7684\u5a01\u80c1\u6700\u5927\u7684\u533a\u57df\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u9694\u79bb\u75c5\u6bd2",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Bloomberg"
        ]
    },
    {
        "leetId": "750",
        "link": "number-of-corner-rectangles",
        "title": "Number Of Corner Rectangles",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "0",
        "questionDescription": "\n<p>Given a grid where each entry is only 0 or 1, find the number of corner rectangles.</p>\n<p>A <em>corner rectangle</em> is 4 distinct 1s on the grid that form an axis-aligned rectangle. Note that only the corners need to have the value 1. Also, all four 1s used must be distinct.</p>\n<p>\u00a0</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> grid = \n[[1, 0, 0, 1, 0],\n [0, 0, 1, 0, 1],\n [0, 0, 0, 1, 0],\n [1, 0, 1, 0, 1]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is only one corner rectangle, with corners grid[1][2], grid[1][4], grid[3][2], grid[3][4].\n</pre>\n<p>\u00a0</p>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> grid = \n[[1, 1, 1],\n [1, 1, 1],\n [1, 1, 1]]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> There are four 2x2 rectangles, four 2x3 and 3x2 rectangles, and one 3x3 rectangle.\n</pre>\n<p>\u00a0</p>\n<p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> grid = \n[[1, 1, 1, 1]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Rectangles must have four distinct corners.\n</pre>\n<p>\u00a0</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li>The number of rows and columns of <code>grid</code> will each be in the range <code>[1, 200]</code>.</li>\n<li>Each <code>grid[i][j]</code> will be either <code>0</code> or <code>1</code>.</li>\n<li>The number of <code>1</code>s in the grid will be at most <code>6000</code>.</li>\n</ol>\n<p>\u00a0</p>\n",
        "questionDescriptionZh": "\n<p>Given a grid where each entry is only 0 or 1, find the number of corner rectangles.</p>\n<p>A <em>corner rectangle</em> is 4 distinct 1s on the grid that form an axis-aligned rectangle. Note that only the corners need to have the value 1. Also, all four 1s used must be distinct.</p>\n<p>\u00a0</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> grid = \n[[1, 0, 0, 1, 0],\n [0, 0, 1, 0, 1],\n [0, 0, 0, 1, 0],\n [1, 0, 1, 0, 1]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is only one corner rectangle, with corners grid[1][2], grid[1][4], grid[3][2], grid[3][4].\n</pre>\n<p>\u00a0</p>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> grid = \n[[1, 1, 1],\n [1, 1, 1],\n [1, 1, 1]]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> There are four 2x2 rectangles, four 2x3 and 3x2 rectangles, and one 3x3 rectangle.\n</pre>\n<p>\u00a0</p>\n<p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> grid = \n[[1, 1, 1, 1]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> Rectangles must have four distinct corners.\n</pre>\n<p>\u00a0</p>\n<p><strong>Note:</strong></p>\n<ol>\n<li>The number of rows and columns of <code>grid</code> will each be in the range <code>[1, 200]</code>.</li>\n<li>Each <code>grid[i][j]</code> will be either <code>0</code> or <code>1</code>.</li>\n<li>The number of <code>1</code>s in the grid will be at most <code>6000</code>.</li>\n</ol>\n<p>\u00a0</p>\n",
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "751",
        "link": "ip-to-cidr",
        "title": "IP to CIDR",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "31",
        "questionDescription": "\n<p>\nGiven a start IP address <code>ip</code> and a number of ips we need to cover <code>n</code>, return a representation of the range as a list (of smallest possible length) of CIDR blocks.\n</p><p>\nA CIDR block is a string consisting of an IP, followed by a slash, and then the prefix length.  For example: \"123.45.67.89/20\".  That prefix length \"20\" represents the number of common prefix bits in the specified range.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> ip = \"255.0.0.7\", n = 10\n<b>Output:</b> [\"255.0.0.7/32\",\"255.0.0.8/29\",\"255.0.0.16/32\"]\n<b>Explanation:</b>\nThe initial ip address, when converted to binary, looks like this (spaces added for clarity):\n255.0.0.7 -&gt; 11111111 00000000 00000000 00000111\nThe address \"255.0.0.7/32\" specifies all addresses with a common prefix of 32 bits to the given address,\nie. just this one address.\n\nThe address \"255.0.0.8/29\" specifies all addresses with a common prefix of 29 bits to the given address:\n255.0.0.8 -&gt; 11111111 00000000 00000000 00001000\nAddresses with common prefix of 29 bits are:\n11111111 00000000 00000000 00001000\n11111111 00000000 00000000 00001001\n11111111 00000000 00000000 00001010\n11111111 00000000 00000000 00001011\n11111111 00000000 00000000 00001100\n11111111 00000000 00000000 00001101\n11111111 00000000 00000000 00001110\n11111111 00000000 00000000 00001111\n\nThe address \"255.0.0.16/32\" specifies all addresses with a common prefix of 32 bits to the given address,\nie. just 11111111 00000000 00000000 00010000.\n\nIn total, the answer specifies the range of 10 ips starting with the address 255.0.0.7 .\n\nThere were other representations, such as:\n[\"255.0.0.7/32\",\"255.0.0.8/30\", \"255.0.0.12/30\", \"255.0.0.16/32\"],\nbut our answer was the shortest possible.\n\nAlso note that a representation beginning with say, \"255.0.0.7/30\" would be incorrect,\nbecause it includes addresses like 255.0.0.4 = 11111111 00000000 00000000 00000100 \nthat are outside the specified range.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li><code>ip</code> will be a valid IPv4 address.</li>\n<li>Every implied address <code>ip + x</code> (for <code>x &lt; n</code>) will be a valid IPv4 address.</li>\n<li><code>n</code> will be an integer in the range <code>[1, 1000]</code>.</li>\n</ol>\n<p></p>\n",
        "questionDescriptionZh": "\n<p>\nGiven a start IP address <code>ip</code> and a number of ips we need to cover <code>n</code>, return a representation of the range as a list (of smallest possible length) of CIDR blocks.\n</p><p>\nA CIDR block is a string consisting of an IP, followed by a slash, and then the prefix length.  For example: \"123.45.67.89/20\".  That prefix length \"20\" represents the number of common prefix bits in the specified range.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> ip = \"255.0.0.7\", n = 10\n<b>Output:</b> [\"255.0.0.7/32\",\"255.0.0.8/29\",\"255.0.0.16/32\"]\n<b>Explanation:</b>\nThe initial ip address, when converted to binary, looks like this (spaces added for clarity):\n255.0.0.7 -&gt; 11111111 00000000 00000000 00000111\nThe address \"255.0.0.7/32\" specifies all addresses with a common prefix of 32 bits to the given address,\nie. just this one address.\n\nThe address \"255.0.0.8/29\" specifies all addresses with a common prefix of 29 bits to the given address:\n255.0.0.8 -&gt; 11111111 00000000 00000000 00001000\nAddresses with common prefix of 29 bits are:\n11111111 00000000 00000000 00001000\n11111111 00000000 00000000 00001001\n11111111 00000000 00000000 00001010\n11111111 00000000 00000000 00001011\n11111111 00000000 00000000 00001100\n11111111 00000000 00000000 00001101\n11111111 00000000 00000000 00001110\n11111111 00000000 00000000 00001111\n\nThe address \"255.0.0.16/32\" specifies all addresses with a common prefix of 32 bits to the given address,\nie. just 11111111 00000000 00000000 00010000.\n\nIn total, the answer specifies the range of 10 ips starting with the address 255.0.0.7 .\n\nThere were other representations, such as:\n[\"255.0.0.7/32\",\"255.0.0.8/30\", \"255.0.0.12/30\", \"255.0.0.16/32\"],\nbut our answer was the shortest possible.\n\nAlso note that a representation beginning with say, \"255.0.0.7/30\" would be incorrect,\nbecause it includes addresses like 255.0.0.4 = 11111111 00000000 00000000 00000100 \nthat are outside the specified range.\n</pre>\n<p></p>\n<p><b>Note:</b><br/>\n</p><ol>\n<li><code>ip</code> will be a valid IPv4 address.</li>\n<li>Every implied address <code>ip + x</code> (for <code>x &lt; n</code>) will be a valid IPv4 address.</li>\n<li><code>n</code> will be an integer in the range <code>[1, 1000]</code>.</li>\n</ol>\n<p></p>\n",
        "companies": [
            "Google",
            "Airbnb"
        ]
    },
    {
        "leetId": "752",
        "link": "open-the-lock",
        "title": "Open the Lock",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "47.6%",
        "questionDescription": "<p>\r\nYou have a lock in front of you with 4 circular wheels.  Each wheel has 10 slots: <code>'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'</code>.  The wheels can rotate freely and wrap around: for example we can turn <code>'9'</code> to be <code>'0'</code>, or <code>'0'</code> to be <code>'9'</code>.  Each move consists of turning one wheel one slot.\r\n</p><p>\r\nThe lock initially starts at <code>'0000'</code>, a string representing the state of the 4 wheels.\r\n</p><p>\r\nYou are given a list of <code>deadends</code> dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\r\n</p><p>\r\nGiven a <code>target</code> representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"\r\n<b>Output:</b> 6\r\n<b>Explanation:</b>\r\nA sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\r\nNote that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\r\nbecause the wheels of the lock become stuck after the display becomes the dead end \"0102\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> deadends = [\"8888\"], target = \"0009\"\r\n<b>Output:</b> 1\r\n<b>Explanation:</b>\r\nWe can turn the last wheel in reverse to move from \"0000\" -> \"0009\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"\r\n<b>Output:</b> -1\r\n<b>Explanation:</b>\r\nWe can't reach the target without getting stuck.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 4:</b><br />\r\n<pre>\r\n<b>Input:</b> deadends = [\"0000\"], target = \"8888\"\r\n<b>Output:</b> -1\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The length of <code>deadends</code> will be in the range <code>[1, 500]</code>.</li>\r\n<li><code>target</code> will not be in the list <code>deadends</code>.</li>\r\n<li>Every string in <code>deadends</code> and the string <code>target</code> will be a string of 4 digits from the 10,000 possibilities <code>'0000'</code> to <code>'9999'</code>.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u4f60\u6709\u4e00\u4e2a\u5e26\u6709\u56db\u4e2a\u5706\u5f62\u62e8\u8f6e\u7684\u8f6c\u76d8\u9501\u3002\u6bcf\u4e2a\u62e8\u8f6e\u90fd\u670910\u4e2a\u6570\u5b57\uff1a <code>&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;</code> \u3002\u6bcf\u4e2a\u62e8\u8f6e\u53ef\u4ee5\u81ea\u7531\u65cb\u8f6c\uff1a\u4f8b\u5982\u628a <code>&#39;9&#39;</code> \u53d8\u4e3a&nbsp; <code>&#39;0&#39;</code><font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\"><span style=\"background-color:#ffffff; font-size:14px\">\uff0c</span></font><code>&#39;0&#39;</code> \u53d8\u4e3a <code>&#39;9&#39;</code> \u3002\u6bcf\u6b21\u65cb\u8f6c\u90fd\u53ea\u80fd\u65cb\u8f6c\u4e00\u4e2a\u62e8\u8f6e\u7684\u4e00\u4f4d\u6570\u5b57\u3002</p>\n\n<p>\u9501\u7684\u521d\u59cb\u6570\u5b57\u4e3a <code>&#39;0000&#39;</code> \uff0c\u4e00\u4e2a\u4ee3\u8868\u56db\u4e2a\u62e8\u8f6e\u7684\u6570\u5b57\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u5217\u8868 <code>deadends</code> \u5305\u542b\u4e86\u4e00\u7ec4\u6b7b\u4ea1\u6570\u5b57\uff0c\u4e00\u65e6\u62e8\u8f6e\u7684\u6570\u5b57\u548c\u5217\u8868\u91cc\u7684\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u76f8\u540c\uff0c\u8fd9\u4e2a\u9501\u5c06\u4f1a\u88ab\u6c38\u4e45\u9501\u5b9a\uff0c\u65e0\u6cd5\u518d\u88ab\u65cb\u8f6c\u3002</p>\n\n<p>\u5b57\u7b26\u4e32 <code>target</code> \u4ee3\u8868\u53ef\u4ee5\u89e3\u9501\u7684\u6570\u5b57\uff0c\u4f60\u9700\u8981\u7ed9\u51fa\u6700\u5c0f\u7684\u65cb\u8f6c\u6b21\u6570\uff0c\u5982\u679c\u65e0\u8bba\u5982\u4f55\u4e0d\u80fd\u89e3\u9501\uff0c\u8fd4\u56de -1\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>deadends = [&quot;0201&quot;,&quot;0101&quot;,&quot;0102&quot;,&quot;1212&quot;,&quot;2002&quot;], target = &quot;0202&quot;\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\n\u53ef\u80fd\u7684\u79fb\u52a8\u5e8f\u5217\u4e3a &quot;0000&quot; -&gt; &quot;1000&quot; -&gt; &quot;1100&quot; -&gt; &quot;1200&quot; -&gt; &quot;1201&quot; -&gt; &quot;1202&quot; -&gt; &quot;0202&quot;\u3002\n\u6ce8\u610f &quot;0000&quot; -&gt; &quot;0001&quot; -&gt; &quot;0002&quot; -&gt; &quot;0102&quot; -&gt; &quot;0202&quot; \u8fd9\u6837\u7684\u5e8f\u5217\u662f\u4e0d\u80fd\u89e3\u9501\u7684\uff0c\n\u56e0\u4e3a\u5f53\u62e8\u52a8\u5230 &quot;0102&quot; \u65f6\u8fd9\u4e2a\u9501\u5c31\u4f1a\u88ab\u9501\u5b9a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> deadends = [&quot;8888&quot;], target = &quot;0009&quot;\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\n\u628a\u6700\u540e\u4e00\u4f4d\u53cd\u5411\u65cb\u8f6c\u4e00\u6b21\u5373\u53ef &quot;0000&quot; -&gt; &quot;0009&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> deadends = [&quot;8887&quot;,&quot;8889&quot;,&quot;8878&quot;,&quot;8898&quot;,&quot;8788&quot;,&quot;8988&quot;,&quot;7888&quot;,&quot;9888&quot;], target = &quot;8888&quot;\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a\n</strong>\u65e0\u6cd5\u65cb\u8f6c\u5230\u76ee\u6807\u6570\u5b57\u4e14\u4e0d\u88ab\u9501\u5b9a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> deadends = [&quot;0000&quot;], target = &quot;8888&quot;\n<strong>\u8f93\u51fa\uff1a</strong>-1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6b7b\u4ea1\u5217\u8868 <code>deadends</code> \u7684\u957f\u5ea6\u8303\u56f4\u4e3a <code>[1, 500]</code>\u3002</li>\n\t<li>\u76ee\u6807\u6570\u5b57 <code>target</code> \u4e0d\u4f1a\u5728 <code>deadends</code> \u4e4b\u4e2d\u3002</li>\n\t<li>\u6bcf\u4e2a <code>deadends</code> \u548c <code>target</code> \u4e2d\u7684\u5b57\u7b26\u4e32\u7684\u6570\u5b57\u4f1a\u5728 10,000 \u4e2a\u53ef\u80fd\u7684\u60c5\u51b5 <code>&#39;0000&#39;</code> \u5230 <code>&#39;9999&#39;</code> \u4e2d\u4ea7\u751f\u3002</li>\n</ol>\n",
        "titleZh": "\u6253\u5f00\u8f6c\u76d8\u9501",
        "tags": [
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "753",
        "link": "cracking-the-safe",
        "title": "Cracking the Safe",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "45.8%",
        "questionDescription": "<p>\r\nThere is a box protected by a password.  The password is <code>n</code> digits, where each letter can be one of the first <code>k</code> digits <code>0, 1, ..., k-1</code>.\r\n</p><p>\r\nYou can keep inputting the password, the password will automatically be matched against the last <code>n</code> digits entered.\r\n</p><p>\r\nFor example, assuming the password is <code>\"345\"</code>, I can open it when I type <code>\"012345\"</code>, but I enter a total of 6 digits.\r\n</p><p>\r\nPlease return any string of minimum length that is guaranteed to open the box after the entire string is inputted.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> n = 1, k = 2\r\n<b>Output:</b> \"01\"\r\n<b>Note:</b> \"10\" will be accepted too.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> n = 2, k = 2\r\n<b>Output:</b> \"00110\"\r\n<b>Note:</b> \"01100\", \"10011\", \"11001\" will be accepted too.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><code>n</code> will be in the range <code>[1, 4]</code>.</li>\r\n<li><code>k</code> will be in the range <code>[1, 10]</code>.</li>\r\n<li><code>k^n</code> will be at most <code>4096</code>.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u6709\u4e00\u4e2a\u9700\u8981\u5bc6\u7801\u624d\u80fd\u6253\u5f00\u7684\u4fdd\u9669\u7bb1\u3002\u5bc6\u7801\u662f&nbsp;<code>n</code> \u4f4d\u6570, \u5bc6\u7801\u7684\u6bcf\u4e00\u4f4d\u662f&nbsp;<code>k</code>&nbsp;\u4f4d\u5e8f\u5217&nbsp;<code>0, 1, ..., k-1</code>&nbsp;\u4e2d\u7684\u4e00\u4e2a \u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u968f\u610f\u8f93\u5165\u5bc6\u7801\uff0c\u4fdd\u9669\u7bb1\u4f1a\u81ea\u52a8\u8bb0\u4f4f\u6700\u540e&nbsp;<code>n</code>&nbsp;\u4f4d\u8f93\u5165\uff0c\u5982\u679c\u5339\u914d\uff0c\u5219\u80fd\u591f\u6253\u5f00\u4fdd\u9669\u7bb1\u3002</p>\n\n<p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u5bc6\u7801\u662f&nbsp;<code>&quot;345&quot;</code>\uff0c\u4f60\u53ef\u4ee5\u8f93\u5165&nbsp;<code>&quot;012345&quot;</code>&nbsp;\u6765\u6253\u5f00\u5b83\uff0c\u53ea\u662f\u4f60\u8f93\u5165\u4e86 6&nbsp;\u4e2a\u5b57\u7b26.</p>\n\n<p>\u8bf7\u8fd4\u56de\u4e00\u4e2a\u80fd\u6253\u5f00\u4fdd\u9669\u7bb1\u7684\u6700\u77ed\u5b57\u7b26\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 1, k = 2\n<strong>\u8f93\u51fa:</strong> &quot;01&quot;\n<strong>\u8bf4\u660e:</strong> &quot;10&quot;\u4e5f\u53ef\u4ee5\u6253\u5f00\u4fdd\u9669\u7bb1\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> n = 2, k = 2\n<strong>\u8f93\u51fa:</strong> &quot;00110&quot;\n<strong>\u8bf4\u660e: </strong>&quot;01100&quot;, &quot;10011&quot;, &quot;11001&quot; \u4e5f\u80fd\u6253\u5f00\u4fdd\u9669\u7bb1\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>n</code> \u7684\u8303\u56f4\u662f&nbsp;<code>[1, 4]</code>\u3002</li>\n\t<li><code>k</code> \u7684\u8303\u56f4\u662f&nbsp;<code>[1, 10]</code>\u3002</li>\n\t<li><code>k^n</code> \u6700\u5927\u53ef\u80fd\u4e3a&nbsp;<code>4096</code>\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u7834\u89e3\u4fdd\u9669\u7bb1",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon"
        ]
    },
    {
        "leetId": "754",
        "link": "reach-a-number",
        "title": "Reach a Number",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "35.6%",
        "questionDescription": "<p>\r\nYou are standing at position <code>0</code> on an infinite number line.  There is a goal at position <code>target</code>.\r\n</p><p>\r\nOn each move, you can either go left or right.  During the <i>n</i>-th move (starting from 1), you take <i>n</i> steps.\r\n</p><p>\r\nReturn the minimum number of steps required to reach the destination.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> target = 3\r\n<b>Output:</b> 2\r\n<b>Explanation:</b>\r\nOn the first move we step from 0 to 1.\r\nOn the second step we step from 1 to 3.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> target = 2\r\n<b>Output:</b> 3\r\n<b>Explanation:</b>\r\nOn the first move we step from 0 to 1.\r\nOn the second move we step  from 1 to -1.\r\nOn the third move we step from -1 to 2.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<li><code>target</code> will be a non-zero integer in the range <code>[-10^9, 10^9]</code>.</li>\r\n</p>",
        "questionDescriptionZh": "<p>\u5728\u4e00\u6839\u65e0\u9650\u957f\u7684\u6570\u8f74\u4e0a\uff0c\u4f60\u7ad9\u5728<code>0</code>\u7684\u4f4d\u7f6e\u3002\u7ec8\u70b9\u5728<code>target</code>\u7684\u4f4d\u7f6e\u3002</p>\n\n<p>\u6bcf\u6b21\u4f60\u53ef\u4ee5\u9009\u62e9\u5411\u5de6\u6216\u5411\u53f3\u79fb\u52a8\u3002\u7b2c n \u6b21\u79fb\u52a8\uff08\u4ece 1 \u5f00\u59cb\uff09\uff0c\u53ef\u4ee5\u8d70 n \u6b65\u3002</p>\n\n<p>\u8fd4\u56de\u5230\u8fbe\u7ec8\u70b9\u9700\u8981\u7684\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> target = 3\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong>\n\u7b2c\u4e00\u6b21\u79fb\u52a8\uff0c\u4ece 0 \u5230 1 \u3002\n\u7b2c\u4e8c\u6b21\u79fb\u52a8\uff0c\u4ece 1 \u5230 3 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> target = 2\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong>\n\u7b2c\u4e00\u6b21\u79fb\u52a8\uff0c\u4ece 0 \u5230 1 \u3002\n\u7b2c\u4e8c\u6b21\u79fb\u52a8\uff0c\u4ece 1 \u5230 -1 \u3002\n\u7b2c\u4e09\u6b21\u79fb\u52a8\uff0c\u4ece -1 \u5230 2 \u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>target</code>\u662f\u5728<code>[-10^9, 10^9]</code>\u8303\u56f4\u4e2d\u7684\u975e\u96f6\u6574\u6570\u3002</li>\n</ul>\n",
        "titleZh": "\u5230\u8fbe\u7ec8\u70b9\u6570\u5b57",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "InMobi"
        ]
    },
    {
        "leetId": "755",
        "link": "pour-water",
        "title": "Pour Water",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "31",
        "questionDescription": "\n<p>\nWe are given an elevation map, <code>heights[i]</code> representing the height of the terrain at that index.  The width at each index is 1.  After <code>V</code> units of water fall at index <code>K</code>, how much water is at each index?\n</p><p>\nWater first drops at index <code>K</code> and rests on top of the highest terrain or water at that index.  Then, it flows according to the following rules:\n</p><li>If the droplet would eventually fall by moving left, then move left.</li>\n<li>Otherwise, if the droplet would eventually fall by moving right, then move right.</li>\n<li>Otherwise, rise at it's current position.</li>\nHere, \"eventually fall\" means that the droplet will eventually be at a lower level if it moves in that direction.\nAlso, \"level\" means the height of the terrain plus any water in that column.\n<p></p><p>\nWe can assume there's infinitely high terrain on the two sides out of bounds of the array.  Also, there could not be partial water being spread out evenly on more than 1 grid block - each unit of water has to be in exactly one block.\n</p><p>\n</p><p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> heights = [2,1,1,2,1,2,2], V = 4, K = 3\n<b>Output:</b> [2,2,2,3,2,2,2]\n<b>Explanation:</b>\n#       #\n#       #\n##  # ###\n#########\n 0123456    &lt;- index\n\nThe first drop of water lands at index K = 3:\n\n#       #\n#   w   #\n##  # ###\n#########\n 0123456    \n\nWhen moving left or right, the water can only move to the same level or a lower level.\n(By level, we mean the total height of the terrain plus any water in that column.)\nSince moving left will eventually make it fall, it moves left.\n(A droplet \"made to fall\" means go to a lower height than it was at previously.)\n\n#       #\n#       #\n## w# ###\n#########\n 0123456    \n\nSince moving left will not make it fall, it stays in place.  The next droplet falls:\n\n#       #\n#   w   #\n## w# ###\n#########\n 0123456  \n\nSince the new droplet moving left will eventually make it fall, it moves left.\nNotice that the droplet still preferred to move left,\neven though it could move right (and moving right makes it fall quicker.)\n\n#       #\n#  w    #\n## w# ###\n#########\n 0123456  \n\n#       #\n#       #\n##ww# ###\n#########\n 0123456  \n\nAfter those steps, the third droplet falls.\nSince moving left would not eventually make it fall, it tries to move right.\nSince moving right would eventually make it fall, it moves right.\n\n#       #\n#   w   #\n##ww# ###\n#########\n 0123456  \n\n#       #\n#       #\n##ww#w###\n#########\n 0123456  \n\nFinally, the fourth droplet falls.\nSince moving left would not eventually make it fall, it tries to move right.\nSince moving right would not eventually make it fall, it stays in place:\n\n#       #\n#   w   #\n##ww#w###\n#########\n 0123456  \n\nThe final answer is [2,2,2,3,2,2,2]:\n\n    #    \n ####### \n ####### \n 0123456 \n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> heights = [1,2,3,4], V = 2, K = 2\n<b>Output:</b> [2,3,3,4]\n<b>Explanation:</b>\nThe last droplet settles at index 1, since moving further left would not cause it to eventually fall to a lower height.\n</pre>\n<p></p>\n<p><b>Example 3:</b><br/>\n</p><pre><b>Input:</b> heights = [3,1,3], V = 5, K = 1\n<b>Output:</b> [4,4,4]\n</pre>\n<p></p>\n<p><b>Note:</b><br/></p><ol>\n<li><code>heights</code> will have length in <code>[1, 100]</code> and contain integers in <code>[0, 99]</code>.</li>\n<li><code>V</code> will be in range <code>[0, 2000]</code>.</li>\n<li><code>K</code> will be in range <code>[0, heights.length - 1]</code>.</li>\n</ol><p></p>\n",
        "questionDescriptionZh": "\n<p>\nWe are given an elevation map, <code>heights[i]</code> representing the height of the terrain at that index.  The width at each index is 1.  After <code>V</code> units of water fall at index <code>K</code>, how much water is at each index?\n</p><p>\nWater first drops at index <code>K</code> and rests on top of the highest terrain or water at that index.  Then, it flows according to the following rules:\n</p><li>If the droplet would eventually fall by moving left, then move left.</li>\n<li>Otherwise, if the droplet would eventually fall by moving right, then move right.</li>\n<li>Otherwise, rise at it's current position.</li>\nHere, \"eventually fall\" means that the droplet will eventually be at a lower level if it moves in that direction.\nAlso, \"level\" means the height of the terrain plus any water in that column.\n<p></p><p>\nWe can assume there's infinitely high terrain on the two sides out of bounds of the array.  Also, there could not be partial water being spread out evenly on more than 1 grid block - each unit of water has to be in exactly one block.\n</p><p>\n</p><p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> heights = [2,1,1,2,1,2,2], V = 4, K = 3\n<b>Output:</b> [2,2,2,3,2,2,2]\n<b>Explanation:</b>\n#       #\n#       #\n##  # ###\n#########\n 0123456    &lt;- index\n\nThe first drop of water lands at index K = 3:\n\n#       #\n#   w   #\n##  # ###\n#########\n 0123456    \n\nWhen moving left or right, the water can only move to the same level or a lower level.\n(By level, we mean the total height of the terrain plus any water in that column.)\nSince moving left will eventually make it fall, it moves left.\n(A droplet \"made to fall\" means go to a lower height than it was at previously.)\n\n#       #\n#       #\n## w# ###\n#########\n 0123456    \n\nSince moving left will not make it fall, it stays in place.  The next droplet falls:\n\n#       #\n#   w   #\n## w# ###\n#########\n 0123456  \n\nSince the new droplet moving left will eventually make it fall, it moves left.\nNotice that the droplet still preferred to move left,\neven though it could move right (and moving right makes it fall quicker.)\n\n#       #\n#  w    #\n## w# ###\n#########\n 0123456  \n\n#       #\n#       #\n##ww# ###\n#########\n 0123456  \n\nAfter those steps, the third droplet falls.\nSince moving left would not eventually make it fall, it tries to move right.\nSince moving right would eventually make it fall, it moves right.\n\n#       #\n#   w   #\n##ww# ###\n#########\n 0123456  \n\n#       #\n#       #\n##ww#w###\n#########\n 0123456  \n\nFinally, the fourth droplet falls.\nSince moving left would not eventually make it fall, it tries to move right.\nSince moving right would not eventually make it fall, it stays in place:\n\n#       #\n#   w   #\n##ww#w###\n#########\n 0123456  \n\nThe final answer is [2,2,2,3,2,2,2]:\n\n    #    \n ####### \n ####### \n 0123456 \n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> heights = [1,2,3,4], V = 2, K = 2\n<b>Output:</b> [2,3,3,4]\n<b>Explanation:</b>\nThe last droplet settles at index 1, since moving further left would not cause it to eventually fall to a lower height.\n</pre>\n<p></p>\n<p><b>Example 3:</b><br/>\n</p><pre><b>Input:</b> heights = [3,1,3], V = 5, K = 1\n<b>Output:</b> [4,4,4]\n</pre>\n<p></p>\n<p><b>Note:</b><br/></p><ol>\n<li><code>heights</code> will have length in <code>[1, 100]</code> and contain integers in <code>[0, 99]</code>.</li>\n<li><code>V</code> will be in range <code>[0, 2000]</code>.</li>\n<li><code>K</code> will be in range <code>[0, heights.length - 1]</code>.</li>\n</ol><p></p>\n",
        "companies": [
            "Airbnb"
        ]
    },
    {
        "leetId": "756",
        "link": "pyramid-transition-matrix",
        "title": "Pyramid Transition Matrix",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "48.8%",
        "questionDescription": "<p>\r\nWe are stacking blocks to form a pyramid.  Each block has a color which is a one letter string, like `'Z'`.\r\n</p><p>\r\nFor every block of color `C` we place not in the bottom row, we are placing it on top of a left block of color `A` and right block of color `B`.  We are allowed to place the block there only if `(A, B, C)` is an allowed triple.\r\n</p><p>\r\nWe start with a bottom row of <code>bottom</code>, represented as a single string.  We also start with a list of allowed triples <code>allowed</code>.  Each allowed triple is represented as a string of length 3.\r\n</p><p>\r\nReturn true if we can build the pyramid all the way to the top, otherwise false.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> bottom = \"XYZ\", allowed = [\"XYD\", \"YZE\", \"DEA\", \"FFF\"]\r\n<b>Output:</b> true\r\n<b>Explanation:</b>\r\nWe can stack the pyramid like this:\r\n    A\r\n   / \\\r\n  D   E\r\n / \\ / \\\r\nX   Y   Z\r\n\r\nThis works because ('X', 'Y', 'D'), ('Y', 'Z', 'E'), and ('D', 'E', 'A') are allowed triples.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> bottom = \"XXYX\", allowed = [\"XXX\", \"XXY\", \"XYX\", \"XYY\", \"YXZ\"]\r\n<b>Output:</b> false\r\n<b>Explanation:</b>\r\nWe can't stack the pyramid to the top.\r\nNote that there could be allowed triples (A, B, C) and (A, B, D) with C != D.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><code>bottom</code> will be a string with length in range <code>[2, 8]</code>.</li>\r\n<li><code>allowed</code> will have length in range <code>[0, 200]</code>.</li>\r\n<li>Letters in all strings will be chosen from the set <code>{'A', 'B', 'C', 'D', 'E', 'F', 'G'}</code>.</li>\r\n</ol>\r\n</p>",
        "questionDescriptionZh": "<p>\u73b0\u5728\uff0c\u6211\u4eec\u7528\u4e00\u4e9b\u65b9\u5757\u6765\u5806\u780c\u4e00\u4e2a\u91d1\u5b57\u5854\u3002 \u6bcf\u4e2a\u65b9\u5757\u7528\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u4f8b\u5982 &ldquo;Z&rdquo;\u3002</p>\n\n<p>\u4f7f\u7528\u4e09\u5143\u7ec4\u8868\u793a\u91d1\u5b57\u5854\u7684\u5806\u780c\u89c4\u5219\u5982\u4e0b\uff1a</p>\n\n<p>(A, B, C) \u8868\u793a\uff0c&ldquo;C&rdquo;\u4e3a\u9876\u5c42\u65b9\u5757\uff0c\u65b9\u5757&ldquo;A&rdquo;\u3001&ldquo;B&rdquo;\u5206\u522b\u4f5c\u4e3a\u65b9\u5757&ldquo;C&rdquo;\u4e0b\u4e00\u5c42\u7684\u7684\u5de6\u3001\u53f3\u5b50\u5757\u3002\u5f53\u4e14\u4ec5\u5f53(A, B, C)\u662f\u88ab\u5141\u8bb8\u7684\u4e09\u5143\u7ec4\uff0c\u6211\u4eec\u624d\u53ef\u4ee5\u5c06\u5176\u5806\u780c\u4e0a\u3002</p>\n\n<p>\u521d\u59cb\u65f6\uff0c\u7ed9\u5b9a\u91d1\u5b57\u5854\u7684\u57fa\u5c42&nbsp;<code>bottom</code>\uff0c\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u3002\u4e00\u4e2a\u5141\u8bb8\u7684\u4e09\u5143\u7ec4\u5217\u8868&nbsp;<code>allowed</code>\uff0c\u6bcf\u4e2a\u4e09\u5143\u7ec4\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a 3 \u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002</p>\n\n<p>\u5982\u679c\u53ef\u4ee5\u7531\u57fa\u5c42\u4e00\u76f4\u5806\u5230\u5854\u5c16\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> bottom = &quot;XYZ&quot;, allowed = [&quot;XYD&quot;, &quot;YZE&quot;, &quot;DEA&quot;, &quot;FFF&quot;]\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u6790:</strong>\n\u53ef\u4ee5\u5806\u780c\u6210\u8fd9\u6837\u7684\u91d1\u5b57\u5854:\n    A\n   / \\\n  D   E\n / \\ / \\\nX   Y   Z\n\n\u56e0\u4e3a\u7b26\u5408(&#39;X&#39;, &#39;Y&#39;, &#39;D&#39;), (&#39;Y&#39;, &#39;Z&#39;, &#39;E&#39;) \u548c (&#39;D&#39;, &#39;E&#39;, &#39;A&#39;) \u4e09\u79cd\u89c4\u5219\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> bottom = &quot;XXYX&quot;, allowed = [&quot;XXX&quot;, &quot;XXY&quot;, &quot;XYX&quot;, &quot;XYY&quot;, &quot;YXZ&quot;]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u6790:</strong>\n\u65e0\u6cd5\u4e00\u76f4\u5806\u5230\u5854\u5c16\u3002\n\u6ce8\u610f, \u5141\u8bb8\u5b58\u5728\u4e09\u5143\u7ec4(A, B, C)\u548c (A, B, D) \uff0c\u5176\u4e2d C != D.\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li><code>bottom</code> \u7684\u957f\u5ea6\u8303\u56f4\u5728&nbsp;<code>[2, 8]</code>\u3002</li>\n\t<li><code>allowed</code> \u7684\u957f\u5ea6\u8303\u56f4\u5728<code>[0, 200]</code>\u3002</li>\n\t<li>\u65b9\u5757\u7684\u6807\u8bb0\u5b57\u6bcd\u8303\u56f4\u4e3a<code>{&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;}</code>\u3002</li>\n</ol>\n",
        "titleZh": "\u91d1\u5b57\u5854\u8f6c\u6362\u77e9\u9635",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Airbnb"
        ]
    },
    {
        "leetId": "757",
        "link": "set-intersection-size-at-least-two",
        "title": "Set Intersection Size At Least Two",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "27.9%",
        "questionDescription": "<p>\r\nAn integer interval <code>[a, b]</code> (for integers <code>a < b</code>) is a set of all consecutive integers from <code>a</code> to <code>b</code>, including <code>a</code> and <code>b</code>.\r\n</p><p>\r\nFind the minimum size of a set S such that for every integer interval A in <code>intervals</code>, the intersection of S with A has size at least 2.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> intervals = [[1, 3], [1, 4], [2, 5], [3, 5]]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b>\r\nConsider the set S = {2, 3, 4}.  For each interval, there are at least 2 elements from S in the interval.\r\nAlso, there isn't a smaller size set that fulfills the above condition.\r\nThus, we output the size of this set, which is 3.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> intervals = [[1, 2], [2, 3], [2, 4], [4, 5]]\r\n<b>Output:</b> 5\r\n<b>Explanation:</b>\r\nAn example of a minimum sized set is {1, 2, 3, 4, 5}.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br><ol>\r\n<li><code>intervals</code> will have length in range <code>[1, 3000]</code>.</li>\r\n<li><code>intervals[i]</code> will have length <code>2</code>, representing some integer interval.</li>\r\n<li><code>intervals[i][j]</code> will be an integer in <code>[0, 10^8]</code>.</li>\r\n</ol></p>",
        "questionDescriptionZh": "<p>\u4e00\u4e2a\u6574\u6570\u533a\u95f4&nbsp;<code>[a, b]</code>&nbsp;&nbsp;(&nbsp;<code>a &lt; b</code>&nbsp;) \u4ee3\u8868\u7740\u4ece&nbsp;<code>a</code>&nbsp;\u5230&nbsp;<code>b</code>&nbsp;\u7684\u6240\u6709\u8fde\u7eed\u6574\u6570\uff0c\u5305\u62ec&nbsp;<code>a</code>&nbsp;\u548c&nbsp;<code>b</code>\u3002</p>\n\n<p>\u7ed9\u4f60\u4e00\u7ec4\u6574\u6570\u533a\u95f4<code>intervals</code>\uff0c\u8bf7\u627e\u5230\u4e00\u4e2a\u6700\u5c0f\u7684\u96c6\u5408 S\uff0c\u4f7f\u5f97 S \u91cc\u7684\u5143\u7d20\u4e0e\u533a\u95f4<code>intervals</code>\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6574\u6570\u533a\u95f4\u90fd\u81f3\u5c11\u67092\u4e2a\u5143\u7d20\u76f8\u4ea4\u3002</p>\n\n<p>\u8f93\u51fa\u8fd9\u4e2a\u6700\u5c0f\u96c6\u5408S\u7684\u5927\u5c0f\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> intervals = [[1, 3], [1, 4], [2, 5], [3, 5]]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong>\n\u8003\u8651\u96c6\u5408 S = {2, 3, 4}. S\u4e0eintervals\u4e2d\u7684\u56db\u4e2a\u533a\u95f4\u90fd\u6709\u81f3\u5c112\u4e2a\u76f8\u4ea4\u7684\u5143\u7d20\u3002\n\u4e14\u8fd9\u662fS\u6700\u5c0f\u7684\u60c5\u51b5\uff0c\u6545\u6211\u4eec\u8f93\u51fa3\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> intervals = [[1, 2], [2, 3], [2, 4], [4, 5]]\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong>\n\u6700\u5c0f\u7684\u96c6\u5408S = {1, 2, 3, 4, 5}.\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>intervals</code>&nbsp;\u7684\u957f\u5ea6\u8303\u56f4\u4e3a<code>[1, 3000]</code>\u3002</li>\n\t<li><code>intervals[i]</code>&nbsp;\u957f\u5ea6\u4e3a&nbsp;<code>2</code>\uff0c\u5206\u522b\u4ee3\u8868\u5de6\u3001\u53f3\u8fb9\u754c\u3002</li>\n\t<li><code>intervals[i][j]</code> \u7684\u503c\u662f&nbsp;<code>[0, 10^8]</code>\u8303\u56f4\u5185\u7684\u6574\u6570\u3002</li>\n</ol>\n",
        "titleZh": " \u8bbe\u7f6e\u4ea4\u96c6\u5927\u5c0f\u81f3\u5c11\u4e3a2",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Drawbridge"
        ]
    },
    {
        "leetId": "758",
        "link": "bold-words-in-string",
        "title": "Bold Words in String",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "0",
        "questionDescription": "\n<p>\nGiven a set of keywords <code>words</code> and a string <code>S</code>, make all appearances of all keywords in <code>S</code> bold.  Any letters between <code>&lt;b&gt;</code> and <code>&lt;/b&gt;</code> tags become bold.\n</p><p>\nThe returned string should use the least number of tags possible, and of course the tags should form a valid combination.\n</p>\n<p>\nFor example, given that <code>words = [\"ab\", \"bc\"]</code> and  <code>S = \"aabcd\"</code>, we should return <code>\"a&lt;b&gt;abc&lt;/b&gt;d\"</code>.  Note that returning <code>\"a&lt;b&gt;a&lt;b&gt;b&lt;/b&gt;c&lt;/b&gt;d\"</code> would use more tags, so it is incorrect.\n</p>\n<p><b>Note:</b></p><ol>\n<li><code>words</code> has length in range <code>[0, 50]</code>.</li>\n<li><code>words[i]</code> has length in range <code>[1, 10]</code>.</li>\n<li><code>S</code> has length in range <code>[0, 500]</code>.</li>\n<li>All characters in <code>words[i]</code> and <code>S</code> are lowercase letters.</li>\n</ol><p></p>\n",
        "questionDescriptionZh": "\n<p>\nGiven a set of keywords <code>words</code> and a string <code>S</code>, make all appearances of all keywords in <code>S</code> bold.  Any letters between <code>&lt;b&gt;</code> and <code>&lt;/b&gt;</code> tags become bold.\n</p><p>\nThe returned string should use the least number of tags possible, and of course the tags should form a valid combination.\n</p>\n<p>\nFor example, given that <code>words = [\"ab\", \"bc\"]</code> and  <code>S = \"aabcd\"</code>, we should return <code>\"a&lt;b&gt;abc&lt;/b&gt;d\"</code>.  Note that returning <code>\"a&lt;b&gt;a&lt;b&gt;b&lt;/b&gt;c&lt;/b&gt;d\"</code> would use more tags, so it is incorrect.\n</p>\n<p><b>Note:</b></p><ol>\n<li><code>words</code> has length in range <code>[0, 50]</code>.</li>\n<li><code>words[i]</code> has length in range <code>[1, 10]</code>.</li>\n<li><code>S</code> has length in range <code>[0, 500]</code>.</li>\n<li>All characters in <code>words[i]</code> and <code>S</code> are lowercase letters.</li>\n</ol><p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "759",
        "link": "employee-free-time",
        "title": "Employee Free Time",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "47",
        "questionDescription": "\n<p>\nWe are given a list <code>schedule</code> of employees, which represents the working time for each employee.\n</p><p>\nEach employee has a list of non-overlapping <code>Intervals</code>, and these intervals are in sorted order.\n</p><p>\nReturn the list of finite intervals representing <b>common, positive-length free time</b> for <i>all</i> employees, also in sorted order.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]\n<b>Output:</b> [[3,4]]\n<b>Explanation:</b>\nThere are a total of three employees, and all common\nfree time intervals would be [-inf, 1], [3, 4], [10, inf].\nWe discard any intervals that contain inf as they aren't finite.\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]\n<b>Output:</b> [[5,6],[7,9]]\n</pre>\n<p></p>\n<p>\n(Even though we are representing <code>Intervals</code> in the form <code>[x, y]</code>, the objects inside are <code>Intervals</code>, not lists or arrays.  For example, <code>schedule[0][0].start = 1, schedule[0][0].end = 2</code>, and <code>schedule[0][0][0]</code> is not defined.)\n</p><p>\nAlso, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.\n</p>\n<p><b>Note:</b></p><ol>\n<li><code>schedule</code> and <code>schedule[i]</code> are lists with lengths in range <code>[1, 50]</code>.</li>\n<li><code>0 &lt;= schedule[i].start &lt; schedule[i].end &lt;= 10^8</code>.</li>\n</ol><p></p>\n",
        "questionDescriptionZh": "\n<p>\nWe are given a list <code>schedule</code> of employees, which represents the working time for each employee.\n</p><p>\nEach employee has a list of non-overlapping <code>Intervals</code>, and these intervals are in sorted order.\n</p><p>\nReturn the list of finite intervals representing <b>common, positive-length free time</b> for <i>all</i> employees, also in sorted order.\n</p>\n<p><b>Example 1:</b><br/>\n</p><pre><b>Input:</b> schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]\n<b>Output:</b> [[3,4]]\n<b>Explanation:</b>\nThere are a total of three employees, and all common\nfree time intervals would be [-inf, 1], [3, 4], [10, inf].\nWe discard any intervals that contain inf as they aren't finite.\n</pre>\n<p></p>\n<p><b>Example 2:</b><br/>\n</p><pre><b>Input:</b> schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]\n<b>Output:</b> [[5,6],[7,9]]\n</pre>\n<p></p>\n<p>\n(Even though we are representing <code>Intervals</code> in the form <code>[x, y]</code>, the objects inside are <code>Intervals</code>, not lists or arrays.  For example, <code>schedule[0][0].start = 1, schedule[0][0].end = 2</code>, and <code>schedule[0][0][0]</code> is not defined.)\n</p><p>\nAlso, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.\n</p>\n<p><b>Note:</b></p><ol>\n<li><code>schedule</code> and <code>schedule[i]</code> are lists with lengths in range <code>[1, 50]</code>.</li>\n<li><code>0 &lt;= schedule[i].start &lt; schedule[i].end &lt;= 10^8</code>.</li>\n</ol><p></p>\n",
        "companies": [
            "Google",
            "Microsoft",
            "Uber",
            "Airbnb",
            "Pinterest",
            "Intuit"
        ]
    },
    {
        "leetId": "760",
        "link": "find-anagram-mappings",
        "title": "Find Anagram Mappings",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "13",
        "questionDescription": "\n<p>\nGiven two lists <code>A</code>and <code>B</code>, and <code>B</code> is an anagram of <code>A</code>. <code>B</code> is an anagram of <code>A</code> means <code>B</code> is made by randomizing the order of the elements in <code>A</code>.\n</p><p>\nWe want to find an <i>index mapping</i> <code>P</code>, from <code>A</code> to <code>B</code>. A mapping <code>P[i] = j</code> means the <code>i</code>th element in <code>A</code> appears in <code>B</code> at index <code>j</code>.\n</p><p>\nThese lists <code>A</code> and <code>B</code> may contain duplicates.  If there are multiple answers, output any of them.\n</p>\n<p>\nFor example, given\n</p><pre>A = [12, 28, 46, 32, 50]\nB = [50, 12, 32, 46, 28]\n</pre>\n<p></p>\nWe should return\n<pre>[1, 4, 3, 2, 0]\n</pre>\nas <code>P[0] = 1</code> because the <code>0</code>th element of <code>A</code> appears at <code>B[1]</code>,\nand <code>P[1] = 4</code> because the <code>1</code>st element of <code>A</code> appears at <code>B[4]</code>,\nand so on.\n<p></p>\n<p><b>Note:</b></p><ol>\n<li><code>A, B</code> have equal lengths in range <code>[1, 100]</code>.</li>\n<li><code>A[i], B[i]</code> are integers in range <code>[0, 10^5]</code>.</li>\n</ol><p></p>\n",
        "questionDescriptionZh": "\n<p>\nGiven two lists <code>A</code>and <code>B</code>, and <code>B</code> is an anagram of <code>A</code>. <code>B</code> is an anagram of <code>A</code> means <code>B</code> is made by randomizing the order of the elements in <code>A</code>.\n</p><p>\nWe want to find an <i>index mapping</i> <code>P</code>, from <code>A</code> to <code>B</code>. A mapping <code>P[i] = j</code> means the <code>i</code>th element in <code>A</code> appears in <code>B</code> at index <code>j</code>.\n</p><p>\nThese lists <code>A</code> and <code>B</code> may contain duplicates.  If there are multiple answers, output any of them.\n</p>\n<p>\nFor example, given\n</p><pre>A = [12, 28, 46, 32, 50]\nB = [50, 12, 32, 46, 28]\n</pre>\n<p></p>\nWe should return\n<pre>[1, 4, 3, 2, 0]\n</pre>\nas <code>P[0] = 1</code> because the <code>0</code>th element of <code>A</code> appears at <code>B[1]</code>,\nand <code>P[1] = 4</code> because the <code>1</code>st element of <code>A</code> appears at <code>B[4]</code>,\nand so on.\n<p></p>\n<p><b>Note:</b></p><ol>\n<li><code>A, B</code> have equal lengths in range <code>[1, 100]</code>.</li>\n<li><code>A[i], B[i]</code> are integers in range <code>[0, 10^5]</code>.</li>\n</ol><p></p>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "761",
        "link": "special-binary-string",
        "title": "Special Binary String",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "51.2%",
        "questionDescription": "<p>\r\n<i>Special</i> binary strings are binary strings with the following two properties:\r\n</p><p>\r\n<li>The number of 0's is equal to the number of 1's.</li>\r\n<li>Every prefix of the binary string has at least as many 1's as 0's.</li>\r\n</p><p>\r\nGiven a special string <code>S</code>, a <i>move</i> consists of choosing two consecutive, non-empty, special substrings of <code>S</code>, and swapping them.  <i>(Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.)</i>\r\n</p><p>\r\nAt the end of any number of moves, what is the lexicographically largest resulting string possible?\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> S = \"11011000\"\r\n<b>Output:</b> \"11100100\"\r\n<b>Explanation:</b>\r\nThe strings \"10\" [occuring at S[1]] and \"1100\" [at S[3]] are swapped.\r\nThis is the lexicographically largest string possible after some number of swaps.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><ol>\r\n<li><code>S</code> has length at most <code>50</code>.</li>\r\n<li><code>S</code> is guaranteed to be a <i>special</i> binary string as defined above.</li>\r\n</ol></p>",
        "questionDescriptionZh": "<p>\u7279\u6b8a\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\u662f\u5177\u6709\u4ee5\u4e0b\u4e24\u4e2a\u6027\u8d28\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\uff1a</p>\n\n<ul>\n\t<li>0 \u7684\u6570\u91cf\u4e0e 1 \u7684\u6570\u91cf\u76f8\u7b49\u3002</li>\n\t<li>\u4e8c\u8fdb\u5236\u5e8f\u5217\u7684\u6bcf\u4e00\u4e2a\u524d\u7f00\u7801\u4e2d 1 \u7684\u6570\u91cf\u8981\u5927\u4e8e\u7b49\u4e8e 0 \u7684\u6570\u91cf\u3002</li>\n</ul>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u7279\u6b8a\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217&nbsp;<code>S</code>\uff0c\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\u3002\u5b9a\u4e49\u4e00\u4e2a<em>\u64cd\u4f5c </em>\u4e3a\u9996\u5148\u9009\u62e9&nbsp;<code>S</code>&nbsp;\u7684\u4e24\u4e2a\u8fde\u7eed\u4e14\u975e\u7a7a\u7684\u7279\u6b8a\u7684\u5b50\u4e32\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4ea4\u6362\u3002\uff08\u4e24\u4e2a\u5b50\u4e32\u4e3a\u8fde\u7eed\u7684\u5f53\u4e14\u4ec5\u5f53\u7b2c\u4e00\u4e2a\u5b50\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u6070\u597d\u4e3a\u7b2c\u4e8c\u4e2a\u5b50\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u524d\u4e00\u4e2a\u5b57\u7b26\u3002)</p>\n\n<p>\u5728\u4efb\u610f\u6b21\u6570\u7684\u64cd\u4f5c\u4e4b\u540e\uff0c\u4ea4\u6362\u540e\u7684\u5b57\u7b26\u4e32\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5217\u7684\u6700\u5927\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> S = &quot;11011000&quot;\n<strong>\u8f93\u51fa:</strong> &quot;11100100&quot;\n<strong>\u89e3\u91ca:</strong>\n\u5c06\u5b50\u4e32 &quot;10&quot; \uff08\u5728S[1]\u51fa\u73b0\uff09 \u548c &quot;1100&quot; \uff08\u5728S[3]\u51fa\u73b0\uff09\u8fdb\u884c\u4ea4\u6362\u3002\n\u8fd9\u662f\u5728\u8fdb\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\u540e\u6309\u5b57\u5178\u5e8f\u6392\u5217\u6700\u5927\u7684\u7ed3\u679c\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li><code>S</code>&nbsp;\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7&nbsp;<code>50</code>\u3002</li>\n\t<li><code>S</code>&nbsp;\u4fdd\u8bc1\u4e3a\u4e00\u4e2a\u6ee1\u8db3\u4e0a\u8ff0\u5b9a\u4e49\u7684<em>\u7279\u6b8a </em>\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217\u3002</li>\n</ol>\n",
        "titleZh": "\u7279\u6b8a\u7684\u4e8c\u8fdb\u5236\u5e8f\u5217",
        "tags": [
            {
                "tag": "Recursion",
                "link": "recursion",
                "tagZh": "\u9012\u5f52"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Coursera",
            "Quip"
        ]
    },
    {
        "leetId": "762",
        "link": "prime-number-of-set-bits-in-binary-representation",
        "title": "Prime Number of Set Bits in Binary Representation",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "59.4%",
        "questionDescription": "<p>\r\nGiven two integers <code>L</code> and <code>R</code>, find the count of numbers in the range <code>[L, R]</code> (inclusive) having a prime number of set bits in their binary representation.\r\n</p><p>\r\n(Recall that the number of set bits an integer has is the number of <code>1</code>s present when written in binary.  For example, <code>21</code> written in binary is <code>10101</code> which has 3 set bits.  Also, 1 is not a prime.)\r\n</p><p>\r\n\r\n<p><b>Example 1:</b><br /><pre>\r\n<b>Input:</b> L = 6, R = 10\r\n<b>Output:</b> 4\r\n<b>Explanation:</b>\r\n6 -> 110 (2 set bits, 2 is prime)\r\n7 -> 111 (3 set bits, 3 is prime)\r\n9 -> 1001 (2 set bits , 2 is prime)\r\n10->1010 (2 set bits , 2 is prime)\r\n</pre></p>\r\n\r\n<p><b>Example 2:</b><br /><pre>\r\n<b>Input:</b> L = 10, R = 15\r\n<b>Output:</b> 5\r\n<b>Explanation:</b>\r\n10 -> 1010 (2 set bits, 2 is prime)\r\n11 -> 1011 (3 set bits, 3 is prime)\r\n12 -> 1100 (2 set bits, 2 is prime)\r\n13 -> 1101 (3 set bits, 3 is prime)\r\n14 -> 1110 (3 set bits, 3 is prime)\r\n15 -> 1111 (4 set bits, 4 is not prime)\r\n</pre></p>\r\n\r\n<p><b>Note:</b><br><ol>\r\n<li><code>L, R</code> will be integers <code>L <= R</code> in the range <code>[1, 10^6]</code>.</li>\r\n<li><code>R - L</code> will be at most 10000.</li>\r\n</ol></p>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570&nbsp;<code>L</code>&nbsp;\u548c&nbsp;<code>R</code>&nbsp;\uff0c\u627e\u5230\u95ed\u533a\u95f4&nbsp;<code>[L, R]</code>&nbsp;\u8303\u56f4\u5185\uff0c\u8ba1\u7b97\u7f6e\u4f4d\u4f4d\u6570\u4e3a\u8d28\u6570\u7684\u6574\u6570\u4e2a\u6570\u3002</p>\n\n<p>\uff08\u6ce8\u610f\uff0c\u8ba1\u7b97\u7f6e\u4f4d\u4ee3\u8868\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u4f8b\u5982&nbsp;<code>21</code>&nbsp;\u7684\u4e8c\u8fdb\u5236\u8868\u793a&nbsp;<code>10101</code>&nbsp;\u6709 3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\u3002\u8fd8\u6709\uff0c1 \u4e0d\u662f\u8d28\u6570\u3002\uff09</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> L = 6, R = 10\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong>\n6 -&gt; 110 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570)\n7 -&gt; 111 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c3 \u662f\u8d28\u6570)\n9 -&gt; 1001 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570)\n10-&gt; 1010 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d\uff0c2 \u662f\u8d28\u6570)\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> L = 10, R = 15\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong>\n10 -&gt; 1010 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 2 \u662f\u8d28\u6570)\n11 -&gt; 1011 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570)\n12 -&gt; 1100 (2 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 2 \u662f\u8d28\u6570)\n13 -&gt; 1101 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570)\n14 -&gt; 1110 (3 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 3 \u662f\u8d28\u6570)\n15 -&gt; 1111 (4 \u4e2a\u8ba1\u7b97\u7f6e\u4f4d, 4 \u4e0d\u662f\u8d28\u6570)\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>L, R</code>&nbsp;\u662f&nbsp;<code>L &lt;= R</code>&nbsp;\u4e14\u5728&nbsp;<code>[1, 10^6]</code>&nbsp;\u4e2d\u7684\u6574\u6570\u3002</li>\n\t<li><code>R - L</code>&nbsp;\u7684\u6700\u5927\u503c\u4e3a 10000\u3002</li>\n</ol>\n",
        "titleZh": "\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u8d28\u6570\u4e2a\u8ba1\u7b97\u7f6e\u4f4d",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "763",
        "link": "partition-labels",
        "title": "Partition Labels",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "64.0%",
        "questionDescription": "<p>\r\nA string <code>S</code> of lowercase letters is given.  We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.\r\n</p><p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> S = \"ababcbacadefegdehijhklij\"\r\n<b>Output:</b> [9,7,8]\r\n<b>Explanation:</b>\r\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\r\nThis is a partition so that each letter appears in at most one part.\r\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits S into less parts.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br><ol>\r\n<li><code>S</code> will have length in range <code>[1, 500]</code>.</li>\r\n<li><code>S</code> will consist of lowercase letters (<code>'a'</code> to <code>'z'</code>) only.</li>\r\n</ol></p>",
        "questionDescriptionZh": "<p>\u5b57\u7b26\u4e32 <code>S</code> \u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\u6211\u4eec\u8981\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5212\u5206\u4e3a\u5c3d\u53ef\u80fd\u591a\u7684\u7247\u6bb5\uff0c\u540c\u4e00\u4e2a\u5b57\u6bcd\u53ea\u4f1a\u51fa\u73b0\u5728\u5176\u4e2d\u7684\u4e00\u4e2a\u7247\u6bb5\u3002\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7247\u6bb5\u7684\u957f\u5ea6\u7684\u5217\u8868\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> S = &quot;ababcbacadefegdehijhklij&quot;\n<strong>\u8f93\u51fa:</strong> [9,7,8]\n<strong>\u89e3\u91ca:</strong>\n\u5212\u5206\u7ed3\u679c\u4e3a &quot;ababcbaca&quot;, &quot;defegde&quot;, &quot;hijhklij&quot;\u3002\n\u6bcf\u4e2a\u5b57\u6bcd\u6700\u591a\u51fa\u73b0\u5728\u4e00\u4e2a\u7247\u6bb5\u4e2d\u3002\n\u50cf &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; \u7684\u5212\u5206\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u5212\u5206\u7684\u7247\u6bb5\u6570\u8f83\u5c11\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>S</code>\u7684\u957f\u5ea6\u5728<code>[1, 500]</code>\u4e4b\u95f4\u3002</li>\n\t<li><code>S</code>\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd<code>&#39;a&#39;</code>\u5230<code>&#39;z&#39;</code>\u3002</li>\n</ol>\n",
        "titleZh": "\u5212\u5206\u5b57\u6bcd\u533a\u95f4",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "764",
        "link": "largest-plus-sign",
        "title": "Largest Plus Sign",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "44.7%",
        "questionDescription": "<p>\r\nIn a 2D <code>grid</code> from (0, 0) to (N-1, N-1), every cell contains a <code>1</code>, except those cells in the given list <code>mines</code> which are <code>0</code>.  What is the largest axis-aligned plus sign of <code>1</code>s contained in the grid?  Return the order of the plus sign.  If there is none, return 0.\r\n</p><p>\r\nAn \"<i>axis-aligned plus sign of <code>1</code>s</i> of order <b>k</b>\" has some center <code>grid[x][y] = 1</code> along with 4 arms of length <code>k-1</code> going up, down, left, and right, and made of <code>1</code>s.  This is demonstrated in the diagrams below.  Note that there could be <code>0</code>s or <code>1</code>s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1s.\r\n</p><p>\r\n\r\n<p><b>Examples of Axis-Aligned Plus Signs of Order k:</b><br /><pre>\r\nOrder 1:\r\n000\r\n0<b>1</b>0\r\n000\r\n\r\nOrder 2:\r\n00000\r\n00<b>1</b>00\r\n0<b>111</b>0\r\n00<b>1</b>00\r\n00000\r\n\r\nOrder 3:\r\n0000000\r\n000<b>1</b>000\r\n000<b>1</b>000\r\n0<b>11111</b>0\r\n000<b>1</b>000\r\n000<b>1</b>000\r\n0000000\r\n</pre></p>\r\n\r\n<p><b>Example 1:</b><br /><pre>\r\n<b>Input:</b> N = 5, mines = [[4, 2]]\r\n<b>Output:</b> 2\r\n<b>Explanation:</b>\r\n11111\r\n11111\r\n1<b>1</b>111\r\n<b>111</b>11\r\n1<b>1</b>011\r\nIn the above grid, the largest plus sign can only be order 2.  One of them is marked in bold.\r\n</pre></p>\r\n\r\n<p><b>Example 2:</b><br /><pre>\r\n<b>Input:</b> N = 2, mines = []\r\n<b>Output:</b> 1\r\n<b>Explanation:</b>\r\nThere is no plus sign of order 2, but there is of order 1.\r\n</pre></p>\r\n\r\n<p><b>Example 3:</b><br /><pre>\r\n<b>Input:</b> N = 1, mines = [[0, 0]]\r\n<b>Output:</b> 0\r\n<b>Explanation:</b>\r\nThere is no plus sign, so return 0.\r\n</pre></p>\r\n\r\n<p><b>Note:</b><br><ol>\r\n<li><code>N</code> will be an integer in the range <code>[1, 500]</code>.</li>\r\n<li><code>mines</code> will have length at most <code>5000</code>.</li>\r\n<li><code>mines[i]</code> will be length 2 and consist of integers in the range <code>[0, N-1]</code>.</li>\r\n<li><i>(Additionally, programs submitted in C, C++, or C# will be judged with a slightly smaller time limit.)</i></li>\r\n</ol></p>",
        "questionDescriptionZh": "<p>\u5728\u4e00\u4e2a\u5927\u5c0f\u5728 (0, 0) \u5230 (N-1, N-1) \u76842D\u7f51\u683c&nbsp;<code>grid</code>&nbsp;\u4e2d\uff0c\u9664\u4e86\u5728&nbsp;<code>mines</code>&nbsp;\u4e2d\u7ed9\u51fa\u7684\u5355\u5143\u4e3a&nbsp;<code>0</code>\uff0c\u5176\u4ed6\u6bcf\u4e2a\u5355\u5143\u90fd\u662f&nbsp;<code>1</code>\u3002\u7f51\u683c\u4e2d\u5305\u542b&nbsp;<code>1</code>&nbsp;\u7684\u6700\u5927\u7684\u8f74\u5bf9\u9f50\u52a0\u53f7\u6807\u5fd7\u662f\u591a\u5c11\u9636\uff1f\u8fd4\u56de\u52a0\u53f7\u6807\u5fd7\u7684\u9636\u6570\u3002\u5982\u679c\u672a\u627e\u5230\u52a0\u53f7\u6807\u5fd7\uff0c\u5219\u8fd4\u56de 0\u3002</p>\n\n<p>\u4e00\u4e2a&nbsp;<strong>k</strong>&quot; \u9636\u7531&nbsp;<em><code>1</code></em>&nbsp;\u7ec4\u6210\u7684&ldquo;\u8f74\u5bf9\u79f0&rdquo;\u52a0\u53f7\u6807\u5fd7\u5177\u6709\u4e2d\u5fc3\u7f51\u683c&nbsp;&nbsp;<code>grid[x][y] = 1</code>&nbsp;\uff0c\u4ee5\u53ca4\u4e2a\u4ece\u4e2d\u5fc3\u5411\u4e0a\u3001\u5411\u4e0b\u3001\u5411\u5de6\u3001\u5411\u53f3\u5ef6\u4f38\uff0c\u957f\u5ea6\u4e3a&nbsp;<code>k-1</code>\uff0c\u7531&nbsp;<code>1</code>&nbsp;\u7ec4\u6210\u7684\u81c2\u3002\u4e0b\u9762\u7ed9\u51fa&nbsp;<strong>k</strong>&quot; \u9636&ldquo;\u8f74\u5bf9\u79f0&rdquo;\u52a0\u53f7\u6807\u5fd7\u7684\u793a\u4f8b\u3002\u6ce8\u610f\uff0c\u53ea\u6709\u52a0\u53f7\u6807\u5fd7\u7684\u6240\u6709\u7f51\u683c\u8981\u6c42\u4e3a 1\uff0c\u522b\u7684\u7f51\u683c\u53ef\u80fd\u4e3a 0 \u4e5f\u53ef\u80fd\u4e3a 1\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>k \u9636\u8f74\u5bf9\u79f0\u52a0\u53f7\u6807\u5fd7\u793a\u4f8b:</strong></p>\n\n<pre>\n\u9636 1:\n000\n0<strong>1</strong>0\n000\n\n\u9636 2:\n00000\n00<strong>1</strong>00\n0<strong>111</strong>0\n00<strong>1</strong>00\n00000\n\n\u9636 3:\n0000000\n000<strong>1</strong>000\n000<strong>1</strong>000\n0<strong>11111</strong>0\n000<strong>1</strong>000\n000<strong>1</strong>000\n0000000\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> N = 5, mines = [[4, 2]]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:\n</strong>\n11111\n11111\n1<em><strong>1</strong></em>111\n<em><strong>111</strong></em>11\n1<em><strong>1</strong></em>011\n\n\u5728\u4e0a\u9762\u7684\u7f51\u683c\u4e2d\uff0c\u6700\u5927\u52a0\u53f7\u6807\u5fd7\u7684\u9636\u53ea\u80fd\u662f2\u3002\u4e00\u4e2a\u6807\u5fd7\u5df2\u5728\u56fe\u4e2d\u6807\u51fa\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> N = 2, mines = []\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:\n\n11\n11\n</strong>\n\u6ca1\u6709 2 \u9636\u52a0\u53f7\u6807\u5fd7\uff0c\u6709 1 \u9636\u52a0\u53f7\u6807\u5fd7\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> N = 1, mines = [[0, 0]]\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:\n\n0\n</strong>\n\u6ca1\u6709\u52a0\u53f7\u6807\u5fd7\uff0c\u8fd4\u56de 0 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6574\u6570<code>N</code> \u7684\u8303\u56f4\uff1a&nbsp;<code>[1, 500]</code>.</li>\n\t<li><code>mines</code> \u7684\u6700\u5927\u957f\u5ea6\u4e3a&nbsp;<code>5000</code>.</li>\n\t<li><code>mines[i]</code> \u662f\u957f\u5ea6\u4e3a2\u7684\u75312\u4e2a&nbsp;<code>[0, N-1]</code>&nbsp;\u4e2d\u7684\u6570\u7ec4\u6210.</li>\n\t<li><em>(\u53e6\u5916,\u4f7f\u7528 C, C++, \u6216\u8005&nbsp;C# \u7f16\u7a0b\u5c06\u4ee5\u7a0d\u5c0f\u7684\u65f6\u95f4\u9650\u5236\u8fdb\u884c\u200b\u200b\u5224\u65ad.)</em></li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u6700\u5927\u52a0\u53f7\u6807\u5fd7",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Facebook"
        ]
    },
    {
        "leetId": "765",
        "link": "couples-holding-hands",
        "title": "Couples Holding Hands",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "50.8%",
        "questionDescription": "<p>\r\nN couples sit in 2N seats arranged in a row and want to hold hands.  We want to know the minimum number of swaps so that every couple is sitting side by side.  A <i>swap</i> consists of choosing <b>any</b> two people, then they stand up and switch seats. \r\n</p><p>\r\nThe people and seats are represented by an integer from <code>0</code> to <code>2N-1</code>, the couples are numbered in order, the first couple being <code>(0, 1)</code>, the second couple being <code>(2, 3)</code>, and so on with the last couple being <code>(2N-2, 2N-1)</code>.\r\n</p><p>\r\nThe couples' initial seating is given by <code>row[i]</code> being the value of the person who is initially sitting in the i-th seat.\r\n\r\n<p><b>Example 1:</b><br /><pre>\r\n<b>Input:</b> row = [0, 2, 1, 3]\r\n<b>Output:</b> 1\r\n<b>Explanation:</b> We only need to swap the second (row[1]) and third (row[2]) person.\r\n</pre></p>\r\n\r\n<p><b>Example 2:</b><br /><pre>\r\n<b>Input:</b> row = [3, 2, 0, 1]\r\n<b>Output:</b> 0\r\n<b>Explanation:</b> All couples are already seated side by side.\r\n</pre></p>\r\n\r\n<p>\r\n<b>Note:</b>\r\n<ol> \r\n<li> <code>len(row)</code> is even and in the range of <code>[4, 60]</code>.</li>\r\n<li> <code>row</code> is guaranteed to be a permutation of <code>0...len(row)-1</code>.</li>\r\n</ol>",
        "questionDescriptionZh": "<p>N \u5bf9\u60c5\u4fa3\u5750\u5728\u8fde\u7eed\u6392\u5217\u7684 2N \u4e2a\u5ea7\u4f4d\u4e0a\uff0c\u60f3\u8981\u7275\u5230\u5bf9\u65b9\u7684\u624b\u3002 \u8ba1\u7b97\u6700\u5c11\u4ea4\u6362\u5ea7\u4f4d\u7684\u6b21\u6570\uff0c\u4ee5\u4fbf\u6bcf\u5bf9\u60c5\u4fa3\u53ef\u4ee5\u5e76\u80a9\u5750\u5728\u4e00\u8d77\u3002 <em>\u4e00</em>\u6b21\u4ea4\u6362\u53ef\u9009\u62e9\u4efb\u610f\u4e24\u4eba\uff0c\u8ba9\u4ed6\u4eec\u7ad9\u8d77\u6765\u4ea4\u6362\u5ea7\u4f4d\u3002</p>\n\n<p>\u4eba\u548c\u5ea7\u4f4d\u7528&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>2N-1</code>&nbsp;\u7684\u6574\u6570\u8868\u793a\uff0c\u60c5\u4fa3\u4eec\u6309\u987a\u5e8f\u7f16\u53f7\uff0c\u7b2c\u4e00\u5bf9\u662f&nbsp;<code>(0, 1)</code>\uff0c\u7b2c\u4e8c\u5bf9\u662f&nbsp;<code>(2, 3)</code>\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6700\u540e\u4e00\u5bf9\u662f&nbsp;<code>(2N-2, 2N-1)</code>\u3002</p>\n\n<p>\u8fd9\u4e9b\u60c5\u4fa3\u7684\u521d\u59cb\u5ea7\u4f4d&nbsp;&nbsp;<code>row[i]</code>&nbsp;\u662f\u7531\u6700\u521d\u59cb\u5750\u5728\u7b2c i \u4e2a\u5ea7\u4f4d\u4e0a\u7684\u4eba\u51b3\u5b9a\u7684\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> row = [0, 2, 1, 3]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong> \u6211\u4eec\u53ea\u9700\u8981\u4ea4\u6362row[1]\u548crow[2]\u7684\u4f4d\u7f6e\u5373\u53ef\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> row = [3, 2, 0, 1]\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:</strong> \u65e0\u9700\u4ea4\u6362\u5ea7\u4f4d\uff0c\u6240\u6709\u7684\u60c5\u4fa3\u90fd\u5df2\u7ecf\u53ef\u4ee5\u624b\u7275\u624b\u4e86\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li><code>len(row)</code> \u662f\u5076\u6570\u4e14\u6570\u503c\u5728&nbsp;<code>[4, 60]</code>\u8303\u56f4\u5185\u3002</li>\n\t<li>\u53ef\u4ee5\u4fdd\u8bc1<code>row</code> \u662f\u5e8f\u5217&nbsp;<code>0...len(row)-1</code>&nbsp;\u7684\u4e00\u4e2a\u5168\u6392\u5217\u3002</li>\n</ol>\n",
        "titleZh": "\u60c5\u4fa3\u7275\u624b",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "766",
        "link": "toeplitz-matrix",
        "title": "Toeplitz Matrix",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "58.5%",
        "questionDescription": "<p>A matrix is <em>Toeplitz</em> if every diagonal from top-left to bottom-right has the same element.</p>\r\n\r\n<p>Now given an <code>M x N</code> matrix, return&nbsp;<code>True</code>&nbsp;if and only if the matrix is <em>Toeplitz</em>.<br />\r\n&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong>matrix = [\r\n&nbsp; [1,2,3,4],\r\n&nbsp; [5,1,2,3],\r\n&nbsp; [9,5,1,2]\r\n]\r\n<strong>Output:</strong> True\r\n<strong>Explanation:</strong>\r\nIn the above grid, the&nbsp;diagonals are:\r\n&quot;[9]&quot;, &quot;[5, 5]&quot;, &quot;[1, 1, 1]&quot;, &quot;[2, 2, 2]&quot;, &quot;[3, 3]&quot;, &quot;[4]&quot;.\r\nIn each diagonal all elements are the same, so the answer is True.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong>matrix = [\r\n&nbsp; [1,2],\r\n&nbsp; [2,2]\r\n]\r\n<strong>Output:</strong> False\r\n<strong>Explanation:</strong>\r\nThe diagonal &quot;[1, 2]&quot; has different elements.\r\n</pre>\r\n\r\n<p><br />\r\n<strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>matrix</code> will be a 2D array of integers.</li>\r\n\t<li><code>matrix</code> will have a number of rows and columns in range <code>[1, 20]</code>.</li>\r\n\t<li><code>matrix[i][j]</code> will be integers in range <code>[0, 99]</code>.</li>\r\n</ol>\r\n\r\n<p><br />\r\n<strong>Follow up:</strong></p>\r\n\r\n<ol>\r\n\t<li>What if the matrix is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?</li>\r\n\t<li>What if the matrix is so large that you can only load up a partial row into the memory at once?</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5982\u679c\u4e00\u4e2a\u77e9\u9635\u7684\u6bcf\u4e00\u65b9\u5411\u7531\u5de6\u4e0a\u5230\u53f3\u4e0b\u7684\u5bf9\u89d2\u7ebf\u4e0a\u5177\u6709\u76f8\u540c\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u4e2a\u77e9\u9635\u662f<em>\u6258\u666e\u5229\u8328\u77e9\u9635</em>\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<code>M x N</code>&nbsp;\u7684\u77e9\u9635\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u662f<em>\u6258\u666e\u5229\u8328\u77e9\u9635</em>\u65f6\u8fd4\u56de&nbsp;<code>True</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \nmatrix = [\n&nbsp; [1,2,3,4],\n&nbsp; [5,1,2,3],\n&nbsp; [9,5,1,2]\n]\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong>\n\u5728\u4e0a\u8ff0\u77e9\u9635\u4e2d, \u5176\u5bf9\u89d2\u7ebf\u4e3a:\n&quot;[9]&quot;, &quot;[5, 5]&quot;, &quot;[1, 1, 1]&quot;, &quot;[2, 2, 2]&quot;, &quot;[3, 3]&quot;, &quot;[4]&quot;\u3002\n\u5404\u6761\u5bf9\u89d2\u7ebf\u4e0a\u7684\u6240\u6709\u5143\u7d20\u5747\u76f8\u540c, \u56e0\u6b64\u7b54\u6848\u662fTrue\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong>\nmatrix = [\n&nbsp; [1,2],\n&nbsp; [2,2]\n]\n<strong>\u8f93\u51fa:</strong> False\n<strong>\u89e3\u91ca: \n</strong>\u5bf9\u89d2\u7ebf&quot;[1, 2]&quot;\u4e0a\u7684\u5143\u7d20\u4e0d\u540c\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>&nbsp;<code>matrix</code>&nbsp;\u662f\u4e00\u4e2a\u5305\u542b\u6574\u6570\u7684\u4e8c\u7ef4\u6570\u7ec4\u3002</li>\n\t<li><code>matrix</code>&nbsp;\u7684\u884c\u6570\u548c\u5217\u6570\u5747\u5728&nbsp;<code>[1, 20]</code>\u8303\u56f4\u5185\u3002</li>\n\t<li><code>matrix[i][j]</code>&nbsp;\u5305\u542b\u7684\u6574\u6570\u5728&nbsp;<code>[0, 99]</code>\u8303\u56f4\u5185\u3002</li>\n</ol>\n\n<p><strong>\u8fdb\u9636:</strong></p>\n\n<ol>\n\t<li>\u5982\u679c\u77e9\u9635\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u5e76\u4e14\u78c1\u76d8\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u56e0\u6b64\u4e00\u6b21\u6700\u591a\u53ea\u80fd\u5c06\u4e00\u884c\u77e9\u9635\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u8be5\u600e\u4e48\u529e\uff1f</li>\n\t<li>\u5982\u679c\u77e9\u9635\u592a\u5927\u4ee5\u81f3\u4e8e\u53ea\u80fd\u4e00\u6b21\u5c06\u90e8\u5206\u884c\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u8be5\u600e\u4e48\u529e\uff1f</li>\n</ol>\n",
        "titleZh": "\u6258\u666e\u5229\u8328\u77e9\u9635",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "767",
        "link": "reorganize-string",
        "title": "Reorganize String",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "31.7%",
        "questionDescription": "<p>Given a string <code>S</code>, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.</p>\r\n\r\n<p>If possible, output any possible result.&nbsp; If not possible, return the empty string.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> S = &quot;aab&quot;\r\n<strong>Output:</strong> &quot;aba&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> S = &quot;aaab&quot;\r\n<strong>Output:</strong> &quot;&quot;\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>S</code> will consist of lowercase letters and have length in range <code>[1, 500]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32<code>S</code>\uff0c\u68c0\u67e5\u662f\u5426\u80fd\u91cd\u65b0\u6392\u5e03\u5176\u4e2d\u7684\u5b57\u6bcd\uff0c\u4f7f\u5f97\u4e24\u76f8\u90bb\u7684\u5b57\u7b26\u4e0d\u540c\u3002</p>\n\n<p>\u82e5\u53ef\u884c\uff0c\u8f93\u51fa\u4efb\u610f\u53ef\u884c\u7684\u7ed3\u679c\u3002\u82e5\u4e0d\u53ef\u884c\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> S = &quot;aab&quot;\n<strong>\u8f93\u51fa:</strong> &quot;aba&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> S = &quot;aaab&quot;\n<strong>\u8f93\u51fa:</strong> &quot;&quot;\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>S</code> \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u5e76\u4e14\u957f\u5ea6\u5728<code>[1, 500]</code>\u533a\u95f4\u5185\u3002</li>\n</ul>\n",
        "titleZh": "\u91cd\u6784\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Uber",
            "Twitter"
        ]
    },
    {
        "leetId": "768",
        "link": "max-chunks-to-make-sorted-ii",
        "title": "Max Chunks To Make Sorted II",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "39.3%",
        "questionDescription": "<p><em>This question is the same as &quot;Max Chunks to Make Sorted&quot; except the integers of the given array are not necessarily distinct, the input array could be up to length <code>2000</code>, and the elements could be up to <code>10**8</code>.</em></p>\r\n\r\n<hr />\r\n\r\n<p>Given an array <code>arr</code> of integers (<strong>not necessarily distinct</strong>), we split the array into some number of &quot;chunks&quot; (partitions), and individually sort each chunk.&nbsp; After concatenating them,&nbsp;the result equals the sorted array.</p>\r\n\r\n<p>What is the most number of chunks we could have made?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> arr = [5,4,3,2,1]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong>\r\nSplitting into two or more chunks will not return the required result.\r\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn&#39;t sorted.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> arr = [2,1,3,4,4]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong>\r\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\r\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>arr</code> will have length in range <code>[1, 2000]</code>.</li>\r\n\t<li><code>arr[i]</code> will be an integer in range <code>[0, 10**8]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p><em>\u8fd9\u4e2a\u95ee\u9898\u548c&ldquo;\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757&rdquo;\u76f8\u4f3c\uff0c\u4f46\u7ed9\u5b9a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u53ef\u4ee5\u91cd\u590d\uff0c\u8f93\u5165\u6570\u7ec4\u6700\u5927\u957f\u5ea6\u4e3a<code>2000</code>\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u6700\u5927\u4e3a<code>10**8</code>\u3002</em></p>\n\n<p><code>arr</code>\u662f\u4e00\u4e2a\u53ef\u80fd\u5305\u542b<strong>\u91cd\u590d\u5143\u7d20</strong>\u7684\u6574\u6570\u6570\u7ec4\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u51e0\u4e2a&ldquo;\u5757&rdquo;\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5757\u5206\u522b\u8fdb\u884c\u6392\u5e8f\u3002\u4e4b\u540e\u518d\u8fde\u63a5\u8d77\u6765\uff0c\u4f7f\u5f97\u8fde\u63a5\u7684\u7ed3\u679c\u548c\u6309\u5347\u5e8f\u6392\u5e8f\u540e\u7684\u539f\u6570\u7ec4\u76f8\u540c\u3002</p>\n\n<p>\u6211\u4eec\u6700\u591a\u80fd\u5c06\u6570\u7ec4\u5206\u6210\u591a\u5c11\u5757\uff1f</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> arr = [5,4,3,2,1]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong>\n\u5c06\u6570\u7ec4\u5206\u62102\u5757\u6216\u8005\u66f4\u591a\u5757\uff0c\u90fd\u65e0\u6cd5\u5f97\u5230\u6240\u9700\u7684\u7ed3\u679c\u3002\n\u4f8b\u5982\uff0c\u5206\u6210 [5, 4], [3, 2, 1] \u7684\u7ed3\u679c\u662f [4, 5, 1, 2, 3]\uff0c\u8fd9\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\u3002 \n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> arr = [2,1,3,4,4]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong>\n\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5206\u6210\u4e24\u5757\uff0c\u4f8b\u5982 [2, 1], [3, 4, 4]\u3002\n\u7136\u800c\uff0c\u5206\u6210 [2, 1], [3], [4], [4] \u53ef\u4ee5\u5f97\u5230\u6700\u591a\u7684\u5757\u6570\u3002 \n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>arr</code>\u7684\u957f\u5ea6\u5728<code>[1, 2000]</code>\u4e4b\u95f4\u3002</li>\n\t<li><code>arr[i]</code>\u7684\u5927\u5c0f\u5728<code>[0, 10**8]</code>\u4e4b\u95f4\u3002</li>\n</ul>\n",
        "titleZh": "\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 II",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "769",
        "link": "max-chunks-to-make-sorted",
        "title": "Max Chunks To Make Sorted",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "44.9%",
        "questionDescription": "<p>Given an array <code>arr</code> that is a permutation of <code>[0, 1, ..., arr.length - 1]</code>, we split the array into some number of &quot;chunks&quot; (partitions), and individually sort each chunk.&nbsp; After concatenating them,&nbsp;the result equals the sorted array.</p>\r\n\r\n<p>What is the most number of chunks we could have made?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> arr = [4,3,2,1,0]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong>\r\nSplitting into two or more chunks will not return the required result.\r\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn&#39;t sorted.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> arr = [1,0,2,3,4]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong>\r\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\r\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>arr</code> will have length in range <code>[1, 10]</code>.</li>\r\n\t<li><code>arr[i]</code> will be a permutation of <code>[0, 1, ..., arr.length - 1]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u6570\u7ec4<code>arr</code>\u662f<code>[0, 1, ..., arr.length - 1]</code>\u7684\u4e00\u79cd\u6392\u5217\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u51e0\u4e2a&ldquo;\u5757&rdquo;\uff0c\u5e76\u5c06\u8fd9\u4e9b\u5757\u5206\u522b\u8fdb\u884c\u6392\u5e8f\u3002\u4e4b\u540e\u518d\u8fde\u63a5\u8d77\u6765\uff0c\u4f7f\u5f97\u8fde\u63a5\u7684\u7ed3\u679c\u548c\u6309\u5347\u5e8f\u6392\u5e8f\u540e\u7684\u539f\u6570\u7ec4\u76f8\u540c\u3002</p>\n\n<p>\u6211\u4eec\u6700\u591a\u80fd\u5c06\u6570\u7ec4\u5206\u6210\u591a\u5c11\u5757\uff1f</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> arr = [4,3,2,1,0]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong>\n\u5c06\u6570\u7ec4\u5206\u62102\u5757\u6216\u8005\u66f4\u591a\u5757\uff0c\u90fd\u65e0\u6cd5\u5f97\u5230\u6240\u9700\u7684\u7ed3\u679c\u3002\n\u4f8b\u5982\uff0c\u5206\u6210 [4, 3], [2, 1, 0] \u7684\u7ed3\u679c\u662f [3, 4, 0, 1, 2]\uff0c\u8fd9\u4e0d\u662f\u6709\u5e8f\u7684\u6570\u7ec4\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> arr = [1,0,2,3,4]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong>\n\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5206\u6210\u4e24\u5757\uff0c\u4f8b\u5982 [1, 0], [2, 3, 4]\u3002\n\u7136\u800c\uff0c\u5206\u6210 [1, 0], [2], [3], [4] \u53ef\u4ee5\u5f97\u5230\u6700\u591a\u7684\u5757\u6570\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>arr</code> \u7684\u957f\u5ea6\u5728 <code>[1, 10]</code> \u4e4b\u95f4\u3002</li>\n\t<li><code>arr[i]</code>\u662f <code>[0, 1, ..., arr.length - 1]</code>\u7684\u4e00\u79cd\u6392\u5217\u3002</li>\n</ul>\n",
        "titleZh": "\u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "770",
        "link": "basic-calculator-iv",
        "title": "Basic Calculator IV",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "45.5%",
        "questionDescription": "<p>Given an <code>expression</code>&nbsp;such as <code>expression = &quot;e + 8 - a + 5&quot;</code> and an evaluation map such as <code>{&quot;e&quot;: 1}</code> (given in terms of <code>evalvars = [&quot;e&quot;]</code> and <code>evalints = [1]</code>), return a list of tokens representing the simplified expression, such as <code>[&quot;-1*a&quot;,&quot;14&quot;]</code></p>\r\n\r\n<ul>\r\n\t<li>An expression alternates chunks and symbols, with a space separating each chunk and symbol.</li>\r\n\t<li>A chunk is either an expression in parentheses, a variable, or a non-negative integer.</li>\r\n\t<li>A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like <code>&quot;2x&quot;</code> or <code>&quot;-x&quot;</code>.</li>\r\n</ul>\r\n\r\n<p>Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. For example, <code>expression = &quot;1 + 2 * 3&quot;</code> has an answer of <code>[&quot;7&quot;]</code>.</p>\r\n\r\n<p>The format of the output is as follows:</p>\r\n\r\n<ul>\r\n\t<li>For each term of free variables with non-zero coefficient, we write the free variables within a term in sorted order lexicographically. For example, we would never write a term like <code>&quot;b*a*c&quot;</code>, only <code>&quot;a*b*c&quot;</code>.</li>\r\n\t<li>Terms have degree equal to the number of free variables being multiplied, counting multiplicity. (For example, <code>&quot;a*a*b*c&quot;</code> has degree 4.) We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.</li>\r\n\t<li>The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.)&nbsp; A leading coefficient of 1 is still printed.</li>\r\n\t<li>An example of a well formatted answer is <code>[&quot;-2*a*a*a&quot;, &quot;3*a*a*b&quot;, &quot;3*b*b&quot;, &quot;4*a&quot;, &quot;5*c&quot;, &quot;-6&quot;]</code>&nbsp;</li>\r\n\t<li>Terms (including constant terms) with coefficient 0 are not included.&nbsp; For example, an expression of &quot;0&quot; has an output of [].</li>\r\n</ul>\r\n\r\n<p><strong>Examples:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> expression = &quot;e + 8 - a + 5&quot;, evalvars = [&quot;e&quot;], evalints = [1]\r\n<strong>Output:</strong> [&quot;-1*a&quot;,&quot;14&quot;]\r\n\r\n<strong>Input:</strong> expression = &quot;e - 8 + temperature - pressure&quot;,\r\nevalvars = [&quot;e&quot;, &quot;temperature&quot;], evalints = [1, 12]\r\n<strong>Output:</strong> [&quot;-1*pressure&quot;,&quot;5&quot;]\r\n\r\n<strong>Input:</strong> expression = &quot;(e + 8) * (e - 8)&quot;, evalvars = [], evalints = []\r\n<strong>Output:</strong> [&quot;1*e*e&quot;,&quot;-64&quot;]\r\n\r\n<strong>Input:</strong> expression = &quot;7 - 7&quot;, evalvars = [], evalints = []\r\n<strong>Output:</strong> []\r\n\r\n<strong>Input:</strong> expression = &quot;a * b * c + b * a * c * 4&quot;, evalvars = [], evalints = []\r\n<strong>Output:</strong> [&quot;5*a*b*c&quot;]\r\n\r\n<strong>Input:</strong> expression = &quot;((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))&quot;,\r\nevalvars = [], evalints = []\r\n<strong>Output:</strong> [&quot;-1*a*a*b*b&quot;,&quot;2*a*a*b*c&quot;,&quot;-1*a*a*c*c&quot;,&quot;1*a*b*b*b&quot;,&quot;-1*a*b*b*c&quot;,&quot;-1*a*b*c*c&quot;,&quot;1*a*c*c*c&quot;,&quot;-1*b*b*b*c&quot;,&quot;2*b*b*c*c&quot;,&quot;-1*b*c*c*c&quot;,&quot;2*a*a*b&quot;,&quot;-2*a*a*c&quot;,&quot;-2*a*b*b&quot;,&quot;2*a*c*c&quot;,&quot;1*b*b*b&quot;,&quot;-1*b*b*c&quot;,&quot;1*b*c*c&quot;,&quot;-1*c*c*c&quot;,&quot;-1*a*a&quot;,&quot;1*a*b&quot;,&quot;1*a*c&quot;,&quot;-1*b*c&quot;]\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>expression</code> will have length in range <code>[1, 250]</code>.</li>\r\n\t<li><code>evalvars, evalints</code> will have equal lengths in range <code>[0, 100]</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u8868\u8fbe\u5f0f&nbsp;<code>expression</code>&nbsp;\u5982&nbsp;<code>expression = &quot;e + 8 - a + 5&quot;</code>&nbsp;\u548c\u4e00\u4e2a\u6c42\u503c\u6620\u5c04\uff0c\u5982&nbsp;<code>{&quot;e&quot;: 1}</code>\uff08\u7ed9\u5b9a\u7684\u5f62\u5f0f\u4e3a&nbsp;<code>evalvars = [&quot;e&quot;]</code> \u548c&nbsp;<code>evalints = [1]</code>\uff09\uff0c\u8fd4\u56de\u8868\u793a\u7b80\u5316\u8868\u8fbe\u5f0f\u7684\u6807\u8bb0\u5217\u8868\uff0c\u4f8b\u5982 <code>[&quot;-1*a&quot;,&quot;14&quot;]</code></p>\n\n<ul>\n\t<li>\u8868\u8fbe\u5f0f\u4ea4\u66ff\u4f7f\u7528\u5757\u548c\u7b26\u53f7\uff0c\u6bcf\u4e2a\u5757\u548c\u7b26\u53f7\u4e4b\u95f4\u6709\u4e00\u4e2a\u7a7a\u683c\u3002</li>\n\t<li>\u5757\u8981\u4e48\u662f\u62ec\u53f7\u4e2d\u7684\u8868\u8fbe\u5f0f\uff0c\u8981\u4e48\u662f\u53d8\u91cf\uff0c\u8981\u4e48\u662f\u975e\u8d1f\u6574\u6570\u3002</li>\n\t<li>\u5757\u662f\u62ec\u53f7\u4e2d\u7684\u8868\u8fbe\u5f0f\uff0c\u53d8\u91cf\u6216\u975e\u8d1f\u6574\u6570\u3002</li>\n\t<li>\u53d8\u91cf\u662f\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff08\u4e0d\u5305\u62ec\u6570\u5b57\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u53d8\u91cf\u53ef\u4ee5\u662f\u591a\u4e2a\u5b57\u6bcd\uff0c\u5e76\u6ce8\u610f\u53d8\u91cf\u4ece\u4e0d\u5177\u6709\u50cf&nbsp;<code>&quot;2x&quot;</code>&nbsp;\u6216&nbsp;<code>&quot;-x&quot;</code>&nbsp;\u8fd9\u6837\u7684\u524d\u5bfc\u7cfb\u6570\u6216\u4e00\u5143\u8fd0\u7b97\u7b26&nbsp;\u3002</li>\n</ul>\n\n<p>\u8868\u8fbe\u5f0f\u6309\u901a\u5e38\u987a\u5e8f\u8fdb\u884c\u6c42\u503c\uff1a\u5148\u662f\u62ec\u53f7\uff0c\u7136\u540e\u6c42\u4e58\u6cd5\uff0c\u518d\u8ba1\u7b97\u52a0\u6cd5\u548c\u51cf\u6cd5\u3002\u4f8b\u5982\uff0c<code>expression = &quot;1 + 2 * 3&quot;</code>&nbsp;\u7684\u7b54\u6848\u662f <code>[&quot;7&quot;]</code>\u3002</p>\n\n<p>\u8f93\u51fa\u683c\u5f0f\u5982\u4e0b\uff1a</p>\n\n<ul>\n\t<li>\u5bf9\u4e8e\u7cfb\u6570\u975e\u96f6\u7684\u6bcf\u4e2a\u81ea\u53d8\u91cf\u9879\uff0c\u6211\u4eec\u6309\u5b57\u5178\u6392\u5e8f\u7684\u987a\u5e8f\u5c06\u81ea\u53d8\u91cf\u5199\u5728\u4e00\u4e2a\u9879\u4e2d\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u5199\u50cf <code>&ldquo;b*a*c&rdquo;</code> \u8fd9\u6837\u7684\u9879\uff0c\u53ea\u5199 <code>&ldquo;a*b*c&rdquo;</code>\u3002</li>\n\t<li>\u9879\u7684\u6b21\u6570\u7b49\u4e8e\u88ab\u4e58\u7684\u81ea\u53d8\u91cf\u7684\u6570\u76ee\uff0c\u5e76\u8ba1\u7b97\u91cd\u590d\u9879\u3002(\u4f8b\u5982\uff0c<code>&quot;a*a*b*c&quot;</code> \u7684\u6b21\u6570\u4e3a 4\u3002)\u3002\u6211\u4eec\u5148\u5199\u51fa\u7b54\u6848\u7684\u6700\u5927\u6b21\u6570\u9879\uff0c\u7528\u5b57\u5178\u987a\u5e8f\u6253\u7834\u5173\u7cfb\uff0c\u6b64\u65f6\u5ffd\u7565\u8bcd\u7684\u524d\u5bfc\u7cfb\u6570\u3002</li>\n\t<li>\u9879\u7684\u524d\u5bfc\u7cfb\u6570\u76f4\u63a5\u653e\u5728\u5de6\u8fb9\uff0c\u7528\u661f\u53f7\u5c06\u5b83\u4e0e\u53d8\u91cf\u5206\u9694\u5f00(\u5982\u679c\u5b58\u5728\u7684\u8bdd)\u3002\u524d\u5bfc\u7cfb\u6570 1 \u4ecd\u7136\u8981\u6253\u5370\u51fa\u6765\u3002</li>\n\t<li>\u683c\u5f0f\u826f\u597d\u7684\u4e00\u4e2a\u793a\u4f8b\u7b54\u6848\u662f&nbsp;<code>[&quot;-2*a*a*a&quot;, &quot;3*a*a*b&quot;, &quot;3*b*b&quot;, &quot;4*a&quot;, &quot;5*c&quot;, &quot;-6&quot;]</code>&nbsp;\u3002</li>\n\t<li>\u7cfb\u6570\u4e3a 0 \u7684\u9879\uff08\u5305\u62ec\u5e38\u6570\u9879\uff09\u4e0d\u5305\u62ec\u5728\u5185\u3002\u4f8b\u5982\uff0c&ldquo;0&rdquo; \u7684\u8868\u8fbe\u5f0f\u8f93\u51fa\u4e3a []\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>expression = &quot;e + 8 - a + 5&quot;, evalvars = [&quot;e&quot;], evalints = [1]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;-1*a&quot;,&quot;14&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;e - 8 + temperature - pressure&quot;,\nevalvars = [&quot;e&quot;, &quot;temperature&quot;], evalints = [1, 12]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;-1*pressure&quot;,&quot;5&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;(e + 8) * (e - 8)&quot;, evalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;1*e*e&quot;,&quot;-64&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;7 - 7&quot;, evalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;a * b * c + b * a * c * 4&quot;, evalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;5*a*b*c&quot;]\n\n<strong>\u8f93\u5165\uff1a</strong>expression = &quot;((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))&quot;,\nevalvars = [], evalints = []\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;-1*a*a*b*b&quot;,&quot;2*a*a*b*c&quot;,&quot;-1*a*a*c*c&quot;,&quot;1*a*b*b*b&quot;,&quot;-1*a*b*b*c&quot;,&quot;-1*a*b*c*c&quot;,&quot;1*a*c*c*c&quot;,&quot;-1*b*b*b*c&quot;,&quot;2*b*b*c*c&quot;,&quot;-1*b*c*c*c&quot;,&quot;2*a*a*b&quot;,&quot;-2*a*a*c&quot;,&quot;-2*a*b*b&quot;,&quot;2*a*c*c&quot;,&quot;1*b*b*b&quot;,&quot;-1*b*b*c&quot;,&quot;1*b*c*c&quot;,&quot;-1*c*c*c&quot;,&quot;-1*a*a&quot;,&quot;1*a*b&quot;,&quot;1*a*c&quot;,&quot;-1*b*c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>expression</code> \u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 250]</code>&nbsp;\u8303\u56f4\u5185\u3002</li>\n\t<li><code>evalvars, evalints</code> \u5728\u8303\u56f4&nbsp;<code>[0, 100]</code>&nbsp;\u5185\uff0c\u4e14\u957f\u5ea6\u76f8\u540c\u3002</li>\n</ol>\n",
        "titleZh": "\u57fa\u672c\u8ba1\u7b97\u5668 IV",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Pinterest",
            "Intuit",
            "Roblox"
        ]
    },
    {
        "leetId": "771",
        "link": "jewels-and-stones",
        "title": "Jewels and Stones",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "79.3%",
        "questionDescription": "<p>You&#39;re given strings <code>J</code> representing the types of stones that are jewels, and <code>S</code> representing the stones you have.&nbsp; Each character in <code>S</code> is a type of stone you have.&nbsp; You want to know how many of the stones you have are also jewels.</p>\r\n\r\n<p>The letters in <code>J</code> are guaranteed distinct, and all characters in <code>J</code> and <code>S</code> are letters. Letters are case sensitive, so <code>&quot;a&quot;</code> is considered a different type of stone from <code>&quot;A&quot;</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;\r\n<strong>Output:</strong> 3\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> J = &quot;z&quot;, S = &quot;ZZ&quot;\r\n<strong>Output:</strong> 0\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>S</code> and <code>J</code> will consist of letters and have length at most 50.</li>\r\n\t<li>The characters in <code>J</code> are distinct.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>&nbsp;\u7ed9\u5b9a\u5b57\u7b26\u4e32<code>J</code>&nbsp;\u4ee3\u8868\u77f3\u5934\u4e2d\u5b9d\u77f3\u7684\u7c7b\u578b\uff0c\u548c\u5b57\u7b26\u4e32&nbsp;<code>S</code>\u4ee3\u8868\u4f60\u62e5\u6709\u7684\u77f3\u5934\u3002&nbsp;<code>S</code>&nbsp;\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4ee3\u8868\u4e86\u4e00\u79cd\u4f60\u62e5\u6709\u7684\u77f3\u5934\u7684\u7c7b\u578b\uff0c\u4f60\u60f3\u77e5\u9053\u4f60\u62e5\u6709\u7684\u77f3\u5934\u4e2d\u6709\u591a\u5c11\u662f\u5b9d\u77f3\u3002</p>\n\n<p><code>J</code>&nbsp;\u4e2d\u7684\u5b57\u6bcd\u4e0d\u91cd\u590d\uff0c<code>J</code>&nbsp;\u548c&nbsp;<code>S</code>\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u662f\u5b57\u6bcd\u3002\u5b57\u6bcd\u533a\u5206\u5927\u5c0f\u5199\uff0c\u56e0\u6b64<code>&quot;a&quot;</code>\u548c<code>&quot;A&quot;</code>\u662f\u4e0d\u540c\u7c7b\u578b\u7684\u77f3\u5934\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;\n<strong>\u8f93\u51fa:</strong> 3\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> J = &quot;z&quot;, S = &quot;ZZ&quot;\n<strong>\u8f93\u51fa:</strong> 0\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>S</code>&nbsp;\u548c&nbsp;<code>J</code>&nbsp;\u6700\u591a\u542b\u670950\u4e2a\u5b57\u6bcd\u3002</li>\n\t<li>&nbsp;<code>J</code>&nbsp;\u4e2d\u7684\u5b57\u7b26\u4e0d\u91cd\u590d\u3002</li>\n</ul>\n",
        "titleZh": "\u5b9d\u77f3\u4e0e\u77f3\u5934",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Adobe",
            "Apple",
            "Alibaba",
            "Baidu"
        ]
    },
    {
        "leetId": "772",
        "link": "basic-calculator-iii",
        "title": "Basic Calculator III",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "56",
        "questionDescription": "\n<p>Implement a basic calculator to evaluate a simple expression string.</p>\n<p>The expression string may contain open <code>(</code> and closing parentheses <code>)</code>, the plus <code>+</code> or minus sign <code>-</code>, <strong>non-negative</strong> integers and empty spaces <code> </code>.</p>\n<p>The expression string contains only non-negative integers, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> operators , open <code>(</code> and closing parentheses <code>)</code> and empty spaces <code> </code>. The integer division should truncate toward zero.</p>\n<p>You may assume that the given expression is always valid. All intermediate results will be in the range of <code>[-2147483648, 2147483647]</code>.</p>\n<p>Some examples:</p>\n<pre>\"1 + 1\" = 2\n\" 6-4 / 2 \" = 4\n\"2*(5+5*2)/3+(6/2+8)\" = 21\n\"(2+6* 3+5- (3*14/7+2)*5)+3\"=-12\n</pre>\n<p>\u00a0</p>\n<p><strong>Note:</strong> <strong>Do not</strong> use the <code>eval</code> built-in library function.</p>\n",
        "questionDescriptionZh": "\n<p>Implement a basic calculator to evaluate a simple expression string.</p>\n<p>The expression string may contain open <code>(</code> and closing parentheses <code>)</code>, the plus <code>+</code> or minus sign <code>-</code>, <strong>non-negative</strong> integers and empty spaces <code> </code>.</p>\n<p>The expression string contains only non-negative integers, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> operators , open <code>(</code> and closing parentheses <code>)</code> and empty spaces <code> </code>. The integer division should truncate toward zero.</p>\n<p>You may assume that the given expression is always valid. All intermediate results will be in the range of <code>[-2147483648, 2147483647]</code>.</p>\n<p>Some examples:</p>\n<pre>\"1 + 1\" = 2\n\" 6-4 / 2 \" = 4\n\"2*(5+5*2)/3+(6/2+8)\" = 21\n\"(2+6* 3+5- (3*14/7+2)*5)+3\"=-12\n</pre>\n<p>\u00a0</p>\n<p><strong>Note:</strong> <strong>Do not</strong> use the <code>eval</code> built-in library function.</p>\n",
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Uber",
            "Salesforce",
            "Pinterest",
            "Pocket Gems",
            "Intuit",
            "Hulu",
            "Houzz",
            "DoorDash",
            "Jingchi"
        ]
    },
    {
        "leetId": "773",
        "link": "sliding-puzzle",
        "title": "Sliding Puzzle",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "56.7%",
        "questionDescription": "<p>On a 2x3 <code>board</code>, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0.</p>\r\n\r\n<p>A move consists of choosing <code>0</code>&nbsp;and a 4-directionally adjacent number and swapping it.</p>\r\n\r\n<p>The state of the board is <em>solved</em> if and only if the <code>board</code> is <code>[[1,2,3],[4,5,0]].</code></p>\r\n\r\n<p>Given a puzzle board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.</p>\r\n\r\n<p><strong>Examples:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> board = [[1,2,3],[4,0,5]]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong> Swap the 0 and the 5 in one move.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Input:</strong> board = [[1,2,3],[5,4,0]]\r\n<strong>Output:</strong> -1\r\n<strong>Explanation:</strong> No number of moves will make the board solved.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Input:</strong> board = [[4,1,2],[5,0,3]]\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> 5 is the smallest number of moves that solves the board.\r\nAn example path:\r\nAfter move 0: [[4,1,2],[5,0,3]]\r\nAfter move 1: [[4,1,2],[0,5,3]]\r\nAfter move 2: [[0,1,2],[4,5,3]]\r\nAfter move 3: [[1,0,2],[4,5,3]]\r\nAfter move 4: [[1,2,0],[4,5,3]]\r\nAfter move 5: [[1,2,3],[4,5,0]]\r\n</pre>\r\n\r\n<pre>\r\n<strong>Input:</strong> board = [[3,2,4],[1,5,0]]\r\n<strong>Output:</strong> 14\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>board</code> will be a 2 x 3 array as described above.</li>\r\n\t<li><code>board[i][j]</code> will be a permutation of <code>[0, 1, 2, 3, 4, 5]</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e00\u4e2a 2 x 3 \u7684\u677f\u4e0a\uff08<code>board</code>\uff09\u6709 5 \u5757\u7816\u74e6\uff0c\u7528\u6570\u5b57 <code>1~5</code> \u6765\u8868\u793a, \u4ee5\u53ca\u4e00\u5757\u7a7a\u7f3a\u7528&nbsp;<code>0</code>&nbsp;\u6765\u8868\u793a.</p>\n\n<p>\u4e00\u6b21\u79fb\u52a8\u5b9a\u4e49\u4e3a\u9009\u62e9&nbsp;<code>0</code>&nbsp;\u4e0e\u4e00\u4e2a\u76f8\u90bb\u7684\u6570\u5b57\uff08\u4e0a\u4e0b\u5de6\u53f3\uff09\u8fdb\u884c\u4ea4\u6362.</p>\n\n<p>\u6700\u7ec8\u5f53\u677f&nbsp;<code>board</code>&nbsp;\u7684\u7ed3\u679c\u662f&nbsp;<code>[[1,2,3],[4,5,0]]</code>&nbsp;\u8c1c\u677f\u88ab\u89e3\u5f00\u3002</p>\n\n<p>\u7ed9\u51fa\u4e00\u4e2a\u8c1c\u677f\u7684\u521d\u59cb\u72b6\u6001\uff0c\u8fd4\u56de\u6700\u5c11\u53ef\u4ee5\u901a\u8fc7\u591a\u5c11\u6b21\u79fb\u52a8\u89e3\u5f00\u8c1c\u677f\uff0c\u5982\u679c\u4e0d\u80fd\u89e3\u5f00\u8c1c\u677f\uff0c\u5219\u8fd4\u56de -1 \u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>board = [[1,2,3],[4,0,5]]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u4ea4\u6362 0 \u548c 5 \uff0c1 \u6b65\u5b8c\u6210\n</pre>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>board = [[1,2,3],[5,4,0]]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\u6ca1\u6709\u529e\u6cd5\u5b8c\u6210\u8c1c\u677f\n</pre>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>board = [[4,1,2],[5,0,3]]\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6700\u5c11\u5b8c\u6210\u8c1c\u677f\u7684\u6700\u5c11\u79fb\u52a8\u6b21\u6570\u662f 5 \uff0c\n\u4e00\u79cd\u79fb\u52a8\u8def\u5f84:\n\u5c1a\u672a\u79fb\u52a8: [[4,1,2],[5,0,3]]\n\u79fb\u52a8 1 \u6b21: [[4,1,2],[0,5,3]]\n\u79fb\u52a8 2 \u6b21: [[0,1,2],[4,5,3]]\n\u79fb\u52a8 3 \u6b21: [[1,0,2],[4,5,3]]\n\u79fb\u52a8 4 \u6b21: [[1,2,0],[4,5,3]]\n\u79fb\u52a8 5 \u6b21: [[1,2,3],[4,5,0]]\n</pre>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>board = [[3,2,4],[1,5,0]]\n<strong>\u8f93\u51fa\uff1a</strong>14\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>board</code>&nbsp;\u662f\u4e00\u4e2a\u5982\u4e0a\u6240\u8ff0\u7684 2 x 3 \u7684\u6570\u7ec4.</li>\n\t<li><code>board[i][j]</code>&nbsp;\u662f\u4e00\u4e2a&nbsp;<code>[0, 1, 2, 3, 4, 5]</code>&nbsp;\u7684\u6392\u5217.</li>\n</ul>\n",
        "titleZh": "\u6ed1\u52a8\u8c1c\u9898",
        "tags": [
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Airbnb"
        ]
    },
    {
        "leetId": "774",
        "link": "minimize-max-distance-to-gas-station",
        "title": "Minimize Max Distance to Gas Station",
        "is_locked": "Prime",
        "difficulty": "Hard",
        "frequency": "40",
        "questionDescription": "\n<p>On a horizontal number line, we have gas stations at positions <code>stations[0], stations[1], ..., stations[N-1]</code>, where <code>N = stations.length</code>.</p>\n<p>Now, we add <code>K</code> more gas stations so that <strong>D</strong>, the maximum distance between adjacent gas stations, is minimized.</p>\n<p>Return the smallest possible value of <strong>D</strong>.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> stations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], K = 9\n<strong>Output:</strong> 0.500000\n</pre>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>stations.length</code> will be an integer in range <code>[10, 2000]</code>.</li>\n<li><code>stations[i]</code> will be an integer in range <code>[0, 10^8]</code>.</li>\n<li><code>K</code> will be an integer in range <code>[1, 10^6]</code>.</li>\n<li>Answers within <code>10^-6</code> of the true value will be accepted as correct.</li>\n</ol>\n",
        "questionDescriptionZh": "\n<p>On a horizontal number line, we have gas stations at positions <code>stations[0], stations[1], ..., stations[N-1]</code>, where <code>N = stations.length</code>.</p>\n<p>Now, we add <code>K</code> more gas stations so that <strong>D</strong>, the maximum distance between adjacent gas stations, is minimized.</p>\n<p>Return the smallest possible value of <strong>D</strong>.</p>\n<p><strong>Example:</strong></p>\n<pre><strong>Input:</strong> stations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], K = 9\n<strong>Output:</strong> 0.500000\n</pre>\n<p><strong>Note:</strong></p>\n<ol>\n<li><code>stations.length</code> will be an integer in range <code>[10, 2000]</code>.</li>\n<li><code>stations[i]</code> will be an integer in range <code>[0, 10^8]</code>.</li>\n<li><code>K</code> will be an integer in range <code>[1, 10^6]</code>.</li>\n<li>Answers within <code>10^-6</code> of the true value will be accepted as correct.</li>\n</ol>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "775",
        "link": "global-and-local-inversions",
        "title": "Global and Local Inversions",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "42.8%",
        "questionDescription": "<p>We have some permutation <code>A</code> of <code>[0, 1, ..., N - 1]</code>, where <code>N</code> is the length of <code>A</code>.</p>\r\n\r\n<p>The number of (global) inversions is the number of <code>i &lt; j</code> with <code>0 &lt;= i &lt; j &lt; N</code> and <code>A[i] &gt; A[j]</code>.</p>\r\n\r\n<p>The number of local inversions is the number of <code>i</code> with <code>0 &lt;= i &lt; N</code> and <code>A[i] &gt; A[i+1]</code>.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if the number of global inversions is equal to the number of local inversions.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> A = [1,0,2]\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong> There is 1 global inversion, and 1 local inversion.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> A = [1,2,0]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> There are 2 global inversions, and 1 local inversion.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>A</code> will be a permutation of <code>[0, 1, ..., A.length - 1]</code>.</li>\r\n\t<li><code>A</code> will have length in range <code>[1, 5000]</code>.</li>\r\n\t<li>The time limit for this problem has been reduced.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u662f&nbsp;<code>[0, 1, ..., N - 1]</code>&nbsp;\u7684\u4e00\u79cd\u6392\u5217\uff0c<code>N</code> \u662f\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u7684\u957f\u5ea6\u3002\u5168\u5c40\u5012\u7f6e\u6307\u7684\u662f <code>i,j</code>&nbsp;\u6ee1\u8db3&nbsp;<code>0 &lt;= i &lt; j &lt; N</code> \u5e76\u4e14&nbsp;<code>A[i] &gt; A[j]</code>&nbsp;\uff0c\u5c40\u90e8\u5012\u7f6e\u6307\u7684\u662f <code>i</code> \u6ee1\u8db3&nbsp;<code>0 &lt;= i &lt; N</code>&nbsp;\u5e76\u4e14&nbsp;<code>A[i] &gt; A[i+1]</code>&nbsp;\u3002</p>\n\n<p>\u5f53\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u4e2d\u5168\u5c40\u5012\u7f6e\u7684\u6570\u91cf\u7b49\u4e8e\u5c40\u90e8\u5012\u7f6e\u7684\u6570\u91cf\u65f6\uff0c\u8fd4\u56de <code>true</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> A = [1,0,2]\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong> \u6709 1 \u4e2a\u5168\u5c40\u5012\u7f6e\uff0c\u548c 1 \u4e2a\u5c40\u90e8\u5012\u7f6e\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> A = [1,2,0]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u6709 2 \u4e2a\u5168\u5c40\u5012\u7f6e\uff0c\u548c 1 \u4e2a\u5c40\u90e8\u5012\u7f6e\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>A</code> \u662f&nbsp;<code>[0, 1, ..., A.length - 1]</code>&nbsp;\u7684\u4e00\u79cd\u6392\u5217</li>\n\t<li><code>A</code> \u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 5000]</code>\u4e4b\u95f4</li>\n\t<li>\u8fd9\u4e2a\u95ee\u9898\u7684\u65f6\u95f4\u9650\u5236\u5df2\u7ecf\u51cf\u5c11\u4e86\u3002</li>\n</ul>\n",
        "titleZh": "\u5168\u5c40\u5012\u7f6e\u4e0e\u5c40\u90e8\u5012\u7f6e",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "776",
        "link": "split-bst",
        "title": "Split BST",
        "is_locked": "Prime",
        "difficulty": "Medium",
        "frequency": "28",
        "questionDescription": "\n<p>Given a Binary Search Tree (BST) with root node <code>root</code>, and a target value <code>V</code>, split the tree into two subtrees\u00a0where one subtree has nodes that are all smaller or equal to the target value, while the other subtree has all nodes that are greater than the target value.\u00a0 It's not necessarily the case that the tree contains a node with value <code>V</code>.</p>\n<p>Additionally, most of the structure of the original tree should remain.\u00a0 Formally, for any child C with parent P in the original tree, if they are both in the same subtree after the split, then node C should still have the parent P.</p>\n<p>You should output the root TreeNode of\u00a0both subtrees after splitting, in any order.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> root = [4,2,6,1,3,5,7], V = 2\n<strong>Output:</strong> [[2,1],[4,3,6,null,null,5,7]]\n<strong>Explanation:</strong>\nNote that root, output[0], and output[1] are TreeNode objects, not arrays.\n\nThe given tree [4,2,6,1,3,5,7] is represented by the following diagram:\n\n          4\n        /   \\\n      2      6\n     / \\    / \\\n    1   3  5   7\n\nwhile the diagrams for the outputs are:\n\n          4\n        /   \\\n      3      6      and    2\n            / \\           /\n           5   7         1\n</pre>\n<p><strong>Note:</strong></p>\n<ol>\n<li>The size of the BST will not exceed <code>50</code>.</li>\n<li>The BST is always valid and each node's value is different.</li>\n</ol>\n",
        "questionDescriptionZh": "\n<p>Given a Binary Search Tree (BST) with root node <code>root</code>, and a target value <code>V</code>, split the tree into two subtrees\u00a0where one subtree has nodes that are all smaller or equal to the target value, while the other subtree has all nodes that are greater than the target value.\u00a0 It's not necessarily the case that the tree contains a node with value <code>V</code>.</p>\n<p>Additionally, most of the structure of the original tree should remain.\u00a0 Formally, for any child C with parent P in the original tree, if they are both in the same subtree after the split, then node C should still have the parent P.</p>\n<p>You should output the root TreeNode of\u00a0both subtrees after splitting, in any order.</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> root = [4,2,6,1,3,5,7], V = 2\n<strong>Output:</strong> [[2,1],[4,3,6,null,null,5,7]]\n<strong>Explanation:</strong>\nNote that root, output[0], and output[1] are TreeNode objects, not arrays.\n\nThe given tree [4,2,6,1,3,5,7] is represented by the following diagram:\n\n          4\n        /   \\\n      2      6\n     / \\    / \\\n    1   3  5   7\n\nwhile the diagrams for the outputs are:\n\n          4\n        /   \\\n      3      6      and    2\n            / \\           /\n           5   7         1\n</pre>\n<p><strong>Note:</strong></p>\n<ol>\n<li>The size of the BST will not exceed <code>50</code>.</li>\n<li>The BST is always valid and each node's value is different.</li>\n</ol>\n",
        "companies": [
            "Google",
            "Amazon",
            "Coupang"
        ]
    },
    {
        "leetId": "777",
        "link": "swap-adjacent-in-lr-string",
        "title": "Swap Adjacent in LR String",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "26.0%",
        "questionDescription": "<p>In a string composed of <code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>, and <code>&#39;X&#39;</code> characters, like <code>&quot;RXXLRXRXL&quot;</code>, a move consists of either replacing one occurrence of <code>&quot;XL&quot;</code> with <code>&quot;LX&quot;</code>, or replacing one occurrence of <code>&quot;RX&quot;</code> with <code>&quot;XR&quot;</code>. Given the starting string <code>start</code> and the ending string <code>end</code>, return <code>True</code> if and only if there exists a sequence of moves to transform one string to the other.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> start = &quot;RXXLRXRXL&quot;, end = &quot;XRLXXRRLX&quot;\r\n<strong>Output:</strong> True\r\n<strong>Explanation:</strong>\r\nWe can transform start to end following these steps:\r\nRXXLRXRXL -&gt;\r\nXRXLRXRXL -&gt;\r\nXRLXRXRXL -&gt;\r\nXRLXXRRXL -&gt;\r\nXRLXXRRLX\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= len(start) = len(end) &lt;= 10000</code>.</li>\r\n\t<li>Both start and end will only consist of characters in <code>{&#39;L&#39;, &#39;R&#39;, &#39;X&#39;}</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e00\u4e2a\u7531 <code>&#39;L&#39;</code> , <code>&#39;R&#39;</code> \u548c <code>&#39;X&#39;</code> \u4e09\u4e2a\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff08\u4f8b\u5982<code>&quot;RXXLRXRXL&quot;</code>\uff09\u4e2d\u8fdb\u884c\u79fb\u52a8\u64cd\u4f5c\u3002\u4e00\u6b21\u79fb\u52a8\u64cd\u4f5c\u6307\u7528\u4e00\u4e2a<code>&quot;LX&quot;</code>\u66ff\u6362\u4e00\u4e2a<code>&quot;XL&quot;</code>\uff0c\u6216\u8005\u7528\u4e00\u4e2a<code>&quot;XR&quot;</code>\u66ff\u6362\u4e00\u4e2a<code>&quot;RX&quot;</code>\u3002\u73b0\u7ed9\u5b9a\u8d77\u59cb\u5b57\u7b26\u4e32<code>start</code>\u548c\u7ed3\u675f\u5b57\u7b26\u4e32<code>end</code>\uff0c\u8bf7\u7f16\u5199\u4ee3\u7801\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u7cfb\u5217\u79fb\u52a8\u64cd\u4f5c\u4f7f\u5f97<code>start</code>\u53ef\u4ee5\u8f6c\u6362\u6210<code>end</code>\u65f6\uff0c \u8fd4\u56de<code>True</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b :</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> start = &quot;RXXLRXRXL&quot;, end = &quot;XRLXXRRLX&quot;\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:</strong>\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u51e0\u6b65\u5c06start\u8f6c\u6362\u6210end:\nRXXLRXRXL -&gt;\nXRXLRXRXL -&gt;\nXRLXRXRXL -&gt;\nXRLXXRRXL -&gt;\nXRLXXRRLX\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= len(start) = len(end) &lt;= 10000</code>\u3002</li>\n\t<li><code>start</code>\u548c<code>end</code>\u4e2d\u7684\u5b57\u7b26\u4e32\u4ec5\u9650\u4e8e<code>&#39;L&#39;</code>, <code>&#39;R&#39;</code>\u548c<code>&#39;X&#39;</code>\u3002</li>\n</ol>\n",
        "titleZh": "\u5728LR\u5b57\u7b26\u4e32\u4e2d\u4ea4\u6362\u76f8\u90bb\u5b57\u7b26",
        "tags": [
            {
                "tag": "Brainteaser",
                "link": "brainteaser",
                "tagZh": "\u8111\u7b4b\u6025\u8f6c\u5f2f"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "778",
        "link": "swim-in-rising-water",
        "title": "Swim in Rising Water",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "43.1%",
        "questionDescription": "<p>On an N x N <code>grid</code>, each square <code>grid[i][j]</code> represents the elevation at that point <code>(i,j)</code>.</p>\r\n\r\n<p>Now rain starts to fall. At time <code>t</code>, the depth of the water everywhere is <code>t</code>. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are&nbsp;at most&nbsp;<code>t</code>. You can swim infinite distance in zero time. Of course, you must stay within the boundaries of the grid during your swim.</p>\r\n\r\n<p>You start at the top left square <code>(0, 0)</code>. What is the least time until you can reach the bottom right square <code>(N-1, N-1)</code>?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [[0,2],[1,3]]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong>\r\nAt time <code>0</code>, you are in grid location <code>(0, 0)</code>.\r\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\r\n\r\nYou cannot reach point <code>(1, 1)</code> until time <code>3</code>.\r\nWhen the depth of water is <code>3</code>, we can swim anywhere inside the grid.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\r\n<strong>Output:</strong> 16\r\n<strong>Explanation:</strong>\r\n<strong> 0  1  2  3  4</strong>\r\n24 23 22 21  <strong>5</strong>\r\n<strong>12 13 14 15 16</strong>\r\n<strong>11</strong> 17 18 19 20\r\n<strong>10  9  8  7  6</strong>\r\n\r\nThe final route is marked in bold.\r\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= N &lt;= 50</code>.</li>\r\n\t<li>grid[i][j] is a permutation of [0, ..., N*N - 1].</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e00\u4e2a N x N \u7684\u5750\u6807\u65b9\u683c&nbsp;<code>grid</code> \u4e2d\uff0c\u6bcf\u4e00\u4e2a\u65b9\u683c\u7684\u503c <code>grid[i][j]</code> \u8868\u793a\u5728\u4f4d\u7f6e <code>(i,j)</code> \u7684\u5e73\u53f0\u9ad8\u5ea6\u3002</p>\n\n<p>\u73b0\u5728\u5f00\u59cb\u4e0b\u96e8\u4e86\u3002\u5f53\u65f6\u95f4\u4e3a&nbsp;<code>t</code>&nbsp;\u65f6\uff0c\u6b64\u65f6\u96e8\u6c34\u5bfc\u81f4\u6c34\u6c60\u4e2d\u4efb\u610f\u4f4d\u7f6e\u7684\u6c34\u4f4d\u4e3a&nbsp;<code>t</code>&nbsp;\u3002\u4f60\u53ef\u4ee5\u4ece\u4e00\u4e2a\u5e73\u53f0\u6e38\u5411\u56db\u5468\u76f8\u90bb\u7684\u4efb\u610f\u4e00\u4e2a\u5e73\u53f0\uff0c\u4f46\u662f\u524d\u63d0\u662f\u6b64\u65f6\u6c34\u4f4d\u5fc5\u987b\u540c\u65f6\u6df9\u6ca1\u8fd9\u4e24\u4e2a\u5e73\u53f0\u3002\u5047\u5b9a\u4f60\u53ef\u4ee5\u77ac\u95f4\u79fb\u52a8\u65e0\u9650\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u9ed8\u8ba4\u5728\u65b9\u683c\u5185\u90e8\u6e38\u52a8\u662f\u4e0d\u8017\u65f6\u7684\u3002\u5f53\u7136\uff0c\u5728\u4f60\u6e38\u6cf3\u7684\u65f6\u5019\u4f60\u5fc5\u987b\u5f85\u5728\u5750\u6807\u65b9\u683c\u91cc\u9762\u3002</p>\n\n<p>\u4f60\u4ece\u5750\u6807\u65b9\u683c\u7684\u5de6\u4e0a\u5e73\u53f0 (0\uff0c0) \u51fa\u53d1\u3002\u6700\u5c11\u8017\u65f6\u591a\u4e45\u4f60\u624d\u80fd\u5230\u8fbe\u5750\u6807\u65b9\u683c\u7684\u53f3\u4e0b\u5e73\u53f0&nbsp;<code>(N-1, N-1)</code>\uff1f</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [[0,2],[1,3]]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong>\n\u65f6\u95f4\u4e3a0\u65f6\uff0c\u4f60\u4f4d\u4e8e\u5750\u6807\u65b9\u683c\u7684\u4f4d\u7f6e\u4e3a <code>(0, 0)\u3002</code>\n\u6b64\u65f6\u4f60\u4e0d\u80fd\u6e38\u5411\u4efb\u610f\u65b9\u5411\uff0c\u56e0\u4e3a\u56db\u4e2a\u76f8\u90bb\u65b9\u5411\u5e73\u53f0\u7684\u9ad8\u5ea6\u90fd\u5927\u4e8e\u5f53\u524d\u65f6\u95f4\u4e3a 0 \u65f6\u7684\u6c34\u4f4d\u3002\n\n\u7b49\u65f6\u95f4\u5230\u8fbe 3 \u65f6\uff0c\u4f60\u624d\u53ef\u4ee5\u6e38\u5411\u5e73\u53f0 (1, 1). \u56e0\u4e3a\u6b64\u65f6\u7684\u6c34\u4f4d\u662f 3\uff0c\u5750\u6807\u65b9\u683c\u4e2d\u7684\u5e73\u53f0\u6ca1\u6709\u6bd4\u6c34\u4f4d 3 \u66f4\u9ad8\u7684\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u6e38\u5411\u5750\u6807\u65b9\u683c\u4e2d\u7684\u4efb\u610f\u4f4d\u7f6e\n</pre>\n\n<p><strong>\u793a\u4f8b2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\n<strong>\u8f93\u5165:</strong> 16\n<strong>\u89e3\u91ca:</strong>\n<strong> 0  1  2  3  4</strong>\n24 23 22 21  <strong>5</strong>\n<strong>12 13 14 15 16</strong>\n<strong>11</strong> 17 18 19 20\n<strong>10  9  8  7  6</strong>\n\n\u6700\u7ec8\u7684\u8def\u7ebf\u7528\u52a0\u7c97\u8fdb\u884c\u4e86\u6807\u8bb0\u3002\n\u6211\u4eec\u5fc5\u987b\u7b49\u5230\u65f6\u95f4\u4e3a 16\uff0c\u6b64\u65f6\u624d\u80fd\u4fdd\u8bc1\u5e73\u53f0 (0, 0) \u548c (4, 4) \u662f\u8fde\u901a\u7684\n</pre>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= N &lt;= 50</code>.</li>\n\t<li>grid[i][j] \u4f4d\u4e8e\u533a\u95f4 [0, ..., N*N - 1] \u5185\u3002</li>\n</ol>\n",
        "titleZh": "\u6c34\u4f4d\u4e0a\u5347\u7684\u6cf3\u6c60\u4e2d\u6e38\u6cf3",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "779",
        "link": "k-th-symbol-in-grammar",
        "title": "K-th Symbol in Grammar",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "34.6%",
        "questionDescription": "<p>On the first row, we write a <code>0</code>. Now in every subsequent row, we look at the previous row and replace each occurrence of <code>0</code> with <code>01</code>, and each occurrence of <code>1</code> with <code>10</code>.</p>\r\n\r\n<p>Given row <code>N</code> and index <code>K</code>, return the <code>K</code>-th indexed symbol in row <code>N</code>. (The values of <code>K</code> are 1-indexed.) (1 indexed).</p>\r\n\r\n<pre>\r\n<strong>Examples:</strong>\r\n<strong>Input:</strong> N = 1, K = 1\r\n<strong>Output:</strong> 0\r\n\r\n<strong>Input:</strong> N = 2, K = 1\r\n<strong>Output:</strong> 0\r\n\r\n<strong>Input:</strong> N = 2, K = 2\r\n<strong>Output:</strong> 1\r\n\r\n<strong>Input:</strong> N = 4, K = 5\r\n<strong>Output:</strong> 1\r\n\r\n<strong>Explanation:</strong>\r\nrow 1: 0\r\nrow 2: 01\r\nrow 3: 0110\r\nrow 4: 01101001\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>N</code> will be an integer in the range <code>[1, 30]</code>.</li>\r\n\t<li><code>K</code> will be an integer in the range <code>[1, 2^(N-1)]</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5728\u7b2c\u4e00\u884c\u6211\u4eec\u5199\u4e0a\u4e00\u4e2a <code>0</code>\u3002\u63a5\u4e0b\u6765\u7684\u6bcf\u4e00\u884c\uff0c\u5c06\u524d\u4e00\u884c\u4e2d\u7684<code>0</code>\u66ff\u6362\u4e3a<code>01</code>\uff0c<code>1</code>\u66ff\u6362\u4e3a<code>10</code>\u3002</p>\n\n<p>\u7ed9\u5b9a\u884c\u6570&nbsp;<code>N</code>&nbsp;\u548c\u5e8f\u6570 <code>K</code>\uff0c\u8fd4\u56de\u7b2c <code>N</code> \u884c\u4e2d\u7b2c <code>K</code>\u4e2a\u5b57\u7b26\u3002\uff08<code>K</code>\u4ece1\u5f00\u59cb\uff09</p>\n\n<p><br>\n<strong>\u4f8b\u5b50:</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> N = 1, K = 1\n<strong>\u8f93\u51fa:</strong> 0\n\n<strong>\u8f93\u5165:</strong> N = 2, K = 1\n<strong>\u8f93\u51fa:</strong> 0\n\n<strong>\u8f93\u5165:</strong> N = 2, K = 2\n<strong>\u8f93\u51fa:</strong> 1\n\n<strong>\u8f93\u5165:</strong> N = 4, K = 5\n<strong>\u8f93\u51fa:</strong> 1\n\n<strong>\u89e3\u91ca:</strong>\n\u7b2c\u4e00\u884c: 0\n\u7b2c\u4e8c\u884c: 01\n\u7b2c\u4e09\u884c: 0110\n\u7b2c\u56db\u884c: 01101001\n</pre>\n\n<p><br>\n<strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li><code>N</code>&nbsp;\u7684\u8303\u56f4&nbsp;<code>[1, 30]</code>.</li>\n\t<li><code>K</code>&nbsp;\u7684\u8303\u56f4&nbsp;<code>[1, 2^(N-1)]</code>.</li>\n</ol>\n",
        "titleZh": "\u7b2cK\u4e2a\u8bed\u6cd5\u7b26\u53f7",
        "tags": [
            {
                "tag": "Recursion",
                "link": "recursion",
                "tagZh": "\u9012\u5f52"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "780",
        "link": "reaching-points",
        "title": "Reaching Points",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "25.3%",
        "questionDescription": "<p>A move consists of taking a point <code>(x, y)</code> and transforming it to either <code>(x, x+y)</code> or <code>(x+y, y)</code>.</p>\r\n\r\n<p>Given a starting point <code>(sx, sy)</code> and a target point <code>(tx, ty)</code>, return <code>True</code> if and only if a sequence of moves exists to transform the point <code>(sx, sy)</code> to <code>(tx, ty)</code>. Otherwise, return <code>False</code>.</p>\r\n\r\n<pre>\r\n<strong>Examples:</strong>\r\n<strong>Input:</strong> sx = 1, sy = 1, tx = 3, ty = 5\r\n<strong>Output:</strong> True\r\n<strong>Explanation:</strong>\r\nOne series of moves that transforms the starting point to the target is:\r\n(1, 1) -&gt; (1, 2)\r\n(1, 2) -&gt; (3, 2)\r\n(3, 2) -&gt; (3, 5)\r\n\r\n<strong>Input:</strong> sx = 1, sy = 1, tx = 2, ty = 2\r\n<strong>Output:</strong> False\r\n\r\n<strong>Input:</strong> sx = 1, sy = 1, tx = 1, ty = 1\r\n<strong>Output:</strong> True\r\n\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>sx, sy, tx, ty</code> will all be integers in the range <code>[1, 10^9]</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u4ece\u70b9&nbsp;<code>(x, y)</code>&nbsp;\u53ef\u4ee5<strong>\u8f6c\u6362</strong>\u5230&nbsp;<code>(x, x+y)</code>&nbsp; \u6216\u8005&nbsp;<code>(x+y, y)</code>\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u8d77\u70b9&nbsp;<code>(sx, sy)</code>&nbsp;\u548c\u4e00\u4e2a\u7ec8\u70b9&nbsp;<code>(tx, ty)</code>\uff0c\u5982\u679c\u901a\u8fc7\u4e00\u7cfb\u5217\u7684<strong>\u8f6c\u6362</strong>\u53ef\u4ee5\u4ece\u8d77\u70b9\u5230\u8fbe\u7ec8\u70b9\uff0c\u5219\u8fd4\u56de <code>True&nbsp;</code>\uff0c\u5426\u5219\u8fd4\u56de&nbsp;<code>False</code>\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> sx = 1, sy = 1, tx = 3, ty = 5\n<strong>\u8f93\u51fa:</strong> True\n<strong>\u89e3\u91ca:\n</strong>\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u4e00\u7cfb\u5217<strong>\u8f6c\u6362</strong>\u4ece\u8d77\u70b9\u8f6c\u6362\u5230\u7ec8\u70b9\uff1a\n(1, 1) -&gt; (1, 2)\n(1, 2) -&gt; (3, 2)\n(3, 2) -&gt; (3, 5)\n\n<strong>\u8f93\u5165:</strong> sx = 1, sy = 1, tx = 2, ty = 2\n<strong>\u8f93\u51fa:</strong> False\n\n<strong>\u8f93\u5165:</strong> sx = 1, sy = 1, tx = 1, ty = 1\n<strong>\u8f93\u51fa:</strong> True\n\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>sx, sy, tx, ty</code>&nbsp;\u662f\u8303\u56f4\u5728&nbsp;<code>[1, 10^9]</code>&nbsp;\u7684\u6574\u6570\u3002</li>\n</ul>\n",
        "titleZh": "\u5230\u8fbe\u7ec8\u70b9",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Uber",
            "Salesforce",
            "Visa",
            "Coursera"
        ]
    },
    {
        "leetId": "781",
        "link": "rabbits-in-forest",
        "title": "Rabbits in Forest",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "49.5%",
        "questionDescription": "<p>In a forest, each rabbit has some color. Some subset of rabbits (possibly all of them) tell you how many other rabbits have the same color as them. Those <code>answers</code> are placed in an array.</p>\r\n\r\n<p>Return the minimum number of rabbits that could be in the forest.</p>\r\n\r\n<pre>\r\n<strong>Examples:</strong>\r\n<strong>Input:</strong> answers = [1, 1, 2]\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong>\r\nThe two rabbits that answered &quot;1&quot; could both be the same color, say red.\r\nThe rabbit than answered &quot;2&quot; can&#39;t be red or the answers would be inconsistent.\r\nSay the rabbit that answered &quot;2&quot; was blue.\r\nThen there should be 2 other blue rabbits in the forest that didn&#39;t answer into the array.\r\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn&#39;t.\r\n\r\n<strong>Input:</strong> answers = [10, 10, 10]\r\n<strong>Output:</strong> 11\r\n\r\n<strong>Input:</strong> answers = []\r\n<strong>Output:</strong> 0\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>answers</code> will have length at most <code>1000</code>.</li>\r\n\t<li>Each <code>answers[i]</code> will be an integer in the range <code>[0, 999]</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u68ee\u6797\u4e2d\uff0c\u6bcf\u4e2a\u5154\u5b50\u90fd\u6709\u989c\u8272\u3002\u5176\u4e2d\u4e00\u4e9b\u5154\u5b50\uff08\u53ef\u80fd\u662f\u5168\u90e8\uff09\u544a\u8bc9\u4f60\u8fd8\u6709\u591a\u5c11\u5176\u4ed6\u7684\u5154\u5b50\u548c\u81ea\u5df1\u6709\u76f8\u540c\u7684\u989c\u8272\u3002\u6211\u4eec\u5c06\u8fd9\u4e9b\u56de\u7b54\u653e\u5728&nbsp;<code>answers</code>&nbsp;\u6570\u7ec4\u91cc\u3002</p>\n\n<p>\u8fd4\u56de\u68ee\u6797\u4e2d\u5154\u5b50\u7684\u6700\u5c11\u6570\u91cf\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> answers = [1, 1, 2]\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong>\n\u4e24\u53ea\u56de\u7b54\u4e86 &quot;1&quot; \u7684\u5154\u5b50\u53ef\u80fd\u6709\u76f8\u540c\u7684\u989c\u8272\uff0c\u8bbe\u4e3a\u7ea2\u8272\u3002\n\u4e4b\u540e\u56de\u7b54\u4e86 &quot;2&quot; \u7684\u5154\u5b50\u4e0d\u4f1a\u662f\u7ea2\u8272\uff0c\u5426\u5219\u4ed6\u4eec\u7684\u56de\u7b54\u4f1a\u76f8\u4e92\u77db\u76fe\u3002\n\u8bbe\u56de\u7b54\u4e86 &quot;2&quot; \u7684\u5154\u5b50\u4e3a\u84dd\u8272\u3002\n\u6b64\u5916\uff0c\u68ee\u6797\u4e2d\u8fd8\u5e94\u6709\u53e6\u5916 2 \u53ea\u84dd\u8272\u5154\u5b50\u7684\u56de\u7b54\u6ca1\u6709\u5305\u542b\u5728\u6570\u7ec4\u4e2d\u3002\n\u56e0\u6b64\u68ee\u6797\u4e2d\u5154\u5b50\u7684\u6700\u5c11\u6570\u91cf\u662f 5: 3 \u53ea\u56de\u7b54\u7684\u548c 2 \u53ea\u6ca1\u6709\u56de\u7b54\u7684\u3002\n\n<strong>\u8f93\u5165:</strong> answers = [10, 10, 10]\n<strong>\u8f93\u51fa:</strong> 11\n\n<strong>\u8f93\u5165:</strong> answers = []\n<strong>\u8f93\u51fa:</strong> 0\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li><code>answers</code>&nbsp;\u7684\u957f\u5ea6\u6700\u5927\u4e3a<code>1000</code>\u3002</li>\n\t<li><code>answers[i]</code>&nbsp;\u662f\u5728&nbsp;<code>[0, 999]</code>&nbsp;\u8303\u56f4\u5185\u7684\u6574\u6570\u3002</li>\n</ol>\n",
        "titleZh": "\u68ee\u6797\u4e2d\u7684\u5154\u5b50",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Wish"
        ]
    },
    {
        "leetId": "782",
        "link": "transform-to-chessboard",
        "title": "Transform to Chessboard",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "38.7%",
        "questionDescription": "<p>An N x N <code>board</code> contains only <code>0</code>s and <code>1</code>s. In each move, you can swap any 2 rows with each other, or any 2 columns with each other.</p>\r\n\r\n<p>What is the minimum number of moves to transform the board into a &quot;chessboard&quot; - a board where no <code>0</code>s and no <code>1</code>s are 4-directionally adjacent? If the task is impossible, return -1.</p>\r\n\r\n<pre>\r\n<strong>Examples:</strong>\r\n<strong>Input:</strong> board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong>\r\nOne potential sequence of moves is shown below, from left to right:\r\n\r\n0110     1010     1010\r\n0110 --&gt; 1010 --&gt; 0101\r\n1001     0101     1010\r\n1001     0101     0101\r\n\r\nThe first move swaps the first and second column.\r\nThe second move swaps the second and third row.\r\n\r\n\r\n<strong>Input:</strong> board = [[0, 1], [1, 0]]\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong>\r\nAlso note that the board with 0 in the top left corner,\r\n01\r\n10\r\n\r\nis also a valid chessboard.\r\n\r\n<strong>Input:</strong> board = [[1, 0], [1, 0]]\r\n<strong>Output:</strong> -1\r\n<strong>Explanation:</strong>\r\nNo matter what sequence of moves you make, you cannot end with a valid chessboard.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>board</code> will have the same number of rows and columns, a number in the range <code>[2, 30]</code>.</li>\r\n\t<li><code>board[i][j]</code> will be only <code>0</code>s or <code>1</code>s.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u4e00\u4e2a N&nbsp;x N\u7684 <code>board</code>&nbsp;\u4ec5\u7531&nbsp;<code>0</code>&nbsp;\u548c&nbsp;<code>1</code>&nbsp;\u7ec4\u6210&nbsp;\u3002\u6bcf\u6b21\u79fb\u52a8\uff0c\u4f60\u80fd\u4efb\u610f\u4ea4\u6362\u4e24\u5217\u6216\u662f\u4e24\u884c\u7684\u4f4d\u7f6e\u3002</p>\n\n<p>\u8f93\u51fa\u5c06\u8fd9\u4e2a\u77e9\u9635\u53d8\u4e3a &ldquo;\u68cb\u76d8&rdquo; \u6240\u9700\u7684\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u3002&ldquo;\u68cb\u76d8&rdquo; \u662f\u6307\u4efb\u610f\u4e00\u683c\u7684\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u7684\u503c\u5747\u4e0e\u672c\u8eab\u4e0d\u540c\u7684\u77e9\u9635\u3002\u5982\u679c\u4e0d\u5b58\u5728\u53ef\u884c\u7684\u53d8\u6362\uff0c\u8f93\u51fa -1\u3002</p>\n\n<pre><strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong>\n\u4e00\u79cd\u53ef\u884c\u7684\u53d8\u6362\u65b9\u5f0f\u5982\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\uff1a\n\n0110     1010     1010\n0110 --&gt; 1010 --&gt; 0101\n1001     0101     1010\n1001     0101     0101\n\n\u7b2c\u4e00\u6b21\u79fb\u52a8\u4ea4\u6362\u4e86\u7b2c\u4e00\u5217\u548c\u7b2c\u4e8c\u5217\u3002\n\u7b2c\u4e8c\u6b21\u79fb\u52a8\u4ea4\u6362\u4e86\u7b2c\u4e8c\u884c\u548c\u7b2c\u4e09\u884c\u3002\n\n\n<strong>\u8f93\u5165:</strong> board = [[0, 1], [1, 0]]\n<strong>\u8f93\u51fa:</strong> 0\n<strong>\u89e3\u91ca:</strong>\n\u6ce8\u610f\u5de6\u4e0a\u89d2\u7684\u683c\u503c\u4e3a0\u65f6\u4e5f\u662f\u5408\u6cd5\u7684\u68cb\u76d8\uff0c\u5982\uff1a\n\n01\n10\n\n\u4e5f\u662f\u5408\u6cd5\u7684\u68cb\u76d8.\n\n<strong>\u8f93\u5165:</strong> board = [[1, 0], [1, 0]]\n<strong>\u8f93\u51fa:</strong> -1\n<strong>\u89e3\u91ca:</strong>\n\u4efb\u610f\u7684\u53d8\u6362\u90fd\u4e0d\u80fd\u4f7f\u8fd9\u4e2a\u8f93\u5165\u53d8\u4e3a\u5408\u6cd5\u7684\u68cb\u76d8\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>board</code>&nbsp;\u662f\u65b9\u9635\uff0c\u4e14\u884c\u5217\u6570\u7684\u8303\u56f4\u662f<code>[2, 30]</code>\u3002</li>\n\t<li><code>board[i][j]</code>&nbsp;\u5c06\u53ea\u5305\u542b&nbsp;<code>0</code>\u6216&nbsp;<code>1</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u53d8\u4e3a\u68cb\u76d8",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "783",
        "link": "minimum-distance-between-bst-nodes",
        "title": "Minimum Distance Between BST Nodes",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "51.5%",
        "questionDescription": "<p>Given a Binary Search Tree (BST) with the root node <code>root</code>, return&nbsp;the minimum difference between the values of any two different nodes in the tree.</p>\r\n\r\n<p><strong>Example :</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> root = [4,2,6,1,3,null,null]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong>\r\nNote that root is a TreeNode object, not an array.\r\n\r\nThe given tree [4,2,6,1,3,null,null] is represented by the following diagram:\r\n\r\n          4\r\n        /   \\\r\n      2      6\r\n     / \\    \r\n    1   3  \r\n\r\nwhile the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The size of the BST will be between 2 and&nbsp;<code>100</code>.</li>\r\n\t<li>The BST is always valid, each node&#39;s value is an integer, and each node&#39;s value is different.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u7ed3\u70b9&nbsp;<code>root</code>, \u8fd4\u56de\u6811\u4e2d\u4efb\u610f\u4e24\u8282\u70b9\u7684\u5dee\u7684\u6700\u5c0f\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> root = [4,2,6,1,3,null,null]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca:</strong>\n\u6ce8\u610f\uff0croot\u662f\u6811\u7ed3\u70b9\u5bf9\u8c61(TreeNode object)\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u3002\n\n\u7ed9\u5b9a\u7684\u6811 [4,2,6,1,3,null,null] \u53ef\u8868\u793a\u4e3a\u4e0b\u56fe:\n\n          4\n        /   \\\n      2      6\n     / \\    \n    1   3  \n\n\u6700\u5c0f\u7684\u5dee\u503c\u662f 1, \u5b83\u662f\u8282\u70b91\u548c\u8282\u70b92\u7684\u5dee\u503c, \u4e5f\u662f\u8282\u70b93\u548c\u8282\u70b92\u7684\u5dee\u503c\u3002</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ol>\n\t<li>\u4e8c\u53c9\u6811\u7684\u5927\u5c0f\u8303\u56f4\u5728 <code>2</code> \u5230&nbsp;<code>100</code>\u3002</li>\n\t<li>\u4e8c\u53c9\u6811\u603b\u662f\u6709\u6548\u7684\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f\u6574\u6570\uff0c\u4e14\u4e0d\u91cd\u590d\u3002</li>\n</ol>\n",
        "titleZh": "\u4e8c\u53c9\u641c\u7d22\u6811\u7ed3\u70b9\u6700\u5c0f\u8ddd\u79bb",
        "tags": [
            {
                "tag": "Binary Search Tree",
                "link": "binary-search-tree",
                "tagZh": "\u4e8c\u53c9\u641c\u7d22\u6811"
            }
        ],
        "companies": [
            "Google",
            "Amazon"
        ]
    },
    {
        "leetId": "784",
        "link": "letter-case-permutation",
        "title": "Letter Case Permutation",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "52.9%",
        "questionDescription": "<p>Given a string S, we can transform every letter individually&nbsp;to be lowercase or uppercase to create another string.&nbsp; Return a list of all possible strings we could create.</p>\r\n\r\n<pre>\r\n<strong>Examples:</strong>\r\n<strong>Input:</strong> S = &quot;a1b2&quot;\r\n<strong>Output:</strong> [&quot;a1b2&quot;, &quot;a1B2&quot;, &quot;A1b2&quot;, &quot;A1B2&quot;]\r\n\r\n<strong>Input:</strong> S = &quot;3z4&quot;\r\n<strong>Output:</strong> [&quot;3z4&quot;, &quot;3Z4&quot;]\r\n\r\n<strong>Input:</strong> S = &quot;12345&quot;\r\n<strong>Output:</strong> [&quot;12345&quot;]\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>S</code> will be a string with length between <code>1</code> and <code>12</code>.</li>\r\n\t<li><code>S</code> will consist only of letters or digits.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32<code>S</code>\uff0c\u901a\u8fc7\u5c06\u5b57\u7b26\u4e32<code>S</code>\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u8f6c\u53d8\u5927\u5c0f\u5199\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u3002\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u96c6\u5408\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> S = &quot;a1b2&quot;\n<strong>\u8f93\u51fa:</strong> [&quot;a1b2&quot;, &quot;a1B2&quot;, &quot;A1b2&quot;, &quot;A1B2&quot;]\n\n<strong>\u8f93\u5165:</strong> S = &quot;3z4&quot;\n<strong>\u8f93\u51fa:</strong> [&quot;3z4&quot;, &quot;3Z4&quot;]\n\n<strong>\u8f93\u5165:</strong> S = &quot;12345&quot;\n<strong>\u8f93\u51fa:</strong> [&quot;12345&quot;]\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li><code>S</code>&nbsp;\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7<code>12</code>\u3002</li>\n\t<li><code>S</code>&nbsp;\u4ec5\u7531\u6570\u5b57\u548c\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n</ul>\n",
        "titleZh": "\u5b57\u6bcd\u5927\u5c0f\u5199\u5168\u6392\u5217",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Yelp"
        ]
    },
    {
        "leetId": "785",
        "link": "is-graph-bipartite",
        "title": "Is Graph Bipartite?",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "35.4%",
        "questionDescription": "<p>Given an undirected&nbsp;<code>graph</code>, return <code>true</code> if and only if it is bipartite.</p>\r\n\r\n<p>Recall that a graph is <em>bipartite</em> if we can split it&#39;s set of nodes into two independent&nbsp;subsets A and B such that every edge in the graph has one node in A and another node in B.</p>\r\n\r\n<p>The graph is given in the following form: <code>graph[i]</code> is a list of indexes <code>j</code> for which the edge between nodes <code>i</code> and <code>j</code> exists.&nbsp; Each node is an integer between <code>0</code> and <code>graph.length - 1</code>.&nbsp; There are no self edges or parallel edges: <code>graph[i]</code> does not contain <code>i</code>, and it doesn&#39;t contain any element twice.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> [[1,3], [0,2], [1,3], [0,2]]\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong> \r\nThe graph looks like this:\r\n0----1\r\n|    |\r\n|    |\r\n3----2\r\nWe can divide the vertices into two groups: {0, 2} and {1, 3}.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> [[1,2,3], [0,2], [0,1,3], [0,2]]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> \r\nThe graph looks like this:\r\n0----1\r\n| \\  |\r\n|  \\ |\r\n3----2\r\nWe cannot find a way to divide the set of nodes into two independent subsets.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>graph</code> will have length in range <code>[1, 100]</code>.</li>\r\n\t<li><code>graph[i]</code> will contain integers in range <code>[0, graph.length - 1]</code>.</li>\r\n\t<li><code>graph[i]</code> will not contain <code>i</code> or duplicate values.</li>\r\n\t<li>The graph is undirected: if any element <code>j</code> is in <code>graph[i]</code>, then <code>i</code> will be in <code>graph[j]</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u56fe<code>graph</code>\uff0c\u5f53\u8fd9\u4e2a\u56fe\u4e3a\u4e8c\u5206\u56fe\u65f6\u8fd4\u56de<code>true</code>\u3002</p>\n\n<p>\u5982\u679c\u6211\u4eec\u80fd\u5c06\u4e00\u4e2a\u56fe\u7684\u8282\u70b9\u96c6\u5408\u5206\u5272\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u5b50\u96c6A\u548cB\uff0c\u5e76\u4f7f\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u4e00\u4e2a\u6765\u81eaA\u96c6\u5408\uff0c\u4e00\u4e2a\u6765\u81eaB\u96c6\u5408\uff0c\u6211\u4eec\u5c31\u5c06\u8fd9\u4e2a\u56fe\u79f0\u4e3a\u4e8c\u5206\u56fe\u3002</p>\n\n<p><code>graph</code>\u5c06\u4f1a\u4ee5\u90bb\u63a5\u8868\u65b9\u5f0f\u7ed9\u51fa\uff0c<code>graph[i]</code>\u8868\u793a\u56fe\u4e2d\u4e0e\u8282\u70b9<code>i</code>\u76f8\u8fde\u7684\u6240\u6709\u8282\u70b9\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2a\u5728<code>0</code>\u5230<code>graph.length-1</code>\u4e4b\u95f4\u7684\u6574\u6570\u3002\u8fd9\u56fe\u4e2d\u6ca1\u6709\u81ea\u73af\u548c\u5e73\u884c\u8fb9\uff1a&nbsp;<code>graph[i]</code>&nbsp;\u4e2d\u4e0d\u5b58\u5728<code>i</code>\uff0c\u5e76\u4e14<code>graph[i]</code>\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u503c\u3002</p>\n\n<pre>\n<code>\n<strong>\u793a\u4f8b 1:</strong>\n\u8f93\u5165<strong>:</strong> [[1,3], [0,2], [1,3], [0,2]]\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca:</strong> \n\u65e0\u5411\u56fe\u5982\u4e0b:\n0----1\n|    |\n|    |\n3----2\n\u6211\u4eec\u53ef\u4ee5\u5c06\u8282\u70b9\u5206\u6210\u4e24\u7ec4: {0, 2} \u548c {1, 3}\u3002\n</code></pre>\n\n<pre>\n<code>\n<strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> [[1,2,3], [0,2], [0,1,3], [0,2]]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \n\u65e0\u5411\u56fe\u5982\u4e0b:\n0----1\n| \\  |\n|  \\ |\n3----2\n\u6211\u4eec\u4e0d\u80fd\u5c06\u8282\u70b9\u5206\u5272\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u5b50\u96c6\u3002\n</code></pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>graph</code> \u7684\u957f\u5ea6\u8303\u56f4\u4e3a <code>[1, 100]</code>\u3002</li>\n\t<li><code>graph[i]</code> \u4e2d\u7684\u5143\u7d20\u7684\u8303\u56f4\u4e3a <code>[0, graph.length - 1]</code>\u3002</li>\n\t<li><code>graph[i]</code> \u4e0d\u4f1a\u5305\u542b <code>i</code> \u6216\u8005\u6709\u91cd\u590d\u7684\u503c\u3002</li>\n\t<li>\u56fe\u662f\u65e0\u5411\u7684: \u5982\u679c<code>j</code> \u5728 <code>graph[i]</code>\u91cc\u8fb9, \u90a3\u4e48 <code>i</code> \u4e5f\u4f1a\u5728 <code>graph[j]</code>\u91cc\u8fb9\u3002</li>\n</ul>\n",
        "titleZh": "\u5224\u65ad\u4e8c\u5206\u56fe",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Apple",
            "Houzz"
        ]
    },
    {
        "leetId": "786",
        "link": "k-th-smallest-prime-fraction",
        "title": "K-th Smallest Prime Fraction",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "29.5%",
        "questionDescription": "<p>A sorted list <code>A</code> contains 1, plus some number of primes.&nbsp; Then, for every p &lt; q in the list, we consider the fraction p/q.</p>\r\n\r\n<p>What is the <code>K</code>-th smallest fraction considered?&nbsp; Return your answer as an array of ints, where <code>answer[0] = p</code> and <code>answer[1] = q</code>.</p>\r\n\r\n<pre>\r\n<strong>Examples:</strong>\r\n<strong>Input:</strong> A = [1, 2, 3, 5], K = 3\r\n<strong>Output:</strong> [2, 5]\r\n<strong>Explanation:</strong>\r\nThe fractions to be considered in sorted order are:\r\n1/5, 1/3, 2/5, 1/2, 3/5, 2/3.\r\nThe third fraction is 2/5.\r\n\r\n<strong>Input:</strong> A = [1, 7], K = 1\r\n<strong>Output:</strong> [1, 7]\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>A</code> will have length between <code>2</code> and <code>2000</code>.</li>\r\n\t<li>Each <code>A[i]</code> will be between <code>1</code> and <code>30000</code>.</li>\r\n\t<li><code>K</code> will be between <code>1</code> and <code>A.length * (A.length - 1) / 2</code>.</li>\r\n</ul>",
        "questionDescriptionZh": "<p>\u4e00\u4e2a\u5df2\u6392\u5e8f\u597d\u7684\u8868&nbsp;<code>A</code>\uff0c\u5176\u5305\u542b 1 \u548c\u5176\u4ed6\u4e00\u4e9b\u7d20\u6570.&nbsp; \u5f53\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a p&lt;q \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a\u5206\u6570 p/q \u3002</p>\n\n<p>\u90a3\u4e48\u7b2c&nbsp;<code>k</code>&nbsp;\u4e2a\u6700\u5c0f\u7684\u5206\u6570\u662f\u591a\u5c11\u5462?&nbsp; \u4ee5\u6574\u6570\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u4f60\u7684\u7b54\u6848, \u8fd9\u91cc&nbsp;<code>answer[0] = p</code>&nbsp;\u4e14&nbsp;<code>answer[1] = q</code>.</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> A = [1, 2, 3, 5], K = 3\n<strong>\u8f93\u51fa:</strong> [2, 5]\n<strong>\u89e3\u91ca:</strong>\n\u5df2\u6784\u9020\u597d\u7684\u5206\u6570,\u6392\u5e8f\u540e\u5982\u4e0b\u6240\u793a:\n1/5, 1/3, 2/5, 1/2, 3/5, 2/3.\n\u5f88\u660e\u663e\u7b2c\u4e09\u4e2a\u6700\u5c0f\u7684\u5206\u6570\u662f 2/5.\n\n<strong>\u8f93\u5165:</strong> A = [1, 7], K = 1\n<strong>\u8f93\u51fa:</strong> [1, 7]\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>A</code> \u7684\u53d6\u503c\u8303\u56f4\u5728 <code>2</code> &mdash; <code>2000</code>.</li>\n\t<li>\u6bcf\u4e2a&nbsp;<code>A[i]</code> \u7684\u503c\u5728 <code>1</code> &mdash;<code>30000</code>.</li>\n\t<li><code>K</code> \u53d6\u503c\u8303\u56f4\u4e3a <code>1</code> &mdash;<code>A.length * (A.length - 1) / 2</code></li>\n</ul>\n",
        "titleZh": "\u7b2c K \u4e2a\u6700\u5c0f\u7684\u7d20\u6570\u5206\u6570",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Pony.ai"
        ]
    },
    {
        "leetId": "787",
        "link": "cheapest-flights-within-k-stops",
        "title": "Cheapest Flights Within K Stops",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "32.6%",
        "questionDescription": "<p>There are <code>n</code> cities connected by&nbsp;<code>m</code> flights. Each fight starts from city&nbsp;<code>u </code>and arrives at&nbsp;<code>v</code> with a price <code>w</code>.</p>\r\n\r\n<p>Now given all the cities and flights, together with starting city <code>src</code> and the destination&nbsp;<code>dst</code>, your task is to find the cheapest price from <code>src</code> to <code>dst</code> with up to <code>k</code> stops. If there is no such route, output <code>-1</code>.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> \r\nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\r\nsrc = 0, dst = 2, k = 1\r\n<strong>Output:</strong> 200\r\n<strong>Explanation:</strong> \r\nThe graph looks like this:\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" style=\"height:180px; width:246px\" />\r\n\r\nThe cheapest price from city <code>0</code> to city <code>2</code> with at most 1 stop costs 200, as marked red in the picture.</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> \r\nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\r\nsrc = 0, dst = 2, k = 0\r\n<strong>Output:</strong> 500\r\n<strong>Explanation:</strong> \r\nThe graph looks like this:\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" style=\"height:180px; width:246px\" />\r\n\r\nThe cheapest price from city <code>0</code> to city <code>2</code> with at most 0 stop costs 500, as marked blue in the picture.</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of&nbsp;nodes&nbsp;<code>n</code> will be&nbsp;in range <code>[1, 100]</code>, with nodes labeled from <code>0</code> to <code>n</code><code> - 1</code>.</li>\r\n\t<li>The&nbsp;size of <code>flights</code> will be&nbsp;in range <code>[0, n * (n - 1) / 2]</code>.</li>\r\n\t<li>The format of each flight will be <code>(src, </code><code>dst</code><code>, price)</code>.</li>\r\n\t<li>The price of each flight will be in the range <code>[1, 10000]</code>.</li>\r\n\t<li><code>k</code> is in the range of <code>[0, n - 1]</code>.</li>\r\n\t<li>There&nbsp;will&nbsp;not&nbsp;be&nbsp;any&nbsp;duplicated&nbsp;flights or&nbsp;self&nbsp;cycles.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u6709 <code>n</code> \u4e2a\u57ce\u5e02\u901a\u8fc7 <code>m</code> \u4e2a\u822a\u73ed\u8fde\u63a5\u3002\u6bcf\u4e2a\u822a\u73ed\u90fd\u4ece\u57ce\u5e02 <code>u</code> \u5f00\u59cb\uff0c\u4ee5\u4ef7\u683c <code>w</code> \u62b5\u8fbe <code>v</code>\u3002</p>\n\n<p>\u73b0\u5728\u7ed9\u5b9a\u6240\u6709\u7684\u57ce\u5e02\u548c\u822a\u73ed\uff0c\u4ee5\u53ca\u51fa\u53d1\u57ce\u5e02 <code>src</code> \u548c\u76ee\u7684\u5730 <code>dst</code>\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u627e\u5230\u4ece <code>src</code> \u5230 <code>dst</code> \u6700\u591a\u7ecf\u8fc7 <code>k</code>&nbsp;\u7ad9\u4e2d\u8f6c\u7684\u6700\u4fbf\u5b9c\u7684\u4ef7\u683c\u3002 \u5982\u679c\u6ca1\u6709\u8fd9\u6837\u7684\u8def\u7ebf\uff0c\u5219\u8f93\u51fa <code>-1</code>\u3002</p>\n\n<pre><strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 1\n<strong>\u8f93\u51fa:</strong> 200\n<strong>\u89e3\u91ca:</strong> \n\u57ce\u5e02\u822a\u73ed\u56fe\u5982\u4e0b\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" style=\"height: 180px; width: 246px;\">\n\n\u4ece\u57ce\u5e02 0 \u5230\u57ce\u5e02 2 \u5728 1 \u7ad9\u4e2d\u8f6c\u4ee5\u5185\u7684\u6700\u4fbf\u5b9c\u4ef7\u683c\u662f 200\uff0c\u5982\u56fe\u4e2d\u7ea2\u8272\u6240\u793a\u3002</pre>\n\n<pre><strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> \nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\nsrc = 0, dst = 2, k = 0\n<strong>\u8f93\u51fa:</strong> 500\n<strong>\u89e3\u91ca:</strong> \n\u57ce\u5e02\u822a\u73ed\u56fe\u5982\u4e0b\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\" style=\"height: 180px; width: 246px;\">\n\n\u4ece\u57ce\u5e02 0 \u5230\u57ce\u5e02 2 \u5728 0 \u7ad9\u4e2d\u8f6c\u4ee5\u5185\u7684\u6700\u4fbf\u5b9c\u4ef7\u683c\u662f 500\uff0c\u5982\u56fe\u4e2d\u84dd\u8272\u6240\u793a\u3002</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>n</code> \u8303\u56f4\u662f <code>[1, 100]</code>\uff0c\u57ce\u5e02\u6807\u7b7e\u4ece <code>0</code> \u5230 <code>n</code><code> - 1</code>.</li>\n\t<li>\u822a\u73ed\u6570\u91cf\u8303\u56f4\u662f <code>[0, n * (n - 1) / 2]</code>.</li>\n\t<li>\u6bcf\u4e2a\u822a\u73ed\u7684\u683c\u5f0f <code>(src, </code><code>dst</code><code>, price)</code>.</li>\n\t<li>\u6bcf\u4e2a\u822a\u73ed\u7684\u4ef7\u683c\u8303\u56f4\u662f <code>[1, 10000]</code>.</li>\n\t<li><code>k</code> \u8303\u56f4\u662f <code>[0, n - 1]</code>.</li>\n\t<li>\u822a\u73ed\u6ca1\u6709\u91cd\u590d\uff0c\u4e14\u4e0d\u5b58\u5728\u73af\u8def</li>\n</ul>\n",
        "titleZh": "K \u7ad9\u4e2d\u8f6c\u5185\u6700\u4fbf\u5b9c\u7684\u822a\u73ed",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Airbnb"
        ]
    },
    {
        "leetId": "788",
        "link": "rotated-digits",
        "title": "Rotated Digits",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "53.8%",
        "questionDescription": "<p>X is a good number if after rotating each digit individually by 180 degrees, we get a valid number that is different from X.&nbsp; Each digit must be rotated - we cannot choose to leave it alone.</p>\r\n\r\n<p>A number is valid if each digit remains a digit after rotation. 0, 1, and 8 rotate to themselves; 2 and 5 rotate to each other; 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid.</p>\r\n\r\n<p>Now&nbsp;given a positive number <code>N</code>, how many numbers X from <code>1</code> to <code>N</code> are good?</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> 10\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> \r\nThere are four good numbers in the range [1, 10] : 2, 5, 6, 9.\r\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>N&nbsp; will be in range <code>[1, 10000]</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u79f0\u4e00\u4e2a\u6570 X \u4e3a\u597d\u6570, \u5982\u679c\u5b83\u7684\u6bcf\u4f4d\u6570\u5b57\u9010\u4e2a\u5730\u88ab\u65cb\u8f6c 180 \u5ea6\u540e\uff0c\u6211\u4eec\u4ecd\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6709\u6548\u7684\uff0c\u4e14\u548c X \u4e0d\u540c\u7684\u6570\u3002\u8981\u6c42\u6bcf\u4f4d\u6570\u5b57\u90fd\u8981\u88ab\u65cb\u8f6c\u3002</p>\n\n<p>\u5982\u679c\u4e00\u4e2a\u6570\u7684\u6bcf\u4f4d\u6570\u5b57\u88ab\u65cb\u8f6c\u4ee5\u540e\u4ecd\u7136\u8fd8\u662f\u4e00\u4e2a\u6570\u5b57\uff0c&nbsp;\u5219\u8fd9\u4e2a\u6570\u662f\u6709\u6548\u7684\u30020, 1, \u548c 8 \u88ab\u65cb\u8f6c\u540e\u4ecd\u7136\u662f\u5b83\u4eec\u81ea\u5df1\uff1b2 \u548c 5 \u53ef\u4ee5\u4e92\u76f8\u65cb\u8f6c\u6210\u5bf9\u65b9\uff1b6 \u548c 9 \u540c\u7406\uff0c\u9664\u4e86\u8fd9\u4e9b\u4ee5\u5916\u5176\u4ed6\u7684\u6570\u5b57\u65cb\u8f6c\u4ee5\u540e\u90fd\u4e0d\u518d\u662f\u6709\u6548\u7684\u6570\u5b57\u3002</p>\n\n<p>\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<code>N</code>, \u8ba1\u7b97\u4ece&nbsp;<code>1</code> \u5230&nbsp;<code>N</code> \u4e2d\u6709\u591a\u5c11\u4e2a\u6570&nbsp;X \u662f\u597d\u6570\uff1f</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> 10\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \n\u5728[1, 10]\u4e2d\u6709\u56db\u4e2a\u597d\u6570\uff1a 2, 5, 6, 9\u3002\n\u6ce8\u610f 1 \u548c 10 \u4e0d\u662f\u597d\u6570, \u56e0\u4e3a\u4ed6\u4eec\u5728\u65cb\u8f6c\u4e4b\u540e\u4e0d\u53d8\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>N&nbsp;\u7684\u53d6\u503c\u8303\u56f4\u662f&nbsp;<code>[1, 10000]</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u65cb\u8f6c\u6570\u5b57",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "789",
        "link": "escape-the-ghosts",
        "title": "Escape The Ghosts",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "57.5%",
        "questionDescription": "<p>You are playing a simplified Pacman game. You&nbsp;start at the point <code>(0, 0)</code>, and your destination is<code> (target[0], target[1])</code>. There are several ghosts on the map, the i-th ghost starts at<code> (ghosts[i][0], ghosts[i][1])</code>.</p>\r\n\r\n<p>Each turn, you and all ghosts simultaneously *may* move in one of 4 cardinal directions: north, east, west, or south, going from the previous point to a new point 1 unit of distance away.</p>\r\n\r\n<p>You escape if and only if you can reach the target before any ghost reaches you (for any given moves the ghosts may take.)&nbsp; If you reach any square (including the target) at the same time as a ghost, it doesn&#39;t count as an escape.</p>\r\n\r\n<p>Return True if and only if it is possible to escape.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> \r\nghosts = [[1, 0], [0, 3]]\r\ntarget = [0, 1]\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong> \r\nYou can directly reach the destination (0, 1) at time 1, while the ghosts located at (1, 0) or (0, 3) have no way to catch up with you.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> \r\nghosts = [[1, 0]]\r\ntarget = [2, 0]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> \r\nYou need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 3:</strong>\r\n<strong>Input:</strong> \r\nghosts = [[2, 0]]\r\ntarget = [1, 0]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> \r\nThe ghost can reach the target at the same time as you.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All points have coordinates with absolute value &lt;= <code>10000</code>.</li>\r\n\t<li>The number of ghosts will not exceed <code>100</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u4f60\u5728\u8fdb\u884c\u4e00\u4e2a\u7b80\u5316\u7248\u7684\u5403\u8c46\u4eba\u6e38\u620f\u3002\u4f60\u4ece&nbsp;<code>(0, 0)</code>&nbsp;\u70b9\u5f00\u59cb\u51fa\u53d1\uff0c\u4f60\u7684\u76ee\u7684\u5730\u662f&nbsp;<code>(target[0], target[1])</code>&nbsp;\u3002\u5730\u56fe\u4e0a\u6709\u4e00\u4e9b\u963b\u788d\u8005\uff0c\u7b2c i \u4e2a\u963b\u788d\u8005\u4ece&nbsp;<code>(ghosts[i][0], ghosts[i][1])</code>&nbsp;\u51fa\u53d1\u3002</p>\n\n<p>\u6bcf\u4e00\u56de\u5408\uff0c\u4f60\u548c\u963b\u788d\u8005\u4eec*\u53ef\u4ee5*\u540c\u65f6\u5411\u4e1c\uff0c\u897f\uff0c\u5357\uff0c\u5317\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\uff0c\u6bcf\u6b21\u53ef\u4ee5\u79fb\u52a8\u5230\u8ddd\u79bb\u539f\u4f4d\u7f6e1\u4e2a\u5355\u4f4d\u7684\u65b0\u4f4d\u7f6e\u3002</p>\n\n<p>\u5982\u679c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u963b\u788d\u8005\u6293\u4f4f\u4f60\u4e4b\u524d\u5230\u8fbe\u76ee\u7684\u5730\uff08\u963b\u788d\u8005\u53ef\u4ee5\u91c7\u53d6\u4efb\u610f\u884c\u52a8\u65b9\u5f0f\uff09\uff0c\u5219\u88ab\u89c6\u4e3a\u9003\u8131\u6210\u529f\u3002\u5982\u679c\u4f60\u548c\u963b\u788d\u8005\u540c\u65f6\u5230\u8fbe\u4e86\u4e00\u4e2a\u4f4d\u7f6e\uff08\u5305\u62ec\u76ee\u7684\u5730\uff09\u90fd\u4e0d\u7b97\u662f\u9003\u8131\u6210\u529f\u3002</p>\n\n<p>\u5f53\u4e14\u4ec5\u5f53\u4f60\u6709\u53ef\u80fd\u6210\u529f\u9003\u8131\u65f6\uff0c\u8f93\u51fa True\u3002</p>\n\n<pre><strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165\uff1a</strong> \nghosts = [[1, 0], [0, 3]]\ntarget = [0, 1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a\n</strong>\u4f60\u53ef\u4ee5\u76f4\u63a5\u4e00\u6b65\u5230\u8fbe\u76ee\u7684\u5730(0,1)\uff0c\u5728(1, 0)\u6216\u8005(0, 3)\u4f4d\u7f6e\u7684\u963b\u788d\u8005\u90fd\u4e0d\u53ef\u80fd\u6293\u4f4f\u4f60\u3002 \n</pre>\n\n<pre><strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165\uff1a</strong> \nghosts = [[1, 0]]\ntarget = [2, 0]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4f60\u9700\u8981\u8d70\u5230\u4f4d\u4e8e(2, 0)\u7684\u76ee\u7684\u5730\uff0c\u4f46\u662f\u5728(1, 0)\u7684\u963b\u788d\u8005\u4f4d\u4e8e\u4f60\u548c\u76ee\u7684\u5730\u4e4b\u95f4\u3002 \n</pre>\n\n<pre><strong>\u793a\u4f8b 3:</strong>\n<strong>\u8f93\u5165\uff1a</strong> \nghosts = [[2, 0]]\ntarget = [1, 0]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a\n</strong>\u963b\u788d\u8005\u53ef\u4ee5\u548c\u4f60\u540c\u65f6\u8fbe\u5230\u76ee\u7684\u5730\u3002 \n</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u7684\u70b9\u7684\u5750\u6807\u503c\u7684\u7edd\u5bf9\u503c &lt;=&nbsp;<code>10000</code>\u3002</li>\n\t<li>\u963b\u788d\u8005\u7684\u6570\u91cf\u4e0d\u4f1a\u8d85\u8fc7&nbsp;<code>100</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u9003\u8131\u963b\u788d\u8005",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "790",
        "link": "domino-and-tromino-tiling",
        "title": "Domino and Tromino Tiling",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "33.1%",
        "questionDescription": "<p>We have two types of tiles: a 2x1 domino shape, and an &quot;L&quot; tromino shape. These shapes may be rotated.</p>\r\n\r\n<pre>\r\nXX  &lt;- domino\r\n\r\nXX  &lt;- &quot;L&quot; tromino\r\nX\r\n</pre>\r\n\r\n<p>Given N, how many ways are there to tile a 2 x N board? <strong>Return your answer modulo 10^9 + 7</strong>.</p>\r\n\r\n<p>(In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.)</p>\r\n\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> \r\nThe five different ways are listed below, different letters indicates different tiles:\r\nXYZ XXZ XYY XXY XYY\r\nXYZ YYZ XZZ XYY XXY</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>N&nbsp; will be in range <code>[1, 1000]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u6709\u4e24\u79cd\u5f62\u72b6\u7684\u74f7\u7816\uff1a\u4e00\u79cd\u662f&nbsp;2x1 \u7684\u591a\u7c73\u8bfa\u5f62\uff0c\u53e6\u4e00\u79cd\u662f\u5f62\u5982&nbsp;&quot;L&quot; \u7684\u6258\u7c73\u8bfa\u5f62\u3002\u4e24\u79cd\u5f62\u72b6\u90fd\u53ef\u4ee5\u65cb\u8f6c\u3002</p>\n\n<pre>\nXX  &lt;- \u591a\u7c73\u8bfa\n\nXX  &lt;- &quot;L&quot; \u6258\u7c73\u8bfa\nX\n</pre>\n\n<p>\u7ed9\u5b9a&nbsp;N \u7684\u503c\uff0c\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5e73\u94fa&nbsp;2 x N \u7684\u9762\u677f\uff1f<strong>\u8fd4\u56de\u503c mod 10^9 + 7</strong>\u3002</p>\n\n<p>\uff08\u5e73\u94fa\u6307\u7684\u662f\u6bcf\u4e2a\u6b63\u65b9\u5f62\u90fd\u5fc5\u987b\u6709\u74f7\u7816\u8986\u76d6\u3002\u4e24\u4e2a\u5e73\u94fa\u4e0d\u540c\uff0c\u5f53\u4e14\u4ec5\u5f53\u9762\u677f\u4e0a\u6709\u56db\u4e2a\u65b9\u5411\u4e0a\u7684\u76f8\u90bb\u5355\u5143\u4e2d\u7684\u4e24\u4e2a\uff0c\u4f7f\u5f97\u6070\u597d\u6709\u4e00\u4e2a\u5e73\u94fa\u6709\u4e00\u4e2a\u74f7\u7816\u5360\u636e\u4e24\u4e2a\u6b63\u65b9\u5f62\u3002\uff09</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> 3\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \n\u4e0b\u9762\u5217\u51fa\u4e86\u4e94\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u4e0d\u540c\u5b57\u6bcd\u4ee3\u8868\u4e0d\u540c\u74f7\u7816\uff1a\nXYZ XXZ XYY XXY XYY\nXYZ YYZ XZZ XYY XXY</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>N&nbsp; \u7684\u8303\u56f4\u662f&nbsp;<code>[1, 1000]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u591a\u7c73\u8bfa\u548c\u6258\u7c73\u8bfa\u5e73\u94fa",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "791",
        "link": "custom-sort-string",
        "title": "Custom Sort String",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "60.8%",
        "questionDescription": "<p><code>S</code> and <code>T</code> are strings composed of lowercase letters. In <code>S</code>, no letter occurs more than once.</p>\r\n\r\n<p><code>S</code> was sorted in some custom order previously. We want to permute the characters of <code>T</code> so that they match the order that <code>S</code> was sorted. More specifically, if <code>x</code> occurs before <code>y</code> in <code>S</code>, then <code>x</code> should occur before <code>y</code> in the returned string.</p>\r\n\r\n<p>Return any permutation of <code>T</code> (as a string) that satisfies this property.</p>\r\n\r\n<pre>\r\n<strong>Example :</strong>\r\n<strong>Input:</strong> \r\nS = &quot;cba&quot;\r\nT = &quot;abcd&quot;\r\n<strong>Output:</strong> &quot;cbad&quot;\r\n<strong>Explanation:</strong> \r\n&quot;a&quot;, &quot;b&quot;, &quot;c&quot; appear in S, so the order of &quot;a&quot;, &quot;b&quot;, &quot;c&quot; should be &quot;c&quot;, &quot;b&quot;, and &quot;a&quot;. \r\nSince &quot;d&quot; does not appear in S, it can be at any position in T. &quot;dcba&quot;, &quot;cdba&quot;, &quot;cbda&quot; are also valid outputs.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>S</code> has length at most <code>26</code>, and no character is repeated in <code>S</code>.</li>\r\n\t<li><code>T</code> has length at most <code>200</code>.</li>\r\n\t<li><code>S</code> and <code>T</code> consist of lowercase letters only.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5b57\u7b26\u4e32<code>S</code>\u548c <code>T</code> \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u7b26\u3002\u5728<code>S</code>\u4e2d\uff0c\u6240\u6709\u5b57\u7b26\u53ea\u4f1a\u51fa\u73b0\u4e00\u6b21\u3002</p>\n\n<p><code>S</code> \u5df2\u7ecf\u6839\u636e\u67d0\u79cd\u89c4\u5219\u8fdb\u884c\u4e86\u6392\u5e8f\u3002\u6211\u4eec\u8981\u6839\u636e<code>S</code>\u4e2d\u7684\u5b57\u7b26\u987a\u5e8f\u5bf9<code>T</code>\u8fdb\u884c\u6392\u5e8f\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u5982\u679c<code>S</code>\u4e2d<code>x</code>\u5728<code>y</code>\u4e4b\u524d\u51fa\u73b0\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4e2d<code>x</code>\u4e5f\u5e94\u51fa\u73b0\u5728<code>y</code>\u4e4b\u524d\u3002</p>\n\n<p>\u8fd4\u56de\u4efb\u610f\u4e00\u79cd\u7b26\u5408\u6761\u4ef6\u7684\u5b57\u7b26\u4e32<code>T</code>\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong>\nS = &quot;cba&quot;\nT = &quot;abcd&quot;\n<strong>\u8f93\u51fa:</strong> &quot;cbad&quot;\n<strong>\u89e3\u91ca:</strong> \nS\u4e2d\u51fa\u73b0\u4e86\u5b57\u7b26 &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, \u6240\u4ee5 &quot;a&quot;, &quot;b&quot;, &quot;c&quot; \u7684\u987a\u5e8f\u5e94\u8be5\u662f &quot;c&quot;, &quot;b&quot;, &quot;a&quot;. \n\u7531\u4e8e &quot;d&quot; \u6ca1\u6709\u5728S\u4e2d\u51fa\u73b0, \u5b83\u53ef\u4ee5\u653e\u5728T\u7684\u4efb\u610f\u4f4d\u7f6e. &quot;dcba&quot;, &quot;cdba&quot;, &quot;cbda&quot; \u90fd\u662f\u5408\u6cd5\u7684\u8f93\u51fa\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>S</code>\u7684\u6700\u5927\u957f\u5ea6\u4e3a<code>26</code>\uff0c\u5176\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5b57\u7b26\u3002</li>\n\t<li><code>T</code>\u7684\u6700\u5927\u957f\u5ea6\u4e3a<code>200</code>\u3002</li>\n\t<li><code>S</code>\u548c<code>T</code>\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u7b26\u3002</li>\n</ul>\n",
        "titleZh": "\u81ea\u5b9a\u4e49\u5b57\u7b26\u4e32\u6392\u5e8f",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook"
        ]
    },
    {
        "leetId": "792",
        "link": "number-of-matching-subsequences",
        "title": "Number of Matching Subsequences",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "35.8%",
        "questionDescription": "<p>Given string <code>S</code> and a&nbsp;dictionary of words <code>words</code>, find the number of <code>words[i]</code> that is a subsequence of <code>S</code>.</p>\r\n\r\n<pre>\r\n<strong>Example :</strong>\r\n<strong>Input:</strong> \r\nS = &quot;abcde&quot;\r\nwords = [&quot;a&quot;, &quot;bb&quot;, &quot;acd&quot;, &quot;ace&quot;]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> There are three words in <code>words</code> that are a subsequence of <code>S</code>: &quot;a&quot;, &quot;acd&quot;, &quot;ace&quot;.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>All words in <code>words</code> and <code>S</code> will only consists of lowercase letters.</li>\r\n\t<li>The length of <code>S</code> will be in the range of <code>[1, 50000]</code>.</li>\r\n\t<li>The length of <code>words</code> will be in the range of&nbsp;<code>[1, 5000]</code>.</li>\r\n\t<li>The length of <code>words[i]</code> will be in the range of <code>[1, 50]</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u5b57\u7b26\u4e32 <code>S</code> \u548c\u5355\u8bcd\u5b57\u5178 <code>words</code>, \u6c42&nbsp;<code>words[i]</code>&nbsp;\u4e2d\u662f&nbsp;<code>S</code>&nbsp;\u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u4e2a\u6570\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> \nS = &quot;abcde&quot;\nwords = [&quot;a&quot;, &quot;bb&quot;, &quot;acd&quot;, &quot;ace&quot;]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u6709\u4e09\u4e2a\u662f&nbsp;S \u7684\u5b50\u5e8f\u5217\u7684\u5355\u8bcd: &quot;a&quot;, &quot;acd&quot;, &quot;ace&quot;\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u6240\u6709\u5728<code>words</code>\u548c&nbsp;<code>S</code>&nbsp;\u91cc\u7684\u5355\u8bcd\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n\t<li><code>S</code> \u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 50000]</code>\u3002</li>\n\t<li><code>words</code>&nbsp;\u7684\u957f\u5ea6\u5728&nbsp;<code>[1, 5000]</code>\u3002</li>\n\t<li><code>words[i]</code>\u7684\u957f\u5ea6\u5728<code>[1, 50]</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u5339\u914d\u5b50\u5e8f\u5217\u7684\u5355\u8bcd\u6570",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Facebook"
        ]
    },
    {
        "leetId": "793",
        "link": "preimage-size-of-factorial-zeroes-function",
        "title": "Preimage Size of Factorial Zeroes Function",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "26.7%",
        "questionDescription": "<p>Let <code>f(x)</code> be the number of zeroes at the end of <code>x!</code>. (Recall that <code>x! = 1 * 2 * 3 * ... * x</code>, and by convention, <code>0! = 1</code>.)</p>\r\n\r\n<p>For example, <code>f(3) = 0</code> because 3! = 6 has no zeroes at the end, while <code>f(11) = 2</code> because 11! = 39916800 has 2 zeroes at the end. Given <code>K</code>, find how many non-negative integers <code>x</code> have the property that <code>f(x) = K</code>.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> K = 0\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> 0!, 1!, 2!, 3!, and 4! end with K = 0 zeroes.\r\n\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> K = 5\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong> There is no x such that x! ends in K = 5 zeroes.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>K</code> will be an integer in the range <code>[0, 10^9]</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>&nbsp;<code>f(x)</code>&nbsp;\u662f&nbsp;<code>x!</code>&nbsp;\u672b\u5c3e\u662f0\u7684\u6570\u91cf\u3002\uff08\u56de\u60f3\u4e00\u4e0b&nbsp;<code>x! = 1 * 2 * 3 * ... * x</code>\uff0c\u4e14<code>0! = 1</code>\uff09</p>\n\n<p>\u4f8b\u5982\uff0c&nbsp;<code>f(3) = 0</code>&nbsp;\uff0c\u56e0\u4e3a3! = 6\u7684\u672b\u5c3e\u6ca1\u67090\uff1b\u800c&nbsp;<code>f(11) = 2</code>&nbsp;\uff0c\u56e0\u4e3a11!= 39916800\u672b\u7aef\u67092\u4e2a0\u3002\u7ed9\u5b9a&nbsp;<code>K</code>\uff0c\u627e\u51fa\u591a\u5c11\u4e2a\u975e\u8d1f\u6574\u6570<code>x</code>&nbsp;\uff0c\u6709&nbsp;<code>f(x) = K</code>&nbsp;\u7684\u6027\u8d28\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b 1:\n\u8f93\u5165:</strong>K = 0<strong>\n\u8f93\u51fa:</strong>5<strong>\n\u89e3\u91ca:</strong>&nbsp;0!, 1!, 2!, 3!, and 4!&nbsp;\u5747\u7b26\u5408 K = 0 \u7684\u6761\u4ef6\u3002<strong>\n\n\u793a\u4f8b 2:\n\u8f93\u5165:</strong>K = 5<strong>\n\u8f93\u51fa:</strong>0<strong>\n\u89e3\u91ca:</strong>\u6ca1\u6709\u5339\u914d\u5230\u8fd9\u6837\u7684 x!\uff0c\u7b26\u5408K = 5 \u7684\u6761\u4ef6<strong>\u3002</strong>\n</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li>\n\t<p><code>K</code>\u662f\u8303\u56f4\u5728&nbsp;<code>[0, 10^9]</code>&nbsp;\u7684\u6574\u6570<strong>\u3002</strong></p>\n\t</li>\n</ul>\n",
        "titleZh": "\u9636\u4e58\u51fd\u6570\u540eK\u4e2a\u96f6",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Amazon",
            "Adobe"
        ]
    },
    {
        "leetId": "794",
        "link": "valid-tic-tac-toe-state",
        "title": "Valid Tic-Tac-Toe State",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "26.0%",
        "questionDescription": "<p>A Tic-Tac-Toe board is given as a string array <code>board</code>. Return True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.</p>\r\n\r\n<p>The <code>board</code> is a 3 x 3 array, and consists of characters <code>&quot; &quot;</code>, <code>&quot;X&quot;</code>, and <code>&quot;O&quot;</code>.&nbsp; The &quot; &quot; character represents an empty square.</p>\r\n\r\n<p>Here are the rules of Tic-Tac-Toe:</p>\r\n\r\n<ul>\r\n\t<li>Players take turns placing characters into empty squares (&quot; &quot;).</li>\r\n\t<li>The first player always places &quot;X&quot; characters, while the second player always places &quot;O&quot; characters.</li>\r\n\t<li>&quot;X&quot; and &quot;O&quot; characters are always placed into empty squares, never filled ones.</li>\r\n\t<li>The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.</li>\r\n\t<li>The game also ends if all squares are non-empty.</li>\r\n\t<li>No more moves can be played if the game is over.</li>\r\n</ul>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> board = [&quot;O&nbsp; &quot;, &quot;&nbsp; &nbsp;&quot;, &quot;&nbsp; &nbsp;&quot;]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> The first player always plays &quot;X&quot;.\r\n\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> board = [&quot;XOX&quot;, &quot; X &quot;, &quot;   &quot;]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> Players take turns making moves.\r\n\r\n<strong>Example 3:</strong>\r\n<strong>Input:</strong> board = [&quot;XXX&quot;, &quot;   &quot;, &quot;OOO&quot;]\r\n<strong>Output:</strong> false\r\n\r\n<strong>Example 4:</strong>\r\n<strong>Input:</strong> board = [&quot;XOX&quot;, &quot;O O&quot;, &quot;XOX&quot;]\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>board</code> is a length-3 array of strings, where each string <code>board[i]</code> has length 3.</li>\r\n\t<li>Each <code>board[i][j]</code> is a character in the set <code>{&quot; &quot;, &quot;X&quot;, &quot;O&quot;}</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7528\u5b57\u7b26\u4e32\u6570\u7ec4\u4f5c\u4e3a\u4e95\u5b57\u6e38\u620f\u7684\u6e38\u620f\u677f&nbsp;<code>board</code>\u3002\u5f53\u4e14\u4ec5\u5f53\u5728\u4e95\u5b57\u6e38\u620f\u8fc7\u7a0b\u4e2d\uff0c\u73a9\u5bb6\u6709\u53ef\u80fd\u5c06\u5b57\u7b26\u653e\u7f6e\u6210\u6e38\u620f\u677f\u6240\u663e\u793a\u7684\u72b6\u6001\u65f6\uff0c\u624d\u8fd4\u56de true\u3002</p>\n\n<p>\u8be5\u6e38\u620f\u677f\u662f\u4e00\u4e2a 3 x 3 \u6570\u7ec4\uff0c\u7531\u5b57\u7b26&nbsp;<code>&quot; &quot;</code>\uff0c<code>&quot;X&quot;</code>&nbsp;\u548c&nbsp;<code>&quot;O&quot;</code>&nbsp;\u7ec4\u6210\u3002\u5b57\u7b26&nbsp;<code>&quot; &quot;</code>&nbsp;\u4ee3\u8868\u4e00\u4e2a\u7a7a\u4f4d\u3002</p>\n\n<p>\u4ee5\u4e0b\u662f\u4e95\u5b57\u6e38\u620f\u7684\u89c4\u5219\uff1a</p>\n\n<ul>\n\t<li>\u73a9\u5bb6\u8f6e\u6d41\u5c06\u5b57\u7b26\u653e\u5165\u7a7a\u4f4d\uff08&quot; &quot;\uff09\u4e2d\u3002</li>\n\t<li>\u7b2c\u4e00\u4e2a\u73a9\u5bb6\u603b\u662f\u653e\u5b57\u7b26 &ldquo;X&rdquo;\uff0c\u4e14\u7b2c\u4e8c\u4e2a\u73a9\u5bb6\u603b\u662f\u653e\u5b57\u7b26 &ldquo;O&rdquo;\u3002</li>\n\t<li>&ldquo;X&rdquo; \u548c &ldquo;O&rdquo; \u53ea\u5141\u8bb8\u653e\u7f6e\u5728\u7a7a\u4f4d\u4e2d\uff0c\u4e0d\u5141\u8bb8\u5bf9\u5df2\u653e\u6709\u5b57\u7b26\u7684\u4f4d\u7f6e\u8fdb\u884c\u586b\u5145\u3002</li>\n\t<li>\u5f53\u6709 3 \u4e2a\u76f8\u540c\uff08\u4e14\u975e\u7a7a\uff09\u7684\u5b57\u7b26\u586b\u5145\u4efb\u4f55\u884c\u3001\u5217\u6216\u5bf9\u89d2\u7ebf\u65f6\uff0c\u6e38\u620f\u7ed3\u675f\u3002</li>\n\t<li>\u5f53\u6240\u6709\u4f4d\u7f6e\u975e\u7a7a\u65f6\uff0c\u4e5f\u7b97\u4e3a\u6e38\u620f\u7ed3\u675f\u3002</li>\n\t<li>\u5982\u679c\u6e38\u620f\u7ed3\u675f\uff0c\u73a9\u5bb6\u4e0d\u5141\u8bb8\u518d\u653e\u7f6e\u5b57\u7b26\u3002</li>\n</ul>\n\n<pre>\n<strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> board = [&quot;O&nbsp; &quot;, &quot;&nbsp; &nbsp;&quot;, &quot;&nbsp; &nbsp;&quot;]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u7b2c\u4e00\u4e2a\u73a9\u5bb6\u603b\u662f\u653e\u7f6e&ldquo;X&rdquo;\u3002\n\n<strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> board = [&quot;XOX&quot;, &quot; X &quot;, &quot;   &quot;]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \u73a9\u5bb6\u5e94\u8be5\u662f\u8f6e\u6d41\u653e\u7f6e\u7684\u3002\n\n<strong>\u793a\u4f8b 3:</strong>\n<strong>\u8f93\u5165:</strong> board = [&quot;XXX&quot;, &quot;   &quot;, &quot;OOO&quot;]\n<strong>\u8f93\u51fa:</strong> false\n\n<strong>\u793a\u4f8b 4:</strong>\n<strong>\u8f93\u5165:</strong> board = [&quot;XOX&quot;, &quot;O O&quot;, &quot;XOX&quot;]\n<strong>\u8f93\u51fa:</strong> true\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li>\u6e38\u620f\u677f&nbsp;<code>board</code>&nbsp;\u662f\u957f\u5ea6\u4e3a 3 \u7684\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32&nbsp;<code>board[i]</code>&nbsp;\u7684\u957f\u5ea6\u4e3a&nbsp;3\u3002</li>\n\t<li>&nbsp;<code>board[i][j]</code>&nbsp;\u662f\u96c6\u5408&nbsp;<code>{&quot; &quot;, &quot;X&quot;, &quot;O&quot;}</code>&nbsp;\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u3002</li>\n</ul>\n",
        "titleZh": "\u6709\u6548\u7684\u4e95\u5b57\u6e38\u620f",
        "tags": [
            {
                "tag": "Recursion",
                "link": "recursion",
                "tagZh": "\u9012\u5f52"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "TripleByte"
        ]
    },
    {
        "leetId": "795",
        "link": "number-of-subarrays-with-bounded-maximum",
        "title": "Number of Subarrays with Bounded Maximum",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "42.7%",
        "questionDescription": "<p>We are given an array <code>A</code> of positive integers, and two positive integers <code>L</code> and <code>R</code> (<code>L &lt;= R</code>).</p>\r\n\r\n<p>Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least <code>L</code> and at most <code>R</code>.</p>\r\n\r\n<pre>\r\n<strong>Example :</strong>\r\n<strong>Input:</strong> \r\nA = [2, 1, 4, 3]\r\nL = 2\r\nR = 3\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> There are three subarrays that meet the requirements: [2], [2, 1], [3].\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>L, R&nbsp; and <code>A[i]</code> will be an integer in the range <code>[0, 10^9]</code>.</li>\r\n\t<li>The length of <code>A</code> will be in the range of <code>[1, 50000]</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u6b63\u6574\u6570\u7684\u6570\u7ec4<code>A</code>&nbsp;\uff0c\u6b63\u6574\u6570 <code>L</code>&nbsp;\u4ee5\u53ca&nbsp;<code>R</code>&nbsp;(<code>L &lt;= R</code>)\u3002</p>\n\n<p>\u6c42\u8fde\u7eed\u3001\u975e\u7a7a\u4e14\u5176\u4e2d\u6700\u5927\u5143\u7d20\u6ee1\u8db3\u5927\u4e8e\u7b49\u4e8e<code>L</code>&nbsp;\u5c0f\u4e8e\u7b49\u4e8e<code>R</code>\u7684\u5b50\u6570\u7ec4\u4e2a\u6570\u3002</p>\n\n<pre><strong>\u4f8b\u5982 :</strong>\n<strong>\u8f93\u5165:</strong> \nA = [2, 1, 4, 3]\nL = 2\nR = 3\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u6ee1\u8db3\u6761\u4ef6\u7684\u5b50\u6570\u7ec4: [2], [2, 1], [3].\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>L, R&nbsp; \u548c&nbsp;<code>A[i]</code> \u90fd\u662f\u6574\u6570\uff0c\u8303\u56f4\u5728&nbsp;<code>[0, 10^9]</code>\u3002</li>\n\t<li>\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u7684\u957f\u5ea6\u8303\u56f4\u5728<code>[1, 50000]</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u533a\u95f4\u5b50\u6570\u7ec4\u4e2a\u6570",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Adobe"
        ]
    },
    {
        "leetId": "796",
        "link": "rotate-string",
        "title": "Rotate String",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "46.1%",
        "questionDescription": "<p>We are given two strings, <code>A</code> and <code>B</code>.</p>\r\n\r\n<p>A <em>shift on <code>A</code></em> consists of taking string <code>A</code> and moving the leftmost character to the rightmost position. For example, if <code>A = &#39;abcde&#39;</code>, then it will be <code>&#39;bcdea&#39;</code> after one shift on <code>A</code>. Return <code>True</code> if and only if <code>A</code> can become <code>B</code> after some number of shifts on <code>A</code>.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> A = &#39;abcde&#39;, B = &#39;cdeab&#39;\r\n<strong>Output:</strong> true\r\n\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> A = &#39;abcde&#39;, B = &#39;abced&#39;\r\n<strong>Output:</strong> false\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>A</code> and <code>B</code> will have length at most <code>100</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32, <code>A</code>&nbsp;\u548c&nbsp;<code>B</code>\u3002</p>\n\n<p><code>A</code>&nbsp;\u7684\u65cb\u8f6c\u64cd\u4f5c\u5c31\u662f\u5c06&nbsp;<code>A</code> \u6700\u5de6\u8fb9\u7684\u5b57\u7b26\u79fb\u52a8\u5230\u6700\u53f3\u8fb9\u3002&nbsp;\u4f8b\u5982, \u82e5&nbsp;<code>A = &#39;abcde&#39;</code>\uff0c\u5728\u79fb\u52a8\u4e00\u6b21\u4e4b\u540e\u7ed3\u679c\u5c31\u662f<code>&#39;bcdea&#39;</code>&nbsp;\u3002\u5982\u679c\u5728\u82e5\u5e72\u6b21\u65cb\u8f6c\u64cd\u4f5c\u4e4b\u540e\uff0c<code>A</code>&nbsp;\u80fd\u53d8\u6210<code>B</code>\uff0c\u90a3\u4e48\u8fd4\u56de<code>True</code>\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> A = &#39;abcde&#39;, B = &#39;cdeab&#39;\n<strong>\u8f93\u51fa:</strong> true\n\n<strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> A = &#39;abcde&#39;, B = &#39;abced&#39;\n<strong>\u8f93\u51fa:</strong> false</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<ul>\n\t<li><code>A</code> \u548c&nbsp;<code>B</code>&nbsp;\u957f\u5ea6\u4e0d\u8d85\u8fc7&nbsp;<code>100</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u65cb\u8f6c\u5b57\u7b26\u4e32",
        "tags": [],
        "companies": [
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Apple",
            "LinkedIn"
        ]
    },
    {
        "leetId": "797",
        "link": "all-paths-from-source-to-target",
        "title": "All Paths From Source to Target",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "66.1%",
        "questionDescription": "<p>Given a directed, acyclic graph of <code>N</code> nodes.&nbsp; Find all possible paths from node <code>0</code> to node <code>N-1</code>, and return them in any order.</p>\r\n\r\n<p>The graph is given as follows:&nbsp; the nodes are 0, 1, ..., graph.length - 1.&nbsp; graph[i] is a list of all nodes j for which the edge (i, j) exists.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> [[1,2], [3], [3], []] \r\n<strong>Output:</strong> [[0,1,3],[0,2,3]] \r\n<strong>Explanation:</strong> The graph looks like this:\r\n0---&gt;1\r\n|    |\r\nv    v\r\n2---&gt;3\r\nThere are two paths: 0 -&gt; 1 -&gt; 3 and 0 -&gt; 2 -&gt; 3.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of nodes in the graph will be in the range <code>[2, 15]</code>.</li>\r\n\t<li>You can print different paths in any order, but you should keep the order of nodes inside one path.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u4e00\u4e2a\u6709&nbsp;<code>n</code>&nbsp;\u4e2a\u7ed3\u70b9\u7684\u6709\u5411\u65e0\u73af\u56fe\uff0c\u627e\u5230\u6240\u6709\u4ece&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>n-1</code>&nbsp;\u7684\u8def\u5f84\u5e76\u8f93\u51fa\uff08\u4e0d\u8981\u6c42\u6309\u987a\u5e8f\uff09</p>\n\n<p>\u4e8c\u7ef4\u6570\u7ec4\u7684\u7b2c i \u4e2a\u6570\u7ec4\u4e2d\u7684\u5355\u5143\u90fd\u8868\u793a\u6709\u5411\u56fe\u4e2d i \u53f7\u7ed3\u70b9\u6240\u80fd\u5230\u8fbe\u7684\u4e0b\u4e00\u4e9b\u7ed3\u70b9\uff08\u8bd1\u8005\u6ce8\uff1a\u6709\u5411\u56fe\u662f\u6709\u65b9\u5411\u7684\uff0c\u5373\u89c4\u5b9a\u4e86a&rarr;b\u4f60\u5c31\u4e0d\u80fd\u4eceb&rarr;a\uff09\u7a7a\u5c31\u662f\u6ca1\u6709\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u4e86\u3002</p>\n\n<pre><strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> [[1,2], [3], [3], []] \n<strong>\u8f93\u51fa:</strong> [[0,1,3],[0,2,3]] \n<strong>\u89e3\u91ca:</strong> \u56fe\u662f\u8fd9\u6837\u7684:\n0---&gt;1\n|    |\nv    v\n2---&gt;3\n\u8fd9\u6709\u4e24\u6761\u8def: 0 -&gt; 1 -&gt; 3 \u548c 0 -&gt; 2 -&gt; 3.\n</pre>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ul>\n\t<li>\u7ed3\u70b9\u7684\u6570\u91cf\u4f1a\u5728\u8303\u56f4&nbsp;<code>[2, 15]</code>&nbsp;\u5185\u3002</li>\n\t<li>\u4f60\u53ef\u4ee5\u628a\u8def\u5f84\u4ee5\u4efb\u610f\u987a\u5e8f\u8f93\u51fa\uff0c\u4f46\u5728\u8def\u5f84\u5185\u7684\u7ed3\u70b9\u7684\u987a\u5e8f\u5fc5\u987b\u4fdd\u8bc1\u3002</li>\n</ul>\n",
        "titleZh": "\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84",
        "tags": [],
        "companies": [
            "Amazon",
            "Bloomberg",
            "Walmart Labs"
        ]
    },
    {
        "leetId": "798",
        "link": "smallest-rotation-with-highest-score",
        "title": "Smallest Rotation with Highest Score",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "30.3%",
        "questionDescription": "<p>&nbsp;Given an array <code>A</code>, we may rotate it by a non-negative integer <code>K</code> so that the array becomes <code>A[K], A[K+1], A{K+2], ... A[A.length - 1], A[0], A[1], ..., A[K-1]</code>.&nbsp; Afterward, any entries that are less than or equal to their index are worth 1 point.&nbsp;</p>\r\n\r\n<p>For example, if we have <code>[2, 4, 1, 3, 0]</code>, and we rotate by <code>K = 2</code>, it becomes <code>[1, 3, 0, 2, 4]</code>.&nbsp; This is worth 3 points because 1 &gt; 0 [no points], 3 &gt; 1 [no points], 0 &lt;= 2 [one point], 2 &lt;= 3 [one point], 4 &lt;= 4 [one point].</p>\r\n\r\n<p>Over all possible rotations, return the rotation index K that corresponds to the highest score we could receive.&nbsp; If there are multiple answers, return the smallest such index K.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> [2, 3, 1, 4, 0]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation: </strong> \r\nScores for each K are listed below: \r\nK = 0,  A = [2,3,1,4,0],    score 2\r\nK = 1,  A = [3,1,4,0,2],    score 3\r\nK = 2,  A = [1,4,0,2,3],    score 3\r\nK = 3,  A = [4,0,2,3,1],    score 4\r\nK = 4,  A = [0,2,3,1,4],    score 3\r\n</pre>\r\n\r\n<p>So we should choose K = 3, which has the highest score.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> [1, 3, 0, 2, 4]\r\n<strong>Output:</strong> 0\r\n<strong>Explanation: </strong> A will always have 3 points no matter how it shifts.\r\nSo we will choose the smallest K, which is 0.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>A</code>&nbsp;will have&nbsp;length at most <code>20000</code>.</li>\r\n\t<li><code>A[i]</code> will be in the range <code>[0, A.length]</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u6309\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 <code>K</code>&nbsp;\u8fdb\u884c\u8f6e\u8c03\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u6570\u7ec4\u53d8\u4e3a&nbsp;<code>A[K], A[K+1], A{K+2], ... A[A.length - 1], A[0], A[1], ..., A[K-1]</code>&nbsp;\u7684\u5f62\u5f0f\u3002\u6b64\u540e\uff0c\u4efb\u4f55\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u5176\u7d22\u5f15\u7684\u9879\u90fd\u53ef\u4ee5\u8bb0\u4f5c\u4e00\u5206\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5982\u679c\u6570\u7ec4\u4e3a&nbsp;<code>[2, 4, 1, 3, 0]</code>\uff0c\u6211\u4eec\u6309&nbsp;<code>K = 2</code>&nbsp;\u8fdb\u884c\u8f6e\u8c03\u540e\uff0c\u5b83\u5c06\u53d8\u6210&nbsp;<code>[1, 3, 0, 2, 4]</code>\u3002\u8fd9\u5c06\u8bb0\u4f5c 3 \u5206\uff0c\u56e0\u4e3a 1 &gt; 0 [no points], 3 &gt; 1 [no points], 0 &lt;= 2 [one point], 2 &lt;= 3 [one point], 4 &lt;= 4 [one point]\u3002</p>\n\n<p>\u5728\u6240\u6709\u53ef\u80fd\u7684\u8f6e\u8c03\u4e2d\uff0c\u8fd4\u56de\u6211\u4eec\u6240\u80fd\u5f97\u5230\u7684\u6700\u9ad8\u5206\u6570\u5bf9\u5e94\u7684\u8f6e\u8c03\u7d22\u5f15 K\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u8fd4\u56de\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5c0f\u7684\u7d22\u5f15 K\u3002</p>\n\n<pre><strong>\u793a\u4f8b 1\uff1a</strong>\n<strong>\u8f93\u5165\uff1a</strong>[2, 3, 1, 4, 0]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4e0b\u9762\u5217\u51fa\u4e86\u6bcf\u4e2a K \u7684\u5f97\u5206\uff1a\nK = 0,  A = [2,3,1,4,0],    score 2\nK = 1,  A = [3,1,4,0,2],    score 3\nK = 2,  A = [1,4,0,2,3],    score 3\nK = 3,  A = [4,0,2,3,1],    score 4\nK = 4,  A = [0,2,3,1,4],    score 3\n\u6240\u4ee5\u6211\u4eec\u5e94\u5f53\u9009\u62e9&nbsp;K = 3\uff0c\u5f97\u5206\u6700\u9ad8\u3002</pre>\n\n<p>&nbsp;</p>\n\n<pre><strong>\u793a\u4f8b 2\uff1a</strong>\n<strong>\u8f93\u5165\uff1a</strong>[1, 3, 0, 2, 4]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\nA \u65e0\u8bba\u600e\u4e48\u53d8\u5316\u603b\u662f\u6709 3 \u5206\u3002\n\u6240\u4ee5\u6211\u4eec\u5c06\u9009\u62e9\u6700\u5c0f\u7684 K\uff0c\u5373 0\u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>A</code>&nbsp;\u7684\u957f\u5ea6\u6700\u5927\u4e3a&nbsp;<code>20000</code>\u3002</li>\n\t<li><code>A[i]</code> \u7684\u53d6\u503c\u8303\u56f4\u662f&nbsp;<code>[0, A.length]</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u5f97\u5206\u6700\u9ad8\u7684\u6700\u5c0f\u8f6e\u8c03",
        "tags": [],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "799",
        "link": "champagne-tower",
        "title": "Champagne Tower",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "29.9%",
        "questionDescription": "<p>We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.&nbsp; Each glass holds one cup (250ml) of champagne.</p>\r\n\r\n<p>Then, some champagne is poured in the first glass at the top.&nbsp; When the top most glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.&nbsp; When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.&nbsp; (A glass at the bottom row has it&#39;s excess champagne fall on the floor.)</p>\r\n\r\n<p>For example, after one cup of champagne is poured, the top most glass is full.&nbsp; After two cups of champagne are poured, the two glasses on the second row are half full.&nbsp; After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.&nbsp; After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/09/tower.png\" style=\"height:200px; width:290px\" /></p>\r\n\r\n<p>Now after pouring some non-negative integer cups of champagne, return how full the j-th glass in the i-th row is (both i and j are 0 indexed.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> poured = 1, query_glass = 1, query_row = 1\r\n<strong>Output:</strong> 0.0\r\n<strong>Explanation:</strong> We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\r\n\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> poured = 2, query_glass = 1, query_row = 1\r\n<strong>Output:</strong> 0.5\r\n<strong>Explanation:</strong> We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>poured</code>&nbsp;will&nbsp;be&nbsp;in the range of <code>[0, 10 ^ 9]</code>.</li>\r\n\t<li><code>query_glass</code> and <code>query_row</code> will be in the range of <code>[0, 99]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u628a\u73bb\u7483\u676f\u6446\u6210\u91d1\u5b57\u5854\u7684\u5f62\u72b6\uff0c\u5176\u4e2d\u7b2c\u4e00\u5c42\u67091\u4e2a\u73bb\u7483\u676f\uff0c\u7b2c\u4e8c\u5c42\u67092\u4e2a\uff0c\u4f9d\u6b21\u7c7b\u63a8\u5230\u7b2c100\u5c42\uff0c\u6bcf\u4e2a\u73bb\u7483\u676f(250ml)\u5c06\u76db\u6709\u9999\u69df\u3002</p>\n\n<p>\u4ece\u9876\u5c42\u7684\u7b2c\u4e00\u4e2a\u73bb\u7483\u676f\u5f00\u59cb\u503e\u5012\u4e00\u4e9b\u9999\u69df\uff0c\u5f53\u9876\u5c42\u7684\u676f\u5b50\u6ee1\u4e86\uff0c\u4efb\u4f55\u6ea2\u51fa\u7684\u9999\u69df\u90fd\u4f1a\u7acb\u523b\u7b49\u6d41\u91cf\u7684\u6d41\u5411\u5de6\u53f3\u4e24\u4fa7\u7684\u73bb\u7483\u676f\u3002\u5f53\u5de6\u53f3\u4e24\u8fb9\u7684\u676f\u5b50\u4e5f\u6ee1\u4e86\uff0c\u5c31\u4f1a\u7b49\u6d41\u91cf\u7684\u6d41\u5411\u5b83\u4eec\u5de6\u53f3\u4e24\u8fb9\u7684\u676f\u5b50\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\uff08\u5f53\u6700\u5e95\u5c42\u7684\u73bb\u7483\u676f\u6ee1\u4e86\uff0c\u9999\u69df\u4f1a\u6d41\u5230\u5730\u677f\u4e0a\uff09</p>\n\n<p>\u4f8b\u5982\uff0c\u5728\u503e\u5012\u4e00\u676f\u9999\u69df\u540e\uff0c\u6700\u9876\u5c42\u7684\u73bb\u7483\u676f\u6ee1\u4e86\u3002\u503e\u5012\u4e86\u4e24\u676f\u9999\u69df\u540e\uff0c\u7b2c\u4e8c\u5c42\u7684\u4e24\u4e2a\u73bb\u7483\u676f\u5404\u81ea\u76db\u653e\u4e00\u534a\u7684\u9999\u69df\u3002\u5728\u5012\u4e09\u676f\u9999\u69df\u540e\uff0c\u7b2c\u4e8c\u5c42\u7684\u9999\u69df\u6ee1\u4e86 - \u6b64\u65f6\u603b\u5171\u6709\u4e09\u4e2a\u6ee1\u7684\u73bb\u7483\u676f\u3002\u5728\u5012\u7b2c\u56db\u676f\u540e\uff0c\u7b2c\u4e09\u5c42\u4e2d\u95f4\u7684\u73bb\u7483\u676f\u76db\u653e\u4e86\u4e00\u534a\u7684\u9999\u69df\uff0c\u4ed6\u4e24\u8fb9\u7684\u73bb\u7483\u676f\u5404\u81ea\u76db\u653e\u4e86\u56db\u5206\u4e4b\u4e00\u7684\u9999\u69df\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/09/tower.png\" style=\"height:200px; width:290px\" /></p>\n\n<p>\u73b0\u5728\u5f53\u503e\u5012\u4e86\u975e\u8d1f\u6574\u6570\u676f\u9999\u69df\u540e\uff0c\u8fd4\u56de\u7b2c i \u884c j \u4e2a\u73bb\u7483\u676f\u6240\u76db\u653e\u7684\u9999\u69df\u5360\u73bb\u7483\u676f\u5bb9\u79ef\u7684\u6bd4\u4f8b\uff08i \u548c j\u90fd\u4ece0\u5f00\u59cb\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<pre>\n<strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> poured(\u503e\u5012\u9999\u69df\u603b\u676f\u6570) = 1, query_glass(\u676f\u5b50\u7684\u4f4d\u7f6e\u6570) = 1, query_row(\u884c\u6570) = 1\n<strong>\u8f93\u51fa:</strong> 0.0\n<strong>\u89e3\u91ca:</strong> \u6211\u4eec\u5728\u9876\u5c42\uff08\u4e0b\u6807\u662f\uff080\uff0c0\uff09\uff09\u5012\u4e86\u4e00\u676f\u9999\u69df\u540e\uff0c\u6ca1\u6709\u6ea2\u51fa\uff0c\u56e0\u6b64\u6240\u6709\u5728\u9876\u5c42\u4ee5\u4e0b\u7684\u73bb\u7483\u676f\u90fd\u662f\u7a7a\u7684\u3002\n\n<strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> poured(\u503e\u5012\u9999\u69df\u603b\u676f\u6570) = 2, query_glass(\u676f\u5b50\u7684\u4f4d\u7f6e\u6570) = 1, query_row(\u884c\u6570) = 1\n<strong>\u8f93\u51fa:</strong> 0.5\n<strong>\u89e3\u91ca:</strong> \u6211\u4eec\u5728\u9876\u5c42\uff08\u4e0b\u6807\u662f\uff080\uff0c0\uff09\u5012\u4e86\u4e24\u676f\u9999\u69df\u540e\uff0c\u6709\u4e00\u676f\u91cf\u7684\u9999\u69df\u5c06\u4ece\u9876\u5c42\u6ea2\u51fa\uff0c\u4f4d\u4e8e\uff081\uff0c0\uff09\u7684\u73bb\u7483\u676f\u548c\uff081\uff0c1\uff09\u7684\u73bb\u7483\u676f\u5e73\u5206\u4e86\u8fd9\u4e00\u676f\u9999\u69df\uff0c\u6240\u4ee5\u6bcf\u4e2a\u73bb\u7483\u676f\u6709\u4e00\u534a\u7684\u9999\u69df\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>poured</code>&nbsp;\u7684\u8303\u56f4<code>[0, 10 ^ 9]</code>\u3002</li>\n\t<li><code>query_glass</code>&nbsp;\u548c<code>query_row</code>&nbsp;\u7684\u8303\u56f4&nbsp;<code>[0, 99]</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u9999\u69df\u5854",
        "tags": [],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "800",
        "link": "similar-rgb-color",
        "title": "Similar RGB Color",
        "is_locked": "Prime",
        "difficulty": "Easy",
        "frequency": "25",
        "questionDescription": "\n<p>In the following, every capital letter represents some hexadecimal digit from <code>0</code> to <code>f</code>.</p>\n<p>The red-green-blue color <code>\"#AABBCC\"</code>\u00a0can be written\u00a0as\u00a0<code>\"#ABC\"</code> in\u00a0shorthand.\u00a0 For example, <code>\"#15c\"</code> is shorthand for the color <code>\"#1155cc\"</code>.</p>\n<p>Now, say the similarity between two colors <code>\"#ABCDEF\"</code> and <code>\"#UVWXYZ\"</code> is <code>-(AB - UV)^2 -\u00a0(CD - WX)^2 -\u00a0(EF - YZ)^2</code>.</p>\n<p>Given the color <code>\"#ABCDEF\"</code>, return a 7 character color\u00a0that is most similar to <code>#ABCDEF</code>, and has a shorthand (that is, it can be represented as some <code>\"#XYZ\"</code></p>\n<pre><strong>Example 1:</strong>\n<strong>Input:</strong> color = \"#09f166\"\n<strong>Output:</strong> \"#11ee66\"\n<strong>Explanation: </strong> \nThe similarity is -(0x09 - 0x11)^2 -(0xf1 - 0xee)^2 - (0x66 - 0x66)^2 = -64 -9 -0 = -73.\nThis is the highest among any shorthand color.\n</pre>\n<p><strong>Note:</strong></p>\n<ul>\n<li><code>color</code> is a string of length <code>7</code>.</li>\n<li><code>color</code> is a valid RGB color: for <code>i &gt; 0</code>, <code>color[i]</code> is a hexadecimal digit from <code>0</code> to <code>f</code></li>\n<li>Any answer which has the same (highest)\u00a0similarity as the best answer will be accepted.</li>\n<li>All inputs and outputs should use lowercase letters, and the output is 7 characters.</li>\n</ul>\n",
        "questionDescriptionZh": "\n<p>In the following, every capital letter represents some hexadecimal digit from <code>0</code> to <code>f</code>.</p>\n<p>The red-green-blue color <code>\"#AABBCC\"</code>\u00a0can be written\u00a0as\u00a0<code>\"#ABC\"</code> in\u00a0shorthand.\u00a0 For example, <code>\"#15c\"</code> is shorthand for the color <code>\"#1155cc\"</code>.</p>\n<p>Now, say the similarity between two colors <code>\"#ABCDEF\"</code> and <code>\"#UVWXYZ\"</code> is <code>-(AB - UV)^2 -\u00a0(CD - WX)^2 -\u00a0(EF - YZ)^2</code>.</p>\n<p>Given the color <code>\"#ABCDEF\"</code>, return a 7 character color\u00a0that is most similar to <code>#ABCDEF</code>, and has a shorthand (that is, it can be represented as some <code>\"#XYZ\"</code></p>\n<pre><strong>Example 1:</strong>\n<strong>Input:</strong> color = \"#09f166\"\n<strong>Output:</strong> \"#11ee66\"\n<strong>Explanation: </strong> \nThe similarity is -(0x09 - 0x11)^2 -(0xf1 - 0xee)^2 - (0x66 - 0x66)^2 = -64 -9 -0 = -73.\nThis is the highest among any shorthand color.\n</pre>\n<p><strong>Note:</strong></p>\n<ul>\n<li><code>color</code> is a string of length <code>7</code>.</li>\n<li><code>color</code> is a valid RGB color: for <code>i &gt; 0</code>, <code>color[i]</code> is a hexadecimal digit from <code>0</code> to <code>f</code></li>\n<li>Any answer which has the same (highest)\u00a0similarity as the best answer will be accepted.</li>\n<li>All inputs and outputs should use lowercase letters, and the output is 7 characters.</li>\n</ul>\n",
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "801",
        "link": "minimum-swaps-to-make-sequences-increasing",
        "title": "Minimum Swaps To Make Sequences Increasing",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "32.4%",
        "questionDescription": "<p>We have two integer sequences <code>A</code> and <code>B</code> of the same non-zero length.</p>\r\n\r\n<p>We are allowed to swap elements <code>A[i]</code> and <code>B[i]</code>.&nbsp; Note that both elements are in the same index position in their respective sequences.</p>\r\n\r\n<p>At the end of some number of swaps, <code>A</code> and <code>B</code> are both strictly increasing.&nbsp; (A sequence is <em>strictly increasing</em> if and only if <code>A[0] &lt; A[1] &lt; A[2] &lt; ... &lt; A[A.length - 1]</code>.)</p>\r\n\r\n<p>Given A and B, return the minimum number of swaps to make both sequences strictly increasing.&nbsp; It is guaranteed that the given input always makes it possible.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> A = [1,3,5,4], B = [1,2,3,7]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation: </strong>\r\nSwap A[3] and B[3].  Then the sequences are:\r\nA = [1, 3, 5, 7] and B = [1, 2, 3, 4]\r\nwhich are both strictly increasing.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>A, B</code> are arrays with the same length, and that length will be in the range <code>[1, 1000]</code>.</li>\r\n\t<li><code>A[i], B[i]</code> are integer values in the range <code>[0, 2000]</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u6709\u4e24\u4e2a\u957f\u5ea6\u76f8\u7b49\u4e14\u4e0d\u4e3a\u7a7a\u7684\u6574\u578b\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\u3002</p>\n\n<p>\u6211\u4eec\u53ef\u4ee5\u4ea4\u6362&nbsp;<code>A[i]</code>&nbsp;\u548c&nbsp;<code>B[i]</code>&nbsp;\u7684\u5143\u7d20\u3002\u6ce8\u610f\u8fd9\u4e24\u4e2a\u5143\u7d20\u5728\u5404\u81ea\u7684\u5e8f\u5217\u4e2d\u5e94\u8be5\u5904\u4e8e\u76f8\u540c\u7684\u4f4d\u7f6e\u3002</p>\n\n<p>\u5728\u4ea4\u6362\u8fc7\u4e00\u4e9b\u5143\u7d20\u4e4b\u540e\uff0c\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\u90fd\u5e94\u8be5\u662f\u4e25\u683c\u9012\u589e\u7684\uff08\u6570\u7ec4\u4e25\u683c\u9012\u589e\u7684\u6761\u4ef6\u4ec5\u4e3a<code>A[0] &lt; A[1] &lt; A[2] &lt; ... &lt; A[A.length - 1]</code>\uff09\u3002</p>\n\n<p>\u7ed9\u5b9a\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\uff0c\u8bf7\u8fd4\u56de\u4f7f\u5f97\u4e24\u4e2a\u6570\u7ec4\u5747\u4fdd\u6301\u4e25\u683c\u9012\u589e\u72b6\u6001\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u3002\u5047\u8bbe\u7ed9\u5b9a\u7684\u8f93\u5165\u603b\u662f\u6709\u6548\u7684\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> A = [1,3,5,4], B = [1,2,3,7]\n<strong>\u8f93\u51fa:</strong> 1\n<strong>\u89e3\u91ca: </strong>\n\u4ea4\u6362 A[3] \u548c B[3] \u540e\uff0c\u4e24\u4e2a\u6570\u7ec4\u5982\u4e0b:\nA = [1, 3, 5, 7] \uff0c B = [1, 2, 3, 4]\n\u4e24\u4e2a\u6570\u7ec4\u5747\u4e3a\u4e25\u683c\u9012\u589e\u7684\u3002</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>A, B</code>&nbsp;\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u603b\u662f\u76f8\u7b49\u7684\uff0c\u4e14\u957f\u5ea6\u7684\u8303\u56f4\u4e3a&nbsp;<code>[1, 1000]</code>\u3002</li>\n\t<li><code>A[i], B[i]</code>&nbsp;\u5747\u4e3a&nbsp;<code>[0, 2000]</code>\u533a\u95f4\u5185\u7684\u6574\u6570\u3002</li>\n</ul>\n",
        "titleZh": "\u4f7f\u5e8f\u5217\u9012\u589e\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Amazon",
            "Facebook"
        ]
    },
    {
        "leetId": "802",
        "link": "find-eventual-safe-states",
        "title": "Find Eventual Safe States",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "38.5%",
        "questionDescription": "<p>In a directed graph, we start at some node and every turn, walk along a directed edge of the graph.&nbsp; If we reach a node that is terminal (that is, it has no outgoing directed edges), we stop.</p>\r\n\r\n<p>Now, say our starting node is <em>eventually safe&nbsp;</em>if and only if we must eventually walk to a terminal node.&nbsp; More specifically, there exists a natural number <code>K</code> so that for any choice of where to walk, we must have stopped at a terminal node in less than <code>K</code> steps.</p>\r\n\r\n<p>Which nodes are eventually safe?&nbsp; Return them as an array in sorted order.</p>\r\n\r\n<p>The directed graph has <code>N</code> nodes with labels <code>0, 1, ..., N-1</code>, where <code>N</code> is the length of <code>graph</code>.&nbsp; The&nbsp;graph is given in the following form: <code>graph[i]</code> is a list of labels <code>j</code> such that <code>(i, j)</code> is a directed edge of the graph.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> graph = [[1,2],[2,3],[5],[0],[5],[],[]]\r\n<strong>Output:</strong> [2,4,5,6]\r\nHere is a diagram of the above graph.\r\n\r\n</pre>\r\n\r\n<p><img alt=\"Illustration of graph\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png\" style=\"height:86px; width:300px\" /></p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>graph</code> will have length at most <code>10000</code>.</li>\r\n\t<li>The number of edges in the graph will not exceed <code>32000</code>.</li>\r\n\t<li>Each <code>graph[i]</code> will be a sorted list of different integers, chosen within the range <code>[0, graph.length - 1]</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5728\u6709\u5411\u56fe\u4e2d, \u6211\u4eec\u4ece\u67d0\u4e2a\u8282\u70b9\u548c\u6bcf\u4e2a\u8f6c\u5411\u5904\u5f00\u59cb, \u6cbf\u7740\u56fe\u7684\u6709\u5411\u8fb9\u8d70\u3002 \u5982\u679c\u6211\u4eec\u5230\u8fbe\u7684\u8282\u70b9\u662f\u7ec8\u70b9 (\u5373\u5b83\u6ca1\u6709\u8fde\u51fa\u7684\u6709\u5411\u8fb9), \u6211\u4eec\u505c\u6b62\u3002</p>\n\n<p>\u73b0\u5728, \u5982\u679c\u6211\u4eec\u6700\u540e\u80fd\u8d70\u5230\u7ec8\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u8d77\u59cb\u8282\u70b9\u662f<em>\u6700\u7ec8\u5b89\u5168</em>\u7684\u3002 \u66f4\u5177\u4f53\u5730\u8bf4, \u5b58\u5728\u4e00\u4e2a\u81ea\u7136\u6570 <code>K</code>,&nbsp; \u65e0\u8bba\u9009\u62e9\u4ece\u54ea\u91cc\u5f00\u59cb\u884c\u8d70, \u6211\u4eec\u8d70\u4e86\u4e0d\u5230 <code>K</code> \u6b65\u540e\u5fc5\u80fd\u505c\u6b62\u5728\u4e00\u4e2a\u7ec8\u70b9\u3002</p>\n\n<p>\u54ea\u4e9b\u8282\u70b9\u6700\u7ec8\u662f\u5b89\u5168\u7684\uff1f \u7ed3\u679c\u8fd4\u56de\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u3002</p>\n\n<p>\u8be5\u6709\u5411\u56fe\u6709 <code>N</code> \u4e2a\u8282\u70b9\uff0c\u6807\u7b7e\u4e3a <code>0, 1, ..., N-1</code>, \u5176\u4e2d <code>N</code> \u662f&nbsp;<code>graph</code>&nbsp;\u7684\u8282\u70b9\u6570.&nbsp; \u56fe\u4ee5\u4ee5\u4e0b\u7684\u5f62\u5f0f\u7ed9\u51fa: <code>graph[i]</code> \u662f\u8282\u70b9 <code>j</code> \u7684\u4e00\u4e2a\u5217\u8868\uff0c\u6ee1\u8db3 <code>(i, j)</code> \u662f\u56fe\u7684\u4e00\u6761\u6709\u5411\u8fb9\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b\uff1a</strong>\n<strong>\u8f93\u5165\uff1a</strong>graph = [[1,2],[2,3],[5],[0],[5],[],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[2,4,5,6]\n\u8fd9\u91cc\u662f\u4e0a\u56fe\u7684\u793a\u610f\u56fe\u3002\n\n</pre>\n\n<p><img alt=\"Illustration of graph\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png\" style=\"height:86px; width:300px\" /></p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>graph</code> \u8282\u70b9\u6570\u4e0d\u8d85\u8fc7 <code>10000</code>.</li>\n\t<li>\u56fe\u7684\u8fb9\u6570\u4e0d\u4f1a\u8d85\u8fc7 <code>32000</code>.</li>\n\t<li>\u6bcf\u4e2a <code>graph[i]</code> \u88ab\u6392\u5e8f\u4e3a\u4e0d\u540c\u7684\u6574\u6570\u5217\u8868\uff0c \u5728\u533a\u95f4 <code>[0, graph.length - 1]</code>&nbsp;\u4e2d\u9009\u53d6\u3002</li>\n</ul>\n",
        "titleZh": "\u627e\u5230\u6700\u7ec8\u7684\u5b89\u5168\u72b6\u6001",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "803",
        "link": "bricks-falling-when-hit",
        "title": "Bricks Falling When Hit",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "17.3%",
        "questionDescription": "<p>We have a grid of 1s and 0s; the 1s in a cell represent bricks.&nbsp; A brick will not drop if and only if it is directly connected to the top of the grid, or at least one of its (4-way) adjacent bricks will not drop.</p>\r\n\r\n<p>We will do some erasures&nbsp;sequentially. Each time we want to do the erasure at the location (i, j), the brick (if it exists) on that location will disappear, and then some other bricks may&nbsp;drop because of that&nbsp;erasure.</p>\r\n\r\n<p>Return an array representing the number of bricks that will drop after each erasure in sequence.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> \r\ngrid = [[1,0,0,0],[1,1,1,0]]\r\nhits = [[1,0]]\r\n<strong>Output:</strong> [2]\r\n<strong>Explanation: </strong>\r\nIf we erase the brick at (1, 0), the brick at (1, 1) and (1, 2) will drop. So we should return 2.</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> \r\ngrid = [[1,0,0,0],[1,1,0,0]]\r\nhits = [[1,1],[1,0]]\r\n<strong>Output:</strong> [0,0]\r\n<strong>Explanation: </strong>\r\nWhen we erase the brick at (1, 0), the brick at (1, 1) has already disappeared due to the last move. So each erasure will cause no bricks dropping.  Note that the erased brick (1, 0) will not be counted as a dropped brick.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of rows and columns in the grid will be in the range&nbsp;[1, 200].</li>\r\n\t<li>The number of erasures will not exceed the area of the grid.</li>\r\n\t<li>It is guaranteed that each erasure will be different from any other erasure, and located inside the grid.</li>\r\n\t<li>An erasure may refer to a location with no brick - if it does, no bricks drop.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u6709\u4e00\u7ec4\u5305\u542b1\u548c0\u7684\u7f51\u683c\uff1b\u5176\u4e2d1\u8868\u793a\u7816\u5757\u3002&nbsp;\u5f53\u4e14\u4ec5\u5f53\u4e00\u5757\u7816\u76f4\u63a5\u8fde\u63a5\u5230\u7f51\u683c\u7684\u9876\u90e8\uff0c\u6216\u8005\u5b83\u81f3\u5c11\u6709\u4e00\u5757\u76f8\u90bb\uff084&nbsp;\u4e2a\u65b9\u5411\u4e4b\u4e00\uff09\u7816\u5757\u4e0d\u4f1a\u6389\u843d\u65f6\uff0c\u5b83\u624d\u4e0d\u4f1a\u843d\u4e0b\u3002</p>\n\n<p>\u6211\u4eec\u4f1a\u4f9d\u6b21\u6d88\u9664\u4e00\u4e9b\u7816\u5757\u3002\u6bcf\u5f53\u6211\u4eec\u6d88\u9664&nbsp;(i, j) \u4f4d\u7f6e\u65f6\uff0c \u5bf9\u5e94\u4f4d\u7f6e\u7684\u7816\u5757\uff08\u82e5\u5b58\u5728\uff09\u4f1a\u6d88\u5931\uff0c\u7136\u540e\u5176\u4ed6\u7684\u7816\u5757\u53ef\u80fd\u56e0\u4e3a\u8fd9\u4e2a\u6d88\u9664\u800c\u843d\u4e0b\u3002</p>\n\n<p>\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\u8868\u793a\u6bcf\u6b21\u6d88\u9664\u64cd\u4f5c\u5bf9\u5e94\u843d\u4e0b\u7684\u7816\u5757\u6570\u76ee\u3002</p>\n\n<pre><strong>\u793a\u4f8b 1\uff1a</strong>\n<strong>\u8f93\u5165\uff1a</strong>\ngrid = [[1,0,0,0],[1,1,1,0]]\nhits = [[1,0]]\n<strong>\u8f93\u51fa:</strong> [2]\n<strong>\u89e3\u91ca: </strong>\n\u5982\u679c\u6211\u4eec\u6d88\u9664(1, 0)\u4f4d\u7f6e\u7684\u7816\u5757, \u5728(1, 1) \u548c(1, 2) \u7684\u7816\u5757\u4f1a\u843d\u4e0b\u3002\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u8fd4\u56de2\u3002</pre>\n\n<pre><strong>\u793a\u4f8b 2\uff1a</strong>\n<strong>\u8f93\u5165\uff1a</strong>\ngrid = [[1,0,0,0],[1,1,0,0]]\nhits = [[1,1],[1,0]]\n<strong>\u8f93\u51fa\uff1a</strong>[0,0]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5f53\u6211\u4eec\u6d88\u9664(1, 0)\u7684\u7816\u5757\u65f6\uff0c(1, 1)\u7684\u7816\u5757\u5df2\u7ecf\u7531\u4e8e\u4e0a\u4e00\u6b65\u6d88\u9664\u800c\u6d88\u5931\u4e86\u3002\u6240\u4ee5\u6bcf\u6b21\u6d88\u9664\u64cd\u4f5c\u4e0d\u4f1a\u9020\u6210\u7816\u5757\u843d\u4e0b\u3002\u6ce8\u610f(1, 0)\u7816\u5757\u4e0d\u4f1a\u8bb0\u4f5c\u843d\u4e0b\u7684\u7816\u5757\u3002</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u7f51\u683c\u7684\u884c\u6570\u548c\u5217\u6570\u7684\u8303\u56f4\u662f[1, 200]\u3002</li>\n\t<li>\u6d88\u9664\u7684\u6570\u5b57\u4e0d\u4f1a\u8d85\u8fc7\u7f51\u683c\u7684\u533a\u57df\u3002</li>\n\t<li>\u53ef\u4ee5\u4fdd\u8bc1\u6bcf\u6b21\u7684\u6d88\u9664\u90fd\u4e0d\u76f8\u540c\uff0c\u5e76\u4e14\u4f4d\u4e8e\u7f51\u683c\u7684\u5185\u90e8\u3002</li>\n\t<li>\u4e00\u4e2a\u6d88\u9664\u7684\u4f4d\u7f6e\u53ef\u80fd\u6ca1\u6709\u7816\u5757\uff0c\u5982\u679c\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u4e0d\u4f1a\u6709\u7816\u5757\u843d\u4e0b\u3002</li>\n</ul>\n",
        "titleZh": "\u6253\u7816\u5757",
        "tags": [
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "804",
        "link": "unique-morse-code-words",
        "title": "Unique Morse Code Words",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "70.4%",
        "questionDescription": "<p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: <code>&quot;a&quot;</code> maps to <code>&quot;.-&quot;</code>, <code>&quot;b&quot;</code> maps to <code>&quot;-...&quot;</code>, <code>&quot;c&quot;</code> maps to <code>&quot;-.-.&quot;</code>, and so on.</p>\r\n\r\n<p>For convenience, the full table for the 26 letters of the English alphabet is given below:</p>\r\n\r\n<pre>\r\n[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</pre>\r\n\r\n<p>Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, &quot;cba&quot; can be written as &quot;-.-..--...&quot;, (which is the concatenation &quot;-.-.&quot; + &quot;-...&quot; + &quot;.-&quot;). We&#39;ll call such a concatenation, the transformation&nbsp;of a word.</p>\r\n\r\n<p>Return the number of different transformations among all words we have.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]\r\n<strong>Output:</strong> 2\r\n<strong>Explanation: </strong>\r\nThe transformation of each word is:\r\n&quot;gin&quot; -&gt; &quot;--...-.&quot;\r\n&quot;zen&quot; -&gt; &quot;--...-.&quot;\r\n&quot;gig&quot; -&gt; &quot;--...--.&quot;\r\n&quot;msg&quot; -&gt; &quot;--...--.&quot;\r\n\r\nThere are 2 different transformations, &quot;--...-.&quot; and &quot;--...--.&quot;.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The length of <code>words</code> will be at most <code>100</code>.</li>\r\n\t<li>Each <code>words[i]</code> will have length in range <code>[1, 12]</code>.</li>\r\n\t<li><code>words[i]</code> will only consist of lowercase letters.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u56fd\u9645\u6469\u5c14\u65af\u5bc6\u7801\u5b9a\u4e49\u4e00\u79cd\u6807\u51c6\u7f16\u7801\u65b9\u5f0f\uff0c\u5c06\u6bcf\u4e2a\u5b57\u6bcd\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u7531\u4e00\u7cfb\u5217\u70b9\u548c\u77ed\u7ebf\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c&nbsp;\u6bd4\u5982: <code>&quot;a&quot;</code> \u5bf9\u5e94 <code>&quot;.-&quot;</code>, <code>&quot;b&quot;</code> \u5bf9\u5e94 <code>&quot;-...&quot;</code>, <code>&quot;c&quot;</code> \u5bf9\u5e94 <code>&quot;-.-.&quot;</code>, \u7b49\u7b49\u3002</p>\n\n<p>\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6240\u670926\u4e2a\u82f1\u6587\u5b57\u6bcd\u5bf9\u5e94\u6469\u5c14\u65af\u5bc6\u7801\u8868\u5982\u4e0b\uff1a</p>\n\n<pre>[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</pre>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5355\u8bcd\u53ef\u4ee5\u5199\u6210\u6bcf\u4e2a\u5b57\u6bcd\u5bf9\u5e94\u6469\u5c14\u65af\u5bc6\u7801\u7684\u7ec4\u5408\u3002\u4f8b\u5982\uff0c&quot;cab&quot; \u53ef\u4ee5\u5199\u6210 &quot;-.-..--...&quot;\uff0c(\u5373 &quot;-.-.&quot; + &quot;-...&quot; + &quot;.-&quot;\u5b57\u7b26\u4e32\u7684\u7ed3\u5408)\u3002\u6211\u4eec\u5c06\u8fd9\u6837\u4e00\u4e2a\u8fde\u63a5\u8fc7\u7a0b\u79f0\u4f5c\u5355\u8bcd\u7ffb\u8bd1\u3002</p>\n\n<p>\u8fd4\u56de\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u6240\u6709\u8bcd\u4e0d\u540c\u5355\u8bcd\u7ffb\u8bd1\u7684\u6570\u91cf\u3002</p>\n\n<pre><strong>\u4f8b\u5982:</strong>\n<strong>\u8f93\u5165:</strong> words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca: </strong>\n\u5404\u5355\u8bcd\u7ffb\u8bd1\u5982\u4e0b:\n&quot;gin&quot; -&gt; &quot;--...-.&quot;\n&quot;zen&quot; -&gt; &quot;--...-.&quot;\n&quot;gig&quot; -&gt; &quot;--...--.&quot;\n&quot;msg&quot; -&gt; &quot;--...--.&quot;\n\n\u5171\u6709 2 \u79cd\u4e0d\u540c\u7ffb\u8bd1, &quot;--...-.&quot; \u548c &quot;--...--.&quot;.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u5355\u8bcd\u5217\u8868<code>words</code>&nbsp;\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 <code>100</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u5355\u8bcd&nbsp;<code>words[i]</code>\u7684\u957f\u5ea6\u8303\u56f4\u4e3a&nbsp;<code>[1, 12]</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u5355\u8bcd&nbsp;<code>words[i]</code>\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ul>\n",
        "titleZh": "\u552f\u4e00\u6469\u5c14\u65af\u5bc6\u7801\u8bcd",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "805",
        "link": "split-array-with-same-average",
        "title": "Split Array With Same Average",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "20.6%",
        "questionDescription": "<p>In a given integer array A, we must move every element of A to either list B or list C. (B and C initially start empty.)</p>\r\n\r\n<p>Return true if and only if after such a move, it is possible that the average value of B is equal to the average value of C, and B and C are both non-empty.</p>\r\n\r\n<pre>\r\n<strong>Example :</strong>\r\n<strong>Input:</strong> \r\n[1,2,3,4,5,6,7,8]\r\n<strong>Output:</strong> true\r\n<strong>Explanation: </strong>We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have the average of 4.5.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The length of <code>A</code> will be in the range&nbsp;[1, 30].</li>\r\n\t<li><code>A[i]</code> will be in the range of <code>[0, 10000]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u7684\u6574\u6570\u6570\u7ec4 A \uff0c\u6211\u4eec\u8981\u5c06 A\u6570\u7ec4 \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u79fb\u52a8\u5230 B\u6570\u7ec4 \u6216\u8005 C\u6570\u7ec4\u4e2d\u3002\uff08B\u6570\u7ec4\u548cC\u6570\u7ec4\u5728\u5f00\u59cb\u7684\u65f6\u5019\u90fd\u4e3a\u7a7a\uff09</p>\n\n<p>\u8fd4\u56de<code>true</code> \uff0c\u5f53\u4e14\u4ec5\u5f53\u5728\u6211\u4eec\u7684\u5b8c\u6210\u8fd9\u6837\u7684\u79fb\u52a8\u540e\uff0c\u53ef\u4f7f\u5f97B\u6570\u7ec4\u7684\u5e73\u5747\u503c\u548cC\u6570\u7ec4\u7684\u5e73\u5747\u503c\u76f8\u7b49\uff0c\u5e76\u4e14B\u6570\u7ec4\u548cC\u6570\u7ec4\u90fd\u4e0d\u4e3a\u7a7a\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> \n[1,2,3,4,5,6,7,8]\n<strong>\u8f93\u51fa:</strong> true\n<strong>\u89e3\u91ca: </strong>\u6211\u4eec\u53ef\u4ee5\u5c06\u6570\u7ec4\u5206\u5272\u4e3a [1,4,5,8] \u548c [2,3,6,7], \u4ed6\u4eec\u7684\u5e73\u5747\u503c\u90fd\u662f4.5\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li><code>A</code> \u6570\u7ec4\u7684\u957f\u5ea6\u8303\u56f4\u4e3a <code>[1, 30]</code>.</li>\n\t<li><code>A[i]</code> \u7684\u6570\u636e\u8303\u56f4\u4e3a <code>[0, 10000]</code>.</li>\n</ul>\n",
        "titleZh": "\u6570\u7ec4\u7684\u5747\u503c\u5206\u5272",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Microsoft",
            "Apple"
        ]
    },
    {
        "leetId": "806",
        "link": "number-of-lines-to-write-string",
        "title": "Number of Lines To Write String",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "60.3%",
        "questionDescription": "<p>We are to write the letters of a given string <code>S</code>, from left to right into lines. Each line has maximum width 100 units, and if writing a letter would cause the width of the line to exceed 100 units, it is written on the next line. We are given an array&nbsp;<code>widths</code>, an array where widths[0] is the width of &#39;a&#39;, widths[1] is the width of &#39;b&#39;, ..., and widths[25] is the width of &#39;z&#39;.</p>\r\n\r\n<p>Now answer two questions: how many lines have at least one character from <code>S</code>, and what is the width used by the last such line? Return your answer as an integer list of length 2.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<strong>Example :</strong>\r\n<strong>Input:</strong> \r\nwidths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\r\nS = &quot;abcdefghijklmnopqrstuvwxyz&quot;\r\n<strong>Output:</strong> [3, 60]\r\n<strong>Explanation: </strong>\r\nAll letters have the same length of 10. To write all 26 letters,\r\nwe need two full lines and one line with 60 units.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example :</strong>\r\n<strong>Input:</strong> \r\nwidths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\r\nS = &quot;bbbcccdddaaa&quot;\r\n<strong>Output:</strong> [2, 4]\r\n<strong>Explanation: </strong>\r\nAll letters except &#39;a&#39; have the same length of 10, and \r\n&quot;bbbcccdddaa&quot; will cover 9 * 10 + 2 * 4 = 98 units.\r\nFor the last &#39;a&#39;, it is written on the second line because\r\nthere is only 2 units left in the first line.\r\nSo the answer is 2 lines, plus 4 units in the second line.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The length of <code>S</code> will be in the range&nbsp;[1, 1000].</li>\r\n\t<li><code>S</code> will only contain lowercase letters.</li>\r\n\t<li><code>widths</code> is&nbsp;an array of length <code>26</code>.</li>\r\n\t<li><code>widths[i]</code> will be in the range of <code>[2, 10]</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u8981\u628a\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32 <code>S</code>&nbsp;\u4ece\u5de6\u5230\u53f3\u5199\u5230\u6bcf\u4e00\u884c\u4e0a\uff0c\u6bcf\u4e00\u884c\u7684\u6700\u5927\u5bbd\u5ea6\u4e3a100\u4e2a\u5355\u4f4d\uff0c\u5982\u679c\u6211\u4eec\u5728\u5199\u67d0\u4e2a\u5b57\u6bcd\u7684\u65f6\u5019\u4f1a\u4f7f\u8fd9\u884c\u8d85\u8fc7\u4e86100 \u4e2a\u5355\u4f4d\uff0c\u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u628a\u8fd9\u4e2a\u5b57\u6bcd\u5199\u5230\u4e0b\u4e00\u884c\u3002\u6211\u4eec\u7ed9\u5b9a\u4e86\u4e00\u4e2a\u6570\u7ec4&nbsp;<code>widths</code>&nbsp;\uff0c\u8fd9\u4e2a\u6570\u7ec4&nbsp;widths[0] \u4ee3\u8868 &#39;a&#39; \u9700\u8981\u7684\u5355\u4f4d\uff0c&nbsp;widths[1] \u4ee3\u8868 &#39;b&#39; \u9700\u8981\u7684\u5355\u4f4d\uff0c...\uff0c&nbsp;widths[25] \u4ee3\u8868 &#39;z&#39; \u9700\u8981\u7684\u5355\u4f4d\u3002</p>\n\n<p>\u73b0\u5728\u56de\u7b54\u4e24\u4e2a\u95ee\u9898\uff1a\u81f3\u5c11\u591a\u5c11\u884c\u80fd\u653e\u4e0b<code>S</code>\uff0c\u4ee5\u53ca\u6700\u540e\u4e00\u884c\u4f7f\u7528\u7684\u5bbd\u5ea6\u662f\u591a\u5c11\u4e2a\u5355\u4f4d\uff1f\u5c06\u4f60\u7684\u7b54\u6848\u4f5c\u4e3a\u957f\u5ea6\u4e3a2\u7684\u6574\u6570\u5217\u8868\u8fd4\u56de\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> \nwidths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\nS = &quot;abcdefghijklmnopqrstuvwxyz&quot;\n<strong>\u8f93\u51fa:</strong> [3, 60]\n<strong>\u89e3\u91ca: \n</strong>\u6240\u6709\u7684\u5b57\u7b26\u62e5\u6709\u76f8\u540c\u7684\u5360\u7528\u5355\u4f4d10\u3002\u6240\u4ee5\u4e66\u5199\u6240\u6709\u768426\u4e2a\u5b57\u6bcd\uff0c\n\u6211\u4eec\u9700\u89812\u4e2a\u6574\u884c\u548c\u5360\u752860\u4e2a\u5355\u4f4d\u7684\u4e00\u884c\u3002\n</pre>\n\n<pre>\n<strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> \nwidths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\nS = &quot;bbbcccdddaaa&quot;\n<strong>\u8f93\u51fa:</strong> [2, 4]\n<strong>\u89e3\u91ca: \n</strong>\u9664\u53bb\u5b57\u6bcd&#39;a&#39;\u6240\u6709\u7684\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\u5355\u4f4d10\uff0c\u5e76\u4e14\u5b57\u7b26\u4e32 &quot;bbbcccdddaa&quot; \u5c06\u4f1a\u8986\u76d6 9 * 10 + 2 * 4 = 98 \u4e2a\u5355\u4f4d.\n\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd &#39;a&#39; \u5c06\u4f1a\u88ab\u5199\u5230\u7b2c\u4e8c\u884c\uff0c\u56e0\u4e3a\u7b2c\u4e00\u884c\u53ea\u5269\u4e0b2\u4e2a\u5355\u4f4d\u4e86\u3002\n\u6240\u4ee5\uff0c\u8fd9\u4e2a\u7b54\u6848\u662f2\u884c\uff0c\u7b2c\u4e8c\u884c\u67094\u4e2a\u5355\u4f4d\u5bbd\u5ea6\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8:</strong></p>\n\n<ul>\n\t<li>\u5b57\u7b26\u4e32&nbsp;<code>S</code> \u7684\u957f\u5ea6\u5728&nbsp;[1, 1000] \u7684\u8303\u56f4\u3002</li>\n\t<li><code>S</code> \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li><code>widths</code> \u662f\u957f\u5ea6\u4e3a&nbsp;<code>26</code>\u7684\u6570\u7ec4\u3002</li>\n\t<li><code>widths[i]</code>&nbsp;\u503c\u7684\u8303\u56f4\u5728&nbsp;<code>[2, 10]</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u5199\u5b57\u7b26\u4e32\u9700\u8981\u7684\u884c\u6570",
        "tags": [],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "807",
        "link": "max-increase-to-keep-city-skyline",
        "title": "Max Increase to Keep City Skyline",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "75.4%",
        "questionDescription": "<p>In a 2 dimensional array <code>grid</code>, each value <code>grid[i][j]</code> represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts&nbsp;can be different for different buildings). Height&nbsp;0 is considered to be a&nbsp;building&nbsp;as well.&nbsp;</p>\r\n\r\n<p>At the end, the &quot;skyline&quot; when viewed from all four directions&nbsp;of the grid, i.e.&nbsp;top, bottom, left, and right,&nbsp;must be the same as the&nbsp;skyline of the original grid. A city&#39;s skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See&nbsp;the following example.</p>\r\n\r\n<p>What is the maximum total sum that the height of the buildings can be increased?</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\r\n<strong>Output:</strong> 35\r\n<strong>Explanation:</strong> \r\nThe grid is:\r\n[ [3, 0, 8, 4], \r\n  [2, 4, 5, 7],\r\n  [9, 2, 6, 3],\r\n  [0, 3, 1, 0] ]\r\n\r\nThe skyline viewed from top or bottom is: [9, 4, 8, 7]\r\nThe skyline viewed from left or right is: [8, 7, 9, 3]\r\n\r\nThe grid after increasing the height of buildings without affecting skylines is:\r\n\r\ngridNew = [ [8, 4, 8, 7],\r\n            [7, 4, 7, 7],\r\n            [9, 4, 8, 7],\r\n            [3, 3, 3, 3] ]\r\n\r\n</pre>\r\n\r\n<p><strong>Notes: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt; grid.length = grid[0].length &lt;= 50</code>.</li>\r\n\t<li>All heights <code>grid[i][j]</code> are in the range <code>[0, 100]</code>.</li>\r\n\t<li>All buildings in <code>grid[i][j]</code> occupy the entire grid cell: that is, they are a <code>1 x 1 x grid[i][j]</code> rectangular prism.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e8c\u7ef4\u6570\u7ec4<code>grid</code>\u4e2d\uff0c<code>grid[i][j]</code>\u4ee3\u8868\u4f4d\u4e8e\u67d0\u5904\u7684\u5efa\u7b51\u7269\u7684\u9ad8\u5ea6\u3002 \u6211\u4eec\u88ab\u5141\u8bb8\u589e\u52a0\u4efb\u4f55\u6570\u91cf\uff08\u4e0d\u540c\u5efa\u7b51\u7269\u7684\u6570\u91cf\u53ef\u80fd\u4e0d\u540c\uff09\u7684\u5efa\u7b51\u7269\u7684\u9ad8\u5ea6\u3002 \u9ad8\u5ea6 0 \u4e5f\u88ab\u8ba4\u4e3a\u662f\u5efa\u7b51\u7269\u3002</p>\n\n<p>\u6700\u540e\uff0c\u4ece\u65b0\u6570\u7ec4\u7684\u6240\u6709\u56db\u4e2a\u65b9\u5411\uff08\u5373\u9876\u90e8\uff0c\u5e95\u90e8\uff0c\u5de6\u4fa7\u548c\u53f3\u4fa7\uff09\u89c2\u770b\u7684&ldquo;\u5929\u9645\u7ebf&rdquo;\u5fc5\u987b\u4e0e\u539f\u59cb\u6570\u7ec4\u7684\u5929\u9645\u7ebf\u76f8\u540c\u3002 \u57ce\u5e02\u7684\u5929\u9645\u7ebf\u662f\u4ece\u8fdc\u5904\u89c2\u770b\u65f6\uff0c\u7531\u6240\u6709\u5efa\u7b51\u7269\u5f62\u6210\u7684\u77e9\u5f62\u7684\u5916\u90e8\u8f6e\u5ed3\u3002 \u8bf7\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\u3002</p>\n\n<p>\u5efa\u7b51\u7269\u9ad8\u5ea6\u53ef\u4ee5\u589e\u52a0\u7684\u6700\u5927\u603b\u548c\u662f\u591a\u5c11\uff1f</p>\n\n<pre>\n<strong>\u4f8b\u5b50\uff1a</strong>\n<strong>\u8f93\u5165\uff1a</strong> grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\n<strong>\u8f93\u51fa\uff1a</strong> 35\n<strong>\u89e3\u91ca\uff1a</strong> \nThe grid is:\n[ [3, 0, 8, 4], \n  [2, 4, 5, 7],\n  [9, 2, 6, 3],\n  [0, 3, 1, 0] ]\n\n\u4ece\u6570\u7ec4\u7ad6\u76f4\u65b9\u5411\uff08\u5373\u9876\u90e8\uff0c\u5e95\u90e8\uff09\u770b&ldquo;\u5929\u9645\u7ebf&rdquo;\u662f\uff1a[9, 4, 8, 7]\n\u4ece\u6c34\u5e73\u6c34\u5e73\u65b9\u5411\uff08\u5373\u5de6\u4fa7\uff0c\u53f3\u4fa7\uff09\u770b&ldquo;\u5929\u9645\u7ebf&rdquo;\u662f\uff1a[8, 7, 9, 3]\n\n\u5728\u4e0d\u5f71\u54cd\u5929\u9645\u7ebf\u7684\u60c5\u51b5\u4e0b\u5bf9\u5efa\u7b51\u7269\u8fdb\u884c\u589e\u9ad8\u540e\uff0c\u65b0\u6570\u7ec4\u5982\u4e0b\uff1a\n\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n</pre>\n\n<p><strong>\u8bf4\u660e: </strong></p>\n\n<ul>\n\t<li><code>1 &lt; grid.length = grid[0].length &lt;= 50</code>\u3002</li>\n\t<li>&nbsp;<code>grid[i][j]</code> \u7684\u9ad8\u5ea6\u8303\u56f4\u662f\uff1a <code>[0, 100]</code>\u3002</li>\n\t<li>\u4e00\u5ea7\u5efa\u7b51\u7269\u5360\u636e\u4e00\u4e2a<code>grid[i][j]</code>\uff1a\u6362\u8a00\u4e4b\uff0c\u5b83\u4eec\u662f <code>1 x 1 x grid[i][j]</code> \u7684\u957f\u65b9\u4f53\u3002</li>\n</ul>\n",
        "titleZh": "\u4fdd\u6301\u57ce\u5e02\u5929\u9645\u7ebf",
        "tags": [],
        "companies": [
            "Google",
            "Amazon",
            "Adobe"
        ]
    },
    {
        "leetId": "808",
        "link": "soup-servings",
        "title": "Soup Servings",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "35.4%",
        "questionDescription": "<p>There are two types of soup: type A and type B. Initially we have <code>N</code> ml of each type of soup. There are four kinds of operations:</p>\r\n\r\n<ol>\r\n\t<li>Serve&nbsp;100 ml of soup A and 0 ml of soup B</li>\r\n\t<li>Serve&nbsp;75 ml of soup A and 25&nbsp;ml of soup B</li>\r\n\t<li>Serve 50 ml of soup A and 50 ml of soup B</li>\r\n\t<li>Serve 25&nbsp;ml of soup A and 75&nbsp;ml of soup B</li>\r\n</ol>\r\n\r\n<p>When we serve some soup, we give it to someone and we no longer have it.&nbsp; Each turn,&nbsp;we will choose from the four operations with equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve&nbsp;as much as we can.&nbsp; We stop once we no longer have some quantity of both types of soup.</p>\r\n\r\n<p>Note that we do not have the operation where all 100 ml&#39;s of soup B are used first.&nbsp;&nbsp;</p>\r\n\r\n<p>Return the probability that soup A will be empty&nbsp;first, plus half the probability that A and B become empty at the same time.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> N = 50\r\n<strong>Output:</strong> 0.625\r\n<strong>Explanation:</strong> \r\nIf we choose the first two operations, A will become empty first. For the third operation, A and B will become empty at the same time. For the fourth operation, B will become empty first. So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\r\n\r\n</pre>\r\n\r\n<p><strong>Notes: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= N &lt;= 10^9</code>.&nbsp;</li>\r\n\t<li>Answers within&nbsp;<code>10^-6</code>&nbsp;of the true value will be accepted as correct.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u6709&nbsp;A&nbsp;\u548c&nbsp;B \u4e24\u79cd\u7c7b\u578b\u7684\u6c64\u3002\u4e00\u5f00\u59cb\u6bcf\u79cd\u7c7b\u578b\u7684\u6c64\u6709&nbsp;<code>N</code>&nbsp;\u6beb\u5347\u3002\u6709\u56db\u79cd\u5206\u914d\u64cd\u4f5c\uff1a</p>\n\n<ol>\n\t<li>\u63d0\u4f9b 100ml \u7684\u6c64A \u548c 0ml \u7684\u6c64B\u3002</li>\n\t<li>\u63d0\u4f9b 75ml \u7684\u6c64A \u548c 25ml \u7684\u6c64B\u3002</li>\n\t<li>\u63d0\u4f9b 50ml \u7684\u6c64A \u548c 50ml \u7684\u6c64B\u3002</li>\n\t<li>\u63d0\u4f9b 25ml \u7684\u6c64A \u548c 75ml \u7684\u6c64B\u3002</li>\n</ol>\n\n<p>\u5f53\u6211\u4eec\u628a\u6c64\u5206\u914d\u7ed9\u67d0\u4eba\u4e4b\u540e\uff0c\u6c64\u5c31\u6ca1\u6709\u4e86\u3002\u6bcf\u4e2a\u56de\u5408\uff0c\u6211\u4eec\u5c06\u4ece\u56db\u79cd\u6982\u7387\u540c\u4e3a0.25\u7684\u64cd\u4f5c\u4e2d\u8fdb\u884c\u5206\u914d\u9009\u62e9\u3002\u5982\u679c\u6c64\u7684\u5269\u4f59\u91cf\u4e0d\u8db3\u4ee5\u5b8c\u6210\u67d0\u6b21\u64cd\u4f5c\uff0c\u6211\u4eec\u5c06\u5c3d\u53ef\u80fd\u5206\u914d\u3002\u5f53\u4e24\u79cd\u7c7b\u578b\u7684\u6c64\u90fd\u5206\u914d\u5b8c\u65f6\uff0c\u505c\u6b62\u64cd\u4f5c\u3002</p>\n\n<p>\u6ce8\u610f\u4e0d\u5b58\u5728\u5148\u5206\u914d100 ml\u6c64B\u7684\u64cd\u4f5c\u3002</p>\n\n<p>\u9700\u8981\u8fd4\u56de\u7684\u503c\uff1a&nbsp;\u6c64A\u5148\u5206\u914d\u5b8c\u7684\u6982\u7387 + \u6c64A\u548c\u6c64B\u540c\u65f6\u5206\u914d\u5b8c\u7684\u6982\u7387 / 2\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> N = 50\n<strong>\u8f93\u51fa:</strong> 0.625\n<strong>\u89e3\u91ca:\n</strong>\u5982\u679c\u6211\u4eec\u9009\u62e9\u524d\u4e24\u4e2a\u64cd\u4f5c<strong>\uff0c</strong>A\u5c06\u9996\u5148\u53d8\u4e3a\u7a7a\u3002\u5bf9\u4e8e\u7b2c\u4e09\u4e2a\u64cd\u4f5c\uff0cA\u548cB\u4f1a\u540c\u65f6\u53d8\u4e3a\u7a7a\u3002\u5bf9\u4e8e\u7b2c\u56db\u4e2a\u64cd\u4f5c\uff0cB\u5c06\u9996\u5148\u53d8\u4e3a\u7a7a\u3002<strong>\n</strong>\u6240\u4ee5A\u53d8\u4e3a\u7a7a\u7684\u603b\u6982\u7387\u52a0\u4e0aA\u548cB\u540c\u65f6\u53d8\u4e3a\u7a7a\u7684\u6982\u7387\u7684\u4e00\u534a\u662f 0.25 *(1 + 1 + 0.5 + 0)= 0.625\u3002\n</pre>\n\n<p><strong>\u6ce8\u91ca: </strong></p>\n\n<ul>\n\t<li><code>0 &lt;= N &lt;= 10^9</code>\u3002</li>\n\t<li>\n\t<p>\u8fd4\u56de\u503c\u5728&nbsp;<code>10^-6</code>&nbsp;\u7684\u8303\u56f4\u5c06\u88ab\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\u3002</p>\n\t</li>\n</ul>\n",
        "titleZh": "\u5206\u6c64",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "809",
        "link": "expressive-words",
        "title": "Expressive Words",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "32.9%",
        "questionDescription": "<p>Sometimes people repeat letters to represent extra feeling, such as &quot;hello&quot; -&gt; &quot;heeellooo&quot;, &quot;hi&quot; -&gt; &quot;hiiii&quot;.&nbsp; In these strings like &quot;heeellooo&quot;, we have <em>groups</em> of adjacent letters that are all the same:&nbsp; &quot;h&quot;, &quot;eee&quot;, &quot;ll&quot;, &quot;ooo&quot;.</p>\r\n\r\n<p>For some given string <code>S</code>, a query word is <em>stretchy</em> if it can be made to be equal to <code>S</code> by any&nbsp;number of&nbsp;applications of the following <em>extension</em> operation: choose a group consisting of&nbsp;characters <code>c</code>, and add some number of characters <code>c</code> to the group so that the size of the group is 3 or more.</p>\r\n\r\n<p>For example, starting with &quot;hello&quot;, we could do an extension on the group &quot;o&quot; to get &quot;hellooo&quot;, but we cannot get &quot;helloo&quot; since the group &quot;oo&quot; has size less than 3.&nbsp; Also, we could do another extension like &quot;ll&quot; -&gt; &quot;lllll&quot; to get &quot;helllllooo&quot;.&nbsp; If <code>S = &quot;helllllooo&quot;</code>, then the query word &quot;hello&quot; would be stretchy because of these two extension operations:&nbsp;<code>query = &quot;hello&quot; -&gt; &quot;hellooo&quot; -&gt;&nbsp;&quot;helllllooo&quot; = S</code>.</p>\r\n\r\n<p>Given a list of query words, return the number of words that are stretchy.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> \r\nS = &quot;heeellooo&quot;\r\nwords = [&quot;hello&quot;, &quot;hi&quot;, &quot;helo&quot;]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong> \r\nWe can extend &quot;e&quot; and &quot;o&quot; in the word &quot;hello&quot; to get &quot;heeellooo&quot;.\r\nWe can&#39;t extend &quot;helo&quot; to get &quot;heeellooo&quot; because the group &quot;ll&quot; is not size 3 or more.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Notes: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= len(S) &lt;= 100</code>.</li>\r\n\t<li><code>0 &lt;= len(words) &lt;= 100</code>.</li>\r\n\t<li><code>0 &lt;= len(words[i]) &lt;= 100</code>.</li>\r\n\t<li><code>S</code> and all words in <code>words</code>&nbsp;consist only of&nbsp;lowercase letters</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u6709\u65f6\u5019\u4eba\u4eec\u4f1a\u7528\u91cd\u590d\u5199\u4e00\u4e9b\u5b57\u6bcd\u6765\u8868\u793a\u989d\u5916\u7684\u611f\u53d7\uff0c\u6bd4\u5982 <code>&quot;hello&quot; -&gt; &quot;heeellooo&quot;</code>, <code>&quot;hi&quot; -&gt; &quot;hiii&quot;</code>\u3002\u6211\u4eec\u5c06\u76f8\u90bb\u5b57\u6bcd\u90fd\u76f8\u540c\u7684\u4e00\u4e32\u5b57\u7b26\u5b9a\u4e49\u4e3a\u76f8\u540c\u5b57\u6bcd\u7ec4\uff0c\u4f8b\u5982\uff1a&quot;h&quot;, &quot;eee&quot;, &quot;ll&quot;, &quot;ooo&quot;\u3002</p>\n\n<p>\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32 S \uff0c\u5982\u679c\u53e6\u4e00\u4e2a\u5355\u8bcd\u80fd\u591f\u901a\u8fc7\u5c06\u4e00\u4e9b\u5b57\u6bcd\u7ec4\u6269\u5f20\u4ece\u800c\u4f7f\u5176\u548c S \u76f8\u540c\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u5355\u8bcd\u5b9a\u4e49\u4e3a\u53ef\u6269\u5f20\u7684\uff08stretchy\uff09\u3002\u6269\u5f20\u64cd\u4f5c\u5b9a\u4e49\u5982\u4e0b\uff1a\u9009\u62e9\u4e00\u4e2a\u5b57\u6bcd\u7ec4\uff08\u5305\u542b\u5b57\u6bcd&nbsp;<code>c</code>&nbsp;\uff09\uff0c\u7136\u540e\u5f80\u5176\u4e2d\u6dfb\u52a0\u76f8\u540c\u7684\u5b57\u6bcd&nbsp;<code>c</code>&nbsp;\u4f7f\u5176\u957f\u5ea6\u8fbe\u5230 3 \u6216\u4ee5\u4e0a\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u4ee5&nbsp;&quot;hello&quot; \u4e3a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u5b57\u6bcd\u7ec4&nbsp;&quot;o&quot; \u6269\u5f20\u5f97\u5230 &quot;hellooo&quot;\uff0c\u4f46\u662f\u65e0\u6cd5\u4ee5\u540c\u6837\u7684\u65b9\u6cd5\u5f97\u5230 &quot;helloo&quot; \u56e0\u4e3a\u5b57\u6bcd\u7ec4 &quot;oo&quot; \u957f\u5ea6\u5c0f\u4e8e&nbsp;3\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u53e6\u4e00\u79cd\u6269\u5f20 &quot;ll&quot; -&gt; &quot;lllll&quot; \u4ee5\u83b7\u5f97&nbsp;&quot;helllllooo&quot;\u3002\u5982\u679c&nbsp;<code>S = &quot;helllllooo&quot;</code>\uff0c\u90a3\u4e48\u67e5\u8be2\u8bcd&nbsp;&quot;hello&quot; \u662f\u53ef\u6269\u5f20\u7684\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5bf9\u5b83\u6267\u884c\u8fd9\u4e24\u79cd\u6269\u5f20\u64cd\u4f5c\u4f7f\u5f97&nbsp;<code>query = &quot;hello&quot; -&gt; &quot;hellooo&quot; -&gt;&nbsp;&quot;helllllooo&quot; = S</code>\u3002</p>\n\n<p>\u8f93\u5165\u4e00\u7ec4\u67e5\u8be2\u5355\u8bcd\uff0c\u8f93\u51fa\u5176\u4e2d\u53ef\u6269\u5f20\u7684\u5355\u8bcd\u6570\u91cf\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong> \nS = &quot;heeellooo&quot;\nwords = [&quot;hello&quot;, &quot;hi&quot;, &quot;helo&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca</strong>\uff1a\n\u6211\u4eec\u80fd\u901a\u8fc7\u6269\u5f20 &quot;hello&quot; \u7684 &quot;e&quot; \u548c &quot;o&quot; \u6765\u5f97\u5230 &quot;heeellooo&quot;\u3002\n\u6211\u4eec\u4e0d\u80fd\u901a\u8fc7\u6269\u5f20 &quot;helo&quot; \u6765\u5f97\u5230 &quot;heeellooo&quot; \u56e0\u4e3a &quot;ll&quot; \u7684\u957f\u5ea6\u5c0f\u4e8e 3 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= len(S) &lt;= 100</code>\u3002</li>\n\t<li><code>0 &lt;= len(words) &lt;= 100</code>\u3002</li>\n\t<li><code>0 &lt;= len(words[i]) &lt;= 100</code>\u3002</li>\n\t<li><code>S</code>&nbsp;\u548c\u6240\u6709\u5728&nbsp;<code>words</code>&nbsp;\u4e2d\u7684\u5355\u8bcd\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n</ul>\n",
        "titleZh": "\u60c5\u611f\u4e30\u5bcc\u7684\u6587\u5b57",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "810",
        "link": "chalkboard-xor-game",
        "title": "Chalkboard XOR Game",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "46.0%",
        "questionDescription": "<p>We are given non-negative integers nums[i] which are written on a chalkboard.&nbsp; Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first.&nbsp; If erasing a number causes&nbsp;the bitwise XOR of all the elements of the chalkboard to become&nbsp;0, then that player loses.&nbsp; (Also, we&#39;ll say the bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.)</p>\r\n\r\n<p>Also, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.</p>\r\n\r\n<p>Return True if and only if Alice wins the game, assuming both players play optimally.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> nums = [1, 1, 2]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> \r\nAlice has two choices: erase 1 or erase 2. \r\nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \r\nIf Alice erases 2 first, now nums becomes [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.\r\n\r\n</pre>\r\n\r\n<p><strong>Notes: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 1000</code>.&nbsp;</li>\r\n\t<li><code>0 &lt;= nums[i] &lt;= 2^16</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u4e00\u4e2a\u9ed1\u677f\u4e0a\u5199\u7740\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4 nums[i] \u3002\u5c0f\u7ea2\u548c\u5c0f\u660e\u8f6e\u6d41\u4ece\u9ed1\u677f\u4e0a\u64e6\u6389\u4e00\u4e2a\u6570\u5b57\uff0c\u5c0f\u7ea2\u5148\u624b\u3002\u5982\u679c\u64e6\u9664\u4e00\u4e2a\u6570\u5b57\u540e\uff0c\u5269\u4f59\u7684\u6240\u6709\u6570\u5b57\u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\u5f97\u51fa\u7684\u7ed3\u679c\u7b49\u4e8e 0 \u7684\u8bdd\uff0c\u5f53\u524d\u73a9\u5bb6\u6e38\u620f\u5931\u8d25\u3002&nbsp;(\u53e6\u5916\uff0c\u5982\u679c\u53ea\u5269\u4e00\u4e2a\u6570\u5b57\uff0c\u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\u5f97\u5230\u5b83\u672c\u8eab\uff1b\u5982\u679c\u65e0\u6570\u5b57\u5269\u4f59\uff0c\u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\u7ed3\u679c\u4e3a&nbsp;0\u3002\uff09</p>\n\n<p>\u6362\u79cd\u8bf4\u6cd5\u5c31\u662f\uff0c\u8f6e\u5230\u67d0\u4e2a\u73a9\u5bb6\u65f6\uff0c\u5982\u679c\u5f53\u524d\u9ed1\u677f\u4e0a\u6240\u6709\u6570\u5b57\u6309\u4f4d\u5f02\u6216\u8fd0\u7b97\u7ed3\u679c\u7b49\u4e8e 0\uff0c\u8fd9\u4e2a\u73a9\u5bb6\u83b7\u80dc\u3002</p>\n\n<p>\u5047\u8bbe\u4e24\u4e2a\u73a9\u5bb6\u6bcf\u6b65\u90fd\u4f7f\u7528\u6700\u4f18\u89e3\uff0c\u5f53\u4e14\u4ec5\u5f53\u5c0f\u7ea2\u83b7\u80dc\u65f6\u8fd4\u56de true\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> nums = [1, 1, 2]\n<strong>\u8f93\u51fa:</strong> false\n<strong>\u89e3\u91ca:</strong> \n\u5c0f\u7ea2\u6709\u4e24\u4e2a\u9009\u62e9: \u64e6\u6389\u6570\u5b57 1 \u6216 2\u3002\n\u5982\u679c\u64e6\u6389 1, \u6570\u7ec4\u53d8\u6210 [1, 2]\u3002\u5269\u4f59\u6570\u5b57\u6309\u4f4d\u5f02\u6216\u5f97\u5230 1 XOR 2 = 3\u3002\u90a3\u4e48\u5c0f\u660e\u53ef\u4ee5\u64e6\u6389\u4efb\u610f\u6570\u5b57\uff0c\u56e0\u4e3a\u5c0f\u7ea2\u4f1a\u6210\u4e3a\u64e6\u6389\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u7684\u4eba\uff0c\u5979\u603b\u662f\u4f1a\u8f93\u3002\n\u5982\u679c\u5c0f\u7ea2\u64e6\u6389 2\uff0c\u90a3\u4e48\u6570\u7ec4\u53d8\u6210[1, 1]\u3002\u5269\u4f59\u6570\u5b57\u6309\u4f4d\u5f02\u6216\u5f97\u5230 1 XOR 1 = 0\u3002\u5c0f\u7ea2\u4ecd\u7136\u4f1a\u8f93\u6389\u6e38\u620f\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e: </strong></p>\n\n<ul>\n\t<li><code>0 &lt;= N &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 2^16</code></li>\n</ul>\n",
        "titleZh": "\u9ed1\u677f\u5f02\u6216\u6e38\u620f",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Garena"
        ]
    },
    {
        "leetId": "811",
        "link": "subdomain-visit-count",
        "title": "Subdomain Visit Count",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "61.8%",
        "questionDescription": "<p>A website domain like &quot;discuss.leetcode.com&quot; consists of various subdomains. At the top level, we have &quot;com&quot;, at the next level, we have &quot;leetcode.com&quot;, and at the lowest level, &quot;discuss.leetcode.com&quot;. When we visit a domain like &quot;discuss.leetcode.com&quot;, we will also visit the parent domains &quot;leetcode.com&quot; and &quot;com&quot; implicitly.</p>\r\n\r\n<p>Now, call a &quot;count-paired domain&quot; to be a count (representing the number of visits this domain received), followed by a space, followed by the address. An example of a count-paired domain might be &quot;9001 discuss.leetcode.com&quot;.</p>\r\n\r\n<p>We are given a list <code>cpdomains</code> of count-paired domains. We would like a list of count-paired domains, (in the same format as the input, and in any order), that explicitly counts the number of visits to each subdomain.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> \r\n[&quot;9001 discuss.leetcode.com&quot;]\r\n<strong>Output:</strong> \r\n[&quot;9001 discuss.leetcode.com&quot;, &quot;9001 leetcode.com&quot;, &quot;9001 com&quot;]\r\n<strong>Explanation:</strong> \r\nWe only have one website domain: &quot;discuss.leetcode.com&quot;. As discussed above, the subdomain &quot;leetcode.com&quot; and &quot;com&quot; will also be visited. So they will all be visited 9001 times.\r\n\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> \r\n[&quot;900 google.mail.com&quot;, &quot;50 yahoo.com&quot;, &quot;1 intel.mail.com&quot;, &quot;5 wiki.org&quot;]\r\n<strong>Output:</strong> \r\n[&quot;901 mail.com&quot;,&quot;50 yahoo.com&quot;,&quot;900 google.mail.com&quot;,&quot;5 wiki.org&quot;,&quot;5 org&quot;,&quot;1 intel.mail.com&quot;,&quot;951 com&quot;]\r\n<strong>Explanation:</strong> \r\nWe will visit &quot;google.mail.com&quot; 900 times, &quot;yahoo.com&quot; 50 times, &quot;intel.mail.com&quot; once and &quot;wiki.org&quot; 5 times. For the subdomains, we will visit &quot;mail.com&quot; 900 + 1 = 901 times, &quot;com&quot; 900 + 50 + 1 = 951 times, and &quot;org&quot; 5 times.\r\n\r\n</pre>\r\n\r\n<p><strong>Notes: </strong></p>\r\n\r\n<ul>\r\n\t<li>The length of <code>cpdomains</code> will not exceed&nbsp;<code>100</code>.&nbsp;</li>\r\n\t<li>The length of each domain name will not exceed <code>100</code>.</li>\r\n\t<li>Each address will have either 1 or 2 &quot;.&quot; characters.</li>\r\n\t<li>The input count&nbsp;in any count-paired domain will not exceed <code>10000</code>.</li>\r\n\t<li>The answer output can be returned in any order.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u4e00\u4e2a\u7f51\u7ad9\u57df\u540d\uff0c\u5982&quot;discuss.leetcode.com&quot;\uff0c\u5305\u542b\u4e86\u591a\u4e2a\u5b50\u57df\u540d\u3002\u4f5c\u4e3a\u9876\u7ea7\u57df\u540d\uff0c\u5e38\u7528\u7684\u6709&quot;com&quot;\uff0c\u4e0b\u4e00\u7ea7\u5219\u6709&quot;leetcode.com&quot;\uff0c\u6700\u4f4e\u7684\u4e00\u7ea7\u4e3a&quot;discuss.leetcode.com&quot;\u3002\u5f53\u6211\u4eec\u8bbf\u95ee\u57df\u540d&quot;discuss.leetcode.com&quot;\u65f6\uff0c\u4e5f\u540c\u65f6\u8bbf\u95ee\u4e86\u5176\u7236\u57df\u540d&quot;leetcode.com&quot;\u4ee5\u53ca\u9876\u7ea7\u57df\u540d&nbsp;&quot;com&quot;\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u5e26\u8bbf\u95ee\u6b21\u6570\u548c\u57df\u540d\u7684\u7ec4\u5408\uff0c\u8981\u6c42\u5206\u522b\u8ba1\u7b97\u6bcf\u4e2a\u57df\u540d\u88ab\u8bbf\u95ee\u7684\u6b21\u6570\u3002\u5176\u683c\u5f0f\u4e3a\u8bbf\u95ee\u6b21\u6570+\u7a7a\u683c+\u5730\u5740\uff0c\u4f8b\u5982\uff1a&quot;9001 discuss.leetcode.com&quot;\u3002</p>\n\n<p>\u63a5\u4e0b\u6765\u4f1a\u7ed9\u51fa\u4e00\u7ec4\u8bbf\u95ee\u6b21\u6570\u548c\u57df\u540d\u7ec4\u5408\u7684\u5217\u8868<code>cpdomains</code>&nbsp;\u3002\u8981\u6c42\u89e3\u6790\u51fa\u6240\u6709\u57df\u540d\u7684\u8bbf\u95ee\u6b21\u6570\uff0c\u8f93\u51fa\u683c\u5f0f\u548c\u8f93\u5165\u683c\u5f0f\u76f8\u540c\uff0c\u4e0d\u9650\u5b9a\u5148\u540e\u987a\u5e8f\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> \n[&quot;9001 discuss.leetcode.com&quot;]\n<strong>\u8f93\u51fa:</strong> \n[&quot;9001 discuss.leetcode.com&quot;, &quot;9001 leetcode.com&quot;, &quot;9001 com&quot;]\n<strong>\u8bf4\u660e:</strong> \n\u4f8b\u5b50\u4e2d\u4ec5\u5305\u542b\u4e00\u4e2a\u7f51\u7ad9\u57df\u540d\uff1a&quot;discuss.leetcode.com&quot;\u3002\u6309\u7167\u524d\u6587\u5047\u8bbe\uff0c\u5b50\u57df\u540d&quot;leetcode.com&quot;\u548c&quot;com&quot;\u90fd\u4f1a\u88ab\u8bbf\u95ee\uff0c\u6240\u4ee5\u5b83\u4eec\u90fd\u88ab\u8bbf\u95ee\u4e869001\u6b21\u3002\n</pre>\n\n<pre>\n<strong>\u793a\u4f8b 2\n\u8f93\u5165:</strong> \n[&quot;900 google.mail.com&quot;, &quot;50 yahoo.com&quot;, &quot;1 intel.mail.com&quot;, &quot;5 wiki.org&quot;]\n<strong>\u8f93\u51fa:</strong> \n[&quot;901 mail.com&quot;,&quot;50 yahoo.com&quot;,&quot;900 google.mail.com&quot;,&quot;5 wiki.org&quot;,&quot;5 org&quot;,&quot;1 intel.mail.com&quot;,&quot;951 com&quot;]\n<strong>\u8bf4\u660e:</strong> \n\u6309\u7167\u5047\u8bbe\uff0c\u4f1a\u8bbf\u95ee&quot;google.mail.com&quot; 900\u6b21\uff0c&quot;yahoo.com&quot; 50\u6b21\uff0c&quot;intel.mail.com&quot; 1\u6b21\uff0c&quot;wiki.org&quot; 5\u6b21\u3002\n\u800c\u5bf9\u4e8e\u7236\u57df\u540d\uff0c\u4f1a\u8bbf\u95ee&quot;mail.com&quot; 900+1 = 901\u6b21\uff0c&quot;com&quot; 900 + 50 + 1 = 951\u6b21\uff0c\u548c &quot;org&quot; 5 \u6b21\u3002\n</pre>\n\n<p><strong>\u6ce8\u610f\u4e8b\u9879\uff1a</strong></p>\n\n<ul>\n\t<li>&nbsp;<code>cpdomains</code>&nbsp;\u7684\u957f\u5ea6\u5c0f\u4e8e&nbsp;<code>100</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u57df\u540d\u7684\u957f\u5ea6\u5c0f\u4e8e<code>100</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u57df\u540d\u5730\u5740\u5305\u542b\u4e00\u4e2a\u6216\u4e24\u4e2a&quot;.&quot;\u7b26\u53f7\u3002</li>\n\t<li>\u8f93\u5165\u4e2d\u4efb\u610f\u4e00\u4e2a\u57df\u540d\u7684\u8bbf\u95ee\u6b21\u6570\u90fd\u5c0f\u4e8e<code>10000</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u5b50\u57df\u540d\u8bbf\u95ee\u8ba1\u6570",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "Google",
            "Bloomberg",
            "Pinterest",
            "Intuit",
            "Indeed",
            "Citrix",
            "Roblox"
        ]
    },
    {
        "leetId": "812",
        "link": "largest-triangle-area",
        "title": "Largest Triangle Area",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "55.8%",
        "questionDescription": "<p>You have a list of points in the plane. Return the area of the largest triangle that can be formed by any 3 of the points.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> \r\nThe five points are show in the figure below. The red triangle is the largest.\r\n</pre>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png\" style=\"height:328px; width:400px\" /></p>\r\n\r\n<p><strong>Notes: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>3 &lt;= points.length &lt;= 50</code>.</li>\r\n\t<li>No points will be duplicated.</li>\r\n\t<li>&nbsp;<code>-50 &lt;= points[i][j] &lt;= 50</code>.</li>\r\n\t<li>Answers within&nbsp;<code>10^-6</code>&nbsp;of the true value will be accepted as correct.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u5305\u542b\u591a\u4e2a\u70b9\u7684\u96c6\u5408\uff0c\u4ece\u5176\u4e2d\u53d6\u4e09\u4e2a\u70b9\u7ec4\u6210\u4e09\u89d2\u5f62\uff0c\u8fd4\u56de\u80fd\u7ec4\u6210\u7684\u6700\u5927\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\u8fd9\u4e94\u4e2a\u70b9\u5982\u4e0b\u56fe\u6240\u793a\u3002\u7ec4\u6210\u7684\u6a59\u8272\u4e09\u89d2\u5f62\u662f\u6700\u5927\u7684\uff0c\u9762\u79ef\u4e3a2\u3002\n</pre>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png\" style=\"height:328px; width:400px\" /></p>\n\n<p><strong>\u6ce8\u610f: </strong></p>\n\n<ul>\n\t<li><code>3 &lt;= points.length &lt;= 50</code>.</li>\n\t<li>\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u70b9\u3002</li>\n\t<li>&nbsp;<code>-50 &lt;= points[i][j] &lt;= 50</code>.</li>\n\t<li>\u7ed3\u679c\u8bef\u5dee\u503c\u5728&nbsp;<code>10^-6</code>&nbsp;\u4ee5\u5185\u90fd\u8ba4\u4e3a\u662f\u6b63\u786e\u7b54\u6848\u3002</li>\n</ul>\n",
        "titleZh": "\u6700\u5927\u4e09\u89d2\u5f62\u9762\u79ef",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "813",
        "link": "largest-sum-of-averages",
        "title": "Largest Sum of Averages",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "37.5%",
        "questionDescription": "<p>We partition a row of numbers <code>A</code>&nbsp;into at most <code>K</code> adjacent (non-empty) groups, then our score is the sum of the average of each group. What is the largest score we can achieve?</p>\r\n\r\n<p>Note that our partition must use every number in A, and that scores are not necessarily integers.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> \r\nA = [9,1,2,3,9]\r\nK = 3\r\n<strong>Output:</strong> 20\r\n<strong>Explanation:</strong> \r\nThe best choice is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\r\nWe could have also partitioned A into [9, 1], [2], [3, 9], for example.\r\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= A.length &lt;= 100</code>.</li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 10000</code>.</li>\r\n\t<li><code>1 &lt;= K &lt;= A.length</code>.</li>\r\n\t<li>Answers within <code>10^-6</code> of the correct answer will be accepted as correct.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u5c06\u7ed9\u5b9a\u7684\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u5206\u6210&nbsp;<code>K</code>&nbsp;\u4e2a\u76f8\u90bb\u7684\u975e\u7a7a\u5b50\u6570\u7ec4 \uff0c\u6211\u4eec\u7684\u5206\u6570\u7531\u6bcf\u4e2a\u5b50\u6570\u7ec4\u5185\u7684\u5e73\u5747\u503c\u7684\u603b\u548c\u6784\u6210\u3002\u8ba1\u7b97\u6211\u4eec\u6240\u80fd\u5f97\u5230\u7684\u6700\u5927\u5206\u6570\u662f\u591a\u5c11\u3002</p>\n\n<p>\u6ce8\u610f\u6211\u4eec\u5fc5\u987b\u4f7f\u7528 A \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\u8fdb\u884c\u5206\u7ec4\uff0c\u5e76\u4e14\u5206\u6570\u4e0d\u4e00\u5b9a\u9700\u8981\u662f\u6574\u6570\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> \nA = [9,1,2,3,9]\nK = 3\n<strong>\u8f93\u51fa:</strong> 20\n<strong>\u89e3\u91ca:</strong> \nA \u7684\u6700\u4f18\u5206\u7ec4\u662f[9], [1, 2, 3], [9]. \u5f97\u5230\u7684\u5206\u6570\u662f 9 + (1 + 2 + 3) / 3 + 9 = 20.\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a A \u5206\u6210[9, 1], [2], [3, 9].\n\u8fd9\u6837\u7684\u5206\u7ec4\u5f97\u5230\u7684\u5206\u6570\u4e3a 5 + 2 + 6 = 13, \u4f46\u4e0d\u662f\u6700\u5927\u503c.\n</pre>\n\n<p><strong>\u8bf4\u660e: </strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 100</code>.</li>\n\t<li><code>1 &lt;= A[i] &lt;= 10000</code>.</li>\n\t<li><code>1 &lt;= K &lt;= A.length</code>.</li>\n\t<li>\u7b54\u6848\u8bef\u5dee\u5728&nbsp;<code>10^-6</code>&nbsp;\u5185\u88ab\u89c6\u4e3a\u662f\u6b63\u786e\u7684\u3002</li>\n</ul>\n",
        "titleZh": "\u6700\u5927\u5e73\u5747\u503c\u548c\u7684\u5206\u7ec4",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Baidu"
        ]
    },
    {
        "leetId": "814",
        "link": "binary-tree-pruning",
        "title": "Binary Tree Pruning",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "68.4%",
        "questionDescription": "<p>We are given the head node <code>root</code>&nbsp;of a binary tree, where additionally every node&#39;s value is either a 0 or a 1.</p>\r\n\r\n<p>Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.</p>\r\n\r\n<p>(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> [1,null,0,0,1]\r\n<strong>Output: </strong>[1,null,0,null,1]\r\n \r\n<strong>Explanation:</strong> \r\nOnly the red nodes satisfy the property &quot;every subtree not containing a 1&quot;.\r\nThe diagram on the right represents the answer.\r\n\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png\" style=\"width:450px\" />\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> [1,0,1,0,0,0,1]\r\n<strong>Output: </strong>[1,null,1,null,1]\r\n\r\n\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png\" style=\"width:450px\" />\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 3:</strong>\r\n<strong>Input:</strong> [1,1,0,1,1,0,1,0]\r\n<strong>Output: </strong>[1,1,0,1,1,null,1]\r\n\r\n\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png\" style=\"width:450px\" />\r\n</pre>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li>The binary tree&nbsp;will&nbsp;have&nbsp;at&nbsp;most <code>100 nodes</code>.</li>\r\n\t<li>The value of each node will only be <code>0</code> or <code>1</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e8c\u53c9\u6811\u6839\u7ed3\u70b9&nbsp;<code>root</code>&nbsp;\uff0c\u6b64\u5916\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u8981\u4e48\u662f 0\uff0c\u8981\u4e48\u662f 1\u3002</p>\n\n<p>\u8fd4\u56de\u79fb\u9664\u4e86\u6240\u6709\u4e0d\u5305\u542b 1 \u7684\u5b50\u6811\u7684\u539f\u4e8c\u53c9\u6811\u3002</p>\n\n<p>( \u8282\u70b9 X \u7684\u5b50\u6811\u4e3a X \u672c\u8eab\uff0c\u4ee5\u53ca\u6240\u6709 X \u7684\u540e\u4ee3\u3002)</p>\n\n<pre>\n<strong>\u793a\u4f8b1:</strong>\n<strong>\u8f93\u5165:</strong> [1,null,0,0,1]\n<strong>\u8f93\u51fa: </strong>[1,null,0,null,1]\n \n<strong>\u89e3\u91ca:</strong> \n\u53ea\u6709\u7ea2\u8272\u8282\u70b9\u6ee1\u8db3\u6761\u4ef6&ldquo;\u6240\u6709\u4e0d\u5305\u542b 1 \u7684\u5b50\u6811&rdquo;\u3002\n\u53f3\u56fe\u4e3a\u8fd4\u56de\u7684\u7b54\u6848\u3002\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png\" style=\"width:450px\" />\n</pre>\n\n<pre>\n<strong>\u793a\u4f8b2:</strong>\n<strong>\u8f93\u5165:</strong> [1,0,1,0,0,0,1]\n<strong>\u8f93\u51fa: </strong>[1,null,1,null,1]\n\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png\" style=\"width:450px\" />\n</pre>\n\n<pre>\n<strong>\u793a\u4f8b3:</strong>\n<strong>\u8f93\u5165:</strong> [1,1,0,1,1,0,1,0]\n<strong>\u8f93\u51fa: </strong>[1,1,0,1,1,null,1]\n\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png\" style=\"width:450px\" />\n</pre>\n\n<p><strong>\u8bf4\u660e: </strong></p>\n\n<ul>\n\t<li>\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\u6700\u591a\u6709&nbsp;<code>100</code>&nbsp;\u4e2a\u8282\u70b9\u3002</li>\n\t<li>\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u53ea\u4f1a\u4e3a&nbsp;<code>0</code> \u6216&nbsp;<code>1</code>&nbsp;\u3002</li>\n</ul>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u526a\u679d",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Adobe",
            "Twitter",
            "Hulu",
            "Capital One"
        ]
    },
    {
        "leetId": "815",
        "link": "bus-routes",
        "title": "Bus Routes",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "30.8%",
        "questionDescription": "<p>We have a list of bus routes. Each <code>routes[i]</code> is a bus route that the i-th bus&nbsp;repeats forever. For example if <code>routes[0] = [1, 5, 7]</code>, this means that the first&nbsp;bus (0-th indexed) travels in the sequence 1-&gt;5-&gt;7-&gt;1-&gt;5-&gt;7-&gt;1-&gt;... forever.</p>\r\n\r\n<p>We start at bus stop <code>S</code> (initially not on a bus), and we want to go to bus stop <code>T</code>. Travelling by buses only, what is the least number of buses we must take to reach our destination? Return -1 if it is not possible.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> \r\nroutes = [[1, 2, 7], [3, 6, 7]]\r\nS = 1\r\nT = 6\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> \r\nThe best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\r\n</pre>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= routes.length &lt;= 500</code>.</li>\r\n\t<li><code>1 &lt;= routes[i].length &lt;= 500</code>.</li>\r\n\t<li><code>0 &lt;= routes[i][j] &lt; 10 ^ 6</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u6709\u4e00\u7cfb\u5217\u516c\u4ea4\u8def\u7ebf\u3002\u6bcf\u4e00\u6761\u8def\u7ebf <code>routes[i]</code>&nbsp;\u4e0a\u90fd\u6709\u4e00\u8f86\u516c\u4ea4\u8f66\u5728\u4e0a\u9762\u5faa\u73af\u884c\u9a76\u3002\u4f8b\u5982\uff0c\u6709\u4e00\u6761\u8def\u7ebf&nbsp;<code>routes[0] = [1, 5, 7]</code>\uff0c\u8868\u793a\u7b2c\u4e00\u8f86 (\u4e0b\u6807\u4e3a0) \u516c\u4ea4\u8f66\u4f1a\u4e00\u76f4\u6309\u7167&nbsp;1-&gt;5-&gt;7-&gt;1-&gt;5-&gt;7-&gt;1-&gt;...&nbsp;\u7684\u8f66\u7ad9\u8def\u7ebf\u884c\u9a76\u3002</p>\n\n<p>\u5047\u8bbe\u6211\u4eec\u4ece&nbsp;<code>S</code>&nbsp;\u8f66\u7ad9\u5f00\u59cb\uff08\u521d\u59cb\u65f6\u4e0d\u5728\u516c\u4ea4\u8f66\u4e0a\uff09\uff0c\u8981\u53bb\u5f80&nbsp;<code>T</code>&nbsp;\u7ad9\u3002 \u671f\u95f4\u4ec5\u53ef\u4e58\u5750\u516c\u4ea4\u8f66\uff0c\u6c42\u51fa\u6700\u5c11\u4e58\u5750\u7684\u516c\u4ea4\u8f66\u6570\u91cf\u3002\u8fd4\u56de -1 \u8868\u793a\u4e0d\u53ef\u80fd\u5230\u8fbe\u7ec8\u70b9\u8f66\u7ad9\u3002</p>\n\n<pre>\n<strong>\u793a\u4f8b:</strong>\n<strong>\u8f93\u5165:</strong> \nroutes = [[1, 2, 7], [3, 6, 7]]\nS = 1\nT = 6\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\u6700\u4f18\u7b56\u7565\u662f\u5148\u4e58\u5750\u7b2c\u4e00\u8f86\u516c\u4ea4\u8f66\u5230\u8fbe\u8f66\u7ad9 7, \u7136\u540e\u6362\u4e58\u7b2c\u4e8c\u8f86\u516c\u4ea4\u8f66\u5230\u8f66\u7ad9 6\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e: </strong></p>\n\n<ul>\n\t<li><code>1 &lt;= routes.length &lt;= 500</code>.</li>\n\t<li><code>1 &lt;= routes[i].length &lt;= 500</code>.</li>\n\t<li><code>0 &lt;= routes[i][j] &lt; 10 ^ 6</code>.</li>\n</ul>\n",
        "titleZh": "\u516c\u4ea4\u8def\u7ebf",
        "tags": [
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Uber",
            "Airbnb"
        ]
    },
    {
        "leetId": "816",
        "link": "ambiguous-coordinates",
        "title": "Ambiguous Coordinates",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "42.6%",
        "questionDescription": "<p>We had some 2-dimensional coordinates, like <code>&quot;(1, 3)&quot;</code> or <code>&quot;(2, 0.5)&quot;</code>.&nbsp; Then, we removed&nbsp;all commas, decimal points, and spaces, and ended up with the string&nbsp;<code>S</code>.&nbsp; Return a list of strings representing&nbsp;all possibilities for what our original coordinates could have been.</p>\r\n\r\n<p>Our original representation never had extraneous zeroes, so we never started with numbers like &quot;00&quot;, &quot;0.0&quot;, &quot;0.00&quot;, &quot;1.0&quot;, &quot;001&quot;, &quot;00.01&quot;, or any other number that can be represented with&nbsp;less digits.&nbsp; Also, a decimal point within a number never occurs without at least one digit occuring before it, so we never started with numbers like &quot;.1&quot;.</p>\r\n\r\n<p>The final answer list can be returned in any order.&nbsp; Also note that all coordinates in the final answer&nbsp;have exactly one space between them (occurring after the comma.)</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> &quot;(123)&quot;\r\n<strong>Output:</strong> [&quot;(1, 23)&quot;, &quot;(12, 3)&quot;, &quot;(1.2, 3)&quot;, &quot;(1, 2.3)&quot;]\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> &quot;(00011)&quot;\r\n<strong>Output:</strong> &nbsp;[&quot;(0.001, 1)&quot;, &quot;(0, 0.011)&quot;]\r\n<strong>Explanation:</strong> \r\n0.0, 00, 0001 or 00.01 are not allowed.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 3:</strong>\r\n<strong>Input:</strong> &quot;(0123)&quot;\r\n<strong>Output:</strong> [&quot;(0, 123)&quot;, &quot;(0, 12.3)&quot;, &quot;(0, 1.23)&quot;, &quot;(0.1, 23)&quot;, &quot;(0.1, 2.3)&quot;, &quot;(0.12, 3)&quot;]\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 4:</strong>\r\n<strong>Input:</strong> &quot;(100)&quot;\r\n<strong>Output:</strong> [(10, 0)]\r\n<strong>Explanation:</strong> \r\n1.0 is not allowed.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>4 &lt;= S.length &lt;= 12</code>.</li>\r\n\t<li><code>S[0]</code> = &quot;(&quot;, <code>S[S.length - 1]</code> = &quot;)&quot;, and the other elements in <code>S</code> are digits.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u6709\u4e00\u4e9b\u4e8c\u7ef4\u5750\u6807\uff0c\u5982&nbsp;<code>&quot;(1, 3)&quot;</code>&nbsp;\u6216&nbsp;<code>&quot;(2, 0.5)&quot;</code>\uff0c\u7136\u540e\u6211\u4eec\u79fb\u9664\u6240\u6709\u9017\u53f7\uff0c\u5c0f\u6570\u70b9\u548c\u7a7a\u683c\uff0c\u5f97\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32<code>S</code>\u3002\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\u3002</p>\n\n<p>\u539f\u59cb\u7684\u5750\u6807\u8868\u793a\u6cd5\u4e0d\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u96f6\uff0c\u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0\u7c7b\u4f3c\u4e8e&quot;00&quot;, &quot;0.0&quot;, &quot;0.00&quot;, &quot;1.0&quot;, &quot;001&quot;, &quot;00.01&quot;\u6216\u4e00\u4e9b\u5176\u4ed6\u66f4\u5c0f\u7684\u6570\u6765\u8868\u793a\u5750\u6807\u3002\u6b64\u5916\uff0c\u4e00\u4e2a\u5c0f\u6570\u70b9\u524d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u4e5f\u4e0d\u4f1a\u51fa\u73b0&ldquo;.1&rdquo;\u5f62\u5f0f\u7684\u6570\u5b57\u3002</p>\n\n<p>\u6700\u540e\u8fd4\u56de\u7684\u5217\u8868\u53ef\u4ee5\u662f\u4efb\u610f\u987a\u5e8f\u7684\u3002\u800c\u4e14\u6ce8\u610f\u8fd4\u56de\u7684\u4e24\u4e2a\u6570\u5b57\u4e2d\u95f4\uff08\u9017\u53f7\u4e4b\u540e\uff09\u90fd\u6709\u4e00\u4e2a\u7a7a\u683c\u3002</p>\n\n<p>&nbsp;</p>\n\n<pre>\n<strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> &quot;(123)&quot;\n<strong>\u8f93\u51fa:</strong> [&quot;(1, 23)&quot;, &quot;(12, 3)&quot;, &quot;(1.2, 3)&quot;, &quot;(1, 2.3)&quot;]\n</pre>\n\n<pre>\n<strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> &quot;(00011)&quot;\n<strong>\u8f93\u51fa:</strong> &nbsp;[&quot;(0.001, 1)&quot;, &quot;(0, 0.011)&quot;]\n<strong>\u89e3\u91ca:</strong> \n0.0, 00, 0001 \u6216 00.01 \u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\n</pre>\n\n<pre>\n<strong>\u793a\u4f8b 3:</strong>\n<strong>\u8f93\u5165:</strong> &quot;(0123)&quot;\n<strong>\u8f93\u51fa:</strong> [&quot;(0, 123)&quot;, &quot;(0, 12.3)&quot;, &quot;(0, 1.23)&quot;, &quot;(0.1, 23)&quot;, &quot;(0.1, 2.3)&quot;, &quot;(0.12, 3)&quot;]\n</pre>\n\n<pre>\n<strong>\u793a\u4f8b 4:</strong>\n<strong>\u8f93\u5165:</strong> &quot;(100)&quot;\n<strong>\u8f93\u51fa:</strong> [(10, 0)]\n<strong>\u89e3\u91ca:</strong> \n1.0 \u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a: </strong></p>\n\n<ul>\n\t<li><code>4 &lt;= S.length &lt;= 12</code>.</li>\n\t<li><code>S[0]</code> = &quot;(&quot;, <code>S[S.length - 1]</code> = &quot;)&quot;, \u4e14\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u4e2d\u7684\u5176\u4ed6\u5143\u7d20\u90fd\u662f\u6570\u5b57\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u6a21\u7cca\u5750\u6807",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "817",
        "link": "linked-list-components",
        "title": "Linked List Components",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "50.2%",
        "questionDescription": "<p>We are given&nbsp;<code>head</code>,&nbsp;the head node of a linked list containing&nbsp;<strong>unique integer values</strong>.</p>\r\n\r\n<p>We are also given the list&nbsp;<code>G</code>, a subset of the values in the linked list.</p>\r\n\r\n<p>Return the number of connected components in <code>G</code>, where two values are connected if they appear consecutively in the linked list.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\nhead: 0-&gt;1-&gt;2-&gt;3\r\nG = [0, 1, 3]\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> \r\n0 and 1 are connected, so [0, 1] and [3] are the two connected components.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\nhead: 0-&gt;1-&gt;2-&gt;3-&gt;4\r\nG = [0, 3, 1, 4]\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> \r\n0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.\r\n</pre>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li>If&nbsp;<code>N</code>&nbsp;is the&nbsp;length of the linked list given by&nbsp;<code>head</code>,&nbsp;<code>1 &lt;= N &lt;= 10000</code>.</li>\r\n\t<li>The value of each node in the linked list will be in the range<code> [0, N - 1]</code>.</li>\r\n\t<li><code>1 &lt;= G.length &lt;= 10000</code>.</li>\r\n\t<li><code>G</code> is a subset of all values in the linked list.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff08\u94fe\u8868\u7ed3\u70b9\u5305\u542b\u4e00\u4e2a\u6574\u578b\u503c\uff09\u7684\u5934\u7ed3\u70b9&nbsp;<code>head</code>\u3002</p>\n\n<p>\u540c\u65f6\u7ed9\u5b9a\u5217\u8868&nbsp;<code>G</code>\uff0c\u8be5\u5217\u8868\u662f\u4e0a\u8ff0\u94fe\u8868\u4e2d\u6574\u578b\u503c\u7684\u4e00\u4e2a\u5b50\u96c6\u3002</p>\n\n<p>\u8fd4\u56de\u5217\u8868&nbsp;<code>G</code>&nbsp;\u4e2d\u7ec4\u4ef6\u7684\u4e2a\u6570\uff0c\u8fd9\u91cc\u5bf9\u7ec4\u4ef6\u7684\u5b9a\u4e49\u4e3a\uff1a\u94fe\u8868\u4e2d\u4e00\u6bb5\u6700\u957f\u8fde\u7eed\u7ed3\u70b9\u7684\u503c\uff08\u8be5\u503c\u5fc5\u987b\u5728\u5217\u8868&nbsp;<code>G</code>&nbsp;\u4e2d\uff09\u6784\u6210\u7684\u96c6\u5408\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nhead: 0-&gt;1-&gt;2-&gt;3\nG = [0, 1, 3]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\u94fe\u8868\u4e2d,0 \u548c 1 \u662f\u76f8\u8fde\u63a5\u7684\uff0c\u4e14 G \u4e2d\u4e0d\u5305\u542b 2\uff0c\u6240\u4ee5 [0, 1] \u662f G \u7684\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u540c\u7406 [3] \u4e5f\u662f\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u6545\u8fd4\u56de 2\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> \nhead: 0-&gt;1-&gt;2-&gt;3-&gt;4\nG = [0, 3, 1, 4]\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\u94fe\u8868\u4e2d\uff0c0 \u548c 1 \u662f\u76f8\u8fde\u63a5\u7684\uff0c3 \u548c 4 \u662f\u76f8\u8fde\u63a5\u7684\uff0c\u6240\u4ee5 [0, 1] \u548c [3, 4] \u662f\u4e24\u4e2a\u7ec4\u4ef6\uff0c\u6545\u8fd4\u56de 2\u3002</pre>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ul>\n\t<li>\u5982\u679c&nbsp;<code>N</code>&nbsp;\u662f\u7ed9\u5b9a\u94fe\u8868&nbsp;<code>head</code>&nbsp;\u7684\u957f\u5ea6\uff0c<code>1 &lt;= N &lt;= 10000</code>\u3002</li>\n\t<li>\u94fe\u8868\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u6240\u5728\u8303\u56f4\u4e3a&nbsp;<code>[0, N - 1]</code>\u3002</li>\n\t<li><code>1 &lt;= G.length &lt;= 10000</code></li>\n\t<li><code>G</code> \u662f\u94fe\u8868\u4e2d\u6240\u6709\u7ed3\u70b9\u7684\u503c\u7684\u4e00\u4e2a\u5b50\u96c6.</li>\n</ul>\n",
        "titleZh": "\u94fe\u8868\u7ec4\u4ef6",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "818",
        "link": "race-car",
        "title": "Race Car",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "23.7%",
        "questionDescription": "<p>Your car starts at position 0 and speed +1 on an infinite number line.&nbsp; (Your car can go into negative positions.)</p>\r\n\r\n<p>Your car drives automatically according to a sequence of instructions A (accelerate) and R (reverse).</p>\r\n\r\n<p>When you get an instruction &quot;A&quot;, your car does the following:&nbsp;<code>position += speed, speed *= 2</code>.</p>\r\n\r\n<p>When you get an instruction &quot;R&quot;, your car does the following: if your speed is positive then&nbsp;<code>speed = -1</code>&nbsp;, otherwise&nbsp;<code>speed = 1</code>.&nbsp; (Your position stays the same.)</p>\r\n\r\n<p>For example, after commands &quot;AAR&quot;, your car goes to positions 0-&gt;1-&gt;3-&gt;3, and your speed goes to 1-&gt;2-&gt;4-&gt;-1.</p>\r\n\r\n<p>Now for some target position, say the <strong>length</strong> of the shortest sequence of instructions to get there.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> \r\ntarget = 3\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> \r\nThe shortest instruction sequence is &quot;AA&quot;.\r\nYour position goes from 0-&gt;1-&gt;3.\r\n</pre>\r\n\r\n<pre>\r\n<strong>Example 2:</strong>\r\n<strong>Input:</strong> \r\ntarget = 6\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> \r\nThe shortest instruction sequence is &quot;AAARA&quot;.\r\nYour position goes from 0-&gt;1-&gt;3-&gt;7-&gt;7-&gt;6.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= target &lt;= 10000</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u4f60\u7684\u8d5b\u8f66\u8d77\u59cb\u505c\u7559\u5728\u4f4d\u7f6e 0\uff0c\u901f\u5ea6\u4e3a +1\uff0c\u6b63\u884c\u9a76\u5728\u4e00\u4e2a\u65e0\u9650\u957f\u7684\u6570\u8f74\u4e0a\u3002\uff08\u8f66\u4e5f\u53ef\u4ee5\u5411\u8d1f\u6570\u65b9\u5411\u884c\u9a76\u3002\uff09</p>\n\n<p>\u4f60\u7684\u8f66\u4f1a\u6839\u636e\u4e00\u7cfb\u5217\u7531 A\uff08\u52a0\u901f\uff09\u548c R\uff08\u5012\u8f66\uff09\u7ec4\u6210\u7684\u6307\u4ee4\u8fdb\u884c\u81ea\u52a8\u9a7e\u9a76&nbsp;\u3002</p>\n\n<p>\u5f53\u8f66\u5f97\u5230\u6307\u4ee4 &quot;A&quot; \u65f6, \u5c06\u4f1a\u505a\u51fa\u4ee5\u4e0b\u64cd\u4f5c\uff1a&nbsp;<code>position += speed, speed *= 2</code>\u3002</p>\n\n<p>\u5f53\u8f66\u5f97\u5230\u6307\u4ee4 &quot;R&quot; \u65f6, \u5c06\u4f1a\u505a\u51fa\u4ee5\u4e0b\u64cd\u4f5c\uff1a\u5982\u679c\u5f53\u524d\u901f\u5ea6\u662f\u6b63\u6570\uff0c\u5219\u5c06\u8f66\u901f\u8c03\u6574\u4e3a&nbsp;<code>speed = -1</code>&nbsp;\uff1b\u5426\u5219\u5c06\u8f66\u901f\u8c03\u6574\u4e3a&nbsp;<code>speed = 1</code>\u3002&nbsp; (\u5f53\u524d\u6240\u5904\u4f4d\u7f6e\u4e0d\u53d8\u3002)</p>\n\n<p>\u4f8b\u5982\uff0c\u5f53\u5f97\u5230\u4e00\u7cfb\u5217\u6307\u4ee4 &quot;AAR&quot; \u540e, \u4f60\u7684\u8f66\u5c06\u4f1a\u8d70\u8fc7\u4f4d\u7f6e 0-&gt;1-&gt;3-&gt;3\uff0c\u5e76\u4e14\u901f\u5ea6\u53d8\u5316\u4e3a&nbsp;1-&gt;2-&gt;4-&gt;-1\u3002</p>\n\n<p>\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u76ee\u6807\u4f4d\u7f6e\uff0c\u8bf7\u7ed9\u51fa\u80fd\u591f\u5230\u8fbe\u76ee\u6807\u4f4d\u7f6e\u7684\u6700\u77ed\u6307\u4ee4\u5217\u8868\u7684<strong>\u957f\u5ea6</strong>\u3002</p>\n\n<pre><strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong> \ntarget = 3\n<strong>\u8f93\u51fa:</strong> 2\n<strong>\u89e3\u91ca:</strong> \n\u6700\u77ed\u6307\u4ee4\u5217\u8868\u4e3a &quot;AA&quot;\n\u4f4d\u7f6e\u53d8\u5316\u4e3a 0-&gt;1-&gt;3\n</pre>\n\n<pre><strong>\u793a\u4f8b 2:</strong>\n<strong>\u8f93\u5165:</strong> \ntarget = 6\n<strong>\u8f93\u51fa:</strong> 5\n<strong>\u89e3\u91ca:</strong> \n\u6700\u77ed\u6307\u4ee4\u5217\u8868\u4e3a &quot;AAARA&quot;\n\u4f4d\u7f6e\u53d8\u5316\u4e3a 0-&gt;1-&gt;3-&gt;7-&gt;7-&gt;6\n</pre>\n\n<p><strong>\u8bf4\u660e: </strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target\uff08\u76ee\u6807\u4f4d\u7f6e\uff09 &lt;= 10000</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u8d5b\u8f66",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "819",
        "link": "most-common-word",
        "title": "Most Common Word",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "33.2%",
        "questionDescription": "<p>Given a paragraph&nbsp;and a list of banned words, return the most frequent word that is not in the list of banned words.&nbsp; It is guaranteed there is at least one word that isn&#39;t banned, and that the answer is unique.</p>\r\n\r\n<p>Words in the list of banned words are given in lowercase, and free of punctuation.&nbsp; Words in the paragraph are not case sensitive.&nbsp; The answer is in lowercase.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\nparagraph = &quot;Bob hit a ball, the hit BALL flew far after it was hit.&quot;\r\nbanned = [&quot;hit&quot;]\r\n<strong>Output:</strong> &quot;ball&quot;\r\n<strong>Explanation:</strong> \r\n&quot;hit&quot; occurs 3 times, but it is a banned word.\r\n&quot;ball&quot; occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \r\nNote that words in the paragraph are not case sensitive,\r\nthat punctuation is ignored (even if adjacent to words, such as &quot;ball,&quot;), \r\nand that &quot;hit&quot; isn&#39;t the answer even though it occurs more because it is banned.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= paragraph.length &lt;= 1000</code>.</li>\r\n\t<li><code>1 &lt;= banned.length &lt;= 100</code>.</li>\r\n\t<li><code>1 &lt;= banned[i].length &lt;= 10</code>.</li>\r\n\t<li>The answer is unique, and written in lowercase (even if its occurrences in <code>paragraph</code>&nbsp;may have&nbsp;uppercase symbols, and even if it is a proper noun.)</li>\r\n\t<li><code>paragraph</code> only consists of letters, spaces, or the punctuation symbols <code>!?&#39;,;.</code></li>\r\n\t<li>There are no hyphens or hyphenated words.</li>\r\n\t<li>Words only consist of letters, never apostrophes or other punctuation symbols.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6bb5\u843d (paragraph) \u548c\u4e00\u4e2a\u7981\u7528\u5355\u8bcd\u5217\u8868 (banned)\u3002\u8fd4\u56de\u51fa\u73b0\u6b21\u6570\u6700\u591a\uff0c\u540c\u65f6\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u3002\u9898\u76ee\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u4e2a\u8bcd\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\uff0c\u800c\u4e14\u7b54\u6848\u552f\u4e00\u3002</p>\n\n<p>\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u7528\u5c0f\u5199\u5b57\u6bcd\u8868\u793a\uff0c\u4e0d\u542b\u6807\u70b9\u7b26\u53f7\u3002\u6bb5\u843d\u4e2d\u7684\u5355\u8bcd\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u3002\u7b54\u6848\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> \nparagraph = &quot;Bob hit a ball, the hit BALL flew far after it was hit.&quot;\nbanned = [&quot;hit&quot;]\n<strong>\u8f93\u51fa:</strong> &quot;ball&quot;\n<strong>\u89e3\u91ca:</strong> \n&quot;hit&quot; \u51fa\u73b0\u4e863\u6b21\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u7981\u7528\u7684\u5355\u8bcd\u3002\n&quot;ball&quot; \u51fa\u73b0\u4e862\u6b21 (\u540c\u65f6\u6ca1\u6709\u5176\u4ed6\u5355\u8bcd\u51fa\u73b02\u6b21)\uff0c\u6240\u4ee5\u5b83\u662f\u6bb5\u843d\u91cc\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\uff0c\u4e14\u4e0d\u5728\u7981\u7528\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u3002 \n\u6ce8\u610f\uff0c\u6240\u6709\u8fd9\u4e9b\u5355\u8bcd\u5728\u6bb5\u843d\u91cc\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u6807\u70b9\u7b26\u53f7\u9700\u8981\u5ffd\u7565\uff08\u5373\u4f7f\u662f\u7d27\u6328\u7740\u5355\u8bcd\u4e5f\u5ffd\u7565\uff0c \u6bd4\u5982 &quot;ball,&quot;\uff09\uff0c \n&quot;hit&quot;\u4e0d\u662f\u6700\u7ec8\u7684\u7b54\u6848\uff0c\u867d\u7136\u5b83\u51fa\u73b0\u6b21\u6570\u66f4\u591a\uff0c\u4f46\u5b83\u5728\u7981\u7528\u5355\u8bcd\u5217\u8868\u4e2d\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= \u6bb5\u843d\u957f\u5ea6 &lt;= 1000</code>.</li>\n\t<li><code>1 &lt;= \u7981\u7528\u5355\u8bcd\u4e2a\u6570 &lt;= 100</code>.</li>\n\t<li><code>1 &lt;= \u7981\u7528\u5355\u8bcd\u957f\u5ea6 &lt;= 10</code>.</li>\n\t<li>\u7b54\u6848\u662f\u552f\u4e00\u7684, \u4e14\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd&nbsp;(\u5373\u4f7f\u5728 <code>paragraph</code> \u91cc\u662f\u5927\u5199\u7684\uff0c\u5373\u4f7f\u662f\u4e00\u4e9b\u7279\u5b9a\u7684\u540d\u8bcd\uff0c\u7b54\u6848\u90fd\u662f\u5c0f\u5199\u7684\u3002)</li>\n\t<li><code>paragraph</code>&nbsp;\u53ea\u5305\u542b\u5b57\u6bcd\u3001\u7a7a\u683c\u548c\u4e0b\u5217\u6807\u70b9\u7b26\u53f7<code>!?&#39;,;.</code></li>\n\t<li>\u4e0d\u5b58\u5728\u6ca1\u6709\u8fde\u5b57\u7b26\u6216\u8005\u5e26\u6709\u8fde\u5b57\u7b26\u7684\u5355\u8bcd\u3002</li>\n\t<li>\u5355\u8bcd\u91cc\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u4e0d\u4f1a\u51fa\u73b0\u7701\u7565\u53f7\u6216\u8005\u5176\u4ed6\u6807\u70b9\u7b26\u53f7\u3002</li>\n</ul>\n",
        "titleZh": "\u6700\u5e38\u89c1\u7684\u5355\u8bcd",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft"
        ]
    },
    {
        "leetId": "820",
        "link": "short-encoding-of-words",
        "title": "Short Encoding of Words",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "42.0%",
        "questionDescription": "<p>Given a list of words, we may encode it by writing a reference string <code>S</code> and a list of indexes <code>A</code>.</p>\r\n\r\n<p>For example, if the list of words is <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>, we can write it as <code>S = &quot;time#bell#&quot;</code>&nbsp;and <code>indexes = [0, 2, 5]</code>.</p>\r\n\r\n<p>Then for each index, we will recover the word by reading from the reference string from that index until we reach a <code>&quot;#&quot;</code> character.</p>\r\n\r\n<p>What is the length of the shortest reference string S possible that encodes the given words?</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> words = <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>\r\n<strong>Output:</strong> 10\r\n<strong>Explanation:</strong> S = <code>&quot;time#bell#&quot; and indexes = [0, 2, 5</code>].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= words.length&nbsp;&lt;= 2000</code>.</li>\r\n\t<li><code>1 &lt;=&nbsp;words[i].length&nbsp;&lt;= 7</code>.</li>\r\n\t<li>Each word&nbsp;has only&nbsp;lowercase letters.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u8bcd\u5217\u8868\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u5217\u8868\u7f16\u7801\u6210\u4e00\u4e2a\u7d22\u5f15\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u4e0e\u4e00\u4e2a\u7d22\u5f15\u5217\u8868 <code>A</code>\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5982\u679c\u8fd9\u4e2a\u5217\u8868\u662f <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u5176\u8868\u793a\u4e3a <code>S = &quot;time#bell#&quot;</code> \u548c <code>indexes = [0, 2, 5]</code>\u3002</p>\n\n<p>\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7d22\u5f15\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ece\u5b57\u7b26\u4e32 <code>S</code>&nbsp;\u4e2d\u7d22\u5f15\u7684\u4f4d\u7f6e\u5f00\u59cb\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u76f4\u5230 &quot;#&quot; \u7ed3\u675f\uff0c\u6765\u6062\u590d\u6211\u4eec\u4e4b\u524d\u7684\u5355\u8bcd\u5217\u8868\u3002</p>\n\n<p>\u90a3\u4e48\u6210\u529f\u5bf9\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868\u8fdb\u884c\u7f16\u7801\u7684\u6700\u5c0f\u5b57\u7b26\u4e32\u957f\u5ea6\u662f\u591a\u5c11\u5462\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165:</strong> words = <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>\n<strong>\u8f93\u51fa:</strong> 10\n<strong>\u8bf4\u660e:</strong> S = <code>&quot;time#bell#&quot; \uff0c indexes = [0, 2, 5</code>] \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= words.length&nbsp;&lt;= 2000</code></li>\n\t<li><code>1 &lt;=&nbsp;words[i].length&nbsp;&lt;= 7</code></li>\n\t<li>\u6bcf\u4e2a\u5355\u8bcd\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd \u3002</li>\n</ol>\n",
        "titleZh": "\u5355\u8bcd\u7684\u538b\u7f29\u7f16\u7801",
        "tags": []
    },
    {
        "leetId": "821",
        "link": "shortest-distance-to-a-character",
        "title": "Shortest Distance to a Character",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "62.6%",
        "questionDescription": "<p>Given a string <code>S</code>&nbsp;and a character <code>C</code>, return an array of integers representing the shortest distance from the character <code>C</code> in the string.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> S = &quot;loveleetcode&quot;, C = &#39;e&#39;\r\n<strong>Output:</strong> [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>S</code> string length is&nbsp;in&nbsp;<code>[1, 10000].</code></li>\r\n\t<li><code>C</code>&nbsp;is a single character, and guaranteed to be in string <code>S</code>.</li>\r\n\t<li>All letters in <code>S</code> and <code>C</code> are lowercase.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u548c\u4e00\u4e2a\u5b57\u7b26&nbsp;<code>C</code>\u3002\u8fd4\u56de\u4e00\u4e2a\u4ee3\u8868\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u5230\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u4e2d\u7684\u5b57\u7b26&nbsp;<code>C</code>&nbsp;\u7684\u6700\u77ed\u8ddd\u79bb\u7684\u6570\u7ec4\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> S = &quot;loveleetcode&quot;, C = &#39;e&#39;\n<strong>\u8f93\u51fa:</strong> [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ol>\n\t<li>\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u7684\u957f\u5ea6\u8303\u56f4\u4e3a&nbsp;<code>[1, 10000]</code>\u3002</li>\n\t<li><code>C</code>&nbsp;\u662f\u4e00\u4e2a\u5355\u5b57\u7b26\uff0c\u4e14\u4fdd\u8bc1\u662f\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u91cc\u7684\u5b57\u7b26\u3002</li>\n\t<li><code>S</code>&nbsp;\u548c&nbsp;<code>C</code>&nbsp;\u4e2d\u7684\u6240\u6709\u5b57\u6bcd\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n",
        "titleZh": "\u5b57\u7b26\u7684\u6700\u77ed\u8ddd\u79bb",
        "tags": [],
        "companies": [
            "Bloomberg"
        ]
    },
    {
        "leetId": "822",
        "link": "card-flipping-game",
        "title": "Card Flipping Game",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "40.2%",
        "questionDescription": "<p>On a table are <code>N</code> cards, with a positive integer printed on the front and back of each card (possibly different).</p>\r\n\r\n<p>We flip any number of cards, and after we choose one&nbsp;card.&nbsp;</p>\r\n\r\n<p>If the number <code>X</code> on the back of the chosen&nbsp;card is not on the front of any card, then this number X is good.</p>\r\n\r\n<p>What is the smallest number that is good?&nbsp; If no number is good, output <code>0</code>.</p>\r\n\r\n<p>Here, <code>fronts[i]</code> and <code>backs[i]</code> represent the number on the front and back of card <code>i</code>.&nbsp;</p>\r\n\r\n<p>A&nbsp;flip swaps the front and back numbers, so the value on the front is now on the back and vice versa.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\r\n<strong>Output:</strong> <code>2</code>\r\n<strong>Explanation:</strong> If we flip the second card, the fronts are <code>[1,3,4,4,7]</code> and the backs are <code>[1,2,4,1,3]</code>.\r\nWe choose the second card, which has number 2 on the back, and it isn&#39;t on the front of any card, so <code>2</code> is good.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= fronts.length == backs.length&nbsp;&lt;=&nbsp;1000</code>.</li>\r\n\t<li><code>1 &lt;=&nbsp;fronts[i]&nbsp;&lt;= 2000</code>.</li>\r\n\t<li><code>1 &lt;= backs[i]&nbsp;&lt;= 2000</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5728\u684c\u5b50\u4e0a\u6709 <code>N</code> \u5f20\u5361\u7247\uff0c\u6bcf\u5f20\u5361\u7247\u7684\u6b63\u9762\u548c\u80cc\u9762\u90fd\u5199\u7740\u4e00\u4e2a\u6b63\u6570\uff08\u6b63\u9762\u4e0e\u80cc\u9762\u4e0a\u7684\u6570\u6709\u53ef\u80fd\u4e0d\u4e00\u6837\uff09\u3002</p>\n\n<p>\u6211\u4eec\u53ef\u4ee5\u5148\u7ffb\u8f6c\u4efb\u610f\u5f20\u5361\u7247\uff0c\u7136\u540e\u9009\u62e9\u5176\u4e2d\u4e00\u5f20\u5361\u7247\u3002</p>\n\n<p>\u5982\u679c\u9009\u4e2d\u7684\u90a3\u5f20\u5361\u7247\u80cc\u9762\u7684\u6570\u5b57 <code>X</code> \u4e0e\u4efb\u610f\u4e00\u5f20\u5361\u7247\u7684\u6b63\u9762\u7684\u6570\u5b57\u90fd\u4e0d\u540c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u5b57\u662f\u6211\u4eec\u60f3\u8981\u7684\u6570\u5b57\u3002</p>\n\n<p>\u54ea\u4e2a\u6570\u662f\u8fd9\u4e9b\u60f3\u8981\u7684\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u6570\uff08\u627e\u5230\u8fd9\u4e9b\u6570\u4e2d\u7684\u6700\u5c0f\u503c\uff09\u5462\uff1f\u5982\u679c\u6ca1\u6709\u4e00\u4e2a\u6570\u5b57\u7b26\u5408\u8981\u6c42\u7684\uff0c\u8f93\u51fa 0\u3002</p>\n\n<p>\u5176\u4e2d, <code>fronts[i]</code>&nbsp;\u548c&nbsp;<code>backs[i]</code>&nbsp;\u5206\u522b\u4ee3\u8868\u7b2c&nbsp;<code>i</code>&nbsp;\u5f20\u5361\u7247\u7684\u6b63\u9762\u548c\u80cc\u9762\u7684\u6570\u5b57\u3002</p>\n\n<p>\u5982\u679c\u6211\u4eec\u901a\u8fc7\u7ffb\u8f6c\u5361\u7247\u6765\u4ea4\u6362\u6b63\u9762\u4e0e\u80cc\u9762\u4e0a\u7684\u6570\uff0c\u90a3\u4e48\u5f53\u521d\u5728\u6b63\u9762\u7684\u6570\u5c31\u53d8\u6210\u80cc\u9762\u7684\u6570\uff0c\u80cc\u9762\u7684\u6570\u5c31\u53d8\u6210\u6b63\u9762\u7684\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n<strong>\u8f93\u5165\uff1a</strong>fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\n<strong>\u8f93\u51fa\uff1a</strong><code>2</code>\n<strong>\u89e3\u91ca\uff1a</strong>\u5047\u8bbe\u6211\u4eec\u7ffb\u8f6c\u7b2c\u4e8c\u5f20\u5361\u7247\uff0c\u90a3\u4e48\u5728\u6b63\u9762\u7684\u6570\u53d8\u6210\u4e86 <code>[1,3,4,4,7]</code> \uff0c \u80cc\u9762\u7684\u6570\u53d8\u6210\u4e86 <code>[1,2,4,1,3]\u3002</code>\n\u63a5\u7740\u6211\u4eec\u9009\u62e9\u7b2c\u4e8c\u5f20\u5361\u7247\uff0c\u56e0\u4e3a\u73b0\u5728\u8be5\u5361\u7247\u7684\u80cc\u9762\u7684\u6570\u662f 2\uff0c2 \u4e0e\u4efb\u610f\u5361\u7247\u4e0a\u6b63\u9762\u7684\u6570\u90fd\u4e0d\u540c\uff0c\u6240\u4ee5 2 \u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\u6570\u5b57\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= fronts.length == backs.length&nbsp;&lt;=&nbsp;1000</code></li>\n\t<li><code>1 &lt;=&nbsp;fronts[i]&nbsp;&lt;= 2000</code></li>\n\t<li><code>1 &lt;= backs[i]&nbsp;&lt;= 2000</code></li>\n</ol>\n",
        "titleZh": "\u7ffb\u8f6c\u5361\u7247\u6e38\u620f",
        "tags": []
    },
    {
        "leetId": "823",
        "link": "binary-trees-with-factors",
        "title": "Binary Trees With Factors",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "39.1%",
        "questionDescription": "<p>Given an array of unique integers, each integer is strictly greater than 1.</p>\r\n\r\n<p>We make a binary tree using these integers&nbsp;and each number may be used for any number of times.</p>\r\n\r\n<p>Each non-leaf node&#39;s&nbsp;value should be equal to the product of the values of it&#39;s children.</p>\r\n\r\n<p>How many binary trees can we make?&nbsp; Return the answer <strong>modulo 10 ** 9 + 7</strong>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>A = [2, 4]</code>\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> We can make these trees: <code>[2], [4], [4, 2, 2]</code></pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>A = [2, 4, 5, 10]</code>\r\n<strong>Output:</strong> <code>7</code>\r\n<strong>Explanation:</strong> We can make these trees: <code>[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]</code>.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;=&nbsp;1000</code>.</li>\r\n\t<li><code>2 &lt;=&nbsp;A[i]&nbsp;&lt;=&nbsp;10 ^ 9</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e00\u4e2a\u542b\u6709\u4e0d\u91cd\u590d\u6574\u6570\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6574\u6570\u5747\u5927\u4e8e 1\u3002</p>\n\n<p>\u6211\u4eec\u7528\u8fd9\u4e9b\u6574\u6570\u6765\u6784\u5efa\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u6574\u6570\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u6b21\u6570\u3002</p>\n\n<p>\u5176\u4e2d\uff1a\u6bcf\u4e2a\u975e\u53f6\u7ed3\u70b9\u7684\u503c\u5e94\u7b49\u4e8e\u5b83\u7684\u4e24\u4e2a\u5b50\u7ed3\u70b9\u7684\u503c\u7684\u4e58\u79ef\u3002</p>\n\n<p>\u6ee1\u8db3\u6761\u4ef6\u7684\u4e8c\u53c9\u6811\u4e00\u5171\u6709\u591a\u5c11\u4e2a\uff1f\u8fd4\u56de\u7684\u7ed3\u679c\u5e94<strong>\u6a21\u9664 10 ** 9 + 7</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> <code>A = [2, 4]</code>\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e9b\u4e8c\u53c9\u6811: <code>[2], [4], [4, 2, 2]</code></pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165:</strong> <code>A = [2, 4, 5, 10]</code>\n<strong>\u8f93\u51fa:</strong> <code>7</code>\n<strong>\u89e3\u91ca:</strong> \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e9b\u4e8c\u53c9\u6811: <code>[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]</code>.</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;=&nbsp;1000.</code></li>\n\t<li><code>2 &lt;=&nbsp;A[i]&nbsp;&lt;=&nbsp;10 ^ 9</code>.</li>\n</ol>\n",
        "titleZh": "\u5e26\u56e0\u5b50\u7684\u4e8c\u53c9\u6811",
        "tags": []
    },
    {
        "leetId": "824",
        "link": "goat-latin",
        "title": "Goat Latin",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "54.3%",
        "questionDescription": "<p>A sentence <code>S</code> is given, composed of words separated by spaces. Each word consists of lowercase and uppercase letters only.</p>\r\n\r\n<p>We would like to convert the sentence to &quot;<em>Goat Latin&quot;</em>&nbsp;(a made-up language similar to Pig Latin.)</p>\r\n\r\n<p>The rules of Goat Latin are as follows:</p>\r\n\r\n<ul>\r\n\t<li>If a word begins with a vowel (a, e, i, o, or u), append <code>&quot;ma&quot;</code>&nbsp;to the end of the word.<br />\r\n\tFor example, the word &#39;apple&#39; becomes &#39;applema&#39;.<br />\r\n\t&nbsp;</li>\r\n\t<li>If a word begins with a consonant (i.e. not a vowel), remove the first letter and append it to the end, then add <code>&quot;ma&quot;</code>.<br />\r\n\tFor example, the word <code>&quot;goat&quot;</code>&nbsp;becomes <code>&quot;oatgma&quot;</code>.<br />\r\n\t&nbsp;</li>\r\n\t<li>Add one letter <code>&#39;a&#39;</code>&nbsp;to the end of each word per its word index in the sentence, starting with 1.<br />\r\n\tFor example,&nbsp;the first word gets <code>&quot;a&quot;</code> added to the end, the second word gets <code>&quot;aa&quot;</code> added to the end and so on.</li>\r\n</ul>\r\n\r\n<p>Return the&nbsp;final sentence representing the conversion from <code>S</code>&nbsp;to Goat&nbsp;Latin.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;I speak Goat Latin&quot;\r\n<strong>Output: </strong>&quot;Imaa peaksmaaa oatGmaaaa atinLmaaaaa&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;The quick brown fox jumped over the lazy dog&quot;\r\n<strong>Output: </strong>&quot;heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa&quot;\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Notes:</p>\r\n\r\n<ul>\r\n\t<li><code>S</code> contains only uppercase, lowercase and spaces.&nbsp;Exactly one space between each word.</li>\r\n\t<li><code>1 &lt;= S.length &lt;= 150</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u7a7a\u683c\u5206\u5272\u5355\u8bcd\u7684\u53e5\u5b50&nbsp;<code>S</code>\u3002\u6bcf\u4e2a\u5355\u8bcd\u53ea\u5305\u542b\u5927\u5199\u6216\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n\n<p>\u6211\u4eec\u8981\u5c06\u53e5\u5b50\u8f6c\u6362\u4e3a&nbsp;<em>&ldquo;Goat Latin&rdquo;</em>\uff08\u4e00\u79cd\u7c7b\u4f3c\u4e8e \u732a\u62c9\u4e01\u6587&nbsp;- Pig Latin \u7684\u865a\u6784\u8bed\u8a00\uff09\u3002</p>\n\n<p>\u5c71\u7f8a\u62c9\u4e01\u6587\u7684\u89c4\u5219\u5982\u4e0b\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c\u5355\u8bcd\u4ee5\u5143\u97f3\u5f00\u5934\uff08a, e, i, o, u\uff09\uff0c\u5728\u5355\u8bcd\u540e\u6dfb\u52a0<code>&quot;ma&quot;</code>\u3002<br />\n\t\u4f8b\u5982\uff0c\u5355\u8bcd<code>&quot;apple&quot;</code>\u53d8\u4e3a<code>&quot;applema&quot;</code>\u3002</li>\n\t<br />\n\t<li>\u5982\u679c\u5355\u8bcd\u4ee5\u8f85\u97f3\u5b57\u6bcd\u5f00\u5934\uff08\u5373\u975e\u5143\u97f3\u5b57\u6bcd\uff09\uff0c\u79fb\u9664\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5e76\u5c06\u5b83\u653e\u5230\u672b\u5c3e\uff0c\u4e4b\u540e\u518d\u6dfb\u52a0<code>&quot;ma&quot;</code>\u3002<br />\n\t\u4f8b\u5982\uff0c\u5355\u8bcd<code>&quot;goat&quot;</code>\u53d8\u4e3a<code>&quot;oatgma&quot;</code>\u3002</li>\n\t<br />\n\t<li>\u6839\u636e\u5355\u8bcd\u5728\u53e5\u5b50\u4e2d\u7684\u7d22\u5f15\uff0c\u5728\u5355\u8bcd\u6700\u540e\u6dfb\u52a0\u4e0e\u7d22\u5f15\u76f8\u540c\u6570\u91cf\u7684\u5b57\u6bcd<code>&#39;a&#39;</code>\uff0c\u7d22\u5f15\u4ece1\u5f00\u59cb\u3002<br />\n\t\u4f8b\u5982\uff0c\u5728\u7b2c\u4e00\u4e2a\u5355\u8bcd\u540e\u6dfb\u52a0<code>&quot;a&quot;</code>\uff0c\u5728\u7b2c\u4e8c\u4e2a\u5355\u8bcd\u540e\u6dfb\u52a0<code>&quot;aa&quot;</code>\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</li>\n</ul>\n\n<p>\u8fd4\u56de\u5c06&nbsp;<code>S</code>&nbsp;\u8f6c\u6362\u4e3a\u5c71\u7f8a\u62c9\u4e01\u6587\u540e\u7684\u53e5\u5b50\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>&quot;I speak Goat Latin&quot;\n<strong>\u8f93\u51fa: </strong>&quot;Imaa peaksmaaa oatGmaaaa atinLmaaaaa&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>&quot;The quick brown fox jumped over the lazy dog&quot;\n<strong>\u8f93\u51fa: </strong>&quot;heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa&quot;\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>S</code>&nbsp;\u4e2d\u4ec5\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c\u3002\u5355\u8bcd\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u7a7a\u683c\u3002</li>\n\t<li><code>1 &lt;= S.length &lt;= 150</code>\u3002</li>\n</ul>\n",
        "titleZh": "\u5c71\u7f8a\u62c9\u4e01\u6587",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Facebook"
        ]
    },
    {
        "leetId": "825",
        "link": "friends-of-appropriate-ages",
        "title": "Friends Of Appropriate Ages",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "27.0%",
        "questionDescription": "<p>Some people will make friend requests. The&nbsp;list of their ages is given and&nbsp;<code>ages[i]</code>&nbsp;is the age of the&nbsp;ith person.&nbsp;</p>\r\n\r\n<p>Person A will NOT friend request person B (B != A) if any of the following conditions are true:</p>\r\n\r\n<ul>\r\n\t<li><code>age[B]&nbsp;&lt;= 0.5 * age[A]&nbsp;+ 7</code></li>\r\n\t<li><code>age[B]&nbsp;&gt; age[A]</code></li>\r\n\t<li><code>age[B]&nbsp;&gt; 100 &amp;&amp;&nbsp;age[A]&nbsp;&lt; 100</code></li>\r\n</ul>\r\n\r\n<p>Otherwise, A will friend request B.</p>\r\n\r\n<p>Note that if&nbsp;A requests B, B does not necessarily request A.&nbsp; Also, people will not friend request themselves.</p>\r\n\r\n<p>How many total friend requests are made?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[16,16]\r\n<strong>Output: </strong>2\r\n<strong>Explanation: </strong>2 people friend request each other.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[16,17,18]\r\n<strong>Output: </strong>2\r\n<strong>Explanation: </strong>Friend requests are made 17 -&gt; 16, 18 -&gt; 17.</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[20,30,100,110,120]\r\n<strong>Output: </strong>\r\n<strong>Explanation: </strong>Friend requests are made 110 -&gt; 100, 120 -&gt; 110, 120 -&gt; 100.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Notes:</p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= ages.length&nbsp;&lt;= 20000</code>.</li>\r\n\t<li><code>1 &lt;= ages[i] &lt;= 120</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u4eba\u4eec\u4f1a\u4e92\u76f8\u53d1\u9001\u597d\u53cb\u8bf7\u6c42\uff0c\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u6709\u4ed6\u4eec\u5e74\u9f84\u7684\u6570\u7ec4\uff0c<code>ages[i]</code>&nbsp;\u8868\u793a\u7b2c i \u4e2a\u4eba\u7684\u5e74\u9f84\u3002</p>\n\n<p>\u5f53\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u65f6\uff0cA \u4e0d\u80fd\u7ed9 B\uff08A\u3001B\u4e0d\u4e3a\u540c\u4e00\u4eba\uff09\u53d1\u9001\u597d\u53cb\u8bf7\u6c42\uff1a</p>\n\n<ul>\n\t<li><code>age[B]&nbsp;&lt;= 0.5 * age[A]&nbsp;+ 7</code></li>\n\t<li><code>age[B]&nbsp;&gt; age[A]</code></li>\n\t<li><code>age[B]&nbsp;&gt; 100 &amp;&amp;&nbsp;age[A]&nbsp;&lt; 100</code></li>\n</ul>\n\n<p>\u5426\u5219\uff0cA \u53ef\u4ee5\u7ed9 B \u53d1\u9001\u597d\u53cb\u8bf7\u6c42\u3002</p>\n\n<p>\u6ce8\u610f\u5982\u679c A \u5411 B \u53d1\u51fa\u4e86\u8bf7\u6c42\uff0c\u4e0d\u7b49\u4e8e B \u4e5f\u4e00\u5b9a\u4f1a\u5411&nbsp;A \u53d1\u51fa\u8bf7\u6c42\u3002\u800c\u4e14\uff0c\u4eba\u4eec\u4e0d\u4f1a\u7ed9\u81ea\u5df1\u53d1\u9001\u597d\u53cb\u8bf7\u6c42\u3002&nbsp;</p>\n\n<p>\u6c42\u603b\u5171\u4f1a\u53d1\u51fa\u591a\u5c11\u4efd\u597d\u53cb\u8bf7\u6c42?</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[16,16]\n<strong>\u8f93\u51fa: </strong>2\n<strong>\u89e3\u91ca: \u4e8c\u4eba\u53ef\u4ee5\u4e92\u53d1\u597d\u53cb\u7533\u8bf7\u3002</strong>\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[16,17,18]\n<strong>\u8f93\u51fa: </strong>2\n<strong>\u89e3\u91ca: \u597d\u53cb\u8bf7\u6c42\u53ef\u4ea7\u751f\u4e8e</strong> 17 -&gt; 16, 18 -&gt; 17.</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[20,30,100,110,120]\n<strong>\u8f93\u51fa: 3</strong>\n<strong>\u89e3\u91ca: \u597d\u53cb\u8bf7\u6c42\u53ef\u4ea7\u751f\u4e8e</strong> 110 -&gt; 100, 120 -&gt; 110, 120 -&gt; 100.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= ages.length&nbsp;&lt;= 20000</code>.</li>\n\t<li><code>1 &lt;= ages[i] &lt;= 120</code>.</li>\n</ul>\n",
        "titleZh": "\u9002\u9f84\u7684\u670b\u53cb",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Facebook"
        ]
    },
    {
        "leetId": "826",
        "link": "most-profit-assigning-work",
        "title": "Most Profit Assigning Work",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "30.7%",
        "questionDescription": "<p>We have jobs: <code>difficulty[i]</code>&nbsp;is the difficulty of the&nbsp;<code>i</code>th job, and&nbsp;<code>profit[i]</code>&nbsp;is the profit of the&nbsp;<code>i</code>th job.&nbsp;</p>\r\n\r\n<p>Now we have some workers.&nbsp;<code>worker[i]</code>&nbsp;is the ability of the&nbsp;<code>i</code>th worker, which means that this worker can only complete a job with difficulty at most&nbsp;<code>worker[i]</code>.&nbsp;</p>\r\n\r\n<p>Every worker can be assigned at most one job, but one job&nbsp;can be completed multiple times.</p>\r\n\r\n<p>For example, if 3 people attempt the same job that pays $1, then the total profit will be $3.&nbsp; If a worker cannot complete any job, his profit is $0.</p>\r\n\r\n<p>What is the most profit we can make?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\r\n<strong>Output: </strong>100 \r\n<strong>Explanation: W</strong>orkers are assigned jobs of difficulty [4,4,6,6] and they get profit of [20,20,30,30] seperately.</pre>\r\n\r\n<p><strong>Notes:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= difficulty.length = profit.length &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= worker.length &lt;= 10000</code></li>\r\n\t<li><code>difficulty[i], profit[i], worker[i]</code>&nbsp; are in range&nbsp;<code>[1, 10^5]</code></li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u6709\u4e00\u4e9b\u5de5\u4f5c\uff1a<code>difficulty[i]&nbsp;</code>\u8868\u793a\u7b2c<code>i</code>\u4e2a\u5de5\u4f5c\u7684\u96be\u5ea6\uff0c<code>profit[i]</code>\u8868\u793a\u7b2c<code>i</code>\u4e2a\u5de5\u4f5c\u7684\u6536\u76ca\u3002</p>\n\n<p>\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e9b\u5de5\u4eba\u3002<code>worker[i]</code>\u662f\u7b2c<code>i</code>\u4e2a\u5de5\u4eba\u7684\u80fd\u529b\uff0c\u5373\u8be5\u5de5\u4eba\u53ea\u80fd\u5b8c\u6210\u96be\u5ea6\u5c0f\u4e8e\u7b49\u4e8e<code>worker[i]</code>\u7684\u5de5\u4f5c\u3002</p>\n\n<p>\u6bcf\u4e00\u4e2a\u5de5\u4eba\u90fd\u6700\u591a\u53ea\u80fd\u5b89\u6392\u4e00\u4e2a\u5de5\u4f5c\uff0c\u4f46\u662f\u4e00\u4e2a\u5de5\u4f5c\u53ef\u4ee5\u5b8c\u6210\u591a\u6b21\u3002</p>\n\n<p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c3\u4e2a\u5de5\u4eba\u90fd\u5c1d\u8bd5\u5b8c\u6210\u4e00\u4efd\u62a5\u916c\u4e3a1\u7684\u540c\u6837\u5de5\u4f5c\uff0c\u90a3\u4e48\u603b\u6536\u76ca\u4e3a $3\u3002\u5982\u679c\u4e00\u4e2a\u5de5\u4eba\u4e0d\u80fd\u5b8c\u6210\u4efb\u4f55\u5de5\u4f5c\uff0c\u4ed6\u7684\u6536\u76ca\u4e3a $0 \u3002</p>\n\n<p>\u6211\u4eec\u80fd\u5f97\u5230\u7684\u6700\u5927\u6536\u76ca\u662f\u591a\u5c11\uff1f</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\n<strong>\u8f93\u51fa: </strong>100 \n<strong>\u89e3\u91ca: </strong>\u5de5\u4eba\u88ab\u5206\u914d\u7684\u5de5\u4f5c\u96be\u5ea6\u662f [4,4,6,6] \uff0c\u5206\u522b\u83b7\u5f97 [20,20,30,30] \u7684\u6536\u76ca\u3002</pre>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= difficulty.length = profit.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= worker.length &lt;= 10000</code></li>\n\t<li><code>difficulty[i], profit[i], worker[i]</code>&nbsp; \u7684\u8303\u56f4\u662f&nbsp;<code>[1, 10^5]</code></li>\n</ul>\n",
        "titleZh": "\u5b89\u6392\u5de5\u4f5c\u4ee5\u8fbe\u5230\u6700\u5927\u6536\u76ca",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Nutanix",
            "NetEase"
        ]
    },
    {
        "leetId": "827",
        "link": "making-a-large-island",
        "title": "Making A Large Island",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "30.7%",
        "questionDescription": "<p>In a 2D grid of <code>0</code>s and <code>1</code>s, we change at most one <code>0</code> to a <code>1</code>.</p>\r\n\r\n<p>After, what is the size of the largest island?&nbsp;(An island is a 4-directionally connected group of <code>1</code>s).</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1, 0], [0, 1]]\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> Change one 0 to 1 and connect two 1s, then we get an island with area = 3.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1, 1], [1, 0]]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation: </strong>Change the 0 to 1 and make the island bigger, only one island with area = 4.</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1, 1], [1, 1]]\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> Can&#39;t change any 0 to 1, only one island with area = 4.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Notes:</p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= grid.length = grid[0].length &lt;= 50</code>.</li>\r\n\t<li><code>0 &lt;= grid[i][j] &lt;= 1</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e8c\u7ef4\u5730\u56fe\u4e0a\uff0c&nbsp;<code>0</code>\u4ee3\u8868\u6d77\u6d0b\uff0c&nbsp;<code>1</code>\u4ee3\u8868\u9646\u5730\uff0c\u6211\u4eec\u6700\u591a\u53ea\u80fd\u5c06\u4e00\u683c&nbsp;<code>0</code> \u6d77\u6d0b\u53d8\u6210&nbsp;<code>1</code>\u53d8\u6210\u9646\u5730\u3002</p>\n\n<p>\u8fdb\u884c\u586b\u6d77\u4e4b\u540e\uff0c\u5730\u56fe\u4e0a\u6700\u5927\u7684\u5c9b\u5c7f\u9762\u79ef\u662f\u591a\u5c11\uff1f\uff08\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\u56db\u4e2a\u65b9\u5411\u76f8\u8fde\u7684&nbsp;<code>1</code>&nbsp;\u53ef\u5f62\u6210\u5c9b\u5c7f\uff09</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>[[1, 0], [0, 1]]\n<strong>\u8f93\u51fa:</strong> 3\n<strong>\u89e3\u91ca:</strong> \u5c06\u4e00\u683c0\u53d8\u62101\uff0c\u6700\u7ec8\u8fde\u901a\u4e24\u4e2a\u5c0f\u5c9b\u5f97\u5230\u9762\u79ef\u4e3a 3 \u7684\u5c9b\u5c7f\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>[[1, 1], [1, 0]]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u5c06\u4e00\u683c0\u53d8\u62101\uff0c\u5c9b\u5c7f\u7684\u9762\u79ef\u6269\u5927\u4e3a 4\u3002</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>[[1, 1], [1, 1]]\n<strong>\u8f93\u51fa:</strong> 4\n<strong>\u89e3\u91ca:</strong> \u6ca1\u67090\u53ef\u4ee5\u8ba9\u6211\u4eec\u53d8\u62101\uff0c\u9762\u79ef\u4f9d\u7136\u4e3a 4\u3002</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length = grid[0].length &lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 1</code></li>\n</ul>\n",
        "titleZh": "\u6700\u5927\u4eba\u5de5\u5c9b",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Uber"
        ]
    },
    {
        "leetId": "828",
        "link": "unique-letter-string",
        "title": "Unique Letter String",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "29.2%",
        "questionDescription": "<p>A character is unique in string <code>S</code> if it occurs exactly once in it.</p>\r\n\r\n<p>For example, in string <code>S = &quot;LETTER&quot;</code>, the only unique characters are <code>&quot;L&quot;</code> and <code>&quot;R&quot;</code>.</p>\r\n\r\n<p>Let&#39;s define <code>UNIQ(S)</code> as the number of unique characters in string <code>S</code>.</p>\r\n\r\n<p>For example, <code>UNIQ(&quot;LETTER&quot;) =&nbsp; 2</code>.</p>\r\n\r\n<p>Given a string <code>S</code> with only uppercases, calculate the sum of <code>UNIQ(substring)</code> over all non-empty substrings of <code>S</code>.</p>\r\n\r\n<p>If there are two or more equal substrings at different positions in <code>S</code>, we consider them different.</p>\r\n\r\n<p>Since the answer can be very large, return&nbsp;the answer&nbsp;modulo&nbsp;<code>10 ^ 9 + 7</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;ABC&quot;\r\n<strong>Output: </strong>10\r\n<strong>Explanation: </strong>All possible substrings are: &quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;AB&quot;,&quot;BC&quot; and &quot;ABC&quot;.\r\nEvey substring is composed with only unique letters.\r\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;ABA&quot;\r\n<strong>Output: </strong>8\r\n<strong>Explanation: </strong>The same as example 1, except uni(&quot;ABA&quot;) = 1.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong> <code>0 &lt;= S.length &lt;= 10000</code>.</p>\r\n",
        "questionDescriptionZh": "<p>\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u5728\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u4e2d\u6709\u4e14\u4ec5\u6709\u51fa\u73b0\u4e00\u6b21\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u5176\u4e3a\u72ec\u7279\u5b57\u7b26\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5728\u5b57\u7b26\u4e32&nbsp;<code>S = &quot;LETTER&quot;</code>&nbsp;\u4e2d\uff0c<code>&quot;L&quot;</code>&nbsp;\u548c&nbsp;<code>&quot;R&quot;</code>&nbsp;\u53ef\u4ee5\u88ab\u79f0\u4e3a\u72ec\u7279\u5b57\u7b26\u3002</p>\n\n<p>\u6211\u4eec\u518d\u5b9a\u4e49&nbsp;<code>UNIQ(S)</code>&nbsp;\u4f5c\u4e3a\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u4e2d\u72ec\u7279\u5b57\u7b26\u7684\u4e2a\u6570\u3002</p>\n\n<p>\u90a3\u4e48\uff0c\u5728&nbsp;<code>S = &quot;LETTER&quot;</code>&nbsp;\u4e2d\uff0c&nbsp;<code>UNIQ(&quot;LETTER&quot;) =&nbsp; 2</code>\u3002</p>\n\n<p>\u5bf9\u4e8e\u7ed9\u5b9a\u5b57\u7b26\u4e32&nbsp;<code>S</code>\uff0c\u8ba1\u7b97\u5176\u6240\u6709\u975e\u7a7a\u5b50\u4e32\u7684\u72ec\u7279\u5b57\u7b26\u7684\u4e2a\u6570\uff08\u5373&nbsp;<code>UNIQ(substring)</code>\uff09\u4e4b\u548c\u3002</p>\n\n<p>\u5982\u679c\u5728 <code>S</code>&nbsp;\u7684\u4e0d\u540c\u4f4d\u7f6e\u4e0a\u51fa\u73b0\u4e24\u4e2a\u751a\u81f3\u591a\u4e2a\u76f8\u540c\u7684\u5b50\u4e32\uff0c\u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a\u8fd9\u4e9b\u5b50\u4e32\u662f\u4e0d\u540c\u7684\u3002</p>\n\n<p>\u8003\u8651\u5230\u7b54\u6848\u53ef\u80fd\u4f1a\u975e\u5e38\u5927\uff0c\u89c4\u5b9a\u8fd4\u56de\u683c\u5f0f\u4e3a\uff1a\u7ed3\u679c mod&nbsp;<code>10 ^ 9 + 7</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;ABC&quot;\n<strong>\u8f93\u51fa: </strong>10\n<strong>\u89e3\u91ca:</strong> \u6240\u6709\u53ef\u80fd\u7684\u5b50\u4e32\u4e3a\uff1a&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;AB&quot;,&quot;BC&quot; \u548c &quot;ABC&quot;\u3002\n     \u5176\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u5b50\u4e32\u90fd\u7531\u72ec\u7279\u5b57\u7b26\u6784\u6210\u3002\n     \u6240\u4ee5\u5176\u957f\u5ea6\u603b\u548c\u4e3a\uff1a1 + 1 + 1 + 2 + 2 + 3 = 10\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;ABA&quot;\n<strong>\u8f93\u51fa: </strong>8\n<strong>\u89e3\u91ca: </strong>\u9664\u4e86\u5b50\u4e32 UNIQ(&#39;ABA&#39;) = 1\uff0c\u5176\u4f59\u4e0e\u793a\u4f8b1\u76f8\u540c\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u8bf4\u660e:</strong> <code>0 &lt;= S.length &lt;= 10000</code>\u3002</p>\n",
        "titleZh": "\u72ec\u7279\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "ForUsAll"
        ]
    },
    {
        "leetId": "829",
        "link": "consecutive-numbers-sum",
        "title": "Consecutive Numbers Sum",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "25.2%",
        "questionDescription": "<p>Given a positive integer&nbsp;<code>N</code>, how many ways can we write it as a sum of&nbsp;consecutive positive integers?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>5\r\n<strong>Output: </strong>2\r\n<strong>Explanation: </strong>5 = 5 = 2 + 3</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>9\r\n<strong>Output: </strong>3\r\n<strong>Explanation: </strong>9 = 9 = 4 + 5 = 2 + 3 + 4</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>15\r\n<strong>Output: </strong>4\r\n<strong>Explanation: </strong>15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5</pre>\r\n\r\n<p><strong>Note:</strong>&nbsp;<code>1 &lt;= N &lt;= 10 ^ 9</code>.</p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 <code>N</code>\uff0c\u8bd5\u6c42\u6709\u591a\u5c11\u7ec4\u8fde\u7eed\u6b63\u6574\u6570\u6ee1\u8db3\u6240\u6709\u6570\u5b57\u4e4b\u548c\u4e3a <code>N</code>?</p>\n\n<p><strong>\u793a</strong><strong>\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>5\n<strong>\u8f93\u51fa: </strong>2\n<strong>\u89e3\u91ca: </strong>5 = 5 = 2 + 3\uff0c\u5171\u6709\u4e24\u7ec4\u8fde\u7eed\u6574\u6570([5],[2,3])\u6c42\u548c\u540e\u4e3a 5\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>9\n<strong>\u8f93\u51fa: </strong>3\n<strong>\u89e3\u91ca: </strong>9 = 9 = 4 + 5 = 2 + 3 + 4</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>15\n<strong>\u8f93\u51fa: </strong>4\n<strong>\u89e3\u91ca: </strong>15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5</pre>\n\n<p><strong>\u8bf4\u660e:&nbsp;</strong><code>1 &lt;= N &lt;= 10 ^ 9</code></p>\n",
        "titleZh": "\u8fde\u7eed\u6574\u6570\u6c42\u548c",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Uber",
            "Adobe",
            "Airbnb",
            "Visa"
        ]
    },
    {
        "leetId": "830",
        "link": "positions-of-large-groups",
        "title": "Positions of Large Groups",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "41.0%",
        "questionDescription": "<p>In a string&nbsp;<code>S</code>&nbsp;of lowercase letters, these letters form consecutive groups of the same character.</p>\r\n\r\n<p>For example, a string like <code>S = &quot;abbxxxxzyy&quot;</code> has the groups <code>&quot;a&quot;</code>, <code>&quot;bb&quot;</code>, <code>&quot;xxxx&quot;</code>, <code>&quot;z&quot;</code> and&nbsp;<code>&quot;yy&quot;</code>.</p>\r\n\r\n<p>Call a group <em>large</em> if it has 3 or more characters.&nbsp; We would like the starting and ending positions of every large group.</p>\r\n\r\n<p>The final answer should be in lexicographic order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;abbxxxxzzy&quot;\r\n<strong>Output: </strong>[[3,6]]\r\n<strong>Explanation</strong>: <code>&quot;xxxx&quot; is the single </code>large group with starting  3 and ending positions 6.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;abc&quot;\r\n<strong>Output: </strong>[]\r\n<strong>Explanation</strong>: We have &quot;a&quot;,&quot;b&quot; and &quot;c&quot; but no large group.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;abcdddeeeeaabbbcd&quot;\r\n<strong>Output: </strong>[[3,5],[6,9],[12,14]]</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>&nbsp;<code>1 &lt;= S.length &lt;= 1000</code></p>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u7684\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u4e2d\uff0c\u5305\u542b\u7531\u4e00\u4e9b\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\u6240\u6784\u6210\u7684\u5206\u7ec4\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5728\u5b57\u7b26\u4e32 <code>S = &quot;abbxxxxzyy&quot;</code>&nbsp;\u4e2d\uff0c\u5c31\u542b\u6709 <code>&quot;a&quot;</code>, <code>&quot;bb&quot;</code>, <code>&quot;xxxx&quot;</code>, <code>&quot;z&quot;</code> \u548c <code>&quot;yy&quot;</code> \u8fd9\u6837\u7684\u4e00\u4e9b\u5206\u7ec4\u3002</p>\n\n<p>\u6211\u4eec\u79f0\u6240\u6709\u5305\u542b\u5927\u4e8e\u6216\u7b49\u4e8e\u4e09\u4e2a\u8fde\u7eed\u5b57\u7b26\u7684\u5206\u7ec4\u4e3a\u8f83\u5927\u5206\u7ec4\u3002\u627e\u5230\u6bcf\u4e00\u4e2a\u8f83\u5927\u5206\u7ec4\u7684\u8d77\u59cb\u548c\u7ec8\u6b62\u4f4d\u7f6e\u3002</p>\n\n<p>\u6700\u7ec8\u7ed3\u679c\u6309\u7167\u5b57\u5178\u987a\u5e8f\u8f93\u51fa\u3002</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>&quot;abbxxxxzzy&quot;\n<strong>\u8f93\u51fa: </strong>[[3,6]]\n<strong>\u89e3\u91ca</strong>: <code>&quot;xxxx&quot; \u662f\u4e00\u4e2a\u8d77\u59cb\u4e8e 3 \u4e14\u7ec8\u6b62\u4e8e 6 \u7684\u8f83\u5927\u5206\u7ec4</code>\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>&quot;abc&quot;\n<strong>\u8f93\u51fa: </strong>[]\n<strong>\u89e3\u91ca</strong>: &quot;a&quot;,&quot;b&quot; \u548c &quot;c&quot; \u5747\u4e0d\u662f\u7b26\u5408\u8981\u6c42\u7684\u8f83\u5927\u5206\u7ec4\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>&quot;abcdddeeeeaabbbcd&quot;\n<strong>\u8f93\u51fa: </strong>[[3,5],[6,9],[12,14]]</pre>\n\n<p><strong>\u8bf4\u660e:&nbsp;</strong>&nbsp;<code>1 &lt;= S.length &lt;= 1000</code></p>\n",
        "titleZh": "\u8f83\u5927\u5206\u7ec4\u7684\u4f4d\u7f6e",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google",
            "Adobe"
        ]
    },
    {
        "leetId": "831",
        "link": "masking-personal-information",
        "title": "Masking Personal Information",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "32.0%",
        "questionDescription": "<p>We are given a&nbsp;personal information string <code>S</code>, which may represent&nbsp;either <strong>an email address</strong> or <strong>a phone number.</strong></p>\r\n\r\n<p>We would like to mask this&nbsp;personal information according to the&nbsp;following rules:</p>\r\n\r\n<p><br />\r\n<u><strong>1. Email address:</strong></u></p>\r\n\r\n<p>We define a&nbsp;<strong>name</strong> to be a string of <code>length &ge; 2</code> consisting&nbsp;of only lowercase letters&nbsp;<code>a-z</code> or uppercase&nbsp;letters&nbsp;<code>A-Z</code>.</p>\r\n\r\n<p>An email address starts with a name, followed by the&nbsp;symbol <code>&#39;@&#39;</code>, followed by a name, followed by the&nbsp;dot&nbsp;<code>&#39;.&#39;</code>&nbsp;and&nbsp;followed by a name.&nbsp;</p>\r\n\r\n<p>All email addresses are&nbsp;guaranteed to be valid and in the format of&nbsp;<code>&quot;name1@name2.name3&quot;.</code></p>\r\n\r\n<p>To mask an email, <strong>all names must be converted to lowercase</strong> and <strong>all letters between the first and last letter of the first name</strong> must be replaced by 5 asterisks <code>&#39;*&#39;</code>.</p>\r\n\r\n<p><br />\r\n<u><strong>2. Phone number:</strong></u></p>\r\n\r\n<p>A phone number is a string consisting of&nbsp;only the digits <code>0-9</code> or the characters from the set <code>{&#39;+&#39;, &#39;-&#39;, &#39;(&#39;, &#39;)&#39;, &#39;&nbsp;&#39;}.</code>&nbsp;You may assume a phone&nbsp;number contains&nbsp;10 to 13 digits.</p>\r\n\r\n<p>The last 10 digits make up the local&nbsp;number, while the digits before those make up the country code. Note that&nbsp;the country code is optional. We want to expose only the last 4 digits&nbsp;and mask all other&nbsp;digits.</p>\r\n\r\n<p>The local&nbsp;number&nbsp;should be formatted and masked as <code>&quot;***-***-1111&quot;,&nbsp;</code>where <code>1</code> represents the exposed digits.</p>\r\n\r\n<p>To mask a phone number with country code like <code>&quot;+111 111 111 1111&quot;</code>, we write it in the form <code>&quot;+***-***-***-1111&quot;.</code>&nbsp; The <code>&#39;+&#39;</code>&nbsp;sign and the first <code>&#39;-&#39;</code>&nbsp;sign before the local number should only exist if there is a country code.&nbsp; For example, a 12 digit phone number mask&nbsp;should start&nbsp;with <code>&quot;+**-&quot;</code>.</p>\r\n\r\n<p>Note that extraneous characters like <code>&quot;(&quot;, &quot;)&quot;, &quot; &quot;</code>, as well as&nbsp;extra dashes or plus signs not part of the above formatting scheme should be removed.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Return the correct &quot;mask&quot; of the information provided.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;LeetCode@LeetCode.com&quot;\r\n<strong>Output: </strong>&quot;l*****e@leetcode.com&quot;\r\n<strong>Explanation:&nbsp;</strong>All names are converted to lowercase, and the letters between the\r\n&nbsp;            first and last letter of the first name is replaced by 5 asterisks.\r\n&nbsp;            Therefore, &quot;leetcode&quot; -&gt; &quot;l*****e&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;AB@qq.com&quot;\r\n<strong>Output: </strong>&quot;a*****b@qq.com&quot;\r\n<strong>Explanation:&nbsp;</strong>There must be 5 asterisks between the first and last letter \r\n&nbsp;            of the first name &quot;ab&quot;. Therefore, &quot;ab&quot; -&gt; &quot;a*****b&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;1(234)567-890&quot;\r\n<strong>Output: </strong>&quot;***-***-7890&quot;\r\n<strong>Explanation:</strong>&nbsp;10 digits in the phone number, which means all digits make up the local number.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;86-(10)12345678&quot;\r\n<strong>Output: </strong>&quot;+**-***-***-5678&quot;\r\n<strong>Explanation:</strong>&nbsp;12 digits, 2 digits for country code and 10 digits for local number. \r\n</pre>\r\n\r\n<p><strong>Notes:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>S.length&nbsp;&lt;=&nbsp;40</code>.</li>\r\n\t<li>Emails have length at least 8.</li>\r\n\t<li>Phone numbers have length at least 10.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u4f60\u4e00\u6761\u4e2a\u4eba\u4fe1\u606f string <code>S</code>\uff0c\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u90ae\u7bb1\u5730\u5740\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u7535\u8bdd\u53f7\u7801\u3002</p>\n\n<p>\u6211\u4eec\u5c06\u9690\u85cf\u5b83\u7684\u9690\u79c1\u4fe1\u606f\uff0c\u901a\u8fc7\u5982\u4e0b\u89c4\u5219:</p>\n\n<p>&nbsp;</p>\n\n<p>&lt;u&gt;<strong>1. \u7535\u5b50\u90ae\u7bb1</strong>&lt;/u&gt;</p>\n\n<p>\u5b9a\u4e49\u540d\u79f0 &lt;name&gt; \u662f\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e 2 \uff08<code>length &ge; 2</code>\uff09\uff0c\u5e76\u4e14\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd <code>a-z</code> \u548c\u5927\u5199\u5b57\u6bcd <code>A-Z</code> \u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u7535\u5b50\u90ae\u7bb1\u5730\u5740\u7531\u540d\u79f0 &lt;name&gt; \u5f00\u5934\uff0c\u7d27\u63a5\u7740\u662f\u7b26\u53f7 &lt;font face=\"Menlo, Monaco, Consolas, Courier New, monospace\"&gt;<span style=\"\">&#39;@&#39;</span>&lt;/font&gt;\uff0c\u540e\u9762\u63a5\u7740\u4e00\u4e2a\u540d\u79f0 &lt;name&gt;\uff0c\u518d\u63a5\u7740\u4e00\u4e2a\u70b9\u53f7 <code>&#39;.&#39;</code>\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u540d\u79f0 &lt;name&gt;\u3002</p>\n\n<p>\u7535\u5b50\u90ae\u7bb1\u5730\u5740\u786e\u5b9a\u4e3a\u6709\u6548\u7684\uff0c\u5e76\u4e14\u683c\u5f0f\u662f <code>&quot;name1@name2.name3&quot;</code>\u3002</p>\n\n<p>\u4e3a\u4e86\u9690\u85cf\u7535\u5b50\u90ae\u7bb1\uff0c\u6240\u6709\u7684\u540d\u79f0 &lt;name&gt; \u5fc5\u987b\u88ab\u8f6c\u6362\u6210\u5c0f\u5199\u7684\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u540d\u79f0 &lt;name&gt; \u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u7684\u4e2d\u95f4\u7684\u6240\u6709\u5b57\u6bcd\u7531 5 \u4e2a <code>&#39;*&#39;</code> \u4ee3\u66ff\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>&lt;u&gt;2. \u7535\u8bdd\u53f7\u7801&lt;/u&gt;</strong></p>\n\n<p>\u7535\u8bdd\u53f7\u7801\u662f\u4e00\u4e32\u5305\u62ec\u6570\u5b57&nbsp;<code>0-9</code>\uff0c\u4ee5\u53ca <code>{&#39;+&#39;, &#39;-&#39;, &#39;(&#39;, &#39;)&#39;, &#39;&nbsp;&#39;}</code> \u8fd9\u51e0\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe\u7535\u8bdd\u53f7\u7801\u5305\u542b 10 \u5230 13 \u4e2a\u6570\u5b57\u3002</p>\n\n<p>\u7535\u8bdd\u53f7\u7801\u7684\u6700\u540e 10 \u4e2a\u6570\u5b57\u7ec4\u6210\u672c\u5730\u53f7\u7801\uff0c\u5728\u8fd9\u4e4b\u524d\u7684\u6570\u5b57\u7ec4\u6210\u56fd\u9645\u53f7\u7801\u3002\u6ce8\u610f\uff0c\u56fd\u9645\u53f7\u7801\u662f\u53ef\u9009\u7684\u3002\u6211\u4eec\u53ea\u66b4\u9732\u6700\u540e 4 \u4e2a\u6570\u5b57\u5e76\u9690\u85cf\u6240\u6709\u5176\u4ed6\u6570\u5b57\u3002</p>\n\n<p>\u672c\u5730\u53f7\u7801\u662f\u6709\u683c\u5f0f\u7684\uff0c\u5e76\u4e14\u5982 <code>&quot;***-***-1111&quot;</code> \u8fd9\u6837\u663e\u793a\uff0c\u8fd9\u91cc\u7684 1 \u8868\u793a\u66b4\u9732\u7684\u6570\u5b57\u3002</p>\n\n<p>\u4e3a\u4e86\u9690\u85cf\u6709\u56fd\u9645\u53f7\u7801\u7684\u7535\u8bdd\u53f7\u7801\uff0c\u50cf&nbsp;<code>&quot;+111 111 111 1111&quot;</code>\uff0c\u6211\u4eec\u4ee5 <code>&quot;+***-***-***-1111&quot;</code> \u7684\u683c\u5f0f\u6765\u663e\u793a\u3002\u5728\u672c\u5730\u53f7\u7801\u524d\u9762\u7684 <code>&#39;+&#39;</code> \u53f7\u548c\u7b2c\u4e00\u4e2a <code>&#39;-&#39;</code> \u53f7\u4ec5\u5f53\u7535\u8bdd\u53f7\u7801\u4e2d\u5305\u542b\u56fd\u9645\u53f7\u7801\u65f6\u5b58\u5728\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a 12 \u4f4d\u7684\u7535\u8bdd\u53f7\u7801\u5e94\u5f53\u4ee5 <code>&quot;+**-&quot;</code> \u5f00\u5934\u8fdb\u884c\u663e\u793a\u3002</p>\n\n<p>\u6ce8\u610f\uff1a\u50cf <code>&quot;(&quot;\uff0c&quot;)&quot;\uff0c&quot; &quot;</code> \u8fd9\u6837\u7684\u4e0d\u76f8\u5e72\u7684\u5b57\u7b26\u4ee5\u53ca\u4e0d\u7b26\u5408\u4e0a\u8ff0\u683c\u5f0f\u7684\u989d\u5916\u7684\u51cf\u53f7\u6216\u8005\u52a0\u53f7\u90fd\u5e94\u5f53\u88ab\u5220\u9664\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u6700\u540e\uff0c\u5c06\u63d0\u4f9b\u7684\u4fe1\u606f\u6b63\u786e\u9690\u85cf\u540e\u8fd4\u56de\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;LeetCode@LeetCode.com&quot;\n<strong>\u8f93\u51fa: </strong>&quot;l*****e@leetcode.com&quot;\n<strong>\u89e3\u91ca\uff1a \n</strong>\u6240\u6709\u7684\u540d\u79f0\u8f6c\u6362\u6210\u5c0f\u5199, \u7b2c\u4e00\u4e2a\u540d\u79f0\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e2d\u95f4\u7531 5 \u4e2a\u661f\u53f7\u4ee3\u66ff\u3002\n\u56e0\u6b64\uff0c&quot;leetcode&quot; -&gt; &quot;l*****e&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;AB@qq.com&quot;\n<strong>\u8f93\u51fa: </strong>&quot;a*****b@qq.com&quot;\n<strong>\u89e3\u91ca:&nbsp;\n</strong>\u7b2c\u4e00\u4e2a\u540d\u79f0&quot;ab&quot;\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u4e2d\u95f4\u5fc5\u987b\u6709 5 \u4e2a\u661f\u53f7\n\u56e0\u6b64\uff0c&quot;ab&quot; -&gt; &quot;a*****b&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;1(234)567-890&quot;\n<strong>\u8f93\u51fa: </strong>&quot;***-***-7890&quot;\n<strong>\u89e3\u91ca:</strong>&nbsp;\n10 \u4e2a\u6570\u5b57\u7684\u7535\u8bdd\u53f7\u7801\uff0c\u90a3\u610f\u5473\u7740\u6240\u6709\u7684\u6570\u5b57\u90fd\u662f\u672c\u5730\u53f7\u7801\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;86-(10)12345678&quot;\n<strong>\u8f93\u51fa: </strong>&quot;+**-***-***-5678&quot;\n<strong>\u89e3\u91ca:</strong>&nbsp;\n12 \u4f4d\u6570\u5b57\uff0c2 \u4e2a\u6570\u5b57\u662f\u56fd\u9645\u53f7\u7801\u53e6\u5916 10 \u4e2a\u6570\u5b57\u662f\u672c\u5730\u53f7\u7801 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u6ce8\u610f:</strong></p>\n\n<ol>\n\t<li><code>S.length&nbsp;&lt;=&nbsp;40</code>\u3002</li>\n\t<li>\u90ae\u7bb1\u7684\u957f\u5ea6\u81f3\u5c11\u662f 8\u3002</li>\n\t<li>\u7535\u8bdd\u53f7\u7801\u7684\u957f\u5ea6\u81f3\u5c11\u662f 10\u3002</li>\n</ol>\n",
        "titleZh": "\u9690\u85cf\u4e2a\u4eba\u4fe1\u606f",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Twitter"
        ]
    },
    {
        "leetId": "832",
        "link": "flipping-an-image",
        "title": "Flipping an Image",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "70.8%",
        "questionDescription": "<p>Given a binary matrix <code>A</code>, we want to flip the image horizontally, then invert it, and return the resulting image.</p>\r\n\r\n<p>To flip an image horizontally means that each row of the image is reversed.&nbsp; For example, flipping&nbsp;<code>[1, 1, 0]</code>&nbsp;horizontally results in&nbsp;<code>[0, 1, 1]</code>.</p>\r\n\r\n<p>To invert an image means&nbsp;that each <code>0</code> is replaced by <code>1</code>, and each <code>1</code> is replaced by <code>0</code>.&nbsp;For example, inverting&nbsp;<code>[0, 1, 1]</code>&nbsp;results in&nbsp;<code>[1, 0, 0]</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1,1,0],[1,0,1],[0,0,0]]\r\n<strong>Output: </strong>[[1,0,0],[0,1,0],[1,1,1]]\r\n<strong>Explanation:</strong> First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\r\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\r\n<strong>Output: </strong>[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\r\n<strong>Explanation:</strong> First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\r\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\r\n</pre>\r\n\r\n<p><strong>Notes:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= A.length = A[0].length &lt;= 20</code></li>\r\n\t<li><code>0 &lt;= A[i][j]<font face=\"sans-serif, Arial, Verdana, Trebuchet MS\">&nbsp;&lt;=&nbsp;</font>1</code></li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u77e9\u9635&nbsp;<code>A</code>\uff0c\u6211\u4eec\u60f3\u5148\u6c34\u5e73\u7ffb\u8f6c\u56fe\u50cf\uff0c\u7136\u540e\u53cd\u8f6c\u56fe\u50cf\u5e76\u8fd4\u56de\u7ed3\u679c\u3002</p>\n\n<p>\u6c34\u5e73\u7ffb\u8f6c\u56fe\u7247\u5c31\u662f\u5c06\u56fe\u7247\u7684\u6bcf\u4e00\u884c\u90fd\u8fdb\u884c\u7ffb\u8f6c\uff0c\u5373\u9006\u5e8f\u3002\u4f8b\u5982\uff0c\u6c34\u5e73\u7ffb\u8f6c&nbsp;<code>[1, 1, 0]</code>&nbsp;\u7684\u7ed3\u679c\u662f&nbsp;<code>[0, 1, 1]</code>\u3002</p>\n\n<p>\u53cd\u8f6c\u56fe\u7247\u7684\u610f\u601d\u662f\u56fe\u7247\u4e2d\u7684&nbsp;<code>0</code>&nbsp;\u5168\u90e8\u88ab&nbsp;<code>1</code>&nbsp;\u66ff\u6362\uff0c&nbsp;<code>1</code>&nbsp;\u5168\u90e8\u88ab&nbsp;<code>0</code>&nbsp;\u66ff\u6362\u3002\u4f8b\u5982\uff0c\u53cd\u8f6c&nbsp;<code>[0, 1, 1]</code>&nbsp;\u7684\u7ed3\u679c\u662f&nbsp;<code>[1, 0, 0]</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>[[1,1,0],[1,0,1],[0,0,0]]\n<strong>\u8f93\u51fa: </strong>[[1,0,0],[0,1,0],[1,1,1]]\n<strong>\u89e3\u91ca:</strong> \u9996\u5148\u7ffb\u8f6c\u6bcf\u4e00\u884c: [[0,1,1],[1,0,1],[0,0,0]]\uff1b\n     \u7136\u540e\u53cd\u8f6c\u56fe\u7247: [[1,0,0],[0,1,0],[1,1,1]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>[[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\n<strong>\u8f93\u51fa: </strong>[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n<strong>\u89e3\u91ca:</strong> \u9996\u5148\u7ffb\u8f6c\u6bcf\u4e00\u884c: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]\uff1b\n     \u7136\u540e\u53cd\u8f6c\u56fe\u7247: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length = A[0].length &lt;= 20</code></li>\n\t<li><code>0 &lt;= A[i][j]&nbsp;&lt;=&nbsp;1</code></li>\n</ul>\n",
        "titleZh": "\u7ffb\u8f6c\u56fe\u50cf",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "833",
        "link": "find-and-replace-in-string",
        "title": "Find And Replace in String",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "26.9%",
        "questionDescription": "<p>To some string <code>S</code>, we will perform some&nbsp;replacement&nbsp;operations that replace groups of letters with new ones (not necessarily the same size).</p>\r\n\r\n<p>Each replacement operation has <code>3</code> parameters: a starting index <code>i</code>, a source word&nbsp;<code>x</code>&nbsp;and a target word&nbsp;<code>y</code>.&nbsp; The rule is that if <code><font face=\"monospace\">x</font></code>&nbsp;starts at position <code>i</code>&nbsp;in the <strong>original</strong> <strong>string</strong> <strong><code>S</code></strong>, then we will replace that occurrence of&nbsp;<code>x</code>&nbsp;with&nbsp;<code>y</code>.&nbsp; If not, we do nothing.</p>\r\n\r\n<p>For example, if we have&nbsp;<code>S = &quot;abcd&quot;</code>&nbsp;and we have some replacement operation&nbsp;<code>i = 2, x = &quot;cd&quot;, y = &quot;ffff&quot;</code>, then because&nbsp;<code>&quot;cd&quot;</code>&nbsp;starts at position <code><font face=\"monospace\">2</font></code>&nbsp;in the original string <code>S</code>, we will replace it with <code>&quot;ffff&quot;</code>.</p>\r\n\r\n<p>Using another example on <code>S = &quot;abcd&quot;</code>, if we have both the replacement operation <code>i = 0, x = &quot;ab&quot;, y = &quot;eee&quot;</code>, as well as another replacement operation&nbsp;<code>i = 2, x = &quot;ec&quot;, y = &quot;ffff&quot;</code>, this second operation does nothing because in the original string&nbsp;<code>S[2] = &#39;c&#39;</code>, which doesn&#39;t match&nbsp;<code>x[0] = &#39;e&#39;</code>.</p>\r\n\r\n<p>All these operations occur simultaneously.&nbsp; It&#39;s guaranteed that there won&#39;t be any overlap in replacement: for example,&nbsp;<code>S = &quot;abc&quot;, indexes = [0, 1],&nbsp;sources = [&quot;ab&quot;,&quot;bc&quot;]</code> is not a valid test case.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = &quot;abcd&quot;, indexes = [0,2], sources = [&quot;a&quot;,&quot;cd&quot;], targets = [&quot;eee&quot;,&quot;ffff&quot;]\r\n<strong>Output: </strong>&quot;eeebffff&quot;\r\n<strong>Explanation:</strong> &quot;a&quot; starts at index 0 in S, so it&#39;s replaced by &quot;eee&quot;.\r\n&quot;cd&quot; starts at index 2 in S, so it&#39;s replaced by &quot;ffff&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = &quot;abcd&quot;, indexes = [0,2], sources = [&quot;ab&quot;,&quot;ec&quot;], targets = [&quot;eee&quot;,&quot;ffff&quot;]\r\n<strong>Output: </strong>&quot;eeecd&quot;\r\n<strong>Explanation:</strong> &quot;ab&quot; starts at index 0 in S, so it&#39;s replaced by &quot;eee&quot;. \r\n&quot;ec&quot; doesn&#39;t starts at index 2 in the <strong>original</strong> S, so we do nothing.\r\n</pre>\r\n\r\n<p>Notes:</p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;=&nbsp;indexes.length =&nbsp;sources.length =&nbsp;targets.length &lt;= 100</code></li>\r\n\t<li><code>0&nbsp;&lt;&nbsp;indexes[i]&nbsp;&lt; S.length &lt;= 1000</code></li>\r\n\t<li>All characters in given inputs are lowercase letters.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u5bf9\u4e8e\u67d0\u4e9b\u5b57\u7b26\u4e32 <code>S</code>\uff0c\u6211\u4eec\u5c06\u6267\u884c\u4e00\u4e9b\u66ff\u6362\u64cd\u4f5c\uff0c\u7528\u65b0\u7684\u5b57\u6bcd\u7ec4\u66ff\u6362\u539f\u6709\u7684\u5b57\u6bcd\u7ec4\uff08\u4e0d\u4e00\u5b9a\u5927\u5c0f\u76f8\u540c\uff09\u3002</p>\n\n<p>\u6bcf\u4e2a\u66ff\u6362\u64cd\u4f5c\u5177\u6709 3 \u4e2a\u53c2\u6570\uff1a\u8d77\u59cb\u7d22\u5f15 <code>i</code>\uff0c\u6e90\u5b57 <code>x</code> \u548c\u76ee\u6807\u5b57 <code>y</code>\u3002\u89c4\u5219\u662f\u5982\u679c <code>x</code> \u4ece<strong>\u539f\u59cb\u5b57\u7b26\u4e32 <code>S</code></strong> \u4e2d\u7684\u4f4d\u7f6e <code>i</code> \u5f00\u59cb\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u7528 <code>y</code> \u66ff\u6362\u51fa\u73b0\u7684 <code>x</code>\u3002\u5982\u679c\u6ca1\u6709\uff0c\u6211\u4eec\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002</p>\n\n<p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u6709 <code>S&nbsp;= &ldquo;abcd&rdquo;</code> \u5e76\u4e14\u6211\u4eec\u6709\u4e00\u4e9b\u66ff\u6362\u64cd\u4f5c <code>i = 2\uff0cx = &ldquo;cd&rdquo;\uff0cy = &ldquo;ffff&rdquo;</code>\uff0c\u90a3\u4e48\u56e0\u4e3a <code>&ldquo;cd&rdquo;</code> \u4ece\u539f\u59cb\u5b57\u7b26\u4e32 <code>S</code> \u4e2d\u7684\u4f4d\u7f6e <code>2</code> \u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u7528&nbsp;<code>&ldquo;ffff&rdquo;</code> \u66ff\u6362\u5b83\u3002</p>\n\n<p>\u518d\u6765\u770b <code>S = &ldquo;abcd&rdquo;</code> \u4e0a\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u6709\u66ff\u6362\u64cd\u4f5c<code> i = 0\uff0cx = &ldquo;ab&rdquo;\uff0cy = &ldquo;eee&rdquo;</code>\uff0c\u4ee5\u53ca\u53e6\u4e00\u4e2a\u66ff\u6362\u64cd\u4f5c <code>i = 2\uff0cx = &ldquo;ec&rdquo;\uff0cy = &ldquo;ffff&rdquo;</code>\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u5c06\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u56e0\u4e3a\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d&nbsp;<code>S[2] = &#39;c&#39;</code>\uff0c\u4e0e <code>x[0] = &#39;e&#39;</code> \u4e0d\u5339\u914d\u3002</p>\n\n<p>\u6240\u6709\u8fd9\u4e9b\u64cd\u4f5c\u540c\u65f6\u53d1\u751f\u3002\u4fdd\u8bc1\u5728\u66ff\u6362\u65f6\u4e0d\u4f1a\u6709\u4efb\u4f55\u91cd\u53e0\uff1a&nbsp;<code>S = &quot;abc&quot;, indexes = [0, 1],&nbsp;sources = [&quot;ab&quot;,&quot;bc&quot;]</code> \u4e0d\u662f\u6709\u6548\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;abcd&quot;, indexes = [0,2], sources = [&quot;a&quot;,&quot;cd&quot;], targets = [&quot;eee&quot;,&quot;ffff&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;eeebffff&quot;\n<strong>\u89e3\u91ca\uff1a\n</strong>&quot;a&quot; \u4ece S \u4e2d\u7684\u7d22\u5f15 0 \u5f00\u59cb\uff0c\u6240\u4ee5\u5b83\u88ab\u66ff\u6362\u4e3a &quot;eee&quot;\u3002\n&quot;cd&quot; \u4ece S \u4e2d\u7684\u7d22\u5f15 2 \u5f00\u59cb\uff0c\u6240\u4ee5\u5b83\u88ab\u66ff\u6362\u4e3a &quot;ffff&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;abcd&quot;, indexes = [0,2], sources = [&quot;ab&quot;,&quot;ec&quot;], targets = [&quot;eee&quot;,&quot;ffff&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;eeecd&quot;\n<strong>\u89e3\u91ca\uff1a\n</strong>&quot;ab&quot; \u4ece S \u4e2d\u7684\u7d22\u5f15 0 \u5f00\u59cb\uff0c\u6240\u4ee5\u5b83\u88ab\u66ff\u6362\u4e3a &quot;eee&quot;\u3002\n&quot;ec&quot; \u6ca1\u6709\u4ece<strong>\u539f\u59cb\u7684</strong> S \u4e2d\u7684\u7d22\u5f15 2 \u5f00\u59cb\uff0c\u6240\u4ee5\u5b83\u6ca1\u6709\u88ab\u66ff\u6362\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;=&nbsp;indexes.length =&nbsp;sources.length =&nbsp;targets.length &lt;= 100</code></li>\n\t<li><code>0&nbsp;&lt;&nbsp;indexes[i]&nbsp;&lt; S.length &lt;= 1000</code></li>\n\t<li>\u7ed9\u5b9a\u8f93\u5165\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u5b57\u7b26\u4e32\u4e2d\u7684\u67e5\u627e\u4e0e\u66ff\u6362",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "834",
        "link": "sum-of-distances-in-tree",
        "title": "Sum of Distances in Tree",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "23.5%",
        "questionDescription": "<p>An undirected, connected&nbsp;tree with <code>N</code> nodes labelled <code>0...N-1</code> and <code>N-1</code> <code>edges</code>&nbsp;are&nbsp;given.</p>\r\n\r\n<p>The <code>i</code>th edge connects nodes&nbsp;<code>edges[i][0] </code>and<code>&nbsp;edges[i][1]</code>&nbsp;together.</p>\r\n\r\n<p>Return a list <code>ans</code>, where <code>ans[i]</code> is the sum of the distances between node <code>i</code> and all other nodes.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\r\n<strong>Output: </strong>[8,12,6,10,10,10]\r\n<strong>Explanation: </strong>\r\nHere is a diagram of the given tree:\r\n  0\r\n / \\\r\n1   2\r\n   /|\\\r\n  3 4 5\r\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\r\nequals 1 + 1 + 2 + 2 + 2 = 8.  Hence, answer[0] = 8, and so on.\r\n</pre>\r\n\r\n<p>Note:<font face=\"monospace\">&nbsp;<code>1 &lt;= N &lt;= 10000</code></font></p>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u3001\u8fde\u901a\u7684\u6811\u3002\u6811\u4e2d\u6709 <code>N</code> \u4e2a\u6807\u8bb0\u4e3a <code>0...N-1</code> \u7684\u8282\u70b9\u4ee5\u53ca <code>N-1</code>&nbsp;\u6761\u8fb9&nbsp;\u3002</p>\n\n<p>\u7b2c <code>i</code> \u6761\u8fb9\u8fde\u63a5\u8282\u70b9&nbsp;<code>edges[i][0]</code> \u548c <code>edges[i][1]</code>&nbsp;\u3002</p>\n\n<p>\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8282\u70b9 <code>i</code> \u4e0e\u5176\u4ed6\u6240\u6709\u8282\u70b9\u8ddd\u79bb\u4e4b\u548c\u7684\u5217\u8868 <code>ans</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre>\n<strong>\u8f93\u5165: </strong>N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\n<strong>\u8f93\u51fa: </strong>[8,12,6,10,10,10]\n<strong>\u89e3\u91ca: </strong>\n\u5982\u4e0b\u4e3a\u7ed9\u5b9a\u7684\u6811\u7684\u793a\u610f\u56fe\uff1a\n  0\n / \\\n1   2\n   /|\\\n  3 4 5\n\n\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5) \n\u4e5f\u5c31\u662f 1 + 1 + 2 + 2 + 2 = 8\u3002 \u56e0\u6b64\uff0canswer[0] = 8\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n</pre>\n\n<p><strong>\u8bf4\u660e:</strong>&nbsp;<code>1 &lt;= N &lt;= 10000</code></p>\n",
        "titleZh": "\u6811\u4e2d\u8ddd\u79bb\u4e4b\u548c",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "835",
        "link": "image-overlap",
        "title": "Image Overlap",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "53.2%",
        "questionDescription": "<p>Two images <code>A</code> and <code>B</code> are given, represented as&nbsp;binary, square matrices of the same size.&nbsp; (A binary matrix has only 0s and 1s as values.)</p>\r\n\r\n<p>We translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the other image.&nbsp; After, the <em>overlap</em> of this translation is the number of positions that have a 1 in both images.</p>\r\n\r\n<p>(Note also that a translation does <strong>not</strong> include any kind of rotation.)</p>\r\n\r\n<p>What is the largest possible overlap?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = [[1,1,0],\r\n            [0,1,0],\r\n&nbsp;           [0,1,0]]\r\n&nbsp;      B = [[0,0,0],\r\n&nbsp;           [0,1,1],\r\n&nbsp;           [0,0,1]]\r\n<strong>Output: </strong>3\r\n<strong>Explanation:</strong> We slide A to right by 1 unit and down by 1 unit.</pre>\r\n\r\n<p><strong>Notes:</strong>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length = A[0].length = B.length = B[0].length &lt;= 30</code></li>\r\n\t<li><code>0 &lt;=&nbsp;A[i][j], B[i][j] &lt;= 1</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e24\u4e2a\u56fe\u50cf <code>A</code> \u548c <code>B</code>&nbsp;\uff0c<code>A</code> \u548c <code>B</code>&nbsp;\u4e3a\u5927\u5c0f\u76f8\u540c\u7684\u4e8c\u7ef4\u6b63\u65b9\u5f62\u77e9\u9635\u3002\uff08\u5e76\u4e14\u4e3a\u4e8c\u8fdb\u5236\u77e9\u9635\uff0c\u53ea\u5305\u542b0\u548c1\uff09\u3002</p>\n\n<p>\u6211\u4eec\u8f6c\u6362\u5176\u4e2d\u4e00\u4e2a\u56fe\u50cf\uff0c\u5411\u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u6216\u4e0b\u6ed1\u52a8\u4efb\u4f55\u6570\u91cf\u7684\u5355\u4f4d\uff0c\u5e76\u628a\u5b83\u653e\u5728\u53e6\u4e00\u4e2a\u56fe\u50cf\u7684\u4e0a\u9762\u3002\u4e4b\u540e\uff0c\u8be5\u8f6c\u6362\u7684\u91cd\u53e0\u662f\u6307\u4e24\u4e2a\u56fe\u50cf\u90fd\u5177\u6709 1 \u7684\u4f4d\u7f6e\u7684\u6570\u76ee\u3002</p>\n\n<p>\uff08\u8bf7\u6ce8\u610f\uff0c\u8f6c\u6362\u4e0d\u5305\u62ec\u5411\u4efb\u4f55\u65b9\u5411\u65cb\u8f6c\u3002\uff09</p>\n\n<p>\u6700\u5927\u53ef\u80fd\u7684\u91cd\u53e0\u662f\u4ec0\u4e48\uff1f</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [[1,1,0],\n          [0,1,0],\n&nbsp;         [0,1,0]]\n&nbsp;    B = [[0,0,0],\n&nbsp;         [0,1,1],\n&nbsp;         [0,0,1]]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca:</strong> \u5c06 A \u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\uff0c\u7136\u540e\u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\u3002</pre>\n\n<p><strong>\u6ce8\u610f:</strong>&nbsp;</p>\n\n<ol>\n\t<li><code>1 &lt;= A.length = A[0].length = B.length = B[0].length &lt;= 30</code></li>\n\t<li><code>0 &lt;=&nbsp;A[i][j], B[i][j] &lt;= 1</code></li>\n</ol>\n",
        "titleZh": "\u56fe\u50cf\u91cd\u53e0",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "836",
        "link": "rectangle-overlap",
        "title": "Rectangle Overlap",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "39.0%",
        "questionDescription": "<p>A rectangle is&nbsp;represented as a&nbsp;list <code>[x1, y1, x2, y2]</code>, where&nbsp;<code>(x1, y1)</code>&nbsp;are the coordinates of its bottom-left corner, and <code>(x2,&nbsp;y2)</code>&nbsp;are the coordinates of its top-right corner.</p>\r\n\r\n<p>Two rectangles overlap if the area of their intersection is positive.&nbsp; To be clear, two rectangles that only touch at the corner or edges do not overlap.</p>\r\n\r\n<p>Given two (axis-aligned) rectangles, return whether&nbsp;they overlap.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>rec1 = [0,0,2,2], rec2 = [1,1,3,3]\r\n<strong>Output: </strong>true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>rec1 = [0,0,1,1], rec2 = [1,0,2,1]\r\n<strong>Output: </strong>false\r\n</pre>\r\n\r\n<p><strong>Notes:</strong></p>\r\n\r\n<ol>\r\n\t<li>Both rectangles <code>rec1</code> and <code>rec2</code> are lists of 4 integers.</li>\r\n\t<li>All coordinates in rectangles will be between&nbsp;<code>-10^9 </code>and<code> 10^9</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u77e9\u5f62\u4ee5\u5217\u8868 <code>[x1, y1, x2, y2]</code> \u7684\u5f62\u5f0f\u8868\u793a\uff0c\u5176\u4e2d <code>(x1, y1)</code> \u4e3a\u5de6\u4e0b\u89d2\u7684\u5750\u6807\uff0c<code>(x2, y2)</code> \u662f\u53f3\u4e0a\u89d2\u7684\u5750\u6807\u3002</p>\n\n<p>\u5982\u679c\u76f8\u4ea4\u7684\u9762\u79ef\u4e3a\u6b63\uff0c\u5219\u79f0\u4e24\u77e9\u5f62\u91cd\u53e0\u3002\u9700\u8981\u660e\u786e\u7684\u662f\uff0c\u53ea\u5728\u89d2\u6216\u8fb9\u63a5\u89e6\u7684\u4e24\u4e2a\u77e9\u5f62\u4e0d\u6784\u6210\u91cd\u53e0\u3002</p>\n\n<p>\u7ed9\u51fa\u4e24\u4e2a\u77e9\u5f62\uff0c\u5224\u65ad\u5b83\u4eec\u662f\u5426\u91cd\u53e0\u5e76\u8fd4\u56de\u7ed3\u679c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>rec1 = [0,0,2,2], rec2 = [1,1,3,3]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>rec1 = [0,0,1,1], rec2 = [1,0,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong></p>\n\n<ol>\n\t<li>\u4e24\u4e2a\u77e9\u5f62 <code>rec1</code> \u548c <code>rec2</code> \u90fd\u4ee5\u542b\u6709\u56db\u4e2a\u6574\u6570\u7684\u5217\u8868\u7684\u5f62\u5f0f\u7ed9\u51fa\u3002</li>\n\t<li>\u77e9\u5f62\u4e2d\u7684\u6240\u6709\u5750\u6807\u90fd\u5904\u4e8e <code>-10^9</code> \u548c <code>10^9</code> \u4e4b\u95f4\u3002</li>\n</ol>\n",
        "titleZh": "\u77e9\u5f62\u91cd\u53e0",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft",
            "Bloomberg",
            "Adobe",
            "Nvidia"
        ]
    },
    {
        "leetId": "837",
        "link": "new-21-game",
        "title": "New 21 Game",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "23.0%",
        "questionDescription": "<p>Alice plays the following game, loosely based on the card game &quot;21&quot;.</p>\r\n\r\n<p>Alice starts with <code>0</code> points, and draws numbers while she has less than <code>K</code> points.&nbsp; During each draw, she gains an integer number of points randomly from the range <code>[1, W]</code>, where <code>W</code> is an integer.&nbsp; Each draw is independent and the outcomes have equal probabilities.</p>\r\n\r\n<p>Alice stops drawing numbers when she gets <code>K</code> or more points.&nbsp; What is the probability&nbsp;that she has <code>N</code> or less points?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = 10, K = 1, W = 10\r\n<strong>Output: </strong>1.00000\r\n<strong>Explanation: </strong> Alice gets a single card, then stops.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = 6, K = 1, W = 10\r\n<strong>Output: </strong>0.60000\r\n<strong>Explanation: </strong> Alice gets a single card, then stops.\r\nIn 6 out of W = 10 possibilities, she is at or below N = 6 points.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = 21, K = 17, W = 10\r\n<strong>Output: </strong>0.73278</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= K &lt;= N &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= W &lt;= 10000</code></li>\r\n\t<li>Answers will be accepted as correct if they are within <code>10^-5</code> of the correct answer.</li>\r\n\t<li>The judging time limit has been reduced for this question.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7231\u4e3d\u4e1d\u53c2\u4e0e\u4e00\u4e2a\u5927\u81f4\u57fa\u4e8e\u7eb8\u724c\u6e38\u620f &ldquo;21\u70b9&rdquo; \u89c4\u5219\u7684\u6e38\u620f\uff0c\u63cf\u8ff0\u5982\u4e0b\uff1a</p>\n\n<p>\u7231\u4e3d\u4e1d\u4ee5 <code>0</code> \u5206\u5f00\u59cb\uff0c\u5e76\u5728\u5979\u7684\u5f97\u5206\u5c11\u4e8e <code>K</code> \u5206\u65f6\u62bd\u53d6\u6570\u5b57\u3002 \u62bd\u53d6\u65f6\uff0c\u5979\u4ece <code>[1, W]</code> \u7684\u8303\u56f4\u4e2d\u968f\u673a\u83b7\u5f97\u4e00\u4e2a\u6574\u6570\u4f5c\u4e3a\u5206\u6570\u8fdb\u884c\u7d2f\u8ba1\uff0c\u5176\u4e2d <code>W</code> \u662f\u6574\u6570\u3002 \u6bcf\u6b21\u62bd\u53d6\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u5176\u7ed3\u679c\u5177\u6709\u76f8\u540c\u7684\u6982\u7387\u3002</p>\n\n<p>\u5f53\u7231\u4e3d\u4e1d\u83b7\u5f97\u4e0d\u5c11\u4e8e <code>K</code> \u5206\u65f6\uff0c\u5979\u5c31\u505c\u6b62\u62bd\u53d6\u6570\u5b57\u3002 \u7231\u4e3d\u4e1d\u7684\u5206\u6570\u4e0d\u8d85\u8fc7 <code>N</code> \u7684\u6982\u7387\u662f\u591a\u5c11\uff1f</p>\n\n<p><strong>\u793a\u4f8b</strong><strong> 1</strong><strong>\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 10, K = 1, W = 10\n<strong>\u8f93\u51fa\uff1a</strong>1.00000\n<strong>\u8bf4\u660e\uff1a</strong>\u7231\u4e3d\u4e1d\u5f97\u5230\u4e00\u5f20\u5361\uff0c\u7136\u540e\u505c\u6b62\u3002</pre>\n\n<p><strong>\u793a\u4f8b </strong><strong>2</strong><strong>\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 6, K = 1, W = 10\n<strong>\u8f93\u51fa\uff1a</strong>0.60000\n<strong>\u8bf4\u660e\uff1a</strong>\u7231\u4e3d\u4e1d\u5f97\u5230\u4e00\u5f20\u5361\uff0c\u7136\u540e\u505c\u6b62\u3002\n\u5728 W = 10 \u7684 6 \u79cd\u53ef\u80fd\u4e0b\uff0c\u5979\u7684\u5f97\u5206\u4e0d\u8d85\u8fc7 N = 6 \u5206\u3002</pre>\n\n<p><strong>\u793a\u4f8b </strong><strong>3</strong><strong>\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 21, K = 17, W = 10\n<strong>\u8f93\u51fa\uff1a</strong>0.73278</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= K &lt;= N &lt;= 10000</code></li>\n\t<li><code>1 &lt;= W &lt;= 10000</code></li>\n\t<li>\u5982\u679c\u7b54\u6848\u4e0e\u6b63\u786e\u7b54\u6848\u7684\u8bef\u5dee\u4e0d\u8d85\u8fc7 <code>10^-5</code>\uff0c\u5219\u8be5\u7b54\u6848\u5c06\u88ab\u89c6\u4e3a\u6b63\u786e\u7b54\u6848\u901a\u8fc7\u3002</li>\n\t<li>\u6b64\u95ee\u9898\u7684\u5224\u65ad\u9650\u5236\u65f6\u95f4\u5df2\u7ecf\u51cf\u5c11\u3002</li>\n</ol>\n",
        "titleZh": "\u65b021\u70b9",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "838",
        "link": "push-dominoes",
        "title": "Push Dominoes",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "35.2%",
        "questionDescription": "<p>There are<font face=\"monospace\">&nbsp;<code>N</code></font> dominoes in a line, and we place each domino vertically upright.</p>\r\n\r\n<p>In the beginning, we simultaneously push&nbsp;some of the dominoes either to the left or to the right.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/05/18/domino.png\" style=\"height: 160px;\" /></p>\r\n\r\n<p>After each second, each domino that is falling to the left pushes the adjacent domino on the left.</p>\r\n\r\n<p>Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.</p>\r\n\r\n<p>When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.</p>\r\n\r\n<p>For the purposes of this question, we will consider that a falling domino&nbsp;expends no additional force to a falling or already fallen domino.</p>\r\n\r\n<p>Given a string &quot;S&quot; representing the initial state.&nbsp;<code>S[i] = &#39;L&#39;</code>, if the i-th domino has been pushed to the left; <code>S[i] = &#39;R&#39;</code>, if the i-th domino has been pushed to the right; <code>S[i] = &#39;.&#39;</code>,&nbsp;if the <code>i</code>-th domino has not been pushed.</p>\r\n\r\n<p>Return a string representing the final state.&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;.L.R...LR..L..&quot;\r\n<strong>Output: </strong>&quot;LL.RR.LLRRLL..&quot;\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;RR.L&quot;\r\n<strong>Output: </strong>&quot;RR.L&quot;\r\n<strong>Explanation: </strong>The first domino expends no additional force on the second domino.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= N&nbsp;&lt;= 10^5</code></li>\r\n\t<li>String&nbsp;<code>dominoes</code> contains only&nbsp;<code>&#39;L</code>&#39;, <code>&#39;R&#39;</code> and <code>&#39;.&#39;</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u4e00\u884c\u4e2d\u6709 <code>N</code> \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\uff0c\u6211\u4eec\u5c06\u6bcf\u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u5782\u76f4\u7ad6\u7acb\u3002</p>\n\n<p>\u5728\u5f00\u59cb\u65f6\uff0c\u6211\u4eec\u540c\u65f6\u628a\u4e00\u4e9b\u591a\u7c73\u8bfa\u9aa8\u724c\u5411\u5de6\u6216\u5411\u53f3\u63a8\u3002</p>\n\n<p><img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/05/19/domino.png\" style=\"height: 160px; width: 418px;\"></p>\n\n<p>\u6bcf\u8fc7\u4e00\u79d2\uff0c\u5012\u5411\u5de6\u8fb9\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4f1a\u63a8\u52a8\u5176\u5de6\u4fa7\u76f8\u90bb\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u3002</p>\n\n<p>\u540c\u6837\u5730\uff0c\u5012\u5411\u53f3\u8fb9\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4e5f\u4f1a\u63a8\u52a8\u7ad6\u7acb\u5728\u5176\u53f3\u4fa7\u7684\u76f8\u90bb\u591a\u7c73\u8bfa\u9aa8\u724c\u3002</p>\n\n<p>\u5982\u679c\u540c\u65f6\u6709\u591a\u7c73\u8bfa\u9aa8\u724c\u843d\u5728\u4e00\u5f20\u5782\u76f4\u7ad6\u7acb\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u7684\u4e24\u8fb9\uff0c\u7531\u4e8e\u53d7\u529b\u5e73\u8861\uff0c \u8be5\u9aa8\u724c\u4ecd\u7136\u4fdd\u6301\u4e0d\u53d8\u3002</p>\n\n<p>\u5c31\u8fd9\u4e2a\u95ee\u9898\u800c\u8a00\uff0c\u6211\u4eec\u4f1a\u8ba4\u4e3a\u6b63\u5728\u4e0b\u964d\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u4e0d\u4f1a\u5bf9\u5176\u5b83\u6b63\u5728\u4e0b\u964d\u6216\u5df2\u7ecf\u4e0b\u964d\u7684\u591a\u7c73\u8bfa\u9aa8\u724c\u65bd\u52a0\u989d\u5916\u7684\u529b\u3002</p>\n\n<p>\u7ed9\u5b9a\u8868\u793a\u521d\u59cb\u72b6\u6001\u7684\u5b57\u7b26\u4e32 &quot;S&quot; \u3002\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u88ab\u63a8\u5411\u5de6\u8fb9\uff0c\u5219 <code>S[i] = &#39;L&#39;</code>\uff1b\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u88ab\u63a8\u5411\u53f3\u8fb9\uff0c\u5219 <code>S[i] = &#39;R&#39;</code>\uff1b\u5982\u679c\u7b2c i \u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u6ca1\u6709\u88ab\u63a8\u52a8\uff0c\u5219 <code>S[i] = &#39;.&#39;</code>\u3002</p>\n\n<p>\u8fd4\u56de\u8868\u793a\u6700\u7ec8\u72b6\u6001\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b </strong><strong>1</strong><strong>\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;.L.R...LR..L..&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;LL.RR.LLRRLL..&quot;</pre>\n\n<p><strong>\u793a\u4f8b </strong><strong>2</strong><strong>\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;RR.L&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;RR.L&quot;\n<strong>\u8bf4\u660e\uff1a</strong>\u7b2c\u4e00\u5f20\u591a\u7c73\u8bfa\u9aa8\u724c\u6ca1\u6709\u7ed9\u7b2c\u4e8c\u5f20\u65bd\u52a0\u989d\u5916\u7684\u529b\u3002</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= N &lt;= 10^5</code></li>\n\t<li>\u8868\u793a\u591a\u7c73\u8bfa\u9aa8\u724c\u72b6\u6001\u7684\u5b57\u7b26\u4e32\u53ea\u542b\u6709 <code>&#39;L&#39;</code>\uff0c<code>&#39;R&#39;</code>; \u4ee5\u53ca <code>&#39;.&#39;</code>;</li>\n</ol>\n",
        "titleZh": "\u63a8\u591a\u7c73\u8bfa",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "839",
        "link": "similar-string-groups",
        "title": "Similar String Groups",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "21.3%",
        "questionDescription": "<p>Two strings <code>X</code>&nbsp;and <code>Y</code>&nbsp;are similar if we can swap two letters (in different positions) of <code>X</code>, so that&nbsp;it equals <code>Y</code>.</p>\r\n\r\n<p>For example, <code>&quot;tars&quot;</code>&nbsp;and <code>&quot;rats&quot;</code>&nbsp;are similar (swapping at positions <code>0</code> and <code>2</code>), and <code>&quot;rats&quot;</code> and <code>&quot;arts&quot;</code> are similar, but <code>&quot;star&quot;</code> is not similar to <code>&quot;tars&quot;</code>, <code>&quot;rats&quot;</code>, or <code>&quot;arts&quot;</code>.</p>\r\n\r\n<p>Together, these form two connected groups by similarity: <code>{&quot;tars&quot;, &quot;rats&quot;, &quot;arts&quot;}</code> and <code>{&quot;star&quot;}</code>.&nbsp; Notice that <code>&quot;tars&quot;</code> and <code>&quot;arts&quot;</code> are in the same group even though they are not similar.&nbsp; Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.</p>\r\n\r\n<p>We are given a list <code>A</code> of strings.&nbsp; Every string in <code>A</code> is an anagram of every other string in <code>A</code>.&nbsp; How many groups are there?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[&quot;tars&quot;,&quot;rats&quot;,&quot;arts&quot;,&quot;star&quot;]\r\n<strong>Output: </strong>2</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>A.length &lt;= 2000</code></li>\r\n\t<li><code>A[i].length &lt;= 1000</code></li>\r\n\t<li><code>A.length * A[i].length &lt;= 20000</code></li>\r\n\t<li>All words in <code>A</code>&nbsp;consist of lowercase letters only.</li>\r\n\t<li>All words in <code>A</code> have the same length and are anagrams of each other.</li>\r\n\t<li>The judging time limit has been increased for this question.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5982\u679c\u6211\u4eec\u4ea4\u6362\u5b57\u7b26\u4e32&nbsp;<code>X</code> \u4e2d\u7684\u4e24\u4e2a\u4e0d\u540c\u4f4d\u7f6e\u7684\u5b57\u6bcd\uff0c\u4f7f\u5f97\u5b83\u548c\u5b57\u7b26\u4e32&nbsp;<code>Y</code> \u76f8\u7b49\uff0c\u90a3\u4e48\u79f0 <code>X</code> \u548c <code>Y</code> \u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u4f3c\u3002</p>\n\n<p>\u4f8b\u5982\uff0c<code>&quot;tars&quot;</code> \u548c <code>&quot;rats&quot;</code> \u662f\u76f8\u4f3c\u7684 (\u4ea4\u6362 <code>0</code> \u4e0e <code>2</code> \u7684\u4f4d\u7f6e)\uff1b&nbsp;<code>&quot;rats&quot;</code> \u548c <code>&quot;arts&quot;</code> \u4e5f\u662f\u76f8\u4f3c\u7684\uff0c\u4f46\u662f <code>&quot;star&quot;</code> \u4e0d\u4e0e <code>&quot;tars&quot;</code>\uff0c<code>&quot;rats&quot;</code>\uff0c\u6216 <code>&quot;arts&quot;</code> \u76f8\u4f3c\u3002</p>\n\n<p>\u603b\u4e4b\uff0c\u5b83\u4eec\u901a\u8fc7\u76f8\u4f3c\u6027\u5f62\u6210\u4e86\u4e24\u4e2a\u5173\u8054\u7ec4\uff1a<code>{&quot;tars&quot;, &quot;rats&quot;, &quot;arts&quot;}</code> \u548c <code>{&quot;star&quot;}</code>\u3002\u6ce8\u610f\uff0c<code>&quot;tars&quot;</code> \u548c <code>&quot;arts&quot;</code> \u662f\u5728\u540c\u4e00\u7ec4\u4e2d\uff0c\u5373\u4f7f\u5b83\u4eec\u5e76\u4e0d\u76f8\u4f3c\u3002\u5f62\u5f0f\u4e0a\uff0c\u5bf9\u6bcf\u4e2a\u7ec4\u800c\u8a00\uff0c\u8981\u786e\u5b9a\u4e00\u4e2a\u5355\u8bcd\u5728\u7ec4\u4e2d\uff0c\u53ea\u9700\u8981\u8fd9\u4e2a\u8bcd\u548c\u8be5\u7ec4\u4e2d\u81f3\u5c11\u4e00\u4e2a\u5355\u8bcd\u76f8\u4f3c\u3002</p>\n\n<p>\u6211\u4eec\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4e0d\u5305\u542b\u91cd\u590d\u7684\u5b57\u7b26\u4e32\u5217\u8868 <code>A</code>\u3002\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u662f <code>A</code> \u4e2d\u5176\u5b83\u6240\u6709\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002\u8bf7\u95ee <code>A</code> \u4e2d\u6709\u591a\u5c11\u4e2a\u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4\uff1f</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;tars&quot;,&quot;rats&quot;,&quot;arts&quot;,&quot;star&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>2</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>A.length &lt;= 2000</code></li>\n\t<li><code>A[i].length &lt;= 1000</code></li>\n\t<li><code>A.length * A[i].length &lt;= 20000</code></li>\n\t<li><code>A</code> \u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li><code>A</code> \u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u4e14\u662f\u5f7c\u6b64\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002</li>\n\t<li>\u6b64\u95ee\u9898\u7684\u5224\u65ad\u9650\u5236\u65f6\u95f4\u5df2\u7ecf\u5ef6\u957f\u3002</li>\n</ol>\n\n<p><strong>\u5907\u6ce8\uff1a</strong></p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \u5b57\u6bcd\u5f02\u4f4d\u8bcd[anagram]\uff0c\u4e00\u79cd\u628a\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u6bcd\u7684\u4f4d\u7f6e\uff08\u987a\u5e8f\uff09\u52a0\u4ee5\u6539\u6362\u6240\u5f62\u6210\u7684\u65b0\u8bcd\u3002</p>\n",
        "titleZh": "\u76f8\u4f3c\u5b57\u7b26\u4e32\u7ec4",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "840",
        "link": "magic-squares-in-grid",
        "title": "Magic Squares In Grid",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "31.1%",
        "questionDescription": "<p>A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers <strong>from 1 to 9</strong> such that each row, column, and both diagonals all have the same sum.</p>\r\n\r\n<p>Given an <code>grid</code>&nbsp;of integers, how many 3 x 3 &quot;magic square&quot; subgrids are there?&nbsp; (Each subgrid is contiguous).</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[4,3,8,4],\r\n        [9,5,1,9],\r\n        [2,7,6,2]]\r\n<strong>Output: </strong>1\r\n<strong>Explanation: </strong>\r\nThe following subgrid is a 3 x 3 magic square:\r\n438\r\n951\r\n276\r\n\r\nwhile this one is not:\r\n384\r\n519\r\n762\r\n\r\nIn total, there is only one magic square inside the given grid.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= grid.length&nbsp;&lt;= 10</code></li>\r\n\t<li><code>1 &lt;= grid[0].length&nbsp;&lt;= 10</code></li>\r\n\t<li><code>0 &lt;= grid[i][j] &lt;= 15</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>3 x 3 \u7684\u5e7b\u65b9\u662f\u4e00\u4e2a\u586b\u5145\u6709<strong>\u4ece 1 \u5230 9</strong> \u7684\u4e0d\u540c\u6570\u5b57\u7684 3 x 3 \u77e9\u9635\uff0c\u5176\u4e2d\u6bcf\u884c\uff0c\u6bcf\u5217\u4ee5\u53ca\u4e24\u6761\u5bf9\u89d2\u7ebf\u4e0a\u7684\u5404\u6570\u4e4b\u548c\u90fd\u76f8\u7b49\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684 <code>grid</code>\uff0c\u5176\u4e2d\u6709\u591a\u5c11\u4e2a 3 &times; 3 \u7684 &ldquo;\u5e7b\u65b9&rdquo; \u5b50\u77e9\u9635\uff1f\uff08\u6bcf\u4e2a\u5b50\u77e9\u9635\u90fd\u662f\u8fde\u7eed\u7684\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[[4,3,8,4],\n      [9,5,1,9],\n      [2,7,6,2]]\n<strong>\u8f93\u51fa: </strong>1\n<strong>\u89e3\u91ca: </strong>\n\u4e0b\u9762\u7684\u5b50\u77e9\u9635\u662f\u4e00\u4e2a 3 x 3 \u7684\u5e7b\u65b9\uff1a\n438\n951\n276\n\n\u800c\u8fd9\u4e00\u4e2a\u4e0d\u662f\uff1a\n384\n519\n762\n\n\u603b\u7684\u6765\u8bf4\uff0c\u5728\u672c\u793a\u4f8b\u6240\u7ed9\u5b9a\u7684\u77e9\u9635\u4e2d\u53ea\u6709\u4e00\u4e2a 3 x 3 \u7684\u5e7b\u65b9\u5b50\u77e9\u9635\u3002\n</pre>\n\n<p><strong>\u63d0\u793a:</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length&nbsp;&lt;= 10</code></li>\n\t<li><code>1 &lt;= grid[0].length&nbsp;&lt;= 10</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 15</code></li>\n</ol>\n",
        "titleZh": "\u77e9\u9635\u4e2d\u7684\u5e7b\u65b9",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "841",
        "link": "keys-and-rooms",
        "title": "Keys and Rooms",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "54.9%",
        "questionDescription": "<p>There are <code>N</code> rooms and you start in room <code>0</code>.&nbsp; Each room has a distinct number in <code>0, 1, 2, ..., N-1</code>, and each room may have&nbsp;some keys to access the next room.&nbsp;</p>\r\n\r\n<p>Formally, each room <code>i</code>&nbsp;has a list of keys <code>rooms[i]</code>, and each key <code>rooms[i][j]</code> is an integer in <code>[0, 1, ..., N-1]</code> where <code>N = rooms.length</code>.&nbsp; A key <code>rooms[i][j] = v</code>&nbsp;opens the room with number <code>v</code>.</p>\r\n\r\n<p>Initially, all the rooms start locked (except for room <code>0</code>).&nbsp;</p>\r\n\r\n<p>You can walk back and forth between rooms freely.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if you can enter&nbsp;every room.</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1],[2],[3],[]]\r\n<strong>Output: </strong>true\r\n<strong>Explanation:  </strong>\r\nWe start in room 0, and pick up key 1.\r\nWe then go to room 1, and pick up key 2.\r\nWe then go to room 2, and pick up key 3.\r\nWe then go to room 3.  Since we were able to go to every room, we return true.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1,3],[3,0,1],[2],[0]]\r\n<strong>Output: </strong>false\r\n<strong>Explanation: </strong>We can&#39;t enter the room with number 2.\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= rooms.length &lt;=&nbsp;1000</code></li>\r\n\t<li><code>0 &lt;= rooms[i].length &lt;= 1000</code></li>\r\n\t<li>The number of keys in all rooms combined is at most&nbsp;<code>3000</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u6709 <code>N</code> \u4e2a\u623f\u95f4\uff0c\u5f00\u59cb\u65f6\u4f60\u4f4d\u4e8e <code>0</code> \u53f7\u623f\u95f4\u3002\u6bcf\u4e2a\u623f\u95f4\u6709\u4e0d\u540c\u7684\u53f7\u7801\uff1a<code>0\uff0c1\uff0c2\uff0c...\uff0cN-1</code>\uff0c\u5e76\u4e14\u623f\u95f4\u91cc\u53ef\u80fd\u6709\u4e00\u4e9b\u94a5\u5319\u80fd\u4f7f\u4f60\u8fdb\u5165\u4e0b\u4e00\u4e2a\u623f\u95f4\u3002</p>\n\n<p>\u5728\u5f62\u5f0f\u4e0a\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u623f\u95f4 <code>i</code> \u90fd\u6709\u4e00\u4e2a\u94a5\u5319\u5217\u8868 <code>rooms[i]</code>\uff0c\u6bcf\u4e2a\u94a5\u5319 <code>rooms[i][j]</code> \u7531 <code>[0,1\uff0c...\uff0cN-1]</code> \u4e2d\u7684\u4e00\u4e2a\u6574\u6570\u8868\u793a\uff0c\u5176\u4e2d <code>N = rooms.length</code>\u3002 \u94a5\u5319 <code>rooms[i][j] = v</code> \u53ef\u4ee5\u6253\u5f00\u7f16\u53f7\u4e3a <code>v</code> \u7684\u623f\u95f4\u3002</p>\n\n<p>\u6700\u521d\uff0c\u9664 <code>0</code> \u53f7\u623f\u95f4\u5916\u7684\u5176\u4f59\u6240\u6709\u623f\u95f4\u90fd\u88ab\u9501\u4f4f\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u81ea\u7531\u5730\u5728\u623f\u95f4\u4e4b\u95f4\u6765\u56de\u8d70\u52a8\u3002</p>\n\n<p>\u5982\u679c\u80fd\u8fdb\u5165\u6bcf\u4e2a\u623f\u95f4\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[[1],[2],[3],[]]\n<strong>\u8f93\u51fa: </strong>true\n<strong>\u89e3\u91ca:  </strong>\n\u6211\u4eec\u4ece 0 \u53f7\u623f\u95f4\u5f00\u59cb\uff0c\u62ff\u5230\u94a5\u5319 1\u3002\n\u4e4b\u540e\u6211\u4eec\u53bb 1 \u53f7\u623f\u95f4\uff0c\u62ff\u5230\u94a5\u5319 2\u3002\n\u7136\u540e\u6211\u4eec\u53bb 2 \u53f7\u623f\u95f4\uff0c\u62ff\u5230\u94a5\u5319 3\u3002\n\u6700\u540e\u6211\u4eec\u53bb\u4e86 3 \u53f7\u623f\u95f4\u3002\n\u7531\u4e8e\u6211\u4eec\u80fd\u591f\u8fdb\u5165\u6bcf\u4e2a\u623f\u95f4\uff0c\u6211\u4eec\u8fd4\u56de true\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,3],[3,0,1],[2],[0]]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u4e0d\u80fd\u8fdb\u5165 2 \u53f7\u623f\u95f4\u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= rooms.length &lt;=&nbsp;1000</code></li>\n\t<li><code>0 &lt;= rooms[i].length &lt;= 1000</code></li>\n\t<li>\u6240\u6709\u623f\u95f4\u4e2d\u7684\u94a5\u5319\u6570\u91cf\u603b\u8ba1\u4e0d\u8d85\u8fc7&nbsp;<code>3000</code>\u3002</li>\n</ol>\n",
        "titleZh": "\u94a5\u5319\u548c\u623f\u95f4",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "companies": [
            "Google",
            "Amazon"
        ]
    },
    {
        "leetId": "842",
        "link": "split-array-into-fibonacci-sequence",
        "title": "Split Array into Fibonacci Sequence",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "30.5%",
        "questionDescription": "<p>Given a string <code>S</code>&nbsp;of digits, such as <code>S = &quot;123456579&quot;</code>, we can split it into a <em>Fibonacci-like sequence</em>&nbsp;<code>[123, 456, 579].</code></p>\r\n\r\n<p>Formally, a Fibonacci-like sequence is a list&nbsp;<code>F</code> of non-negative integers such that:</p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= F[i] &lt;= 2^31 - 1</code>, (that is,&nbsp;each integer fits a 32-bit signed integer type);</li>\r\n\t<li><code>F.length &gt;= 3</code>;</li>\r\n\t<li>and<code> F[i] + F[i+1] = F[i+2] </code>for all <code>0 &lt;= i &lt; F.length - 2</code>.</li>\r\n</ul>\r\n\r\n<p>Also, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.</p>\r\n\r\n<p>Return any Fibonacci-like sequence split from <code>S</code>, or return <code>[]</code> if it cannot be done.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;123456579&quot;\r\n<strong>Output: </strong>[123,456,579]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;11235813&quot;\r\n<strong>Output: </strong>[1,1,2,3,5,8,13]\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;112358130&quot;\r\n<strong>Output: </strong>[]\r\n<strong>Explanation: </strong>The task is impossible.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;0123&quot;\r\n<strong>Output: </strong>[]\r\n<strong>Explanation: </strong>Leading zeroes are not allowed, so &quot;01&quot;, &quot;2&quot;, &quot;3&quot; is not valid.\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;1101111&quot;\r\n<strong>Output: </strong>[110, 1, 111]\r\n<strong>Explanation: </strong>The output [11, 0, 11, 11] would also be accepted.\r\n</pre>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length&nbsp;&lt;= 200</code></li>\r\n\t<li><code>S</code> contains only digits.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32 <code>S</code>\uff0c\u6bd4\u5982 <code>S = &quot;123456579&quot;</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u5206\u6210\u6590\u6ce2\u90a3\u5951\u5f0f\u7684\u5e8f\u5217 <code>[123, 456, 579]</code>\u3002</p>\n\n<p>\u5f62\u5f0f\u4e0a\uff0c\u6590\u6ce2\u90a3\u5951\u5f0f\u5e8f\u5217\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u5217\u8868 <code>F</code>\uff0c\u4e14\u6ee1\u8db3\uff1a</p>\n\n<ul>\n\t<li><code>0 &lt;= F[i] &lt;= 2^31 - 1</code>\uff0c\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2a\u6574\u6570\u90fd\u7b26\u5408 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7c7b\u578b\uff09\uff1b</li>\n\t<li><code>F.length &gt;= 3</code>\uff1b</li>\n\t<li>\u5bf9\u4e8e\u6240\u6709\u7684<code>0 &lt;= i &lt; F.length - 2</code>\uff0c\u90fd\u6709 <code>F[i] + F[i+1] = F[i+2]</code> \u6210\u7acb\u3002</li>\n</ul>\n\n<p>\u53e6\u5916\uff0c\u8bf7\u6ce8\u610f\uff0c\u5c06\u5b57\u7b26\u4e32\u62c6\u5206\u6210\u5c0f\u5757\u65f6\uff0c\u6bcf\u4e2a\u5757\u7684\u6570\u5b57\u4e00\u5b9a\u4e0d\u8981\u4ee5\u96f6\u5f00\u5934\uff0c\u9664\u975e\u8fd9\u4e2a\u5757\u662f\u6570\u5b57 0 \u672c\u8eab\u3002</p>\n\n<p>\u8fd4\u56de\u4ece <code>S</code> \u62c6\u5206\u51fa\u6765\u7684\u6240\u6709\u6590\u6ce2\u90a3\u5951\u5f0f\u7684\u5e8f\u5217\u5757\uff0c\u5982\u679c\u4e0d\u80fd\u62c6\u5206\u5219\u8fd4\u56de <code>[]</code>\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;123456579&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[123,456,579]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;11235813&quot;\n<strong>\u8f93\u51fa: </strong>[1,1,2,3,5,8,13]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;112358130&quot;\n<strong>\u8f93\u51fa: </strong>[]\n<strong>\u89e3\u91ca: </strong>\u8fd9\u9879\u4efb\u52a1\u65e0\u6cd5\u5b8c\u6210\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;0123&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[]\n<strong>\u89e3\u91ca\uff1a</strong>\u6bcf\u4e2a\u5757\u7684\u6570\u5b57\u4e0d\u80fd\u4ee5\u96f6\u5f00\u5934\uff0c\u56e0\u6b64 &quot;01&quot;\uff0c&quot;2&quot;\uff0c&quot;3&quot; \u4e0d\u662f\u6709\u6548\u7b54\u6848\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>&quot;1101111&quot;\n<strong>\u8f93\u51fa: </strong>[110, 1, 111]\n<strong>\u89e3\u91ca: </strong>\u8f93\u51fa [11,0,11,11] \u4e5f\u540c\u6837\u88ab\u63a5\u53d7\u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length&nbsp;&lt;= 200</code></li>\n\t<li>\u5b57\u7b26\u4e32 <code>S</code> \u4e2d\u53ea\u542b\u6709\u6570\u5b57\u3002</li>\n</ol>\n",
        "titleZh": "\u5c06\u6570\u7ec4\u62c6\u5206\u6210\u6590\u6ce2\u90a3\u5951\u5e8f\u5217",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "843",
        "link": "guess-the-word",
        "title": "Guess the Word",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "25.7%",
        "questionDescription": "<p>This problem is an&nbsp;<strong><em>interactive problem</em></strong>&nbsp;new to the LeetCode platform.</p>\r\n\r\n<p>We are given a word list of unique words, each word is 6 letters long, and one word in this list is chosen as <strong>secret</strong>.</p>\r\n\r\n<p>You may call <code>master.guess(word)</code>&nbsp;to guess a word.&nbsp; The guessed word should have&nbsp;type <code>string</code>&nbsp;and must be from the original list&nbsp;with 6 lowercase letters.</p>\r\n\r\n<p>This function returns an&nbsp;<code>integer</code>&nbsp;type, representing&nbsp;the number of exact matches (value and position) of your guess to the <strong>secret word</strong>.&nbsp; Also, if your guess is not in the given wordlist, it will return <code>-1</code> instead.</p>\r\n\r\n<p>For each test case, you have 10 guesses to guess the word. At the end of any number of calls, if you have made 10 or less calls to <code>master.guess</code>&nbsp;and at least one of these guesses was the <strong>secret</strong>, you pass the testcase.</p>\r\n\r\n<p>Besides the example test case below, there will be 5&nbsp;additional test cases, each with 100 words in the word list.&nbsp; The letters of each word in those testcases were chosen&nbsp;independently at random from <code>&#39;a&#39;</code> to <code>&#39;z&#39;</code>, such that every word in the given word lists is unique.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong>&nbsp;secret = &quot;acckzz&quot;, wordlist = [&quot;acckzz&quot;,&quot;ccbazz&quot;,&quot;eiowzz&quot;,&quot;abcczz&quot;]\r\n\r\n<strong>Explanation:</strong>\r\n\r\n<code>master.guess(&quot;aaaaaa&quot;)</code> returns -1, because&nbsp;<code>&quot;aaaaaa&quot;</code>&nbsp;is not in wordlist.\r\n<code>master.guess(&quot;acckzz&quot;) </code>returns 6, because&nbsp;<code>&quot;acckzz&quot;</code> is secret and has all 6&nbsp;matches.\r\n<code>master.guess(&quot;ccbazz&quot;)</code> returns 3, because<code>&nbsp;&quot;ccbazz&quot;</code>&nbsp;has 3 matches.\r\n<code>master.guess(&quot;eiowzz&quot;)</code> returns 2, because&nbsp;<code>&quot;eiowzz&quot;</code>&nbsp;has 2&nbsp;matches.\r\n<code>master.guess(&quot;abcczz&quot;)</code> returns 4, because&nbsp;<code>&quot;abcczz&quot;</code> has 4 matches.\r\n\r\nWe made 5 calls to&nbsp;master.guess and one of them was the secret, so we pass the test case.\r\n</pre>\r\n\r\n<p><strong>Note:</strong>&nbsp; Any solutions that attempt to circumvent the judge&nbsp;will result in disqualification.</p>\r\n",
        "questionDescriptionZh": "<p>\u8fd9\u4e2a\u95ee\u9898\u662f LeetCode \u5e73\u53f0\u65b0\u589e\u7684<strong><em>\u4ea4\u4e92\u5f0f\u95ee\u9898 </em></strong>\u3002</p>\n\n<p>\u6211\u4eec\u7ed9\u51fa\u4e86\u4e00\u4e2a\u7531\u4e00\u4e9b\u72ec\u7279\u7684\u5355\u8bcd\u7ec4\u6210\u7684\u5355\u8bcd\u5217\u8868\uff0c\u6bcf\u4e2a\u5355\u8bcd\u90fd\u662f 6 \u4e2a\u5b57\u6bcd\u957f\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u5355\u8bcd\u5c06\u88ab\u9009\u4f5c<strong>\u79d8\u5bc6</strong>\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u8c03\u7528 <code>master.guess(word)</code> \u6765\u731c\u5355\u8bcd\u3002\u4f60\u6240\u731c\u7684\u5355\u8bcd\u5e94\u5f53\u662f\u5b58\u5728\u4e8e\u539f\u5217\u8868\u5e76\u4e14\u7531 6 \u4e2a\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u7c7b\u578b<code>\u5b57\u7b26\u4e32</code>\u3002</p>\n\n<p>\u6b64\u51fd\u6570\u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a<code>\u6574\u578b\u6570\u5b57</code>\uff0c\u8868\u793a\u4f60\u7684\u731c\u6d4b\u4e0e<strong>\u79d8\u5bc6\u5355\u8bcd</strong>\u7684\u51c6\u786e\u5339\u914d\uff08\u503c\u548c\u4f4d\u7f6e\u540c\u65f6\u5339\u914d\uff09\u7684\u6570\u76ee\u3002\u6b64\u5916\uff0c\u5982\u679c\u4f60\u7684\u731c\u6d4b\u4e0d\u5728\u7ed9\u5b9a\u7684\u5355\u8bcd\u5217\u8868\u4e2d\uff0c\u5b83\u5c06\u8fd4\u56de <code>-1</code>\u3002</p>\n\n<p>\u5bf9\u4e8e\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4f60\u6709 10 \u6b21\u673a\u4f1a\u6765\u731c\u51fa\u8fd9\u4e2a\u5355\u8bcd\u3002\u5f53\u6240\u6709\u8c03\u7528\u90fd\u7ed3\u675f\u65f6\uff0c\u5982\u679c\u60a8\u5bf9 <code>master.guess</code> \u7684\u8c03\u7528\u4e0d\u8d85\u8fc7 10 \u6b21\uff0c\u5e76\u4e14\u81f3\u5c11\u6709\u4e00\u6b21\u731c\u5230<strong>\u79d8\u5bc6</strong>\uff0c\u90a3\u4e48\u60a8\u5c06\u901a\u8fc7\u8be5\u6d4b\u8bd5\u7528\u4f8b\u3002</p>\n\n<p>\u9664\u4e86\u4e0b\u9762\u793a\u4f8b\u7ed9\u51fa\u7684\u6d4b\u8bd5\u7528\u4f8b\u5916\uff0c\u8fd8\u4f1a\u6709 5 \u4e2a\u989d\u5916\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6bcf\u4e2a\u5355\u8bcd\u5217\u8868\u4e2d\u5c06\u4f1a\u6709 100 \u4e2a\u5355\u8bcd\u3002\u8fd9\u4e9b\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd\u7684\u5b57\u6bcd\u90fd\u662f\u4ece <code>&#39;a&#39;</code> \u5230 <code>&#39;z&#39;</code>&nbsp;\u4e2d\u968f\u673a\u9009\u53d6\u7684\uff0c\u5e76\u4e14\u4fdd\u8bc1\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd\u90fd\u662f\u552f\u4e00\u7684\u3002</p>\n\n<pre><strong>\u793a\u4f8b 1:</strong>\n<strong>\u8f93\u5165:</strong>&nbsp;secret = &quot;acckzz&quot;, wordlist = [&quot;acckzz&quot;,&quot;ccbazz&quot;,&quot;eiowzz&quot;,&quot;abcczz&quot;]\n\n<strong>\u89e3\u91ca:</strong>\n\n<code>master.guess(&quot;aaaaaa&quot;)</code> \u8fd4\u56de -1, \u56e0\u4e3a&nbsp;<code>&quot;aaaaaa&quot;</code>&nbsp;\u4e0d\u5728 wordlist \u4e2d.\n<code>master.guess(&quot;acckzz&quot;) \u8fd4\u56de</code> 6, \u56e0\u4e3a&nbsp;<code>&quot;acckzz&quot;</code> \u5c31\u662f<strong>\u79d8\u5bc6</strong>\uff0c6\u4e2a\u5b57\u6bcd\u5b8c\u5168\u5339\u914d\u3002\n<code>master.guess(&quot;ccbazz&quot;)</code> \u8fd4\u56de 3, \u56e0\u4e3a<code>&nbsp;&quot;ccbazz&quot;</code>&nbsp;\u6709 3 \u4e2a\u5339\u914d\u9879\u3002\n<code>master.guess(&quot;eiowzz&quot;)</code> \u8fd4\u56de 2, \u56e0\u4e3a&nbsp;<code>&quot;eiowzz&quot;</code>&nbsp;\u6709 2 \u4e2a\u5339\u914d\u9879\u3002\n<code>master.guess(&quot;abcczz&quot;)</code> \u8fd4\u56de 4, \u56e0\u4e3a&nbsp;<code>&quot;abcczz&quot;</code> \u6709 4 \u4e2a\u5339\u914d\u9879\u3002\n\n\u6211\u4eec\u8c03\u7528\u4e86 5 \u6b21master.guess\uff0c\u5176\u4e2d\u4e00\u6b21\u731c\u5230\u4e86<strong>\u79d8\u5bc6</strong>\uff0c\u6240\u4ee5\u6211\u4eec\u901a\u8fc7\u4e86\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong>\u4efb\u4f55\u8bd5\u56fe\u7ed5\u8fc7\u8bc4\u5224\u7684\u89e3\u51b3\u65b9\u6848\u90fd\u5c06\u5bfc\u81f4\u6bd4\u8d5b\u8d44\u683c\u88ab\u53d6\u6d88\u3002</p>\n",
        "titleZh": "\u731c\u731c\u8fd9\u4e2a\u5355\u8bcd",
        "tags": [
            {
                "tag": "Minimax",
                "link": "minimax",
                "tagZh": "\u6781\u5c0f\u5316\u6781\u5927"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Airbnb"
        ]
    },
    {
        "leetId": "844",
        "link": "backspace-string-compare",
        "title": "Backspace String Compare",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "46.0%",
        "questionDescription": "<p>Given two&nbsp;strings&nbsp;<code>S</code>&nbsp;and <code>T</code>,&nbsp;return if they are equal when both are typed into empty text editors. <code>#</code> means a backspace character.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-1-1\">&quot;ab#c&quot;</span>, T = <span id=\"example-input-1-2\">&quot;ad#c&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true\r\n</span><span><strong>Explanation</strong>: Both S and T become &quot;ac&quot;.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-2-1\">&quot;ab##&quot;</span>, T = <span id=\"example-input-2-2\">&quot;c#d#&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true\r\n</span><span><strong>Explanation</strong>: Both S and T become &quot;&quot;.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-3-1\">&quot;a##c&quot;</span>, T = <span id=\"example-input-3-2\">&quot;#a#c&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true\r\n</span><span><strong>Explanation</strong>: Both S and T become &quot;c&quot;.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-4-1\">&quot;a#c&quot;</span>, T = <span id=\"example-input-4-2\">&quot;b&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">false\r\n</span><span><strong>Explanation</strong>: S becomes &quot;c&quot; while T becomes &quot;b&quot;.</span>\r\n</pre>\r\n\r\n<p><span><strong>Note</strong>:</span></p>\r\n\r\n<ol>\r\n\t<li><code><span>1 &lt;= S.length &lt;= 200</span></code></li>\r\n\t<li><code><span>1 &lt;= T.length &lt;= 200</span></code></li>\r\n\t<li><span><code>S</code>&nbsp;and <code>T</code> only contain&nbsp;lowercase letters and <code>&#39;#&#39;</code> characters.</span></li>\r\n</ol>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ul>\r\n\t<li>Can you solve it in <code>O(N)</code> time and <code>O(1)</code> space?</li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a <code>S</code> \u548c <code>T</code> \u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u5f53\u5b83\u4eec\u5206\u522b\u88ab\u8f93\u5165\u5230\u7a7a\u767d\u7684\u6587\u672c\u7f16\u8f91\u5668\u540e\uff0c\u5224\u65ad\u4e8c\u8005\u662f\u5426\u76f8\u7b49\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 <code>#</code> \u4ee3\u8868\u9000\u683c\u5b57\u7b26\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;ab#c&quot;, T = &quot;ad#c&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>S \u548c T \u90fd\u4f1a\u53d8\u6210 &ldquo;ac&rdquo;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;ab##&quot;, T = &quot;c#d#&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>S \u548c T \u90fd\u4f1a\u53d8\u6210 &ldquo;&rdquo;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;a##c&quot;, T = &quot;#a#c&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>S \u548c T \u90fd\u4f1a\u53d8\u6210 &ldquo;c&rdquo;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;a#c&quot;, T = &quot;b&quot;\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>S \u4f1a\u53d8\u6210 &ldquo;c&rdquo;\uff0c\u4f46 T \u4ecd\u7136\u662f &ldquo;b&rdquo;\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= T.length &lt;= 200</code></li>\n\t<li><code>S</code> \u548c <code>T</code> \u53ea\u542b\u6709\u5c0f\u5199\u5b57\u6bcd\u4ee5\u53ca\u5b57\u7b26 <code>&#39;#&#39;</code>\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u6bd4\u8f83\u542b\u9000\u683c\u7684\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google",
            "Facebook",
            "Uber"
        ]
    },
    {
        "leetId": "845",
        "link": "longest-mountain-in-array",
        "title": "Longest Mountain in Array",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "27.5%",
        "questionDescription": "<p>Let&#39;s call any (contiguous) subarray B (of A)&nbsp;a <em>mountain</em> if the following properties hold:</p>\r\n\r\n<ul>\r\n\t<li><code>B.length &gt;= 3</code></li>\r\n\t<li>There exists some <code>0 &lt; i&nbsp;&lt; B.length - 1</code> such that <code>B[0] &lt; B[1] &lt; ... B[i-1] &lt; B[i] &gt; B[i+1] &gt; ... &gt; B[B.length - 1]</code></li>\r\n</ul>\r\n\r\n<p>(Note that B could be any subarray of A, including the entire array A.)</p>\r\n\r\n<p>Given an array <code>A</code>&nbsp;of integers,&nbsp;return the length of the longest&nbsp;<em>mountain</em>.&nbsp;</p>\r\n\r\n<p>Return <code>0</code> if there is no mountain.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[2,1,4,7,3,2,5]\r\n<strong>Output: </strong>5\r\n<strong>Explanation: </strong>The largest mountain is [1,4,7,3,2] which has length 5.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[2,2,2]\r\n<strong>Output: </strong>0\r\n<strong>Explanation: </strong>There is no mountain.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\r\n</ol>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ul>\r\n\t<li>Can you solve it using only one pass?</li>\r\n\t<li>Can you solve it in <code>O(1)</code> space?</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u628a\u6570\u7ec4 A \u4e2d\u7b26\u5408\u4e0b\u5217\u5c5e\u6027\u7684\u4efb\u610f\u8fde\u7eed\u5b50\u6570\u7ec4 B \u79f0\u4e3a &ldquo;<em>\u5c71\u8109&rdquo;</em>\uff1a</p>\n\n<ul>\n\t<li><code>B.length &gt;= 3</code></li>\n\t<li>\u5b58\u5728 <code>0 &lt; i&nbsp;&lt; B.length - 1</code> \u4f7f\u5f97 <code>B[0] &lt; B[1] &lt; ... B[i-1] &lt; B[i] &gt; B[i+1] &gt; ... &gt; B[B.length - 1]</code></li>\n</ul>\n\n<p>\uff08\u6ce8\u610f\uff1aB \u53ef\u4ee5\u662f A \u7684\u4efb\u610f\u5b50\u6570\u7ec4\uff0c\u5305\u62ec\u6574\u4e2a\u6570\u7ec4 A\u3002\uff09</p>\n\n<p>\u7ed9\u51fa\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u8fd4\u56de\u6700\u957f <em>&ldquo;\u5c71\u8109&rdquo;</em>&nbsp;\u7684\u957f\u5ea6\u3002</p>\n\n<p>\u5982\u679c\u4e0d\u542b\u6709 &ldquo;<em>\u5c71\u8109&rdquo;&nbsp;</em>\u5219\u8fd4\u56de <code>0</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1,4,7,3,2,5]\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u957f\u7684 &ldquo;\u5c71\u8109&rdquo; \u662f [1,4,7,3,2]\uff0c\u957f\u5ea6\u4e3a 5\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u4e0d\u542b &ldquo;\u5c71\u8109&rdquo;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\n</ol>\n",
        "titleZh": "\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u5c71\u8109",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "846",
        "link": "hand-of-straights",
        "title": "Hand of Straights",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "40.7%",
        "questionDescription": "<p>Alice has a <code>hand</code> of cards, given as an array of integers.</p>\r\n\r\n<p>Now she wants to rearrange the cards into groups so that each group is size <code>W</code>, and consists of <code>W</code> consecutive cards.</p>\r\n\r\n<p>Return <code>true</code> if and only if she can.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>hand = [1,2,3,6,2,3,4,7,8], W = 3\r\n<strong>Output: </strong>true\r\n<strong>Explanation:</strong> Alice&#39;s <code>hand</code> can be rearranged as <code>[1,2,3],[2,3,4],[6,7,8]</code>.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>hand = [1,2,3,4,5], W = 4\r\n<strong>Output: </strong>false\r\n<strong>Explanation:</strong> Alice&#39;s <code>hand</code> can&#39;t be rearranged into groups of <code>4</code>.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= hand.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= hand[i]&nbsp;&lt;= 10^9</code></li>\r\n\t<li><code>1 &lt;= W &lt;= hand.length</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7231\u4e3d\u4e1d\u6709\u4e00\u624b\uff08<code>hand</code>\uff09\u7531\u6574\u6570\u6570\u7ec4\u7ed9\u5b9a\u7684\u724c\u3002&nbsp;</p>\n\n<p>\u73b0\u5728\u5979\u60f3\u628a\u724c\u91cd\u65b0\u6392\u5217\u6210\u7ec4\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u7ec4\u7684\u5927\u5c0f\u90fd\u662f <code>W</code>\uff0c\u4e14\u7531 <code>W</code> \u5f20\u8fde\u7eed\u7684\u724c\u7ec4\u6210\u3002</p>\n\n<p>\u5982\u679c\u5979\u53ef\u4ee5\u5b8c\u6210\u5206\u7ec4\u5c31\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>hand = [1,2,3,6,2,3,4,7,8], W = 3\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u7231\u4e3d\u4e1d\u7684\u624b\u724c\u53ef\u4ee5\u88ab\u91cd\u65b0\u6392\u5217\u4e3a <code>[1,2,3]\uff0c[2,3,4]\uff0c[6,7,8]</code>\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>hand = [1,2,3,4,5], W = 4\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u7231\u4e3d\u4e1d\u7684\u624b\u724c\u65e0\u6cd5\u88ab\u91cd\u65b0\u6392\u5217\u6210\u51e0\u4e2a\u5927\u5c0f\u4e3a 4 \u7684\u7ec4\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= hand.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= hand[i]&nbsp;&lt;= 10^9</code></li>\n\t<li><code>1 &lt;= W &lt;= hand.length</code></li>\n</ol>\n",
        "titleZh": "\u4e00\u624b\u987a\u5b50",
        "tags": [
            {
                "tag": "Map",
                "link": "map",
                "tagZh": null
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "847",
        "link": "shortest-path-visiting-all-nodes",
        "title": "Shortest Path Visiting All Nodes",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "40.0%",
        "questionDescription": "<p>An undirected, connected graph of N nodes (labeled&nbsp;<code>0, 1, 2, ..., N-1</code>) is given as <code>graph</code>.</p>\r\n\r\n<p><code>graph.length = N</code>, and <code>j != i</code>&nbsp;is in the list&nbsp;<code>graph[i]</code>&nbsp;exactly once, if and only if nodes <code>i</code> and <code>j</code> are connected.</p>\r\n\r\n<p>Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1,2,3],[0],[0],[0]]\r\n<strong>Output: </strong>4\r\n<strong>Explanation</strong>: One possible path is [1,0,2,0,3]</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1],[0,2,4],[1,3,4],[2],[1,2]]\r\n<strong>Output: </strong>4\r\n<strong>Explanation</strong>: One possible path is [0,1,4,2,3]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= graph.length &lt;= 12</code></li>\r\n\t<li><code>0 &lt;= graph[i].length &lt;&nbsp;graph.length</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa&nbsp;<code>graph</code>&nbsp;\u4e3a\u6709 N \u4e2a\u8282\u70b9\uff08\u7f16\u53f7\u4e3a&nbsp;<code>0, 1, 2, ..., N-1</code>\uff09\u7684\u65e0\u5411\u8fde\u901a\u56fe\u3002&nbsp;</p>\n\n<p><code>graph.length = N</code>\uff0c\u4e14\u53ea\u6709\u8282\u70b9 <code>i</code>&nbsp;\u548c <code>j</code>&nbsp;\u8fde\u901a\u65f6\uff0c<code>j != i</code>&nbsp;\u5728\u5217\u8868&nbsp;<code>graph[i]</code>&nbsp;\u4e2d\u6070\u597d\u51fa\u73b0\u4e00\u6b21\u3002</p>\n\n<p>\u8fd4\u56de\u80fd\u591f\u8bbf\u95ee\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\u3002\u4f60\u53ef\u4ee5\u5728\u4efb\u4e00\u8282\u70b9\u5f00\u59cb\u548c\u505c\u6b62\uff0c\u4e5f\u53ef\u4ee5\u591a\u6b21\u91cd\u8bbf\u8282\u70b9\uff0c\u5e76\u4e14\u53ef\u4ee5\u91cd\u7528\u8fb9\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2,3],[0],[0],[0]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u4e00\u4e2a\u53ef\u80fd\u7684\u8def\u5f84\u4e3a [1,0,2,0,3]</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1],[0,2,4],[1,3,4],[2],[1,2]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u4e00\u4e2a\u53ef\u80fd\u7684\u8def\u5f84\u4e3a [0,1,4,2,3]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= graph.length &lt;= 12</code></li>\n\t<li><code>0 &lt;= graph[i].length &lt;&nbsp;graph.length</code></li>\n</ol>\n",
        "titleZh": "\u8bbf\u95ee\u6240\u6709\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84",
        "tags": [
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "Amazon"
        ]
    },
    {
        "leetId": "848",
        "link": "shifting-letters",
        "title": "Shifting Letters",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "31.9%",
        "questionDescription": "<p>We have a string <code>S</code> of lowercase letters, and an integer array <code>shifts</code>.</p>\r\n\r\n<p>Call the <em>shift</em> of a letter, the next letter in the alphabet, (wrapping around so that <code>&#39;z&#39;</code> becomes <code>&#39;a&#39;</code>).&nbsp;</p>\r\n\r\n<p>For example, <code>shift(&#39;a&#39;) = &#39;b&#39;</code>, <code>shift(&#39;t&#39;) = &#39;u&#39;</code>, and <code>shift(&#39;z&#39;) = &#39;a&#39;</code>.</p>\r\n\r\n<p>Now for each <code>shifts[i] = x</code>, we want to shift the first <code>i+1</code>&nbsp;letters of <code>S</code>, <code>x</code> times.</p>\r\n\r\n<p>Return the final string&nbsp;after all such shifts to <code>S</code> are applied.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = &quot;abc&quot;, shifts = [3,5,9]\r\n<strong>Output: </strong>&quot;rpl&quot;\r\n<strong>Explanation: </strong>\r\nWe start with &quot;abc&quot;.\r\nAfter shifting the first 1 letters of S by 3, we have &quot;dbc&quot;.\r\nAfter shifting the first 2 letters of S by 5, we have &quot;igc&quot;.\r\nAfter shifting the first 3 letters of S by 9, we have &quot;rpl&quot;, the answer.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length = shifts.length &lt;= 20000</code></li>\r\n\t<li><code>0 &lt;= shifts[i] &lt;= 10 ^ 9</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u6709\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 <code>S</code>\uff0c\u548c\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>shifts</code>\u3002</p>\n\n<p>\u6211\u4eec\u5c06\u5b57\u6bcd\u8868\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5b57\u6bcd\u79f0\u4e3a\u539f\u5b57\u6bcd\u7684 <em>\u79fb\u4f4d</em>\uff08\u7531\u4e8e\u5b57\u6bcd\u8868\u662f\u73af\u7ed5\u7684\uff0c <code>&#39;z&#39;</code>&nbsp;\u5c06\u4f1a\u53d8\u6210&nbsp;<code>&#39;a&#39;</code>\uff09\u3002</p>\n\n<p>\u4f8b\u5982&middot;\uff0c<code>shift(&#39;a&#39;) = &#39;b&#39;</code>\uff0c&nbsp;<code>shift(&#39;t&#39;) = &#39;u&#39;</code>,\uff0c \u4ee5\u53ca&nbsp;<code>shift(&#39;z&#39;) = &#39;a&#39;</code>\u3002</p>\n\n<p>\u5bf9\u4e8e\u6bcf\u4e2a&nbsp;<code>shifts[i] = x</code>&nbsp;\uff0c \u6211\u4eec\u4f1a\u5c06 <code>S</code>&nbsp;\u4e2d\u7684\u524d&nbsp;<code>i+1</code>&nbsp;\u4e2a\u5b57\u6bcd\u79fb\u4f4d&nbsp;<code>x</code>&nbsp;\u6b21\u3002</p>\n\n<p>\u8fd4\u56de\u5c06\u6240\u6709\u8fd9\u4e9b\u79fb\u4f4d\u90fd\u5e94\u7528\u5230 <code>S</code> \u540e\u6700\u7ec8\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;abc&quot;, shifts = [3,5,9]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;rpl&quot;\n<strong>\u89e3\u91ca\uff1a </strong>\n\u6211\u4eec\u4ee5 &quot;abc&quot; \u5f00\u59cb\u3002\n\u5c06 S \u4e2d\u7684\u7b2c 1 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 3 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230 &quot;dbc&quot;\u3002\n\u518d\u5c06 S \u4e2d\u7684\u524d 2 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 5 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230 &quot;igc&quot;\u3002\n\u6700\u540e\u5c06 S \u4e2d\u7684\u8fd9 3 \u4e2a\u5b57\u6bcd\u79fb\u4f4d 9 \u6b21\u540e\uff0c\u6211\u4eec\u5f97\u5230\u7b54\u6848 &quot;rpl&quot;\u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length = shifts.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= shifts[i] &lt;= 10 ^ 9</code></li>\n</ol>\n",
        "titleZh": "\u5b57\u6bcd\u79fb\u4f4d",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ]
    },
    {
        "leetId": "849",
        "link": "maximize-distance-to-closest-person",
        "title": "Maximize Distance to Closest Person",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "34.8%",
        "questionDescription": "<p>In a row of <code>seats</code>, <code>1</code> represents a person sitting in that seat, and <code>0</code> represents that the seat is empty.&nbsp;</p>\r\n\r\n<p>There is at least one empty seat, and at least one person sitting.</p>\r\n\r\n<p>Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized.&nbsp;</p>\r\n\r\n<p>Return that maximum distance to closest person.</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,0,0,0,1,0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>\r\nIf Alex sits in the second open seat (seats[2]), then the closest person has distance 2.\r\nIf Alex sits in any other open seat, the closest person has distance 1.\r\nThus, the maximum distance to the closest person is 2.</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,0,0,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation: </strong>\r\nIf Alex sits in the last seat, the closest person is 3 seats away.\r\nThis is the maximum distance possible, so the answer is 3.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= seats.length &lt;= 20000</code></li>\r\n\t<li><code>seats</code>&nbsp;contains only 0s or 1s, at least one <code>0</code>, and at least one <code>1</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e00\u6392\u5ea7\u4f4d\uff08&nbsp;<code>seats</code>\uff09\u4e2d\uff0c<code>1</code>&nbsp;\u4ee3\u8868\u6709\u4eba\u5750\u5728\u5ea7\u4f4d\u4e0a\uff0c<code>0</code>&nbsp;\u4ee3\u8868\u5ea7\u4f4d\u4e0a\u662f\u7a7a\u7684\u3002</p>\n\n<p>\u81f3\u5c11\u6709\u4e00\u4e2a\u7a7a\u5ea7\u4f4d\uff0c\u4e14\u81f3\u5c11\u6709\u4e00\u4eba\u5750\u5728\u5ea7\u4f4d\u4e0a\u3002</p>\n\n<p>\u4e9a\u5386\u514b\u65af\u5e0c\u671b\u5750\u5728\u4e00\u4e2a\u80fd\u591f\u4f7f\u4ed6\u4e0e\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u4e4b\u95f4\u7684\u8ddd\u79bb\u8fbe\u5230\u6700\u5927\u5316\u7684\u5ea7\u4f4d\u4e0a\u3002</p>\n\n<p>\u8fd4\u56de\u4ed6\u5230\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u7684\u6700\u5927\u8ddd\u79bb\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,0,0,0,1,0,1]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a\n</strong>\u5982\u679c\u4e9a\u5386\u514b\u65af\u5750\u5728\u7b2c\u4e8c\u4e2a\u7a7a\u4f4d\uff08seats[2]\uff09\u4e0a\uff0c\u4ed6\u5230\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u7684\u8ddd\u79bb\u4e3a 2 \u3002\n\u5982\u679c\u4e9a\u5386\u514b\u65af\u5750\u5728\u5176\u5b83\u4efb\u4f55\u4e00\u4e2a\u7a7a\u4f4d\u4e0a\uff0c\u4ed6\u5230\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u7684\u8ddd\u79bb\u4e3a 1 \u3002\n\u56e0\u6b64\uff0c\u4ed6\u5230\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u7684\u6700\u5927\u8ddd\u79bb\u662f 2 \u3002 \n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,0,0,0]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a </strong>\n\u5982\u679c\u4e9a\u5386\u514b\u65af\u5750\u5728\u6700\u540e\u4e00\u4e2a\u5ea7\u4f4d\u4e0a\uff0c\u4ed6\u79bb\u6700\u8fd1\u7684\u4eba\u6709 3 \u4e2a\u5ea7\u4f4d\u8fdc\u3002\n\u8fd9\u662f\u53ef\u80fd\u7684\u6700\u5927\u8ddd\u79bb\uff0c\u6240\u4ee5\u7b54\u6848\u662f <span style=\"\">3 </span>\u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= seats.length &lt;= 20000</code></li>\n\t<li><code>seats</code>&nbsp;\u4e2d\u53ea\u542b\u6709 0 \u548c 1\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a <code>0</code>\uff0c\u4e14\u81f3\u5c11\u6709\u4e00\u4e2a <code>1</code>\u3002</li>\n</ol>\n",
        "titleZh": "\u5230\u6700\u8fd1\u7684\u4eba\u7684\u6700\u5927\u8ddd\u79bb",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "850",
        "link": "rectangle-area-ii",
        "title": "Rectangle Area II",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "33.8%",
        "questionDescription": "<p>We are given a list of (axis-aligned)&nbsp;<code>rectangles</code>.&nbsp; Each&nbsp;<code>rectangle[i] = [x1, y1, x2, y2]&nbsp;</code>, where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the <code>i</code>th rectangle.</p>\r\n\r\n<p>Find the total area covered by all <code>rectangles</code> in the plane.&nbsp; Since the answer&nbsp;may be too large, <strong>return it modulo 10^9 + 7</strong>.</p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png\" style=\"width: 480px; height: 360px;\" /></p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[0,0,2,2],[1,0,2,3],[1,0,3,1]]\r\n<strong>Output: </strong>6\r\n<strong>Explanation: </strong>As illustrated in the picture.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[0,0,1000000000,1000000000]]\r\n<strong>Output: </strong>49\r\n<strong>Explanation: </strong>The answer is 10^18 modulo (10^9 + 7), which is (10^9)^2 = (-7)^2 = 49.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= rectangles.length &lt;= 200</code></li>\r\n\t<li><code><font face=\"monospace\">rectanges[i].length = 4</font></code></li>\r\n\t<li><code>0 &lt;= rectangles[i][j] &lt;= 10^9</code></li>\r\n\t<li>The total area covered by all rectangles will never exceed&nbsp;<code>2^63 - 1</code>&nbsp;and thus will fit in a 64-bit signed integer.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u7ed9\u51fa\u4e86\u4e00\u4e2a\uff08\u8f74\u5bf9\u9f50\u7684\uff09\u77e9\u5f62\u5217\u8868&nbsp;<code>rectangles</code>&nbsp;\u3002 \u5bf9\u4e8e&nbsp;<code>rectangle[i] = [x1, y1, x2, y2]</code>\uff0c\u5176\u4e2d\uff08x1\uff0cy1\uff09\u662f\u77e9\u5f62&nbsp;<code>i</code>&nbsp;\u5de6\u4e0b\u89d2\u7684\u5750\u6807\uff0c\uff08x2\uff0cy2\uff09\u662f\u8be5\u77e9\u5f62\u53f3\u4e0a\u89d2\u7684\u5750\u6807\u3002</p>\n\n<p>\u627e\u51fa\u5e73\u9762\u4e2d\u6240\u6709\u77e9\u5f62\u53e0\u52a0\u8986\u76d6\u540e\u7684\u603b\u9762\u79ef\u3002 \u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u592a\u5927\uff0c<strong>\u8bf7\u8fd4\u56de\u5b83\u5bf9 10 ^ 9 + 7 \u53d6\u6a21\u7684\u7ed3\u679c</strong>\u3002</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png\" style=\"height: 360px; width: 480px;\"></p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,0,2,2],[1,0,2,3],[1,0,3,1]]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u5982\u56fe\u6240\u793a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,0,1000000000,1000000000]]\n<strong>\u8f93\u51fa\uff1a</strong>49\n<strong>\u89e3\u91ca\uff1a</strong>\u7b54\u6848\u662f 10^18 \u5bf9 (10^9 + 7) \u53d6\u6a21\u7684\u7ed3\u679c\uff0c \u5373 (10^9)^2 &rarr; (-7)^2 = 49 \u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= rectangles.length &lt;= 200</code></li>\n\t<li><code>rectanges[i].length = 4</code></li>\n\t<li><code>0 &lt;= rectangles[i][j] &lt;= 10^9</code></li>\n\t<li>\u77e9\u5f62\u53e0\u52a0\u8986\u76d6\u540e\u7684\u603b\u9762\u79ef\u4e0d\u4f1a\u8d85\u8d8a&nbsp;<code>2^63 - 1</code>&nbsp;\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u7528\u4e00\u4e2a&nbsp;64 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u6765\u4fdd\u5b58\u9762\u79ef\u7ed3\u679c\u3002</li>\n</ul>\n",
        "titleZh": "\u77e9\u5f62\u9762\u79ef II",
        "tags": [
            {
                "tag": "Segment Tree",
                "link": "segment-tree",
                "tagZh": "\u7ebf\u6bb5\u6811"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "851",
        "link": "loud-and-rich",
        "title": "Loud and Rich",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "36.6%",
        "questionDescription": "<p>In a group of N people (labelled <code>0, 1, 2, ..., N-1</code>), each person has different amounts of money, and different levels of quietness.</p>\r\n\r\n<p>For convenience, we&#39;ll call the person with label <code>x</code>, simply &quot;person <code>x</code>&quot;.</p>\r\n\r\n<p>We&#39;ll say that <code>richer[i] = [x, y]</code> if person <code>x</code>&nbsp;definitely has more money than person&nbsp;<code>y</code>.&nbsp; Note that <code>richer</code>&nbsp;may only be a subset of valid observations.</p>\r\n\r\n<p>Also, we&#39;ll say <code>quiet[x] = q</code> if person <font face=\"monospace\">x</font>&nbsp;has quietness <code>q</code>.</p>\r\n\r\n<p>Now, return <code>answer</code>, where <code>answer[x] = y</code> if <code>y</code> is the least quiet person (that is, the person <code>y</code> with the smallest value of <code>quiet[y]</code>), among all people&nbsp;who definitely have&nbsp;equal to or more money than person <code>x</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>richer = <span id=\"example-input-1-1\">[[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]]</span>, quiet = <span id=\"example-input-1-2\">[3,2,5,4,6,1,7,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[5,5,2,5,4,5,6,7]</span>\r\n<strong>Explanation: </strong>\r\nanswer[0] = 5.\r\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\r\nThe only person who is quieter (has lower quiet[x]) is person 7, but\r\nit isn&#39;t clear if they have more money than person 0.\r\n\r\nanswer[7] = 7.\r\nAmong all people that definitely have equal to or more money than person 7\r\n(which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x])\r\nis person 7.\r\n\r\nThe other answers can be filled out with similar reasoning.\r\n</pre>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= quiet.length = N &lt;= 500</code></li>\r\n\t<li><code>0 &lt;= quiet[i] &lt; N</code>, all <code>quiet[i]</code> are different.</li>\r\n\t<li><code>0 &lt;= richer.length &lt;= N * (N-1) / 2</code></li>\r\n\t<li><code>0 &lt;= richer[i][j] &lt; N</code></li>\r\n\t<li><code>richer[i][0] != richer[i][1]</code></li>\r\n\t<li><code>richer[i]</code>&#39;s are all different.</li>\r\n\t<li>The&nbsp;observations in <code>richer</code> are all logically consistent.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e00\u7ec4 N \u4e2a\u4eba\uff08\u7f16\u53f7\u4e3a&nbsp;<code>0, 1, 2, ..., N-1</code>\uff09\u4e2d\uff0c\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e0d\u540c\u6570\u76ee\u7684\u94b1\uff0c\u4ee5\u53ca\u4e0d\u540c\u7a0b\u5ea6\u7684\u5b89\u9759\uff08quietness\uff09\u3002</p>\n\n<p>\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u7f16\u53f7\u4e3a&nbsp;<code>x</code>&nbsp;\u7684\u4eba\u7b80\u79f0\u4e3a &quot;person&nbsp;<code>x</code>&nbsp;&quot;\u3002</p>\n\n<p>\u5982\u679c\u80fd\u591f\u80af\u5b9a person&nbsp;<code>x</code>&nbsp;\u6bd4 person&nbsp;<code>y</code>&nbsp;\u66f4\u6709\u94b1\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u8bf4&nbsp;<code>richer[i] = [x, y]</code>&nbsp;\u3002\u6ce8\u610f&nbsp;<code>richer</code>&nbsp;\u53ef\u80fd\u53ea\u662f\u6709\u6548\u89c2\u5bdf\u7684\u4e00\u4e2a\u5b50\u96c6\u3002</p>\n\n<p>\u53e6\u5916\uff0c\u5982\u679c person&nbsp;<code>x</code>&nbsp;\u7684\u5b89\u9759\u7a0b\u5ea6\u4e3a&nbsp;<code>q</code>&nbsp;\uff0c\u6211\u4eec\u4f1a\u8bf4&nbsp;<code>quiet[x] = q</code>&nbsp;\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u8fd4\u56de\u7b54\u6848&nbsp;<code>answer</code>&nbsp;\uff0c\u5176\u4e2d&nbsp;<code>answer[x] = y</code>&nbsp;\u7684\u524d\u63d0\u662f\uff0c\u5728\u6240\u6709\u62e5\u6709\u7684\u94b1\u4e0d\u5c11\u4e8e&nbsp;person&nbsp;<code>x</code>&nbsp;\u7684\u4eba\u4e2d\uff0cperson&nbsp;<code>y</code>&nbsp;\u662f\u6700\u5b89\u9759\u7684\u4eba\uff08\u4e5f\u5c31\u662f\u5b89\u9759\u503c&nbsp;<code>quiet[y]</code>&nbsp;\u6700\u5c0f\u7684\u4eba\uff09\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\n<strong>\u8f93\u51fa\uff1a</strong>[5,5,2,5,4,5,6,7]\n<strong>\u89e3\u91ca\uff1a </strong>\nanswer[0] = 5\uff0c\nperson 5 \u6bd4 person 3 \u6709\u66f4\u591a\u7684\u94b1\uff0cperson 3 \u6bd4 person 1 \u6709\u66f4\u591a\u7684\u94b1\uff0cperson 1 \u6bd4 person 0 \u6709\u66f4\u591a\u7684\u94b1\u3002\n\u552f\u4e00\u8f83\u4e3a\u5b89\u9759\uff08\u6709\u8f83\u4f4e\u7684\u5b89\u9759\u503c quiet[x]\uff09\u7684\u4eba\u662f person 7\uff0c\n\u4f46\u662f\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u4ed6\u662f\u5426\u6bd4 person 0 \u66f4\u6709\u94b1\u3002\n\nanswer[7] = 7\uff0c\n\u5728\u6240\u6709\u62e5\u6709\u7684\u94b1\u80af\u5b9a\u4e0d\u5c11\u4e8e person 7 \u7684\u4eba\u4e2d(\u8fd9\u53ef\u80fd\u5305\u62ec person 3\uff0c4\uff0c5\uff0c6 \u4ee5\u53ca 7)\uff0c\n\u6700\u5b89\u9759(\u6709\u8f83\u4f4e\u5b89\u9759\u503c quiet[x])\u7684\u4eba\u662f person 7\u3002\n\n\u5176\u4ed6\u7684\u7b54\u6848\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u63a8\u7406\u6765\u89e3\u91ca\u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= quiet.length = N &lt;= 500</code></li>\n\t<li><code>0 &lt;= quiet[i] &lt; N</code>\uff0c\u6240\u6709&nbsp;<code>quiet[i]</code>&nbsp;\u90fd\u4e0d\u76f8\u540c\u3002</li>\n\t<li><code>0 &lt;= richer.length &lt;= N * (N-1) / 2</code></li>\n\t<li><code>0 &lt;= richer[i][j] &lt; N</code></li>\n\t<li><code>richer[i][0] != richer[i][1]</code></li>\n\t<li><code>richer[i]</code>&nbsp;\u90fd\u662f\u4e0d\u540c\u7684\u3002</li>\n\t<li>\u5bf9&nbsp;<code>richer</code>&nbsp;\u7684\u89c2\u5bdf\u5728\u903b\u8f91\u4e0a\u662f\u4e00\u81f4\u7684\u3002</li>\n</ol>\n",
        "titleZh": "\u55a7\u95f9\u548c\u5bcc\u6709",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "852",
        "link": "peak-index-in-a-mountain-array",
        "title": "Peak Index in a Mountain Array",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "67.3%",
        "questionDescription": "<p>Let&#39;s call an array <code>A</code> a <em>mountain</em>&nbsp;if the following properties hold:</p>\r\n\r\n<ul>\r\n\t<li><code>A.length &gt;= 3</code></li>\r\n\t<li>There exists some <code>0 &lt; i&nbsp;&lt; A.length - 1</code> such that <code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></li>\r\n</ul>\r\n\r\n<p>Given an array that is definitely a mountain, return any&nbsp;<code>i</code>&nbsp;such that&nbsp;<code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[0,1,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[0,2,1,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1</span></pre>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>3 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code><font face=\"monospace\">0 &lt;= A[i] &lt;= 10^6</font></code></li>\r\n\t<li>A&nbsp;is a mountain, as defined above.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u628a\u7b26\u5408\u4e0b\u5217\u5c5e\u6027\u7684\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u79f0\u4f5c\u5c71\u8109\uff1a</p>\n\n<ul>\n\t<li><code>A.length &gt;= 3</code></li>\n\t<li>\u5b58\u5728 <code>0 &lt; i&nbsp;&lt; A.length - 1</code> \u4f7f\u5f97<code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></li>\n</ul>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u786e\u5b9a\u4e3a\u5c71\u8109\u7684\u6570\u7ec4\uff0c\u8fd4\u56de\u4efb\u4f55\u6ee1\u8db3&nbsp;<code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code>&nbsp;\u7684 <code>i</code>&nbsp;\u7684\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,1,0]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,2,1,0]\n<strong>\u8f93\u51fa\uff1a</strong>1</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= A.length &lt;= 10000</code></li>\n\t<li>0 &lt;= A[i] &lt;= 10^6</li>\n\t<li>A \u662f\u5982\u4e0a\u5b9a\u4e49\u7684\u5c71\u8109</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u5c71\u8109\u6570\u7ec4\u7684\u5cf0\u9876\u7d22\u5f15",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Facebook",
            "Microsoft",
            "Bloomberg",
            "Quora"
        ]
    },
    {
        "leetId": "853",
        "link": "car-fleet",
        "title": "Car Fleet",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "28.6%",
        "questionDescription": "<p><code>N</code> cars are going to the same destination along a one lane road.&nbsp; The destination is <code>target</code>&nbsp;miles away.</p>\r\n\r\n<p>Each car <code>i</code>&nbsp;has a constant speed <code>speed[i]</code>&nbsp;(in miles per hour), and initial position <code>position[i]</code>&nbsp;miles towards the target along the road.</p>\r\n\r\n<p>A car can never pass another car ahead of it, but it can catch up to it, and drive bumper to bumper at the same speed.</p>\r\n\r\n<p>The distance between these two cars is ignored - they are assumed to have the same position.</p>\r\n\r\n<p>A <em>car fleet</em> is some non-empty set of cars driving&nbsp;at the same position and same speed.&nbsp; Note that a single car is also a car fleet.</p>\r\n\r\n<p>If a car catches up to a car fleet right at the destination point, it will&nbsp;still be&nbsp;considered as one car fleet.</p>\r\n\r\n<p><br />\r\nHow many car fleets will arrive at the destination?</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>target = <span id=\"example-input-1-1\">12</span>, position = <span id=\"example-input-1-2\">[10,8,0,5,3]</span>, speed = <span id=\"example-input-1-3\">[2,4,1,1,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation</strong>:\r\nThe cars starting at 10 and 8 become a fleet, meeting each other at 12.\r\nThe car starting at 0 doesn&#39;t catch up to any other car, so it is a fleet by itself.\r\nThe cars starting at 5 and 3 become a fleet, meeting each other at 6.\r\nNote that no other cars meet these fleets before the destination, so the answer is 3.\r\n</pre>\r\n\r\n<p><br />\r\n<strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= N &lt;= 10 ^ 4</code></li>\r\n\t<li><code>0 &lt; target&nbsp;&lt;= 10 ^ 6</code></li>\r\n\t<li><code>0 &lt;&nbsp;speed[i] &lt;= 10 ^ 6</code></li>\r\n\t<li><code>0 &lt;= position[i] &lt; target</code></li>\r\n\t<li>All initial positions are different.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p><code>N</code> &nbsp;\u8f86\u8f66\u6cbf\u7740\u4e00\u6761\u8f66\u9053\u9a76\u5411\u4f4d\u4e8e&nbsp;<code>target</code>&nbsp;\u82f1\u91cc\u4e4b\u5916\u7684\u5171\u540c\u76ee\u7684\u5730\u3002</p>\n\n<p>\u6bcf\u8f86\u8f66&nbsp;<code>i</code>&nbsp;\u4ee5\u6052\u5b9a\u7684\u901f\u5ea6&nbsp;<code>speed[i]</code>&nbsp;\uff08\u82f1\u91cc/\u5c0f\u65f6\uff09\uff0c\u4ece\u521d\u59cb\u4f4d\u7f6e&nbsp;<code>position[i]</code>&nbsp;\uff08\u82f1\u91cc\uff09 \u6cbf\u8f66\u9053\u9a76\u5411\u76ee\u7684\u5730\u3002</p>\n\n<p>\u4e00\u8f86\u8f66\u6c38\u8fdc\u4e0d\u4f1a\u8d85\u8fc7\u524d\u9762\u7684\u53e6\u4e00\u8f86\u8f66\uff0c\u4f46\u5b83\u53ef\u4ee5\u8ffd\u4e0a\u53bb\uff0c\u5e76\u4e0e\u524d\u8f66\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u7d27\u63a5\u7740\u884c\u9a76\u3002</p>\n\n<p>\u6b64\u65f6\uff0c\u6211\u4eec\u4f1a\u5ffd\u7565\u8fd9\u4e24\u8f86\u8f66\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4eec\u88ab\u5047\u5b9a\u5904\u4e8e\u76f8\u540c\u7684\u4f4d\u7f6e\u3002</p>\n\n<p><em>\u8f66\u961f&nbsp;</em>\u662f\u4e00\u4e9b\u7531\u884c\u9a76\u5728\u76f8\u540c\u4f4d\u7f6e\u3001\u5177\u6709\u76f8\u540c\u901f\u5ea6\u7684\u8f66\u7ec4\u6210\u7684\u975e\u7a7a\u96c6\u5408\u3002\u6ce8\u610f\uff0c\u4e00\u8f86\u8f66\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u8f66\u961f\u3002</p>\n\n<p>\u5373\u4fbf\u4e00\u8f86\u8f66\u5728\u76ee\u7684\u5730\u624d\u8d76\u4e0a\u4e86\u4e00\u4e2a\u8f66\u961f\uff0c\u5b83\u4eec\u4ecd\u7136\u4f1a\u88ab\u89c6\u4f5c\u662f\u540c\u4e00\u4e2a\u8f66\u961f\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u4f1a\u6709\u591a\u5c11\u8f66\u961f\u5230\u8fbe\u76ee\u7684\u5730?</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4ece 10 \u548c 8 \u5f00\u59cb\u7684\u8f66\u4f1a\u7ec4\u6210\u4e00\u4e2a\u8f66\u961f\uff0c\u5b83\u4eec\u5728 12 \u5904\u76f8\u9047\u3002\n\u4ece 0 \u5904\u5f00\u59cb\u7684\u8f66\u65e0\u6cd5\u8ffd\u4e0a\u5176\u5b83\u8f66\uff0c\u6240\u4ee5\u5b83\u81ea\u5df1\u5c31\u662f\u4e00\u4e2a\u8f66\u961f\u3002\n\u4ece 5 \u548c 3 \u5f00\u59cb\u7684\u8f66\u4f1a\u7ec4\u6210\u4e00\u4e2a\u8f66\u961f\uff0c\u5b83\u4eec\u5728 6 \u5904\u76f8\u9047\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5728\u5230\u8fbe\u76ee\u7684\u5730\u4e4b\u524d\u6ca1\u6709\u5176\u5b83\u8f66\u4f1a\u9047\u5230\u8fd9\u4e9b\u8f66\u961f\uff0c\u6240\u4ee5\u7b54\u6848\u662f 3\u3002\n</pre>\n\n<p><br>\n<strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= N &lt;= 10 ^ 4</code></li>\n\t<li><code>0 &lt; target&nbsp;&lt;= 10 ^ 6</code></li>\n\t<li><code>0 &lt;&nbsp;speed[i] &lt;= 10 ^ 6</code></li>\n\t<li><code>0 &lt;= position[i] &lt; target</code></li>\n\t<li>\u6240\u6709\u8f66\u7684\u521d\u59cb\u4f4d\u7f6e\u5404\u4e0d\u76f8\u540c\u3002</li>\n</ol>\n",
        "titleZh": "\u8f66\u961f",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "854",
        "link": "k-similar-strings",
        "title": "K-Similar Strings",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "18.5%",
        "questionDescription": "<p>Strings&nbsp;<code>A</code> and <code>B</code> are <code>K</code>-similar (for some non-negative integer <code>K</code>) if we can swap the positions of two letters in <code>A</code> exactly <code>K</code>&nbsp;times so that the resulting string equals <code>B</code>.</p>\r\n\r\n<p>Given two anagrams <code>A</code> and <code>B</code>, return the smallest <code>K</code>&nbsp;for which <code>A</code> and <code>B</code> are <code>K</code>-similar.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">&quot;ab&quot;</span>, B = <span id=\"example-input-1-2\">&quot;ba&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">&quot;abc&quot;</span>, B = <span id=\"example-input-2-2\">&quot;bca&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">&quot;abac&quot;</span>, B = <span id=\"example-input-3-2\">&quot;baca&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-4-1\">&quot;aabc&quot;</span>, B = <span id=\"example-input-4-2\">&quot;abca&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">2</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length == B.length &lt;= 20</code></li>\r\n\t<li><code>A</code> and <code>B</code> contain only lowercase letters from the set <code>{&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;}</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5982\u679c\u53ef\u4ee5\u901a\u8fc7\u5c06 <code>A</code> \u4e2d\u7684\u4e24\u4e2a\u5c0f\u5199\u5b57\u6bcd\u7cbe\u786e\u5730\u4ea4\u6362\u4f4d\u7f6e <code>K</code> \u6b21\u5f97\u5230\u4e0e <code>B</code> \u76f8\u7b49\u7684\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u79f0\u5b57\u7b26\u4e32&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\u7684\u76f8\u4f3c\u5ea6\u4e3a <code>K</code>\uff08<code>K</code>&nbsp;\u4e3a\u975e\u8d1f\u6574\u6570\uff09\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u6bcd\u5f02\u4f4d\u8bcd&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\uff0c\u8fd4\u56de <code>A</code> \u548c <code>B</code>&nbsp;\u7684\u76f8\u4f3c\u5ea6 <code>K</code> \u7684\u6700\u5c0f\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = &quot;ab&quot;, B = &quot;ba&quot;\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = &quot;abc&quot;, B = &quot;bca&quot;\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = &quot;abac&quot;, B = &quot;baca&quot;\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = &quot;aabc&quot;, B = &quot;abca&quot;\n<strong>\u8f93\u51fa\uff1a</strong>2</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length == B.length &lt;= 20</code></li>\n\t<li><code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\u53ea\u5305\u542b\u96c6\u5408&nbsp;<code>{&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;}</code>&nbsp;\u4e2d\u7684\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n",
        "titleZh": "\u76f8\u4f3c\u5ea6\u4e3a K \u7684\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "855",
        "link": "exam-room",
        "title": "Exam Room",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "24.6%",
        "questionDescription": "<p>In an exam room, there are <code>N</code> seats in a single row, numbered <code>0, 1, 2, ..., N-1</code>.</p>\r\n\r\n<p>When a student enters the room, they must sit in the seat that maximizes the distance to the closest person.&nbsp; If there are multiple such seats, they sit in the seat with the lowest number.&nbsp; (Also, if no one is in the room, then the student sits at seat number 0.)</p>\r\n\r\n<p>Return a class <code>ExamRoom(int N)</code>&nbsp;that exposes two functions: <code>ExamRoom.seat()</code>&nbsp;returning an <code>int</code>&nbsp;representing what seat the student sat in, and <code>ExamRoom.leave(int p)</code>&nbsp;representing that the student in seat number <code>p</code>&nbsp;now leaves the room.&nbsp; It is guaranteed that any calls to <code>ExamRoom.leave(p)</code> have a student sitting in seat <code>p</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;ExamRoom&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;leave&quot;,&quot;seat&quot;]</span>, <span id=\"example-input-1-2\">[[10],[],[],[],[],[4],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,0,9,4,2,null,5]</span>\r\n<span><strong>Explanation</strong>:\r\nExamRoom(10) -&gt; null\r\nseat() -&gt; 0, no one is in the room, then the student sits at seat number 0.\r\nseat() -&gt; 9, the student sits at the last seat number 9.\r\nseat() -&gt; 4, the student sits at the last seat number 4.\r\nseat() -&gt; 2, the student sits at the last seat number 2.\r\nleave(4) -&gt; null\r\nseat() -&gt; 5, the student sits at the last seat number 5.</span>\r\n</pre>\r\n\r\n<p><span>\u200b\u200b\u200b\u200b\u200b\u200b\u200b</span></p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\r\n\t<li><code>ExamRoom.seat()</code> and <code>ExamRoom.leave()</code> will be called at most <code>10^4</code> times across all test cases.</li>\r\n\t<li>Calls to <code>ExamRoom.leave(p)</code> are guaranteed to have a student currently sitting in seat number <code>p</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5728\u8003\u573a\u91cc\uff0c\u4e00\u6392\u6709&nbsp;<code>N</code>&nbsp;\u4e2a\u5ea7\u4f4d\uff0c\u5206\u522b\u7f16\u53f7\u4e3a&nbsp;<code>0, 1, 2, ..., N-1</code>&nbsp;\u3002</p>\n\n<p>\u5f53\u5b66\u751f\u8fdb\u5165\u8003\u573a\u540e\uff0c\u4ed6\u5fc5\u987b\u5750\u5728\u80fd\u591f\u4f7f\u4ed6\u4e0e\u79bb\u4ed6\u6700\u8fd1\u7684\u4eba\u4e4b\u95f4\u7684\u8ddd\u79bb\u8fbe\u5230\u6700\u5927\u5316\u7684\u5ea7\u4f4d\u4e0a\u3002\u5982\u679c\u6709\u591a\u4e2a\u8fd9\u6837\u7684\u5ea7\u4f4d\uff0c\u4ed6\u4f1a\u5750\u5728\u7f16\u53f7\u6700\u5c0f\u7684\u5ea7\u4f4d\u4e0a\u3002(\u53e6\u5916\uff0c\u5982\u679c\u8003\u573a\u91cc\u6ca1\u6709\u4eba\uff0c\u90a3\u4e48\u5b66\u751f\u5c31\u5750\u5728 0 \u53f7\u5ea7\u4f4d\u4e0a\u3002)</p>\n\n<p>\u8fd4\u56de&nbsp;<code>ExamRoom(int N)</code>&nbsp;\u7c7b\uff0c\u5b83\u6709\u4e24\u4e2a\u516c\u5f00\u7684\u51fd\u6570\uff1a\u5176\u4e2d\uff0c\u51fd\u6570&nbsp;<code>ExamRoom.seat()</code>&nbsp;\u4f1a\u8fd4\u56de\u4e00\u4e2a&nbsp;<code>int</code>&nbsp;\uff08\u6574\u578b\u6570\u636e\uff09\uff0c\u4ee3\u8868\u5b66\u751f\u5750\u7684\u4f4d\u7f6e\uff1b\u51fd\u6570&nbsp;<code>ExamRoom.leave(int p)</code>&nbsp;\u4ee3\u8868\u5750\u5728\u5ea7\u4f4d <code>p</code> \u4e0a\u7684\u5b66\u751f\u73b0\u5728\u79bb\u5f00\u4e86\u8003\u573a\u3002\u6bcf\u6b21\u8c03\u7528&nbsp;<code>ExamRoom.leave(p)</code>&nbsp;\u65f6\u90fd\u4fdd\u8bc1\u6709\u5b66\u751f\u5750\u5728\u5ea7\u4f4d&nbsp;<code>p</code>&nbsp;\u4e0a\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;ExamRoom&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;leave&quot;,&quot;seat&quot;], [[10],[],[],[],[],[4],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,0,9,4,2,null,5]\n<strong>\u89e3\u91ca\uff1a</strong>\nExamRoom(10) -&gt; null\nseat() -&gt; 0\uff0c\u6ca1\u6709\u4eba\u5728\u8003\u573a\u91cc\uff0c\u90a3\u4e48\u5b66\u751f\u5750\u5728 0 \u53f7\u5ea7\u4f4d\u4e0a\u3002\nseat() -&gt; 9\uff0c\u5b66\u751f\u6700\u540e\u5750\u5728 9 \u53f7\u5ea7\u4f4d\u4e0a\u3002\nseat() -&gt; 4\uff0c\u5b66\u751f\u6700\u540e\u5750\u5728 4 \u53f7\u5ea7\u4f4d\u4e0a\u3002\nseat() -&gt; 2\uff0c\u5b66\u751f\u6700\u540e\u5750\u5728 2 \u53f7\u5ea7\u4f4d\u4e0a\u3002\nleave(4) -&gt; null\nseat() -&gt; 5\uff0c\u5b66\u751f\u6700\u540e\u5750\u5728 5 \u53f7\u5ea7\u4f4d\u4e0a\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n\t<li>\u5728\u6240\u6709\u7684\u6d4b\u8bd5\u6837\u4f8b\u4e2d&nbsp;<code>ExamRoom.seat()</code>&nbsp;\u548c&nbsp;<code>ExamRoom.leave()</code>&nbsp;\u6700\u591a\u88ab\u8c03\u7528&nbsp;<code>10^4</code>&nbsp;\u6b21\u3002</li>\n\t<li>\u4fdd\u8bc1\u5728\u8c03\u7528&nbsp;<code>ExamRoom.leave(p)</code>&nbsp;\u65f6\u6709\u5b66\u751f\u6b63\u5750\u5728\u5ea7\u4f4d <code>p</code> \u4e0a\u3002</li>\n</ol>\n",
        "titleZh": "\u8003\u573a\u5c31\u5ea7",
        "tags": [
            {
                "tag": "Map",
                "link": "map",
                "tagZh": null
            }
        ],
        "companies": [
            "Google",
            "Quora",
            "Quip"
        ]
    },
    {
        "leetId": "856",
        "link": "score-of-parentheses",
        "title": "Score of Parentheses",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "49.9%",
        "questionDescription": "<p>Given a balanced parentheses string <code>S</code>, compute the score of the string based on the following rule:</p>\r\n\r\n<ul>\r\n\t<li><code>()</code> has score 1</li>\r\n\t<li><code>AB</code> has score <code>A + B</code>, where A and B are balanced parentheses strings.</li>\r\n\t<li><code>(A)</code> has score <code>2 * A</code>, where A is a balanced parentheses string.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;()&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;(())&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;()()&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">&quot;(()(()))&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">6</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>S</code> is a balanced parentheses string, containing only <code>(</code> and <code>)</code>.</li>\r\n\t<li><code>2 &lt;= S.length &lt;= 50</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5e73\u8861\u62ec\u53f7\u5b57\u7b26\u4e32&nbsp;<code>S</code>\uff0c\u6309\u4e0b\u8ff0\u89c4\u5219\u8ba1\u7b97\u8be5\u5b57\u7b26\u4e32\u7684\u5206\u6570\uff1a</p>\n\n<ul>\n\t<li><code>()</code> \u5f97 1 \u5206\u3002</li>\n\t<li><code>AB</code> \u5f97&nbsp;<code>A + B</code>&nbsp;\u5206\uff0c\u5176\u4e2d A \u548c B \u662f\u5e73\u8861\u62ec\u53f7\u5b57\u7b26\u4e32\u3002</li>\n\t<li><code>(A)</code> \u5f97&nbsp;<code>2 * A</code>&nbsp;\u5206\uff0c\u5176\u4e2d A \u662f\u5e73\u8861\u62ec\u53f7\u5b57\u7b26\u4e32\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>&quot;()&quot;\n<strong>\u8f93\u51fa\uff1a </strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>&quot;(())&quot;\n<strong>\u8f93\u51fa\uff1a </strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>&quot;()()&quot;\n<strong>\u8f93\u51fa\uff1a </strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>&quot;(()(()))&quot;\n<strong>\u8f93\u51fa\uff1a </strong>6\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>S</code>&nbsp;\u662f\u5e73\u8861\u62ec\u53f7\u5b57\u7b26\u4e32\uff0c\u4e14\u53ea\u542b\u6709&nbsp;<code>(</code>&nbsp;\u548c&nbsp;<code>)</code>&nbsp;\u3002</li>\n\t<li><code>2 &lt;= S.length &lt;= 50</code></li>\n</ol>\n",
        "titleZh": "\u62ec\u53f7\u7684\u5206\u6570",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ]
    },
    {
        "leetId": "857",
        "link": "minimum-cost-to-hire-k-workers",
        "title": "Minimum Cost to Hire K Workers",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "34.1%",
        "questionDescription": "<p>There are <code>N</code> workers.&nbsp; The <code>i</code>-th worker has a <code>quality[i]</code> and a minimum wage expectation <code>wage[i]</code>.</p>\r\n\r\n<p>Now we want to hire exactly <code>K</code>&nbsp;workers to form a <em>paid group</em>.&nbsp; When hiring a group of K workers, we must pay them according to the following rules:</p>\r\n\r\n<ol>\r\n\t<li>Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.</li>\r\n\t<li>Every worker in the paid group must be paid at least their minimum wage expectation.</li>\r\n</ol>\r\n\r\n<p>Return the least amount of money needed to form a paid group satisfying the above conditions.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>quality = <span id=\"example-input-1-1\">[10,20,5]</span>, wage = <span id=\"example-input-1-2\">[70,50,30]</span>, K = <span id=\"example-input-1-3\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">105.00000\r\n<strong>Explanation</strong>: </span><span>We pay 70 to 0-th worker and 35 to 2-th worker.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>quality = <span id=\"example-input-2-1\">[3,1,10,10,1]</span>, wage = <span id=\"example-input-2-2\">[4,8,2,2,7]</span>, K = <span id=\"example-input-2-3\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">30.66667\r\n<strong>Explanation</strong>: </span><span>We pay 4 to 0-th worker, 13.33333 to 2-th and 3-th workers seperately.</span> \r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= K &lt;= N &lt;= 10000</code>, where <code>N = quality.length = wage.length</code></li>\r\n\t<li><code>1 &lt;= quality[i] &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= wage[i] &lt;= 10000</code></li>\r\n\t<li>Answers within <code>10^-5</code> of the correct answer will be considered correct.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u6709 <code>N</code>&nbsp;\u540d\u5de5\u4eba\u3002&nbsp;\u7b2c&nbsp;<code>i</code>&nbsp;\u540d\u5de5\u4eba\u7684\u5de5\u4f5c\u8d28\u91cf\u4e3a&nbsp;<code>quality[i]</code>&nbsp;\uff0c\u5176\u6700\u4f4e\u671f\u671b\u5de5\u8d44\u4e3a&nbsp;<code>wage[i]</code>&nbsp;\u3002</p>\n\n<p>\u73b0\u5728\u6211\u4eec\u60f3\u96c7\u4f63&nbsp;<code>K</code>&nbsp;\u540d\u5de5\u4eba\u7ec4\u6210\u4e00\u4e2a<em>\u5de5\u8d44\u7ec4\u3002</em>\u5728\u96c7\u4f63&nbsp;\u4e00\u7ec4 K \u540d\u5de5\u4eba\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u6309\u7167\u4e0b\u8ff0\u89c4\u5219\u5411\u4ed6\u4eec\u652f\u4ed8\u5de5\u8d44\uff1a</p>\n\n<ol>\n\t<li>\u5bf9\u5de5\u8d44\u7ec4\u4e2d\u7684\u6bcf\u540d\u5de5\u4eba\uff0c\u5e94\u5f53\u6309\u5176\u5de5\u4f5c\u8d28\u91cf\u4e0e\u540c\u7ec4\u5176\u4ed6\u5de5\u4eba\u7684\u5de5\u4f5c\u8d28\u91cf\u7684\u6bd4\u4f8b\u6765\u652f\u4ed8\u5de5\u8d44\u3002</li>\n\t<li>\u5de5\u8d44\u7ec4\u4e2d\u7684\u6bcf\u540d\u5de5\u4eba\u81f3\u5c11\u5e94\u5f53\u5f97\u5230\u4ed6\u4eec\u7684\u6700\u4f4e\u671f\u671b\u5de5\u8d44\u3002</li>\n</ol>\n\n<p>\u8fd4\u56de\u7ec4\u6210\u4e00\u4e2a\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u5de5\u8d44\u7ec4\u81f3\u5c11\u9700\u8981\u591a\u5c11\u94b1\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>quality = [10,20,5], wage = [70,50,30], K = 2\n<strong>\u8f93\u51fa\uff1a </strong>105.00000\n<strong>\u89e3\u91ca\uff1a</strong> \u6211\u4eec\u5411 0 \u53f7\u5de5\u4eba\u652f\u4ed8 70\uff0c\u5411 2 \u53f7\u5de5\u4eba\u652f\u4ed8 35\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>quality = [3,1,10,10,1], wage = [4,8,2,2,7], K = 3\n<strong>\u8f93\u51fa\uff1a </strong>30.66667\n<strong>\u89e3\u91ca\uff1a </strong>\u6211\u4eec\u5411 0 \u53f7\u5de5\u4eba\u652f\u4ed8 4\uff0c\u5411 2 \u53f7\u548c 3 \u53f7\u5206\u522b\u652f\u4ed8 13.33333\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= N &lt;= 10000</code>\uff0c\u5176\u4e2d&nbsp;<code>N = quality.length = wage.length</code></li>\n\t<li><code>1 &lt;= quality[i] &lt;= 10000</code></li>\n\t<li><code>1 &lt;= wage[i] &lt;= 10000</code></li>\n\t<li>\u4e0e\u6b63\u786e\u7b54\u6848\u8bef\u5dee\u5728&nbsp;<code>10^-5</code>&nbsp;\u4e4b\u5185\u7684\u7b54\u6848\u5c06\u88ab\u89c6\u4e3a\u6b63\u786e\u7684\u3002</li>\n</ol>\n",
        "titleZh": "\u96c7\u4f63 K \u540d\u5de5\u4eba\u7684\u6700\u4f4e\u6210\u672c",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "858",
        "link": "mirror-reflection",
        "title": "Mirror Reflection",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "45.3%",
        "questionDescription": "<p>There is&nbsp;a special square room with mirrors on each of the four&nbsp;walls.&nbsp; Except for the southwest&nbsp;corner, there are receptors on each of the remaining corners, numbered <code>0</code>, <code>1</code>, and <code>2</code>.</p>\r\n\r\n<p>The square room has walls of length <code>p</code>, and a laser ray from the southwest corner&nbsp;first meets the east wall at a distance <code>q</code>&nbsp;from the <code>0</code>th receptor.</p>\r\n\r\n<p>Return the number of the receptor that the ray meets first.&nbsp; (It is guaranteed that the ray will meet&nbsp;a receptor eventually.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>p = <span id=\"example-input-1-1\">2</span>, q = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>The ray meets receptor 2 the first time it gets reflected back to the left wall.\r\n<p><img alt=\"\" src=\"https://ibb.co/mYSFJT\" /><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/18/reflection.png\" style=\"width: 218px; height: 217px;\" /></p>\r\n</pre>\r\n\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= p &lt;= 1000</code></li>\r\n\t<li><code>0 &lt;= q &lt;= p</code></li>\r\n</ol>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u6b63\u65b9\u5f62\u623f\u95f4\uff0c\u6bcf\u9762\u5899\u4e0a\u90fd\u6709\u4e00\u9762\u955c\u5b50\u3002\u9664\u897f\u5357\u89d2\u4ee5\u5916\uff0c\u6bcf\u4e2a\u89d2\u843d\u90fd\u653e\u6709\u4e00\u4e2a\u63a5\u53d7\u5668\uff0c\u7f16\u53f7\u4e3a&nbsp;<code>0</code>\uff0c&nbsp;<code>1</code>\uff0c\u4ee5\u53ca&nbsp;<code>2</code>\u3002</p>\n\n<p>\u6b63\u65b9\u5f62\u623f\u95f4\u7684\u5899\u58c1\u957f\u5ea6\u4e3a&nbsp;<code>p</code>\uff0c\u4e00\u675f\u6fc0\u5149\u4ece\u897f\u5357\u89d2\u5c04\u51fa\uff0c\u9996\u5148\u4f1a\u4e0e\u4e1c\u5899\u76f8\u9047\uff0c\u5165\u5c04\u70b9\u5230\u63a5\u6536\u5668 <code>0</code> \u7684\u8ddd\u79bb\u4e3a <code>q</code> \u3002</p>\n\n<p>\u8fd4\u56de\u5149\u7ebf\u6700\u5148\u9047\u5230\u7684\u63a5\u6536\u5668\u7684\u7f16\u53f7\uff08\u4fdd\u8bc1\u5149\u7ebf\u6700\u7ec8\u4f1a\u9047\u5230\u4e00\u4e2a\u63a5\u6536\u5668\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>p = 2, q = 1\n<strong>\u8f93\u51fa\uff1a </strong>2\n<strong>\u89e3\u91ca\uff1a </strong>\u8fd9\u6761\u5149\u7ebf\u5728\u7b2c\u4e00\u6b21\u88ab\u53cd\u5c04\u56de\u5de6\u8fb9\u7684\u5899\u65f6\u5c31\u9047\u5230\u4e86\u63a5\u6536\u5668 2 \u3002\n<img alt=\"\" src=\"https://ibb.co/mYSFJT\"><img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/06/22/reflection.png\" style=\"height: 217px; width: 218px;\"></pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= p &lt;= 1000</code></li>\n\t<li><code>0 &lt;= q &lt;= p</code></li>\n</ol>\n",
        "titleZh": "\u955c\u9762\u53cd\u5c04",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "859",
        "link": "buddy-strings",
        "title": "Buddy Strings",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "24.7%",
        "questionDescription": "<p>Given two strings <code>A</code> and <code>B</code>&nbsp;of lowercase letters, return <code>true</code> if and only if we&nbsp;can swap two letters in <code>A</code> so that the result equals <code>B</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">&quot;ab&quot;</span>, B = <span id=\"example-input-1-2\">&quot;ba&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">&quot;ab&quot;</span>, B = <span id=\"example-input-2-2\">&quot;ab&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">&quot;aa&quot;</span>, B = <span id=\"example-input-3-2\">&quot;aa&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-4-1\">&quot;aaaaaaabc&quot;</span>, B = <span id=\"example-input-4-2\">&quot;aaaaaaacb&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-5-1\">&quot;&quot;</span>, B = <span id=\"example-input-5-2\">&quot;aa&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">false</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt;= 20000</code></li>\r\n\t<li><code>0 &lt;= B.length &lt;= 20000</code></li>\r\n\t<li><code>A</code> and&nbsp;<code>B</code> consist only of lowercase letters.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u7684\u5b57\u7b26\u4e32&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\uff0c\u53ea\u8981\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ea4\u6362 <code>A</code> \u4e2d\u7684\u4e24\u4e2a\u5b57\u6bcd\u5f97\u5230\u4e0e <code>B</code> \u76f8\u7b49\u7684\u7ed3\u679c\uff0c\u5c31\u8fd4\u56de&nbsp;<code>true</code>&nbsp;\uff1b\u5426\u5219\u8fd4\u56de <code>false</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>A = &quot;ab&quot;, B = &quot;ba&quot;\n<strong>\u8f93\u51fa\uff1a </strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>A = &quot;ab&quot;, B = &quot;ab&quot;\n<strong>\u8f93\u51fa\uff1a </strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3:</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>A = &quot;aa&quot;, B = &quot;aa&quot;\n<strong>\u8f93\u51fa\uff1a </strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>A = &quot;aaaaaaabc&quot;, B = &quot;aaaaaaacb&quot;\n<strong>\u8f93\u51fa\uff1a </strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a </strong>A = &quot;&quot;, B = &quot;aa&quot;\n<strong>\u8f93\u51fa\uff1a </strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= B.length &lt;= 20000</code></li>\n\t<li><code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u3002</li>\n</ol>\n",
        "titleZh": "\u4eb2\u5bc6\u5b57\u7b26\u4e32",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "860",
        "link": "lemonade-change",
        "title": "Lemonade Change",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "49.6%",
        "questionDescription": "<p>At a lemonade stand, each lemonade costs <code>$5</code>.&nbsp;</p>\r\n\r\n<p>Customers are standing in a queue to buy from you, and order one at a time (in the order specified by <code>bills</code>).</p>\r\n\r\n<p>Each customer will only buy one lemonade and&nbsp;pay with either a <code>$5</code>, <code>$10</code>, or <code>$20</code> bill.&nbsp; You must provide the correct change to each customer, so that the net transaction is that the customer pays $5.</p>\r\n\r\n<p>Note that you don&#39;t have any change&nbsp;in hand at first.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if you can provide every customer with correct change.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[5,5,5,10,20]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation: </strong>\r\nFrom the first 3 customers, we collect three $5 bills in order.\r\nFrom the fourth customer, we collect a $10 bill and give back a $5.\r\nFrom the fifth customer, we give a $10 bill and a $5 bill.\r\nSince all customers got correct change, we output true.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[5,5,10]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[10,10]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[5,5,10,10,20]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">false</span>\r\n<strong>Explanation: </strong>\r\nFrom the first two customers in order, we collect two $5 bills.\r\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\r\nFor the last customer, we can't give change of $15 back because we only have two $10 bills.\r\nSince not every customer received correct change, the answer is false.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= bills.length &lt;= 10000</code></li>\r\n\t<li><code>bills[i]</code>&nbsp;will be either&nbsp;<code>5</code>, <code>10</code>, or <code>20</code>.</li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5728\u67e0\u6aac\u6c34\u644a\u4e0a\uff0c\u6bcf\u4e00\u676f\u67e0\u6aac\u6c34\u7684\u552e\u4ef7\u4e3a&nbsp;<code>5</code>&nbsp;\u7f8e\u5143\u3002</p>\n\n<p>\u987e\u5ba2\u6392\u961f\u8d2d\u4e70\u4f60\u7684\u4ea7\u54c1\uff0c\uff08\u6309\u8d26\u5355 <code>bills</code> \u652f\u4ed8\u7684\u987a\u5e8f\uff09\u4e00\u6b21\u8d2d\u4e70\u4e00\u676f\u3002</p>\n\n<p>\u6bcf\u4f4d\u987e\u5ba2\u53ea\u4e70\u4e00\u676f\u67e0\u6aac\u6c34\uff0c\u7136\u540e\u5411\u4f60\u4ed8 <code>5</code> \u7f8e\u5143\u3001<code>10</code> \u7f8e\u5143\u6216 <code>20</code> \u7f8e\u5143\u3002\u4f60\u5fc5\u987b\u7ed9\u6bcf\u4e2a\u987e\u5ba2\u6b63\u786e\u627e\u96f6\uff0c\u4e5f\u5c31\u662f\u8bf4\u51c0\u4ea4\u6613\u662f\u6bcf\u4f4d\u987e\u5ba2\u5411\u4f60\u652f\u4ed8 <code>5</code> \u7f8e\u5143\u3002</p>\n\n<p>\u6ce8\u610f\uff0c\u4e00\u5f00\u59cb\u4f60\u624b\u5934\u6ca1\u6709\u4efb\u4f55\u96f6\u94b1\u3002</p>\n\n<p>\u5982\u679c\u4f60\u80fd\u7ed9\u6bcf\u4f4d\u987e\u5ba2\u6b63\u786e\u627e\u96f6\uff0c\u8fd4\u56de&nbsp;<code>true</code>&nbsp;\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>&nbsp;\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,5,5,10,20]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a\n</strong>\u524d 3 \u4f4d\u987e\u5ba2\u90a3\u91cc\uff0c\u6211\u4eec\u6309\u987a\u5e8f\u6536\u53d6 3 \u5f20 5 \u7f8e\u5143\u7684\u949e\u7968\u3002\n\u7b2c 4 \u4f4d\u987e\u5ba2\u90a3\u91cc\uff0c\u6211\u4eec\u6536\u53d6\u4e00\u5f20 10 \u7f8e\u5143\u7684\u949e\u7968\uff0c\u5e76\u8fd4\u8fd8 5 \u7f8e\u5143\u3002\n\u7b2c 5 \u4f4d\u987e\u5ba2\u90a3\u91cc\uff0c\u6211\u4eec\u627e\u8fd8\u4e00\u5f20 10 \u7f8e\u5143\u7684\u949e\u7968\u548c\u4e00\u5f20 5 \u7f8e\u5143\u7684\u949e\u7968\u3002\n\u7531\u4e8e\u6240\u6709\u5ba2\u6237\u90fd\u5f97\u5230\u4e86\u6b63\u786e\u7684\u627e\u96f6\uff0c\u6240\u4ee5\u6211\u4eec\u8f93\u51fa true\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,5,10]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[10,10]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,5,10,10,20]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\n\u524d 2 \u4f4d\u987e\u5ba2\u90a3\u91cc\uff0c\u6211\u4eec\u6309\u987a\u5e8f\u6536\u53d6 2 \u5f20 5 \u7f8e\u5143\u7684\u949e\u7968\u3002\n\u5bf9\u4e8e\u63a5\u4e0b\u6765\u7684 2 \u4f4d\u987e\u5ba2\uff0c\u6211\u4eec\u6536\u53d6\u4e00\u5f20 10 \u7f8e\u5143\u7684\u949e\u7968\uff0c\u7136\u540e\u8fd4\u8fd8 5 \u7f8e\u5143\u3002\n\u5bf9\u4e8e\u6700\u540e\u4e00\u4f4d\u987e\u5ba2\uff0c\u6211\u4eec\u65e0\u6cd5\u9000\u56de 15 \u7f8e\u5143\uff0c\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u53ea\u6709\u4e24\u5f20 10 \u7f8e\u5143\u7684\u949e\u7968\u3002\n\u7531\u4e8e\u4e0d\u662f\u6bcf\u4f4d\u987e\u5ba2\u90fd\u5f97\u5230\u4e86\u6b63\u786e\u7684\u627e\u96f6\uff0c\u6240\u4ee5\u7b54\u6848\u662f false\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= bills.length &lt;= 10000</code></li>\n\t<li><code>bills[i]</code>&nbsp;\u4e0d\u662f&nbsp;<code>5</code>&nbsp;\u5c31\u662f&nbsp;<code>10</code>&nbsp;\u6216\u662f&nbsp;<code>20</code>&nbsp;</li>\n</ul>\n",
        "titleZh": "\u67e0\u6aac\u6c34\u627e\u96f6",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Amazon"
        ]
    },
    {
        "leetId": "861",
        "link": "score-after-flipping-matrix",
        "title": "Score After Flipping Matrix",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "69.0%",
        "questionDescription": "<p>We have a two dimensional matrix&nbsp;<code>A</code> where each value is <code>0</code> or <code>1</code>.</p>\r\n\r\n<p>A move consists of choosing any row or column, and toggling each value in that row or column: changing all <code>0</code>s to <code>1</code>s, and all <code>1</code>s to <code>0</code>s.</p>\r\n\r\n<p>After making any number of moves, every row of this matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.</p>\r\n\r\n<p>Return the highest possible&nbsp;score.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[0,0,1,1],[1,0,1,0],[1,1,0,0]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">39</span>\r\n<strong>Explanation:\r\n</strong>Toggled to <span id=\"example-input-1-1\">[[1,1,1,1],[1,0,0,1],[1,1,1,1]].\r\n0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 20</code></li>\r\n\t<li><code>1 &lt;= A[0].length &lt;= 20</code></li>\r\n\t<li><code>A[i][j]</code>&nbsp;is <code>0</code> or <code>1</code>.</li>\r\n</ol>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u6709\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635&nbsp;<code>A</code> \u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u503c\u4e3a&nbsp;<code>0</code>&nbsp;\u6216&nbsp;<code>1</code>&nbsp;\u3002</p>\n\n<p>\u79fb\u52a8\u662f\u6307\u9009\u62e9\u4efb\u4e00\u884c\u6216\u5217\uff0c\u5e76\u8f6c\u6362\u8be5\u884c\u6216\u5217\u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\uff1a\u5c06\u6240\u6709 <code>0</code> \u90fd\u66f4\u6539\u4e3a <code>1</code>\uff0c\u5c06\u6240\u6709 <code>1</code> \u90fd\u66f4\u6539\u4e3a <code>0</code>\u3002</p>\n\n<p>\u5728\u505a\u51fa\u4efb\u610f\u6b21\u6570\u7684\u79fb\u52a8\u540e\uff0c\u5c06\u8be5\u77e9\u9635\u7684\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4e8c\u8fdb\u5236\u6570\u6765\u89e3\u91ca\uff0c\u77e9\u9635\u7684\u5f97\u5206\u5c31\u662f\u8fd9\u4e9b\u6570\u5b57\u7684\u603b\u548c\u3002</p>\n\n<p>\u8fd4\u56de\u5c3d\u53ef\u80fd\u9ad8\u7684\u5206\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,0,1,1],[1,0,1,0],[1,1,0,0]]\n<strong>\u8f93\u51fa\uff1a</strong>39\n<strong>\u89e3\u91ca\uff1a\n</strong>\u8f6c\u6362\u4e3a [[1,1,1,1],[1,0,0,1],[1,1,1,1]]\n0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= A[0].length &lt;= 20</code></li>\n\t<li><code>A[i][j]</code>&nbsp;\u662f&nbsp;<code>0</code> \u6216&nbsp;<code>1</code></li>\n</ol>\n",
        "titleZh": "\u7ffb\u8f6c\u77e9\u9635\u540e\u7684\u5f97\u5206",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "IIT Bombay"
        ]
    },
    {
        "leetId": "862",
        "link": "shortest-subarray-with-sum-at-least-k",
        "title": "Shortest Subarray with Sum at Least K",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "9.9%",
        "questionDescription": "<p>Return the <strong>length</strong> of the shortest, non-empty, contiguous&nbsp;subarray of <code>A</code> with sum at least <code>K</code>.</p>\r\n\r\n<p>If there is no non-empty subarray with sum at least <code>K</code>, return <code>-1</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1]</span>, K = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[1,2]</span>, K = <span id=\"example-input-2-2\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">-1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[2,-1,2]</span>, K = <span id=\"example-input-3-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\r\n\t<li><code>-10 ^ 5&nbsp;&lt;= A[i] &lt;= 10 ^ 5</code></li>\r\n\t<li><code>1 &lt;= K &lt;= 10 ^ 9</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u8fd4\u56de <code>A</code> \u7684\u6700\u77ed\u7684\u975e\u7a7a\u8fde\u7eed\u5b50\u6570\u7ec4\u7684<strong>\u957f\u5ea6</strong>\uff0c\u8be5\u5b50\u6570\u7ec4\u7684\u548c\u81f3\u5c11\u4e3a <code>K</code> \u3002</p>\n\n<p>\u5982\u679c\u6ca1\u6709\u548c\u81f3\u5c11\u4e3a&nbsp;<code>K</code>&nbsp;\u7684\u975e\u7a7a\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de&nbsp;<code>-1</code>&nbsp;\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1], K = 1\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,2], K = 4\n<strong>\u8f93\u51fa\uff1a</strong>-1\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [2,-1,2], K = 3\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>-10 ^ 5&nbsp;&lt;= A[i] &lt;= 10 ^ 5</code></li>\n\t<li><code>1 &lt;= K &lt;= 10 ^ 9</code></li>\n</ol>\n",
        "titleZh": "\u548c\u81f3\u5c11\u4e3a K \u7684\u6700\u77ed\u5b50\u6570\u7ec4",
        "tags": [
            {
                "tag": "Queue",
                "link": "queue",
                "tagZh": "\u961f\u5217"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "companies": [
            "Facebook",
            "Goldman Sachs"
        ]
    },
    {
        "leetId": "863",
        "link": "all-nodes-distance-k-in-binary-tree",
        "title": "All Nodes Distance K in Binary Tree",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "39.2%",
        "questionDescription": "<p>We are given a binary tree (with root node&nbsp;<code>root</code>), a <code>target</code> node, and an integer value <code>K</code>.</p>\r\n\r\n<p>Return a list of the values of all&nbsp;nodes that have a distance <code>K</code> from the <code>target</code> node.&nbsp; The answer can be returned in any order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-1-1\">[3,5,1,6,2,0,8,null,null,7,4]</span>, target = <span id=\"example-input-1-2\">5</span>, K = <span id=\"example-input-1-3\">2</span>\r\n\r\n<strong>Output: </strong><span id=\"example-output-1\">[7,4,1]</span>\r\n\r\n<strong>Explanation: </strong>\r\nThe nodes that are a distance 2 from the target node (with value 5)\r\nhave values 7, 4, and 1.\r\n\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png\" style=\"width: 280px; height: 240px;\" />\r\n\r\nNote that the inputs &quot;root&quot; and &quot;target&quot; are actually TreeNodes.\r\nThe descriptions of the inputs above are just serializations of these objects.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The given tree is non-empty.</li>\r\n\t<li>Each node in the tree has unique values&nbsp;<code>0 &lt;= node.val &lt;= 500</code>.</li>\r\n\t<li>The <code>target</code>&nbsp;node is a node in the tree.</li>\r\n\t<li><code>0 &lt;= K &lt;= 1000</code>.</li>\r\n</ol>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff08\u5177\u6709\u6839\u7ed3\u70b9&nbsp;<code>root</code>\uff09\uff0c&nbsp;\u4e00\u4e2a\u76ee\u6807\u7ed3\u70b9&nbsp;<code>target</code>&nbsp;\uff0c\u548c\u4e00\u4e2a\u6574\u6570\u503c <code>K</code> \u3002</p>\n\n<p>\u8fd4\u56de\u5230\u76ee\u6807\u7ed3\u70b9 <code>target</code> \u8ddd\u79bb\u4e3a <code>K</code> \u7684\u6240\u6709\u7ed3\u70b9\u7684\u503c\u7684\u5217\u8868\u3002 \u7b54\u6848\u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2\n\n<strong>\u8f93\u51fa\uff1a</strong>[7,4,1]\n\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6240\u6c42\u7ed3\u70b9\u4e3a\u4e0e\u76ee\u6807\u7ed3\u70b9\uff08\u503c\u4e3a 5\uff09\u8ddd\u79bb\u4e3a 2 \u7684\u7ed3\u70b9\uff0c\n\u503c\u5206\u522b\u4e3a 7\uff0c4\uff0c\u4ee5\u53ca 1\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png\" style=\"height: 240px; width: 280px;\">\n\n\u6ce8\u610f\uff0c\u8f93\u5165\u7684 &quot;root&quot; \u548c &quot;target&quot; \u5b9e\u9645\u4e0a\u662f\u6811\u4e0a\u7684\u7ed3\u70b9\u3002\n\u4e0a\u9762\u7684\u8f93\u5165\u4ec5\u4ec5\u662f\u5bf9\u8fd9\u4e9b\u5bf9\u8c61\u8fdb\u884c\u4e86\u5e8f\u5217\u5316\u63cf\u8ff0\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u7684\u6811\u662f\u975e\u7a7a\u7684\uff0c\u4e14\u6700\u591a\u6709&nbsp;<code>K</code>&nbsp;\u4e2a\u7ed3\u70b9\u3002</li>\n\t<li>\u6811\u4e0a\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5177\u6709\u552f\u4e00\u7684\u503c&nbsp;<code>0 &lt;= node.val &lt;= 500</code>&nbsp;\u3002</li>\n\t<li>\u76ee\u6807\u7ed3\u70b9&nbsp;<code>target</code>&nbsp;\u662f\u6811\u4e0a\u7684\u7ed3\u70b9\u3002</li>\n\t<li><code>0 &lt;= K &lt;= 1000</code>.</li>\n</ol>\n",
        "titleZh": "\u4e8c\u53c9\u6811\u4e2d\u6240\u6709\u8ddd\u79bb\u4e3a K \u7684\u7ed3\u70b9",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google",
            "Amazon",
            "Microsoft"
        ]
    },
    {
        "leetId": "864",
        "link": "shortest-path-to-get-all-keys",
        "title": "Shortest Path to Get All Keys",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "35.5%",
        "questionDescription": "<p>We are given a 2-dimensional&nbsp;<code>grid</code>.&nbsp;<code>&quot;.&quot;</code> is an empty cell, <code>&quot;#&quot;</code> is&nbsp;a wall, <code>&quot;@&quot;</code> is the starting point, (<code>&quot;a&quot;</code>, <code>&quot;b&quot;</code>, ...) are keys, and (<code>&quot;A&quot;</code>,&nbsp;<code>&quot;B&quot;</code>, ...) are locks.</p>\r\n\r\n<p>We start at the starting point, and one move consists of walking one space in one of the 4 cardinal directions.&nbsp; We cannot walk outside the grid, or walk into a wall.&nbsp; If we walk over a key, we pick it up.&nbsp; We can&#39;t walk over a lock unless we have the corresponding key.</p>\r\n\r\n<p>For some <font face=\"monospace\">1 &lt;= K &lt;= 6</font>, there is exactly one lowercase and one uppercase letter of the first <code>K</code> letters of the English alphabet in the grid.&nbsp; This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were&nbsp;chosen in the same order as the English alphabet.</p>\r\n\r\n<p>Return the lowest number of moves to acquire all keys.&nbsp; If&nbsp;it&#39;s impossible, return <code>-1</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;@.a.#&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">8</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6</span>\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= grid.length&nbsp;&lt;= 30</code></li>\r\n\t<li><code>1 &lt;= grid[0].length&nbsp;&lt;= 30</code></li>\r\n\t<li><code>grid[i][j]</code> contains only<code> &#39;.&#39;</code>, <code>&#39;#&#39;</code>, <code>&#39;@&#39;</code>,&nbsp;<code>&#39;a&#39;-</code><code>&#39;f</code><code>&#39;</code> and <code>&#39;A&#39;-&#39;F&#39;</code></li>\r\n\t<li>The number of keys is in <code>[1, 6]</code>.&nbsp; Each key has a different letter and opens exactly one lock.</li>\r\n</ol>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683c&nbsp;<code>grid</code>\u3002&nbsp;<code>&quot;.&quot;</code>&nbsp;\u4ee3\u8868\u4e00\u4e2a\u7a7a\u623f\u95f4\uff0c&nbsp;<code>&quot;#&quot;</code>&nbsp;\u4ee3\u8868\u4e00\u5835\u5899\uff0c&nbsp;<code>&quot;@&quot;</code>&nbsp;\u662f\u8d77\u70b9\uff0c\uff08<code>&quot;a&quot;</code>,&nbsp;<code>&quot;b&quot;</code>, ...\uff09\u4ee3\u8868\u94a5\u5319\uff0c\uff08<code>&quot;A&quot;</code>,&nbsp;<code>&quot;B&quot;</code>, ...\uff09\u4ee3\u8868\u9501\u3002</p>\n\n<p>\u6211\u4eec\u4ece\u8d77\u70b9\u5f00\u59cb\u51fa\u53d1\uff0c\u4e00\u6b21\u79fb\u52a8\u662f\u6307\u5411\u56db\u4e2a\u57fa\u672c\u65b9\u5411\u4e4b\u4e00\u884c\u8d70\u4e00\u4e2a\u5355\u4f4d\u7a7a\u95f4\u3002\u6211\u4eec\u4e0d\u80fd\u5728\u7f51\u683c\u5916\u9762\u884c\u8d70\uff0c\u4e5f\u65e0\u6cd5\u7a7f\u8fc7\u4e00\u5835\u5899\u3002\u5982\u679c\u9014\u7ecf\u4e00\u4e2a\u94a5\u5319\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u6361\u8d77\u6765\u3002\u9664\u975e\u6211\u4eec\u624b\u91cc\u6709\u5bf9\u5e94\u7684\u94a5\u5319\uff0c\u5426\u5219\u65e0\u6cd5\u901a\u8fc7\u9501\u3002</p>\n\n<p>\u5047\u8bbe K \u4e3a\u94a5\u5319/\u9501\u7684\u4e2a\u6570\uff0c\u4e14\u6ee1\u8db3&nbsp;<code>1 &lt;= K &lt;= 6</code>\uff0c\u5b57\u6bcd\u8868\u4e2d\u7684\u524d K \u4e2a\u5b57\u6bcd\u5728\u7f51\u683c\u4e2d\u90fd\u6709\u81ea\u5df1\u5bf9\u5e94\u7684\u4e00\u4e2a\u5c0f\u5199\u548c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\u3002\u6362\u8a00\u4e4b\uff0c\u6bcf\u4e2a\u9501\u6709\u552f\u4e00\u5bf9\u5e94\u7684\u94a5\u5319\uff0c\u6bcf\u4e2a\u94a5\u5319\u4e5f\u6709\u552f\u4e00\u5bf9\u5e94\u7684\u9501\u3002\u53e6\u5916\uff0c\u4ee3\u8868\u94a5\u5319\u548c\u9501\u7684\u5b57\u6bcd\u4e92\u4e3a\u5927\u5c0f\u5199\u5e76\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u3002</p>\n\n<p>\u8fd4\u56de\u83b7\u53d6\u6240\u6709\u94a5\u5319\u6240\u9700\u8981\u7684\u79fb\u52a8\u7684\u6700\u5c11\u6b21\u6570\u3002\u5982\u679c\u65e0\u6cd5\u83b7\u53d6\u6240\u6709\u94a5\u5319\uff0c\u8fd4\u56de&nbsp;<code>-1</code>&nbsp;\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;@.a.#&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>8\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>6\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length&nbsp;&lt;= 30</code></li>\n\t<li><code>1 &lt;= grid[0].length&nbsp;&lt;= 30</code></li>\n\t<li><code>grid[i][j]</code>&nbsp;\u53ea\u542b\u6709&nbsp;<code>&#39;.&#39;</code>,&nbsp;<code>&#39;#&#39;</code>,&nbsp;<code>&#39;@&#39;</code>,&nbsp;<code>&#39;a&#39;-</code><code>&#39;f</code><code>&#39;</code>&nbsp;\u4ee5\u53ca&nbsp;<code>&#39;A&#39;-&#39;F&#39;</code></li>\n\t<li>\u94a5\u5319\u7684\u6570\u76ee\u8303\u56f4\u662f&nbsp;<code>[1, 6]</code>\uff0c\u6bcf\u4e2a\u94a5\u5319\u90fd\u5bf9\u5e94\u4e00\u4e2a\u4e0d\u540c\u7684\u5b57\u6bcd\uff0c\u6b63\u597d\u6253\u5f00\u4e00\u4e2a\u5bf9\u5e94\u7684\u9501\u3002</li>\n</ol>\n",
        "titleZh": "\u83b7\u53d6\u6240\u6709\u94a5\u5319\u7684\u6700\u77ed\u8def\u5f84",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "865",
        "link": "smallest-subtree-with-all-the-deepest-nodes",
        "title": "Smallest Subtree with all the Deepest Nodes",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "37.1%",
        "questionDescription": "<p>Given a binary tree rooted at <code>root</code>, the <em>depth</em> of each node is the shortest distance to the root.</p>\r\n\r\n<p>A node is <em>deepest</em> if it has the largest depth possible among&nbsp;any node in the <u>entire tree</u>.</p>\r\n\r\n<p>The subtree of a node is that node, plus the set of all descendants of that node.</p>\r\n\r\n<p>Return the node with the largest depth such that it contains all the deepest nodes in its subtree.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,5,1,6,2,0,8,null,null,7,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,7,4]</span>\r\n<strong>Explanation:\r\n</strong>\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png\" style=\"width: 280px; height: 238px;\" />\r\n\r\nWe return the node with value 2, colored in yellow in the diagram.\r\nThe nodes colored in blue are the deepest nodes of the tree.\r\nThe input &quot;[3, 5, 1, 6, 2, 0, 8, null, null, 7, 4]&quot; is a serialization of the given tree.\r\nThe output &quot;[2, 7, 4]&quot; is a serialization of the subtree rooted at the node with value 2.\r\nBoth the input and output have TreeNode type.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of nodes in the tree will be between 1 and 500.</li>\r\n\t<li>The values of each node are unique.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6839\u4e3a&nbsp;<code>root</code>&nbsp;\u7684\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u7684<em>\u6df1\u5ea6</em>\u662f\u5b83\u5230\u6839\u7684\u6700\u77ed\u8ddd\u79bb\u3002</p>\n\n<p>\u5982\u679c\u4e00\u4e2a\u7ed3\u70b9\u5728<strong>\u6574\u4e2a\u6811</strong>\u7684\u4efb\u610f\u7ed3\u70b9\u4e4b\u95f4\u5177\u6709\u6700\u5927\u7684\u6df1\u5ea6\uff0c\u5219\u8be5\u7ed3\u70b9\u662f<em>\u6700\u6df1\u7684</em>\u3002</p>\n\n<p>\u4e00\u4e2a\u7ed3\u70b9\u7684\u5b50\u6811\u662f\u8be5\u7ed3\u70b9\u52a0\u4e0a\u5b83\u7684\u6240\u6709\u540e\u4ee3\u7684\u96c6\u5408\u3002</p>\n\n<p>\u8fd4\u56de\u80fd\u6ee1\u8db3&ldquo;\u4ee5\u8be5\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u5305\u542b\u6240\u6709\u6700\u6df1\u7684\u7ed3\u70b9&rdquo;\u8fd9\u4e00\u6761\u4ef6\u7684\u5177\u6709\u6700\u5927\u6df1\u5ea6\u7684\u7ed3\u70b9\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,5,1,6,2,0,8,null,null,7,4]\n<strong>\u8f93\u51fa\uff1a</strong>[2,7,4]\n<strong>\u89e3\u91ca\uff1a</strong>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png\" style=\"height: 238px; width: 280px;\">\n\u6211\u4eec\u8fd4\u56de\u503c\u4e3a 2 \u7684\u7ed3\u70b9\uff0c\u5728\u56fe\u4e2d\u7528\u9ec4\u8272\u6807\u8bb0\u3002\n\u5728\u56fe\u4e2d\u7528\u84dd\u8272\u6807\u8bb0\u7684\u662f\u6811\u7684\u6700\u6df1\u7684\u7ed3\u70b9\u3002\n\u8f93\u5165 &quot;[3, 5, 1, 6, 2, 0, 8, null, null, 7, 4]&quot; \u662f\u5bf9\u7ed9\u5b9a\u7684\u6811\u7684\u5e8f\u5217\u5316\u8868\u8ff0\u3002\n\u8f93\u51fa &quot;[2, 7, 4]&quot; \u662f\u5bf9\u6839\u7ed3\u70b9\u7684\u503c\u4e3a 2 \u7684\u5b50\u6811\u7684\u5e8f\u5217\u5316\u8868\u8ff0\u3002\n\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u5177\u6709 TreeNode \u7c7b\u578b\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u6811\u4e2d\u7ed3\u70b9\u7684\u6570\u91cf\u4ecb\u4e8e&nbsp;1 \u548c&nbsp;500 \u4e4b\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002</li>\n</ul>\n",
        "titleZh": "\u5177\u6709\u6240\u6709\u6700\u6df1\u7ed3\u70b9\u7684\u6700\u5c0f\u5b50\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Facebook"
        ]
    },
    {
        "leetId": "866",
        "link": "prime-palindrome",
        "title": "Prime Palindrome",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "14.4%",
        "questionDescription": "<p>Find the smallest prime palindrome greater than or equal to <code>N</code>.</p>\r\n\r\n<p>Recall that a&nbsp;number is <em>prime</em> if it&#39;s only divisors are 1 and itself, and it is greater than 1.&nbsp;</p>\r\n\r\n<p>For example, 2,3,5,7,11 and 13 are&nbsp;primes.</p>\r\n\r\n<p>Recall that a number is a <em>palindrome</em> if it reads the same from left to right as it does from right to left.&nbsp;</p>\r\n\r\n<p>For example, 12321 is a palindrome.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">6</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">7</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">8</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">11</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">13</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">101</span></pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 10^8</code></li>\r\n\t<li>The answer is guaranteed to exist and be less than <code>2 * 10^8</code>.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u6c42\u51fa\u5927\u4e8e\u6216\u7b49\u4e8e&nbsp;<code>N</code>&nbsp;\u7684\u6700\u5c0f\u56de\u6587\u7d20\u6570\u3002</p>\n\n<p>\u56de\u987e\u4e00\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u5927\u4e8e 1\uff0c\u4e14\u5176\u56e0\u6570\u53ea\u6709 1 \u548c\u5b83\u81ea\u8eab\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u662f<em>\u7d20\u6570</em>\u3002</p>\n\n<p>\u4f8b\u5982\uff0c2\uff0c3\uff0c5\uff0c7\uff0c11 \u4ee5\u53ca&nbsp;13 \u662f\u7d20\u6570\u3002</p>\n\n<p>\u56de\u987e\u4e00\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u6570\u4ece\u5de6\u5f80\u53f3\u8bfb\u4e0e\u4ece\u53f3\u5f80\u5de6\u8bfb\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u662f<em>\u56de\u6587\u6570\u3002</em></p>\n\n<p>\u4f8b\u5982\uff0c12321 \u662f\u56de\u6587\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>6\n<strong>\u8f93\u51fa\uff1a</strong>7\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>8\n<strong>\u8f93\u51fa\uff1a</strong>11\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>13\n<strong>\u8f93\u51fa\uff1a</strong>101</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 10^8</code></li>\n\t<li>\u7b54\u6848\u80af\u5b9a\u5b58\u5728\uff0c\u4e14\u5c0f\u4e8e&nbsp;<code>2 * 10^8</code>\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u56de\u6587\u7d20\u6570",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ]
    },
    {
        "leetId": "867",
        "link": "transpose-matrix",
        "title": "Transpose Matrix",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "63.1%",
        "questionDescription": "<p>Given a&nbsp;matrix <code>A</code>, return the transpose of <code>A</code>.</p>\r\n\r\n<p>The transpose of a matrix is the matrix flipped over it&#39;s main diagonal, switching the row and column indices of the matrix.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[1,2,3],[4,5,6],[7,8,9]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[1,4,7],[2,5,8],[3,6,9]]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[1,2,3],[4,5,6]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[[1,4],[2,5],[3,6]]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span><strong>Note:</strong></span></p>\r\n\r\n<ol>\r\n\t<li><code><span>1 &lt;= A.length&nbsp;&lt;= 1000</span></code></li>\r\n\t<li><code><span>1 &lt;= A[0].length&nbsp;&lt;= 1000</span></code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u77e9\u9635&nbsp;<code>A</code>\uff0c&nbsp;\u8fd4\u56de&nbsp;<code>A</code>&nbsp;\u7684\u8f6c\u7f6e\u77e9\u9635\u3002</p>\n\n<p>\u77e9\u9635\u7684\u8f6c\u7f6e\u662f\u6307\u5c06\u77e9\u9635\u7684\u4e3b\u5bf9\u89d2\u7ebf\u7ffb\u8f6c\uff0c\u4ea4\u6362\u77e9\u9635\u7684\u884c\u7d22\u5f15\u4e0e\u5217\u7d22\u5f15\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2,3],[4,5,6],[7,8,9]]\n<strong>\u8f93\u51fa\uff1a</strong>[[1,4,7],[2,5,8],[3,6,9]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2,3],[4,5,6]]\n<strong>\u8f93\u51fa\uff1a</strong>[[1,4],[2,5],[3,6]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length&nbsp;&lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[0].length&nbsp;&lt;= 1000</code></li>\n</ol>\n",
        "titleZh": "\u8f6c\u7f6e\u77e9\u9635",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Intel"
        ]
    },
    {
        "leetId": "868",
        "link": "binary-gap",
        "title": "Binary Gap",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "57.1%",
        "questionDescription": "<p>Given a positive&nbsp;integer <code>N</code>, find and return the longest distance between two consecutive 1&#39;s in the binary representation of <code>N</code>.</p>\r\n\r\n<p>If there aren&#39;t two consecutive 1&#39;s, return <font face=\"monospace\">0</font>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<ul>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">22</span>\r\n<strong>Output: </strong>2\r\n<strong>Explanation: </strong>\r\n22 in binary is 0b10110.\r\nIn the binary representation of 22, there are three ones, and two consecutive pairs of 1&#39;s.\r\nThe first consecutive pair of 1&#39;s have distance 2.\r\nThe second consecutive pair of 1&#39;s have distance 1.\r\nThe answer is the largest of these two distances, which is 2.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n<strong>Explanation: </strong>\r\n5 in binary is 0b101.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">6</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">1</span>\r\n<strong>Explanation: </strong>\r\n6 in binary is 0b110.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">8</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">0</span>\r\n<strong>Explanation: </strong>\r\n8 in binary is 0b1000.\r\nThere aren&#39;t any consecutive pairs of 1&#39;s in the binary representation of 8, so we return 0.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<code>N</code>\uff0c\u627e\u5230\u5e76\u8fd4\u56de <code>N</code>&nbsp;\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u4e24\u4e2a\u8fde\u7eed\u7684 1 \u4e4b\u95f4\u7684\u6700\u957f\u8ddd\u79bb\u3002&nbsp;</p>\n\n<p>\u5982\u679c\u6ca1\u6709\u4e24\u4e2a\u8fde\u7eed\u7684 1\uff0c\u8fd4\u56de <code>0</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>22\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\n22 \u7684\u4e8c\u8fdb\u5236\u662f 0b10110 \u3002\n\u5728 22 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c\u6709\u4e09\u4e2a 1\uff0c\u7ec4\u6210\u4e24\u5bf9\u8fde\u7eed\u7684 1 \u3002\n\u7b2c\u4e00\u5bf9\u8fde\u7eed\u7684 1 \u4e2d\uff0c\u4e24\u4e2a 1 \u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a 2 \u3002\n\u7b2c\u4e8c\u5bf9\u8fde\u7eed\u7684 1 \u4e2d\uff0c\u4e24\u4e2a 1 \u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a 1 \u3002\n\u7b54\u6848\u53d6\u4e24\u4e2a\u8ddd\u79bb\u4e4b\u4e2d\u6700\u5927\u7684\uff0c\u4e5f\u5c31\u662f 2 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>5\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\n5 \u7684\u4e8c\u8fdb\u5236\u662f 0b101 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>6\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\n6 \u7684\u4e8c\u8fdb\u5236\u662f 0b110 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>8\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\n8 \u7684\u4e8c\u8fdb\u5236\u662f 0b1000 \u3002\n\u5728 8 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6ca1\u6709\u8fde\u7eed\u7684 1\uff0c\u6240\u4ee5\u8fd4\u56de 0 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ul>\n",
        "titleZh": "\u4e8c\u8fdb\u5236\u95f4\u8ddd",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Twitter",
            "eBay"
        ]
    },
    {
        "leetId": "869",
        "link": "reordered-power-of-2",
        "title": "Reordered Power of 2",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "42.3%",
        "questionDescription": "<p>Starting with a positive integer <code>N</code>, we reorder the digits in any order (including the original order) such that the leading digit is not zero.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if we can do this in a way such that the resulting number is a power of 2.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">16</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">24</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">46</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">true</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u6b63\u6574\u6570 <code>N</code>&nbsp;\uff0c\u6211\u4eec\u6309\u4efb\u4f55\u987a\u5e8f\uff08\u5305\u62ec\u539f\u59cb\u987a\u5e8f\uff09\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5e8f\uff0c\u6ce8\u610f\u5176\u524d\u5bfc\u6570\u5b57\u4e0d\u80fd\u4e3a\u96f6\u3002</p>\n\n<p>\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u65b9\u5f0f\u5f97\u5230&nbsp;2 \u7684\u5e42\uff0c\u8fd4\u56de <code>true</code>\uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>1\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>10\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>16\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>24\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>46\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ol>\n",
        "titleZh": "\u91cd\u65b0\u6392\u5e8f\u5f97\u5230 2 \u7684\u5e42",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ]
    },
    {
        "leetId": "870",
        "link": "advantage-shuffle",
        "title": "Advantage Shuffle",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "32.5%",
        "questionDescription": "<p>Given two arrays <code>A</code> and <code>B</code> of equal size, the <em>advantage of <code>A</code> with respect to <code>B</code></em> is the number of indices <code>i</code>&nbsp;for which <code>A[i] &gt; B[i]</code>.</p>\r\n\r\n<p>Return <strong>any</strong> permutation of <code>A</code> that maximizes its advantage with respect to <code>B</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[2,7,11,15]</span>, B = <span id=\"example-input-1-2\">[1,10,4,11]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,11,7,15]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[12,24,8,32]</span>, B = <span id=\"example-input-2-2\">[13,25,32,11]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[24,32,8,12]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length = B.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\r\n\t<li><code>0 &lt;= B[i] &lt;= 10^9</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u76f8\u7b49\u7684\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>\uff0cA \u76f8\u5bf9\u4e8e B \u7684<em>\u4f18\u52bf</em>\u53ef\u4ee5\u7528\u6ee1\u8db3&nbsp;<code>A[i] &gt; B[i]</code>&nbsp;\u7684\u7d22\u5f15 <code>i</code>&nbsp;\u7684\u6570\u76ee\u6765\u63cf\u8ff0\u3002</p>\n\n<p>\u8fd4\u56de&nbsp;<code>A</code>&nbsp;\u7684<strong>\u4efb\u610f</strong>\u6392\u5217\uff0c\u4f7f\u5176\u76f8\u5bf9\u4e8e <code>B</code>&nbsp;\u7684\u4f18\u52bf\u6700\u5927\u5316\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [2,7,11,15], B = [1,10,4,11]\n<strong>\u8f93\u51fa\uff1a</strong>[2,11,7,15]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [12,24,8,32], B = [13,25,32,11]\n<strong>\u8f93\u51fa\uff1a</strong>[24,32,8,12]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length = B.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\n\t<li><code>0 &lt;= B[i] &lt;= 10^9</code></li>\n</ol>\n",
        "titleZh": "\u4f18\u52bf\u6d17\u724c",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ]
    },
    {
        "leetId": "871",
        "link": "minimum-number-of-refueling-stops",
        "title": "Minimum Number of Refueling Stops",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "25.5%",
        "questionDescription": "<p>A car travels from a starting position to a destination which is <code>target</code> miles east of the starting position.</p>\r\n\r\n<p>Along the way, there are gas stations.&nbsp; Each <code>station[i]</code>&nbsp;represents a gas station that is <code>station[i][0]</code> miles east of the starting position, and has <code>station[i][1]</code> liters of gas.</p>\r\n\r\n<p>The car starts with an infinite tank of gas, which initially has&nbsp;<code>startFuel</code>&nbsp;liters of fuel in it.&nbsp; It uses 1 liter of gas per 1 mile that it drives.</p>\r\n\r\n<p>When the car&nbsp;reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.</p>\r\n\r\n<p>What is the least number of refueling stops the car must make in order to reach its destination?&nbsp; If it cannot reach the destination, return <code>-1</code>.</p>\r\n\r\n<p>Note that if the car reaches a gas station with 0 fuel left, the car can still refuel there.&nbsp; If the car reaches the destination with 0 fuel left, it is still considered to have arrived.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>target = <span id=\"example-input-1-1\">1</span>, startFuel = <span id=\"example-input-1-2\">1</span>, stations = <span id=\"example-input-1-3\">[]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">0</span>\r\n<strong>Explanation: </strong>We can reach the target without refueling.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>target = <span id=\"example-input-2-1\">100</span>, startFuel = <span id=\"example-input-2-2\">1</span>, stations = <span id=\"example-input-2-3\">[[10,100]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">-1</span>\r\n<strong>Explanation: </strong>We can&#39;t reach the target (or even the first gas station).\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>target = <span id=\"example-input-3-1\">100</span>, startFuel = <span id=\"example-input-3-2\">10</span>, stations = <span id=\"example-input-3-3\">[[10,60],[20,30],[30,30],[60,40]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2</span>\r\n<strong>Explanation: </strong>\r\nWe start with 10 liters of fuel.\r\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\r\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\r\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\r\nWe made 2 refueling stops along the way, so we return 2.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= target, startFuel, stations[i][1] &lt;= 10^9</code></li>\r\n\t<li><code>0 &lt;= stations.length &lt;= 500</code></li>\r\n\t<li><code>0 &lt; stations[0][0] &lt; stations[1][0] &lt; ... &lt; stations[stations.length-1][0] &lt; target</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u6c7d\u8f66\u4ece\u8d77\u70b9\u51fa\u53d1\u9a76\u5411\u76ee\u7684\u5730\uff0c\u8be5\u76ee\u7684\u5730\u4f4d\u4e8e\u51fa\u53d1\u4f4d\u7f6e\u4e1c\u9762 <code>target</code>&nbsp;\u82f1\u91cc\u5904\u3002</p>\n\n<p>\u6cbf\u9014\u6709\u52a0\u6cb9\u7ad9\uff0c\u6bcf\u4e2a&nbsp;<code>station[i]</code>&nbsp;\u4ee3\u8868\u4e00\u4e2a\u52a0\u6cb9\u7ad9\uff0c\u5b83\u4f4d\u4e8e\u51fa\u53d1\u4f4d\u7f6e\u4e1c\u9762&nbsp;<code>station[i][0]</code>&nbsp;\u82f1\u91cc\u5904\uff0c\u5e76\u4e14\u6709&nbsp;<code>station[i][1]</code>&nbsp;\u5347\u6c7d\u6cb9\u3002</p>\n\n<p>\u5047\u8bbe\u6c7d\u8f66\u6cb9\u7bb1\u7684\u5bb9\u91cf\u662f\u65e0\u9650\u7684\uff0c\u5176\u4e2d\u6700\u521d\u6709&nbsp;<code>startFuel</code>&nbsp;\u5347\u71c3\u6599\u3002\u5b83\u6bcf\u884c\u9a76 1 \u82f1\u91cc\u5c31\u4f1a\u7528\u6389 1 \u5347\u6c7d\u6cb9\u3002</p>\n\n<p>\u5f53\u6c7d\u8f66\u5230\u8fbe\u52a0\u6cb9\u7ad9\u65f6\uff0c\u5b83\u53ef\u80fd\u505c\u4e0b\u6765\u52a0\u6cb9\uff0c\u5c06\u6240\u6709\u6c7d\u6cb9\u4ece\u52a0\u6cb9\u7ad9\u8f6c\u79fb\u5230\u6c7d\u8f66\u4e2d\u3002</p>\n\n<p>\u4e3a\u4e86\u5230\u8fbe\u76ee\u7684\u5730\uff0c\u6c7d\u8f66\u6240\u5fc5\u8981\u7684\u6700\u4f4e\u52a0\u6cb9\u6b21\u6570\u662f\u591a\u5c11\uff1f\u5982\u679c\u65e0\u6cd5\u5230\u8fbe\u76ee\u7684\u5730\uff0c\u5219\u8fd4\u56de <code>-1</code> \u3002</p>\n\n<p>\u6ce8\u610f\uff1a\u5982\u679c\u6c7d\u8f66\u5230\u8fbe\u52a0\u6cb9\u7ad9\u65f6\u5269\u4f59\u71c3\u6599\u4e3a 0\uff0c\u5b83\u4ecd\u7136\u53ef\u4ee5\u5728\u90a3\u91cc\u52a0\u6cb9\u3002\u5982\u679c\u6c7d\u8f66\u5230\u8fbe\u76ee\u7684\u5730\u65f6\u5269\u4f59\u71c3\u6599\u4e3a 0\uff0c\u4ecd\u7136\u8ba4\u4e3a\u5b83\u5df2\u7ecf\u5230\u8fbe\u76ee\u7684\u5730\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>target = 1, startFuel = 1, stations = []\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u5728\u4e0d\u52a0\u6cb9\u7684\u60c5\u51b5\u4e0b\u5230\u8fbe\u76ee\u7684\u5730\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>target = 100, startFuel = 1, stations = [[10,100]]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u65e0\u6cd5\u62b5\u8fbe\u76ee\u7684\u5730\uff0c\u751a\u81f3\u65e0\u6cd5\u5230\u8fbe\u7b2c\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6211\u4eec\u51fa\u53d1\u65f6\u6709 10 \u5347\u71c3\u6599\u3002\n\u6211\u4eec\u5f00\u8f66\u6765\u5230\u8ddd\u8d77\u70b9 10 \u82f1\u91cc\u5904\u7684\u52a0\u6cb9\u7ad9\uff0c\u6d88\u8017 10 \u5347\u71c3\u6599\u3002\u5c06\u6c7d\u6cb9\u4ece 0 \u5347\u52a0\u5230 60 \u5347\u3002\n\u7136\u540e\uff0c\u6211\u4eec\u4ece 10 \u82f1\u91cc\u5904\u7684\u52a0\u6cb9\u7ad9\u5f00\u5230 60 \u82f1\u91cc\u5904\u7684\u52a0\u6cb9\u7ad9\uff08\u6d88\u8017 50 \u5347\u71c3\u6599\uff09\uff0c\n\u5e76\u5c06\u6c7d\u6cb9\u4ece 10 \u5347\u52a0\u5230 50 \u5347\u3002\u7136\u540e\u6211\u4eec\u5f00\u8f66\u62b5\u8fbe\u76ee\u7684\u5730\u3002\n\u6211\u4eec\u6cbf\u9014\u57281\u4e24\u4e2a\u52a0\u6cb9\u7ad9\u505c\u9760\uff0c\u6240\u4ee5\u8fd4\u56de 2 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= target, startFuel, stations[i][1] &lt;= 10^9</code></li>\n\t<li><code>0 &lt;= stations.length &lt;= 500</code></li>\n\t<li><code>0 &lt; stations[0][0] &lt; stations[1][0] &lt; ... &lt; stations[stations.length-1][0] &lt; target</code></li>\n</ol>\n",
        "titleZh": "\u6700\u4f4e\u52a0\u6cb9\u6b21\u6570",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Microsoft"
        ]
    },
    {
        "leetId": "872",
        "link": "leaf-similar-trees",
        "title": "Leaf-Similar Trees",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "57.2%",
        "questionDescription": "<p>Consider all the leaves of a binary tree.&nbsp; From&nbsp;left to right order, the values of those&nbsp;leaves form a <em>leaf value sequence.</em></p>\r\n\r\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png\" style=\"width: 300px; height: 240px;\" /></p>\r\n\r\n<p>For example, in the given tree above, the leaf value sequence is <code>(6, 7, 4, 9, 8)</code>.</p>\r\n\r\n<p>Two binary trees are considered <em>leaf-similar</em>&nbsp;if their leaf value sequence is the same.</p>\r\n\r\n<p>Return <code>true</code> if and only if the two given trees with head nodes <code>root1</code> and <code>root2</code> are leaf-similar.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Both of the given trees will have between <code>1</code> and <code>100</code> nodes.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u8bf7\u8003\u8651\u4e00\u9897\u4e8c\u53c9\u6811\u4e0a\u6240\u6709\u7684\u53f6\u5b50\uff0c\u8fd9\u4e9b\u53f6\u5b50\u7684\u503c\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6392\u5217\u5f62\u6210\u4e00\u4e2a&nbsp;<em>\u53f6\u503c\u5e8f\u5217</em> \u3002</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png\" style=\"height: 240px; width: 300px;\"></p>\n\n<p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u7ed9\u5b9a\u4e00\u9897\u53f6\u503c\u5e8f\u5217\u4e3a&nbsp;<code>(6, 7, 4, 9, 8)</code>&nbsp;\u7684\u6811\u3002</p>\n\n<p>\u5982\u679c\u6709\u4e24\u9897\u4e8c\u53c9\u6811\u7684\u53f6\u503c\u5e8f\u5217\u662f\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8ba4\u4e3a\u5b83\u4eec\u662f&nbsp;<em>\u53f6\u76f8\u4f3c&nbsp;</em>\u7684\u3002</p>\n\n<p>\u5982\u679c\u7ed9\u5b9a\u7684\u4e24\u4e2a\u5934\u7ed3\u70b9\u5206\u522b\u4e3a&nbsp;<code>root1</code> \u548c&nbsp;<code>root2</code>&nbsp;\u7684\u6811\u662f\u53f6\u76f8\u4f3c\u7684\uff0c\u5219\u8fd4\u56de&nbsp;<code>true</code>\uff1b\u5426\u5219\u8fd4\u56de <code>false</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u7ed9\u5b9a\u7684\u4e24\u9897\u6811\u53ef\u80fd\u4f1a\u6709&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>100</code>&nbsp;\u4e2a\u7ed3\u70b9\u3002</li>\n</ul>\n",
        "titleZh": "\u53f6\u5b50\u76f8\u4f3c\u7684\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "873",
        "link": "length-of-longest-fibonacci-subsequence",
        "title": "Length of Longest Fibonacci Subsequence",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "40.7%",
        "questionDescription": "<p>A sequence <code>X_1, X_2, ..., X_n</code>&nbsp;is <em>fibonacci-like</em> if:</p>\r\n\r\n<ul>\r\n\t<li><code>n &gt;= 3</code></li>\r\n\t<li><code>X_i + X_{i+1} = X_{i+2}</code>&nbsp;for all&nbsp;<code>i + 2 &lt;= n</code></li>\r\n</ul>\r\n\r\n<p>Given a <b>strictly increasing</b>&nbsp;array&nbsp;<code>A</code> of positive integers forming a sequence, find the <strong>length</strong> of the longest fibonacci-like subsequence of <code>A</code>.&nbsp; If one does not exist, return 0.</p>\r\n\r\n<p>(<em>Recall that a subsequence is derived from another sequence <code>A</code> by&nbsp;deleting any number of&nbsp;elements (including none)&nbsp;from <code>A</code>, without changing the order of the remaining elements.&nbsp; For example, <code>[3, 5, 8]</code> is a subsequence of <code>[3, 4, 5, 6, 7, 8]</code>.</em>)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,2,3,4,5,6,7,8]\r\n<strong>Output: </strong>5\r\n<strong>Explanation:\r\n</strong>The longest subsequence that is fibonacci-like: [1,2,3,5,8].\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,3,7,11,12,14,18]\r\n<strong>Output: </strong>3\r\n<strong>Explanation</strong>:\r\nThe longest subsequence that is fibonacci-like:\r\n[1,11,12], [3,11,14] or [7,11,18].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>3 &lt;= A.length &lt;= 1000</code></li>\r\n\t<li><code>1 &lt;= A[0] &lt; A[1] &lt; ... &lt; A[A.length - 1] &lt;= 10^9</code></li>\r\n\t<li><em>(The time limit has been reduced by 50% for submissions in Java, C, and C++.)</em></li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5982\u679c\u5e8f\u5217&nbsp;<code>X_1, X_2, ..., X_n</code>&nbsp;\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff0c\u5c31\u8bf4\u5b83\u662f&nbsp;<em>\u6590\u6ce2\u90a3\u5951\u5f0f&nbsp;</em>\u7684\uff1a</p>\n\n<ul>\n\t<li><code>n &gt;= 3</code></li>\n\t<li>\u5bf9\u4e8e\u6240\u6709&nbsp;<code>i + 2 &lt;= n</code>\uff0c\u90fd\u6709&nbsp;<code>X_i + X_{i+1} = X_{i+2}</code></li>\n</ul>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u4e25\u683c\u9012\u589e</strong>\u7684\u6b63\u6574\u6570\u6570\u7ec4\u5f62\u6210\u5e8f\u5217\uff0c\u627e\u5230 <code>A</code> \u4e2d\u6700\u957f\u7684\u6590\u6ce2\u90a3\u5951\u5f0f\u7684\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u5982\u679c\u4e00\u4e2a\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de&nbsp;&nbsp;0 \u3002</p>\n\n<p><em>\uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u5b50\u5e8f\u5217\u662f\u4ece\u539f\u5e8f\u5217 <code>A</code>&nbsp;\u4e2d\u6d3e\u751f\u51fa\u6765\u7684\uff0c\u5b83\u4ece <code>A</code>&nbsp;\u4e2d\u5220\u6389\u4efb\u610f\u6570\u91cf\u7684\u5143\u7d20\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\uff09\uff0c\u800c\u4e0d\u6539\u53d8\u5176\u4f59\u5143\u7d20\u7684\u987a\u5e8f\u3002\u4f8b\u5982\uff0c&nbsp;<code>[3, 5, 8]</code>&nbsp;\u662f&nbsp;<code>[3, 4, 5, 6, 7, 8]</code>&nbsp;\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff09</em></p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,2,3,4,5,6,7,8]\n<strong>\u8f93\u51fa: </strong>5\n<strong>\u89e3\u91ca:\n</strong>\u6700\u957f\u7684\u6590\u6ce2\u90a3\u5951\u5f0f\u5b50\u5e8f\u5217\u4e3a\uff1a[1,2,3,5,8] \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>[1,3,7,11,12,14,18]\n<strong>\u8f93\u51fa: </strong>3\n<strong>\u89e3\u91ca</strong>:\n\u6700\u957f\u7684\u6590\u6ce2\u90a3\u5951\u5f0f\u5b50\u5e8f\u5217\u6709\uff1a\n[1,11,12]\uff0c[3,11,14] \u4ee5\u53ca [7,11,18] \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[0] &lt; A[1] &lt; ... &lt; A[A.length - 1] &lt;= 10^9</code></li>\n\t<li><em>\uff08\u5bf9\u4e8e\u4ee5 Java\uff0cC\uff0cC++\uff0c\u4ee5\u53ca&nbsp;C# \u7684\u63d0\u4ea4\uff0c\u65f6\u95f4\u9650\u5236\u88ab\u51cf\u5c11\u4e86 50%\uff09</em></li>\n</ul>\n",
        "titleZh": "\u6700\u957f\u7684\u6590\u6ce2\u90a3\u5951\u5b50\u5e8f\u5217\u7684\u957f\u5ea6",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Baidu",
            "Walmart Labs"
        ]
    },
    {
        "leetId": "874",
        "link": "walking-robot-simulation",
        "title": "Walking Robot Simulation",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "27.4%",
        "questionDescription": "<p>A robot on an infinite grid starts at point (0, 0) and faces north.&nbsp; The robot can receive one of three possible types of commands:</p>\r\n\r\n<ul>\r\n\t<li><code>-2</code>: turn left 90 degrees</li>\r\n\t<li><code>-1</code>: turn right 90 degrees</li>\r\n\t<li><code>1 &lt;= x &lt;= 9</code>: move forward <code>x</code> units</li>\r\n</ul>\r\n\r\n<p>Some of the grid squares are obstacles.&nbsp;</p>\r\n\r\n<p>The <code>i</code>-th obstacle is at grid point <code>(obstacles[i][0], obstacles[i][1])</code></p>\r\n\r\n<p>If the robot would try to move onto them, the robot stays on the previous grid square instead (but still continues following the rest of the route.)</p>\r\n\r\n<p>Return the <strong>square</strong> of the maximum Euclidean distance that the robot will be from the origin.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>commands = <span id=\"example-input-1-1\">[4,-1,3]</span>, obstacles = <span id=\"example-input-1-2\">[]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">25</span>\r\n<span>Explanation: </span>robot will go to (3, 4)\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>commands = <span id=\"example-input-2-1\">[4,-1,4,-2,4]</span>, obstacles = <span id=\"example-input-2-2\">[[2,4]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">65</span>\r\n<strong>Explanation</strong>: robot will be stuck at (1, 4) before turning left and going to (1, 8)\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= commands.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= obstacles.length &lt;= 10000</code></li>\r\n\t<li><code>-30000 &lt;= obstacle[i][0] &lt;= 30000</code></li>\r\n\t<li><code>-30000 &lt;= obstacle[i][1] &lt;= 30000</code></li>\r\n\t<li>The answer is guaranteed to be less than <code>2 ^ 31</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u673a\u5668\u4eba\u5728\u4e00\u4e2a\u65e0\u9650\u5927\u5c0f\u7684\u7f51\u683c\u4e0a\u884c\u8d70\uff0c\u4ece\u70b9&nbsp;(0, 0) \u5904\u5f00\u59cb\u51fa\u53d1\uff0c\u9762\u5411\u5317\u65b9\u3002\u8be5\u673a\u5668\u4eba\u53ef\u4ee5\u63a5\u6536\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b\u7684\u547d\u4ee4\uff1a</p>\n\n<ul>\n\t<li><code>-2</code>\uff1a\u5411\u5de6\u8f6c&nbsp;90 \u5ea6</li>\n\t<li><code>-1</code>\uff1a\u5411\u53f3\u8f6c 90 \u5ea6</li>\n\t<li><code>1 &lt;= x &lt;= 9</code>\uff1a\u5411\u524d\u79fb\u52a8&nbsp;<code>x</code>&nbsp;\u4e2a\u5355\u4f4d\u957f\u5ea6</li>\n</ul>\n\n<p>\u5728\u7f51\u683c\u4e0a\u6709\u4e00\u4e9b\u683c\u5b50\u88ab\u89c6\u4e3a\u969c\u788d\u7269\u3002</p>\n\n<p>\u7b2c <code>i</code>&nbsp;\u4e2a\u969c\u788d\u7269\u4f4d\u4e8e\u7f51\u683c\u70b9 &nbsp;<code>(obstacles[i][0], obstacles[i][1])</code></p>\n\n<p>\u5982\u679c\u673a\u5668\u4eba\u8bd5\u56fe\u8d70\u5230\u969c\u788d\u7269\u4e0a\u65b9\uff0c\u90a3\u4e48\u5b83\u5c06\u505c\u7559\u5728\u969c\u788d\u7269\u7684\u524d\u4e00\u4e2a\u7f51\u683c\u65b9\u5757\u4e0a\uff0c\u4f46\u4ecd\u7136\u53ef\u4ee5\u7ee7\u7eed\u8be5\u8def\u7ebf\u7684\u5176\u4f59\u90e8\u5206\u3002</p>\n\n<p>\u8fd4\u56de\u4ece\u539f\u70b9\u5230\u673a\u5668\u4eba\u7684\u6700\u5927\u6b27\u5f0f\u8ddd\u79bb\u7684<strong>\u5e73\u65b9</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>commands = [4,-1,3], obstacles = []\n<strong>\u8f93\u51fa: </strong>25\n<strong>\u89e3\u91ca:</strong> \u673a\u5668\u4eba\u5c06\u4f1a\u5230\u8fbe (3, 4)\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>commands = [4,-1,4,-2,4], obstacles = [[2,4]]\n<strong>\u8f93\u51fa: </strong>65\n<strong>\u89e3\u91ca</strong>: \u673a\u5668\u4eba\u5728\u5de6\u8f6c\u8d70\u5230 (1, 8) \u4e4b\u524d\u5c06\u88ab\u56f0\u5728 (1, 4) \u5904\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= commands.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= obstacles.length &lt;= 10000</code></li>\n\t<li><code>-30000 &lt;= obstacle[i][0] &lt;= 30000</code></li>\n\t<li><code>-30000 &lt;= obstacle[i][1] &lt;= 30000</code></li>\n\t<li>\u7b54\u6848\u4fdd\u8bc1\u5c0f\u4e8e&nbsp;<code>2 ^ 31</code></li>\n</ol>\n",
        "titleZh": "\u6a21\u62df\u884c\u8d70\u673a\u5668\u4eba",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "companies": [
            "Jane Street"
        ]
    },
    {
        "leetId": "875",
        "link": "koko-eating-bananas",
        "title": "Koko Eating Bananas",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "35.5%",
        "questionDescription": "<p>Koko loves to eat bananas.&nbsp; There are <code>N</code>&nbsp;piles of bananas, the <code>i</code>-th&nbsp;pile has <code>piles[i]</code> bananas.&nbsp; The guards have gone and will come back in <code>H</code> hours.</p>\r\n\r\n<p>Koko can decide her bananas-per-hour eating speed of <code>K</code>.&nbsp; Each hour, she chooses some pile of bananas, and eats K bananas from that pile.&nbsp; If the pile has less than <code>K</code> bananas, she eats all of them instead, and won&#39;t eat any more bananas during this hour.</p>\r\n\r\n<p>Koko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back.</p>\r\n\r\n<p>Return the minimum integer <code>K</code> such that she can eat all the bananas within <code>H</code> hours.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>piles = <span id=\"example-input-1-1\">[3,6,7,11]</span>, H = <span id=\"example-input-1-2\">8</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>piles = <span id=\"example-input-2-1\">[30,11,23,4,20]</span>, H = <span id=\"example-input-2-2\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">30</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>piles = <span id=\"example-input-3-1\">[30,11,23,4,20]</span>, H = <span id=\"example-input-3-2\">6</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">23</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= piles.length &lt;= 10^4</code></li>\r\n\t<li><code>piles.length &lt;= H &lt;= 10^9</code></li>\r\n\t<li><code>1 &lt;= piles[i] &lt;= 10^9</code></li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u73c2\u73c2\u559c\u6b22\u5403\u9999\u8549\u3002\u8fd9\u91cc\u6709&nbsp;<code>N</code>&nbsp;\u5806\u9999\u8549\uff0c\u7b2c <code>i</code> \u5806\u4e2d\u6709&nbsp;<code>piles[i]</code>&nbsp;\u6839\u9999\u8549\u3002\u8b66\u536b\u5df2\u7ecf\u79bb\u5f00\u4e86\uff0c\u5c06\u5728&nbsp;<code>H</code>&nbsp;\u5c0f\u65f6\u540e\u56de\u6765\u3002</p>\n\n<p>\u73c2\u73c2\u53ef\u4ee5\u51b3\u5b9a\u5979\u5403\u9999\u8549\u7684\u901f\u5ea6&nbsp;<code>K</code>&nbsp;\uff08\u5355\u4f4d\uff1a\u6839/\u5c0f\u65f6\uff09\u3002\u6bcf\u4e2a\u5c0f\u65f6\uff0c\u5979\u5c06\u4f1a\u9009\u62e9\u4e00\u5806\u9999\u8549\uff0c\u4ece\u4e2d\u5403\u6389 <code>K</code> \u6839\u3002\u5982\u679c\u8fd9\u5806\u9999\u8549\u5c11\u4e8e <code>K</code> \u6839\uff0c\u5979\u5c06\u5403\u6389\u8fd9\u5806\u7684\u6240\u6709\u9999\u8549\uff0c\u7136\u540e\u8fd9\u4e00\u5c0f\u65f6\u5185\u4e0d\u4f1a\u518d\u5403\u66f4\u591a\u7684\u9999\u8549\u3002&nbsp;&nbsp;</p>\n\n<p>\u73c2\u73c2\u559c\u6b22\u6162\u6162\u5403\uff0c\u4f46\u4ecd\u7136\u60f3\u5728\u8b66\u536b\u56de\u6765\u524d\u5403\u6389\u6240\u6709\u7684\u9999\u8549\u3002</p>\n\n<p>\u8fd4\u56de\u5979\u53ef\u4ee5\u5728 <code>H</code> \u5c0f\u65f6\u5185\u5403\u6389\u6240\u6709\u9999\u8549\u7684\u6700\u5c0f\u901f\u5ea6 <code>K</code>\uff08<code>K</code> \u4e3a\u6574\u6570\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>piles = [3,6,7,11], H = 8\n<strong>\u8f93\u51fa: </strong>4\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>piles = [30,11,23,4,20], H = 5\n<strong>\u8f93\u51fa: </strong>30\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165: </strong>piles = [30,11,23,4,20], H = 6\n<strong>\u8f93\u51fa: </strong>23\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= piles.length &lt;= 10^4</code></li>\n\t<li><code>piles.length &lt;= H &lt;= 10^9</code></li>\n\t<li><code>1 &lt;= piles[i] &lt;= 10^9</code></li>\n</ul>\n",
        "titleZh": "\u7231\u5403\u9999\u8549\u7684\u73c2\u73c2",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ]
    },
    {
        "leetId": "876",
        "link": "middle-of-the-linked-list",
        "title": "Middle of the Linked List",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "59.2%",
        "questionDescription": "<p>Given a non-empty, singly&nbsp;linked list with head node <code>head</code>, return&nbsp;a&nbsp;middle node of linked list.</p>\r\n\r\n<p>If there are two middle nodes, return the second middle node.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3,4,5]</span>\r\n<strong>Output: </strong>Node 3 from this list (Serialization: <span id=\"example-output-1\">[3,4,5]</span>)\r\nThe returned node has value 3.  (The judge&#39;s serialization of this node is [3,4,5]).\r\nNote that we returned a ListNode object ans, such that:\r\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,2,3,4,5,6]</span>\r\n<strong>Output: </strong>Node 4 from this list (Serialization: <span id=\"example-output-2\">[4,5,6]</span>)\r\nSince the list has two middle nodes with values 3 and 4, we return the second one.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of nodes in the given list will be between <code>1</code>&nbsp;and <code>100</code>.</li>\r\n</ul>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5e26\u6709\u5934\u7ed3\u70b9&nbsp;<code>head</code>&nbsp;\u7684\u975e\u7a7a\u5355\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\u3002</p>\n\n<p>\u5982\u679c\u6709\u4e24\u4e2a\u4e2d\u95f4\u7ed3\u70b9\uff0c\u5219\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u7ed3\u70b9\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,4,5]\n<strong>\u8f93\u51fa\uff1a</strong>\u6b64\u5217\u8868\u4e2d\u7684\u7ed3\u70b9 3 (\u5e8f\u5217\u5316\u5f62\u5f0f\uff1a[3,4,5])\n\u8fd4\u56de\u7684\u7ed3\u70b9\u503c\u4e3a 3 \u3002 (\u6d4b\u8bc4\u7cfb\u7edf\u5bf9\u8be5\u7ed3\u70b9\u5e8f\u5217\u5316\u8868\u8ff0\u662f [3,4,5])\u3002\n\u6ce8\u610f\uff0c\u6211\u4eec\u8fd4\u56de\u4e86\u4e00\u4e2a ListNode \u7c7b\u578b\u7684\u5bf9\u8c61 ans\uff0c\u8fd9\u6837\uff1a\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, \u4ee5\u53ca ans.next.next.next = NULL.\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,4,5,6]\n<strong>\u8f93\u51fa\uff1a</strong>\u6b64\u5217\u8868\u4e2d\u7684\u7ed3\u70b9 4 (\u5e8f\u5217\u5316\u5f62\u5f0f\uff1a[4,5,6])\n\u7531\u4e8e\u8be5\u5217\u8868\u6709\u4e24\u4e2a\u4e2d\u95f4\u7ed3\u70b9\uff0c\u503c\u5206\u522b\u4e3a 3 \u548c 4\uff0c\u6211\u4eec\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u7ed3\u70b9\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u7ed9\u5b9a\u94fe\u8868\u7684\u7ed3\u70b9\u6570\u4ecb\u4e8e&nbsp;<code>1</code>&nbsp;\u548c&nbsp;<code>100</code>&nbsp;\u4e4b\u95f4\u3002</li>\n</ul>\n",
        "titleZh": "\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9",
        "tags": [
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "companies": [
            "Walmart Labs"
        ]
    },
    {
        "leetId": "877",
        "link": "stone-game",
        "title": "Stone Game",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "62.6%",
        "questionDescription": "<p>Alex and Lee play a game with piles of stones.&nbsp; There are an even number of&nbsp;piles <strong>arranged in a row</strong>, and each pile has a positive integer number of stones <code>piles[i]</code>.</p>\r\n\r\n<p>The objective of the game is to end with the most&nbsp;stones.&nbsp; The total number of stones is odd, so there are no ties.</p>\r\n\r\n<p>Alex and Lee take turns, with Alex starting first.&nbsp; Each turn, a player&nbsp;takes the entire pile of stones from either the beginning or the end of the row.&nbsp; This continues until there are no more piles left, at which point the person with the most stones wins.</p>\r\n\r\n<p>Assuming Alex and Lee play optimally, return <code>True</code>&nbsp;if and only if Alex wins the game.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[5,3,4,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation: </strong>\r\nAlex starts first, and can only take the first 5 or the last 5.\r\nSay he takes the first 5, so that the row becomes [3, 4, 5].\r\nIf Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\r\nIf Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\r\nThis demonstrated that taking the first 5 was a winning move for Alex, so we return true.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= piles.length &lt;= 500</code></li>\r\n\t<li><code>piles.length</code> is even.</li>\r\n\t<li><code>1 &lt;= piles[i] &lt;= 500</code></li>\r\n\t<li><code>sum(piles)</code> is odd.</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u4e9a\u5386\u514b\u65af\u548c\u674e\u7528\u51e0\u5806\u77f3\u5b50\u5728\u505a\u6e38\u620f\u3002\u5076\u6570\u5806\u77f3\u5b50<strong>\u6392\u6210\u4e00\u884c</strong>\uff0c\u6bcf\u5806\u90fd\u6709\u6b63\u6574\u6570\u9897\u77f3\u5b50&nbsp;<code>piles[i]</code>&nbsp;\u3002</p>\n\n<p>\u6e38\u620f\u4ee5\u8c01\u624b\u4e2d\u7684\u77f3\u5b50\u6700\u591a\u6765\u51b3\u51fa\u80dc\u8d1f\u3002\u77f3\u5b50\u7684\u603b\u6570\u662f\u5947\u6570\uff0c\u6240\u4ee5\u6ca1\u6709\u5e73\u5c40\u3002</p>\n\n<p>\u4e9a\u5386\u514b\u65af\u548c\u674e\u8f6e\u6d41\u8fdb\u884c\uff0c\u4e9a\u5386\u514b\u65af\u5148\u5f00\u59cb\u3002 \u6bcf\u56de\u5408\uff0c\u73a9\u5bb6\u4ece\u884c\u7684\u5f00\u59cb\u6216\u7ed3\u675f\u5904\u53d6\u8d70\u6574\u5806\u77f3\u5934\u3002 \u8fd9\u79cd\u60c5\u51b5\u4e00\u76f4\u6301\u7eed\u5230\u6ca1\u6709\u66f4\u591a\u7684\u77f3\u5b50\u5806\u4e3a\u6b62\uff0c\u6b64\u65f6\u624b\u4e2d\u77f3\u5b50\u6700\u591a\u7684\u73a9\u5bb6\u83b7\u80dc\u3002</p>\n\n<p>\u5047\u8bbe\u4e9a\u5386\u514b\u65af\u548c\u674e\u90fd\u53d1\u6325\u51fa\u6700\u4f73\u6c34\u5e73\uff0c\u5f53\u4e9a\u5386\u514b\u65af\u8d62\u5f97\u6bd4\u8d5b\u65f6\u8fd4\u56de&nbsp;<code>true</code>&nbsp;\uff0c\u5f53\u674e\u8d62\u5f97\u6bd4\u8d5b\u65f6\u8fd4\u56de&nbsp;<code>false</code>&nbsp;\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,3,4,5]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4e9a\u5386\u514b\u65af\u5148\u5f00\u59cb\uff0c\u53ea\u80fd\u62ff\u524d 5 \u9897\u6216\u540e 5 \u9897\u77f3\u5b50 \u3002\n\u5047\u8bbe\u4ed6\u53d6\u4e86\u524d 5 \u9897\uff0c\u8fd9\u4e00\u884c\u5c31\u53d8\u6210\u4e86 [3,4,5] \u3002\n\u5982\u679c\u674e\u62ff\u8d70\u524d 3 \u9897\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u662f [4,5]\uff0c\u4e9a\u5386\u514b\u65af\u62ff\u8d70\u540e 5 \u9897\u8d62\u5f97 10 \u5206\u3002\n\u5982\u679c\u674e\u62ff\u8d70\u540e 5 \u9897\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u662f [3,4]\uff0c\u4e9a\u5386\u514b\u65af\u62ff\u8d70\u540e 4 \u9897\u8d62\u5f97 9 \u5206\u3002\n\u8fd9\u8868\u660e\uff0c\u53d6\u524d 5 \u9897\u77f3\u5b50\u5bf9\u4e9a\u5386\u514b\u65af\u6765\u8bf4\u662f\u4e00\u4e2a\u80dc\u5229\u7684\u4e3e\u52a8\uff0c\u6240\u4ee5\u6211\u4eec\u8fd4\u56de true \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= piles.length &lt;= 500</code></li>\n\t<li><code>piles.length</code> \u662f\u5076\u6570\u3002</li>\n\t<li><code>1 &lt;= piles[i] &lt;= 500</code></li>\n\t<li><code>sum(piles)</code>&nbsp;\u662f\u5947\u6570\u3002</li>\n</ol>\n",
        "titleZh": "\u77f3\u5b50\u6e38\u620f",
        "tags": [
            {
                "tag": "Minimax",
                "link": "minimax",
                "tagZh": "\u6781\u5c0f\u5316\u6781\u5927"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "878",
        "link": "nth-magical-number",
        "title": "Nth Magical Number",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "16.8%",
        "questionDescription": "<p>A positive integer&nbsp;is <em>magical</em>&nbsp;if it is divisible by either <font face=\"monospace\">A</font>&nbsp;or <font face=\"monospace\">B</font>.</p>\r\n\r\n<p>Return the <font face=\"monospace\">N</font>-th magical number.&nbsp; Since the answer may be very large, <strong>return it modulo </strong><code>10^9 + 7</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-1-1\">1</span>, A = <span id=\"example-input-1-2\">2</span>, B = <span id=\"example-input-1-3\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-2-1\">4</span>, A = <span id=\"example-input-2-2\">2</span>, B = <span id=\"example-input-2-3\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-3-1\">5</span>, A = <span id=\"example-input-3-2\">2</span>, B = <span id=\"example-input-3-3\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">10</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-4-1\">3</span>, A = <span id=\"example-input-4-2\">6</span>, B = <span id=\"example-input-4-3\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">8</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N&nbsp;&lt;= 10^9</code></li>\r\n\t<li><code>2 &lt;= A&nbsp;&lt;= 40000</code></li>\r\n\t<li><code>2 &lt;= B&nbsp;&lt;= 40000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5982\u679c\u6b63\u6574\u6570\u53ef\u4ee5\u88ab A \u6216 B \u6574\u9664\uff0c\u90a3\u4e48\u5b83\u662f\u795e\u5947\u7684\u3002</p>\n\n<p>\u8fd4\u56de\u7b2c N \u4e2a\u795e\u5947\u6570\u5b57\u3002\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u975e\u5e38\u5927\uff0c<strong>\u8fd4\u56de\u5b83\u6a21&nbsp;</strong><code>10^9 + 7</code>&nbsp;<strong>\u7684\u7ed3\u679c</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 1, A = 2, B = 3\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 4, A = 2, B = 3\n<strong>\u8f93\u51fa\uff1a</strong>6\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 5, A = 2, B = 4\n<strong>\u8f93\u51fa\uff1a</strong>10\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 3, A = 6, B = 4\n<strong>\u8f93\u51fa\uff1a</strong>8\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N&nbsp;&lt;= 10^9</code></li>\n\t<li><code>2 &lt;= A&nbsp;&lt;= 40000</code></li>\n\t<li><code>2 &lt;= B&nbsp;&lt;= 40000</code></li>\n</ol>\n",
        "titleZh": "\u7b2c N \u4e2a\u795e\u5947\u6570\u5b57",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ]
    },
    {
        "leetId": "879",
        "link": "profitable-schemes",
        "title": "Profitable Schemes",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "21.5%",
        "questionDescription": "<p>There are G people in a gang, and a list of various crimes they could commit.</p>\r\n\r\n<p>The <code>i</code>-th crime generates a <code>profit[i]</code> and requires <code>group[i]</code> gang members to participate.</p>\r\n\r\n<p>If a gang member participates in one crime, that member can&#39;t participate in another crime.</p>\r\n\r\n<p>Let&#39;s call a <em>profitable&nbsp;scheme</em>&nbsp;any subset of these crimes that generates at least <code>P</code> profit, and the total number of gang members participating in that subset of crimes is at most G.</p>\r\n\r\n<p>How many schemes can be chosen?&nbsp; Since the answer may be very&nbsp;large, <strong>return it modulo</strong> <code>10^9 + 7</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>G = <span id=\"example-input-1-1\">5</span>, P = <span id=\"example-input-1-2\">3</span>, group = <span id=\"example-input-1-3\">[2,2]</span>, profit = <span id=\"example-input-1-4\">[2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>\r\nTo make a profit of at least 3, the gang could either commit crimes 0 and 1, or just crime 1.\r\nIn total, there are 2 schemes.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>G = <span id=\"example-input-2-1\">10</span>, P = <span id=\"example-input-2-2\">5</span>, group = <span id=\"example-input-2-3\">[2,3,5]</span>, profit = <span id=\"example-input-2-4\">[6,7,8]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">7</span>\r\n<strong>Explanation: </strong>\r\nTo make a profit of at least 5, the gang could commit any crimes, as long as they commit one.\r\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= G &lt;= 100</code></li>\r\n\t<li><code>0 &lt;= P &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= group[i] &lt;= 100</code></li>\r\n\t<li><code>0 &lt;= profit[i] &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= group.length = profit.length &lt;= 100</code></li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5e2e\u6d3e\u91cc\u6709 G \u540d\u6210\u5458\uff0c\u4ed6\u4eec\u53ef\u80fd\u72af\u4e0b\u5404\u79cd\u5404\u6837\u7684\u7f6a\u884c\u3002</p>\n\n<p>\u7b2c&nbsp;<code>i</code>&nbsp;\u79cd\u72af\u7f6a\u4f1a\u4ea7\u751f&nbsp;<code>profit[i]</code>&nbsp;\u7684\u5229\u6da6\uff0c\u5b83\u8981\u6c42&nbsp;<code>group[i]</code>&nbsp;\u540d\u6210\u5458\u5171\u540c\u53c2\u4e0e\u3002</p>\n\n<p>\u8ba9\u6211\u4eec\u628a\u8fd9\u4e9b\u72af\u7f6a\u7684\u4efb\u4f55\u5b50\u96c6\u79f0\u4e3a\u76c8\u5229\u8ba1\u5212\uff0c\u8be5\u8ba1\u5212\u81f3\u5c11\u4ea7\u751f&nbsp;<code>P</code> \u7684\u5229\u6da6\u3002</p>\n\n<p>\u6709\u591a\u5c11\u79cd\u65b9\u6848\u53ef\u4ee5\u9009\u62e9\uff1f\u56e0\u4e3a\u7b54\u6848\u5f88\u5927\uff0c\u6240\u4ee5<strong>\u8fd4\u56de\u5b83\u6a21&nbsp;</strong><code>10^9 + 7</code><strong>&nbsp;\u7684\u503c</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b&nbsp;1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>G = 5, P = 3, group = [2,2], profit = [2,3]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a </strong>\n\u81f3\u5c11\u4ea7\u751f 3 \u7684\u5229\u6da6\uff0c\u8be5\u5e2e\u6d3e\u53ef\u4ee5\u72af\u4e0b\u7f6a 0 \u548c\u7f6a 1 \uff0c\u6216\u4ec5\u72af\u4e0b\u7f6a 1 \u3002\n\u603b\u7684\u6765\u8bf4\uff0c\u6709\u4e24\u79cd\u65b9\u6848\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2:</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>G = 10, P = 5, group = [2,3,5], profit = [6,7,8]\n<strong>\u8f93\u51fa\uff1a</strong>7\n<strong>\u89e3\u91ca\uff1a</strong>\n\u81f3\u5c11\u4ea7\u751f 5 \u7684\u5229\u6da6\uff0c\u53ea\u8981\u4ed6\u4eec\u72af\u5176\u4e2d\u4e00\u79cd\u7f6a\u5c31\u884c\uff0c\u6240\u4ee5\u8be5\u5e2e\u6d3e\u53ef\u4ee5\u72af\u4e0b\u4efb\u4f55\u7f6a\u884c \u3002\n\u6709 7 \u79cd\u53ef\u80fd\u7684\u8ba1\u5212\uff1a(0)\uff0c(1)\uff0c(2)\uff0c(0,1)\uff0c(0,2)\uff0c(1,2)\uff0c\u4ee5\u53ca (0,1,2) \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= G &lt;= 100</code></li>\n\t<li><code>0 &lt;= P &lt;= 100</code></li>\n\t<li><code>1 &lt;= group[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= profit[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= group.length = profit.length &lt;= 100</code></li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "titleZh": "\u76c8\u5229\u8ba1\u5212",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "companies": [
            "Google",
            "LinkedIn"
        ]
    },
    {
        "leetId": "884",
        "link": "decoded-string-at-index",
        "title": "Decoded String at Index",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "54.2%",
        "questionDescription": "<p>We are given two sentences <code>A</code> and <code>B</code>.&nbsp; (A <em>sentence</em>&nbsp;is a string of space separated words.&nbsp; Each <em>word</em> consists only of lowercase letters.)</p>\r\n\r\n<p>A word is <em>uncommon</em>&nbsp;if it appears exactly once in one of the sentences, and does not appear in the other sentence.</p>\r\n\r\n<p>Return a list of all uncommon words.&nbsp;</p>\r\n\r\n<p>You may return the list in any order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">&quot;this apple is sweet&quot;</span>, B = <span id=\"example-input-1-2\">&quot;this apple is sour&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;sweet&quot;,&quot;sour&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">&quot;apple apple&quot;</span>, B = <span id=\"example-input-2-2\">&quot;banana&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[&quot;banana&quot;]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt;= 200</code></li>\r\n\t<li><code>0 &lt;= B.length &lt;= 200</code></li>\r\n\t<li><code>A</code> and <code>B</code> both contain only spaces and lowercase letters.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u53e5\u5b50&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>&nbsp;\u3002&nbsp;\uff08<em>\u53e5\u5b50</em>\u662f\u4e00\u4e32\u7531\u7a7a\u683c\u5206\u9694\u7684\u5355\u8bcd\u3002\u6bcf\u4e2a<em>\u5355\u8bcd</em>\u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\uff09</p>\n\n<p>\u5982\u679c\u4e00\u4e2a\u5355\u8bcd\u5728\u5176\u4e2d\u4e00\u4e2a\u53e5\u5b50\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5728\u53e6\u4e00\u4e2a\u53e5\u5b50\u4e2d\u5374\u6ca1\u6709\u51fa\u73b0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5355\u8bcd\u5c31\u662f<em>\u4e0d\u5e38\u89c1\u7684</em>\u3002</p>\n\n<p>\u8fd4\u56de\u6240\u6709\u4e0d\u5e38\u7528\u5355\u8bcd\u7684\u5217\u8868\u3002</p>\n\n<p>\u60a8\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u5217\u8868\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = &quot;this apple is sweet&quot;, B = &quot;this apple is sour&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;sweet&quot;,&quot;sour&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = &quot;apple apple&quot;, B = &quot;banana&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;banana&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 200</code></li>\n\t<li><code>0 &lt;= B.length &lt;= 200</code></li>\n\t<li><code>A</code> \u548c&nbsp;<code>B</code>&nbsp;\u90fd\u53ea\u5305\u542b\u7a7a\u683c\u548c\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n",
        "titleZh": "\u4e24\u53e5\u8bdd\u4e2d\u7684\u4e0d\u5e38\u89c1\u5355\u8bcd",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "companies": [
            "National Instruments"
        ]
    },
    {
        "leetId": "885",
        "link": "boats-to-save-people",
        "title": "Boats to Save People",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "55.9%",
        "questionDescription": "<p>On a 2 dimensional grid with <code>R</code> rows and <code>C</code> columns, we start at <code>(r0, c0)</code> facing east.</p>\r\n\r\n<p>Here, the north-west corner of the grid is at the&nbsp;first row and column, and the south-east corner of the grid is at the last row and column.</p>\r\n\r\n<p>Now, we walk in a clockwise spiral shape to visit every position in this grid.&nbsp;</p>\r\n\r\n<p>Whenever we would move outside the boundary of the grid, we continue our walk outside the grid (but may return to the grid boundary later.)&nbsp;</p>\r\n\r\n<p>Eventually, we reach all <code>R * C</code> spaces of the grid.</p>\r\n\r\n<p>Return a list of coordinates representing the positions of the grid in the order they were visited.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>R = <span id=\"example-input-1-1\">1</span>, C = <span id=\"example-input-1-2\">4</span>, r0 = <span id=\"example-input-1-3\">0</span>, c0 = <span id=\"example-input-1-4\">0</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[0,0],[0,1],[0,2],[0,3]]</span>\r\n\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_1.png\" style=\"width: 174px; height: 99px;\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>R = <span id=\"example-input-2-1\">5</span>, C = <span id=\"example-input-2-2\">6</span>, r0 = <span id=\"example-input-2-3\">1</span>, c0 = <span id=\"example-input-2-4\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]</span>\r\n\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_2.png\" style=\"width: 202px; height: 142px;\" />\r\n</pre>\r\n\r\n<div>\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= R &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= C &lt;= 100</code></li>\r\n\t<li><code>0 &lt;= r0 &lt; R</code></li>\r\n\t<li><code>0 &lt;= c0 &lt; C</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5728&nbsp;<code>R</code>&nbsp;\u884c&nbsp;<code>C</code>&nbsp;\u5217\u7684\u77e9\u9635\u4e0a\uff0c\u6211\u4eec\u4ece&nbsp;<code>(r0, c0)</code>&nbsp;\u9762\u671d\u4e1c\u9762\u5f00\u59cb</p>\n\n<p>\u8fd9\u91cc\uff0c\u7f51\u683c\u7684\u897f\u5317\u89d2\u4f4d\u4e8e\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\uff0c\u7f51\u683c\u7684\u4e1c\u5357\u89d2\u4f4d\u4e8e\u6700\u540e\u4e00\u884c\u6700\u540e\u4e00\u5217\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u4ee5\u987a\u65f6\u9488\u6309\u87ba\u65cb\u72b6\u884c\u8d70\uff0c\u8bbf\u95ee\u6b64\u7f51\u683c\u4e2d\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u3002</p>\n\n<p>\u6bcf\u5f53\u6211\u4eec\u79fb\u52a8\u5230\u7f51\u683c\u7684\u8fb9\u754c\u4e4b\u5916\u65f6\uff0c\u6211\u4eec\u4f1a\u7ee7\u7eed\u5728\u7f51\u683c\u4e4b\u5916\u884c\u8d70\uff08\u4f46\u7a0d\u540e\u53ef\u80fd\u4f1a\u8fd4\u56de\u5230\u7f51\u683c\u8fb9\u754c\uff09\u3002</p>\n\n<p>\u6700\u7ec8\uff0c\u6211\u4eec\u5230\u8fc7\u7f51\u683c\u7684\u6240\u6709&nbsp;<code>R * C</code>&nbsp;\u4e2a\u7a7a\u95f4\u3002</p>\n\n<p>\u6309\u7167\u8bbf\u95ee\u987a\u5e8f\u8fd4\u56de\u8868\u793a\u7f51\u683c\u4f4d\u7f6e\u7684\u5750\u6807\u5217\u8868\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>R = 1, C = 4, r0 = 0, c0 = 0\n<strong>\u8f93\u51fa\uff1a</strong>[[0,0],[0,1],[0,2],[0,3]]\n\n<img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/example_1.png\" style=\"height: 99px; width: 174px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>R = 5, C = 6, r0 = 1, c0 = 4\n<strong>\u8f93\u51fa\uff1a</strong>[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\n\n<img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/example_2.png\" style=\"height: 142px; width: 202px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= R &lt;= 100</code></li>\n\t<li><code>1 &lt;= C &lt;= 100</code></li>\n\t<li><code>0 &lt;= r0 &lt; R</code></li>\n\t<li><code>0 &lt;= c0 &lt; C</code></li>\n</ol>\n",
        "titleZh": "\u87ba\u65cb\u77e9\u9635 III",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "leetId": "886",
        "link": "reachable-nodes-in-subdivided-graph",
        "title": "Reachable Nodes In Subdivided Graph",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "30.3%",
        "questionDescription": "<p>Given a set of <code>N</code>&nbsp;people (numbered <code>1, 2, ..., N</code>), we would like to split everyone into two groups of <strong>any</strong> size.</p>\r\n\r\n<p>Each person may dislike some other people, and they should not go into the same group.&nbsp;</p>\r\n\r\n<p>Formally, if <code>dislikes[i] = [a, b]</code>, it means it is not allowed to put the people numbered <code>a</code> and <code>b</code> into the same group.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if it is possible to split everyone into two groups in this way.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<ol>\r\n</ol>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-1-1\">4</span>, dislikes = <span id=\"example-input-1-2\">[[1,2],[1,3],[2,4]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation</strong>: group1 [1,4], group2 [2,3]\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-2-1\">3</span>, dislikes = <span id=\"example-input-2-2\">[[1,2],[1,3],[2,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-3-1\">5</span>, dislikes = <span id=\"example-input-3-2\">[[1,2],[2,3],[3,4],[4,5],[1,5]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">false</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 2000</code></li>\r\n\t<li><code>0 &lt;= dislikes.length &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= dislikes[i][j] &lt;= N</code></li>\r\n\t<li><code>dislikes[i][0] &lt; dislikes[i][1]</code></li>\r\n\t<li>There does not exist <code>i != j</code> for which <code>dislikes[i] == dislikes[j]</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u7ec4&nbsp;<code>N</code>&nbsp;\u4eba\uff08\u7f16\u53f7\u4e3a&nbsp;<code>1, 2, ..., N</code>\uff09\uff0c&nbsp;\u6211\u4eec\u60f3\u628a\u6bcf\u4e2a\u4eba\u5206\u8fdb<strong>\u4efb\u610f</strong>\u5927\u5c0f\u7684\u4e24\u7ec4\u3002</p>\n\n<p>\u6bcf\u4e2a\u4eba\u90fd\u53ef\u80fd\u4e0d\u559c\u6b22\u5176\u4ed6\u4eba\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e0d\u5e94\u8be5\u5c5e\u4e8e\u540c\u4e00\u7ec4\u3002</p>\n\n<p>\u5f62\u5f0f\u4e0a\uff0c\u5982\u679c <code>dislikes[i] = [a, b]</code>\uff0c\u8868\u793a\u4e0d\u5141\u8bb8\u5c06\u7f16\u53f7\u4e3a <code>a</code> \u548c <code>b</code> \u7684\u4eba\u5f52\u5165\u540c\u4e00\u7ec4\u3002</p>\n\n<p>\u5f53\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u5c06\u6bcf\u4e2a\u4eba\u5206\u8fdb\u4e24\u7ec4\u65f6\uff0c\u8fd4\u56de <code>true</code>\uff1b\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 4, dislikes = [[1,2],[1,3],[2,4]]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>group1 [1,4], group2 [2,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 3, dislikes = [[1,2],[1,3],[2,3]]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 2000</code></li>\n\t<li><code>0 &lt;= dislikes.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= dislikes[i][j] &lt;= N</code></li>\n\t<li><code>dislikes[i][0] &lt; dislikes[i][1]</code></li>\n\t<li>\u5bf9\u4e8e&nbsp;<code>dislikes[i] == dislikes[j]</code>&nbsp;\u4e0d\u5b58\u5728&nbsp;<code>i != j</code>&nbsp;</li>\n</ol>\n",
        "titleZh": "\u53ef\u80fd\u7684\u4e8c\u5206\u6cd5",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ]
    },
    {
        "leetId": "887",
        "link": "projection-area-of-3d-shapes",
        "title": "Projection Area of 3D Shapes",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "18.0%",
        "questionDescription": "<p>You are given <code>K</code> eggs, and you have access to a building with <code>N</code> floors from <code>1</code> to <code>N</code>.&nbsp;</p>\r\n\r\n<p>Each egg is identical in function, and if an egg breaks, you cannot drop it&nbsp;again.</p>\r\n\r\n<p>You know that there exists a floor <code>F</code> with <code>0 &lt;= F &lt;= N</code> such that any egg dropped at a floor higher than <code>F</code> will break, and any egg dropped at or below floor <code>F</code> will not break.</p>\r\n\r\n<p>Each <em>move</em>, you may take an egg (if you have an unbroken one) and drop it from any floor <code>X</code> (with&nbsp;<code>1 &lt;= X &lt;= N</code>).&nbsp;</p>\r\n\r\n<p>Your goal is to know&nbsp;<strong>with certainty</strong>&nbsp;what the value of <code>F</code> is.</p>\r\n\r\n<p>What is the minimum number of moves that you need to know with certainty&nbsp;what <code>F</code> is, regardless of the initial value of <code>F</code>?</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>K = <span id=\"example-input-1-1\">1</span>, N = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>\r\nDrop the egg from floor 1.  If it breaks, we know with certainty that F = 0.\r\nOtherwise, drop the egg from floor 2.  If it breaks, we know with certainty that F = 1.\r\nIf it didn&#39;t break, then we know with certainty F = 2.\r\nHence, we needed 2 moves in the worst case to know what F is with certainty.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>K = <span id=\"example-input-2-1\">2</span>, N = 6\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>K = <span id=\"example-input-3-1\">3</span>, N = <span id=\"example-input-3-2\">14</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">4</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= K &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= N &lt;= 10000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u4f60\u5c06\u83b7\u5f97&nbsp;<code>K</code>&nbsp;\u4e2a\u9e21\u86cb\uff0c\u5e76\u53ef\u4ee5\u4f7f\u7528\u4e00\u680b\u4ece&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>N</code>&nbsp;&nbsp;\u5171\u6709 <code>N</code>&nbsp;\u5c42\u697c\u7684\u5efa\u7b51\u3002</p>\n\n<p>\u6bcf\u4e2a\u86cb\u7684\u529f\u80fd\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u86cb\u788e\u4e86\uff0c\u4f60\u5c31\u4e0d\u80fd\u518d\u628a\u5b83\u6389\u4e0b\u53bb\u3002</p>\n\n<p>\u4f60\u77e5\u9053\u5b58\u5728\u697c\u5c42&nbsp;<code>F</code> \uff0c\u6ee1\u8db3&nbsp;<code>0 &lt;= F &lt;= N</code> \u4efb\u4f55\u4ece\u9ad8\u4e8e <code>F</code>&nbsp;\u7684\u697c\u5c42\u843d\u4e0b\u7684\u9e21\u86cb\u90fd\u4f1a\u788e\uff0c\u4ece&nbsp;<code>F</code>&nbsp;\u697c\u5c42\u6216\u6bd4\u5b83\u4f4e\u7684\u697c\u5c42\u843d\u4e0b\u7684\u9e21\u86cb\u90fd\u4e0d\u4f1a\u7834\u3002</p>\n\n<p>\u6bcf\u6b21<em>\u79fb\u52a8</em>\uff0c\u4f60\u53ef\u4ee5\u53d6\u4e00\u4e2a\u9e21\u86cb\uff08\u5982\u679c\u4f60\u6709\u5b8c\u6574\u7684\u9e21\u86cb\uff09\u5e76\u628a\u5b83\u4ece\u4efb\u4e00\u697c\u5c42&nbsp;<code>X</code>&nbsp;\u6254\u4e0b\uff08\u6ee1\u8db3&nbsp;<code>1 &lt;= X &lt;= N</code>\uff09\u3002</p>\n\n<p>\u4f60\u7684\u76ee\u6807\u662f<strong>\u786e\u5207\u5730</strong>\u77e5\u9053 <code>F</code> \u7684\u503c\u662f\u591a\u5c11\u3002</p>\n\n<p>\u65e0\u8bba <code>F</code> \u7684\u521d\u59cb\u503c\u5982\u4f55\uff0c\u4f60\u786e\u5b9a <code>F</code> \u7684\u503c\u7684\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u591a\u5c11\uff1f</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>K = 1, N = 2\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\n\u9e21\u86cb\u4ece 1 \u697c\u6389\u843d\u3002\u5982\u679c\u5b83\u788e\u4e86\uff0c\u6211\u4eec\u80af\u5b9a\u77e5\u9053 F = 0 \u3002\n\u5426\u5219\uff0c\u9e21\u86cb\u4ece 2 \u697c\u6389\u843d\u3002\u5982\u679c\u5b83\u788e\u4e86\uff0c\u6211\u4eec\u80af\u5b9a\u77e5\u9053 F = 1 \u3002\n\u5982\u679c\u5b83\u6ca1\u788e\uff0c\u90a3\u4e48\u6211\u4eec\u80af\u5b9a\u77e5\u9053 F = 2 \u3002\n\u56e0\u6b64\uff0c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u9700\u8981\u79fb\u52a8 2 \u6b21\u4ee5\u786e\u5b9a F \u662f\u591a\u5c11\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>K = 2, N = 6\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>K = 3, N = 14\n<strong>\u8f93\u51fa\uff1a</strong>4\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= 100</code></li>\n\t<li><code>1 &lt;= N &lt;= 10000</code></li>\n</ol>\n",
        "titleZh": "\u9e21\u86cb\u6389\u843d",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ]
    },
    {
        "leetId": "888",
        "link": "uncommon-words-from-two-sentences",
        "title": "Uncommon Words from Two Sentences",
        "is_locked": "Normal",
        "difficulty": "Easy",
        "frequency": "47.5%",
        "questionDescription": "<p>Alice and Bob have candy bars of different sizes: <code>A[i]</code> is the size of the <code>i</code>-th bar of candy that Alice has, and <code>B[j]</code> is the size of the <code>j</code>-th bar of candy that Bob has.</p>\r\n\r\n<p>Since they are friends, they would like to exchange one candy bar each so that after the exchange, they both have the same total&nbsp;amount of candy.&nbsp; (<em>The total amount of candy&nbsp;a person has is the sum of the sizes of candy&nbsp;bars they have.</em>)</p>\r\n\r\n<p>Return an integer array <code>ans</code>&nbsp;where <code>ans[0]</code> is the size of the candy bar that Alice must exchange, and <code>ans[1]</code> is the size of the candy bar that Bob must exchange.</p>\r\n\r\n<p>If there are multiple answers, you may return any one of them.&nbsp; It is guaranteed an answer exists.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,1]</span>, B = <span id=\"example-input-1-2\">[2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[1,2]</span>, B = <span id=\"example-input-2-2\">[2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[1,2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[2]</span>, B = <span id=\"example-input-3-2\">[1,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[2,3]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-4-1\">[1,2,5]</span>, B = <span id=\"example-input-4-2\">[2,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">[5,4]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ul>\r\n\t<li><span><code>1 &lt;= A.length &lt;= 10000</code></span></li>\r\n\t<li><span><code>1 &lt;= B.length &lt;= 10000</code></span></li>\r\n\t<li><code><span>1 &lt;= A[i] &lt;= 100000</span></code></li>\r\n\t<li><code><span>1 &lt;= B[i] &lt;= 100000</span></code></li>\r\n\t<li>It is guaranteed that Alice and Bob have different total amounts of&nbsp;candy.</li>\r\n\t<li>It is guaranteed there exists an&nbsp;answer.</li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7231\u4e3d\u4e1d\u548c\u9c8d\u52c3\u6709\u4e0d\u540c\u5927\u5c0f\u7684\u7cd6\u679c\u68d2\uff1a<code>A[i]</code> \u662f\u7231\u4e3d\u4e1d\u62e5\u6709\u7684\u7b2c <code>i</code>&nbsp;\u5757\u7cd6\u7684\u5927\u5c0f\uff0c<code>B[j]</code> \u662f\u9c8d\u52c3\u62e5\u6709\u7684\u7b2c <code>j</code>&nbsp;\u5757\u7cd6\u7684\u5927\u5c0f\u3002</p>\n\n<p>\u56e0\u4e3a\u4ed6\u4eec\u662f\u670b\u53cb\uff0c\u6240\u4ee5\u4ed6\u4eec\u60f3\u4ea4\u6362\u4e00\u4e2a\u7cd6\u679c\u68d2\uff0c\u8fd9\u6837\u4ea4\u6362\u540e\uff0c\u4ed6\u4eec\u90fd\u6709\u76f8\u540c\u7684\u7cd6\u679c\u603b\u91cf\u3002<em>\uff08\u4e00\u4e2a\u4eba\u62e5\u6709\u7684\u7cd6\u679c\u603b\u91cf\u662f\u4ed6\u4eec\u62e5\u6709\u7684\u7cd6\u679c\u68d2\u5927\u5c0f\u7684\u603b\u548c\u3002\uff09</em></p>\n\n<p>\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>ans</code>\uff0c\u5176\u4e2d <code>ans[0]</code> \u662f\u7231\u4e3d\u4e1d\u5fc5\u987b\u4ea4\u6362\u7684\u7cd6\u679c\u68d2\u7684\u5927\u5c0f\uff0c<code>ans[1]</code>&nbsp;\u662f Bob \u5fc5\u987b\u4ea4\u6362\u7684\u7cd6\u679c\u68d2\u7684\u5927\u5c0f\u3002</p>\n\n<p>\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u4f60\u53ef\u4ee5\u8fd4\u56de\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u3002\u4fdd\u8bc1\u7b54\u6848\u5b58\u5728\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,1], B = [2,2]\n<strong>\u8f93\u51fa\uff1a</strong>[1,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,2], B = [2,3]\n<strong>\u8f93\u51fa\uff1a</strong>[1,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [2], B = [1,3]\n<strong>\u8f93\u51fa\uff1a</strong>[2,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,2,5], B = [2,4]\n<strong>\u8f93\u51fa\uff1a</strong>[5,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= B.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 100000</code></li>\n\t<li><code>1 &lt;= B[i] &lt;= 100000</code></li>\n\t<li>\u4fdd\u8bc1\u7231\u4e3d\u4e1d\u4e0e\u9c8d\u52c3\u7684\u7cd6\u679c\u603b\u91cf\u4e0d\u540c\u3002</li>\n\t<li>\u7b54\u6848\u80af\u5b9a\u5b58\u5728\u3002</li>\n</ul>\n",
        "titleZh": "\u516c\u5e73\u7684\u7cd6\u679c\u4ea4\u6362",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "companies": [
            "Expedia"
        ]
    },
    {
        "leetId": "889",
        "link": "spiral-matrix-iii",
        "title": "Spiral Matrix III",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "55.4%",
        "questionDescription": "<p>Return any binary tree that matches the given preorder and postorder traversals.</p>\r\n\r\n<p>Values in the traversals&nbsp;<code>pre</code> and <code>post</code>&nbsp;are distinct&nbsp;positive integers.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>pre = <span id=\"example-input-1-1\">[1,2,4,5,3,6,7]</span>, post = <span id=\"example-input-1-2\">[4,5,2,6,7,3,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2,3,4,5,6,7]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= pre.length == post.length &lt;= 30</code></li>\r\n\t<li><code>pre[]</code> and <code>post[]</code>&nbsp;are both permutations of <code>1, 2, ..., pre.length</code>.</li>\r\n\t<li>It is guaranteed an answer exists. If there exists multiple answers, you can return any of them.</li>\r\n</ul>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u8fd4\u56de\u4e0e\u7ed9\u5b9a\u7684\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u5339\u914d\u7684\u4efb\u4f55\u4e8c\u53c9\u6811\u3002</p>\n\n<p>&nbsp;<code>pre</code>&nbsp;\u548c&nbsp;<code>post</code>&nbsp;\u904d\u5386\u4e2d\u7684\u503c\u662f\u4e0d\u540c\u7684\u6b63\u6574\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]\n<strong>\u8f93\u51fa\uff1a</strong>[1,2,3,4,5,6,7]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pre.length == post.length &lt;= 30</code></li>\n\t<li><code>pre[]</code>&nbsp;\u548c&nbsp;<code>post[]</code>&nbsp;\u90fd\u662f&nbsp;<code>1, 2, ..., pre.length</code>&nbsp;\u7684\u6392\u5217</li>\n\t<li>\u6bcf\u4e2a\u8f93\u5165\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u4e2a\u7b54\u6848\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u53ef\u4ee5\u8fd4\u56de\u5176\u4e2d\u4e00\u4e2a\u3002</li>\n</ul>\n",
        "titleZh": "\u6839\u636e\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "companies": [
            "Dataminr"
        ]
    },
    {
        "leetId": "890",
        "link": "possible-bipartition",
        "title": "Possible Bipartition",
        "is_locked": "Normal",
        "difficulty": "Medium",
        "frequency": "65.4%",
        "questionDescription": "<p>You have a list of&nbsp;<code>words</code> and a <code>pattern</code>, and you want to know which words in <code>words</code> matches the pattern.</p>\r\n\r\n<p>A word matches the pattern if there exists a permutation of letters <code>p</code> so that after replacing every letter <code>x</code> in the pattern with <code>p(x)</code>, we get the desired word.</p>\r\n\r\n<p>(<em>Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.</em>)</p>\r\n\r\n<p>Return a list of the words in <code>words</code>&nbsp;that match the given pattern.&nbsp;</p>\r\n\r\n<p>You may return the answer in any order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>words = <span id=\"example-input-1-1\">[&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;]</span>, pattern = <span id=\"example-input-1-2\">&quot;abb&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;mee&quot;,&quot;aqq&quot;]</span>\r\n<strong><span>Explanation: </span></strong>&quot;mee&quot; matches the pattern because there is a permutation {a -&gt; m, b -&gt; e, ...}. \r\n&quot;ccc&quot; does not match the pattern because {a -&gt; c, b -&gt; c, ...} is not a permutation,\r\nsince a and b map to the same letter.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= words.length &lt;= 50</code></li>\r\n\t<li><code>1 &lt;= pattern.length = words[i].length&nbsp;&lt;= 20</code></li>\r\n</ul>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u4f60\u6709\u4e00\u4e2a\u5355\u8bcd\u5217\u8868&nbsp;<code>words</code>&nbsp;\u548c\u4e00\u4e2a\u6a21\u5f0f&nbsp;&nbsp;<code>pattern</code>\uff0c\u4f60\u60f3\u77e5\u9053 <code>words</code> \u4e2d\u7684\u54ea\u4e9b\u5355\u8bcd\u4e0e\u6a21\u5f0f\u5339\u914d\u3002</p>\n\n<p>\u5982\u679c\u5b58\u5728\u5b57\u6bcd\u7684\u6392\u5217 <code>p</code>&nbsp;\uff0c\u4f7f\u5f97\u5c06\u6a21\u5f0f\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd <code>x</code> \u66ff\u6362\u4e3a <code>p(x)</code> \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6240\u9700\u7684\u5355\u8bcd\uff0c\u90a3\u4e48\u5355\u8bcd\u4e0e\u6a21\u5f0f\u662f\u5339\u914d\u7684\u3002</p>\n\n<p><em>\uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u5b57\u6bcd\u7684\u6392\u5217\u662f\u4ece\u5b57\u6bcd\u5230\u5b57\u6bcd\u7684\u53cc\u5c04\uff1a\u6bcf\u4e2a\u5b57\u6bcd\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u5b57\u6bcd\uff0c\u6ca1\u6709\u4e24\u4e2a\u5b57\u6bcd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u6bcd\u3002\uff09</em></p>\n\n<p>\u8fd4\u56de <code>words</code> \u4e2d\u4e0e\u7ed9\u5b9a\u6a21\u5f0f\u5339\u914d\u7684\u5355\u8bcd\u5217\u8868\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>words = [&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;], pattern = &quot;abb&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;mee&quot;,&quot;aqq&quot;]\n<strong>\u89e3\u91ca\uff1a\n</strong>&quot;mee&quot; \u4e0e\u6a21\u5f0f\u5339\u914d\uff0c\u56e0\u4e3a\u5b58\u5728\u6392\u5217 {a -&gt; m, b -&gt; e, ...}\u3002\n&quot;ccc&quot; \u4e0e\u6a21\u5f0f\u4e0d\u5339\u914d\uff0c\u56e0\u4e3a {a -&gt; c, b -&gt; c, ...} \u4e0d\u662f\u6392\u5217\u3002\n\u56e0\u4e3a a \u548c b \u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u6bcd\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= pattern.length = words[i].length&nbsp;&lt;= 20</code></li>\n</ul>\n",
        "titleZh": "\u67e5\u627e\u548c\u66ff\u6362\u6a21\u5f0f",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "companies": [
            "Facebook",
            "Microsoft"
        ]
    },
    {
        "leetId": "891",
        "link": "super-egg-drop",
        "title": "Super Egg Drop",
        "is_locked": "Normal",
        "difficulty": "Hard",
        "frequency": "20.1%",
        "questionDescription": "<p>Given an array of integers <code>A</code>, consider all non-empty subsequences of <code>A</code>.</p>\r\n\r\n<p>For any sequence S, let the&nbsp;<em>width</em>&nbsp;of S be the difference between the maximum and minimum element of S.</p>\r\n\r\n<p>Return the sum of the widths of all subsequences of A.&nbsp;</p>\r\n\r\n<p>As the answer may be very large, <strong>return the answer modulo 10^9 + 7</strong>.</p>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[2,1,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">6</span>\r\n<strong>Explanation:\r\n</strong>Subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\r\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\r\nThe sum of these widths is 6.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 20000</code></li>\r\n</ul>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>A</code> \uff0c\u8003\u8651 <code>A</code> \u7684\u6240\u6709\u975e\u7a7a\u5b50\u5e8f\u5217\u3002</p>\n\n<p>\u5bf9\u4e8e\u4efb\u610f\u5e8f\u5217 S \uff0c\u8bbe S \u7684\u5bbd\u5ea6\u662f S \u7684\u6700\u5927\u5143\u7d20\u548c\u6700\u5c0f\u5143\u7d20\u7684\u5dee\u3002</p>\n\n<p>\u8fd4\u56de A \u7684\u6240\u6709\u5b50\u5e8f\u5217\u7684\u5bbd\u5ea6\u4e4b\u548c\u3002</p>\n\n<p>\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u8bf7<strong>\u8fd4\u56de\u7b54\u6848\u6a21 10^9+7</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1,3]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a\n</strong>\u5b50\u5e8f\u5217\u4e3a [1]\uff0c[2]\uff0c[3]\uff0c[2,1]\uff0c[2,3]\uff0c[1,3]\uff0c[2,1,3] \u3002\n\u76f8\u5e94\u7684\u5bbd\u5ea6\u662f 0\uff0c0\uff0c0\uff0c1\uff0c1\uff0c2\uff0c2 \u3002\n\u8fd9\u4e9b\u5bbd\u5ea6\u4e4b\u548c\u662f 6 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 20000</code></li>\n</ul>\n",
        "titleZh": "\u5b50\u5e8f\u5217\u5bbd\u5ea6\u4e4b\u548c",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "companies": [
            "Google"
        ]
    },
    {
        "questionDescription": "<p>Table: <code>Person</code></p>\r\n\r\n<pre>\r\n+-------------+---------+\r\n| Column Name | Type    |\r\n+-------------+---------+\r\n| PersonId    | int     |\r\n| FirstName   | varchar |\r\n| LastName    | varchar |\r\n+-------------+---------+\r\nPersonId is the primary key column for this table.\r\n</pre>\r\n\r\n<p>Table: <code>Address</code></p>\r\n\r\n<pre>\r\n+-------------+---------+\r\n| Column Name | Type    |\r\n+-------------+---------+\r\n| AddressId   | int     |\r\n| PersonId    | int     |\r\n| City        | varchar |\r\n| State       | varchar |\r\n+-------------+---------+\r\nAddressId is the primary key column for this table.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:</p>\r\n\r\n<pre>\r\nFirstName, LastName, City, State\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u88681: <code>Person</code></p>\n\n<pre>+-------------+---------+\n| \u5217\u540d         | \u7c7b\u578b     |\n+-------------+---------+\n| PersonId    | int     |\n| FirstName   | varchar |\n| LastName    | varchar |\n+-------------+---------+\nPersonId \u662f\u4e0a\u8868\u4e3b\u952e\n</pre>\n\n<p>\u88682: <code>Address</code></p>\n\n<pre>+-------------+---------+\n| \u5217\u540d         | \u7c7b\u578b    |\n+-------------+---------+\n| AddressId   | int     |\n| PersonId    | int     |\n| City        | varchar |\n| State       | varchar |\n+-------------+---------+\nAddressId \u662f\u4e0a\u8868\u4e3b\u952e\n</pre>\n\n<p>&nbsp;</p>\n\n<p>\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u6ee1\u8db3\u6761\u4ef6\uff1a\u65e0\u8bba person \u662f\u5426\u6709\u5730\u5740\u4fe1\u606f\uff0c\u90fd\u9700\u8981\u57fa\u4e8e\u4e0a\u8ff0\u4e24\u8868\u63d0\u4f9b&nbsp;person \u7684\u4ee5\u4e0b\u4fe1\u606f\uff1a</p>\n\n<p>&nbsp;</p>\n\n<pre>FirstName, LastName, City, State\n</pre>\n",
        "tags": [],
        "leetId": "175",
        "link": "combine-two-tables",
        "title": "Combine Two Tables",
        "is_locked": "Normal",
        "titleZh": "\u7ec4\u5408\u4e24\u4e2a\u8868",
        "frequency": "67.4%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Write a SQL query to get the second highest salary from the <code>Employee</code> table.</p>\r\n\r\n<pre>\r\n+----+--------+\r\n| Id | Salary |\r\n+----+--------+\r\n| 1  | 100    |\r\n| 2  | 200    |\r\n| 3  | 300    |\r\n+----+--------+\r\n</pre>\r\n\r\n<p>For example, given the above Employee table, the query should return <code>200</code> as the second highest salary. If there is no second highest salary, then the query should return <code>null</code>.</p>\r\n\r\n<pre>\r\n+---------------------+\r\n| SecondHighestSalary |\r\n+---------------------+\r\n| 200                 |\r\n+---------------------+\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u83b7\u53d6 <code>Employee</code>&nbsp;\u8868\u4e2d\u7b2c\u4e8c\u9ad8\u7684\u85aa\u6c34\uff08Salary\uff09&nbsp;\u3002</p>\n\n<pre>+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n</pre>\n\n<p>\u4f8b\u5982\u4e0a\u8ff0&nbsp;<code>Employee</code>&nbsp;\u8868\uff0cSQL\u67e5\u8be2\u5e94\u8be5\u8fd4\u56de&nbsp;<code>200</code> \u4f5c\u4e3a\u7b2c\u4e8c\u9ad8\u7684\u85aa\u6c34\u3002\u5982\u679c\u4e0d\u5b58\u5728\u7b2c\u4e8c\u9ad8\u7684\u85aa\u6c34\uff0c\u90a3\u4e48\u67e5\u8be2\u5e94\u8fd4\u56de <code>null</code>\u3002</p>\n\n<pre>+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n</pre>\n",
        "tags": [],
        "leetId": "176",
        "link": "second-highest-salary",
        "title": "Second Highest Salary",
        "is_locked": "Normal",
        "titleZh": "\u7b2c\u4e8c\u9ad8\u7684\u85aa\u6c34",
        "frequency": "29.9%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Write a SQL query to get the <em>n</em><sup>th</sup> highest salary from the <code>Employee</code> table.</p>\r\n\r\n<pre>\r\n+----+--------+\r\n| Id | Salary |\r\n+----+--------+\r\n| 1  | 100    |\r\n| 2  | 200    |\r\n| 3  | 300    |\r\n+----+--------+\r\n</pre>\r\n\r\n<p>For example, given the above Employee table, the <em>n</em><sup>th</sup> highest salary where <em>n</em> = 2 is <code>200</code>. If there is no <em>n</em><sup>th</sup> highest salary, then the query should return <code>null</code>.</p>\r\n\r\n<pre>\r\n+------------------------+\r\n| getNthHighestSalary(2) |\r\n+------------------------+\r\n| 200                    |\r\n+------------------------+\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u83b7\u53d6 <code>Employee</code> \u8868\u4e2d\u7b2c&nbsp;<em>n&nbsp;</em>\u9ad8\u7684\u85aa\u6c34\uff08Salary\uff09\u3002</p>\n\n<pre>+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\n</pre>\n\n<p>\u4f8b\u5982\u4e0a\u8ff0&nbsp;<code>Employee</code>&nbsp;\u8868\uff0c<em>n = 2&nbsp;</em>\u65f6\uff0c\u5e94\u8fd4\u56de\u7b2c\u4e8c\u9ad8\u7684\u85aa\u6c34&nbsp;<code>200</code>\u3002\u5982\u679c\u4e0d\u5b58\u5728\u7b2c&nbsp;<em>n&nbsp;</em>\u9ad8\u7684\u85aa\u6c34\uff0c\u90a3\u4e48\u67e5\u8be2\u5e94\u8fd4\u56de&nbsp;<code>null</code>\u3002</p>\n\n<pre>+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200                    |\n+------------------------+\n</pre>\n",
        "tags": [],
        "leetId": "177",
        "link": "nth-highest-salary",
        "title": "Nth Highest Salary",
        "is_locked": "Normal",
        "titleZh": "\u7b2cN\u9ad8\u7684\u85aa\u6c34",
        "frequency": "38.2%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no &quot;holes&quot; between ranks.</p>\r\n\r\n<pre>\r\n+----+-------+\r\n| Id | Score |\r\n+----+-------+\r\n| 1  | 3.50  |\r\n| 2  | 3.65  |\r\n| 3  | 4.00  |\r\n| 4  | 3.85  |\r\n| 5  | 4.00  |\r\n| 6  | 3.65  |\r\n+----+-------+\r\n</pre>\r\n\r\n<p>For example, given the above <code>Scores</code> table, your query should generate the following report (order by highest score):</p>\r\n\r\n<pre>\r\n+-------+------+\r\n| Score | Rank |\r\n+-------+------+\r\n| 4.00  | 1    |\r\n| 4.00  | 1    |\r\n| 3.85  | 2    |\r\n|&nbsp;3.65  | 3    |\r\n| 3.65  | 3    |\r\n| 3.50  | 4    |\r\n+-------+------+\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\u6765\u5b9e\u73b0\u5206\u6570\u6392\u540d\u3002\u5982\u679c\u4e24\u4e2a\u5206\u6570\u76f8\u540c\uff0c\u5219\u4e24\u4e2a\u5206\u6570\u6392\u540d\uff08Rank\uff09\u76f8\u540c\u3002\u8bf7\u6ce8\u610f\uff0c\u5e73\u5206\u540e\u7684\u4e0b\u4e00\u4e2a\u540d\u6b21\u5e94\u8be5\u662f\u4e0b\u4e00\u4e2a\u8fde\u7eed\u7684\u6574\u6570\u503c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u540d\u6b21\u4e4b\u95f4\u4e0d\u5e94\u8be5\u6709&ldquo;\u95f4\u9694&rdquo;\u3002</p>\n\n<pre>+----+-------+\n| Id | Score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+\n</pre>\n\n<p>\u4f8b\u5982\uff0c\u6839\u636e\u4e0a\u8ff0\u7ed9\u5b9a\u7684&nbsp;<code>Scores</code> \u8868\uff0c\u4f60\u7684\u67e5\u8be2\u5e94\u8be5\u8fd4\u56de\uff08\u6309\u5206\u6570\u4ece\u9ad8\u5230\u4f4e\u6392\u5217\uff09\uff1a</p>\n\n<pre>+-------+------+\n| Score | Rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 2    |\n|&nbsp;3.65  | 3    |\n| 3.65  | 3    |\n| 3.50  | 4    |\n+-------+------+\n</pre>\n",
        "tags": [],
        "leetId": "178",
        "link": "rank-scores",
        "title": "Rank Scores",
        "is_locked": "Normal",
        "titleZh": "\u5206\u6570\u6392\u540d",
        "frequency": "51.4%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Write a SQL query to find all numbers that appear at least three times consecutively.</p>\r\n\r\n<pre>\r\n+----+-----+\r\n| Id | Num |\r\n+----+-----+\r\n| 1  |  1  |\r\n| 2  |  1  |\r\n| 3  |  1  |\r\n| 4  |  2  |\r\n| 5  |  1  |\r\n| 6  |  2  |\r\n| 7  |  2  |\r\n+----+-----+\r\n</pre>\r\n\r\n<p>For example, given the above <code>Logs</code> table, <code>1</code> is the only number that appears consecutively for at least three times.</p>\r\n\r\n<pre>\r\n+-----------------+\r\n| ConsecutiveNums |\r\n+-----------------+\r\n| 1               |\r\n+-----------------+\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u67e5\u627e\u6240\u6709\u81f3\u5c11\u8fde\u7eed\u51fa\u73b0\u4e09\u6b21\u7684\u6570\u5b57\u3002</p>\n\n<pre>+----+-----+\n| Id | Num |\n+----+-----+\n| 1  |  1  |\n| 2  |  1  |\n| 3  |  1  |\n| 4  |  2  |\n| 5  |  1  |\n| 6  |  2  |\n| 7  |  2  |\n+----+-----+\n</pre>\n\n<p>\u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e0a\u9762\u7684 <code>Logs</code> \u8868\uff0c <code>1</code> \u662f\u552f\u4e00\u8fde\u7eed\u51fa\u73b0\u81f3\u5c11\u4e09\u6b21\u7684\u6570\u5b57\u3002</p>\n\n<pre>+-----------------+\n| ConsecutiveNums |\n+-----------------+\n| 1               |\n+-----------------+\n</pre>\n",
        "tags": [],
        "leetId": "180",
        "link": "consecutive-numbers",
        "title": "Consecutive Numbers",
        "is_locked": "Normal",
        "titleZh": "\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57",
        "frequency": "42.9%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>The <code>Employee</code> table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.</p>\r\n\r\n<pre>\r\n+----+-------+--------+-----------+\r\n| Id | Name  | Salary | ManagerId |\r\n+----+-------+--------+-----------+\r\n| 1  | Joe   | 70000  | 3         |\r\n| 2  | Henry | 80000  | 4         |\r\n| 3  | Sam   | 60000  | NULL      |\r\n| 4  | Max   | 90000  | NULL      |\r\n+----+-------+--------+-----------+\r\n</pre>\r\n\r\n<p>Given the <code>Employee</code> table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.</p>\r\n\r\n<pre>\r\n+----------+\r\n| Employee |\r\n+----------+\r\n| Joe      |\r\n+----------+\r\n</pre>\r\n",
        "questionDescriptionZh": "<p><code>Employee</code>&nbsp;\u8868\u5305\u542b\u6240\u6709\u5458\u5de5\uff0c\u4ed6\u4eec\u7684\u7ecf\u7406\u4e5f\u5c5e\u4e8e\u5458\u5de5\u3002\u6bcf\u4e2a\u5458\u5de5\u90fd\u6709\u4e00\u4e2a Id\uff0c\u6b64\u5916\u8fd8\u6709\u4e00\u5217\u5bf9\u5e94\u5458\u5de5\u7684\u7ecf\u7406\u7684 Id\u3002</p>\n\n<pre>+----+-------+--------+-----------+\n| Id | Name  | Salary | ManagerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | NULL      |\n| 4  | Max   | 90000  | NULL      |\n+----+-------+--------+-----------+\n</pre>\n\n<p>\u7ed9\u5b9a&nbsp;<code>Employee</code>&nbsp;\u8868\uff0c\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u8be5\u67e5\u8be2\u53ef\u4ee5\u83b7\u53d6\u6536\u5165\u8d85\u8fc7\u4ed6\u4eec\u7ecf\u7406\u7684\u5458\u5de5\u7684\u59d3\u540d\u3002\u5728\u4e0a\u9762\u7684\u8868\u683c\u4e2d\uff0cJoe \u662f\u552f\u4e00\u4e00\u4e2a\u6536\u5165\u8d85\u8fc7\u4ed6\u7684\u7ecf\u7406\u7684\u5458\u5de5\u3002</p>\n\n<pre>+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\n</pre>\n",
        "tags": [],
        "leetId": "181",
        "link": "employees-earning-more-than-their-managers",
        "title": "Employees Earning More Than Their Managers",
        "is_locked": "Normal",
        "titleZh": "\u8d85\u8fc7\u7ecf\u7406\u6536\u5165\u7684\u5458\u5de5",
        "frequency": "63.3%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Write a SQL query to find all duplicate emails in a table named <code>Person</code>.</p>\r\n\r\n<pre>\r\n+----+---------+\r\n| Id | Email   |\r\n+----+---------+\r\n| 1  | a@b.com |\r\n| 2  | c@d.com |\r\n| 3  | a@b.com |\r\n+----+---------+\r\n</pre>\r\n\r\n<p>For example, your query should return the following for the above table:</p>\r\n\r\n<pre>\r\n+---------+\r\n| Email   |\r\n+---------+\r\n| a@b.com |\r\n+---------+\r\n</pre>\r\n\r\n<p><strong>Note</strong>: All emails are in lowercase.</p>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u67e5\u627e&nbsp;<code>Person</code> \u8868\u4e2d\u6240\u6709\u91cd\u590d\u7684\u7535\u5b50\u90ae\u7bb1\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>+----+---------+\n| Id | Email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\n</pre>\n\n<p>\u6839\u636e\u4ee5\u4e0a\u8f93\u5165\uff0c\u4f60\u7684\u67e5\u8be2\u5e94\u8fd4\u56de\u4ee5\u4e0b\u7ed3\u679c\uff1a</p>\n\n<pre>+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\n</pre>\n\n<p><strong>\u8bf4\u660e\uff1a</strong>\u6240\u6709\u7535\u5b50\u90ae\u7bb1\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n",
        "tags": [],
        "leetId": "182",
        "link": "duplicate-emails",
        "title": "Duplicate Emails",
        "is_locked": "Normal",
        "titleZh": "\u67e5\u627e\u91cd\u590d\u7684\u7535\u5b50\u90ae\u7bb1",
        "frequency": "73.8%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Suppose that a website contains two tables, the <code>Customers</code> table and the <code>Orders</code> table. Write a SQL query to find all customers who never order anything.</p>\r\n\r\n<p>Table: <code>Customers</code>.</p>\r\n\r\n<pre>\r\n+----+-------+\r\n| Id | Name  |\r\n+----+-------+\r\n| 1  | Joe   |\r\n| 2  | Henry |\r\n| 3  | Sam   |\r\n| 4  | Max   |\r\n+----+-------+\r\n</pre>\r\n\r\n<p>Table: <code>Orders</code>.</p>\r\n\r\n<pre>\r\n+----+------------+\r\n| Id | CustomerId |\r\n+----+------------+\r\n| 1  | 3          |\r\n| 2  | 1          |\r\n+----+------------+\r\n</pre>\r\n\r\n<p>Using the above tables as example, return the following:</p>\r\n\r\n<pre>\r\n+-----------+\r\n| Customers |\r\n+-----------+\r\n| Henry     |\r\n| Max       |\r\n+-----------+\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u67d0\u7f51\u7ad9\u5305\u542b\u4e24\u4e2a\u8868\uff0c<code>Customers</code> \u8868\u548c <code>Orders</code> \u8868\u3002\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u627e\u51fa\u6240\u6709\u4ece\u4e0d\u8ba2\u8d2d\u4efb\u4f55\u4e1c\u897f\u7684\u5ba2\u6237\u3002</p>\n\n<p><code>Customers</code> \u8868\uff1a</p>\n\n<pre>+----+-------+\n| Id | Name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\n</pre>\n\n<p><code>Orders</code> \u8868\uff1a</p>\n\n<pre>+----+------------+\n| Id | CustomerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+\n</pre>\n\n<p>\u4f8b\u5982\u7ed9\u5b9a\u4e0a\u8ff0\u8868\u683c\uff0c\u4f60\u7684\u67e5\u8be2\u5e94\u8fd4\u56de\uff1a</p>\n\n<pre>+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+\n</pre>\n",
        "tags": [],
        "leetId": "183",
        "link": "customers-who-never-order",
        "title": "Customers Who Never Order",
        "is_locked": "Normal",
        "titleZh": "\u4ece\u4e0d\u8ba2\u8d2d\u7684\u5ba2\u6237",
        "frequency": "59.9%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>The <code>Employee</code> table holds all employees. Every employee has an Id, a salary, and there is also a column for the department Id.</p>\r\n\r\n<pre>\r\n+----+-------+--------+--------------+\r\n| Id | Name  | Salary | DepartmentId |\r\n+----+-------+--------+--------------+\r\n| 1  | Joe   | 70000  | 1            |\r\n| 2 &nbsp;| Jim &nbsp; | 90000 &nbsp;| 1 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|\r\n| 3  | Henry | 80000  | 2            |\r\n| 4  | Sam   | 60000  | 2            |\r\n| 5  | Max   | 90000  | 1            |\r\n+----+-------+--------+--------------+\r\n</pre>\r\n\r\n<p>The <code>Department</code> table holds all departments of the company.</p>\r\n\r\n<pre>\r\n+----+----------+\r\n| Id | Name     |\r\n+----+----------+\r\n| 1  | IT       |\r\n| 2  | Sales    |\r\n+----+----------+\r\n</pre>\r\n\r\n<p>Write a SQL query to find employees who have the highest salary in each of the departments.&nbsp;For the above tables, your SQL query should return the following rows (order of rows does not matter).</p>\r\n\r\n<pre>\r\n+------------+----------+--------+\r\n| Department | Employee | Salary |\r\n+------------+----------+--------+\r\n| IT         | Max      | 90000  |\r\n| IT &nbsp; &nbsp; &nbsp; &nbsp; | Jim &nbsp; &nbsp; &nbsp;| 90000 &nbsp;|\r\n| Sales      | Henry    | 80000  |\r\n+------------+----------+--------+\r\n</pre>\r\n\r\n<p><strong>Explanation:</strong></p>\r\n\r\n<p>Max and Jim both have&nbsp;the highest salary in the IT department and Henry has the highest salary in the Sales department.</p>\r\n",
        "questionDescriptionZh": "<p><code>Employee</code> \u8868\u5305\u542b\u6240\u6709\u5458\u5de5\u4fe1\u606f\uff0c\u6bcf\u4e2a\u5458\u5de5\u6709\u5176\u5bf9\u5e94\u7684&nbsp;Id, salary \u548c department Id\u3002</p>\n\n<pre>+----+-------+--------+--------------+\n| Id | Name  | Salary | DepartmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n+----+-------+--------+--------------+\n</pre>\n\n<p><code>Department</code>&nbsp;\u8868\u5305\u542b\u516c\u53f8\u6240\u6709\u90e8\u95e8\u7684\u4fe1\u606f\u3002</p>\n\n<pre>+----+----------+\n| Id | Name     |\n+----+----------+\n| 1  | IT       |\n| 2  | Sales    |\n+----+----------+\n</pre>\n\n<p>\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u627e\u51fa\u6bcf\u4e2a\u90e8\u95e8\u5de5\u8d44\u6700\u9ad8\u7684\u5458\u5de5\u3002\u4f8b\u5982\uff0c\u6839\u636e\u4e0a\u8ff0\u7ed9\u5b9a\u7684\u8868\u683c\uff0cMax \u5728 IT \u90e8\u95e8\u6709\u6700\u9ad8\u5de5\u8d44\uff0cHenry \u5728 Sales \u90e8\u95e8\u6709\u6700\u9ad8\u5de5\u8d44\u3002</p>\n\n<pre>+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| Sales      | Henry    | 80000  |\n+------------+----------+--------+\n</pre>\n",
        "tags": [],
        "leetId": "184",
        "link": "department-highest-salary",
        "title": "Department Highest Salary",
        "is_locked": "Normal",
        "titleZh": "\u90e8\u95e8\u5de5\u8d44\u6700\u9ad8\u7684\u5458\u5de5",
        "frequency": "36.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>The <code>Employee</code> table holds all employees. Every employee has an Id, and there is also a column for the department Id.</p>\r\n\r\n<pre>\r\n+----+-------+--------+--------------+\r\n| Id | Name  | Salary | DepartmentId |\r\n+----+-------+--------+--------------+\r\n| 1  | Joe   | 85000  | 1            |\r\n| 2  | Henry | 80000  | 2            |\r\n| 3  | Sam   | 60000  | 2            |\r\n| 4  | Max   | 90000  | 1            |\r\n| 5  | Janet | 69000  | 1            |\r\n| 6  | Randy | 85000  | 1            |\r\n| 7  | Will  | 70000  | 1            |\r\n+----+-------+--------+--------------+\r\n</pre>\r\n\r\n<p>The <code>Department</code> table holds all departments of the company.</p>\r\n\r\n<pre>\r\n+----+----------+\r\n| Id | Name     |\r\n+----+----------+\r\n| 1  | IT       |\r\n| 2  | Sales    |\r\n+----+----------+\r\n</pre>\r\n\r\n<p>Write a SQL query to find employees who earn the top three salaries in each of the department. For the above tables, your SQL query should return the following rows (order of rows does not matter).</p>\r\n\r\n<pre>\r\n+------------+----------+--------+\r\n| Department | Employee | Salary |\r\n+------------+----------+--------+\r\n| IT         | Max      | 90000  |\r\n| IT         | Randy    | 85000  |\r\n| IT         | Joe      | 85000  |\r\n| IT         | Will     | 70000  |\r\n| Sales      | Henry    | 80000  |\r\n| Sales      | Sam      | 60000  |\r\n+------------+----------+--------+\r\n</pre>\r\n\r\n<p><strong>Explanation:</strong></p>\r\n\r\n<p>In IT department, Max earns the highest salary, both Randy and Joe earn the second highest salary, and Will earns the third highest salary. There are only two employees in the Sales department, Henry earns the highest salary while Sam earns the second highest salary.</p>\r\n",
        "questionDescriptionZh": "<p><code>Employee</code> \u8868\u5305\u542b\u6240\u6709\u5458\u5de5\u4fe1\u606f\uff0c\u6bcf\u4e2a\u5458\u5de5\u6709\u5176\u5bf9\u5e94\u7684&nbsp;Id, salary \u548c department Id \u3002</p>\n\n<pre>+----+-------+--------+--------------+\n| Id | Name  | Salary | DepartmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n| 5  | Janet | 69000  | 1            |\n| 6  | Randy | 85000  | 1            |\n+----+-------+--------+--------------+\n</pre>\n\n<p><code>Department</code> \u8868\u5305\u542b\u516c\u53f8\u6240\u6709\u90e8\u95e8\u7684\u4fe1\u606f\u3002</p>\n\n<pre>+----+----------+\n| Id | Name     |\n+----+----------+\n| 1  | IT       |\n| 2  | Sales    |\n+----+----------+\n</pre>\n\n<p>\u7f16\u5199\u4e00\u4e2a&nbsp;SQL \u67e5\u8be2\uff0c\u627e\u51fa\u6bcf\u4e2a\u90e8\u95e8\u5de5\u8d44\u524d\u4e09\u9ad8\u7684\u5458\u5de5\u3002\u4f8b\u5982\uff0c\u6839\u636e\u4e0a\u8ff0\u7ed9\u5b9a\u7684\u8868\u683c\uff0c\u67e5\u8be2\u7ed3\u679c\u5e94\u8fd4\u56de\uff1a</p>\n\n<pre>+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| IT         | Randy    | 85000  |\n| IT         | Joe      | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n+------------+----------+--------+\n</pre>\n",
        "tags": [],
        "leetId": "185",
        "link": "department-top-three-salaries",
        "title": "Department Top Three Salaries",
        "is_locked": "Normal",
        "titleZh": "\u90e8\u95e8\u5de5\u8d44\u524d\u4e09\u9ad8\u7684\u5458\u5de5",
        "frequency": "32.0%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>Write a SQL query to <strong>delete</strong> all duplicate email entries in a table named <code>Person</code>, keeping only unique emails based on its <i>smallest</i> <b>Id</b>.</p>\r\n\r\n<pre>\r\n+----+------------------+\r\n| Id | Email            |\r\n+----+------------------+\r\n| 1  | john@example.com |\r\n| 2  | bob@example.com  |\r\n| 3  | john@example.com |\r\n+----+------------------+\r\nId is the primary key column for this table.\r\n</pre>\r\n\r\n<p>For example, after running your query, the above <code>Person</code> table should have the following rows:</p>\r\n\r\n<pre>\r\n+----+------------------+\r\n| Id | Email            |\r\n+----+------------------+\r\n| 1  | john@example.com |\r\n| 2  | bob@example.com  |\r\n+----+------------------+\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Your output is the whole <code>Person</code>&nbsp;table after executing your sql. Use <code>delete</code> statement.</p>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u6765\u5220\u9664&nbsp;<code>Person</code>&nbsp;\u8868\u4e2d\u6240\u6709\u91cd\u590d\u7684\u7535\u5b50\u90ae\u7bb1\uff0c\u91cd\u590d\u7684\u90ae\u7bb1\u91cc\u53ea\u4fdd\u7559&nbsp;<strong>Id&nbsp;</strong><em>\u6700\u5c0f&nbsp;</em>\u7684\u90a3\u4e2a\u3002</p>\n\n<pre>+----+------------------+\n| Id | Email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n| 3  | john@example.com |\n+----+------------------+\nId \u662f\u8fd9\u4e2a\u8868\u7684\u4e3b\u952e\u3002\n</pre>\n\n<p>\u4f8b\u5982\uff0c\u5728\u8fd0\u884c\u4f60\u7684\u67e5\u8be2\u8bed\u53e5\u4e4b\u540e\uff0c\u4e0a\u9762\u7684 <code>Person</code> \u8868\u5e94\u8fd4\u56de\u4ee5\u4e0b\u51e0\u884c:</p>\n\n<pre>+----+------------------+\n| Id | Email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n+----+------------------+\n</pre>\n",
        "tags": [],
        "leetId": "196",
        "link": "delete-duplicate-emails",
        "title": "Delete Duplicate Emails",
        "is_locked": "Normal",
        "titleZh": "\u5220\u9664\u91cd\u590d\u7684\u7535\u5b50\u90ae\u7bb1",
        "frequency": "51.4%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given a <code>Weather</code> table, write a SQL query to find all dates&#39; Ids with higher temperature compared to its previous (yesterday&#39;s) dates.</p>\r\n\r\n<pre>\r\n+---------+------------------+------------------+\r\n| Id(INT) | RecordDate(DATE) | Temperature(INT) |\r\n+---------+------------------+------------------+\r\n|       1 |       2015-01-01 |               10 |\r\n|       2 |       2015-01-02 |               25 |\r\n|       3 |       2015-01-03 |               20 |\r\n|       4 |       2015-01-04 |               30 |\r\n+---------+------------------+------------------+\r\n</pre>\r\n\r\n<p>For example, return the following Ids for the above <code>Weather</code> table:</p>\r\n\r\n<pre>\r\n+----+\r\n| Id |\r\n+----+\r\n|  2 |\r\n|  4 |\r\n+----+\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a <code>Weather</code> \u8868\uff0c\u7f16\u5199\u4e00\u4e2a SQL \u67e5\u8be2\uff0c\u6765\u67e5\u627e\u4e0e\u4e4b\u524d\uff08\u6628\u5929\u7684\uff09\u65e5\u671f\u76f8\u6bd4\u6e29\u5ea6\u66f4\u9ad8\u7684\u6240\u6709\u65e5\u671f\u7684 Id\u3002</p>\n\n<pre>+---------+------------------+------------------+\n| Id(INT) | RecordDate(DATE) | Temperature(INT) |\n+---------+------------------+------------------+\n|       1 |       2015-01-01 |               10 |\n|       2 |       2015-01-02 |               25 |\n|       3 |       2015-01-03 |               20 |\n|       4 |       2015-01-04 |               30 |\n+---------+------------------+------------------+</pre>\n\n<p>\u4f8b\u5982\uff0c\u6839\u636e\u4e0a\u8ff0\u7ed9\u5b9a\u7684 <code>Weather</code> \u8868\u683c\uff0c\u8fd4\u56de\u5982\u4e0b Id:</p>\n\n<pre>+----+\n| Id |\n+----+\n|  2 |\n|  4 |\n+----+</pre>\n",
        "tags": [],
        "leetId": "197",
        "link": "rising-temperature",
        "title": "Rising Temperature",
        "is_locked": "Normal",
        "titleZh": "\u4e0a\u5347\u7684\u6e29\u5ea6",
        "frequency": "42.8%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>The <code>Trips</code> table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to the Users_Id at the <code>Users</code> table. Status is an ENUM type of (&lsquo;completed&rsquo;, &lsquo;cancelled_by_driver&rsquo;, &lsquo;cancelled_by_client&rsquo;).</p>\r\n\r\n<pre>\r\n+----+-----------+-----------+---------+--------------------+----------+\r\n| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|\r\n+----+-----------+-----------+---------+--------------------+----------+\r\n| 1  |     1     |    10     |    1    |     completed      |2013-10-01|\r\n| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|\r\n| 3  |     3     |    12     |    6    |     completed      |2013-10-01|\r\n| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|\r\n| 5  |     1     |    10     |    1    |     completed      |2013-10-02|\r\n| 6  |     2     |    11     |    6    |     completed      |2013-10-02|\r\n| 7  |     3     |    12     |    6    |     completed      |2013-10-02|\r\n| 8  |     2     |    12     |    12   |     completed      |2013-10-03|\r\n| 9  |     3     |    10     |    12   |     completed      |2013-10-03| \r\n| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|\r\n+----+-----------+-----------+---------+--------------------+----------+\r\n</pre>\r\n\r\n<p>The <code>Users</code> table holds all users. Each user has an unique Users_Id, and Role is an ENUM type of (&lsquo;client&rsquo;, &lsquo;driver&rsquo;, &lsquo;partner&rsquo;).</p>\r\n\r\n<pre>\r\n+----------+--------+--------+\r\n| Users_Id | Banned |  Role  |\r\n+----------+--------+--------+\r\n|    1     |   No   | client |\r\n|    2     |   Yes  | client |\r\n|    3     |   No   | client |\r\n|    4     |   No   | client |\r\n|    10    |   No   | driver |\r\n|    11    |   No   | driver |\r\n|    12    |   No   | driver |\r\n|    13    |   No   | driver |\r\n+----------+--------+--------+\r\n</pre>\r\n\r\n<p>Write a SQL query to find the cancellation rate of requests made by unbanned users between <strong>Oct 1, 2013</strong> and <strong>Oct 3, 2013</strong>. For the above tables, your SQL query should return the following rows with the cancellation rate being rounded to <em>two</em> decimal places.</p>\r\n\r\n<pre>\r\n+------------+-------------------+\r\n|     Day    | Cancellation Rate |\r\n+------------+-------------------+\r\n| 2013-10-01 |       0.33        |\r\n| 2013-10-02 |       0.00        |\r\n| 2013-10-03 |       0.50        |\r\n+------------+-------------------+\r\n</pre>\r\n\r\n<p><strong>Credits:</strong><br />\r\nSpecial thanks to <a href=\"https://leetcode.com/discuss/user/cak1erlizhou\">@cak1erlizhou</a> for contributing this question, writing the problem description and adding part of the test cases.</p>\r\n",
        "questionDescriptionZh": "<p><code>Trips</code>&nbsp;\u8868\u4e2d\u5b58\u6240\u6709\u51fa\u79df\u8f66\u7684\u884c\u7a0b\u4fe1\u606f\u3002\u6bcf\u6bb5\u884c\u7a0b\u6709\u552f\u4e00\u952e Id\uff0cClient_Id \u548c&nbsp;Driver_Id \u662f&nbsp;<code>Users</code>&nbsp;\u8868\u4e2d Users_Id \u7684\u5916\u952e\u3002Status \u662f\u679a\u4e3e\u7c7b\u578b\uff0c\u679a\u4e3e\u6210\u5458\u4e3a (&lsquo;completed&rsquo;, &lsquo;cancelled_by_driver&rsquo;, &lsquo;cancelled_by_client&rsquo;)\u3002</p>\n\n<pre>+----+-----------+-----------+---------+--------------------+----------+\n| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|\n+----+-----------+-----------+---------+--------------------+----------+\n| 1  |     1     |    10     |    1    |     completed      |2013-10-01|\n| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|\n| 3  |     3     |    12     |    6    |     completed      |2013-10-01|\n| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|\n| 5  |     1     |    10     |    1    |     completed      |2013-10-02|\n| 6  |     2     |    11     |    6    |     completed      |2013-10-02|\n| 7  |     3     |    12     |    6    |     completed      |2013-10-02|\n| 8  |     2     |    12     |    12   |     completed      |2013-10-03|\n| 9  |     3     |    10     |    12   |     completed      |2013-10-03| \n| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|\n+----+-----------+-----------+---------+--------------------+----------+\n</pre>\n\n<p><code>Users</code>&nbsp;\u8868\u5b58\u6240\u6709\u7528\u6237\u3002\u6bcf\u4e2a\u7528\u6237\u6709\u552f\u4e00\u952e Users_Id\u3002Banned \u8868\u793a\u8fd9\u4e2a\u7528\u6237\u662f\u5426\u88ab\u7981\u6b62\uff0cRole \u5219\u662f\u4e00\u4e2a\u8868\u793a\uff08&lsquo;client&rsquo;, &lsquo;driver&rsquo;, &lsquo;partner&rsquo;\uff09\u7684\u679a\u4e3e\u7c7b\u578b\u3002</p>\n\n<pre>+----------+--------+--------+\n| Users_Id | Banned |  Role  |\n+----------+--------+--------+\n|    1     |   No   | client |\n|    2     |   Yes  | client |\n|    3     |   No   | client |\n|    4     |   No   | client |\n|    10    |   No   | driver |\n|    11    |   No   | driver |\n|    12    |   No   | driver |\n|    13    |   No   | driver |\n+----------+--------+--------+\n</pre>\n\n<p>\u5199\u4e00\u6bb5 SQL \u8bed\u53e5\u67e5\u51fa&nbsp;<strong>2013\u5e7410\u67081\u65e5&nbsp;</strong>\u81f3&nbsp;<strong>2013\u5e7410\u67083\u65e5&nbsp;</strong>\u671f\u95f4\u975e\u7981\u6b62\u7528\u6237\u7684\u53d6\u6d88\u7387\u3002\u57fa\u4e8e\u4e0a\u8868\uff0c\u4f60\u7684 SQL \u8bed\u53e5\u5e94\u8fd4\u56de\u5982\u4e0b\u7ed3\u679c\uff0c\u53d6\u6d88\u7387\uff08Cancellation Rate\uff09\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u3002</p>\n\n<pre>+------------+-------------------+\n|     Day    | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 |       0.33        |\n| 2013-10-02 |       0.00        |\n| 2013-10-03 |       0.50        |\n+------------+-------------------+\n</pre>\n\n<p><strong>\u81f4\u8c22:</strong><br>\n\u975e\u5e38\u611f\u8c22&nbsp;<a href=\"https://leetcode.com/discuss/user/cak1erlizhou\">@cak1erlizhou</a>&nbsp;\u8be6\u7ec6\u7684\u63d0\u4f9b\u4e86\u8fd9\u9053\u9898\u548c\u76f8\u5e94\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002</p>\n",
        "tags": [],
        "leetId": "262",
        "link": "trips-and-users",
        "title": "Trips and Users",
        "is_locked": "Normal",
        "titleZh": "\u884c\u7a0b\u548c\u7528\u6237",
        "frequency": "39.7%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>The&nbsp;<b>Fibonacci numbers</b>, commonly denoted&nbsp;<code>F(n)</code>&nbsp;form a sequence, called the&nbsp;<b>Fibonacci sequence</b>, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p>\r\n\r\n<pre>\r\nF(0) = 0,&nbsp; &nbsp;F(1)&nbsp;= 1\r\nF(N) = F(N - 1) + F(N - 2), for N &gt; 1.\r\n</pre>\r\n\r\n<p>Given <code>N</code>, calculate <code>F(N)</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong> F(2) = F(1) + F(0) = 1 + 0 = 1.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> F(3) = F(2) + F(1) = 1 + 1 = 2.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 4\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> F(4) = F(3) + F(2) = 2 + 1 = 3.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>0 &le; <code>N</code> &le; 30.</p>\r\n",
        "questionDescriptionZh": "<p><strong>\u6590\u6ce2\u90a3\u5951\u6570</strong>\uff0c\u901a\u5e38\u7528&nbsp;<code>F(n)</code> \u8868\u793a\uff0c\u5f62\u6210\u7684\u5e8f\u5217\u79f0\u4e3a<strong>\u6590\u6ce2\u90a3\u5951\u6570\u5217</strong>\u3002\u8be5\u6570\u5217\u7531&nbsp;<code>0</code> \u548c <code>1</code> \u5f00\u59cb\uff0c\u540e\u9762\u7684\u6bcf\u4e00\u9879\u6570\u5b57\u90fd\u662f\u524d\u9762\u4e24\u9879\u6570\u5b57\u7684\u548c\u3002\u4e5f\u5c31\u662f\uff1a</p>\n\n<pre>F(0) = 0,&nbsp; &nbsp;F(1)&nbsp;= 1\nF(N) = F(N - 1) + F(N - 2), \u5176\u4e2d N &gt; 1.\n</pre>\n\n<p>\u7ed9\u5b9a&nbsp;<code>N</code>\uff0c\u8ba1\u7b97&nbsp;<code>F(N)</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>2\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>F(2) = F(1) + F(0) = 1 + 0 = 1.\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>3\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>F(3) = F(2) + F(1) = 1 + 1 = 2.\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>4\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>F(4) = F(3) + F(2) = 2 + 1 = 3.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>0 &le; <code>N</code> &le; 30</li>\n</ul>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "509",
        "link": "fibonacci-number",
        "title": "Fibonacci Number",
        "is_locked": "Normal",
        "titleZh": "\u6590\u6ce2\u90a3\u5951\u6570",
        "frequency": "65.0%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>There is a table <code>World</code></p>\r\n\r\n<pre>\r\n+-----------------+------------+------------+--------------+---------------+\r\n| name            | continent  | area       | population   | gdp           |\r\n+-----------------+------------+------------+--------------+---------------+\r\n| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\r\n| Albania         | Europe     | 28748      | 2831741      | 12960000      |\r\n| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\r\n| Andorra         | Europe     | 468        | 78115        | 3712000       |\r\n| Angola          | Africa     | 1246700    | 20609294     | 100990000     |\r\n+-----------------+------------+------------+--------------+---------------+\r\n</pre>\r\n\r\n<p>A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.</p>\r\n\r\n<p>Write a SQL solution to output big countries&#39; name, population and area.</p>\r\n\r\n<p>For example, according to the above table, we should output:</p>\r\n\r\n<pre>\r\n+--------------+-------------+--------------+\r\n| name         | population  | area         |\r\n+--------------+-------------+--------------+\r\n| Afghanistan  | 25500100    | 652230       |\r\n| Algeria      | 37100000    | 2381741      |\r\n+--------------+-------------+--------------+\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u8fd9\u91cc\u6709\u5f20&nbsp;<code>World</code> \u8868</p>\n\n<pre>+-----------------+------------+------------+--------------+---------------+\n| name            | continent  | area       | population   | gdp           |\n+-----------------+------------+------------+--------------+---------------+\n| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\n| Albania         | Europe     | 28748      | 2831741      | 12960000      |\n| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\n| Andorra         | Europe     | 468        | 78115        | 3712000       |\n| Angola          | Africa     | 1246700    | 20609294     | 100990000     |\n+-----------------+------------+------------+--------------+---------------+\n</pre>\n\n<p>\u5982\u679c\u4e00\u4e2a\u56fd\u5bb6\u7684\u9762\u79ef\u8d85\u8fc7300\u4e07\u5e73\u65b9\u516c\u91cc\uff0c\u6216\u8005\u4eba\u53e3\u8d85\u8fc72500\u4e07\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fd\u5bb6\u5c31\u662f\u5927\u56fd\u5bb6\u3002</p>\n\n<p>\u7f16\u5199\u4e00\u4e2aSQL\u67e5\u8be2\uff0c\u8f93\u51fa\u8868\u4e2d\u6240\u6709\u5927\u56fd\u5bb6\u7684\u540d\u79f0\u3001\u4eba\u53e3\u548c\u9762\u79ef\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u6839\u636e\u4e0a\u8868\uff0c\u6211\u4eec\u5e94\u8be5\u8f93\u51fa:</p>\n\n<pre>+--------------+-------------+--------------+\n| name         | population  | area         |\n+--------------+-------------+--------------+\n| Afghanistan  | 25500100    | 652230       |\n| Algeria      | 37100000    | 2381741      |\n+--------------+-------------+--------------+\n</pre>\n",
        "tags": [],
        "leetId": "595",
        "link": "big-countries",
        "title": "Big Countries",
        "is_locked": "Normal",
        "titleZh": "\u5927\u7684\u56fd\u5bb6",
        "frequency": "72.5%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>There is a table <code>courses</code> with columns: <b>student</b> and <b>class</b></p>\r\n\r\n<p>Please list out all classes which have more than or equal to 5 students.</p>\r\n\r\n<p>For example, the table:</p>\r\n\r\n<pre>\r\n+---------+------------+\r\n| student | class      |\r\n+---------+------------+\r\n| A       | Math       |\r\n| B       | English    |\r\n| C       | Math       |\r\n| D       | Biology    |\r\n| E       | Math       |\r\n| F       | Computer   |\r\n| G       | Math       |\r\n| H       | Math       |\r\n| I       | Math       |\r\n+---------+------------+\r\n</pre>\r\n\r\n<p>Should output:</p>\r\n\r\n<pre>\r\n+---------+\r\n| class   |\r\n+---------+\r\n| Math    |\r\n+---------+\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b><br />\r\nThe students should not be counted duplicate in each course.</p>\r\n",
        "questionDescriptionZh": "<p>\u6709\u4e00\u4e2a<code>courses</code> \u8868 \uff0c\u6709: <strong>student&nbsp;(\u5b66\u751f) </strong>\u548c <strong>class (\u8bfe\u7a0b)</strong>\u3002</p>\n\n<p>\u8bf7\u5217\u51fa\u6240\u6709\u8d85\u8fc7\u6216\u7b49\u4e8e5\u540d\u5b66\u751f\u7684\u8bfe\u3002</p>\n\n<p>\u4f8b\u5982,\u8868:</p>\n\n<pre>\n+---------+------------+\n| student | class      |\n+---------+------------+\n| A       | Math       |\n| B       | English    |\n| C       | Math       |\n| D       | Biology    |\n| E       | Math       |\n| F       | Computer   |\n| G       | Math       |\n| H       | Math       |\n| I       | Math       |\n+---------+------------+\n</pre>\n\n<p>\u5e94\u8be5\u8f93\u51fa:</p>\n\n<pre>\n+---------+\n| class   |\n+---------+\n| Math    |\n+---------+\n</pre>\n\n<p><strong>Note:</strong><br />\n\u5b66\u751f\u5728\u6bcf\u4e2a\u8bfe\u4e2d\u4e0d\u5e94\u88ab\u91cd\u590d\u8ba1\u7b97\u3002</p>\n",
        "tags": [],
        "leetId": "596",
        "link": "classes-more-than-5-students",
        "title": "Classes More Than 5 Students",
        "is_locked": "Normal",
        "titleZh": "\u8d85\u8fc75\u540d\u5b66\u751f\u7684\u8bfe",
        "frequency": "35.2%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>X city built a new stadium, each day many people visit it and the stats are saved as these columns: <b>id</b>, <strong>visit_</strong><b>date</b>, <b>people</b></p>\r\n\r\n<p>Please write a query to display the records which have 3 or more consecutive rows and the amount of people more than 100(inclusive).</p>\r\nFor example, the table <code>stadium</code>:\r\n\r\n<pre>\r\n+------+------------+-----------+\r\n| id   | visit_date | people    |\r\n+------+------------+-----------+\r\n| 1    | 2017-01-01 | 10        |\r\n| 2    | 2017-01-02 | 109       |\r\n| 3    | 2017-01-03 | 150       |\r\n| 4    | 2017-01-04 | 99        |\r\n| 5    | 2017-01-05 | 145       |\r\n| 6    | 2017-01-06 | 1455      |\r\n| 7    | 2017-01-07 | 199       |\r\n| 8    | 2017-01-08 | 188       |\r\n+------+------------+-----------+\r\n</pre>\r\n\r\n<p>For the sample data above, the output is:</p>\r\n\r\n<pre>\r\n+------+------------+-----------+\r\n| id   | visit_date | people    |\r\n+------+------------+-----------+\r\n| 5    | 2017-01-05 | 145       |\r\n| 6    | 2017-01-06 | 1455      |\r\n| 7    | 2017-01-07 | 199       |\r\n| 8    | 2017-01-08 | 188       |\r\n+------+------------+-----------+\r\n</pre>\r\n\r\n<p><b>Note:</b><br />\r\nEach day only have one row record, and the dates are increasing with id increasing.</p>\r\n",
        "questionDescriptionZh": "<p>X \u5e02\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u4f53\u80b2\u9986\uff0c\u6bcf\u65e5\u4eba\u6d41\u91cf\u4fe1\u606f\u88ab\u8bb0\u5f55\u5728\u8fd9\u4e09\u5217\u4fe1\u606f\u4e2d\uff1a<strong>\u5e8f\u53f7</strong> (id)\u3001<strong>\u65e5\u671f</strong> (date)\u3001&nbsp;<strong>\u4eba\u6d41\u91cf</strong> (people)\u3002</p>\n\n<p>\u8bf7\u7f16\u5199\u4e00\u4e2a\u67e5\u8be2\u8bed\u53e5\uff0c\u627e\u51fa\u9ad8\u5cf0\u671f\u65f6\u6bb5\uff0c\u8981\u6c42\u8fde\u7eed\u4e09\u5929\u53ca\u4ee5\u4e0a\uff0c\u5e76\u4e14\u6bcf\u5929\u4eba\u6d41\u91cf\u5747\u4e0d\u5c11\u4e8e100\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u8868 <code>stadium</code>\uff1a</p>\n\n<pre>+------+------------+-----------+\n| id   | date       | people    |\n+------+------------+-----------+\n| 1    | 2017-01-01 | 10        |\n| 2    | 2017-01-02 | 109       |\n| 3    | 2017-01-03 | 150       |\n| 4    | 2017-01-04 | 99        |\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-08 | 188       |\n+------+------------+-----------+\n</pre>\n\n<p>\u5bf9\u4e8e\u4e0a\u9762\u7684\u793a\u4f8b\u6570\u636e\uff0c\u8f93\u51fa\u4e3a\uff1a</p>\n\n<pre>+------+------------+-----------+\n| id   | date       | people    |\n+------+------------+-----------+\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-08 | 188       |\n+------+------------+-----------+\n</pre>\n\n<p><strong>Note:</strong><br>\n\u6bcf\u5929\u53ea\u6709\u4e00\u884c\u8bb0\u5f55\uff0c\u65e5\u671f\u968f\u7740 id \u7684\u589e\u52a0\u800c\u589e\u52a0\u3002</p>\n",
        "tags": [],
        "leetId": "601",
        "link": "human-traffic-of-stadium",
        "title": "Human Traffic of Stadium",
        "is_locked": "Normal",
        "titleZh": "\u4f53\u80b2\u9986\u7684\u4eba\u6d41\u91cf",
        "frequency": "39.3%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies&rsquo; ratings and descriptions.\r\n<p>Please write a SQL query to output movies with an odd numbered ID and a description that is not &#39;boring&#39;. Order the result by rating.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>For example, table <code>cinema</code>:</p>\r\n\r\n<pre>\r\n+---------+-----------+--------------+-----------+\r\n|   id    | movie     |  description |  rating   |\r\n+---------+-----------+--------------+-----------+\r\n|   1     | War       |   great 3D   |   8.9     |\r\n|   2     | Science   |   fiction    |   8.5     |\r\n|   3     | irish     |   boring     |   6.2     |\r\n|   4     | Ice song  |   Fantacy    |   8.6     |\r\n|   5     | House card|   Interesting|   9.1     |\r\n+---------+-----------+--------------+-----------+\r\n</pre>\r\nFor the example above, the output should be:\r\n\r\n<pre>\r\n+---------+-----------+--------------+-----------+\r\n|   id    | movie     |  description |  rating   |\r\n+---------+-----------+--------------+-----------+\r\n|   5     | House card|   Interesting|   9.1     |\r\n|   1     | War       |   great 3D   |   8.9     |\r\n+---------+-----------+--------------+-----------+\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n",
        "questionDescriptionZh": "<p>\u67d0\u57ce\u5e02\u5f00\u4e86\u4e00\u5bb6\u65b0\u7684\u7535\u5f71\u9662\uff0c\u5438\u5f15\u4e86\u5f88\u591a\u4eba\u8fc7\u6765\u770b\u7535\u5f71\u3002\u8be5\u7535\u5f71\u9662\u7279\u522b\u6ce8\u610f\u7528\u6237\u4f53\u9a8c\uff0c\u4e13\u95e8\u6709\u4e2a LED\u663e\u793a\u677f\u505a\u7535\u5f71\u63a8\u8350\uff0c\u4e0a\u9762\u516c\u5e03\u7740\u5f71\u8bc4\u548c\u76f8\u5173\u7535\u5f71\u63cf\u8ff0\u3002</p>\n\n<p>\u4f5c\u4e3a\u8be5\u7535\u5f71\u9662\u7684\u4fe1\u606f\u90e8\u4e3b\u7ba1\uff0c\u60a8\u9700\u8981\u7f16\u5199\u4e00\u4e2a SQL\u67e5\u8be2\uff0c\u627e\u51fa\u6240\u6709\u5f71\u7247\u63cf\u8ff0\u4e3a<strong>\u975e</strong>&nbsp;<code>boring</code>&nbsp;(\u4e0d\u65e0\u804a)&nbsp;\u7684\u5e76\u4e14<strong> id \u4e3a\u5947\u6570&nbsp;</strong>\u7684\u5f71\u7247\uff0c\u7ed3\u679c\u8bf7\u6309\u7b49\u7ea7 <code>rating</code> \u6392\u5217\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u4f8b\u5982\uff0c\u4e0b\u8868 <code>cinema</code>:</p>\n\n<pre>\n+---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   1     | War       |   great 3D   |   8.9     |\n|   2     | Science   |   fiction    |   8.5     |\n|   3     | irish     |   boring     |   6.2     |\n|   4     | Ice song  |   Fantacy    |   8.6     |\n|   5     | House card|   Interesting|   9.1     |\n+---------+-----------+--------------+-----------+\n</pre>\n\n<p>\u5bf9\u4e8e\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u5219\u6b63\u786e\u7684\u8f93\u51fa\u662f\u4e3a\uff1a</p>\n\n<pre>\n+---------+-----------+--------------+-----------+\n|   id    | movie     |  description |  rating   |\n+---------+-----------+--------------+-----------+\n|   5     | House card|   Interesting|   9.1     |\n|   1     | War       |   great 3D   |   8.9     |\n+---------+-----------+--------------+-----------+\n</pre>\n\n<p>&nbsp;</p>\n",
        "tags": [],
        "leetId": "620",
        "link": "not-boring-movies",
        "title": "Not Boring Movies",
        "is_locked": "Normal",
        "titleZh": "\u6709\u8da3\u7684\u7535\u5f71",
        "frequency": "70.0%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Mary is a teacher in a middle school and she has a table <code>seat</code> storing students&#39; names and their corresponding seat ids.</p>\r\nThe column <b>id</b> is continuous increment.\r\n\r\n<p>&nbsp;</p>\r\nMary wants to change seats for the adjacent students.\r\n\r\n<p>&nbsp;</p>\r\nCan you write a SQL query to output the result for Mary?\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n+---------+---------+\r\n|    id   | student |\r\n+---------+---------+\r\n|    1    | Abbot   |\r\n|    2    | Doris   |\r\n|    3    | Emerson |\r\n|    4    | Green   |\r\n|    5    | Jeames  |\r\n+---------+---------+\r\n</pre>\r\nFor the sample input, the output is:\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n+---------+---------+\r\n|    id   | student |\r\n+---------+---------+\r\n|    1    | Doris   |\r\n|    2    | Abbot   |\r\n|    3    | Green   |\r\n|    4    | Emerson |\r\n|    5    | Jeames  |\r\n+---------+---------+\r\n</pre>\r\n\r\n<p><b>Note:</b><br />\r\nIf the number of students is odd, there is no need to change the last one&#39;s seat.</p>\r\n",
        "questionDescriptionZh": "<p>\u5c0f\u7f8e\u662f\u4e00\u6240\u4e2d\u5b66\u7684\u4fe1\u606f\u79d1\u6280\u8001\u5e08\uff0c\u5979\u6709\u4e00\u5f20 <code>seat</code>&nbsp;\u5ea7\u4f4d\u8868\uff0c\u5e73\u65f6\u7528\u6765\u50a8\u5b58\u5b66\u751f\u540d\u5b57\u548c\u4e0e\u4ed6\u4eec\u76f8\u5bf9\u5e94\u7684\u5ea7\u4f4d id\u3002</p>\n\n<p>\u5176\u4e2d\u7eb5\u5217\u7684&nbsp;<strong>id&nbsp;</strong>\u662f\u8fde\u7eed\u9012\u589e\u7684</p>\n\n<p>\u5c0f\u7f8e\u60f3\u6539\u53d8\u76f8\u90bb\u4fe9\u5b66\u751f\u7684\u5ea7\u4f4d\u3002</p>\n\n<p>\u4f60\u80fd\u4e0d\u80fd\u5e2e\u5979\u5199\u4e00\u4e2a SQL query&nbsp;\u6765\u8f93\u51fa\u5c0f\u7f8e\u60f3\u8981\u7684\u7ed3\u679c\u5462\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre>\n+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Abbot   |\n|    2    | Doris   |\n|    3    | Emerson |\n|    4    | Green   |\n|    5    | Jeames  |\n+---------+---------+\n</pre>\n\n<p>\u5047\u5982\u6570\u636e\u8f93\u5165\u7684\u662f\u4e0a\u8868\uff0c\u5219\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a</p>\n\n<pre>\n+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Doris   |\n|    2    | Abbot   |\n|    3    | Green   |\n|    4    | Emerson |\n|    5    | Jeames  |\n+---------+---------+</pre>\n\n<p><strong>\u6ce8\u610f\uff1a</strong></p>\n\n<p>\u5982\u679c\u5b66\u751f\u4eba\u6570\u662f\u5947\u6570\uff0c\u5219\u4e0d\u9700\u8981\u6539\u53d8\u6700\u540e\u4e00\u4e2a\u540c\u5b66\u7684\u5ea7\u4f4d\u3002</p>\n",
        "tags": [],
        "leetId": "626",
        "link": "exchange-seats",
        "title": "Exchange Seats",
        "is_locked": "Normal",
        "titleZh": "\u6362\u5ea7\u4f4d",
        "frequency": "60.0%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a <strong>single update statement</strong> and no intermediate temp table.</p>\r\n\r\n<p>Note that you must write a single update statement, <strong>DO NOT</strong> write any select statement for this problem.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n| id | name | sex | salary |\r\n|----|------|-----|--------|\r\n| 1  | A    | m   | 2500   |\r\n| 2  | B    | f   | 1500   |\r\n| 3  | C    | m   | 5500   |\r\n| 4  | D    | f   | 500    |\r\n</pre>\r\nAfter running your <strong>update</strong> statement, the above salary table should have the following rows:\r\n\r\n<pre>\r\n| id | name | sex | salary |\r\n|----|------|-----|--------|\r\n| 1  | A    | f   | 2500   |\r\n| 2  | B    | m   | 1500   |\r\n| 3  | C    | f   | 5500   |\r\n| 4  | D    | m   | 500    |\r\n</pre>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a&nbsp;<code>salary</code>&nbsp;\u8868\uff0c\u5982\u4e0b\u6240\u793a\uff0c\u6709 m=\u7537\u6027 \u548c f=\u5973\u6027 \u7684\u503c \u3002\u4ea4\u6362\u6240\u6709\u7684 f \u548c m \u503c\uff08\u4f8b\u5982\uff0c\u5c06\u6240\u6709 f \u503c\u66f4\u6539\u4e3a m\uff0c\u53cd\u4e4b\u4ea6\u7136\uff09\u3002\u8981\u6c42\u4f7f\u7528\u4e00\u4e2a\u66f4\u65b0\uff08Update\uff09\u8bed\u53e5\uff0c\u5e76\u4e14\u6ca1\u6709\u4e2d\u95f4\u4e34\u65f6\u8868\u3002</p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u4f60\u5fc5\u987b\u7f16\u5199\u4e00\u4e2a Update \u8bed\u53e5\uff0c\u4e0d\u8981\u7f16\u5199\u4efb\u4f55 Select \u8bed\u53e5\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u4f8b\u5982:</p>\n\n<pre>| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | m   | 2500   |\n| 2  | B    | f   | 1500   |\n| 3  | C    | m   | 5500   |\n| 4  | D    | f   | 500    |\n</pre>\n\n<p>\u8fd0\u884c\u4f60\u6240\u7f16\u5199\u7684\u66f4\u65b0\u8bed\u53e5\u4e4b\u540e\uff0c\u5c06\u4f1a\u5f97\u5230\u4ee5\u4e0b\u8868:</p>\n\n<pre>| id | name | sex | salary |\n|----|------|-----|--------|\n| 1  | A    | f   | 2500   |\n| 2  | B    | m   | 1500   |\n| 3  | C    | f   | 5500   |\n| 4  | D    | m   | 500    |\n</pre>\n",
        "tags": [],
        "leetId": "627",
        "link": "swap-salary",
        "title": "Swap Salary",
        "is_locked": "Normal",
        "titleZh": "\u4ea4\u6362\u5de5\u8d44",
        "frequency": "65.3%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>An encoded string <code>S</code> is given.&nbsp; To find and write the <em>decoded</em> string to a tape, the encoded string is read <strong>one character at a time</strong>&nbsp;and the following steps are taken:</p>\r\n\r\n<ul>\r\n\t<li>If the character read is a letter, that letter is written onto the tape.</li>\r\n\t<li>If the character read is a digit (say <code>d</code>), the entire current tape is repeatedly written&nbsp;<code>d-1</code>&nbsp;more times in total.</li>\r\n</ul>\r\n\r\n<p>Now for some encoded string <code>S</code>, and an index <code>K</code>, find and return the <code>K</code>-th letter (1 indexed) in the decoded string.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-1-1\">&quot;leet2code3&quot;</span>, K = <span id=\"example-input-1-2\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;o&quot;</span>\r\n<strong>Explanation: </strong>\r\nThe decoded string is &quot;leetleetcodeleetleetcodeleetleetcode&quot;.\r\nThe 10th letter in the string is &quot;o&quot;.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-2-1\">&quot;ha22&quot;</span>, K = <span id=\"example-input-2-2\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;h&quot;</span>\r\n<strong>Explanation: </strong>\r\nThe decoded string is &quot;hahahaha&quot;.  The 5th letter is &quot;h&quot;.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-3-1\">&quot;a2345678999999999999999&quot;</span>, K = <span id=\"example-input-3-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">&quot;a&quot;</span>\r\n<strong>Explanation: </strong>\r\nThe decoded string is &quot;a&quot; repeated 8301530446056247680 times.  The 1st letter is &quot;a&quot;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= S.length &lt;= 100</code></li>\r\n\t<li><code>S</code>&nbsp;will only contain lowercase letters and digits <code>2</code> through <code>9</code>.</li>\r\n\t<li><code>S</code>&nbsp;starts with a letter.</li>\r\n\t<li><code>1 &lt;= K &lt;= 10^9</code></li>\r\n\t<li>The decoded string is guaranteed to have less than <code>2^63</code> letters.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7f16\u7801\u5b57\u7b26\u4e32 <code>S</code>\u3002\u4e3a\u4e86\u627e\u51fa<em>\u89e3\u7801</em>\u5b57\u7b26\u4e32\u5e76\u5c06\u5176\u5199\u5165\u78c1\u5e26\uff0c\u4ece\u7f16\u7801\u5b57\u7b26\u4e32\u4e2d<code>\u6bcf\u6b21\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26</code>\uff0c\u5e76\u91c7\u53d6\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c\u6240\u8bfb\u7684\u5b57\u7b26\u662f\u5b57\u6bcd\uff0c\u5219\u5c06\u8be5\u5b57\u6bcd\u5199\u5728\u78c1\u5e26\u4e0a\u3002</li>\n\t<li>\u5982\u679c\u6240\u8bfb\u7684\u5b57\u7b26\u662f\u6570\u5b57\uff08\u4f8b\u5982 <code>d</code>\uff09\uff0c\u5219\u6574\u4e2a\u5f53\u524d\u78c1\u5e26\u603b\u5171\u4f1a\u88ab\u91cd\u590d\u5199&nbsp;<code>d-1</code> \u6b21\u3002</li>\n</ul>\n\n<p>\u73b0\u5728\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7f16\u7801\u5b57\u7b26\u4e32 <code>S</code> \u548c\u7d22\u5f15 <code>K</code>\uff0c\u67e5\u627e\u5e76\u8fd4\u56de\u89e3\u7801\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c&nbsp;<code>K</code>&nbsp;\u4e2a\u5b57\u6bcd\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;leet2code3&quot;, K = 10\n<strong>\u8f93\u51fa\uff1a</strong>&quot;o&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\n\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u4e3a &quot;leetleetcodeleetleetcodeleetleetcode&quot;\u3002\n\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c 10 \u4e2a\u5b57\u6bcd\u662f &quot;o&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;ha22&quot;, K = 5\n<strong>\u8f93\u51fa\uff1a</strong>&quot;h&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\n\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u4e3a &quot;hahahaha&quot;\u3002\u7b2c 5 \u4e2a\u5b57\u6bcd\u662f &quot;h&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;a2345678999999999999999&quot;, K = 1\n<strong>\u8f93\u51fa\uff1a</strong>&quot;a&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\n\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u4e3a &quot;a&quot; \u91cd\u590d 8301530446056247680 \u6b21\u3002\u7b2c 1 \u4e2a\u5b57\u6bcd\u662f &quot;a&quot;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= S.length &lt;= 100</code></li>\n\t<li><code>S</code>&nbsp;\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u4e0e\u6570\u5b57 <code>2</code> \u5230 <code>9</code> \u3002</li>\n\t<li><code>S</code>&nbsp;\u4ee5\u5b57\u6bcd\u5f00\u5934\u3002</li>\n\t<li><code>1 &lt;= K &lt;= 10^9</code></li>\n\t<li>\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u4fdd\u8bc1\u5c11\u4e8e&nbsp;<code>2^63</code>&nbsp;\u4e2a\u5b57\u6bcd\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            }
        ],
        "leetId": "880",
        "link": "decoded-string-at-index",
        "title": "Decoded String at Index",
        "is_locked": "Normal",
        "titleZh": "\u7d22\u5f15\u5904\u7684\u89e3\u7801\u5b57\u7b26\u4e32",
        "frequency": "18.3%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>The <code>i</code>-th person has weight <code>people[i]</code>, and each boat can carry a maximum weight of <code>limit</code>.</p>\r\n\r\n<p>Each boat carries at most 2 people at the same time, provided the sum of the&nbsp;weight of those people is at most <code>limit</code>.</p>\r\n\r\n<p>Return the minimum number of boats to carry every given person.&nbsp; (It is guaranteed each person can be carried by a boat.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>people = <span id=\"example-input-1-1\">[1,2]</span>, limit = <span id=\"example-input-1-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>1 boat (1, 2)\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>people = <span id=\"example-input-2-1\">[3,2,2,1]</span>, limit = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation</strong>: 3 boats (1, 2), (2) and (3)\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>people = <span id=\"example-input-3-1\">[3,5,3,4]</span>, limit = <span id=\"example-input-3-2\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">4</span>\r\n<strong>Explanation</strong>: 4 boats (3), (3), (4), (5)</pre>\r\n\r\n<p><strong>Note</strong>:</p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;=&nbsp;people.length &lt;= 50000</code></li>\r\n\t<li><code>1 &lt;= people[i] &lt;=&nbsp;limit &lt;= 30000</code></li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7b2c&nbsp;<code>i</code>&nbsp;\u4e2a\u4eba\u7684\u4f53\u91cd\u4e3a&nbsp;<code>people[i]</code>\uff0c\u6bcf\u8258\u8239\u53ef\u4ee5\u627f\u8f7d\u7684\u6700\u5927\u91cd\u91cf\u4e3a&nbsp;<code>limit</code>\u3002</p>\n\n<p>\u6bcf\u8258\u8239\u6700\u591a\u53ef\u540c\u65f6\u8f7d\u4e24\u4eba\uff0c\u4f46\u6761\u4ef6\u662f\u8fd9\u4e9b\u4eba\u7684\u91cd\u91cf\u4e4b\u548c\u6700\u591a\u4e3a&nbsp;<code>limit</code>\u3002</p>\n\n<p>\u8fd4\u56de\u8f7d\u5230\u6bcf\u4e00\u4e2a\u4eba\u6240\u9700\u7684\u6700\u5c0f\u8239\u6570\u3002(\u4fdd\u8bc1\u6bcf\u4e2a\u4eba\u90fd\u80fd\u88ab\u8239\u8f7d)\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>people = [1,2], limit = 3\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>1 \u8258\u8239\u8f7d (1, 2)\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>people = [3,2,2,1], limit = 3\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>3 \u8258\u8239\u5206\u522b\u8f7d (1, 2), (2) \u548c (3)\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>people = [3,5,3,4], limit = 5\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>4 \u8258\u8239\u5206\u522b\u8f7d (3), (3), (4), (5)</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;people.length &lt;= 50000</code></li>\n\t<li><code>1 &lt;= people[i] &lt;=&nbsp;limit &lt;= 30000</code></li>\n</ul>\n",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "leetId": "881",
        "link": "boats-to-save-people",
        "title": "Boats to Save People",
        "is_locked": "Normal",
        "titleZh": "\u6551\u751f\u8247",
        "frequency": "33.9%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Starting with an&nbsp;<strong>undirected</strong> graph (the &quot;original graph&quot;) with nodes from <code>0</code> to <code>N-1</code>, subdivisions are made to some of the edges.</p>\r\n\r\n<p>The graph is given as follows: <code>edges[k]</code> is a list of integer pairs <code>(i, j, n)</code> such that <code>(i, j)</code> is an edge of the original graph,</p>\r\n\r\n<p>and <code>n</code> is the total number of <strong>new</strong> nodes on that edge.&nbsp;</p>\r\n\r\n<p>Then, the edge <code>(i, j)</code> is deleted from the original graph,&nbsp;<code>n</code>&nbsp;new nodes <code>(x_1, x_2, ..., x_n)</code> are added to the original graph,</p>\r\n\r\n<p>and <code>n+1</code> new&nbsp;edges <code>(i, x_1), (x_1, x_2), (x_2, x_3), ..., (x_{n-1}, x_n), (x_n, j)</code>&nbsp;are added to the original&nbsp;graph.</p>\r\n\r\n<p>Now, you start at node <code>0</code>&nbsp;from the original graph, and in each move, you travel along one&nbsp;edge.&nbsp;</p>\r\n\r\n<p>Return how many nodes you can reach in at most <code>M</code> moves.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>edges </code>= <span id=\"example-input-1-1\">[[0,1,10],[0,2,1],[1,2,2]]</span>, M = <span id=\"example-input-1-2\">6</span>, N = <span id=\"example-input-1-3\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">13</span>\r\n<strong>Explanation: </strong>\r\nThe nodes that are reachable in the final graph after M = 6 moves are indicated below.\r\n<span><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png\" style=\"width: 487px; height: 200px;\" /></span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><code>edges </code>= <span id=\"example-input-2-1\">[[0,1,4],[1,2,6],[0,2,8],[1,3,1]]</span>, M = <span id=\"example-input-2-2\">10</span>, N = <span id=\"example-input-2-3\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">23</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= edges.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= edges[i][0] &lt;&nbsp;edges[i][1] &lt; N</code></li>\r\n\t<li>There does not exist any&nbsp;<code>i != j</code> for which <code>edges[i][0] == edges[j][0]</code> and <code>edges[i][1] == edges[j][1]</code>.</li>\r\n\t<li>The original graph&nbsp;has no parallel edges.</li>\r\n\t<li><code>0 &lt;= edges[i][2] &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= M &lt;= 10^9</code></li>\r\n\t<li><code><font face=\"monospace\">1 &lt;= N &lt;= 3000</font></code></li>\r\n\t<li>A reachable node is a node that can be travelled to&nbsp;using at most&nbsp;M moves starting from&nbsp;node 0.</li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u4ece\u5177\u6709&nbsp;<code>0</code> \u5230 <code>N-1</code> \u7684\u7ed3\u70b9\u7684<strong>\u65e0\u5411</strong>\u56fe\uff08&ldquo;\u539f\u59cb\u56fe&rdquo;\uff09\u5f00\u59cb\uff0c\u5bf9\u4e00\u4e9b\u8fb9\u8fdb\u884c\u7ec6\u5206\u3002</p>\n\n<p>\u8be5\u56fe\u7ed9\u51fa\u5982\u4e0b\uff1a<code>edges[k]</code>&nbsp;\u662f\u6574\u6570\u5bf9&nbsp;<code>(i, j, n)</code>&nbsp;\u7ec4\u6210\u7684\u5217\u8868\uff0c\u4f7f&nbsp;<code>(i, j)</code> \u662f\u539f\u59cb\u56fe\u7684\u8fb9\u3002</p>\n\n<p><code>n</code> \u662f\u8be5\u8fb9\u4e0a<strong>\u65b0</strong>\u7ed3\u70b9\u7684\u603b\u6570</p>\n\n<p>\u7136\u540e\uff0c\u5c06\u8fb9&nbsp;<code>(i, j)</code>&nbsp;\u4ece\u539f\u59cb\u56fe\u4e2d\u5220\u9664\uff0c\u5c06&nbsp;<code>n</code>&nbsp;\u4e2a\u65b0\u7ed3\u70b9&nbsp;<code>(x_1, x_2, ..., x_n)</code>&nbsp;\u6dfb\u52a0\u5230\u539f\u59cb\u56fe\u4e2d\uff0c</p>\n\n<p>\u5c06&nbsp;<code>n+1</code>&nbsp;\u6761\u65b0\u8fb9&nbsp;<code>(i, x_1), (x_1, x_2), (x_2, x_3), ..., (x_{n-1}, x_n), (x_n, j)</code>&nbsp;\u6dfb\u52a0\u5230\u539f\u59cb\u56fe\u4e2d\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u4f60\u5c06\u4ece\u539f\u59cb\u56fe\u4e2d\u7684\u7ed3\u70b9&nbsp;<code>0</code>&nbsp;\u5904\u51fa\u53d1\uff0c\u5e76\u4e14\u6bcf\u6b21\u79fb\u52a8\uff0c\u4f60\u90fd\u5c06\u6cbf\u7740\u4e00\u6761\u8fb9\u884c\u8fdb\u3002</p>\n\n<p>\u8fd4\u56de\u6700\u591a <code>M</code> \u6b21\u79fb\u52a8\u53ef\u4ee5\u8fbe\u5230\u7684\u7ed3\u70b9\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong><code>edges </code>= [[0,1,10],[0,2,1],[1,2,2]], M = 6, N = 3\n<strong>\u8f93\u51fa\uff1a</strong>13\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5728 M = 6 \u6b21\u79fb\u52a8\u4e4b\u540e\u5728\u6700\u7ec8\u56fe\u4e2d\u53ef\u5230\u8fbe\u7684\u7ed3\u70b9\u5982\u4e0b\u6240\u793a\u3002\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png\" style=\"height: 200px; width: 487px;\">\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong><code>edges </code>= [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], M = 10, N = 4\n<strong>\u8f93\u51fa\uff1a</strong>23</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= edges.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= edges[i][0] &lt;&nbsp;edges[i][1] &lt; N</code></li>\n\t<li>\u4e0d\u5b58\u5728\u4efb\u4f55&nbsp;<code>i != j</code>&nbsp;\u60c5\u51b5\u4e0b&nbsp;<code>edges[i][0] == edges[j][0]</code>&nbsp;\u4e14&nbsp;<code>edges[i][1] == edges[j][1]</code>.</li>\n\t<li>\u539f\u59cb\u56fe\u6ca1\u6709\u5e73\u884c\u7684\u8fb9\u3002</li>\n\t<li><code>0 &lt;= edges[i][2] &lt;= 10000</code></li>\n\t<li><code>0 &lt;= M &lt;= 10^9</code></li>\n\t<li><code>1 &lt;= N &lt;= 3000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            }
        ],
        "leetId": "882",
        "link": "reachable-nodes-in-subdivided-graph",
        "title": "Reachable Nodes In Subdivided Graph",
        "is_locked": "Normal",
        "titleZh": "\u7ec6\u5206\u56fe\u4e2d\u7684\u53ef\u5230\u8fbe\u7ed3\u70b9",
        "frequency": "28.8%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>On a&nbsp;<code>N&nbsp;*&nbsp;N</code> grid, we place some&nbsp;<code>1 * 1 * 1&nbsp;</code>cubes that are axis-aligned with the x, y, and z axes.</p>\r\n\r\n<p>Each value&nbsp;<code>v = grid[i][j]</code>&nbsp;represents a tower of&nbsp;<code>v</code>&nbsp;cubes placed on top of grid cell <code>(i, j)</code>.</p>\r\n\r\n<p>Now we view the&nbsp;<em>projection</em>&nbsp;of these cubes&nbsp;onto the xy, yz, and zx planes.</p>\r\n\r\n<p>A projection is like a shadow, that&nbsp;maps our 3 dimensional figure to a 2 dimensional plane.&nbsp;</p>\r\n\r\n<p>Here, we are viewing the &quot;shadow&quot; when looking at the cubes from the top, the front, and the side.</p>\r\n\r\n<p>Return the total area of all three projections.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<ul>\r\n</ul>\r\n</div>\r\n\r\n<div>\r\n<div>\r\n<ul>\r\n</ul>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<ul>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<ul>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">5</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[1,2],[3,4]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">17</span>\r\n<strong>Explanation: </strong>\r\nHere are the three projections (&quot;shadows&quot;) of the shape made with each axis-aligned plane.\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png\" style=\"width: 749px; height: 200px;\" />\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[1,0],[0,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">8</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[[1,1,1],[1,0,1],[1,1,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">14</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">[[2,2,2],[2,1,2],[2,2,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">21</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<p><span><strong>Note:</strong></span></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= grid.length = grid[0].length&nbsp;&lt;= 50</code></li>\r\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5728&nbsp;<code>N&nbsp;*&nbsp;N</code>&nbsp;\u7684\u7f51\u683c\u4e2d\uff0c\u6211\u4eec\u653e\u7f6e\u4e86\u4e00\u4e9b\u4e0e x\uff0cy\uff0cz \u4e09\u8f74\u5bf9\u9f50\u7684&nbsp;<code>1 * 1 * 1</code>&nbsp;\u7acb\u65b9\u4f53\u3002</p>\n\n<p>\u6bcf\u4e2a\u503c&nbsp;<code>v = grid[i][j]</code>&nbsp;\u8868\u793a <code>v</code>&nbsp;\u4e2a\u6b63\u65b9\u4f53\u53e0\u653e\u5728\u5355\u5143\u683c&nbsp;<code>(i, j)</code>&nbsp;\u4e0a\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u67e5\u770b\u8fd9\u4e9b\u7acb\u65b9\u4f53\u5728 xy\u3001yz&nbsp;\u548c zx&nbsp;\u5e73\u9762\u4e0a\u7684<em>\u6295\u5f71</em>\u3002</p>\n\n<p>\u6295\u5f71\u5c31\u50cf\u5f71\u5b50\uff0c\u5c06\u4e09\u7ef4\u5f62\u4f53\u6620\u5c04\u5230\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\u4e0a\u3002</p>\n\n<p>\u5728\u8fd9\u91cc\uff0c\u4ece\u9876\u90e8\u3001\u524d\u9762\u548c\u4fa7\u9762\u770b\u7acb\u65b9\u4f53\u65f6\uff0c\u6211\u4eec\u4f1a\u770b\u5230&ldquo;\u5f71\u5b50&rdquo;\u3002</p>\n\n<p>\u8fd4\u56de\u6240\u6709\u4e09\u4e2a\u6295\u5f71\u7684\u603b\u9762\u79ef\u3002</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[2]]\n<strong>\u8f93\u51fa\uff1a</strong>5\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2],[3,4]]\n<strong>\u8f93\u51fa\uff1a</strong>17\n<strong>\u89e3\u91ca\uff1a</strong>\n\u8fd9\u91cc\u6709\u8be5\u5f62\u4f53\u5728\u4e09\u4e2a\u8f74\u5bf9\u9f50\u5e73\u9762\u4e0a\u7684\u4e09\u4e2a\u6295\u5f71(&ldquo;\u9634\u5f71\u90e8\u5206&rdquo;)\u3002\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png\" style=\"height: 200px; width: 749px;\">\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,0],[0,2]]\n<strong>\u8f93\u51fa\uff1a</strong>8\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,1,1],[1,0,1],[1,1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>14\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[2,2,2],[2,1,2],[2,2,2]]\n<strong>\u8f93\u51fa\uff1a</strong>21\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= grid.length = grid[0].length&nbsp;&lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "883",
        "link": "projection-area-of-3d-shapes",
        "title": "Projection Area of 3D Shapes",
        "is_locked": "Normal",
        "titleZh": "\u4e09\u7ef4\u5f62\u4f53\u6295\u5f71\u9762\u79ef",
        "frequency": "59.0%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>On a&nbsp;<code>N&nbsp;*&nbsp;N</code>&nbsp;grid, we place some&nbsp;<code>1 * 1 * 1&nbsp;</code>cubes.</p>\r\n\r\n<p>Each value&nbsp;<code>v = grid[i][j]</code>&nbsp;represents a tower of&nbsp;<code>v</code>&nbsp;cubes placed on top of grid cell&nbsp;<code>(i, j)</code>.</p>\r\n\r\n<p>Return the total surface area of the resulting shapes.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<ul>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">10</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[1,2],[3,4]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">34</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[1,0],[0,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">16</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[[1,1,1],[1,0,1],[1,1,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">32</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">[[2,2,2],[2,1,2],[2,2,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">46</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 50</code></li>\r\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5728&nbsp;<code>N&nbsp;*&nbsp;N</code>&nbsp;\u7684\u7f51\u683c\u4e0a\uff0c\u6211\u4eec\u653e\u7f6e\u4e00\u4e9b&nbsp;<code>1 * 1 * 1&nbsp;</code>&nbsp;\u7684\u7acb\u65b9\u4f53\u3002</p>\n\n<p>\u6bcf\u4e2a\u503c&nbsp;<code>v = grid[i][j]</code>&nbsp;\u8868\u793a&nbsp;<code>v</code>&nbsp;\u4e2a\u6b63\u65b9\u4f53\u53e0\u653e\u5728\u5355\u5143\u683c&nbsp;<code>(i, j)</code>&nbsp;\u4e0a\u3002</p>\n\n<p>\u8fd4\u56de\u7ed3\u679c\u5f62\u4f53\u7684\u603b\u8868\u9762\u79ef\u3002</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[2]]\n<strong>\u8f93\u51fa\uff1a</strong>10\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2],[3,4]]\n<strong>\u8f93\u51fa\uff1a</strong>34\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,0],[0,2]]\n<strong>\u8f93\u51fa\uff1a</strong>16\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,1,1],[1,0,1],[1,1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>32\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[2,2,2],[2,1,2],[2,2,2]]\n<strong>\u8f93\u51fa\uff1a</strong>46\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n",
        "tags": [
            {
                "tag": "Geometry",
                "link": "geometry",
                "tagZh": "\u51e0\u4f55"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "892",
        "link": "surface-area-of-3d-shapes",
        "title": "Surface Area of 3D Shapes",
        "is_locked": "Normal",
        "titleZh": "\u4e09\u7ef4\u5f62\u4f53\u7684\u8868\u9762\u79ef",
        "frequency": "49.7%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>You are given an array <code>A</code> of strings.</p>\r\n\r\n<p>Two strings <code>S</code> and <code>T</code> are&nbsp;<em>special-equivalent</em>&nbsp;if after any number of <em>moves</em>, S == T.</p>\r\n\r\n<p>A <em>move</em> consists of choosing two indices <code>i</code> and <code>j</code> with <code>i % 2 == j % 2</code>, and swapping <code>S[i]</code> with <code>S[j]</code>.</p>\r\n\r\n<p>Now, a <em>group of special-equivalent strings from <code>A</code></em>&nbsp;is a&nbsp;non-empty subset S of <code>A</code>&nbsp;such that any string not in S&nbsp;is not special-equivalent with any string in S.</p>\r\n\r\n<p>Return the number of groups of special-equivalent strings from <code>A</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;,&quot;c&quot;,&quot;c&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<span><strong>Explanation</strong>: 3 groups [&quot;a&quot;,&quot;a&quot;], [&quot;b&quot;], [&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;aa&quot;,&quot;bb&quot;,&quot;ab&quot;,&quot;ba&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">4</span>\r\n<strong>Explanation</strong>: 4 groups <span id=\"example-input-2-1\">[&quot;aa&quot;], [&quot;bb&quot;], [&quot;ab&quot;], [&quot;ba&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[&quot;abc&quot;,&quot;acb&quot;,&quot;bac&quot;,&quot;bca&quot;,&quot;cab&quot;,&quot;cba&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation</strong>: 3 groups [&quot;abc&quot;,&quot;cba&quot;], [&quot;acb&quot;,&quot;bca&quot;], [&quot;bac&quot;,&quot;cab&quot;]\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[&quot;abcd&quot;,&quot;cdab&quot;,&quot;adcb&quot;,&quot;cbad&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">1</span>\r\n<strong>Explanation</strong>: 1 group <span id=\"example-input-4-1\">[&quot;abcd&quot;,&quot;cdab&quot;,&quot;adcb&quot;,&quot;cbad&quot;]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= A.length &lt;= 1000</code></li>\r\n\t<li><code>1 &lt;= A[i].length &lt;= 20</code></li>\r\n\t<li>All <code>A[i]</code> have the same length.</li>\r\n\t<li>All <code>A[i]</code> consist of only lowercase letters.</li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u4f60\u5c06\u5f97\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 <code>A</code>\u3002</p>\n\n<p>\u5982\u679c\u7ecf\u8fc7\u4efb\u610f\u6b21\u6570\u7684\u79fb\u52a8\uff0cS == T\uff0c\u90a3\u4e48\u4e24\u4e2a\u5b57\u7b26\u4e32 <code>S</code> \u548c <code>T</code> \u662f<em>\u7279\u6b8a\u7b49\u4ef7</em>\u7684\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u4e00\u6b21<em>\u79fb\u52a8</em>\u5305\u62ec\u9009\u62e9\u4e24\u4e2a\u7d22\u5f15 <code>i</code> \u548c <code>j</code>\uff0c\u4e14&nbsp;<code>i\uff052 == j\uff052</code>\uff0c\u5e76\u4e14\u4ea4\u6362 <code>S[j]</code> \u548c <code>S [i]</code>\u3002</p>\n\n<p>\u73b0\u5728\u89c4\u5b9a\uff0c<em><code>A</code> \u4e2d\u7684\u7279\u6b8a\u7b49\u4ef7\u5b57\u7b26\u4e32\u7ec4</em>\u662f <code>A</code> \u7684\u975e\u7a7a\u5b50\u96c6 <code>S</code>\uff0c\u8fd9\u6837\u4e0d\u5728 <code>S</code> \u4e2d\u7684\u4efb\u4f55\u5b57\u7b26\u4e32\u4e0e <code>S</code> \u4e2d\u7684\u4efb\u4f55\u5b57\u7b26\u4e32\u90fd\u4e0d\u662f\u7279\u6b8a\u7b49\u4ef7\u7684\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u8fd4\u56de <code>A</code>&nbsp;\u4e2d\u7279\u6b8a\u7b49\u4ef7\u5b57\u7b26\u4e32\u7ec4\u7684\u6570\u91cf\u3002</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;,&quot;c&quot;,&quot;c&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>3<strong> </strong>\u7ec4 [&quot;a&quot;,&quot;a&quot;]\uff0c[&quot;b&quot;]\uff0c[&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;aa&quot;,&quot;bb&quot;,&quot;ab&quot;,&quot;ba&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>4 \u7ec4 [&quot;aa&quot;]\uff0c[&quot;bb&quot;]\uff0c[&quot;ab&quot;]\uff0c[&quot;ba&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;abc&quot;,&quot;acb&quot;,&quot;bac&quot;,&quot;bca&quot;,&quot;cab&quot;,&quot;cba&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>3 \u7ec4 [&quot;abc&quot;,&quot;cba&quot;]\uff0c[&quot;acb&quot;,&quot;bca&quot;]\uff0c[&quot;bac&quot;,&quot;cab&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;abcd&quot;,&quot;cdab&quot;,&quot;adcb&quot;,&quot;cbad&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>1 \u7ec4 [&quot;abcd&quot;,&quot;cdab&quot;,&quot;adcb&quot;,&quot;cbad&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 20</code></li>\n\t<li>\u6240\u6709&nbsp;<code>A[i]</code>&nbsp;\u90fd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002</li>\n\t<li>\u6240\u6709&nbsp;<code>A[i]</code>&nbsp;\u90fd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n</ul>\n",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "leetId": "893",
        "link": "groups-of-special-equivalent-strings",
        "title": "Groups of Special-Equivalent Strings",
        "is_locked": "Normal",
        "titleZh": "\u7279\u6b8a\u7b49\u4ef7\u5b57\u7b26\u4e32\u7ec4",
        "frequency": "59.4%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>A <em>full binary tree</em>&nbsp;is a binary tree where each node has exactly 0 or 2&nbsp;children.</p>\r\n\r\n<p>Return a list of all possible full binary trees with <code>N</code> nodes.&nbsp; Each element of the answer is the root node of one possible tree.</p>\r\n\r\n<p>Each <code>node</code> of each&nbsp;tree in the answer <strong>must</strong> have <code>node.val = 0</code>.</p>\r\n\r\n<p>You may return the final list of trees in any order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">7</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]</span>\r\n<strong>Explanation:</strong>\r\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/22/fivetrees.png\" style=\"width: 700px; height: 400px;\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 20</code></li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p><em>\u6ee1\u4e8c\u53c9\u6811</em>\u662f\u4e00\u7c7b\u4e8c\u53c9\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u6070\u597d\u6709 0 \u6216 2 \u4e2a\u5b50\u7ed3\u70b9\u3002</p>\n\n<p>\u8fd4\u56de\u5305\u542b <code>N</code> \u4e2a\u7ed3\u70b9\u7684\u6240\u6709\u53ef\u80fd\u6ee1\u4e8c\u53c9\u6811\u7684\u5217\u8868\u3002 \u7b54\u6848\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u53ef\u80fd\u6811\u7684\u6839\u7ed3\u70b9\u3002</p>\n\n<p>\u7b54\u6848\u4e2d\u6bcf\u4e2a\u6811\u7684\u6bcf\u4e2a<code>\u7ed3\u70b9</code>\u90fd<strong>\u5fc5\u987b</strong>\u6709 <code>node.val=0</code>\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u6811\u7684\u6700\u7ec8\u5217\u8868\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>7\n<strong>\u8f93\u51fa\uff1a</strong>[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\n<strong>\u89e3\u91ca\uff1a</strong>\n<img alt=\"\" src=\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/fivetrees.png\" style=\"height: 400px; width: 700px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 20</code></li>\n</ul>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Recursion",
                "link": "recursion",
                "tagZh": "\u9012\u5f52"
            }
        ],
        "leetId": "894",
        "link": "all-possible-full-binary-trees",
        "title": "All Possible Full Binary Trees",
        "is_locked": "Normal",
        "titleZh": "\u6240\u6709\u53ef\u80fd\u7684\u6ee1\u4e8c\u53c9\u6811",
        "frequency": "67.5%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Implement <code>FreqStack</code>, a class which simulates the operation of a stack-like data structure.</p>\r\n\r\n<p><code>FreqStack</code>&nbsp;has two functions:</p>\r\n\r\n<ul>\r\n\t<li><code>push(int x)</code>, which pushes an integer <code>x</code> onto the stack.</li>\r\n\t<li><code>pop()</code>, which <strong>removes</strong> and returns the most frequent element in the stack.\r\n\t<ul>\r\n\t\t<li>If there is a tie for most frequent element, the element closest to the top of the stack is removed and returned.</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>\r\n<span id=\"example-input-1-1\">[&quot;FreqStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]</span>,\r\n<span id=\"example-input-1-2\">[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,null,null,null,null,null,null,5,7,5,4]</span>\r\n<strong>Explanation</strong>:\r\nAfter making six .push operations, the stack is [5,7,5,7,4,5] from bottom to top.  Then:\r\n\r\npop() -&gt; returns 5, as 5 is the most frequent.\r\nThe stack becomes [5,7,5,7,4].\r\n\r\npop() -&gt; returns 7, as 5 and 7 is the most frequent, but 7 is closest to the top.\r\nThe stack becomes [5,7,5,4].\r\n\r\npop() -&gt; returns 5.\r\nThe stack becomes [5,7,4].\r\n\r\npop() -&gt; returns 4.\r\nThe stack becomes [5,7].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Calls to <code>FreqStack.push(int x)</code>&nbsp;will be such that <code>0 &lt;= x &lt;= 10^9</code>.</li>\r\n\t<li>It is guaranteed that <code>FreqStack.pop()</code> won&#39;t be called if the stack has zero elements.</li>\r\n\t<li>The total number of <code>FreqStack.push</code> calls will not exceed <code>10000</code> in a single test case.</li>\r\n\t<li>The total number of <code>FreqStack.pop</code>&nbsp;calls will not exceed <code>10000</code> in a single test case.</li>\r\n\t<li>The total number of <code>FreqStack.push</code> and <code>FreqStack.pop</code> calls will not exceed <code>150000</code> across all test cases.</li>\r\n</ul>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5b9e\u73b0 <code>FreqStack</code>\uff0c\u6a21\u62df\u7c7b\u4f3c\u6808\u7684\u6570\u636e\u7ed3\u6784\u7684\u64cd\u4f5c\u7684\u4e00\u4e2a\u7c7b\u3002</p>\n\n<p><code>FreqStack</code>&nbsp;\u6709\u4e24\u4e2a\u51fd\u6570\uff1a</p>\n\n<ul>\n\t<li><code>push(int x)</code>\uff0c\u5c06\u6574\u6570&nbsp;<code>x</code>&nbsp;\u63a8\u5165\u6808\u4e2d\u3002</li>\n\t<li><code>pop()</code>\uff0c\u5b83<strong>\u79fb\u9664</strong>\u5e76\u8fd4\u56de\u6808\u4e2d\u51fa\u73b0\u6700\u9891\u7e41\u7684\u5143\u7d20\u3002\n\t<ul>\n\t\t<li>\u5982\u679c\u6700\u9891\u7e41\u7684\u5143\u7d20\u4e0d\u53ea\u4e00\u4e2a\uff0c\u5219\u79fb\u9664\u5e76\u8fd4\u56de\u6700\u63a5\u8fd1\u6808\u9876\u7684\u5143\u7d20\u3002</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>\n[&quot;FreqStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;],\n[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,null,null,null,null,null,null,5,7,5,4]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6267\u884c\u516d\u6b21 .push \u64cd\u4f5c\u540e\uff0c\u6808\u81ea\u5e95\u5411\u4e0a\u4e3a [5,7,5,7,4,5]\u3002\u7136\u540e\uff1a\n\npop() -&gt; \u8fd4\u56de 5\uff0c\u56e0\u4e3a 5 \u662f\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u3002\n\u6808\u53d8\u6210 [5,7,5,7,4]\u3002\n\npop() -&gt; \u8fd4\u56de 7\uff0c\u56e0\u4e3a 5 \u548c 7 \u90fd\u662f\u9891\u7387\u6700\u9ad8\u7684\uff0c\u4f46 7 \u6700\u63a5\u8fd1\u6808\u9876\u3002\n\u6808\u53d8\u6210 [5,7,5,4]\u3002\n\npop() -&gt; \u8fd4\u56de 5 \u3002\n\u6808\u53d8\u6210 [5,7,4]\u3002\n\npop() -&gt; \u8fd4\u56de 4 \u3002\n\u6808\u53d8\u6210 [5,7]\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u5bf9&nbsp;<code>FreqStack.push(int x)</code>&nbsp;\u7684\u8c03\u7528\u4e2d&nbsp;<code>0 &lt;= x &lt;= 10^9</code>\u3002</li>\n\t<li>\u5982\u679c\u6808\u7684\u5143\u7d20\u6570\u76ee\u4e3a\u96f6\uff0c\u5219\u4fdd\u8bc1\u4e0d\u4f1a\u8c03\u7528&nbsp; <code>FreqStack.pop()</code>\u3002</li>\n\t<li>\u5355\u4e2a\u6d4b\u8bd5\u6837\u4f8b\u4e2d\uff0c\u5bf9&nbsp;<code>FreqStack.push</code>&nbsp;\u7684\u603b\u8c03\u7528\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7&nbsp;<code>10000</code>\u3002</li>\n\t<li>\u5355\u4e2a\u6d4b\u8bd5\u6837\u4f8b\u4e2d\uff0c\u5bf9&nbsp;<code>FreqStack.pop</code>&nbsp;\u7684\u603b\u8c03\u7528\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7&nbsp;<code>10000</code>\u3002</li>\n\t<li>\u6240\u6709\u6d4b\u8bd5\u6837\u4f8b\u4e2d\uff0c\u5bf9&nbsp;<code>FreqStack.push</code>&nbsp;\u548c <code>FreqStack.pop</code>&nbsp;\u7684\u603b\u8c03\u7528\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7&nbsp;<code>150000</code>\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "leetId": "895",
        "link": "maximum-frequency-stack",
        "title": "Maximum Frequency Stack",
        "is_locked": "Normal",
        "titleZh": "\u6700\u5927\u9891\u7387\u6808",
        "frequency": "36.7%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>An array is <em>monotonic</em> if it is either monotone increasing or monotone decreasing.</p>\r\n\r\n<p>An array <code>A</code> is monotone increasing if for all <code>i &lt;= j</code>, <code>A[i] &lt;= A[j]</code>.&nbsp; An array <code>A</code> is monotone decreasing if for all <code>i &lt;= j</code>, <code>A[i] &gt;= A[j]</code>.</p>\r\n\r\n<p>Return <code>true</code> if and only if the given array <code>A</code> is monotonic.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[6,5,4,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,3,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[1,2,4,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">[1,1,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">true</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\r\n\t<li><code>-100000 &lt;= A[i] &lt;= 100000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5982\u679c\u6570\u7ec4\u662f\u5355\u8c03\u9012\u589e\u6216\u5355\u8c03\u9012\u51cf\u7684\uff0c\u90a3\u4e48\u5b83\u662f<em>\u5355\u8c03\u7684</em>\u3002</p>\n\n<p>\u5982\u679c\u5bf9\u4e8e\u6240\u6709 <code>i &lt;= j</code>\uff0c<code>A[i] &lt;= A[j]</code>\uff0c\u90a3\u4e48\u6570\u7ec4 <code>A</code> \u662f\u5355\u8c03\u9012\u589e\u7684\u3002 \u5982\u679c\u5bf9\u4e8e\u6240\u6709 <code>i &lt;= j</code>\uff0c<code>A[i]&gt; = A[j]</code>\uff0c\u90a3\u4e48\u6570\u7ec4 <code>A</code> \u662f\u5355\u8c03\u9012\u51cf\u7684\u3002</p>\n\n<p>\u5f53\u7ed9\u5b9a\u7684\u6570\u7ec4 <code>A</code>&nbsp;\u662f\u5355\u8c03\u6570\u7ec4\u65f6\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[6,5,4,4]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,3,2]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,4,5]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>-100000 &lt;= A[i] &lt;= 100000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "896",
        "link": "monotonic-array",
        "title": "Monotonic Array",
        "is_locked": "Normal",
        "titleZh": "\u5355\u8c03\u6570\u5217",
        "frequency": "46.4%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given a tree, rearrange the tree in <strong>in-order</strong> so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.</p>\r\n\r\n<pre>\r\n<strong>Example 1:</strong>\r\n<strong>Input:</strong> [5,3,6,2,4,null,8,1,null,null,null,7,9]\r\n\r\n       5\r\n      / \\\r\n    3    6\r\n   / \\    \\\r\n  2   4    8\r\n&nbsp;/        / \\ \r\n1        7   9\r\n\r\n<strong>Output:</strong> [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\r\n\r\n 1\r\n&nbsp; \\\r\n&nbsp;  2\r\n&nbsp;   \\\r\n&nbsp;    3\r\n&nbsp;     \\\r\n&nbsp;      4\r\n&nbsp;       \\\r\n&nbsp;        5\r\n&nbsp;         \\\r\n&nbsp;          6\r\n&nbsp;           \\\r\n&nbsp;            7\r\n&nbsp;             \\\r\n&nbsp;              8\r\n&nbsp;               \\\r\n                 9  </pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the given tree will be between 1 and 100.</li>\r\n\t<li>Each node will have a unique integer value from 0 to 1000.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6811\uff0c<strong>\u6309\u4e2d\u5e8f\u904d\u5386</strong>\u91cd\u65b0\u6392\u5217\u6811\uff0c\u4f7f\u6811\u4e2d\u6700\u5de6\u8fb9\u7684\u7ed3\u70b9\u73b0\u5728\u662f\u6811\u7684\u6839\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7ed3\u70b9\u6ca1\u6709\u5de6\u5b50\u7ed3\u70b9\uff0c\u53ea\u6709\u4e00\u4e2a\u53f3\u5b50\u7ed3\u70b9\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b \uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,3,6,2,4,null,8,1,null,null,null,7,9]\n\n       5\n      / \\\n    3    6\n   / \\    \\\n  2   4    8\n&nbsp;/        / \\ \n1        7   9\n\n<strong>\u8f93\u51fa\uff1a</strong>[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\n\n 1\n&nbsp; \\\n&nbsp;  2\n&nbsp;   \\\n&nbsp;    3\n&nbsp;     \\\n&nbsp;      4\n&nbsp;       \\\n&nbsp;        5\n&nbsp;         \\\n&nbsp;          6\n&nbsp;           \\\n&nbsp;            7\n&nbsp;             \\\n&nbsp;              8\n&nbsp;               \\\n                 9  </pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6811\u4e2d\u7684\u7ed3\u70b9\u6570\u4ecb\u4e8e 1 \u548c&nbsp;100 \u4e4b\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u6709\u4e00\u4e2a\u4ece 0 \u5230 1000 \u8303\u56f4\u5185\u7684\u552f\u4e00\u6574\u6570\u503c\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "leetId": "897",
        "link": "increasing-order-search-tree",
        "title": "Increasing Order Search Tree",
        "is_locked": "Normal",
        "titleZh": "\u9012\u589e\u987a\u5e8f\u67e5\u627e\u6811",
        "frequency": "54.6%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>We have an array <code>A</code> of non-negative integers.</p>\r\n\r\n<p>For every (contiguous) subarray <code>B =&nbsp;[A[i], A[i+1], ..., A[j]]</code> (with <code>i &lt;= j</code>), we take the bitwise OR of all the elements in <code>B</code>, obtaining a result <font face=\"monospace\"><code>A[i] | A[i+1] | ... | A[j]</code>.</font></p>\r\n\r\n<p>Return the number of possible&nbsp;results.&nbsp; (Results that occur more than once are only counted once in the final answer.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[0]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>\r\nThere is only one possible result: 0.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,1,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation: </strong>\r\nThe possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\r\nThese yield the results 1, 1, 2, 1, 3, 3.\r\nThere are 3 unique values, so the answer is 3.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,2,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">6</span>\r\n<strong>Explanation: </strong>\r\nThe possible results are 1, 2, 3, 4, 6, and 7.\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u6709\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\u3002</p>\n\n<p>\u5bf9\u4e8e\u6bcf\u4e2a\uff08\u8fde\u7eed\u7684\uff09\u5b50\u6570\u7ec4&nbsp;<code>B =&nbsp;[A[i], A[i+1], ..., A[j]]</code> \uff08&nbsp;<code>i &lt;= j</code>\uff09\uff0c\u6211\u4eec\u5bf9&nbsp;<code>B</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8fdb\u884c\u6309\u4f4d\u6216\u64cd\u4f5c\uff0c\u83b7\u5f97\u7ed3\u679c&nbsp;<code>A[i] | A[i+1] | ... | A[j]</code>\u3002</p>\n\n<p>\u8fd4\u56de\u53ef\u80fd\u7ed3\u679c\u7684\u6570\u91cf\u3002 \uff08\u591a\u6b21\u51fa\u73b0\u7684\u7ed3\u679c\u5728\u6700\u7ec8\u7b54\u6848\u4e2d\u4ec5\u8ba1\u7b97\u4e00\u6b21\u3002\uff09</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\n\u53ea\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u7ed3\u679c 0 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,2]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u53ef\u80fd\u7684\u5b50\u6570\u7ec4\u4e3a [1]\uff0c[1]\uff0c[2]\uff0c[1, 1]\uff0c[1, 2]\uff0c[1, 1, 2]\u3002\n\u4ea7\u751f\u7684\u7ed3\u679c\u4e3a 1\uff0c1\uff0c2\uff0c1\uff0c3\uff0c3 \u3002\n\u6709\u4e09\u4e2a\u552f\u4e00\u503c\uff0c\u6240\u4ee5\u7b54\u6848\u662f 3 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,4]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\n\u53ef\u80fd\u7684\u7ed3\u679c\u662f 1\uff0c2\uff0c3\uff0c4\uff0c6\uff0c\u4ee5\u53ca 7 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Bit Manipulation",
                "link": "bit-manipulation",
                "tagZh": "\u4f4d\u8fd0\u7b97"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "898",
        "link": "bitwise-ors-of-subarrays",
        "title": "Bitwise ORs of Subarrays",
        "is_locked": "Normal",
        "titleZh": "\u5b50\u6570\u7ec4\u6309\u4f4d\u6216\u64cd\u4f5c",
        "frequency": "21.7%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>A string <code>S</code> of lowercase letters is given.&nbsp; Then, we may make any number of <em>moves</em>.</p>\r\n\r\n<p>In each move, we&nbsp;choose one&nbsp;of the first <code>K</code> letters (starting from the left), remove it,&nbsp;and place it at the end of the string.</p>\r\n\r\n<p>Return the lexicographically smallest string we could have after any number of moves.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-1-1\">&quot;cba&quot;</span>, K = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;acb&quot;</span>\r\n<strong>Explanation: </strong>\r\nIn the first move, we move the 1st character (&quot;c&quot;) to the end, obtaining the string &quot;bac&quot;.\r\nIn the second move, we move the 1st character (&quot;b&quot;) to the end, obtaining the final result &quot;acb&quot;.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-2-1\">&quot;baaca&quot;</span>, K = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;aaabc&quot;</span>\r\n<strong>Explanation: </strong>\r\nIn the first move, we move the 1st character (&quot;b&quot;) to the end, obtaining the string &quot;aacab&quot;.\r\nIn the second move, we move the 3rd character (&quot;c&quot;) to the end, obtaining the final result &quot;aaabc&quot;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= K &lt;= S.length&nbsp;&lt;= 1000</code></li>\r\n\t<li><code>S</code>&nbsp;consists of lowercase letters only.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e86\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 <code>S</code>\u3002\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u4efb\u610f\u6b21\u6570\u7684<em>\u79fb\u52a8</em>\u3002</p>\n\n<p>\u5728\u6bcf\u6b21\u79fb\u52a8\u4e2d\uff0c\u6211\u4eec\u9009\u62e9\u524d <code>K</code> \u4e2a\u5b57\u6bcd\u4e2d\u7684\u4e00\u4e2a\uff08\u4ece\u5de6\u4fa7\u5f00\u59cb\uff09\uff0c\u5c06\u5176\u4ece\u539f\u4f4d\u7f6e\u79fb\u9664\uff0c\u5e76\u653e\u7f6e\u5728\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u3002</p>\n\n<p>\u8fd4\u56de\u6211\u4eec\u5728\u4efb\u610f\u6b21\u6570\u7684\u79fb\u52a8\u4e4b\u540e\u53ef\u4ee5\u62e5\u6709\u7684\u6309\u5b57\u5178\u987a\u5e8f\u6392\u5217\u7684\u6700\u5c0f\u5b57\u7b26\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;cba&quot;, K = 1\n<strong>\u8f93\u51fa\uff1a</strong>&quot;acb&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5728\u7b2c\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff08&ldquo;c&rdquo;\uff09\u79fb\u52a8\u5230\u6700\u540e\uff0c\u83b7\u5f97\u5b57\u7b26\u4e32 &ldquo;bac&rdquo;\u3002\n\u5728\u7b2c\u4e8c\u6b65\u4e2d\uff0c\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff08&ldquo;b&rdquo;\uff09\u79fb\u52a8\u5230\u6700\u540e\uff0c\u83b7\u5f97\u6700\u7ec8\u7ed3\u679c &ldquo;acb&rdquo;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;baaca&quot;, K = 3\n<strong>\u8f93\u51fa\uff1a</strong>&quot;aaabc&quot;\n<strong>\u89e3\u91ca\uff1a\n</strong>\u5728\u7b2c\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u5c06\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff08&ldquo;b&rdquo;\uff09\u79fb\u52a8\u5230\u6700\u540e\uff0c\u83b7\u5f97\u5b57\u7b26\u4e32 &ldquo;aacab&rdquo;\u3002\n\u5728\u7b2c\u4e8c\u6b65\u4e2d\uff0c\u6211\u4eec\u5c06\u7b2c\u4e09\u4e2a\u5b57\u7b26\uff08&ldquo;c&rdquo;\uff09\u79fb\u52a8\u5230\u6700\u540e\uff0c\u83b7\u5f97\u6700\u7ec8\u7ed3\u679c &ldquo;aaabc&rdquo;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= S.length&nbsp;&lt;= 1000</code></li>\n\t<li><code>S</code>&nbsp;\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "leetId": "899",
        "link": "orderly-queue",
        "title": "Orderly Queue",
        "is_locked": "Normal",
        "titleZh": "\u6709\u5e8f\u961f\u5217",
        "frequency": "40.4%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>Write an iterator that iterates through a run-length encoded sequence.</p>\r\n\r\n<p>The iterator is initialized by <code>RLEIterator(int[] A)</code>, where <code>A</code> is a run-length encoding of some&nbsp;sequence.&nbsp; More specifically,&nbsp;for all even <code>i</code>,&nbsp;<code>A[i]</code> tells us the number of times that the non-negative integer value <code>A[i+1]</code> is repeated in the sequence.</p>\r\n\r\n<p>The iterator supports one function:&nbsp;<code>next(int n)</code>, which exhausts the next <code>n</code> elements&nbsp;(<code>n &gt;= 1</code>) and returns the last element exhausted in this way.&nbsp; If there is no element left to exhaust, <code>next</code>&nbsp;returns <code>-1</code> instead.</p>\r\n\r\n<p>For example, we start with <code>A = [3,8,0,9,2,5]</code>, which is a run-length encoding of the sequence <code>[8,8,8,5,5]</code>.&nbsp; This is because the sequence can be read as&nbsp;&quot;three eights, zero nines, two fives&quot;.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;RLEIterator&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;]</span>, <span id=\"example-input-1-2\">[[[3,8,0,9,2,5]],[2],[1],[1],[2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,8,8,5,-1]</span>\r\n<strong>Explanation: </strong>\r\nRLEIterator is initialized with RLEIterator([3,8,0,9,2,5]).\r\nThis maps to the sequence [8,8,8,5,5].\r\nRLEIterator.next is then called 4 times:\r\n\r\n.next(2) exhausts 2 terms of the sequence, returning 8.  The remaining sequence is now [8, 5, 5].\r\n\r\n.next(1) exhausts 1 term of the sequence, returning 8.  The remaining sequence is now [5, 5].\r\n\r\n.next(1) exhausts 1 term of the sequence, returning 5.  The remaining sequence is now [5].\r\n\r\n.next(2) exhausts 2 terms, returning -1.  This is because the first term exhausted was 5,\r\nbut the second term did not exist.  Since the last term exhausted does not exist, we return -1.\r\n\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt;= 1000</code></li>\r\n\t<li><code>A.length</code>&nbsp;is an even integer.</li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\r\n\t<li>There are at most <code>1000</code> calls to <code>RLEIterator.next(int n)</code> per test case.</li>\r\n\t<li>Each call to&nbsp;<code>RLEIterator.next(int n)</code>&nbsp;will have <code>1 &lt;= n &lt;= 10^9</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a\u904d\u5386\u6e38\u7a0b\u7f16\u7801\u5e8f\u5217\u7684\u8fed\u4ee3\u5668\u3002</p>\n\n<p>\u8fed\u4ee3\u5668\u7531 <code>RLEIterator(int[] A)</code> \u521d\u59cb\u5316\uff0c\u5176\u4e2d&nbsp;<code>A</code>&nbsp;\u662f\u67d0\u4e2a\u5e8f\u5217\u7684\u6e38\u7a0b\u7f16\u7801\u3002\u66f4\u5177\u4f53\u5730\uff0c\u5bf9\u4e8e\u6240\u6709\u5076\u6570 <code>i</code>\uff0c<code>A[i]</code> \u544a\u8bc9\u6211\u4eec\u5728\u5e8f\u5217\u4e2d\u91cd\u590d\u975e\u8d1f\u6574\u6570\u503c <code>A[i + 1]</code> \u7684\u6b21\u6570\u3002</p>\n\n<p>\u8fed\u4ee3\u5668\u652f\u6301\u4e00\u4e2a\u51fd\u6570\uff1a<code>next(int n)</code>\uff0c\u5b83\u8017\u5c3d\u63a5\u4e0b\u6765\u7684&nbsp; <code>n</code> \u4e2a\u5143\u7d20\uff08<code>n &gt;= 1</code>\uff09\u5e76\u8fd4\u56de\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8017\u53bb\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u6ca1\u6709\u5269\u4f59\u7684\u5143\u7d20\u53ef\u4f9b\u8017\u5c3d\uff0c\u5219&nbsp; <code>next</code>&nbsp;\u8fd4\u56de&nbsp;<code>-1</code> \u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u6211\u4eec\u4ee5&nbsp;<code>A = [3,8,0,9,2,5]</code>&nbsp;\u5f00\u59cb\uff0c\u8fd9\u662f\u5e8f\u5217&nbsp;<code>[8,8,8,5,5]</code>&nbsp;\u7684\u6e38\u7a0b\u7f16\u7801\u3002\u8fd9\u662f\u56e0\u4e3a\u8be5\u5e8f\u5217\u53ef\u4ee5\u8bfb\u4f5c &ldquo;\u4e09\u4e2a\u516b\uff0c\u96f6\u4e2a\u4e5d\uff0c\u4e24\u4e2a\u4e94&rdquo;\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;RLEIterator&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,8,8,5,-1]\n<strong>\u89e3\u91ca\uff1a</strong>\nRLEIterator \u7531 RLEIterator([3,8,0,9,2,5]) \u521d\u59cb\u5316\u3002\n\u8fd9\u6620\u5c04\u5230\u5e8f\u5217 [8,8,8,5,5]\u3002\n\u7136\u540e\u8c03\u7528 RLEIterator.next 4\u6b21\u3002\n\n.next(2) \u8017\u53bb\u5e8f\u5217\u7684 2 \u4e2a\u9879\uff0c\u8fd4\u56de 8\u3002\u73b0\u5728\u5269\u4e0b\u7684\u5e8f\u5217\u662f [8, 5, 5]\u3002\n\n.next(1) \u8017\u53bb\u5e8f\u5217\u7684 1 \u4e2a\u9879\uff0c\u8fd4\u56de 8\u3002\u73b0\u5728\u5269\u4e0b\u7684\u5e8f\u5217\u662f [5, 5]\u3002\n\n.next(1) \u8017\u53bb\u5e8f\u5217\u7684 1 \u4e2a\u9879\uff0c\u8fd4\u56de 5\u3002\u73b0\u5728\u5269\u4e0b\u7684\u5e8f\u5217\u662f [5]\u3002\n\n.next(2) \u8017\u53bb\u5e8f\u5217\u7684 2 \u4e2a\u9879\uff0c\u8fd4\u56de -1\u3002 \u8fd9\u662f\u7531\u4e8e\u7b2c\u4e00\u4e2a\u88ab\u8017\u53bb\u7684\u9879\u662f 5\uff0c\n\u4f46\u7b2c\u4e8c\u4e2a\u9879\u5e76\u4e0d\u5b58\u5728\u3002\u7531\u4e8e\u6700\u540e\u4e00\u4e2a\u8981\u8017\u53bb\u7684\u9879\u4e0d\u5b58\u5728\uff0c\u6211\u4eec\u8fd4\u56de -1\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>A.length</code>&nbsp;\u662f\u5076\u6570\u3002</li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6700\u591a\u8c03\u7528&nbsp;<code>1000</code>&nbsp;\u6b21&nbsp;<code>RLEIterator.next(int n)</code>\u3002</li>\n\t<li>\u6bcf\u6b21\u8c03\u7528&nbsp;<code>RLEIterator.next(int n)</code>&nbsp;\u90fd\u6709&nbsp;<code>1 &lt;= n &lt;= 10^9</code>&nbsp;\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "900",
        "link": "rle-iterator",
        "title": "RLE Iterator",
        "is_locked": "Normal",
        "titleZh": "RLE \u8fed\u4ee3\u5668",
        "frequency": "35.0%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Write a class <code>StockSpanner</code> which collects daily price quotes for some stock, and returns the <em>span</em>&nbsp;of that stock&#39;s price for the current day.</p>\r\n\r\n<p>The span of the stock&#39;s price today&nbsp;is defined as the maximum number of consecutive days (starting from today and going backwards)&nbsp;for which the price of the stock was less than or equal to today&#39;s price.</p>\r\n\r\n<p>For example, if the price of a stock over the next 7 days were <code>[100, 80, 60, 70, 60, 75, 85]</code>, then the stock spans would be <code>[1, 1, 1, 2, 1, 4, 6]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;StockSpanner&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;]</span>, <span id=\"example-input-1-2\">[[],[100],[80],[60],[70],[60],[75],[85]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,1,1,1,2,1,4,6]</span>\r\n<strong>Explanation: </strong>\r\nFirst, S = StockSpanner() is initialized.  Then:\r\nS.next(100) is called and returns 1,\r\nS.next(80) is called and returns 1,\r\nS.next(60) is called and returns 1,\r\nS.next(70) is called and returns 2,\r\nS.next(60) is called and returns 1,\r\nS.next(75) is called and returns 4,\r\nS.next(85) is called and returns 6.\r\n\r\nNote that (for example) S.next(75) returned 4, because the last 4 prices\r\n(including today&#39;s price of 75) were less than or equal to today&#39;s price.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>Calls to <code>StockSpanner.next(int price)</code> will have <code>1 &lt;= price &lt;= 10^5</code>.</li>\r\n\t<li>There will be at most <code>10000</code> calls to <code>StockSpanner.next</code>&nbsp;per test case.</li>\r\n\t<li>There will be at most <code>150000</code> calls to <code>StockSpanner.next</code> across all test cases.</li>\r\n\t<li>The total&nbsp;time limit for this problem has been reduced by 75% for&nbsp;C++, and 50% for all other languages.</li>\r\n</ol>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7f16\u5199\u4e00\u4e2a <code>StockSpanner</code> \u7c7b\uff0c\u5b83\u6536\u96c6\u67d0\u4e9b\u80a1\u7968\u7684\u6bcf\u65e5\u62a5\u4ef7\uff0c\u5e76\u8fd4\u56de\u8be5\u80a1\u7968\u5f53\u65e5\u4ef7\u683c\u7684\u8de8\u5ea6\u3002</p>\n\n<p>\u4eca\u5929\u80a1\u7968\u4ef7\u683c\u7684\u8de8\u5ea6\u88ab\u5b9a\u4e49\u4e3a\u80a1\u7968\u4ef7\u683c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u4eca\u5929\u4ef7\u683c\u7684\u6700\u5927\u8fde\u7eed\u65e5\u6570\uff08\u4ece\u4eca\u5929\u5f00\u59cb\u5f80\u56de\u6570\uff0c\u5305\u62ec\u4eca\u5929\uff09\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5982\u679c\u672a\u67657\u5929\u80a1\u7968\u7684\u4ef7\u683c\u662f <code>[100, 80, 60, 70, 60, 75, 85]</code>\uff0c\u90a3\u4e48\u80a1\u7968\u8de8\u5ea6\u5c06\u662f <code>[1, 1, 1, 2, 1, 4, 6]</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;StockSpanner&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[],[100],[80],[60],[70],[60],[75],[85]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,1,1,1,2,1,4,6]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u9996\u5148\uff0c\u521d\u59cb\u5316 S = StockSpanner()\uff0c\u7136\u540e\uff1a\nS.next(100) \u88ab\u8c03\u7528\u5e76\u8fd4\u56de 1\uff0c\nS.next(80) \u88ab\u8c03\u7528\u5e76\u8fd4\u56de 1\uff0c\nS.next(60) \u88ab\u8c03\u7528\u5e76\u8fd4\u56de 1\uff0c\nS.next(70) \u88ab\u8c03\u7528\u5e76\u8fd4\u56de 2\uff0c\nS.next(60) \u88ab\u8c03\u7528\u5e76\u8fd4\u56de 1\uff0c\nS.next(75) \u88ab\u8c03\u7528\u5e76\u8fd4\u56de 4\uff0c\nS.next(85) \u88ab\u8c03\u7528\u5e76\u8fd4\u56de 6\u3002\n\n\u6ce8\u610f (\u4f8b\u5982) S.next(75) \u8fd4\u56de 4\uff0c\u56e0\u4e3a\u622a\u81f3\u4eca\u5929\u7684\u6700\u540e 4 \u4e2a\u4ef7\u683c\n(\u5305\u62ec\u4eca\u5929\u7684\u4ef7\u683c 75) \u5c0f\u4e8e\u6216\u7b49\u4e8e\u4eca\u5929\u7684\u4ef7\u683c\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u8c03\u7528&nbsp;<code>StockSpanner.next(int price)</code>&nbsp;\u65f6\uff0c\u5c06\u6709&nbsp;<code>1 &lt;= price &lt;= 10^5</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6700\u591a\u53ef\u4ee5\u8c03\u7528&nbsp; <code>10000</code> \u6b21 <code>StockSpanner.next</code>\u3002</li>\n\t<li>\u5728\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\u4e2d\uff0c\u6700\u591a\u8c03\u7528&nbsp;<code>150000</code>&nbsp;\u6b21&nbsp;<code>StockSpanner.next</code>\u3002</li>\n\t<li>\u6b64\u95ee\u9898\u7684\u603b\u65f6\u95f4\u9650\u5236\u51cf\u5c11\u4e86 50%\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            }
        ],
        "leetId": "901",
        "link": "online-stock-span",
        "title": "Online Stock Span",
        "is_locked": "Normal",
        "titleZh": "\u80a1\u7968\u4ef7\u683c\u8de8\u5ea6",
        "frequency": "32.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>We have a <strong>sorted</strong> set of digits <code>D</code>, a non-empty subset of <code>{&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;}</code>.&nbsp; (Note that <code>&#39;0&#39;</code> is not included.)</p>\r\n\r\n<p>Now, we write numbers using these digits, using each digit as many times as we want.&nbsp; For example, if <code>D = {&#39;1&#39;,&#39;3&#39;,&#39;5&#39;}</code>, we may write numbers such as <code>&#39;13&#39;, &#39;551&#39;, &#39;1351315&#39;</code>.</p>\r\n\r\n<p>Return the number of positive integers that can be written (using the digits of <code>D</code>) that are less than or equal to <code>N</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>D = <span id=\"example-input-1-1\">[&quot;1&quot;,&quot;3&quot;,&quot;5&quot;,&quot;7&quot;]</span>, N = <span id=\"example-input-1-2\">100</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">20</span>\r\n<strong>Explanation: </strong>\r\nThe 20 numbers that can be written are:\r\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>D = <span id=\"example-input-2-1\">[&quot;1&quot;,&quot;4&quot;,&quot;9&quot;]</span>, N = <span id=\"example-input-2-2\">1000000000</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">29523</span>\r\n<strong>Explanation: </strong>\r\nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\r\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\r\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\r\nIn total, this is 29523 integers that can be written using the digits of D.</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>D</code> is a&nbsp;subset of digits <code>&#39;1&#39;-&#39;9&#39;</code> in sorted order.</li>\r\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u6709\u4e00\u7ec4<strong>\u6392\u5e8f\u7684</strong>\u6570\u5b57 <code>D</code>\uff0c\u5b83\u662f&nbsp; <code>{&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;}</code>&nbsp;\u7684\u975e\u7a7a\u5b50\u96c6\u3002\uff08\u8bf7\u6ce8\u610f\uff0c<code>&#39;0&#39;</code> \u4e0d\u5305\u62ec\u5728\u5185\u3002\uff09</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u7528\u8fd9\u4e9b\u6570\u5b57\u8fdb\u884c\u7ec4\u5408\u5199\u6570\u5b57\uff0c\u60f3\u7528\u591a\u5c11\u6b21\u5c31\u7528\u591a\u5c11\u6b21\u3002\u4f8b\u5982&nbsp;<code>D = {&#39;1&#39;,&#39;3&#39;,&#39;5&#39;}</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u50cf&nbsp;<code>&#39;13&#39;, &#39;551&#39;, &#39;1351315&#39;</code>&nbsp;\u8fd9\u6837\u7684\u6570\u5b57\u3002</p>\n\n<p>\u8fd4\u56de\u53ef\u4ee5\u7528 <code>D</code> \u4e2d\u7684\u6570\u5b57\u5199\u51fa\u7684\u5c0f\u4e8e\u6216\u7b49\u4e8e <code>N</code> \u7684\u6b63\u6574\u6570\u7684\u6570\u76ee\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>D = [&quot;1&quot;,&quot;3&quot;,&quot;5&quot;,&quot;7&quot;], N = 100\n<strong>\u8f93\u51fa\uff1a</strong>20\n<strong>\u89e3\u91ca\uff1a</strong>\n\u53ef\u5199\u51fa\u7684 20 \u4e2a\u6570\u5b57\u662f\uff1a\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>D = [&quot;1&quot;,&quot;4&quot;,&quot;9&quot;], N = 1000000000\n<strong>\u8f93\u51fa\uff1a</strong>29523\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6211\u4eec\u53ef\u4ee5\u5199 3 \u4e2a\u4e00\u4f4d\u6570\u5b57\uff0c9 \u4e2a\u4e24\u4f4d\u6570\u5b57\uff0c27 \u4e2a\u4e09\u4f4d\u6570\u5b57\uff0c\n81 \u4e2a\u56db\u4f4d\u6570\u5b57\uff0c243 \u4e2a\u4e94\u4f4d\u6570\u5b57\uff0c729 \u4e2a\u516d\u4f4d\u6570\u5b57\uff0c\n2187 \u4e2a\u4e03\u4f4d\u6570\u5b57\uff0c6561 \u4e2a\u516b\u4f4d\u6570\u5b57\u548c 19683 \u4e2a\u4e5d\u4f4d\u6570\u5b57\u3002\n\u603b\u5171\uff0c\u53ef\u4ee5\u4f7f\u7528D\u4e2d\u7684\u6570\u5b57\u5199\u51fa 29523 \u4e2a\u6574\u6570\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>D</code> \u662f\u6309\u6392\u5e8f\u987a\u5e8f\u7684\u6570\u5b57 <code>&#39;1&#39;-&#39;9&#39;</code> \u7684\u5b50\u96c6\u3002</li>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "902",
        "link": "numbers-at-most-n-given-digit-set",
        "title": "Numbers At Most N Given Digit Set",
        "is_locked": "Normal",
        "titleZh": "\u6700\u5927\u4e3a N \u7684\u6570\u5b57\u7ec4\u5408",
        "frequency": "21.6%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>We are given <code>S</code>, a length <code>n</code> string of characters from the set <code>{&#39;D&#39;, &#39;I&#39;}</code>. (These letters stand for &quot;decreasing&quot; and &quot;increasing&quot;.)</p>\r\n\r\n<p>A&nbsp;<em>valid permutation</em>&nbsp;is a permutation <code>P[0], P[1], ..., P[n]</code> of integers&nbsp;<code>{0, 1, ..., n}</code>, such that for all <code>i</code>:</p>\r\n\r\n<ul>\r\n\t<li>If <code>S[i] == &#39;D&#39;</code>, then <code>P[i] &gt; P[i+1]</code>, and;</li>\r\n\t<li>If <code>S[i] == &#39;I&#39;</code>, then <code>P[i] &lt; P[i+1]</code>.</li>\r\n</ul>\r\n\r\n<p>How many valid permutations are there?&nbsp; Since the answer may be large, <strong>return your answer modulo <code>10^9 + 7</code></strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;DID&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">5</span>\r\n<strong>Explanation: </strong>\r\nThe 5 valid permutations of (0, 1, 2, 3) are:\r\n(1, 0, 3, 2)\r\n(2, 0, 3, 1)\r\n(2, 1, 3, 0)\r\n(3, 0, 2, 1)\r\n(3, 1, 2, 0)\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length &lt;= 200</code></li>\r\n\t<li><code>S</code> consists only of characters from the set <code>{&#39;D&#39;, &#39;I&#39;}</code>.</li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u7ed9\u51fa <code>S</code>\uff0c\u4e00\u4e2a\u6e90\u4e8e&nbsp;<code>{&#39;D&#39;, &#39;I&#39;}</code>&nbsp;\u7684\u957f\u5ea6\u4e3a <code>n</code>&nbsp;\u7684\u5b57\u7b26\u4e32 \u3002\uff08\u8fd9\u4e9b\u5b57\u6bcd\u4ee3\u8868 &ldquo;\u51cf\u5c11&rdquo; \u548c &ldquo;\u589e\u52a0&rdquo;\u3002\uff09<br>\n<em>\u6709\u6548\u6392\u5217</em>&nbsp;\u662f\u5bf9\u6574\u6570 <code>{0, 1, ..., n}</code>&nbsp;\u7684\u4e00\u4e2a\u6392\u5217&nbsp;<code>P[0], P[1], ..., P[n]</code>\uff0c\u4f7f\u5f97\u5bf9\u6240\u6709\u7684&nbsp;<code>i</code>\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c <code>S[i] == &#39;D&#39;</code>\uff0c\u90a3\u4e48&nbsp;<code>P[i] &gt; P[i+1]</code>\uff0c\u4ee5\u53ca\uff1b</li>\n\t<li>\u5982\u679c <code>S[i] == &#39;I&#39;</code>\uff0c\u90a3\u4e48 <code>P[i] &lt; P[i+1]</code>\u3002</li>\n</ul>\n\n<p>\u6709\u591a\u5c11\u4e2a\u6709\u6548\u6392\u5217\uff1f\u56e0\u4e3a\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u6240\u4ee5\u8bf7<strong>\u8fd4\u56de\u4f60\u7684\u7b54\u6848\u6a21</strong><strong> <code>10^9 + 7</code></strong>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;DID&quot;\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\n(0, 1, 2, 3) \u7684\u4e94\u4e2a\u6709\u6548\u6392\u5217\u662f\uff1a\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 200</code></li>\n\t<li><code>S</code> \u4ec5\u7531\u96c6\u5408 <code>{&#39;D&#39;, &#39;I&#39;}</code>&nbsp;\u4e2d\u7684\u5b57\u7b26\u7ec4\u6210\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "903",
        "link": "valid-permutations-for-di-sequence",
        "title": "Valid Permutations for DI Sequence",
        "is_locked": "Normal",
        "titleZh": "DI \u5e8f\u5217\u7684\u6709\u6548\u6392\u5217",
        "frequency": "43.1%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>In a row of trees, the <code>i</code>-th tree&nbsp;produces&nbsp;fruit with type&nbsp;<code>tree[i]</code>.</p>\r\n\r\n<p>You <strong>start at any tree&nbsp;of your choice</strong>, then repeatedly perform the following steps:</p>\r\n\r\n<ol>\r\n\t<li>Add one piece of fruit from this tree to your baskets.&nbsp; If you cannot, stop.</li>\r\n\t<li>Move to the next tree to the right of the current tree.&nbsp; If there is no tree to the right, stop.</li>\r\n</ol>\r\n\r\n<p>Note that you do not have any choice after the initial choice of starting tree:&nbsp;you must perform step 1, then step 2, then back to step 1, then step 2, and so on until you stop.</p>\r\n\r\n<p>You have two baskets, and each basket can carry any quantity of fruit, but you want each basket to only carry one type of fruit each.</p>\r\n\r\n<p>What is the total amount of fruit you can collect with this procedure?</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong><span>Explanation: </span></strong><span>We can collect [1,2,1].</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[0,1,2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3\r\n</span><strong><span>Explanation: </span></strong><span>We can collect [1,2,2].\r\nIf we started at the first tree, we would only collect [0, 1].</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,2,3,2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">4\r\n</span><strong><span>Explanation: </span></strong><span>We can collect [2,3,2,2].</span>\r\n<span>If we started at the first tree, we would only collect [1, 2].</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[3,3,3,1,2,1,1,2,3,3,4]</span>\r\n<strong>Output: </strong>5<span id=\"example-output-4\">\r\n</span><strong><span>Explanation: </span></strong><span>We can collect [1,2,1,1,2].</span>\r\n<span>If we started at the first tree or the eighth tree, we would only collect 4 fruits.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= tree.length &lt;= 40000</code></li>\r\n\t<li><code>0 &lt;= tree[i] &lt; tree.length</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e00\u6392\u6811\u4e2d\uff0c\u7b2c <code>i</code> \u68f5\u6811\u4ea7\u751f&nbsp;<code>tree[i]</code> \u578b\u7684\u6c34\u679c\u3002<br>\n\u4f60\u53ef\u4ee5<strong>\u4ece\u4f60\u9009\u62e9\u7684\u4efb\u4f55\u6811\u5f00\u59cb</strong>\uff0c\u7136\u540e\u91cd\u590d\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p>\n\n<ol>\n\t<li>\u628a\u8fd9\u68f5\u6811\u4e0a\u7684\u6c34\u679c\u653e\u8fdb\u4f60\u7684\u7bee\u5b50\u91cc\u3002\u5982\u679c\u4f60\u505a\u4e0d\u5230\uff0c\u5c31\u505c\u4e0b\u6765\u3002</li>\n\t<li>\u79fb\u52a8\u5230\u5f53\u524d\u6811\u53f3\u4fa7\u7684\u4e0b\u4e00\u68f5\u6811\u3002\u5982\u679c\u53f3\u8fb9\u6ca1\u6709\u6811\uff0c\u5c31\u505c\u4e0b\u6765\u3002</li>\n</ol>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u5728\u9009\u62e9\u4e00\u9897\u6811\u540e\uff0c\u4f60\u6ca1\u6709\u4efb\u4f55\u9009\u62e9\uff1a\u4f60\u5fc5\u987b\u6267\u884c\u6b65\u9aa4 1\uff0c\u7136\u540e\u6267\u884c\u6b65\u9aa4 2\uff0c\u7136\u540e\u8fd4\u56de\u6b65\u9aa4 1\uff0c\u7136\u540e\u6267\u884c\u6b65\u9aa4 2\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u76f4\u81f3\u505c\u6b62\u3002</p>\n\n<p>\u4f60\u6709\u4e24\u4e2a\u7bee\u5b50\uff0c\u6bcf\u4e2a\u7bee\u5b50\u53ef\u4ee5\u643a\u5e26\u4efb\u4f55\u6570\u91cf\u7684\u6c34\u679c\uff0c\u4f46\u4f60\u5e0c\u671b\u6bcf\u4e2a\u7bee\u5b50\u53ea\u643a\u5e26\u4e00\u79cd\u7c7b\u578b\u7684\u6c34\u679c\u3002<br>\n\u7528\u8fd9\u4e2a\u7a0b\u5e8f\u4f60\u80fd\u6536\u96c6\u7684\u6c34\u679c\u603b\u91cf\u662f\u591a\u5c11\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u6536\u96c6 [1,2,1]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,1,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u6536\u96c6 [1,2,2].\n\u5982\u679c\u6211\u4eec\u4ece\u7b2c\u4e00\u68f5\u6811\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u53ea\u80fd\u6536\u96c6\u5230 [0, 1]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u6536\u96c6 [2,3,2,2].\n\u5982\u679c\u6211\u4eec\u4ece\u7b2c\u4e00\u68f5\u6811\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u53ea\u80fd\u6536\u96c6\u5230 [1, 2]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,3,3,1,2,1,1,2,3,3,4]\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u6536\u96c6 [1,2,1,1,2].\n\u5982\u679c\u6211\u4eec\u4ece\u7b2c\u4e00\u68f5\u6811\u6216\u7b2c\u516b\u68f5\u6811\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u53ea\u80fd\u6536\u96c6\u5230 4 \u4e2a\u6c34\u679c\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= tree.length &lt;= 40000</code></li>\n\t<li><code>0 &lt;= tree[i] &lt; tree.length</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "leetId": "904",
        "link": "fruit-into-baskets",
        "title": "Fruit Into Baskets",
        "is_locked": "Normal",
        "titleZh": "\u6c34\u679c\u6210\u7bee",
        "frequency": "28.9%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of non-negative integers, return an array consisting of all the even elements of <code>A</code>, followed by all the odd elements of <code>A</code>.</p>\r\n\r\n<p>You may return any answer array that satisfies this condition.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,1,2,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,4,3,1]</span>\r\nThe outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 5000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 5000</code></li>\r\n</ol>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u8fd4\u56de\u4e00\u4e2a\u7531 <code>A</code> \u7684\u6240\u6709\u5076\u6570\u5143\u7d20\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u540e\u9762\u8ddf <code>A</code> \u7684\u6240\u6709\u5947\u6570\u5143\u7d20\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u8fd4\u56de\u6ee1\u8db3\u6b64\u6761\u4ef6\u7684\u4efb\u4f55\u6570\u7ec4\u4f5c\u4e3a\u7b54\u6848\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,1,2,4]\n<strong>\u8f93\u51fa\uff1a</strong>[2,4,3,1]\n\u8f93\u51fa [4,2,3,1]\uff0c[2,4,1,3] \u548c [4,2,1,3] \u4e5f\u4f1a\u88ab\u63a5\u53d7\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 5000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "905",
        "link": "sort-array-by-parity",
        "title": "Sort Array By Parity",
        "is_locked": "Normal",
        "titleZh": "\u6309\u5947\u5076\u6392\u5e8f\u6570\u7ec4",
        "frequency": "68.3%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Let&#39;s say a positive integer is a&nbsp;<em>superpalindrome</em>&nbsp;if it is a palindrome, and it is also the square of a palindrome.</p>\r\n\r\n<p>Now, given two positive&nbsp;integers <code>L</code> and <code>R</code> (represented as strings), return the number of superpalindromes in the inclusive range <code>[L, R]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>L = <span id=\"example-input-1-1\">&quot;4&quot;</span>, R = <span id=\"example-input-1-2\">&quot;1000&quot;</span>\r\n<strong>Output: </strong>4\r\n<span><strong>Explanation</strong>: </span>4, 9, 121, and 484 are superpalindromes.\r\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= len(L) &lt;= 18</code></li>\r\n\t<li><code>1 &lt;= len(R) &lt;= 18</code></li>\r\n\t<li><code>L</code> and <code>R</code> are strings representing integers in the range <code>[1, 10^18)</code>.</li>\r\n\t<li><code>int(L) &lt;= int(R)</code></li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5982\u679c\u4e00\u4e2a\u6b63\u6574\u6570\u81ea\u8eab\u662f\u56de\u6587\u6570\uff0c\u800c\u4e14\u5b83\u4e5f\u662f\u4e00\u4e2a\u56de\u6587\u6570\u7684\u5e73\u65b9\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8fd9\u4e2a\u6570\u4e3a\u8d85\u7ea7\u56de\u6587\u6570\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u7ed9\u5b9a\u4e24\u4e2a\u6b63\u6574\u6570&nbsp;<code>L</code> \u548c&nbsp;<code>R</code> \uff08\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8868\u793a\uff09\uff0c\u8fd4\u56de\u5305\u542b\u5728\u8303\u56f4 <code>[L, R]</code> \u4e2d\u7684\u8d85\u7ea7\u56de\u6587\u6570\u7684\u6570\u76ee\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>L = &quot;4&quot;, R = &quot;1000&quot;\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a\n</strong>4\uff0c9\uff0c121\uff0c\u4ee5\u53ca 484 \u662f\u8d85\u7ea7\u56de\u6587\u6570\u3002\n\u6ce8\u610f 676 \u4e0d\u662f\u4e00\u4e2a\u8d85\u7ea7\u56de\u6587\u6570\uff1a 26 * 26 = 676\uff0c\u4f46\u662f 26 \u4e0d\u662f\u56de\u6587\u6570\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= len(L) &lt;= 18</code></li>\n\t<li><code>1 &lt;= len(R) &lt;= 18</code></li>\n\t<li><code>L</code> \u548c&nbsp;<code>R</code>&nbsp;\u662f\u8868\u793a&nbsp;<code>[1, 10^18)</code>&nbsp;\u8303\u56f4\u7684\u6574\u6570\u7684\u5b57\u7b26\u4e32\u3002</li>\n\t<li><code>int(L) &lt;= int(R)</code></li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "906",
        "link": "super-palindromes",
        "title": "Super Palindromes",
        "is_locked": "Normal",
        "titleZh": "\u8d85\u7ea7\u56de\u6587\u6570",
        "frequency": "17.2%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>Given an array of integers <code>A</code>, find the sum of <code>min(B)</code>, where <code>B</code> ranges over&nbsp;every (contiguous) subarray of <code>A</code>.</p>\r\n\r\n<p>Since the answer may be large, <strong>return the answer modulo <code>10^9 + 7</code>.</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,1,2,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">17</span>\r\n<strong>Explanation:</strong> Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \r\nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.&nbsp; Sum is 17.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 30000</code></li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u627e\u5230 <code>min(B)</code>&nbsp;\u7684\u603b\u548c\uff0c\u5176\u4e2d <code>B</code> \u7684\u8303\u56f4\u4e3a&nbsp;<code>A</code> \u7684\u6bcf\u4e2a\uff08\u8fde\u7eed\uff09\u5b50\u6570\u7ec4\u3002</p>\n\n<p>\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u56e0\u6b64<strong>\u8fd4\u56de\u7b54\u6848\u6a21 <code>10^9 + 7</code></strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,1,2,4]\n<strong>\u8f93\u51fa\uff1a</strong>17\n<strong>\u89e3\u91ca\uff1a\n\u5b50\u6570\u7ec4\u4e3a </strong>[3]\uff0c[1]\uff0c[2]\uff0c[4]\uff0c[3,1]\uff0c[1,2]\uff0c[2,4]\uff0c[3,1,2]\uff0c[1,2,4]\uff0c[3,1,2,4]\u3002 \n\u6700\u5c0f\u503c\u4e3a 3\uff0c1\uff0c2\uff0c4\uff0c1\uff0c1\uff0c2\uff0c1\uff0c1\uff0c1\uff0c\u548c\u4e3a 17\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A &lt;= 30000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 30000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "907",
        "link": "sum-of-subarray-minimums",
        "title": "Sum of Subarray Minimums",
        "is_locked": "Normal",
        "titleZh": "\u5b50\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e4b\u548c",
        "frequency": "22.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of integers, for each integer <code>A[i]</code> we may choose any <code>x</code> with <code>-K &lt;= x &lt;= K</code>, and add <code>x</code> to <code>A[i]</code>.</p>\r\n\r\n<p>After this process, we have some array <code>B</code>.</p>\r\n\r\n<p>Return the smallest possible difference between the maximum value of <code>B</code>&nbsp;and the minimum value of <code>B</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1]</span>, K = <span id=\"example-input-1-2\">0</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">0\r\n<strong>Explanation</strong>: B = [1]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[0,10]</span>, K = <span id=\"example-input-2-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6\r\n</span><span id=\"example-output-1\"><strong>Explanation</strong>: B = [2,8]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[1,3,6]</span>, K = <span id=\"example-input-3-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0\r\n</span><span id=\"example-output-1\"><strong>Explanation</strong>: B = [3,3,3] or B = [4,4,4]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= K &lt;= 10000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6574\u6570 <code>A[i]</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4efb\u610f&nbsp;<code>x</code> \u6ee1\u8db3&nbsp;<code>-K &lt;= x &lt;= K</code>\uff0c\u5e76\u5c06&nbsp;<code>x</code>&nbsp;\u52a0\u5230&nbsp;<code>A[i]</code>&nbsp;\u4e2d\u3002</p>\n\n<p>\u5728\u6b64\u8fc7\u7a0b\u4e4b\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e00\u4e9b\u6570\u7ec4&nbsp;<code>B</code>\u3002</p>\n\n<p>\u8fd4\u56de <code>B</code>&nbsp;\u7684\u6700\u5927\u503c\u548c <code>B</code>&nbsp;\u7684\u6700\u5c0f\u503c\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u7684\u6700\u5c0f\u5dee\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1], K = 0\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>B = [1]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [0,10], K = 2\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>B = [2,8]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,3,6], K = 3\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>B = [3,3,3] \u6216 B = [4,4,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\n\t<li><code>0 &lt;= K &lt;= 10000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "908",
        "link": "smallest-range-i",
        "title": "Smallest Range I",
        "is_locked": "Normal",
        "titleZh": "\u6700\u5c0f\u5dee\u503c I",
        "frequency": "63.9%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>On an N x N <code>board</code>, the numbers from <code>1</code> to <code>N*N</code> are written&nbsp;<em>boustrophedonically</em>&nbsp;<strong>starting from the bottom&nbsp;left of the board</strong>, and alternating direction each row.&nbsp; For example, for a 6 x 6 board, the numbers are written as follows:</p>\r\n\r\n<pre>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/09/23/snakes.png\" style=\"width: 254px; height: 200px;\" />\r\n</pre>\r\n\r\n<p>You start on square <code>1</code> of the board (which is always in the last row and&nbsp;first column).&nbsp; Each move, starting from square <code>x</code>, consists of the following:</p>\r\n\r\n<ul>\r\n\t<li>You choose a destination square <code>S</code> with number&nbsp;<code>x+1</code>, <code>x+2</code>, <code>x+3</code>, <code>x+4</code>, <code>x+5</code>, or <code>x+6</code>, provided this&nbsp;number is&nbsp;<code>&lt;=&nbsp;N*N</code>.\r\n\r\n\t<ul>\r\n\t\t<li>(This choice simulates the result of a standard 6-sided die roll: ie., there are always at most 6 destinations.)</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>If <code>S</code>&nbsp;has a snake or ladder, you move to the destination of that snake or ladder.&nbsp; Otherwise, you move to <code>S</code>.</li>\r\n</ul>\r\n\r\n<p>A board square on row <code>r</code> and column <code>c</code>&nbsp;has a &quot;snake or ladder&quot; if <code>board[r][c] != -1</code>.&nbsp; The destination of that snake or ladder is <code>board[r][c]</code>.</p>\r\n\r\n<p>Note that you only take a snake or ladder at most once per move: if the destination to a snake or ladder is the start of another&nbsp;snake or ladder, you do <strong>not</strong> continue moving.&nbsp; (For example, if the board is `[[4,-1],[-1,3]]`, and on the first move your destination square is `2`, then you finish your first move at&nbsp;`3`, because you do <strong>not</strong> continue moving to `4`.)</p>\r\n\r\n<p>Return the least number of moves required to reach square <font face=\"monospace\">N*N</font>.&nbsp; If it is not possible, return <code>-1</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[\r\n[-1,-1,-1,-1,-1,-1],\r\n[-1,-1,-1,-1,-1,-1],\r\n[-1,-1,-1,-1,-1,-1],\r\n[-1,35,-1,-1,13,-1],\r\n[-1,-1,-1,-1,-1,-1],\r\n[-1,15,-1,-1,-1,-1]]\r\n<strong>Output: </strong>4\r\n<strong>Explanation: </strong>\r\nAt the beginning, you start at square 1 [at row 5, column 0].\r\nYou decide to move to square 2, and must take the ladder to square 15.\r\nYou then decide to move to square 17 (row 3, column 5), and must take the snake to square 13.\r\nYou then decide to move to square 14, and must take the ladder to square 35.\r\nYou then decide to move to square 36, ending the game.\r\nIt can be shown that you need at least 4 moves to reach the N*N-th square, so the answer is 4.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= board.length = board[0].length&nbsp;&lt;= 20</code></li>\r\n\t<li><code>board[i][j]</code>&nbsp;is between <code>1</code> and <code>N*N</code> or is equal to <code>-1</code>.</li>\r\n\t<li>The board&nbsp;square with number <code>1</code> has no snake or ladder.</li>\r\n\t<li>The board square with number <code>N*N</code> has no snake or ladder.</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u5728\u4e00\u5757 N x N \u7684\u68cb\u76d8&nbsp;<code>board</code>&nbsp;\u4e0a\uff0c<strong>\u4ece\u68cb\u76d8\u7684\u5de6\u4e0b\u89d2\u5f00\u59cb</strong>\uff0c\u6bcf\u4e00\u884c\u4ea4\u66ff\u65b9\u5411\uff0c\u6309\u4ece&nbsp;<code>1</code> \u5230 <code>N*N</code>&nbsp;\u7684\u6570\u5b57\u7ed9\u65b9\u683c\u7f16\u53f7\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e00\u5757 6 x 6 \u5927\u5c0f\u7684\u68cb\u76d8\uff0c\u53ef\u4ee5\u7f16\u53f7\u5982\u4e0b\uff1a</p>\n\n<pre><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/31/snakes.png\" style=\"height: 200px; width: 254px;\">\n</pre>\n\n<p>\u73a9\u5bb6\u4ece\u68cb\u76d8\u4e0a\u7684\u65b9\u683c&nbsp;<code>1</code> \uff08\u603b\u662f\u5728\u6700\u540e\u4e00\u884c\u3001\u7b2c\u4e00\u5217\uff09\u5f00\u59cb\u51fa\u53d1\u3002</p>\n\n<p>\u6bcf\u4e00\u6b21\u4ece\u65b9\u683c&nbsp;<code>x</code>&nbsp;\u8d77\u59cb\u7684\u79fb\u52a8\u90fd\u7531\u4ee5\u4e0b\u90e8\u5206\u7ec4\u6210\uff1a</p>\n\n<ul>\n\t<li>\u4f60\u9009\u62e9\u4e00\u4e2a\u76ee\u6807\u65b9\u5757 <code>S</code>\uff0c\u5b83\u7684\u7f16\u53f7\u662f <code>x+1</code>\uff0c<code>x+2</code>\uff0c<code>x+3</code>\uff0c<code>x+4</code>\uff0c<code>x+5</code>\uff0c\u6216\u8005 <code>x+6</code>\uff0c\u53ea\u8981\u8fd9\u4e2a\u6570\u5b57&nbsp;<code>&lt;= N*N</code>\u3002</li>\n\t<li>\u5982\u679c <code>S</code> \u6709\u4e00\u4e2a\u86c7\u6216\u68af\u5b50\uff0c\u4f60\u5c31\u79fb\u52a8\u5230\u90a3\u4e2a\u86c7\u6216\u68af\u5b50\u7684\u76ee\u7684\u5730\u3002\u5426\u5219\uff0c\u4f60\u4f1a\u79fb\u52a8\u5230 <code>S</code>\u3002&nbsp;</li>\n</ul>\n\n<p>\u5728 <code>r</code> \u884c <code>c</code> \u5217\u4e0a\u7684\u65b9\u683c\u91cc\u6709 &ldquo;\u86c7&rdquo; \u6216 &ldquo;\u68af\u5b50&rdquo;\uff1b\u5982\u679c <code>board[r][c] != -1</code>\uff0c\u90a3\u4e2a\u86c7\u6216\u68af\u5b50\u7684\u76ee\u7684\u5730\u5c06\u4f1a\u662f <code>board[r][c]</code>\u3002</p>\n\n<p>\u6ce8\u610f\uff0c\u4f60\u6bcf\u6b21\u79fb\u52a8\u6700\u591a\u53ea\u80fd\u722c\u8fc7\u86c7\u6216\u68af\u5b50\u4e00\u6b21\uff1a\u5c31\u7b97\u76ee\u7684\u5730\u662f\u53e6\u4e00\u6761\u86c7\u6216\u68af\u5b50\u7684\u8d77\u70b9\uff0c\u4f60\u4e5f\u4e0d\u4f1a\u7ee7\u7eed\u79fb\u52a8\u3002</p>\n\n<p>\u8fd4\u56de\u8fbe\u5230\u65b9\u683c N*N \u6240\u9700\u7684\u6700\u5c11\u79fb\u52a8\u6b21\u6570\uff0c\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u5219\u8fd4\u56de <code>-1</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[\n[-1,-1,-1,-1,-1,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,35,-1,-1,13,-1],\n[-1,-1,-1,-1,-1,-1],\n[-1,15,-1,-1,-1,-1]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\n\u9996\u5148\uff0c\u4ece\u65b9\u683c 1 [\u7b2c 5 \u884c\uff0c\u7b2c 0 \u5217] \u5f00\u59cb\u3002\n\u4f60\u51b3\u5b9a\u79fb\u52a8\u5230\u65b9\u683c 2\uff0c\u5e76\u5fc5\u987b\u722c\u8fc7\u68af\u5b50\u79fb\u52a8\u5230\u5230\u65b9\u683c 15\u3002\n\u7136\u540e\u4f60\u51b3\u5b9a\u79fb\u52a8\u5230\u65b9\u683c 17 [\u7b2c 3 \u884c\uff0c\u7b2c 5 \u5217]\uff0c\u5fc5\u987b\u722c\u8fc7\u86c7\u5230\u65b9\u683c 13\u3002\n\u7136\u540e\u4f60\u51b3\u5b9a\u79fb\u52a8\u5230\u65b9\u683c 14\uff0c\u4e14\u5fc5\u987b\u901a\u8fc7\u68af\u5b50\u79fb\u52a8\u5230\u65b9\u683c 35\u3002\n\u7136\u540e\u4f60\u51b3\u5b9a\u79fb\u52a8\u5230\u65b9\u683c 36, \u6e38\u620f\u7ed3\u675f\u3002\n\u53ef\u4ee5\u8bc1\u660e\u4f60\u9700\u8981\u81f3\u5c11 4 \u6b21\u79fb\u52a8\u624d\u80fd\u5230\u8fbe\u7b2c N*N \u4e2a\u65b9\u683c\uff0c\u6240\u4ee5\u7b54\u6848\u662f 4\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= board.length = board[0].length&nbsp;&lt;= 20</code></li>\n\t<li><code>board[i][j]</code>&nbsp;\u4ecb\u4e8e&nbsp;<code>1</code>&nbsp;\u548c&nbsp;<code>N*N</code>&nbsp;\u4e4b\u95f4\u6216\u8005\u7b49\u4e8e&nbsp;<code>-1</code>\u3002</li>\n\t<li>\u7f16\u53f7\u4e3a&nbsp;<code>1</code>&nbsp;\u7684\u65b9\u683c\u4e0a\u6ca1\u6709\u86c7\u6216\u68af\u5b50\u3002</li>\n\t<li>\u7f16\u53f7\u4e3a&nbsp;<code>N*N</code>&nbsp;\u7684\u65b9\u683c\u4e0a\u6ca1\u6709\u86c7\u6216\u68af\u5b50\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "leetId": "909",
        "link": "snakes-and-ladders",
        "title": "Snakes and Ladders",
        "is_locked": "Normal",
        "titleZh": "\u86c7\u68af\u68cb",
        "frequency": "22.2%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of integers, for each integer <code>A[i]</code> we need to choose <strong>either&nbsp;<code>x = -K</code>&nbsp;or <code>x = K</code></strong>, and add <code>x</code> to <code>A[i] <strong>(only once)</strong></code>.</p>\r\n\r\n<p>After this process, we have some array <code>B</code>.</p>\r\n\r\n<p>Return the smallest possible difference between the maximum value of <code>B</code>&nbsp;and the minimum value of <code>B</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1]</span>, K = <span id=\"example-input-1-2\">0</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">0</span>\r\n<span><strong>Explanation</strong>: B = [1]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[0,10]</span>, K = <span id=\"example-input-2-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6\r\n</span><span><strong>Explanation</strong>: B = [2,8]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[1,3,6]</span>, K = <span id=\"example-input-3-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<span><strong>Explanation</strong>: B = [4,6,3]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= K &lt;= 10000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u6574\u6570 <code>A[i]</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9<strong>&nbsp;<code>x = -K</code>&nbsp;\u6216\u662f&nbsp;<code>x = K</code></strong>\uff0c\u5e76\u5c06&nbsp;<code>x</code>&nbsp;\u52a0\u5230&nbsp;<code>A[i]</code>&nbsp;\u4e2d\u3002</p>\n\n<p>\u5728\u6b64\u8fc7\u7a0b\u4e4b\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e00\u4e9b\u6570\u7ec4&nbsp;<code>B</code>\u3002</p>\n\n<p>\u8fd4\u56de <code>B</code>&nbsp;\u7684\u6700\u5927\u503c\u548c <code>B</code>&nbsp;\u7684\u6700\u5c0f\u503c\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u7684\u6700\u5c0f\u5dee\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1], K = 0\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>B = [1]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [0,10], K = 2\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>B = [2,8]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,3,6], K = 3\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>B = [4,6,3]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\n\t<li><code>0 &lt;= K &lt;= 10000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "910",
        "link": "smallest-range-ii",
        "title": "Smallest Range II",
        "is_locked": "Normal",
        "titleZh": "\u6700\u5c0f\u5dee\u503c II",
        "frequency": "19.5%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>In an election, the <code>i</code>-th&nbsp;vote was cast for <code>persons[i]</code> at time <code>times[i]</code>.</p>\r\n\r\n<p>Now, we would like to implement the following query function: <code>TopVotedCandidate.q(int t)</code> will return the number of the person that was leading the election at time <code>t</code>.&nbsp;&nbsp;</p>\r\n\r\n<p>Votes cast at time <code>t</code> will count towards our query.&nbsp; In the case of a tie, the most recent vote (among tied candidates) wins.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;TopVotedCandidate&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;]</span>, <span id=\"example-input-1-2\">[[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,0,1,1,0,0,1]</span>\r\n<strong>Explanation: </strong>\r\nAt time 3, the votes are [0], and 0 is leading.\r\nAt time 12, the votes are [0,1,1], and 1 is leading.\r\nAt time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\r\nThis continues for 3 more queries at time 15, 24, and 8.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= persons.length = times.length &lt;= 5000</code></li>\r\n\t<li><code>0 &lt;= persons[i] &lt;= persons.length</code></li>\r\n\t<li><code>times</code>&nbsp;is a strictly increasing array with all elements in <code>[0, 10^9]</code>.</li>\r\n\t<li><code>TopVotedCandidate.q</code> is called at most <code>10000</code> times per test case.</li>\r\n\t<li><code>TopVotedCandidate.q(int t)</code> is always called with <code>t &gt;= times[0]</code>.</li>\r\n</ol>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5728\u9009\u4e3e\u4e2d\uff0c\u7b2c&nbsp;<code>i</code>&nbsp;\u5f20\u7968\u662f\u5728\u65f6\u95f4\u4e3a&nbsp;<code>times[i]</code>&nbsp;\u65f6\u6295\u7ed9&nbsp;<code>persons[i]</code>&nbsp;\u7684\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u60f3\u8981\u5b9e\u73b0\u4e0b\u9762\u7684\u67e5\u8be2\u51fd\u6570\uff1a <code>TopVotedCandidate.q(int t)</code> \u5c06\u8fd4\u56de\u5728&nbsp;<code>t</code> \u65f6\u523b\u4e3b\u5bfc\u9009\u4e3e\u7684\u5019\u9009\u4eba\u7684\u7f16\u53f7\u3002</p>\n\n<p>\u5728&nbsp;<code>t</code> \u65f6\u523b\u6295\u51fa\u7684\u9009\u7968\u4e5f\u5c06\u88ab\u8ba1\u5165\u6211\u4eec\u7684\u67e5\u8be2\u4e4b\u4e2d\u3002\u5728\u5e73\u5c40\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u8fd1\u83b7\u5f97\u6295\u7968\u7684\u5019\u9009\u4eba\u5c06\u4f1a\u83b7\u80dc\u3002</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;TopVotedCandidate&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;,&quot;q&quot;], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,0,1,1,0,0,1]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u65f6\u95f4\u4e3a 3\uff0c\u7968\u6570\u5206\u5e03\u60c5\u51b5\u662f [0]\uff0c\u7f16\u53f7\u4e3a 0 \u7684\u5019\u9009\u4eba\u9886\u5148\u3002\n\u65f6\u95f4\u4e3a 12\uff0c\u7968\u6570\u5206\u5e03\u60c5\u51b5\u662f [0,1,1]\uff0c\u7f16\u53f7\u4e3a 1 \u7684\u5019\u9009\u4eba\u9886\u5148\u3002\n\u65f6\u95f4\u4e3a 25\uff0c\u7968\u6570\u5206\u5e03\u60c5\u51b5\u662f [0,1,1,0,0,1]\uff0c\u7f16\u53f7\u4e3a 1 \u7684\u5019\u9009\u4eba\u9886\u5148\uff08\u56e0\u4e3a\u6700\u8fd1\u7684\u6295\u7968\u7ed3\u679c\u662f\u5e73\u5c40\uff09\u3002\n\u5728\u65f6\u95f4 15\u300124 \u548c 8 \u5904\u7ee7\u7eed\u6267\u884c 3 \u4e2a\u67e5\u8be2\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= persons.length = times.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= persons[i] &lt;= persons.length</code></li>\n\t<li><code>times</code>&nbsp;\u662f\u4e25\u683c\u9012\u589e\u7684\u6570\u7ec4\uff0c\u6240\u6709\u5143\u7d20\u90fd\u5728&nbsp;<code>[0, 10^9]</code>&nbsp;\u8303\u56f4\u4e2d\u3002</li>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6700\u591a\u8c03\u7528&nbsp;<code>10000</code>&nbsp;\u6b21&nbsp;<code>TopVotedCandidate.q</code>\u3002</li>\n\t<li><code>TopVotedCandidate.q(int t)</code>&nbsp;\u88ab\u8c03\u7528\u65f6\u603b\u662f\u6ee1\u8db3&nbsp;<code>t &gt;= times[0]</code>\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "leetId": "911",
        "link": "online-election",
        "title": "Online Election",
        "is_locked": "Normal",
        "titleZh": "\u5728\u7ebf\u9009\u4e3e",
        "frequency": "34.0%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>A game on an <strong>undirected</strong> graph is played by two players, Mouse and Cat, who alternate turns.</p>\r\n\r\n<p>The graph is given as follows: <code>graph[a]</code> is a list of all nodes <code>b</code> such that <code>ab</code> is an edge of the graph.</p>\r\n\r\n<p>Mouse starts at node 1 and goes first, Cat starts at node 2 and goes second, and there is a Hole at node 0.</p>\r\n\r\n<p>During each player&#39;s turn, they <strong>must</strong> travel along one&nbsp;edge of the graph that meets where they are.&nbsp; For example, if the Mouse is at node <code>1</code>, it <strong>must</strong> travel to any node in <code>graph[1]</code>.</p>\r\n\r\n<p>Additionally, it is not allowed for the Cat to travel to the Hole (node 0.)</p>\r\n\r\n<p>Then, the game can end in 3 ways:</p>\r\n\r\n<ul>\r\n\t<li>If ever the Cat occupies the same node as the Mouse, the Cat wins.</li>\r\n\t<li>If ever the Mouse reaches the Hole, the Mouse wins.</li>\r\n\t<li>If ever a position is repeated (ie.&nbsp;the players are in the same position as a previous turn, and&nbsp;it is the same player&#39;s turn to move), the game is a draw.</li>\r\n</ul>\r\n\r\n<p>Given a <code>graph</code>, and assuming both players play optimally, return <code>1</code>&nbsp;if the game is won by Mouse, <code>2</code>&nbsp;if the game is won by Cat, and <code>0</code>&nbsp;if the game is a draw.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">0\r\n<strong>Explanation:</strong>\r\n</span>4---3---1\r\n|&nbsp; &nbsp;|\r\n2---5\r\n&nbsp;\\&nbsp;/\r\n&nbsp; 0\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>3 &lt;= graph.length &lt;= 50</code></li>\r\n\t<li>It is guaranteed that <code>graph[1]</code> is non-empty.</li>\r\n\t<li>It is guaranteed that <code>graph[2]</code> contains a non-zero element.&nbsp;</li>\r\n</ol>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u4e24\u4e2a\u73a9\u5bb6\u5206\u522b\u626e\u6f14\u732b\uff08Cat\uff09\u548c\u8001\u9f20\uff08Mouse\uff09\u5728<strong>\u65e0\u5411</strong>\u56fe\u4e0a\u8fdb\u884c\u6e38\u620f\uff0c\u4ed6\u4eec\u8f6e\u6d41\u884c\u52a8\u3002</p>\n\n<p>\u8be5\u56fe\u6309\u4e0b\u8ff0\u89c4\u5219\u7ed9\u51fa\uff1a<code>graph[a]</code>&nbsp;\u662f\u6240\u6709\u7ed3\u70b9 <code>b</code> \u7684\u5217\u8868\uff0c\u4f7f\u5f97 <code>ab</code> \u662f\u56fe\u7684\u4e00\u6761\u8fb9\u3002</p>\n\n<p>\u8001\u9f20\u4ece\u7ed3\u70b9 1 \u5f00\u59cb\u5e76\u7387\u5148\u51fa\u53d1\uff0c\u732b\u4ece\u7ed3\u70b9 2 \u5f00\u59cb\u4e14\u968f\u540e\u51fa\u53d1\uff0c\u5728\u7ed3\u70b9 0 \u5904\u6709\u4e00\u4e2a\u6d1e\u3002</p>\n\n<p>\u5728\u6bcf\u4e2a\u73a9\u5bb6\u7684\u56de\u5408\u4e2d\uff0c\u4ed6\u4eec<strong>\u5fc5\u987b</strong>\u6cbf\u7740\u4e0e\u4ed6\u4eec\u6240\u5728\u4f4d\u7f6e\u76f8\u543b\u5408\u7684\u56fe\u7684\u4e00\u6761\u8fb9\u79fb\u52a8\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8001\u9f20\u4f4d\u4e8e\u7ed3\u70b9 <code>1</code>\uff0c\u90a3\u4e48\u5b83\u53ea\u80fd\u79fb\u52a8\u5230&nbsp;<code>graph[1]</code>&nbsp;\u4e2d\u7684\uff08\u4efb\u4f55\uff09\u7ed3\u70b9\u53bb\u3002</p>\n\n<p>\u6b64\u5916\uff0c\u732b\u65e0\u6cd5\u79fb\u52a8\u5230\u6d1e\uff08\u7ed3\u70b9 0\uff09\u91cc\u3002</p>\n\n<p>\u7136\u540e\uff0c\u6e38\u620f\u5728\u51fa\u73b0\u4ee5\u4e0b\u4e09\u79cd\u60c5\u5f62\u4e4b\u4e00\u65f6\u7ed3\u675f\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c\u732b\u548c\u8001\u9f20\u5360\u636e\u76f8\u540c\u7684\u7ed3\u70b9\uff0c\u732b\u83b7\u80dc\u3002</li>\n\t<li>\u5982\u679c\u8001\u9f20\u8eb2\u5165\u6d1e\u91cc\uff0c\u8001\u9f20\u83b7\u80dc\u3002</li>\n\t<li>\u5982\u679c\u67d0\u4e00\u4f4d\u7f6e\u91cd\u590d\u51fa\u73b0\uff08\u5373\uff0c\u73a9\u5bb6\u4eec\u7684\u4f4d\u7f6e\u548c\u79fb\u52a8\u987a\u5e8f\u90fd\u4e0e\u4e0a\u4e00\u4e2a\u56de\u5408\u76f8\u540c\uff09\uff0c\u6e38\u620f\u5e73\u5c40\u3002</li>\n</ul>\n\n<p>\u7ed9\u5b9a&nbsp;<code>graph</code>\uff0c\u5e76\u5047\u8bbe\u4e24\u4e2a\u73a9\u5bb6\u90fd\u4ee5\u6700\u4f73\u72b6\u6001\u53c2\u4e0e\u6e38\u620f\uff0c\u5982\u679c\u8001\u9f20\u83b7\u80dc\uff0c\u5219\u8fd4\u56de&nbsp;<code>1</code>\uff1b\u5982\u679c\u732b\u83b7\u80dc\uff0c\u5219\u8fd4\u56de <code>2</code>\uff1b\u5982\u679c\u5e73\u5c40\uff0c\u5219\u8fd4\u56de <code>0</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\n4---3---1\n|&nbsp; &nbsp;|\n2---5\n&nbsp;\\&nbsp;/\n&nbsp; 0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= graph.length &lt;= 200</code></li>\n\t<li>\u4fdd\u8bc1 <code>graph[1]</code>&nbsp;\u975e\u7a7a\u3002</li>\n\t<li>\u4fdd\u8bc1&nbsp;<code>graph[2]</code>&nbsp;\u5305\u542b\u975e\u96f6\u5143\u7d20\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Minimax",
                "link": "minimax",
                "tagZh": "\u6781\u5c0f\u5316\u6781\u5927"
            }
        ],
        "leetId": "913",
        "link": "cat-and-mouse",
        "title": "Cat and Mouse",
        "is_locked": "Normal",
        "titleZh": "\u732b\u548c\u8001\u9f20",
        "frequency": "21.1%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>In a deck of cards, each card has an integer written on it.</p>\r\n\r\n<p>Return <code>true</code> if and only if you can choose&nbsp;<code>X &gt;= 2</code> such that&nbsp;it is possible to split the entire deck&nbsp;into 1 or more groups of cards, where:</p>\r\n\r\n<ul>\r\n\t<li>Each group has exactly <code>X</code> cards.</li>\r\n\t<li>All the cards in each group have the same integer.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3,4,4,3,2,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true\r\n<strong>Explanation</strong>: Possible partition [1,1],[2,2],[3,3],[4,4]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,1,1,2,2,2,3,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false\r\n</span><span id=\"example-output-1\"><strong>Explanation</strong>: No possible partition.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">false\r\n</span><span id=\"example-output-1\"><strong>Explanation</strong>: No possible partition.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[1,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">true\r\n</span><span id=\"example-output-1\"><strong>Explanation</strong>: Possible partition [1,1]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">[1,1,2,2,2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">true\r\n</span><span id=\"example-output-1\"><strong>Explanation</strong>: Possible partition [1,1],[2,2],[2,2]</span>\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><br />\r\n<strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= deck.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= deck[i] &lt;&nbsp;10000</code></li>\r\n</ol>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u526f\u724c\uff0c\u6bcf\u5f20\u724c\u4e0a\u90fd\u5199\u7740\u4e00\u4e2a\u6574\u6570\u3002</p>\n\n<p>\u6b64\u65f6\uff0c\u4f60\u9700\u8981\u9009\u5b9a\u4e00\u4e2a\u6570\u5b57 <code>X</code>\uff0c\u4f7f\u6211\u4eec\u53ef\u4ee5\u5c06\u6574\u526f\u724c\u6309\u4e0b\u8ff0\u89c4\u5219\u5206\u6210 1 \u7ec4\u6216\u66f4\u591a\u7ec4\uff1a</p>\n\n<ul>\n\t<li>\u6bcf\u7ec4\u90fd\u6709&nbsp;<code>X</code>&nbsp;\u5f20\u724c\u3002</li>\n\t<li>\u7ec4\u5185\u6240\u6709\u7684\u724c\u4e0a\u90fd\u5199\u7740\u76f8\u540c\u7684\u6574\u6570\u3002</li>\n</ul>\n\n<p>\u4ec5\u5f53\u4f60\u53ef\u9009\u7684 <code>X &gt;= 2</code> \u65f6\u8fd4\u56de&nbsp;<code>true</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,4,4,3,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u53ef\u884c\u7684\u5206\u7ec4\u662f [1,1]\uff0c[2,2]\uff0c[3,3]\uff0c[4,4]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,1,2,2,2,3,3]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u6ca1\u6709\u6ee1\u8db3\u8981\u6c42\u7684\u5206\u7ec4\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u6ca1\u6709\u6ee1\u8db3\u8981\u6c42\u7684\u5206\u7ec4\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u53ef\u884c\u7684\u5206\u7ec4\u662f [1,1]\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,2,2,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u53ef\u884c\u7684\u5206\u7ec4\u662f [1,1]\uff0c[2,2]\uff0c[2,2]\n</pre>\n\n<p><br>\n<strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= deck.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= deck[i] &lt;&nbsp;10000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "914",
        "link": "x-of-a-kind-in-a-deck-of-cards",
        "title": "X of a Kind in a Deck of Cards",
        "is_locked": "Normal",
        "titleZh": "\u5361\u724c\u5206\u7ec4",
        "frequency": "30.3%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code>, partition it&nbsp;into two (contiguous) subarrays&nbsp;<code>left</code>&nbsp;and <code>right</code>&nbsp;so that:</p>\r\n\r\n<ul>\r\n\t<li>Every element in <code>left</code>&nbsp;is less than or equal to every element in <code>right</code>.</li>\r\n\t<li><code>left</code> and <code>right</code> are non-empty.</li>\r\n\t<li><code>left</code>&nbsp;has the smallest possible size.</li>\r\n</ul>\r\n\r\n<p>Return the <strong>length</strong> of <code>left</code> after such a partitioning.&nbsp; It is guaranteed that such a partitioning exists.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[5,0,3,8,6]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation: </strong>left = [5,0,3], right = [8,6]\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,1,1,0,6,12]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">4</span>\r\n<strong>Explanation: </strong>left = [1,1,1,0], right = [6,12]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= A.length&nbsp;&lt;= 30000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10^6</code></li>\r\n\t<li>It is guaranteed there is at least one way to partition <code>A</code> as described.</li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u5c06\u5176\u5212\u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\uff08\u6ca1\u6709\u516c\u5171\u5143\u7d20\uff09\u7684\u8fde\u7eed\u5b50\u6570\u7ec4&nbsp;<code>left</code>&nbsp;\u548c&nbsp;<code>right</code>\uff0c&nbsp;\u4f7f\u5f97\uff1a</p>\n\n<ul>\n\t<li><code>left</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e&nbsp;<code>right</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002</li>\n\t<li><code>left</code> \u548c&nbsp;<code>right</code>&nbsp;\u90fd\u662f\u975e\u7a7a\u7684\u3002</li>\n\t<li><code>left</code>&nbsp;\u8981\u5c3d\u53ef\u80fd\u5c0f\u3002</li>\n</ul>\n\n<p>\u5728\u5b8c\u6210\u8fd9\u6837\u7684\u5206\u7ec4\u540e\u8fd4\u56de&nbsp;<code>left</code>&nbsp;\u7684<strong>\u957f\u5ea6</strong>\u3002\u53ef\u4ee5\u4fdd\u8bc1\u5b58\u5728\u8fd9\u6837\u7684\u5212\u5206\u65b9\u6cd5\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,0,3,8,6]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>left = [5,0,3]\uff0cright = [8,6]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,1,0,6,12]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>left = [1,1,1,0]\uff0cright = [6,12]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= A.length&nbsp;&lt;= 30000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^6</code></li>\n\t<li>\u53ef\u4ee5\u4fdd\u8bc1\u81f3\u5c11\u6709\u4e00\u79cd\u65b9\u6cd5\u80fd\u591f\u6309\u9898\u76ee\u6240\u63cf\u8ff0\u7684\u90a3\u6837\u5bf9 <code>A</code> \u8fdb\u884c\u5212\u5206\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "915",
        "link": "partition-array-into-disjoint-intervals",
        "title": "Partition Array into Disjoint Intervals",
        "is_locked": "Normal",
        "titleZh": "\u5206\u5272\u6570\u7ec4",
        "frequency": "38.4%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>We are given two arrays <code>A</code> and <code>B</code> of words.&nbsp; Each word is a string of lowercase letters.</p>\r\n\r\n<p>Now, say that&nbsp;word <code>b</code> is a subset of word <code>a</code><strong>&nbsp;</strong>if every letter in <code>b</code> occurs in <code>a</code>, <strong>including multiplicity</strong>.&nbsp; For example, <code>&quot;wrr&quot;</code> is a subset of <code>&quot;warrior&quot;</code>, but is not a subset of <code>&quot;world&quot;</code>.</p>\r\n\r\n<p>Now say a word <code>a</code> from <code>A</code> is <em>universal</em> if for every <code>b</code> in <code>B</code>, <code>b</code>&nbsp;is a subset of <code>a</code>.&nbsp;</p>\r\n\r\n<p>Return a list of all universal words in <code>A</code>.&nbsp; You can return the words in any order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id=\"example-input-1-2\">[&quot;e&quot;,&quot;o&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id=\"example-input-2-2\">[&quot;l&quot;,&quot;e&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[&quot;apple&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id=\"example-input-3-2\">[&quot;e&quot;,&quot;oo&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[&quot;facebook&quot;,&quot;google&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-4-1\">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id=\"example-input-4-2\">[&quot;lo&quot;,&quot;eo&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">[&quot;google&quot;,&quot;leetcode&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-5-1\">[&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]</span>, B = <span id=\"example-input-5-2\">[&quot;ec&quot;,&quot;oc&quot;,&quot;ceo&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">[&quot;facebook&quot;,&quot;leetcode&quot;]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length, B.length &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= A[i].length, B[i].length&nbsp;&lt;= 10</code></li>\r\n\t<li><code>A[i]</code> and <code>B[i]</code> consist only of lowercase letters.</li>\r\n\t<li>All words in <code>A[i]</code> are unique: there isn&#39;t <code>i != j</code> with <code>A[i] == A[j]</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u7ed9\u51fa\u4e24\u4e2a\u5355\u8bcd\u6570\u7ec4 <code>A</code>&nbsp;\u548c&nbsp;<code>B</code>\u3002\u6bcf\u4e2a\u5355\u8bcd\u90fd\u662f\u4e00\u4e32\u5c0f\u5199\u5b57\u6bcd\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u5982\u679c&nbsp;<code>b</code> \u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u90fd\u51fa\u73b0\u5728 <code>a</code> \u4e2d\uff0c<strong>\u5305\u62ec\u91cd\u590d\u51fa\u73b0\u7684\u5b57\u6bcd</strong>\uff0c\u90a3\u4e48\u79f0\u5355\u8bcd <code>b</code> \u662f\u5355\u8bcd <code>a</code> \u7684\u5b50\u96c6\u3002 \u4f8b\u5982\uff0c&ldquo;wrr&rdquo; \u662f &ldquo;warrior&rdquo; \u7684\u5b50\u96c6\uff0c\u4f46\u4e0d\u662f &ldquo;world&rdquo; \u7684\u5b50\u96c6\u3002</p>\n\n<p>\u5982\u679c\u5bf9 <code>B</code> \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5355\u8bcd&nbsp;<code>b</code>\uff0c<code>b</code> \u90fd\u662f <code>a</code> \u7684\u5b50\u96c6\uff0c\u90a3\u4e48\u6211\u4eec\u79f0&nbsp;<code>A</code> \u4e2d\u7684\u5355\u8bcd <code>a</code> \u662f<em>\u901a\u7528\u7684</em>\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u4ee5\u5217\u8868\u5f62\u5f0f\u8fd4\u56de&nbsp;<code>A</code> \u4e2d\u6240\u6709\u7684\u901a\u7528\u5355\u8bcd\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;e&quot;,&quot;o&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;l&quot;,&quot;e&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;apple&quot;,&quot;google&quot;,&quot;leetcode&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;e&quot;,&quot;oo&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;facebook&quot;,&quot;google&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;lo&quot;,&quot;eo&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;google&quot;,&quot;leetcode&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [&quot;amazon&quot;,&quot;apple&quot;,&quot;facebook&quot;,&quot;google&quot;,&quot;leetcode&quot;], B = [&quot;ec&quot;,&quot;oc&quot;,&quot;ceo&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;facebook&quot;,&quot;leetcode&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length, B.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= A[i].length, B[i].length&nbsp;&lt;= 10</code></li>\n\t<li><code>A[i]</code>&nbsp;\u548c&nbsp;<code>B[i]</code>&nbsp;\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n\t<li><code>A[i]</code>&nbsp;\u4e2d\u6240\u6709\u7684\u5355\u8bcd\u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u5b58\u5728&nbsp;<code>i != j</code>&nbsp;\u4f7f\u5f97&nbsp;<code>A[i] == A[j]</code>\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "leetId": "916",
        "link": "word-subsets",
        "title": "Word Subsets",
        "is_locked": "Normal",
        "titleZh": "\u5355\u8bcd\u5b50\u96c6",
        "frequency": "33.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a string <code>S</code>, return the &quot;reversed&quot; string where all characters that are not a letter&nbsp;stay in the same place, and all letters reverse their positions.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<ol>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;ab-cd&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;dc-ba&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;a-bC-dEf-ghIj&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;j-Ih-gfE-dCba&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;Test1ng-Leet=code-Q!&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">&quot;Qedo1ct-eeLg=ntse-T!&quot;</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>S.length &lt;= 100</code></li>\r\n\t<li><code>33 &lt;= S[i].ASCIIcode &lt;= 122</code>&nbsp;</li>\r\n\t<li><code>S</code> doesn&#39;t contain <code>\\</code> or <code>&quot;</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<code>S</code>\uff0c\u8fd4\u56de&nbsp;&ldquo;\u53cd\u8f6c\u540e\u7684&rdquo;&nbsp;\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u4e0d\u662f\u5b57\u6bcd\u7684\u5b57\u7b26\u90fd\u4fdd\u7559\u5728\u539f\u5730\uff0c\u800c\u6240\u6709\u5b57\u6bcd\u7684\u4f4d\u7f6e\u53d1\u751f\u53cd\u8f6c\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;ab-cd&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;dc-ba&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;a-bC-dEf-ghIj&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;j-Ih-gfE-dCba&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;Test1ng-Leet=code-Q!&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;Qedo1ct-eeLg=ntse-T!&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>S.length &lt;= 100</code></li>\n\t<li><code>33 &lt;= S[i].ASCIIcode &lt;= 122</code>&nbsp;</li>\n\t<li><code>S</code> \u4e2d\u4e0d\u5305\u542b&nbsp;<code>\\</code> or <code>&quot;</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "leetId": "917",
        "link": "reverse-only-letters",
        "title": "Reverse Only Letters",
        "is_locked": "Normal",
        "titleZh": "\u4ec5\u4ec5\u53cd\u8f6c\u5b57\u6bcd",
        "frequency": "46.1%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given a <strong>circular&nbsp;array</strong>&nbsp;<strong>C</strong> of integers represented by&nbsp;<code>A</code>, find the maximum possible sum of a non-empty subarray of <strong>C</strong>.</p>\r\n\r\n<p>Here, a&nbsp;<em>circular&nbsp;array</em> means the end of the array connects to the beginning of the array.&nbsp; (Formally, <code>C[i] = A[i]</code> when <code>0 &lt;= i &lt; A.length</code>, and <code>C[i+A.length] = C[i]</code>&nbsp;when&nbsp;<code>i &gt;= 0</code>.)</p>\r\n\r\n<p>Also, a subarray may only include each element of the fixed buffer <code>A</code> at most once.&nbsp; (Formally, for a subarray <code>C[i], C[i+1], ..., C[j]</code>, there does not exist <code>i &lt;= k1, k2 &lt;= j</code> with <code>k1 % A.length&nbsp;= k2 % A.length</code>.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,-2,3,-2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3\r\n<strong>Explanation: </strong>Subarray [3] has maximum sum 3</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[5,-3,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">10\r\n</span><span id=\"example-output-3\"><strong>Explanation:</strong>&nbsp;</span><span id=\"example-output-1\">Subarray [5,5] has maximum sum </span><span>5 + 5 = 10</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[3,-1,2,-1]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">4\r\n<strong>Explanation:</strong>&nbsp;</span><span id=\"example-output-1\">Subarray [2,-1,3] has maximum sum </span><span>2 + (-1) + 3 = 4</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[3,-2,2,-3]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">3\r\n</span><span id=\"example-output-3\"><strong>Explanation:</strong>&nbsp;</span><span id=\"example-output-1\">Subarray [3] and [3,-2,2] both have maximum sum </span><span>3</span>\r\n</pre>\r\n\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">[-2,-3,-1]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">-1\r\n</span><span id=\"example-output-3\"><strong>Explanation:</strong>&nbsp;</span><span id=\"example-output-1\">Subarray [-1] has maximum sum -1</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ol>\r\n\t<li><code>-30000 &lt;= A[i] &lt;= 30000</code></li>\r\n\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u6570\u7ec4 <code>A</code>&nbsp;\u8868\u793a\u7684<strong>\u73af\u5f62\u6570\u7ec4 <code>C</code></strong>\uff0c\u6c42 <code><strong>C</strong></code>&nbsp;\u7684\u975e\u7a7a\u5b50\u6570\u7ec4\u7684\u6700\u5927\u53ef\u80fd\u548c\u3002</p>\n\n<p>\u5728\u6b64\u5904\uff0c<em>\u73af\u5f62\u6570\u7ec4</em>\u610f\u5473\u7740\u6570\u7ec4\u7684\u672b\u7aef\u5c06\u4f1a\u4e0e\u5f00\u5934\u76f8\u8fde\u5448\u73af\u72b6\u3002\uff08\u5f62\u5f0f\u4e0a\uff0c\u5f53<code>0 &lt;= i &lt; A.length</code>&nbsp;\u65f6&nbsp;<code>C[i] = A[i]</code>\uff0c\u800c\u5f53&nbsp;<code>i &gt;= 0</code>&nbsp;\u65f6&nbsp;<code>C[i+A.length] = C[i]</code>\uff09</p>\n\n<p>\u6b64\u5916\uff0c\u5b50\u6570\u7ec4\u6700\u591a\u53ea\u80fd\u5305\u542b\u56fa\u5b9a\u7f13\u51b2\u533a <code>A</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e00\u6b21\u3002\uff08\u5f62\u5f0f\u4e0a\uff0c\u5bf9\u4e8e\u5b50\u6570\u7ec4&nbsp;<code>C[i], C[i+1], ..., C[j]</code>\uff0c\u4e0d\u5b58\u5728&nbsp;<code>i &lt;= k1, k2 &lt;= j</code>&nbsp;\u5176\u4e2d&nbsp;<code>k1 % A.length&nbsp;= k2 % A.length</code>\uff09</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,-2,3,-2]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u5b50\u6570\u7ec4 [3] \u5f97\u5230\u6700\u5927\u548c 3\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,-3,5]\n<strong>\u8f93\u51fa\uff1a</strong>10\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u5b50\u6570\u7ec4 [5,5] \u5f97\u5230\u6700\u5927\u548c 5 + 5 = 10\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,-1,2,-1]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u5b50\u6570\u7ec4 [2,-1,3] \u5f97\u5230\u6700\u5927\u548c 2 + (-1) + 3 = 4\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,-2,2,-3]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u5b50\u6570\u7ec4 [3] \u548c [3,-2,2] \u90fd\u53ef\u4ee5\u5f97\u5230\u6700\u5927\u548c 3\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[-2,-3,-1]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u5b50\u6570\u7ec4 [-1] \u5f97\u5230\u6700\u5927\u548c -1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>-30000 &lt;= A[i] &lt;= 30000</code></li>\n\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "918",
        "link": "maximum-sum-circular-subarray",
        "title": "Maximum Sum Circular Subarray",
        "is_locked": "Normal",
        "titleZh": "\u73af\u5f62\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c",
        "frequency": "23.8%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>A <em>complete</em> binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.</p>\r\n\r\n<p>Write a data structure&nbsp;<code>CBTInserter</code>&nbsp;that is initialized with a complete binary tree and supports the following operations:</p>\r\n\r\n<ul>\r\n\t<li><code>CBTInserter(TreeNode root)</code> initializes the data structure on a given tree&nbsp;with head node <code>root</code>;</li>\r\n\t<li><code>CBTInserter.insert(int v)</code> will insert a <code>TreeNode</code>&nbsp;into the tree with value <code>node.val =&nbsp;v</code>&nbsp;so that the tree remains complete, <strong>and returns the value of the parent of the inserted <code>TreeNode</code></strong>;</li>\r\n\t<li><code>CBTInserter.get_root()</code> will return the head node of the tree.</li>\r\n</ul>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-1-1\">[&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;get_root&quot;]</span>, inputs = <span id=\"example-input-1-2\">[[[1]],[2],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,1,[1,2]]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-2-1\">[&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;insert&quot;,&quot;get_root&quot;]</span>, inputs = <span id=\"example-input-2-2\">[[[1,2,3,4,5,6]],[7],[8],[]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,3,4,[1,2,3,4,5,6,7,8]]</span></pre>\r\n</div>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The initial given tree is complete and contains between <code>1</code> and <code>1000</code> nodes.</li>\r\n\t<li><code>CBTInserter.insert</code> is called at most <code>10000</code> times per test case.</li>\r\n\t<li>Every value of a given or inserted node is between <code>0</code> and <code>5000</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<div>&nbsp;</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5b8c\u5168\u4e8c\u53c9\u6811\u662f\u6bcf\u4e00\u5c42\uff08\u9664\u6700\u540e\u4e00\u5c42\u5916\uff09\u90fd\u662f\u5b8c\u5168\u586b\u5145\uff08\u5373\uff0c\u7ed3\u70b9\u6570\u8fbe\u5230\u6700\u5927\uff09\u7684\uff0c\u5e76\u4e14\u6240\u6709\u7684\u7ed3\u70b9\u90fd\u5c3d\u53ef\u80fd\u5730\u96c6\u4e2d\u5728\u5de6\u4fa7\u3002</p>\n\n<p>\u8bbe\u8ba1\u4e00\u4e2a\u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u521d\u59cb\u5316\u7684\u6570\u636e\u7ed3\u6784&nbsp;<code>CBTInserter</code>\uff0c\u5b83\u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li><code>CBTInserter(TreeNode root)</code>&nbsp;\u4f7f\u7528\u5934\u7ed3\u70b9\u4e3a&nbsp;<code>root</code>&nbsp;\u7684\u7ed9\u5b9a\u6811\u521d\u59cb\u5316\u8be5\u6570\u636e\u7ed3\u6784\uff1b</li>\n\t<li><code>CBTInserter.insert(int v)</code> \u5c06&nbsp;<code>TreeNode</code>&nbsp;\u63d2\u5165\u5230\u5b58\u5728\u503c\u4e3a&nbsp;<code>node.val =&nbsp;v</code>&nbsp; \u7684\u6811\u4e2d\u4ee5\u4f7f\u5176\u4fdd\u6301\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u72b6\u6001\uff0c<strong>\u5e76\u8fd4\u56de\u63d2\u5165\u7684 <code>TreeNode</code>&nbsp;\u7684\u7236\u7ed3\u70b9\u7684\u503c</strong>\uff1b</li>\n\t<li><code>CBTInserter.get_root()</code> \u5c06\u8fd4\u56de\u6811\u7684\u5934\u7ed3\u70b9\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>inputs = [&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;get_root&quot;], inputs = [[[1]],[2],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,1,[1,2]]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>inputs = [&quot;CBTInserter&quot;,&quot;insert&quot;,&quot;insert&quot;,&quot;get_root&quot;], inputs = [[[1,2,3,4,5,6]],[7],[8],[]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,3,4,[1,2,3,4,5,6,7,8]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6700\u521d\u7ed9\u5b9a\u7684\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u4e14\u5305\u542b&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>1000</code>&nbsp;\u4e2a\u7ed3\u70b9\u3002</li>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6700\u591a\u8c03\u7528&nbsp;<code>CBTInserter.insert</code>&nbsp; \u64cd\u4f5c&nbsp;<code>10000</code>&nbsp;\u6b21\u3002</li>\n\t<li>\u7ed9\u5b9a\u7ed3\u70b9\u6216\u63d2\u5165\u7ed3\u70b9\u7684\u6bcf\u4e2a\u503c\u90fd\u5728&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>5000</code>&nbsp;\u4e4b\u95f4\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "leetId": "919",
        "link": "complete-binary-tree-inserter",
        "title": "Complete Binary Tree Inserter",
        "is_locked": "Normal",
        "titleZh": "\u5b8c\u5168\u4e8c\u53c9\u6811\u63d2\u5165\u5668",
        "frequency": "41.7%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Your music player contains <code>N</code>&nbsp;different songs and she wants to listen to <code>L</code><strong> </strong>(not necessarily different) songs during your trip. &nbsp;You&nbsp;create&nbsp;a playlist so&nbsp;that:</p>\r\n\r\n<ul>\r\n\t<li>Every song is played at least once</li>\r\n\t<li>A song can only be played again only if&nbsp;<code>K</code>&nbsp;other songs have been played</li>\r\n</ul>\r\n\r\n<p>Return the number of possible playlists.&nbsp; <strong>As the answer can be very large, return it modulo <code>10^9 + 7</code></strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-1-1\">3</span>, L = <span id=\"example-input-1-2\">3</span>, K = <span id=\"example-input-1-3\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">6\r\n<strong>Explanation</strong>: </span><span>There are 6 possible playlists. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-2-1\">2</span>, L = <span id=\"example-input-2-2\">3</span>, K = <span id=\"example-input-2-3\">0</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6\r\n</span><span id=\"example-output-1\"><strong>Explanation</strong>: </span><span>There are 6 possible playlists. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-3-1\">2</span>, L = <span id=\"example-input-3-2\">3</span>, K = <span id=\"example-input-3-3\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2\r\n<strong>Explanation</strong>: </span><span>There are 2 possible playlists. [1, 2, 1], [2, 1, 2]</span>\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= K &lt; N &lt;= L &lt;= 100</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u4f60\u7684\u97f3\u4e50\u64ad\u653e\u5668\u91cc\u6709&nbsp;<code>N</code>&nbsp;\u9996\u4e0d\u540c\u7684\u6b4c\uff0c\u5728\u65c5\u9014\u4e2d\uff0c\u4f60\u7684\u65c5\u4f34\u60f3\u8981\u542c <code>L</code>&nbsp;\u9996\u6b4c\uff08\u4e0d\u4e00\u5b9a\u4e0d\u540c\uff0c\u5373\uff0c\u5141\u8bb8\u6b4c\u66f2\u91cd\u590d\uff09\u3002\u8bf7\u4f60\u4e3a\u5979\u6309\u5982\u4e0b\u89c4\u5219\u521b\u5efa\u4e00\u4e2a\u64ad\u653e\u5217\u8868\uff1a</p>\n\n<ul>\n\t<li>\u6bcf\u9996\u6b4c\u81f3\u5c11\u64ad\u653e\u4e00\u6b21\u3002</li>\n\t<li>\u4e00\u9996\u6b4c\u53ea\u6709\u5728\u5176\u4ed6 <code>K</code> \u9996\u6b4c\u64ad\u653e\u5b8c\u4e4b\u540e\u624d\u80fd\u518d\u6b21\u64ad\u653e\u3002</li>\n</ul>\n\n<p>\u8fd4\u56de\u53ef\u4ee5\u6ee1\u8db3\u8981\u6c42\u7684\u64ad\u653e\u5217\u8868\u7684\u6570\u91cf\u3002<strong>\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u8bf7\u8fd4\u56de\u5b83\u6a21&nbsp;<code>10^9 + 7</code>&nbsp;\u7684\u7ed3\u679c\u3002</strong></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 3, L = 3, K = 1\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u6709 6 \u79cd\u53ef\u80fd\u7684\u64ad\u653e\u5217\u8868\u3002[1, 2, 3]\uff0c[1, 3, 2]\uff0c[2, 1, 3]\uff0c[2, 3, 1]\uff0c[3, 1, 2]\uff0c[3, 2, 1].\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 2, L = 3, K = 0\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u6709 6 \u79cd\u53ef\u80fd\u7684\u64ad\u653e\u5217\u8868\u3002[1, 1, 2]\uff0c[1, 2, 1]\uff0c[2, 1, 1]\uff0c[2, 2, 1]\uff0c[2, 1, 2]\uff0c[1, 2, 2]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 2, L = 3, K = 1\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u6709 2 \u79cd\u53ef\u80fd\u7684\u64ad\u653e\u5217\u8868\u3002[1, 2, 1]\uff0c[2, 1, 2]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= K &lt; N &lt;= L &lt;= 100</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "920",
        "link": "number-of-music-playlists",
        "title": "Number of Music Playlists",
        "is_locked": "Normal",
        "titleZh": "\u64ad\u653e\u5217\u8868\u7684\u6570\u91cf",
        "frequency": "34.7%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>Given a string&nbsp;<code>S</code> of <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code> parentheses, we add the minimum number of parentheses ( <code>&#39;(&#39;</code> or <code>&#39;)&#39;</code>, and in any positions ) so that the resulting parentheses string is valid.</p>\r\n\r\n<p>Formally, a parentheses string is valid if and only if:</p>\r\n\r\n<ul>\r\n\t<li>It is the empty string, or</li>\r\n\t<li>It can be written as <code>AB</code>&nbsp;(<code>A</code> concatenated with <code>B</code>), where <code>A</code> and <code>B</code> are valid strings, or</li>\r\n\t<li>It can be written as <code>(A)</code>, where <code>A</code> is a valid string.</li>\r\n</ul>\r\n\r\n<p>Given a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;())&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;(((&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;()&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">&quot;()))((&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">4</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>S.length &lt;= 1000</code></li>\r\n\t<li><code>S</code> only consists of <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code> characters.</li>\r\n</ol>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531&nbsp;<code>&#39;(&#39;</code>&nbsp;\u548c&nbsp;<code>&#39;)&#39;</code>&nbsp;\u62ec\u53f7\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 <code>S</code>\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u6700\u5c11\u7684\u62ec\u53f7\uff08 <code>&#39;(&#39;</code>&nbsp;\u6216\u662f&nbsp;<code>&#39;)&#39;</code>\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u4f4d\u7f6e\uff09\uff0c\u4ee5\u4f7f\u5f97\u5230\u7684\u62ec\u53f7\u5b57\u7b26\u4e32\u6709\u6548\u3002</p>\n\n<p>\u4ece\u5f62\u5f0f\u4e0a\u8bb2\uff0c\u53ea\u6709\u6ee1\u8db3\u4e0b\u9762\u51e0\u70b9\u4e4b\u4e00\uff0c\u62ec\u53f7\u5b57\u7b26\u4e32\u624d\u662f\u6709\u6548\u7684\uff1a</p>\n\n<ul>\n\t<li>\u5b83\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u6216\u8005</li>\n\t<li>\u5b83\u53ef\u4ee5\u88ab\u5199\u6210&nbsp;<code>AB</code>&nbsp;\uff08<code>A</code>&nbsp;\u4e0e&nbsp;<code>B</code>&nbsp;\u8fde\u63a5\uff09, \u5176\u4e2d&nbsp;<code>A</code> \u548c&nbsp;<code>B</code>&nbsp;\u90fd\u662f\u6709\u6548\u5b57\u7b26\u4e32\uff0c\u6216\u8005</li>\n\t<li>\u5b83\u53ef\u4ee5\u88ab\u5199\u4f5c&nbsp;<code>(A)</code>\uff0c\u5176\u4e2d&nbsp;<code>A</code>&nbsp;\u662f\u6709\u6548\u5b57\u7b26\u4e32\u3002</li>\n</ul>\n\n<p>\u7ed9\u5b9a\u4e00\u4e2a\u62ec\u53f7\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u4e3a\u4f7f\u7ed3\u679c\u5b57\u7b26\u4e32\u6709\u6548\u800c\u5fc5\u987b\u6dfb\u52a0\u7684\u6700\u5c11\u62ec\u53f7\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;())&quot;\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;(((&quot;\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;()&quot;\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;()))((&quot;\n<strong>\u8f93\u51fa\uff1a</strong>4</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>S.length &lt;= 1000</code></li>\n\t<li><code>S</code> \u53ea\u5305\u542b&nbsp;<code>&#39;(&#39;</code> \u548c&nbsp;<code>&#39;)&#39;</code>&nbsp;\u5b57\u7b26\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "leetId": "921",
        "link": "minimum-add-to-make-parentheses-valid",
        "title": "Minimum Add to Make Parentheses Valid",
        "is_locked": "Normal",
        "titleZh": "\u4f7f\u62ec\u53f7\u6709\u6548\u7684\u6700\u5c11\u6dfb\u52a0",
        "frequency": "64.9%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code>&nbsp;of non-negative integers, half of the integers in A are odd, and half of the integers are even.</p>\r\n\r\n<p>Sort the array so that whenever <code>A[i]</code> is odd, <code>i</code> is odd; and whenever <code>A[i]</code> is even, <code>i</code> is even.</p>\r\n\r\n<p>You may return any answer array that satisfies this condition.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[4,2,5,7]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[4,5,2,7]</span>\r\n<strong>Explanation: </strong>[4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= A.length &lt;= 20000</code></li>\r\n\t<li><code>A.length % 2 == 0</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 1000</code></li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c A \u4e2d\u4e00\u534a\u6574\u6570\u662f\u5947\u6570\uff0c\u4e00\u534a\u6574\u6570\u662f\u5076\u6570\u3002</p>\n\n<p>\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee5\u4fbf\u5f53&nbsp;<code>A[i]</code> \u4e3a\u5947\u6570\u65f6\uff0c<code>i</code>&nbsp;\u4e5f\u662f\u5947\u6570\uff1b\u5f53&nbsp;<code>A[i]</code>&nbsp;\u4e3a\u5076\u6570\u65f6\uff0c <code>i</code> \u4e5f\u662f\u5076\u6570\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u8fd4\u56de\u4efb\u4f55\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u6570\u7ec4\u4f5c\u4e3a\u7b54\u6848\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[4,2,5,7]\n<strong>\u8f93\u51fa\uff1a</strong>[4,5,2,7]\n<strong>\u89e3\u91ca\uff1a</strong>[4,7,2,5]\uff0c[2,5,4,7]\uff0c[2,7,4,5] \u4e5f\u4f1a\u88ab\u63a5\u53d7\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>A.length % 2 == 0</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 1000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "922",
        "link": "sort-array-by-parity-ii",
        "title": "Sort Array By Parity II",
        "is_locked": "Normal",
        "titleZh": "\u6309\u5947\u5076\u6392\u5e8f\u6570\u7ec4 II",
        "frequency": "64.9%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given an integer array <code>A</code>, and an integer <code>target</code>, return the number of&nbsp;tuples&nbsp;<code>i, j, k</code>&nbsp; such that <code>i &lt; j &lt; k</code> and&nbsp;<code>A[i] + A[j] + A[k] == target</code>.</p>\r\n\r\n<p><strong>As the answer can be very large, return it modulo&nbsp;<code>10^9 + 7</code></strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,1,2,2,3,3,4,4,5,5]</span>, target = <span id=\"example-input-1-2\">8</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">20</span>\r\n<strong>Explanation: </strong>\r\nEnumerating by the values (A[i], A[j], A[k]):\r\n(1, 2, 5) occurs 8 times;\r\n(1, 3, 4) occurs 8 times;\r\n(2, 2, 4) occurs 2 times;\r\n(2, 3, 3) occurs 2 times.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[1,1,2,2,2,2]</span>, target = <span id=\"example-input-2-2\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">12</span>\r\n<strong>Explanation: </strong>\r\nA[i] = 1, A[j] = A[k] = 2 occurs 12 times:\r\nWe choose one 1 from [1,1] in 2 ways,\r\nand two 2s from [2,2,2,2] in 6 ways.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>3 &lt;= A.length &lt;= 3000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 100</code></li>\r\n\t<li><code>0 &lt;= target &lt;= 300</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6574\u6570&nbsp;<code>target</code>&nbsp;\u4f5c\u4e3a\u76ee\u6807\u503c\uff0c\u8fd4\u56de\u6ee1\u8db3 <code>i &lt; j &lt; k</code> \u4e14&nbsp;<code>A[i] + A[j] + A[k] == target</code>&nbsp;\u7684\u5143\u7ec4&nbsp;<code>i, j, k</code>&nbsp;\u7684\u6570\u91cf\u3002</p>\n\n<p>\u7531\u4e8e\u7ed3\u679c\u4f1a\u975e\u5e38\u5927\uff0c\u8bf7\u8fd4\u56de <code>\u7ed3\u679c\u9664\u4ee5 10^9 + 7 \u7684\u4f59\u6570</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,1,2,2,3,3,4,4,5,5], target = 8\n<strong>\u8f93\u51fa\uff1a</strong>20\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6309\u503c\u679a\u4e3e\uff08A[i]\uff0cA[j]\uff0cA[k]\uff09\uff1a\n(1, 2, 5) \u51fa\u73b0 8 \u6b21\uff1b\n(1, 3, 4) \u51fa\u73b0 8 \u6b21\uff1b\n(2, 2, 4) \u51fa\u73b0 2 \u6b21\uff1b\n(2, 3, 3) \u51fa\u73b0 2 \u6b21\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,1,2,2,2,2], target = 5\n<strong>\u8f93\u51fa\uff1a</strong>12\n<strong>\u89e3\u91ca\uff1a</strong>\nA[i] = 1\uff0cA[j] = A[k] = 2 \u51fa\u73b0 12 \u6b21\uff1a\n\u6211\u4eec\u4ece [1,1] \u4e2d\u9009\u62e9\u4e00\u4e2a 1\uff0c\u6709 2 \u79cd\u60c5\u51b5\uff0c\n\u4ece [2,2,2,2] \u4e2d\u9009\u51fa\u4e24\u4e2a 2\uff0c\u6709 6 \u79cd\u60c5\u51b5\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= A.length &lt;= 3000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= target &lt;= 300</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "leetId": "923",
        "link": "3sum-with-multiplicity",
        "title": "3Sum With Multiplicity",
        "is_locked": "Normal",
        "titleZh": "\u4e09\u6570\u4e4b\u548c\u7684\u591a\u79cd\u53ef\u80fd",
        "frequency": "25.6%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>In a network of nodes, each node <code>i</code> is directly connected to another node <code>j</code> if and only if&nbsp;<code>graph[i][j] = 1</code>.</p>\r\n\r\n<p>Some nodes <code>initial</code> are initially infected by malware.&nbsp; Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.&nbsp; This spread of malware will continue until no more nodes can be infected in this manner.</p>\r\n\r\n<p>Suppose <code>M(initial)</code>&nbsp;is the final number of nodes infected with malware in the entire network, after the spread of malware stops.</p>\r\n\r\n<p>We will&nbsp;remove one node from the initial list.&nbsp; Return the node that if removed, would minimize&nbsp;<code>M(initial)</code>.&nbsp; If multiple nodes could be removed to minimize <code>M(initial)</code>, return such a node with the smallest index.</p>\r\n\r\n<p>Note that if a node was removed from the <code>initial</code>&nbsp;list of infected nodes, it may still be infected later as a result of the malware spread.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>graph = <span id=\"example-input-1-1\">[[1,1,0],[1,1,0],[0,0,1]]</span>, initial = <span id=\"example-input-1-2\">[0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">0</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>graph = <span id=\"example-input-2-1\">[[1,0,0],[0,1,0],[0,0,1]]</span>, initial = <span id=\"example-input-2-2\">[0,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">0</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>graph = <span id=\"example-input-3-1\">[[1,1,1],[1,1,1],[1,1,1]]</span>, initial = <span id=\"example-input-3-2\">[1,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">1</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt; graph.length = graph[0].length &lt;= 300</code></li>\r\n\t<li><code>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</code></li>\r\n\t<li><code>graph[i][i] = 1</code></li>\r\n\t<li><code>1 &lt;= initial.length &lt; graph.length</code></li>\r\n\t<li><code>0 &lt;= initial[i] &lt; graph.length</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u5728\u8282\u70b9\u7f51\u7edc\u4e2d\uff0c\u53ea\u6709\u5f53 <code>graph[i][j] = 1</code>&nbsp;\u65f6\uff0c\u6bcf\u4e2a\u8282\u70b9&nbsp;<code>i</code>&nbsp;\u80fd\u591f\u76f4\u63a5\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u8282\u70b9 <code>j</code>\u3002</p>\n\n<p>\u4e00\u4e9b\u8282\u70b9&nbsp;<code>initial</code>&nbsp;\u6700\u521d\u88ab\u6076\u610f\u8f6f\u4ef6\u611f\u67d3\u3002\u53ea\u8981\u4e24\u4e2a\u8282\u70b9\u76f4\u63a5\u8fde\u63a5\uff0c\u4e14\u5176\u4e2d\u81f3\u5c11\u4e00\u4e2a\u8282\u70b9\u53d7\u5230\u6076\u610f\u8f6f\u4ef6\u7684\u611f\u67d3\uff0c\u90a3\u4e48\u4e24\u4e2a\u8282\u70b9\u90fd\u5c06\u88ab\u6076\u610f\u8f6f\u4ef6\u611f\u67d3\u3002\u8fd9\u79cd\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad\u5c06\u7ee7\u7eed\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u8282\u70b9\u53ef\u4ee5\u88ab\u8fd9\u79cd\u65b9\u5f0f\u611f\u67d3\u3002</p>\n\n<p>\u5047\u8bbe <code>M(initial)</code> \u662f\u5728\u6076\u610f\u8f6f\u4ef6\u505c\u6b62\u4f20\u64ad\u4e4b\u540e\uff0c\u6574\u4e2a\u7f51\u7edc\u4e2d\u611f\u67d3\u6076\u610f\u8f6f\u4ef6\u7684\u6700\u7ec8\u8282\u70b9\u6570\u3002</p>\n\n<p>\u6211\u4eec\u53ef\u4ee5\u4ece\u521d\u59cb\u5217\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u8282\u70b9\u3002\u5982\u679c\u79fb\u9664\u8fd9\u4e00\u8282\u70b9\u5c06\u6700\u5c0f\u5316 <code>M(initial)</code>\uff0c&nbsp;\u5219\u8fd4\u56de\u8be5\u8282\u70b9\u3002\u5982\u679c\u6709\u591a\u4e2a\u8282\u70b9\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u8fd4\u56de\u7d22\u5f15\u6700\u5c0f\u7684\u8282\u70b9\u3002</p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u67d0\u4e2a\u8282\u70b9\u5df2\u4ece\u53d7\u611f\u67d3\u8282\u70b9\u7684\u5217\u8868 <code>initial</code> \u4e2d\u5220\u9664\uff0c\u5b83\u4ee5\u540e\u53ef\u80fd\u4ecd\u7136\u56e0\u6076\u610f\u8f6f\u4ef6\u4f20\u64ad\u800c\u53d7\u5230\u611f\u67d3\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt; graph.length = graph[0].length &lt;= 300</code></li>\n\t<li><code>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</code></li>\n\t<li><code>graph[i][i] = 1</code></li>\n\t<li><code>1 &lt;= initial.length &lt; graph.length</code></li>\n\t<li><code>0 &lt;= initial[i] &lt; graph.length</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            }
        ],
        "leetId": "924",
        "link": "minimize-malware-spread",
        "title": "Minimize Malware Spread",
        "is_locked": "Normal",
        "titleZh": "\u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad",
        "frequency": "37.9%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>Your friend is typing his <code>name</code>&nbsp;into a keyboard.&nbsp; Sometimes, when typing a character <code>c</code>, the key might get <em>long pressed</em>, and the character will be typed 1 or more times.</p>\r\n\r\n<p>You examine the <code>typed</code>&nbsp;characters of the keyboard.&nbsp; Return <code>True</code> if it is possible that it was your friends name, with some characters (possibly none) being long pressed.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>name = <span id=\"example-input-1-1\">&quot;alex&quot;</span>, typed = <span id=\"example-input-1-2\">&quot;aaleex&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation: </strong>'a' and 'e' in 'alex' were long pressed.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>name = <span id=\"example-input-2-1\">&quot;saeed&quot;</span>, typed = <span id=\"example-input-2-2\">&quot;ssaaedd&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n<strong>Explanation: </strong>'e' must have been pressed twice, but it wasn't in the typed output.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>name = <span id=\"example-input-3-1\">&quot;leelee&quot;</span>, typed = <span id=\"example-input-3-2\">&quot;lleeelee&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>name = <span id=\"example-input-4-1\">&quot;laiden&quot;</span>, typed = <span id=\"example-input-4-2\">&quot;laiden&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">true</span>\r\n<strong>Explanation: </strong>It's not necessary to long press any character.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>name.length &lt;= 1000</code></li>\r\n\t<li><code>typed.length &lt;= 1000</code></li>\r\n\t<li>The characters of <code>name</code> and <code>typed</code> are lowercase letters.</li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u4f60\u7684\u670b\u53cb\u6b63\u5728\u4f7f\u7528\u952e\u76d8\u8f93\u5165\u4ed6\u7684\u540d\u5b57&nbsp;<code>name</code>\u3002\u5076\u5c14\uff0c\u5728\u952e\u5165\u5b57\u7b26&nbsp;<code>c</code>&nbsp;\u65f6\uff0c\u6309\u952e\u53ef\u80fd\u4f1a\u88ab<em>\u957f\u6309</em>\uff0c\u800c\u5b57\u7b26\u53ef\u80fd\u88ab\u8f93\u5165 1 \u6b21\u6216\u591a\u6b21\u3002</p>\n\n<p>\u4f60\u5c06\u4f1a\u68c0\u67e5\u952e\u76d8\u8f93\u5165\u7684\u5b57\u7b26&nbsp;<code>typed</code>\u3002\u5982\u679c\u5b83\u5bf9\u5e94\u7684\u53ef\u80fd\u662f\u4f60\u7684\u670b\u53cb\u7684\u540d\u5b57\uff08\u5176\u4e2d\u4e00\u4e9b\u5b57\u7b26\u53ef\u80fd\u88ab\u957f\u6309\uff09\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de&nbsp;<code>True</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>name = &quot;alex&quot;, typed = &quot;aaleex&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>&#39;alex&#39; \u4e2d\u7684 &#39;a&#39; \u548c &#39;e&#39; \u88ab\u957f\u6309\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>name = &quot;saeed&quot;, typed = &quot;ssaaedd&quot;\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>&#39;e&#39; \u4e00\u5b9a\u9700\u8981\u88ab\u952e\u5165\u4e24\u6b21\uff0c\u4f46\u5728 typed \u7684\u8f93\u51fa\u4e2d\u4e0d\u662f\u8fd9\u6837\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>name = &quot;leelee&quot;, typed = &quot;lleeelee&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>name = &quot;laiden&quot;, typed = &quot;laiden&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u957f\u6309\u540d\u5b57\u4e2d\u7684\u5b57\u7b26\u5e76\u4e0d\u662f\u5fc5\u8981\u7684\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>name.length &lt;= 1000</code></li>\n\t<li><code>typed.length &lt;= 1000</code></li>\n\t<li><code>name</code> \u548c&nbsp;<code>typed</code>&nbsp;\u7684\u5b57\u7b26\u90fd\u662f\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "leetId": "925",
        "link": "long-pressed-name",
        "title": "Long Pressed Name",
        "is_locked": "Normal",
        "titleZh": "\u957f\u6309\u952e\u5165",
        "frequency": "40.7%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>A string of <code>&#39;0&#39;</code>s and <code>&#39;1&#39;</code>s is <em>monotone increasing</em> if it consists of some number of <code>&#39;0&#39;</code>s (possibly 0), followed by some number of <code>&#39;1&#39;</code>s (also possibly 0.)</p>\r\n\r\n<p>We are given a string <code>S</code> of <code>&#39;0&#39;</code>s and <code>&#39;1&#39;</code>s, and we may flip any <code>&#39;0&#39;</code> to a <code>&#39;1&#39;</code> or a <code>&#39;1&#39;</code> to a <code>&#39;0&#39;</code>.</p>\r\n\r\n<p>Return the minimum number of flips to make <code>S</code>&nbsp;monotone increasing.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;00110&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>We flip the last digit to get 00111.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;010110&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n<strong>Explanation: </strong>We flip to get 011111, or alternatively 000111.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;00011000&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2</span>\r\n<strong>Explanation: </strong>We flip to get 00000000.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length &lt;= 20000</code></li>\r\n\t<li><code>S</code> only consists of <code>&#39;0&#39;</code> and <code>&#39;1&#39;</code> characters.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u5982\u679c\u4e00\u4e2a\u7531&nbsp;<code>&#39;0&#39;</code> \u548c <code>&#39;1&#39;</code>&nbsp;\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u662f\u4ee5\u4e00\u4e9b <code>&#39;0&#39;</code>\uff08\u53ef\u80fd\u6ca1\u6709 <code>&#39;0&#39;</code>\uff09\u540e\u9762\u8ddf\u7740\u4e00\u4e9b <code>&#39;1&#39;</code>\uff08\u4e5f\u53ef\u80fd\u6ca1\u6709 <code>&#39;1&#39;</code>\uff09\u7684\u5f62\u5f0f\u7ec4\u6210\u7684\uff0c\u90a3\u4e48\u8be5\u5b57\u7b26\u4e32\u662f<em>\u5355\u8c03\u9012\u589e</em>\u7684\u3002</p>\n\n<p>\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u7531\u5b57\u7b26 <code>&#39;0&#39;</code> \u548c <code>&#39;1&#39;</code>&nbsp;\u7ec4\u6210\u7684\u5b57\u7b26\u4e32&nbsp;<code>S</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4efb\u4f55&nbsp;<code>&#39;0&#39;</code> \u7ffb\u8f6c\u4e3a&nbsp;<code>&#39;1&#39;</code>&nbsp;\u6216\u8005\u5c06&nbsp;<code>&#39;1&#39;</code>&nbsp;\u7ffb\u8f6c\u4e3a&nbsp;<code>&#39;0&#39;</code>\u3002</p>\n\n<p>\u8fd4\u56de\u4f7f <code>S</code> \u5355\u8c03\u9012\u589e\u7684\u6700\u5c0f\u7ffb\u8f6c\u6b21\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;00110&quot;\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u7ffb\u8f6c\u6700\u540e\u4e00\u4f4d\u5f97\u5230 00111.\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;010110&quot;\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u7ffb\u8f6c\u5f97\u5230 011111\uff0c\u6216\u8005\u662f 000111\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;00011000&quot;\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u7ffb\u8f6c\u5f97\u5230 00000000\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 20000</code></li>\n\t<li><code>S</code> \u4e2d\u53ea\u5305\u542b\u5b57\u7b26&nbsp;<code>&#39;0&#39;</code>&nbsp;\u548c&nbsp;<code>&#39;1&#39;</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "926",
        "link": "flip-string-to-monotone-increasing",
        "title": "Flip String to Monotone Increasing",
        "is_locked": "Normal",
        "titleZh": "\u5c06\u5b57\u7b26\u4e32\u7ffb\u8f6c\u5230\u5355\u8c03\u9012\u589e",
        "frequency": "37.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of <code>0</code>s and <code>1</code>s, divide the array into 3 non-empty parts such that all of these parts represent the same binary value.</p>\r\n\r\n<p>If it is possible, return <strong>any</strong> <code>[i, j]</code>&nbsp;with <code>i+1 &lt; j</code>, such that:</p>\r\n\r\n<ul>\r\n\t<li><code>A[0], A[1], ..., A[i]</code> is the first part;</li>\r\n\t<li><code>A[i+1], A[i+2], ..., A[j-1]</code> is the second part, and</li>\r\n\t<li><code>A[j], A[j+1], ..., A[A.length - 1]</code> is the third part.</li>\r\n\t<li>All three parts have equal binary value.</li>\r\n</ul>\r\n\r\n<p>If it is not possible, return <code>[-1, -1]</code>.</p>\r\n\r\n<p>Note that the entire part is used when considering what binary value it represents.&nbsp; For example, <code>[1,1,0]</code>&nbsp;represents <code>6</code>&nbsp;in decimal,&nbsp;not <code>3</code>.&nbsp; Also, leading zeros are allowed, so&nbsp;<code>[0,1,1]</code> and <code>[1,1]</code> represent the same value.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,0,1,0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,3]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,1,0,1,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[-1,-1]</span></pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>3 &lt;= A.length &lt;= 30000</code></li>\r\n\t<li><code>A[i] == 0</code>&nbsp;or <code>A[i] == 1</code></li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 <code>0</code> \u548c <code>1</code> \u7ec4\u6210\u7684\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u5c06\u6570\u7ec4\u5206\u6210 3&nbsp;\u4e2a\u975e\u7a7a\u7684\u90e8\u5206\uff0c\u4f7f\u5f97\u6240\u6709\u8fd9\u4e9b\u90e8\u5206\u8868\u793a\u76f8\u540c\u7684\u4e8c\u8fdb\u5236\u503c\u3002</p>\n\n<p>\u5982\u679c\u53ef\u4ee5\u505a\u5230\uff0c\u8bf7\u8fd4\u56de<strong>\u4efb\u4f55</strong>&nbsp;<code>[i, j]</code>\uff0c\u5176\u4e2d <code>i+1 &lt; j</code>\uff0c\u8fd9\u6837\u4e00\u6765\uff1a</p>\n\n<ul>\n\t<li><code>A[0], A[1], ..., A[i]</code>&nbsp;\u7ec4\u6210\u7b2c\u4e00\u90e8\u5206\uff1b</li>\n\t<li><code>A[i+1], A[i+2], ..., A[j-1]</code>&nbsp;\u4f5c\u4e3a\u7b2c\u4e8c\u90e8\u5206\uff1b</li>\n\t<li><code>A[j], A[j+1], ..., A[A.length - 1]</code> \u662f\u7b2c\u4e09\u90e8\u5206\u3002</li>\n\t<li>\u8fd9\u4e09\u4e2a\u90e8\u5206\u6240\u8868\u793a\u7684\u4e8c\u8fdb\u5236\u503c\u76f8\u7b49\u3002</li>\n</ul>\n\n<p>\u5982\u679c\u65e0\u6cd5\u505a\u5230\uff0c\u5c31\u8fd4\u56de&nbsp;<code>[-1, -1]</code>\u3002</p>\n\n<p>\u6ce8\u610f\uff0c\u5728\u8003\u8651\u6bcf\u4e2a\u90e8\u5206\u6240\u8868\u793a\u7684\u4e8c\u8fdb\u5236\u65f6\uff0c\u5e94\u5f53\u5c06\u5176\u770b\u4f5c\u4e00\u4e2a\u6574\u4f53\u3002\u4f8b\u5982\uff0c<code>[1,1,0]</code>&nbsp;\u8868\u793a\u5341\u8fdb\u5236\u4e2d\u7684&nbsp;<code>6</code>\uff0c\u800c\u4e0d\u4f1a\u662f&nbsp;<code>3</code>\u3002\u6b64\u5916\uff0c\u524d\u5bfc\u96f6\u4e5f\u662f\u88ab\u5141\u8bb8\u7684\uff0c\u6240\u4ee5&nbsp;<code>[0,1,1]</code> \u548c&nbsp;<code>[1,1]</code>&nbsp;\u8868\u793a\u76f8\u540c\u7684\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,0,1,0,1]\n<strong>\u8f93\u51fa\uff1a</strong>[0,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u51fa\uff1a</strong>[1,1,0,1,1]\n<strong>\u8f93\u51fa\uff1a</strong>[-1,-1]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= A.length &lt;= 30000</code></li>\n\t<li><code>A[i] == 0</code>&nbsp;\u6216&nbsp;<code>A[i] == 1</code></li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "leetId": "927",
        "link": "three-equal-parts",
        "title": "Three Equal Parts",
        "is_locked": "Normal",
        "titleZh": "\u4e09\u7b49\u5206",
        "frequency": "27.3%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>(This problem is the same as <em>Minimize Malware Spread</em>, with the differences bolded.)</p>\r\n\r\n<p>In a network of nodes, each node <code>i</code> is directly connected to another node <code>j</code> if and only if&nbsp;<code>graph[i][j] = 1</code>.</p>\r\n\r\n<p>Some nodes <code>initial</code> are initially infected by malware.&nbsp; Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.&nbsp; This spread of malware will continue until no more nodes can be infected in this manner.</p>\r\n\r\n<p>Suppose <code>M(initial)</code>&nbsp;is the final number of nodes infected with malware in the entire network, after the spread of malware stops.</p>\r\n\r\n<p>We will&nbsp;remove one node from the initial list, <strong>completely removing it and any connections from this node to any other node</strong>.&nbsp; Return the node that if removed, would minimize&nbsp;<code>M(initial)</code>.&nbsp; If multiple nodes could be removed to minimize <code>M(initial)</code>, return such a node with the smallest index.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>graph = <span id=\"example-input-1-1\">[[1,1,0],[1,1,0],[0,0,1]]</span>, initial = <span id=\"example-input-1-2\">[0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">0</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>graph = <span id=\"example-input-2-1\">[[1,1,0],[1,1,1],[0,1,1]]</span>, initial = <span id=\"example-input-2-2\">[0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>graph = <span id=\"example-input-3-1\">[[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]]</span>, initial = <span id=\"example-input-3-2\">[0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">1</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt; graph.length = graph[0].length &lt;= 300</code></li>\r\n\t<li><code>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</code></li>\r\n\t<li><code>graph[i][i] = 1</code></li>\r\n\t<li><code>1 &lt;= initial.length &lt; graph.length</code></li>\r\n\t<li><code>0 &lt;= initial[i] &lt; graph.length</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>(\u8fd9\u4e2a\u95ee\u9898\u4e0e&nbsp;<em>\u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad&nbsp;</em>\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u540c\u4e4b\u5904\u7528\u7c97\u4f53\u8868\u793a\u3002)</p>\n\n<p>\u5728\u8282\u70b9\u7f51\u7edc\u4e2d\uff0c\u53ea\u6709\u5f53&nbsp;<code>graph[i][j] = 1</code>&nbsp;\u65f6\uff0c\u6bcf\u4e2a\u8282\u70b9&nbsp;<code>i</code>&nbsp;\u80fd\u591f\u76f4\u63a5\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u8282\u70b9&nbsp;<code>j</code>\u3002</p>\n\n<p>\u4e00\u4e9b\u8282\u70b9&nbsp;<code>initial</code>&nbsp;\u6700\u521d\u88ab\u6076\u610f\u8f6f\u4ef6\u611f\u67d3\u3002\u53ea\u8981\u4e24\u4e2a\u8282\u70b9\u76f4\u63a5\u8fde\u63a5\uff0c\u4e14\u5176\u4e2d\u81f3\u5c11\u4e00\u4e2a\u8282\u70b9\u53d7\u5230\u6076\u610f\u8f6f\u4ef6\u7684\u611f\u67d3\uff0c\u90a3\u4e48\u4e24\u4e2a\u8282\u70b9\u90fd\u5c06\u88ab\u6076\u610f\u8f6f\u4ef6\u611f\u67d3\u3002\u8fd9\u79cd\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad\u5c06\u7ee7\u7eed\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u591a\u7684\u8282\u70b9\u53ef\u4ee5\u88ab\u8fd9\u79cd\u65b9\u5f0f\u611f\u67d3\u3002</p>\n\n<p>\u5047\u8bbe&nbsp;<code>M(initial)</code>&nbsp;\u662f\u5728\u6076\u610f\u8f6f\u4ef6\u505c\u6b62\u4f20\u64ad\u4e4b\u540e\uff0c\u6574\u4e2a\u7f51\u7edc\u4e2d\u611f\u67d3\u6076\u610f\u8f6f\u4ef6\u7684\u6700\u7ec8\u8282\u70b9\u6570\u3002</p>\n\n<p>\u6211\u4eec\u53ef\u4ee5\u4ece\u521d\u59cb\u5217\u8868\u4e2d\u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff0c<strong>\u5e76\u5b8c\u5168\u79fb\u9664\u8be5\u8282\u70b9\u4ee5\u53ca\u4ece\u8be5\u8282\u70b9\u5230\u4efb\u4f55\u5176\u4ed6\u8282\u70b9\u7684\u4efb\u4f55\u8fde\u63a5\u3002</strong>\u5982\u679c\u79fb\u9664\u8fd9\u4e00\u8282\u70b9\u5c06\u6700\u5c0f\u5316&nbsp;<code>M(initial)</code>\uff0c&nbsp;\u5219\u8fd4\u56de\u8be5\u8282\u70b9\u3002\u5982\u679c\u6709\u591a\u4e2a\u8282\u70b9\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u8fd4\u56de\u7d22\u5f15\u6700\u5c0f\u7684\u8282\u70b9\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u51fa\uff1a</strong>graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n<strong>\u8f93\u5165\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt; graph.length = graph[0].length &lt;= 300</code></li>\n\t<li><code>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</code></li>\n\t<li><code>graph[i][i] = 1</code></li>\n\t<li><code>1 &lt;= initial.length &lt; graph.length</code></li>\n\t<li><code>0 &lt;= initial[i] &lt; graph.length</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "leetId": "928",
        "link": "minimize-malware-spread-ii",
        "title": "Minimize Malware Spread II",
        "is_locked": "Normal",
        "titleZh": "\u5c3d\u91cf\u51cf\u5c11\u6076\u610f\u8f6f\u4ef6\u7684\u4f20\u64ad II",
        "frequency": "42.7%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>Every email consists of a local name and a domain name, separated by the @ sign.</p>\r\n\r\n<p>For example, in <code>alice@leetcode.com</code>,&nbsp;<code>alice</code> is the local name, and <code>leetcode.com</code> is the domain name.</p>\r\n\r\n<p>Besides lowercase letters, these emails may contain <code>&#39;.&#39;</code>s or <code>&#39;+&#39;</code>s.</p>\r\n\r\n<p>If you add periods (<code>&#39;.&#39;</code>) between some characters in the <strong>local name</strong> part of an email address, mail sent there will be forwarded to the same address without dots in the local name.&nbsp; For example, <code>&quot;alice.z@leetcode.com&quot;</code> and <code>&quot;alicez@leetcode.com&quot;</code> forward to the same email address.&nbsp; (Note that this rule does not apply for domain names.)</p>\r\n\r\n<p>If you add a plus (<code>&#39;+&#39;</code>) in the <strong>local name</strong>, everything after the first plus sign will be&nbsp;<strong>ignored</strong>. This allows certain emails to be filtered, for example&nbsp;<code>m.y+name@email.com</code>&nbsp;will be forwarded to&nbsp;<code>my@email.com</code>.&nbsp; (Again, this rule does not apply for domain names.)</p>\r\n\r\n<p>It is possible to use both of these rules at the same time.</p>\r\n\r\n<p>Given a list of <code>emails</code>, we send one email to each address in the list.&nbsp;&nbsp;How many different addresses actually receive mails?&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;test.email+alex@leetcode.com&quot;,&quot;test.e.mail+bob.cathy@leetcode.com&quot;,&quot;testemail+david@lee.tcode.com&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong><span>Explanation:</span></strong><span>&nbsp;&quot;</span><span id=\"example-input-1-1\">testemail@leetcode.com&quot; and &quot;testemail@lee.tcode.com&quot; </span>actually receive mails\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= emails[i].length&nbsp;&lt;= 100</code></li>\r\n\t<li><code>1 &lt;= emails.length &lt;= 100</code></li>\r\n\t<li>Each <code>emails[i]</code> contains exactly one <code>&#39;@&#39;</code> character.</li>\r\n</ul>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u6bcf\u5c01\u7535\u5b50\u90ae\u4ef6\u90fd\u7531\u4e00\u4e2a\u672c\u5730\u540d\u79f0\u548c\u4e00\u4e2a\u57df\u540d\u7ec4\u6210\uff0c\u4ee5 @ \u7b26\u53f7\u5206\u9694\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5728&nbsp;<code>alice@leetcode.com</code>\u4e2d\uff0c&nbsp;<code>alice</code>&nbsp;\u662f\u672c\u5730\u540d\u79f0\uff0c\u800c&nbsp;<code>leetcode.com</code>&nbsp;\u662f\u57df\u540d\u3002</p>\n\n<p>\u9664\u4e86\u5c0f\u5199\u5b57\u6bcd\uff0c\u8fd9\u4e9b\u7535\u5b50\u90ae\u4ef6\u8fd8\u53ef\u80fd\u5305\u542b <code>&#39;.&#39;</code> \u6216 <code>&#39;+&#39;</code>\u3002</p>\n\n<p>\u5982\u679c\u5728\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7684<strong>\u672c\u5730\u540d\u79f0</strong>\u90e8\u5206\u4e2d\u7684\u67d0\u4e9b\u5b57\u7b26\u4e4b\u95f4\u6dfb\u52a0\u53e5\u70b9\uff08<code>&#39;.&#39;</code>\uff09\uff0c\u5219\u53d1\u5f80\u90a3\u91cc\u7684\u90ae\u4ef6\u5c06\u4f1a\u8f6c\u53d1\u5230\u672c\u5730\u540d\u79f0\u4e2d\u6ca1\u6709\u70b9\u7684\u540c\u4e00\u5730\u5740\u3002\u4f8b\u5982\uff0c<code>&quot;alice.z@leetcode.com&rdquo;</code> \u548c <code>&ldquo;alicez@leetcode.com&rdquo;</code>&nbsp;\u4f1a\u8f6c\u53d1\u5230\u540c\u4e00\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002 \uff08\u8bf7\u6ce8\u610f\uff0c\u6b64\u89c4\u5219\u4e0d\u9002\u7528\u4e8e\u57df\u540d\u3002\uff09</p>\n\n<p>\u5982\u679c\u5728<strong>\u672c\u5730\u540d\u79f0</strong>\u4e2d\u6dfb\u52a0\u52a0\u53f7\uff08<code>&#39;+&#39;</code>\uff09\uff0c\u5219\u4f1a\u5ffd\u7565\u7b2c\u4e00\u4e2a\u52a0\u53f7\u540e\u9762\u7684\u6240\u6709\u5185\u5bb9\u3002\u8fd9\u5141\u8bb8\u8fc7\u6ee4\u67d0\u4e9b\u7535\u5b50\u90ae\u4ef6\uff0c\u4f8b\u5982 <code>m.y+name@email.com</code> \u5c06\u8f6c\u53d1\u5230 <code>my@email.com</code>\u3002 \uff08\u540c\u6837\uff0c\u6b64\u89c4\u5219\u4e0d\u9002\u7528\u4e8e\u57df\u540d\u3002\uff09</p>\n\n<p>\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u8fd9\u4e24\u4e2a\u89c4\u5219\u3002</p>\n\n<p>\u7ed9\u5b9a\u7535\u5b50\u90ae\u4ef6\u5217\u8868 <code>emails</code>\uff0c\u6211\u4eec\u4f1a\u5411\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5730\u5740\u53d1\u9001\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u3002\u5b9e\u9645\u6536\u5230\u90ae\u4ef6\u7684\u4e0d\u540c\u5730\u5740\u6709\u591a\u5c11\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;test.email+alex@leetcode.com&quot;,&quot;test.e.mail+bob.cathy@leetcode.com&quot;,&quot;testemail+david@lee.tcode.com&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u5b9e\u9645\u6536\u5230\u90ae\u4ef6\u7684\u662f &quot;testemail@leetcode.com&quot; \u548c &quot;testemail@lee.tcode.com&quot;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= emails[i].length&nbsp;&lt;= 100</code></li>\n\t<li><code>1 &lt;= emails.length &lt;= 100</code></li>\n\t<li>\u6bcf\u5c01 <code>emails[i]</code> \u90fd\u5305\u542b\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a <code>&#39;@&#39;</code> \u5b57\u7b26\u3002</li>\n</ul>\n",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "leetId": "929",
        "link": "unique-email-addresses",
        "title": "Unique Email Addresses",
        "is_locked": "Normal",
        "titleZh": "\u72ec\u7279\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740",
        "frequency": "67.4%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>In an array <code>A</code> of <code>0</code>s and <code>1</code>s, how many <strong>non-empty</strong> subarrays have sum <code>S</code>?</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,0,1,0,1]</span>, S = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n<strong>Explanation: </strong>\r\nThe 4 subarrays are bolded below:\r\n[<strong>1,0,1</strong>,0,1]\r\n[<strong>1,0,1,0</strong>,1]\r\n[1,<strong>0,1,0,1</strong>]\r\n[1,0,<strong>1,0,1</strong>]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>A.length &lt;= 30000</code></li>\r\n\t<li><code>0 &lt;= S &lt;= A.length</code></li>\r\n\t<li><code>A[i]</code>&nbsp;is either <code>0</code>&nbsp;or <code>1</code>.</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u5728\u7531\u82e5\u5e72&nbsp;<code>0</code>&nbsp;\u548c&nbsp;<code>1</code>&nbsp; \u7ec4\u6210\u7684\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u548c\u4e3a <code>S</code>&nbsp;\u7684<strong>\u975e\u7a7a</strong>\u5b50\u6570\u7ec4\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,0,1,0,1], S = 2\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5982\u4e0b\u9762\u9ed1\u4f53\u6240\u793a\uff0c\u6709 4 \u4e2a\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u5b50\u6570\u7ec4\uff1a\n[<strong>1,0,1</strong>,0,1]\n[<strong>1,0,1,0</strong>,1]\n[1,<strong>0,1,0,1</strong>]\n[1,0,<strong>1,0,1</strong>]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>A.length &lt;= 30000</code></li>\n\t<li><code>0 &lt;= S &lt;= A.length</code></li>\n\t<li><code>A[i]</code>&nbsp;\u4e3a&nbsp;<code>0</code>&nbsp;\u6216&nbsp;<code>1</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "leetId": "930",
        "link": "binary-subarrays-with-sum",
        "title": "Binary Subarrays With Sum",
        "is_locked": "Normal",
        "titleZh": "\u548c\u76f8\u540c\u7684\u4e8c\u5143\u5b50\u6570\u7ec4",
        "frequency": "29.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a <strong>square</strong> array of integers <code>A</code>, we want the <strong>minimum</strong> sum of a <em>falling path</em> through <code>A</code>.</p>\r\n\r\n<p>A falling path starts at any element in the first row, and chooses one element from each row.&nbsp; The next row&#39;s choice must be in a column that is different from the previous row&#39;s column by at most one.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[1,2,3],[4,5,6],[7,8,9]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">12</span>\r\n<strong>Explanation: </strong>\r\nThe possible falling paths are:\r\n</pre>\r\n\r\n<ul>\r\n\t<li><code>[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]</code></li>\r\n\t<li><code>[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]</code></li>\r\n\t<li><code>[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]</code></li>\r\n</ul>\r\n\r\n<p>The falling path with the smallest sum is <code>[1,4,7]</code>, so the answer is <code>12</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length == A[0].length &lt;= 100</code></li>\r\n\t<li><code>-100 &lt;= A[i][j] &lt;= 100</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a<strong>\u65b9\u5f62</strong>\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u6211\u4eec\u60f3\u8981\u5f97\u5230\u901a\u8fc7 <code>A</code> \u7684<em>\u4e0b\u964d\u8def\u5f84</em>\u7684<strong>\u6700\u5c0f</strong>\u548c\u3002</p>\n\n<p>\u4e0b\u964d\u8def\u5f84\u53ef\u4ee5\u4ece\u7b2c\u4e00\u884c\u4e2d\u7684\u4efb\u4f55\u5143\u7d20\u5f00\u59cb\uff0c\u5e76\u4ece\u6bcf\u4e00\u884c\u4e2d\u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u3002\u5728\u4e0b\u4e00\u884c\u9009\u62e9\u7684\u5143\u7d20\u548c\u5f53\u524d\u884c\u6240\u9009\u5143\u7d20\u6700\u591a\u76f8\u9694\u4e00\u5217\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2,3],[4,5,6],[7,8,9]]\n<strong>\u8f93\u51fa\uff1a</strong>12\n<strong>\u89e3\u91ca\uff1a</strong>\n\u53ef\u80fd\u7684\u4e0b\u964d\u8def\u5f84\u6709\uff1a\n</pre>\n\n<ul>\n\t<li><code>[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]</code></li>\n\t<li><code>[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]</code></li>\n\t<li><code>[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]</code></li>\n</ul>\n\n<p>\u548c\u6700\u5c0f\u7684\u4e0b\u964d\u8def\u5f84\u662f&nbsp;<code>[1,4,7]</code>\uff0c\u6240\u4ee5\u7b54\u6848\u662f&nbsp;<code>12</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length == A[0].length &lt;= 100</code></li>\n\t<li><code>-100 &lt;= A[i][j] &lt;= 100</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "931",
        "link": "minimum-falling-path-sum",
        "title": "Minimum Falling Path Sum",
        "is_locked": "Normal",
        "titleZh": "\u4e0b\u964d\u8def\u5f84\u6700\u5c0f\u548c",
        "frequency": "52.2%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>For some fixed <code>N</code>, an array <code>A</code> is <em>beautiful</em> if it is a permutation of the integers <code>1, 2, ..., N</code>, such that:</p>\r\n\r\n<p>For every <code>i &lt; j</code>, there is <strong>no</strong>&nbsp;<code>k</code> with <code>i &lt; k &lt; j</code>&nbsp;such that <code>A[k] * 2 = A[i] + A[j]</code>.</p>\r\n\r\n<p>Given <code>N</code>, return <strong>any</strong> beautiful array <code>A</code>.&nbsp; (It is guaranteed that one exists.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,1,4,3]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">5</span>\r\n<strong>Output: </strong><span>[3,1,2,5,4]</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 1000</code></li>\r\n</ul>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u5bf9\u4e8e\u67d0\u4e9b\u56fa\u5b9a\u7684&nbsp;<code>N</code>\uff0c\u5982\u679c\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u662f\u6574\u6570&nbsp;<code>1, 2, ..., N</code>&nbsp;\u7ec4\u6210\u7684\u6392\u5217\uff0c\u4f7f\u5f97\uff1a</p>\n\n<p>\u5bf9\u4e8e\u6bcf\u4e2a&nbsp;<code>i &lt; j</code>\uff0c\u90fd<strong>\u4e0d\u5b58\u5728</strong>&nbsp;<code>k</code> \u6ee1\u8db3&nbsp;<code>i &lt; k &lt; j</code>&nbsp;\u4f7f\u5f97&nbsp;<code>A[k] * 2 = A[i] + A[j]</code>\u3002</p>\n\n<p>\u90a3\u4e48\u6570\u7ec4 <code>A</code>&nbsp;\u662f\u6f02\u4eae\u6570\u7ec4\u3002</p>\n\n<p>&nbsp;</p>\n\n<p>\u7ed9\u5b9a&nbsp;<code>N</code>\uff0c\u8fd4\u56de<strong>\u4efb\u610f</strong>\u6f02\u4eae\u6570\u7ec4&nbsp;<code>A</code>\uff08\u4fdd\u8bc1\u5b58\u5728\u4e00\u4e2a\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>4\n<strong>\u8f93\u51fa\uff1a</strong>[2,1,4,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>5\n<strong>\u8f93\u51fa\uff1a</strong>[3,1,2,5,4]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            }
        ],
        "leetId": "932",
        "link": "beautiful-array",
        "title": "Beautiful Array",
        "is_locked": "Normal",
        "titleZh": "\u6f02\u4eae\u6570\u7ec4",
        "frequency": "50.3%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Write a class <code>RecentCounter</code> to count recent requests.</p>\r\n\r\n<p>It has only one method:&nbsp;<code>ping(int t)</code>, where t represents some time in milliseconds.</p>\r\n\r\n<p>Return the number of <code>ping</code>s that have been made from 3000 milliseconds ago until now.</p>\r\n\r\n<p>Any ping with time in <code>[t - 3000, t]</code> will count, including the current ping.</p>\r\n\r\n<p>It is guaranteed that every call to <code>ping</code> uses a strictly larger value of&nbsp;<code>t</code> than before.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-1-1\">[&quot;RecentCounter&quot;,&quot;ping&quot;,&quot;ping&quot;,&quot;ping&quot;,&quot;ping&quot;]</span>, inputs = <span id=\"example-input-1-2\">[[],[1],[100],[3001],[3002]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,1,2,3,3]</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>Each test case will have at most <code>10000</code> calls to <code>ping</code>.</li>\r\n\t<li>Each test case will call&nbsp;<code>ping</code> with strictly increasing values of <code>t</code>.</li>\r\n\t<li>Each call to ping will have <code>1 &lt;= t &lt;= 10^9</code>.</li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>",
        "questionDescriptionZh": "<p>\u5199\u4e00\u4e2a&nbsp;<code>RecentCounter</code>&nbsp;\u7c7b\u6765\u8ba1\u7b97\u6700\u8fd1\u7684\u8bf7\u6c42\u3002</p>\n\n<p>\u5b83\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5\uff1a<code>ping(int t)</code>\uff0c\u5176\u4e2d&nbsp;<code>t</code>&nbsp;\u4ee3\u8868\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u7684\u67d0\u4e2a\u65f6\u95f4\u3002</p>\n\n<p>\u8fd4\u56de\u4ece 3000 \u6beb\u79d2\u524d\u5230\u73b0\u5728\u7684&nbsp;<code>ping</code>&nbsp;\u6570\u3002</p>\n\n<p>\u4efb\u4f55\u5904\u4e8e&nbsp;<code>[t - 3000, t]</code>&nbsp;\u65f6\u95f4\u8303\u56f4\u4e4b\u5185\u7684 <code>ping</code>&nbsp;\u90fd\u5c06\u4f1a\u88ab\u8ba1\u7b97\u5728\u5185\uff0c\u5305\u62ec\u5f53\u524d\uff08\u6307 <code>t</code>&nbsp;\u65f6\u523b\uff09\u7684 <code>ping</code>\u3002</p>\n\n<p>\u4fdd\u8bc1\u6bcf\u6b21\u5bf9 <code>ping</code> \u7684\u8c03\u7528\u90fd\u4f7f\u7528\u6bd4\u4e4b\u524d\u66f4\u5927\u7684 <code>t</code> \u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>inputs = [&quot;RecentCounter&quot;,&quot;ping&quot;,&quot;ping&quot;,&quot;ping&quot;,&quot;ping&quot;], inputs = [[],[1],[100],[3001],[3002]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,1,2,3,3]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6700\u591a\u8c03\u7528&nbsp;<code>10000</code>&nbsp;\u6b21&nbsp;<code>ping</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4f1a\u4f7f\u7528\u4e25\u683c\u9012\u589e\u7684 <code>t</code> \u503c\u6765\u8c03\u7528&nbsp;<code>ping</code>\u3002</li>\n\t<li>\u6bcf\u6b21\u8c03\u7528 <code>ping</code>&nbsp;\u90fd\u6709&nbsp;<code>1 &lt;= t &lt;= 10^9</code>\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Queue",
                "link": "queue",
                "tagZh": "\u961f\u5217"
            }
        ],
        "leetId": "933",
        "link": "number-of-recent-calls",
        "title": "Number of Recent Calls",
        "is_locked": "Normal",
        "titleZh": "\u6700\u8fd1\u7684\u8bf7\u6c42\u6b21\u6570",
        "frequency": "65.4%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>In a given 2D binary array <code>A</code>, there are two islands.&nbsp; (An island is a 4-directionally connected group of&nbsp;<code>1</code>s not connected to any other 1s.)</p>\r\n\r\n<p>Now, we may change <code>0</code>s to <code>1</code>s so as to connect the two islands together to form 1 island.</p>\r\n\r\n<p>Return the smallest number of <code>0</code>s that must be flipped.&nbsp; (It is guaranteed that the answer is at least 1.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[0,1],[1,0]]</span>\r\n<strong>Output: </strong>1\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[0,1,0],[0,0,0],[0,0,1]]</span>\r\n<strong>Output: </strong>2\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">1</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length =&nbsp;A[0].length &lt;= 100</code></li>\r\n\t<li><code>A[i][j] == 0</code> or <code>A[i][j] == 1</code></li>\r\n</ol>\r\n\r\n<div>\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u5728\u7ed9\u5b9a\u7684\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u4e2d\uff0c\u5b58\u5728\u4e24\u5ea7\u5c9b\u3002\uff08\u5c9b\u662f\u7531\u56db\u9762\u76f8\u8fde\u7684 <code>1</code> \u5f62\u6210\u7684\u4e00\u4e2a\u6700\u5927\u7ec4\u3002\uff09</p>\n\n<p>\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06&nbsp;<code>0</code>&nbsp;\u53d8\u4e3a&nbsp;<code>1</code>\uff0c\u4ee5\u4f7f\u4e24\u5ea7\u5c9b\u8fde\u63a5\u8d77\u6765\uff0c\u53d8\u6210\u4e00\u5ea7\u5c9b\u3002</p>\n\n<p>\u8fd4\u56de\u5fc5\u987b\u7ffb\u8f6c\u7684&nbsp;<code>0</code> \u7684\u6700\u5c0f\u6570\u76ee\u3002\uff08\u53ef\u4ee5\u4fdd\u8bc1\u7b54\u6848\u81f3\u5c11\u662f 1\u3002\uff09</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,1],[1,0]]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,1,0],[0,0,0],[0,0,1]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>1</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length =&nbsp;A[0].length &lt;= 100</code></li>\n\t<li><code>A[i][j] == 0</code> \u6216&nbsp;<code>A[i][j] == 1</code></li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "leetId": "934",
        "link": "shortest-bridge",
        "title": "Shortest Bridge",
        "is_locked": "Normal",
        "titleZh": "\u6700\u77ed\u7684\u6865",
        "frequency": "39.5%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>A chess knight can move as indicated in the chess diagram below:</p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/10/12/knight.png\" style=\"width: 150px; height: 150px;\" />&nbsp;.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/10/30/keypad.png\" style=\"width: 134px; height: 150px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>This time, we place our chess knight on any numbered key of a phone pad (indicated above), and the knight makes <code>N-1</code> hops.&nbsp; Each hop must be from one key to another numbered key.</p>\r\n\r\n<p>Each time it lands on a key (including the initial placement of the knight), it presses the number of that key, pressing <code>N</code> digits total.</p>\r\n\r\n<p>How many distinct numbers can you dial in this manner?</p>\r\n\r\n<p>Since the answer may be large, <strong>output the answer&nbsp;modulo <code>10^9 + 7</code></strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">10</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">20</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">46</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= N &lt;= 5000</code></li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u56fd\u9645\u8c61\u68cb\u4e2d\u7684\u9a91\u58eb\u53ef\u4ee5\u6309\u4e0b\u56fe\u6240\u793a\u8fdb\u884c\u79fb\u52a8\uff1a</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/11/03/knight.png\" style=\"height: 150px; width: 150px;\">&nbsp;.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/11/03/keypad.png\" style=\"height: 150px; width: 134px;\"></p>\n\n<p><br>\n\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5c06&nbsp;&ldquo;\u9a91\u58eb&rdquo; \u653e\u5728\u7535\u8bdd\u62e8\u53f7\u76d8\u7684\u4efb\u610f\u6570\u5b57\u952e\uff08\u5982\u4e0a\u56fe\u6240\u793a\uff09\u4e0a\uff0c\u63a5\u4e0b\u6765\uff0c\u9a91\u58eb\u5c06\u4f1a\u8df3&nbsp;N-1 \u6b65\u3002\u6bcf\u4e00\u6b65\u5fc5\u987b\u662f\u4ece\u4e00\u4e2a\u6570\u5b57\u952e\u8df3\u5230\u53e6\u4e00\u4e2a\u6570\u5b57\u952e\u3002</p>\n\n<p>\u6bcf\u5f53\u5b83\u843d\u5728\u4e00\u4e2a\u952e\u4e0a\uff08\u5305\u62ec\u9a91\u58eb\u7684\u521d\u59cb\u4f4d\u7f6e\uff09\uff0c\u90fd\u4f1a\u62e8\u51fa\u952e\u6240\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u603b\u5171\u6309\u4e0b&nbsp;<code>N</code> \u4f4d\u6570\u5b57\u3002</p>\n\n<p>\u4f60\u80fd\u7528\u8fd9\u79cd\u65b9\u5f0f\u62e8\u51fa\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u53f7\u7801\uff1f</p>\n\n<p>\u56e0\u4e3a\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c<strong>\u6240\u4ee5\u8f93\u51fa\u7b54\u6848\u6a21&nbsp;<code>10^9 + 7</code></strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<ul>\n</ul>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>1\n<strong>\u8f93\u51fa\uff1a</strong>10\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>2\n<strong>\u8f93\u51fa\uff1a</strong>20\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>3\n<strong>\u8f93\u51fa\uff1a</strong>46\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= N &lt;= 5000</code></li>\n</ul>\n",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "935",
        "link": "knight-dialer",
        "title": "Knight Dialer",
        "is_locked": "Normal",
        "titleZh": "\u9a91\u58eb\u62e8\u53f7\u5668",
        "frequency": "31.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>You want to form a <code>target</code>&nbsp;string of <strong>lowercase letters</strong>.</p>\r\n\r\n<p>At the beginning, your sequence is <code>target.length</code>&nbsp;<code>&#39;?&#39;</code> marks.&nbsp; You also have a <code>stamp</code>&nbsp;of lowercase letters.</p>\r\n\r\n<p>On each turn, you may place the stamp over the sequence, and replace every letter in the sequence with the corresponding letter from the stamp.&nbsp; You can make up to <code>10 * target.length</code> turns.</p>\r\n\r\n<p>For example, if the initial sequence is <font face=\"monospace\">&quot;?????&quot;</font>, and your stamp is <code>&quot;abc&quot;</code>,&nbsp; then you may make <font face=\"monospace\">&quot;abc??&quot;, &quot;?abc?&quot;, &quot;??abc&quot;&nbsp;</font>in the first turn.&nbsp; (Note that the stamp must be fully contained in the boundaries of the sequence in order to stamp.)</p>\r\n\r\n<p>If the sequence is possible to stamp, then return an array of&nbsp;the index of the left-most letter being stamped at each turn.&nbsp; If the sequence is not possible to stamp, return an empty array.</p>\r\n\r\n<p>For example, if the sequence is <font face=\"monospace\">&quot;ababc&quot;</font>, and the stamp is <code>&quot;abc&quot;</code>, then we could return the answer <code>[0, 2]</code>, corresponding to the moves <font face=\"monospace\">&quot;?????&quot; -&gt; &quot;abc??&quot; -&gt; &quot;ababc&quot;</font>.</p>\r\n\r\n<p>Also, if the sequence is possible to stamp, it is guaranteed it is possible to stamp within <code>10 * target.length</code>&nbsp;moves.&nbsp; Any answers specifying more than this number of moves&nbsp;will not be accepted.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>stamp = <span id=\"example-input-1-1\">&quot;abc&quot;</span>, target = <span id=\"example-input-1-2\">&quot;ababc&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,2]</span>\r\n([1,0,2] would also be accepted as an answer, as well as some other answers.)\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>stamp = <span id=\"example-input-2-1\">&quot;</span><span id=\"example-input-2-2\">abca</span><span>&quot;</span>, target = <span id=\"example-input-2-2\">&quot;</span><span>aabcaca&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[3,0,1]</span>\r\n</pre>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n</div>\r\n</div>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= stamp.length &lt;= target.length &lt;= 1000</code></li>\r\n\t<li><code>stamp</code> and <code>target</code> only contain lowercase letters.</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u4f60\u60f3\u8981\u7528<strong>\u5c0f\u5199\u5b57\u6bcd</strong>\u7ec4\u6210\u4e00\u4e2a\u76ee\u6807\u5b57\u7b26\u4e32&nbsp;<code>target</code>\u3002&nbsp;</p>\n\n<p>\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u5e8f\u5217\u7531&nbsp;<code>target.length</code>&nbsp;\u4e2a&nbsp;<code>&#39;?&#39;</code>&nbsp;\u8bb0\u53f7\u7ec4\u6210\u3002\u800c\u4f60\u6709\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\u5370\u7ae0&nbsp;<code>stamp</code>\u3002</p>\n\n<p>\u5728\u6bcf\u4e2a\u56de\u5408\uff0c\u4f60\u53ef\u4ee5\u5c06\u5370\u7ae0\u653e\u5728\u5e8f\u5217\u4e0a\uff0c\u5e76\u5c06\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u66ff\u6362\u4e3a\u5370\u7ae0\u4e0a\u7684\u76f8\u5e94\u5b57\u6bcd\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u8fdb\u884c&nbsp;<code>10 * target.length</code>&nbsp; \u4e2a\u56de\u5408\u3002</p>\n\n<p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u521d\u59cb\u5e8f\u5217\u4e3a &quot;?????&quot;\uff0c\u800c\u4f60\u7684\u5370\u7ae0 <code>stamp</code>&nbsp;\u662f&nbsp;<code>&quot;abc&quot;</code>\uff0c\u90a3\u4e48\u5728\u7b2c\u4e00\u56de\u5408\uff0c\u4f60\u53ef\u4ee5\u5f97\u5230&nbsp;&quot;abc??&quot;\u3001&quot;?abc?&quot;\u3001&quot;??abc&quot;\u3002\uff08\u8bf7\u6ce8\u610f\uff0c\u5370\u7ae0\u5fc5\u987b\u5b8c\u5168\u5305\u542b\u5728\u5e8f\u5217\u7684\u8fb9\u754c\u5185\u624d\u80fd\u76d6\u4e0b\u53bb\u3002\uff09</p>\n\n<p>\u5982\u679c\u53ef\u4ee5\u5370\u51fa\u5e8f\u5217\uff0c\u90a3\u4e48\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u7531\u6bcf\u4e2a\u56de\u5408\u4e2d\u88ab\u5370\u4e0b\u7684\u6700\u5de6\u8fb9\u5b57\u6bcd\u7684\u7d22\u5f15\u7ec4\u6210\u3002\u5982\u679c\u4e0d\u80fd\u5370\u51fa\u5e8f\u5217\uff0c\u5c31\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5982\u679c\u5e8f\u5217\u662f &quot;ababc&quot;\uff0c\u5370\u7ae0\u662f <code>&quot;abc&quot;</code>\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd4\u56de\u4e0e\u64cd\u4f5c&nbsp;&quot;?????&quot; -&gt; &quot;abc??&quot; -&gt; &quot;ababc&quot; \u76f8\u5bf9\u5e94\u7684\u7b54\u6848 <code>[0, 2]</code>\uff1b</p>\n\n<p>\u53e6\u5916\uff0c\u5982\u679c\u53ef\u4ee5\u5370\u51fa\u5e8f\u5217\uff0c\u90a3\u4e48\u9700\u8981\u4fdd\u8bc1\u53ef\u4ee5\u5728 <code>10 * target.length</code>&nbsp;\u4e2a\u56de\u5408\u5185\u5b8c\u6210\u3002\u4efb\u4f55\u8d85\u8fc7\u6b64\u6570\u5b57\u7684\u7b54\u6848\u5c06\u4e0d\u88ab\u63a5\u53d7\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>stamp = &quot;abc&quot;, target = &quot;ababc&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[0,2]\n\uff08[1,0,2] \u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u53ef\u80fd\u7684\u7ed3\u679c\u4e5f\u5c06\u4f5c\u4e3a\u7b54\u6848\u88ab\u63a5\u53d7\uff09\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>stamp = &quot;abca&quot;, target = &quot;aabcaca&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[3,0,1]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= stamp.length &lt;= target.length &lt;= 1000</code></li>\n\t<li><code>stamp</code> \u548c&nbsp;<code>target</code>&nbsp;\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "leetId": "936",
        "link": "stamping-the-sequence",
        "title": "Stamping The Sequence",
        "is_locked": "Normal",
        "titleZh": "\u6233\u5370\u5e8f\u5217",
        "frequency": "27.3%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>You have an array of <code>logs</code>.&nbsp; Each log is a space delimited string of words.</p>\r\n\r\n<p>For each log, the first word in each log is an alphanumeric <em>identifier</em>.&nbsp; Then, either:</p>\r\n\r\n<ul>\r\n\t<li>Each word after the identifier will consist only of lowercase letters, or;</li>\r\n\t<li>Each word after the identifier will consist only of digits.</li>\r\n</ul>\r\n\r\n<p>We will call these two varieties of logs <em>letter-logs</em> and <em>digit-logs</em>.&nbsp; It is guaranteed that each log has at least one word after its identifier.</p>\r\n\r\n<p>Reorder the logs so that all of the letter-logs come before any digit-log.&nbsp; The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.&nbsp; The digit-logs should be put in their original order.</p>\r\n\r\n<p>Return the final order of the logs.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;a1 9 2 3 1&quot;,&quot;g1 act car&quot;,&quot;zo4 4 7&quot;,&quot;ab1 off key dog&quot;,&quot;a8 act zoo&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;g1 act car&quot;,&quot;a8 act zoo&quot;,&quot;ab1 off key dog&quot;,&quot;a1 9 2 3 1&quot;,&quot;zo4 4 7&quot;]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= logs.length &lt;= 100</code></li>\r\n\t<li><code>3 &lt;= logs[i].length &lt;= 100</code></li>\r\n\t<li><code>logs[i]</code> is guaranteed to have an identifier, and a word after the identifier.</li>\r\n</ol>\r\n</div>",
        "questionDescriptionZh": "<p>\u4f60\u6709\u4e00\u4e2a\u65e5\u5fd7\u6570\u7ec4 <code>logs</code>\u3002\u6bcf\u6761\u65e5\u5fd7\u90fd\u662f\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u5b57\u4e32\u3002</p>\n\n<p>\u5bf9\u4e8e\u6bcf\u6761\u65e5\u5fd7\uff0c\u5176\u7b2c\u4e00\u4e2a\u5b57\u4e3a\u5b57\u6bcd\u6570\u5b57<em>\u6807\u8bc6\u7b26</em>\u3002\u7136\u540e\uff0c\u8981\u4e48\uff1a</p>\n\n<ul>\n\t<li>\u6807\u8bc6\u7b26\u540e\u9762\u7684\u6bcf\u4e2a\u5b57\u5c06\u4ec5\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff0c\u6216\uff1b</li>\n\t<li>\u6807\u8bc6\u7b26\u540e\u9762\u7684\u6bcf\u4e2a\u5b57\u5c06\u4ec5\u7531\u6570\u5b57\u7ec4\u6210\u3002</li>\n</ul>\n\n<p>\u6211\u4eec\u5c06\u8fd9\u4e24\u79cd\u65e5\u5fd7\u5206\u522b\u79f0\u4e3a\u5b57\u6bcd\u65e5\u5fd7\u548c\u6570\u5b57\u65e5\u5fd7\u3002\u4fdd\u8bc1\u6bcf\u4e2a\u65e5\u5fd7\u5728\u5176\u6807\u8bc6\u7b26\u540e\u9762\u81f3\u5c11\u6709\u4e00\u4e2a\u5b57\u3002</p>\n\n<p>\u5c06\u65e5\u5fd7\u91cd\u65b0\u6392\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u5b57\u6bcd\u65e5\u5fd7\u90fd\u6392\u5728\u6570\u5b57\u65e5\u5fd7\u4e4b\u524d\u3002\u5b57\u6bcd\u65e5\u5fd7\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\uff0c\u5ffd\u7565\u6807\u8bc6\u7b26\uff0c\u6807\u8bc6\u7b26\u4ec5\u7528\u4e8e\u8868\u793a\u5173\u7cfb\u3002\u6570\u5b57\u65e5\u5fd7\u5e94\u8be5\u6309\u539f\u6765\u7684\u987a\u5e8f\u6392\u5217\u3002</p>\n\n<p>\u8fd4\u56de\u65e5\u5fd7\u7684\u6700\u7ec8\u987a\u5e8f\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b \uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;a1 9 2 3 1&quot;,&quot;g1 act car&quot;,&quot;zo4 4 7&quot;,&quot;ab1 off key dog&quot;,&quot;a8 act zoo&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;g1 act car&quot;,&quot;a8 act zoo&quot;,&quot;ab1 off key dog&quot;,&quot;a1 9 2 3 1&quot;,&quot;zo4 4 7&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= logs.length &lt;= 100</code></li>\n\t<li><code>3 &lt;= logs[i].length &lt;= 100</code></li>\n\t<li><code>logs[i]</code>&nbsp;\u4fdd\u8bc1\u6709\u4e00\u4e2a\u6807\u8bc6\u7b26\uff0c\u5e76\u4e14\u6807\u8bc6\u7b26\u540e\u9762\u6709\u4e00\u4e2a\u5b57\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "leetId": "937",
        "link": "reorder-log-files",
        "title": "Reorder Log Files",
        "is_locked": "Normal",
        "titleZh": "\u91cd\u65b0\u6392\u5217\u65e5\u5fd7\u6587\u4ef6",
        "frequency": "53.8%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given the <code>root</code> node of a binary search tree, return the sum of values of all nodes with value between <code>L</code> and <code>R</code> (inclusive).</p>\r\n\r\n<p>The binary search tree is guaranteed to have unique values.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-1-1\">[10,5,15,3,7,null,18]</span>, L = <span id=\"example-input-1-2\">7</span>, R = <span id=\"example-input-1-3\">15</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">32</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-2-1\">[10,5,15,3,7,13,18,1,null,6]</span>, L = <span id=\"example-input-2-2\">6</span>, R = <span id=\"example-input-2-3\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">23</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the tree is at most <code>10000</code>.</li>\r\n\t<li>The final answer is guaranteed to be less than <code>2^31</code>.</li>\r\n</ol>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u7ed3\u70b9&nbsp;<code>root</code>\uff0c\u8fd4\u56de <code>L</code> \u548c <code>R</code>\uff08\u542b\uff09\u4e4b\u95f4\u7684\u6240\u6709\u7ed3\u70b9\u7684\u503c\u7684\u548c\u3002</p>\n\n<p>\u4e8c\u53c9\u641c\u7d22\u6811\u4fdd\u8bc1\u5177\u6709\u552f\u4e00\u7684\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [10,5,15,3,7,null,18], L = 7, R = 15\n<strong>\u8f93\u51fa\uff1a</strong>32\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10\n<strong>\u8f93\u51fa\uff1a</strong>23\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6811\u4e2d\u7684\u7ed3\u70b9\u6570\u91cf\u6700\u591a\u4e3a&nbsp;<code>10000</code>&nbsp;\u4e2a\u3002</li>\n\t<li>\u6700\u7ec8\u7684\u7b54\u6848\u4fdd\u8bc1\u5c0f\u4e8e&nbsp;<code>2^31</code>\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Binary Search Tree",
                "link": "binary-search-tree",
                "tagZh": "\u4e8c\u53c9\u641c\u7d22\u6811"
            }
        ],
        "leetId": "938",
        "link": "range-sum-of-bst",
        "title": "Range Sum of BST",
        "is_locked": "Normal",
        "titleZh": "\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u8303\u56f4\u548c",
        "frequency": "74.7%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes.</p>\r\n\r\n<p>If there isn&#39;t any rectangle, return 0.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[1,1],[1,3],[3,1],[3,3],[2,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note</strong>:</p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= points.length &lt;= 500</code></li>\r\n\t<li><code>0 &lt;=&nbsp;points[i][0] &lt;=&nbsp;40000</code></li>\r\n\t<li><code>0 &lt;=&nbsp;points[i][1] &lt;=&nbsp;40000</code></li>\r\n\t<li>All points are distinct.</li>\r\n</ol>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u5728 xy \u5e73\u9762\u4e0a\u7684\u4e00\u7ec4\u70b9\uff0c\u786e\u5b9a\u7531\u8fd9\u4e9b\u70b9\u7ec4\u6210\u7684\u77e9\u5f62\u7684\u6700\u5c0f\u9762\u79ef\uff0c\u5176\u4e2d\u77e9\u5f62\u7684\u8fb9\u5e73\u884c\u4e8e x \u8f74\u548c y \u8f74\u3002</p>\n\n<p>\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u77e9\u5f62\uff0c\u5c31\u8fd4\u56de 0\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,1],[1,3],[3,1],[3,3],[2,2]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= points.length &lt;= 500</code></li>\n\t<li><code>0 &lt;=&nbsp;points[i][0] &lt;=&nbsp;40000</code></li>\n\t<li><code>0 &lt;=&nbsp;points[i][1] &lt;=&nbsp;40000</code></li>\n\t<li>\u6240\u6709\u7684\u70b9\u90fd\u662f\u4e0d\u540c\u7684\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "leetId": "939",
        "link": "minimum-area-rectangle",
        "title": "Minimum Area Rectangle",
        "is_locked": "Normal",
        "titleZh": "\u6700\u5c0f\u9762\u79ef\u77e9\u5f62",
        "frequency": "37.9%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a string <code>S</code>, count the number of distinct, non-empty subsequences of <code>S</code> .</p>\r\n\r\n<p>Since the result may be large, <strong>return the answer modulo <code>10^9 + 7</code></strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;abc&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">7</span>\r\n<span><strong>Explanation</strong>: The 7 distinct subsequences are &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;ab&quot;, &quot;ac&quot;, &quot;bc&quot;, and &quot;abc&quot;.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;aba&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6\r\n</span><strong>Explanation</strong>: The 6 distinct subsequences are &quot;a&quot;, &quot;b&quot;, &quot;ab&quot;, &quot;ba&quot;, &quot;aa&quot; and &quot;aba&quot;.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;aaa&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3\r\n</span><strong>Explanation</strong>: The 3 distinct subsequences are &quot;a&quot;, &quot;aa&quot; and &quot;aaa&quot;.\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>S</code> contains only lowercase letters.</li>\r\n\t<li><code>1 &lt;= S.length &lt;= 2000</code></li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32&nbsp;<code>S</code>\uff0c\u8ba1\u7b97&nbsp;<code>S</code>&nbsp;\u7684\u4e0d\u540c\u975e\u7a7a\u5b50\u5e8f\u5217\u7684\u4e2a\u6570\u3002</p>\n\n<p>\u56e0\u4e3a\u7ed3\u679c\u53ef\u80fd\u5f88\u5927\uff0c\u6240\u4ee5<strong>\u8fd4\u56de\u7b54\u6848\u6a21</strong><strong> <code>10^9 + 7</code></strong>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;abc&quot;\n<strong>\u8f93\u51fa\uff1a</strong>7\n<strong>\u89e3\u91ca\uff1a</strong>7 \u4e2a\u4e0d\u540c\u7684\u5b50\u5e8f\u5217\u5206\u522b\u662f &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;ab&quot;, &quot;ac&quot;, &quot;bc&quot;, \u4ee5\u53ca &quot;abc&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;aba&quot;\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>6 \u4e2a\u4e0d\u540c\u7684\u5b50\u5e8f\u5217\u5206\u522b\u662f &quot;a&quot;, &quot;b&quot;, &quot;ab&quot;, &quot;ba&quot;, &quot;aa&quot; \u4ee5\u53ca &quot;aba&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;aaa&quot;\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>3 \u4e2a\u4e0d\u540c\u7684\u5b50\u5e8f\u5217\u5206\u522b\u662f &quot;a&quot;, &quot;aa&quot; \u4ee5\u53ca &quot;aaa&quot;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>S</code>&nbsp;\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n\t<li><code>1 &lt;= S.length &lt;= 2000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "940",
        "link": "distinct-subsequences-ii",
        "title": "Distinct Subsequences II",
        "is_locked": "Normal",
        "titleZh": "\u4e0d\u540c\u7684\u5b50\u5e8f\u5217 II",
        "frequency": "37.6%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of integers, return <code>true</code> if and only if it is a <em>valid mountain array</em>.</p>\r\n\r\n<p>Recall that A is a mountain array if and only if:</p>\r\n\r\n<ul>\r\n\t<li><code>A.length &gt;= 3</code></li>\r\n\t<li>There exists some <code>i</code> with&nbsp;<code>0 &lt; i&nbsp;&lt; A.length - 1</code>&nbsp;such that:\r\n\t<ul>\r\n\t\t<li><code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] </code></li>\r\n\t\t<li><code>A[i] &gt; A[i+1] &gt; ... &gt; A[B.length - 1]</code></li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[2,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[3,5,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[0,3,2,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true</span></pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10000&nbsp;</code></li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u5982\u679c\u5b83\u662f\u6709\u6548\u7684\u5c71\u8109\u6570\u7ec4\u5c31\u8fd4\u56de&nbsp;<code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\uff0c\u5982\u679c A \u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u4e2a\u5c71\u8109\u6570\u7ec4\uff1a</p>\n\n<ul>\n\t<li><code>A.length &gt;= 3</code></li>\n\t<li>\u5728&nbsp;<code>0 &lt; i&nbsp;&lt; A.length - 1</code>&nbsp;\u6761\u4ef6\u4e0b\uff0c\u5b58\u5728&nbsp;<code>i</code>&nbsp;\u4f7f\u5f97\uff1a\n\t<ul>\n\t\t<li><code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] </code></li>\n\t\t<li><code>A[i] &gt; A[i+1] &gt; ... &gt; A[B.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,5,5]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,3,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>true</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000&nbsp;</code></li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "941",
        "link": "valid-mountain-array",
        "title": "Valid Mountain Array",
        "is_locked": "Normal",
        "titleZh": "\u6709\u6548\u7684\u5c71\u8109\u6570\u7ec4",
        "frequency": "32.8%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given a string <code>S</code> that <strong>only</strong> contains &quot;I&quot; (increase) or &quot;D&quot; (decrease), let <code>N = S.length</code>.</p>\r\n\r\n<p>Return <strong>any</strong> permutation <code>A</code> of <code>[0, 1, ..., N]</code> such that for all <code>i = 0,&nbsp;..., N-1</code>:</p>\r\n\r\n<ul>\r\n\t<li>If <code>S[i] == &quot;I&quot;</code>, then <code>A[i] &lt; A[i+1]</code></li>\r\n\t<li>If <code>S[i] == &quot;D&quot;</code>, then <code>A[i] &gt; A[i+1]</code></li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;IDID&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,4,1,3,2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;III&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[0,1,2,3]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;DDI&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[3,2,0,1]</span></pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length &lt;= 10000</code></li>\r\n\t<li><code>S</code> only contains characters <code>&quot;I&quot;</code> or <code>&quot;D&quot;</code>.</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u53ea\u542b&nbsp;<code>&quot;I&quot;</code>\uff08\u589e\u5927\uff09\u6216 <code>&quot;D&quot;</code>\uff08\u51cf\u5c0f\uff09\u7684\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\uff0c\u4ee4&nbsp;<code>N = S.length</code>\u3002</p>\n\n<p>\u8fd4\u56de&nbsp;<code>[0, 1, ..., N]</code>&nbsp;\u7684\u4efb\u610f\u6392\u5217&nbsp;<code>A</code>&nbsp;\u4f7f\u5f97\u5bf9\u4e8e\u6240\u6709&nbsp;<code>i = 0,&nbsp;..., N-1</code>\uff0c\u90fd\u6709\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c&nbsp;<code>S[i] == &quot;I&quot;</code>\uff0c\u90a3\u4e48&nbsp;<code>A[i] &lt; A[i+1]</code></li>\n\t<li>\u5982\u679c&nbsp;<code>S[i] == &quot;D&quot;</code>\uff0c\u90a3\u4e48&nbsp;<code>A[i] &gt; A[i+1]</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u51fa\uff1a</strong>&quot;IDID&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[0,4,1,3,2]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u51fa\uff1a</strong>&quot;III&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[0,1,2,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u51fa\uff1a</strong>&quot;DDI&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[3,2,0,1]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 1000</code></li>\n\t<li><code>S</code> \u53ea\u5305\u542b\u5b57\u7b26&nbsp;<code>&quot;I&quot;</code>&nbsp;\u6216&nbsp;<code>&quot;D&quot;</code>\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "942",
        "link": "di-string-match",
        "title": "DI String Match",
        "is_locked": "Normal",
        "titleZh": "\u589e\u51cf\u5b57\u7b26\u4e32\u5339\u914d",
        "frequency": "68.9%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given an array A of strings, find any&nbsp;smallest string that contains each string in <code>A</code> as a&nbsp;substring.</p>\r\n\r\n<p>We may assume that no string in <code>A</code> is substring of another string in <code>A</code>.</p>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;alex&quot;,&quot;loves&quot;,&quot;leetcode&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;alexlovesleetcode&quot;</span>\r\n<strong>Explanation: </strong>All permutations of &quot;alex&quot;,&quot;loves&quot;,&quot;leetcode&quot; would also be accepted.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;catg&quot;,&quot;ctaagt&quot;,&quot;gcta&quot;,&quot;ttca&quot;,&quot;atgcatc&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;gctaagttcatgcatc&quot;</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 12</code></li>\r\n\t<li><code>1 &lt;= A[i].length &lt;= 20</code></li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 <code>A</code>\uff0c\u627e\u5230\u4ee5&nbsp;<code>A</code>&nbsp;\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u77ed\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe <code>A</code> \u4e2d\u6ca1\u6709\u5b57\u7b26\u4e32\u662f <code>A</code> \u4e2d\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u5b57\u7b26\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;alex&quot;,&quot;loves&quot;,&quot;leetcode&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;alexlovesleetcode&quot;\n<strong>\u89e3\u91ca\uff1a</strong>&quot;alex&quot;\uff0c&quot;loves&quot;\uff0c&quot;leetcode&quot; \u7684\u6240\u6709\u6392\u5217\u90fd\u4f1a\u88ab\u63a5\u53d7\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;catg&quot;,&quot;ctaagt&quot;,&quot;gcta&quot;,&quot;ttca&quot;,&quot;atgcatc&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;gctaagttcatgcatc&quot;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 12</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 20</code></li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "943",
        "link": "find-the-shortest-superstring",
        "title": "Find the Shortest Superstring",
        "is_locked": "Normal",
        "titleZh": "\u6700\u77ed\u8d85\u7ea7\u4e32",
        "frequency": "28.6%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>We are given an array&nbsp;<code>A</code> of <code>N</code> lowercase letter strings, all of the same length.</p>\r\n\r\n<p>Now, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.</p>\r\n\r\n<p>For example, if we have an array <code>A = [&quot;</code><code>abcdef</code><code>&quot;,&quot;uvwxyz&quot;]</code> and deletion indices <code>{0, 2, 3}</code>, then the final array after deletions is <code>[&quot;bef&quot;, &quot;vyz&quot;]</code>,&nbsp;and the remaining columns of <code>A</code> are&nbsp;<code>[&quot;b&quot;</code><code>,&quot;</code><code>v&quot;]</code>, <code>[&quot;e&quot;,&quot;y&quot;]</code>, and <code>[&quot;f&quot;,&quot;z&quot;]</code>.&nbsp; (Formally, the <code>c</code>-th column is <code>[A[0][c], A[1][c], ..., A[A.length-1][c]]</code>.)</p>\r\n\r\n<p>Suppose we chose a set of deletion indices <code>D</code> such that after deletions, each remaining column in A is in <strong>non-decreasing</strong> sorted order.</p>\r\n\r\n<p>Return the minimum possible value of <code>D.length</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;cba&quot;,&quot;daf&quot;,&quot;ghi&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>\r\nAfter choosing D = {1}, each column [&quot;c&quot;,&quot;d&quot;,&quot;g&quot;] and [&quot;a&quot;,&quot;f&quot;,&quot;i&quot;] are in non-decreasing sorted order.\r\nIf we chose D = {}, then a column [&quot;b&quot;,&quot;a&quot;,&quot;h&quot;] would not be in non-decreasing sorted order.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;a&quot;,&quot;b&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">0</span>\r\n<strong>Explanation: </strong>D = {}\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[&quot;zyx&quot;,&quot;wvu&quot;,&quot;tsr&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation: </strong>D = {0, 1, 2}\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= A[i].length &lt;= 1000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u7531&nbsp;<code>N</code>&nbsp;\u4e2a\u5c0f\u5199\u5b57\u6bcd\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u6570\u7ec4 <code>A</code>\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u76f8\u7b49\u3002</p>\n\n<p>\u9009\u53d6\u4e00\u4e2a\u5220\u9664\u7d22\u5f15\u5e8f\u5217\uff0c\u5bf9\u4e8e <code>A</code> \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u5220\u9664\u5bf9\u5e94\u6bcf\u4e2a\u7d22\u5f15\u5904\u7684\u5b57\u7b26\u3002 \u6240\u4f59\u4e0b\u7684\u5b57\u7b26\u4e32\u884c\u4ece\u4e0a\u5f80\u4e0b\u8bfb\u5f62\u6210\u5217\u3002</p>\n\n<p>\u6bd4\u5982\uff0c\u6709&nbsp;<code>A = [&quot;abcdef&quot;, &quot;uvwxyz&quot;]</code>\uff0c\u5220\u9664\u7d22\u5f15\u5e8f\u5217&nbsp;<code>{0, 2, 3}</code>\uff0c\u5220\u9664\u540e <code>A</code>&nbsp;\u4e3a<code>[&quot;bef&quot;, &quot;vyz&quot;]</code>\uff0c <code>A</code>&nbsp;\u7684\u5217\u5206\u522b\u4e3a<code>[&quot;b&quot;,&quot;v&quot;], [&quot;e&quot;,&quot;y&quot;], [&quot;f&quot;,&quot;z&quot;]</code>\u3002\uff08\u5f62\u5f0f\u4e0a\uff0c\u7b2c n&nbsp;\u5217\u4e3a&nbsp;<code>[A[0][n], A[1][n], ..., A[A.length-1][n]]</code>\uff09\u3002</p>\n\n<p>\u5047\u8bbe\uff0c\u6211\u4eec\u9009\u62e9\u4e86\u4e00\u7ec4\u5220\u9664\u7d22\u5f15&nbsp;<code>D</code>\uff0c\u90a3\u4e48\u5728\u6267\u884c\u5220\u9664\u64cd\u4f5c\u4e4b\u540e\uff0c<code>A</code> \u4e2d\u6240\u5269\u4f59\u7684\u6bcf\u4e00\u5217\u90fd\u5fc5\u987b\u662f <strong>\u975e\u964d\u5e8f</strong>&nbsp;\u6392\u5217\u7684\uff0c\u7136\u540e\u8bf7\u4f60\u8fd4\u56de&nbsp;<code>D.length</code>&nbsp;\u7684\u6700\u5c0f\u53ef\u80fd\u503c\u3002</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;cba&quot;, &quot;daf&quot;, &quot;ghi&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5f53\u9009\u62e9 D = {1}\uff0c\u5220\u9664\u540e A \u7684\u5217\u4e3a\uff1a[&quot;c&quot;,&quot;d&quot;,&quot;g&quot;] \u548c [&quot;a&quot;,&quot;f&quot;,&quot;i&quot;]\uff0c\u5747\u4e3a\u975e\u964d\u5e8f\u6392\u5217\u3002\n\u82e5\u9009\u62e9 D = {}\uff0c\u90a3\u4e48 A \u7684\u5217 [&quot;b&quot;,&quot;a&quot;,&quot;h&quot;] \u5c31\u4e0d\u662f\u975e\u964d\u5e8f\u6392\u5217\u4e86\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;a&quot;, &quot;b&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>D = {}\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;zyx&quot;, &quot;wvu&quot;, &quot;tsr&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>D = {0, 1, 2}\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 1000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "leetId": "944",
        "link": "delete-columns-to-make-sorted",
        "title": "Delete Columns to Make Sorted",
        "is_locked": "Normal",
        "titleZh": "\u5220\u5217\u9020\u5e8f",
        "frequency": "65.9%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given an array of integers A, a <em>move</em> consists of choosing any <code>A[i]</code>, and incrementing it by <code>1</code>.</p>\r\n\r\n<p>Return the least number of moves to make every value in <code>A</code> unique.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong> After 1 move, the array could be [1, 2, 3].\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[3,2,1,2,1,7]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6</span>\r\n<strong>Explanation: </strong> After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\r\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt;= 40000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt; 40000</code></li>\r\n</ol>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u6574\u6570\u6570\u7ec4 A\uff0c\u6bcf\u6b21 <em>move</em> \u64cd\u4f5c\u5c06\u4f1a\u9009\u62e9\u4efb\u610f&nbsp;<code>A[i]</code>\uff0c\u5e76\u5c06\u5176\u9012\u589e&nbsp;<code>1</code>\u3002</p>\n\n<p>\u8fd4\u56de\u4f7f <code>A</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u662f\u552f\u4e00\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002</p>\n\n<p><strong>\u793a\u4f8b 1:</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u7ecf\u8fc7\u4e00\u6b21 <em>move</em> \u64cd\u4f5c\uff0c\u6570\u7ec4\u5c06\u53d8\u4e3a [1, 2, 3]\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2:</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,2,1,2,1,7]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u7ecf\u8fc7 6 \u6b21 <em>move</em> \u64cd\u4f5c\uff0c\u6570\u7ec4\u5c06\u53d8\u4e3a [3, 4, 1, 2, 5, 7]\u3002\n\u53ef\u4ee5\u770b\u51fa 5 \u6b21\u6216 5 \u6b21\u4ee5\u4e0b\u7684 <em>move</em> \u64cd\u4f5c\u662f\u4e0d\u80fd\u8ba9\u6570\u7ec4\u7684\u6bcf\u4e2a\u503c\u552f\u4e00\u7684\u3002\n</pre>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 40000</code></li>\n\t<li><code>0 &lt;= A[i] &lt; 40000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "945",
        "link": "minimum-increment-to-make-array-unique",
        "title": "Minimum Increment to Make Array Unique",
        "is_locked": "Normal",
        "titleZh": "\u4f7f\u6570\u7ec4\u552f\u4e00\u7684\u6700\u5c0f\u589e\u91cf",
        "frequency": "37.9%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given two sequences <code>pushed</code> and <code>popped</code>&nbsp;<strong>with distinct values</strong>,&nbsp;return <code>true</code> if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>pushed = <span id=\"example-input-1-1\">[1,2,3,4,5]</span>, popped = <span id=\"example-input-1-2\">[4,5,3,2,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation: </strong>We might do the following sequence:\r\npush(1), push(2), push(3), push(4), pop() -&gt; 4,\r\npush(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>pushed = <span id=\"example-input-2-1\">[1,2,3,4,5]</span>, popped = <span id=\"example-input-2-2\">[4,3,5,1,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n<strong>Explanation: </strong>1 cannot be popped before 2.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code></li>\r\n\t<li><code>0 &lt;= pushed[i], popped[i] &lt; 1000</code></li>\r\n\t<li><code>pushed</code> is a permutation of <code>popped</code>.</li>\r\n\t<li><code>pushed</code> and <code>popped</code> have distinct values.</li>\r\n</ol>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a&nbsp;<code>pushed</code>&nbsp;\u548c&nbsp;<code>popped</code>&nbsp;\u4e24\u4e2a\u5e8f\u5217\uff0c\u53ea\u6709\u5f53\u5b83\u4eec\u53ef\u80fd\u662f\u5728\u6700\u521d\u7a7a\u6808\u4e0a\u8fdb\u884c\u7684\u63a8\u5165 push \u548c\u5f39\u51fa pop \u64cd\u4f5c\u5e8f\u5217\u7684\u7ed3\u679c\u65f6\uff0c\u8fd4\u56de <code>true</code>\uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>&nbsp;\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u6309\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\uff1a\npush(1), push(2), push(3), push(4), pop() -&gt; 4,\npush(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>1 \u4e0d\u80fd\u5728 2 \u4e4b\u524d\u5f39\u51fa\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= pushed[i], popped[i] &lt; 1000</code></li>\n\t<li><code>pushed</code>&nbsp;\u662f&nbsp;<code>popped</code>&nbsp;\u7684\u6392\u5217\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            }
        ],
        "leetId": "946",
        "link": "validate-stack-sequences",
        "title": "Validate Stack Sequences",
        "is_locked": "Normal",
        "titleZh": "\u9a8c\u8bc1\u6808\u5e8f\u5217",
        "frequency": "49.5%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>On a 2D plane, we place stones at some integer coordinate points.&nbsp; Each coordinate point may have at most one stone.</p>\r\n\r\n<p>Now, a <em>move</em> consists of removing a stone&nbsp;that shares a column or row with another stone on the grid.</p>\r\n\r\n<p>What is the largest possible number of moves we can make?</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>stones = <span id=\"example-input-1-2\">[[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]</span>\r\n<strong>Output: </strong>5\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>stones = <span id=\"example-input-2-2\">[[0,0],[0,2],[1,1],[2,0],[2,2]]</span>\r\n<strong>Output: </strong>3\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>stones = <span id=\"example-input-3-2\">[[0,0]]</span>\r\n<strong>Output: </strong>0\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= stones.length &lt;= 1000</code></li>\r\n\t<li><code>0 &lt;= stones[i][j] &lt; 10000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u6211\u4eec\u5c06\u77f3\u5934\u653e\u7f6e\u5728\u4e00\u4e9b\u6574\u6570\u5750\u6807\u70b9\u4e0a\u3002\u6bcf\u4e2a\u5750\u6807\u70b9\u4e0a\u6700\u591a\u53ea\u80fd\u6709\u4e00\u5757\u77f3\u5934\u3002<br>\n<br>\n\u73b0\u5728\uff0c<em>move</em> \u64cd\u4f5c\u5c06\u4f1a\u79fb\u9664\u4e0e\u7f51\u683c\u4e0a\u7684\u67d0\u4e00\u5757\u77f3\u5934\u5171\u4eab\u4e00\u5217\u6216\u4e00\u884c\u7684\u4e00\u5757\u77f3\u5934\u3002<br>\n<br>\n\u6211\u4eec\u6700\u591a\u80fd\u6267\u884c\u591a\u5c11\u6b21 <em>move</em> \u64cd\u4f5c\uff1f</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\n<strong>\u8f93\u51fa\uff1a</strong>5\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>stones = [[0,0]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= stones.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= stones[i][j] &lt; 10000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            }
        ],
        "leetId": "947",
        "link": "most-stones-removed-with-same-row-or-column",
        "title": "Most Stones Removed with Same Row or Column",
        "is_locked": "Normal",
        "titleZh": "\u79fb\u9664\u6700\u591a\u7684\u540c\u884c\u6216\u540c\u5217\u77f3\u5934",
        "frequency": "41.5%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>You have an initial power <code>P</code>, an initial score of <code>0</code> points, and a bag of tokens.</p>\r\n\r\n<p>Each token can be used at most once, has a value <code>token[i]</code>, and has potentially two ways to use it.</p>\r\n\r\n<ul>\r\n\t<li>If we have at least <code>token[i]</code> power, we may play the token face up, losing <code>token[i]</code> power, and gaining <code>1</code> point.</li>\r\n\t<li>If we have at least <code>1</code> point, we may play the token face down, gaining <code>token[i]</code> power, and losing <code>1</code> point.</li>\r\n</ul>\r\n\r\n<p>Return the largest number of points we can have after playing any number of tokens.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>tokens = <span id=\"example-input-1-1\">[100]</span>, P = <span id=\"example-input-1-2\">50</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">0</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>tokens = <span id=\"example-input-2-1\">[100,200]</span>, P = <span id=\"example-input-2-2\">150</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>tokens = <span id=\"example-input-3-1\">[100,200,300,400]</span>, P = <span id=\"example-input-3-2\">200</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>tokens.length &lt;= 1000</code></li>\r\n\t<li><code>0 &lt;= tokens[i] &lt; 10000</code></li>\r\n\t<li><code>0 &lt;= P &lt; 10000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u4f60\u7684\u521d\u59cb\u80fd\u91cf\u4e3a&nbsp;<code>P</code>\uff0c\u521d\u59cb\u5206\u6570\u4e3a&nbsp;<code>0</code>\uff0c\u53ea\u6709\u4e00\u5305\u4ee4\u724c\u3002</p>\n\n<p>\u4ee4\u724c\u7684\u503c\u4e3a&nbsp;<code>token[i]</code>\uff0c\u6bcf\u4e2a\u4ee4\u724c\u6700\u591a\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u53ef\u80fd\u7684\u4e24\u79cd\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c\u4f60\u81f3\u5c11\u6709&nbsp;<code>token[i]</code>&nbsp;\u70b9\u80fd\u91cf\uff0c\u53ef\u4ee5\u5c06\u4ee4\u724c\u7f6e\u4e3a\u6b63\u9762\u671d\u4e0a\uff0c\u5931\u53bb&nbsp;<code>token[i]</code>&nbsp;\u70b9\u80fd\u91cf\uff0c\u5e76\u5f97\u5230&nbsp;<code>1</code>&nbsp;\u5206\u3002</li>\n\t<li>\u5982\u679c\u6211\u4eec\u81f3\u5c11\u6709&nbsp;<code>1</code>&nbsp;\u5206\uff0c\u53ef\u4ee5\u5c06\u4ee4\u724c\u7f6e\u4e3a\u53cd\u9762\u671d\u4e0a\uff0c\u83b7\u5f97&nbsp;<code>token[i]</code>&nbsp;\u70b9\u80fd\u91cf\uff0c\u5e76\u5931\u53bb&nbsp;<code>1</code>&nbsp;\u5206\u3002</li>\n</ul>\n\n<p>\u5728\u4f7f\u7528\u4efb\u610f\u6570\u91cf\u7684\u4ee4\u724c\u540e\uff0c\u8fd4\u56de\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u7684\u6700\u5927\u5206\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>tokens = [100], P = 50\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>tokens = [100,200], P = 150\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>tokens = [100,200,300,400], P = 200\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>tokens.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= tokens[i] &lt; 10000</code></li>\n\t<li><code>0 &lt;= P &lt; 10000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "leetId": "948",
        "link": "bag-of-tokens",
        "title": "Bag of Tokens",
        "is_locked": "Normal",
        "titleZh": "\u4ee4\u724c\u653e\u7f6e",
        "frequency": "30.2%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given an array of 4 digits, return the largest 24 hour time that can be made.</p>\r\n\r\n<p>The smallest 24 hour time is 00:00, and the largest is 23:59.&nbsp; Starting from 00:00, a time is larger if more time has elapsed since midnight.</p>\r\n\r\n<p>Return the answer as a string of length 5.&nbsp; If no valid time can be made, return an empty string.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;23:41&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[5,5,5,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;&quot;</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>A.length == 4</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 9</code></li>\r\n</ol>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 4 \u4f4d\u6570\u5b57\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u8fd4\u56de\u53ef\u4ee5\u8bbe\u7f6e\u7684\u7b26\u5408 24 \u5c0f\u65f6\u5236\u7684\u6700\u5927\u65f6\u95f4\u3002</p>\n\n<p>\u6700\u5c0f\u7684 24 \u5c0f\u65f6\u5236\u65f6\u95f4\u662f&nbsp;00:00\uff0c\u800c\u6700\u5927\u7684\u662f&nbsp;23:59\u3002\u4ece 00:00 \uff08\u5348\u591c\uff09\u5f00\u59cb\u7b97\u8d77\uff0c\u8fc7\u5f97\u8d8a\u4e45\uff0c\u65f6\u95f4\u8d8a\u5927\u3002</p>\n\n<p>\u4ee5\u957f\u5ea6\u4e3a 5 \u7684\u5b57\u7b26\u4e32\u8fd4\u56de\u7b54\u6848\u3002\u5982\u679c\u4e0d\u80fd\u786e\u5b9a\u6709\u6548\u65f6\u95f4\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,4]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;23:41&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,5,5,5]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>A.length == 4</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 9</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "949",
        "link": "largest-time-for-given-digits",
        "title": "Largest Time for Given Digits",
        "is_locked": "Normal",
        "titleZh": "\u7ed9\u5b9a\u6570\u5b57\u80fd\u7ec4\u6210\u7684\u6700\u5927\u65f6\u95f4",
        "frequency": "29.4%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>In a deck of cards, every card has a unique integer.&nbsp; You can order the deck in&nbsp;any order you want.</p>\r\n\r\n<p>Initially, all the cards start face down (unrevealed) in one deck.</p>\r\n\r\n<p>Now, you do the following steps repeatedly, until all cards are revealed:</p>\r\n\r\n<ol>\r\n\t<li>Take the top card of the deck, reveal it, and take it out of the deck.</li>\r\n\t<li>If there are still cards in the deck, put the next top card of the deck at&nbsp;the bottom of the deck.</li>\r\n\t<li>If there are still unrevealed cards, go back to step 1.&nbsp; Otherwise, stop.</li>\r\n</ol>\r\n\r\n<p>Return an ordering of the deck that would reveal the cards&nbsp;in <strong>increasing order.</strong></p>\r\n\r\n<p>The first entry in the answer is considered to be the top of the deck.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[17,13,11,2,3,5,7]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,13,3,11,5,17,7]</span>\r\n<strong>Explanation: </strong>\r\nWe get the deck in the order [17,13,11,2,3,5,7] (this order doesn't matter), and reorder it.\r\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\r\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\r\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\r\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\r\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\r\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\r\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\r\nWe reveal 17.\r\nSince all the cards revealed are in increasing order, the answer is correct.\r\n</pre>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 1000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 10^6</code></li>\r\n\t<li><code>A[i] != A[j]</code>&nbsp;for all&nbsp;<code>i != j</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u724c\u7ec4\u4e2d\u7684\u6bcf\u5f20\u5361\u724c\u90fd\u5bf9\u5e94\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6574\u6570\u3002\u4f60\u53ef\u4ee5\u6309\u4f60\u60f3\u8981\u7684\u987a\u5e8f\u5bf9\u8fd9\u5957\u5361\u7247\u8fdb\u884c\u6392\u5e8f\u3002</p>\n\n<p>\u6700\u521d\uff0c\u8fd9\u4e9b\u5361\u724c\u5728\u724c\u7ec4\u91cc\u662f\u6b63\u9762\u671d\u4e0b\u7684\uff08\u5373\uff0c\u672a\u663e\u793a\u72b6\u6001\uff09\u3002</p>\n\n<p>\u73b0\u5728\uff0c\u91cd\u590d\u6267\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u76f4\u5230\u663e\u793a\u6240\u6709\u5361\u724c\u4e3a\u6b62\uff1a</p>\n\n<ol>\n\t<li>\u4ece\u724c\u7ec4\u9876\u90e8\u62bd\u4e00\u5f20\u724c\uff0c\u663e\u793a\u5b83\uff0c\u7136\u540e\u5c06\u5176\u4ece\u724c\u7ec4\u4e2d\u79fb\u51fa\u3002</li>\n\t<li>\u5982\u679c\u724c\u7ec4\u4e2d\u4ecd\u6709\u724c\uff0c\u5219\u5c06\u4e0b\u4e00\u5f20\u5904\u4e8e\u724c\u7ec4\u9876\u90e8\u7684\u724c\u653e\u5728\u724c\u7ec4\u7684\u5e95\u90e8\u3002</li>\n\t<li>\u5982\u679c\u4ecd\u6709\u672a\u663e\u793a\u7684\u724c\uff0c\u90a3\u4e48\u8fd4\u56de\u6b65\u9aa4 1\u3002\u5426\u5219\uff0c\u505c\u6b62\u884c\u52a8\u3002</li>\n</ol>\n\n<p>\u8fd4\u56de\u80fd\u4ee5<strong>\u9012\u589e\u987a\u5e8f</strong>\u663e\u793a\u5361\u724c\u7684\u724c\u7ec4\u987a\u5e8f\u3002</p>\n\n<p>\u7b54\u6848\u4e2d\u7684\u7b2c\u4e00\u5f20\u724c\u88ab\u8ba4\u4e3a\u5904\u4e8e\u724c\u5806\u9876\u90e8\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[17,13,11,2,3,5,7]\n<strong>\u8f93\u51fa\uff1a</strong>[2,13,3,11,5,17,7]\n<strong>\u89e3\u91ca\uff1a\n</strong>\u6211\u4eec\u5f97\u5230\u7684\u724c\u7ec4\u987a\u5e8f\u4e3a [17,13,11,2,3,5,7]\uff08\u8fd9\u4e2a\u987a\u5e8f\u4e0d\u91cd\u8981\uff09\uff0c\u7136\u540e\u5c06\u5176\u91cd\u65b0\u6392\u5e8f\u3002\n\u91cd\u65b0\u6392\u5e8f\u540e\uff0c\u724c\u7ec4\u4ee5 [2,13,3,11,5,17,7] \u5f00\u59cb\uff0c\u5176\u4e2d 2 \u4f4d\u4e8e\u724c\u7ec4\u7684\u9876\u90e8\u3002\n\u6211\u4eec\u663e\u793a 2\uff0c\u7136\u540e\u5c06 13 \u79fb\u5230\u5e95\u90e8\u3002\u724c\u7ec4\u73b0\u5728\u662f [3,11,5,17,7,13]\u3002\n\u6211\u4eec\u663e\u793a 3\uff0c\u5e76\u5c06 11 \u79fb\u5230\u5e95\u90e8\u3002\u724c\u7ec4\u73b0\u5728\u662f [5,17,7,13,11]\u3002\n\u6211\u4eec\u663e\u793a 5\uff0c\u7136\u540e\u5c06 17 \u79fb\u5230\u5e95\u90e8\u3002\u724c\u7ec4\u73b0\u5728\u662f [7,13,11,17]\u3002\n\u6211\u4eec\u663e\u793a 7\uff0c\u5e76\u5c06 13 \u79fb\u5230\u5e95\u90e8\u3002\u724c\u7ec4\u73b0\u5728\u662f [11,17,13]\u3002\n\u6211\u4eec\u663e\u793a 11\uff0c\u7136\u540e\u5c06 17 \u79fb\u5230\u5e95\u90e8\u3002\u724c\u7ec4\u73b0\u5728\u662f [13,17]\u3002\n\u6211\u4eec\u5c55\u793a 13\uff0c\u7136\u540e\u5c06 17 \u79fb\u5230\u5e95\u90e8\u3002\u724c\u7ec4\u73b0\u5728\u662f [17]\u3002\n\u6211\u4eec\u663e\u793a 17\u3002\n\u7531\u4e8e\u6240\u6709\u5361\u7247\u90fd\u662f\u6309\u9012\u589e\u987a\u5e8f\u6392\u5217\u663e\u793a\u7684\uff0c\u6240\u4ee5\u7b54\u6848\u662f\u6b63\u786e\u7684\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 10^6</code></li>\n\t<li>\u5bf9\u4e8e\u6240\u6709\u7684&nbsp;<code>i != j</code>\uff0c<code>A[i] != A[j]</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "950",
        "link": "reveal-cards-in-increasing-order",
        "title": "Reveal Cards In Increasing Order",
        "is_locked": "Normal",
        "titleZh": "\u6309\u9012\u589e\u987a\u5e8f\u663e\u793a\u5361\u724c",
        "frequency": "76.6%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.</p>\r\n\r\n<p>A binary tree X&nbsp;is <em>flip equivalent</em> to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.</p>\r\n\r\n<p>Write a function that determines whether two binary trees&nbsp;are <em>flip equivalent</em>.&nbsp; The trees are given by root nodes <code>root1</code> and <code>root2</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root1 = <span id=\"example-input-1-1\">[1,2,3,4,5,6,null,null,null,7,8]</span>, root2 = <span id=\"example-input-1-2\">[1,3,2,null,6,4,5,null,null,null,null,8,7]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation: </strong>We flipped at nodes with values 1, 3, and 5.\r\n<img alt=\"Flipped Trees Diagram\" src=\"https://assets.leetcode.com/uploads/2018/11/29/tree_ex.png\" style=\"font-family: sans-serif, Arial, Verdana, &quot;Trebuchet MS&quot;; width: 455px; height: 200px;\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>Each tree will have at most <code>100</code> nodes.</li>\r\n\t<li>Each value in each tree will be a unique&nbsp;integer in the range <code>[0, 99]</code>.</li>\r\n</ol>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u6211\u4eec\u53ef\u4ee5\u4e3a\u4e8c\u53c9\u6811 T \u5b9a\u4e49\u4e00\u4e2a\u7ffb\u8f6c\u64cd\u4f5c\uff0c\u5982\u4e0b\u6240\u793a\uff1a\u9009\u62e9\u4efb\u610f\u8282\u70b9\uff0c\u7136\u540e\u4ea4\u6362\u5b83\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u3002</p>\n\n<p>\u53ea\u8981\u7ecf\u8fc7\u4e00\u5b9a\u6b21\u6570\u7684\u7ffb\u8f6c\u64cd\u4f5c\u540e\uff0c\u80fd\u4f7f X \u7b49\u4e8e Y\uff0c\u6211\u4eec\u5c31\u79f0\u4e8c\u53c9\u6811 X <em>\u7ffb\u8f6c\u7b49\u4ef7</em>\u4e8e\u4e8c\u53c9\u6811 Y\u3002</p>\n\n<p>\u7f16\u5199\u4e00\u4e2a\u5224\u65ad\u4e24\u4e2a\u4e8c\u53c9\u6811\u662f\u5426\u662f<em>\u7ffb\u8f6c\u7b49\u4ef7</em>\u7684\u51fd\u6570\u3002\u8fd9\u4e9b\u6811\u7531\u6839\u8282\u70b9&nbsp;<code>root1</code> \u548c <code>root2</code>&nbsp;\u7ed9\u51fa\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>We flipped at nodes with values 1, 3, and 5.\n<img alt=\"Flipped Trees Diagram\" src=\"https://assets.leetcode.com/uploads/2018/11/29/tree_ex.png\" style=\"\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6bcf\u68f5\u6811\u6700\u591a\u6709&nbsp;<code>100</code>&nbsp;\u4e2a\u8282\u70b9\u3002</li>\n\t<li>\u6bcf\u68f5\u6811\u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u662f\u552f\u4e00\u7684\u3001\u5728 <code>[0, 99]</code>&nbsp;\u8303\u56f4\u5185\u7684\u6574\u6570\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "leetId": "951",
        "link": "flip-equivalent-binary-trees",
        "title": "Flip Equivalent Binary Trees",
        "is_locked": "Normal",
        "titleZh": "\u7ffb\u8f6c\u7b49\u4ef7\u4e8c\u53c9\u6811",
        "frequency": "53.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a non-empty&nbsp;array of unique positive integers <code>A</code>, consider the following graph:</p>\r\n\r\n<ul>\r\n\t<li>There are <code>A.length</code> nodes, labelled <code>A[0]</code> to <code>A[A.length - 1];</code></li>\r\n\t<li>There is an edge between <code>A[i]</code> and <code>A[j]</code>&nbsp;if and only if&nbsp;<code>A[i]</code> and <code>A[j]</code> share a common factor greater than 1.</li>\r\n</ul>\r\n\r\n<p>Return the size of the largest connected component in the graph.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[4,6,15,35]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n<span><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/01/ex1.png\" style=\"width: 257px; height: 50px;\" /></span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[20,50,9,63]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n<span><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/01/ex2.png\" style=\"width: 293px; height: 50px;\" /></span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[2,3,6,7,4,12,21,39]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">8</span>\r\n<span><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/01/ex3.png\" style=\"width: 346px; height: 180px;\" /></span>\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 100000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u4e0d\u540c\u6b63\u6574\u6570\u7684\u7ec4\u6210\u7684\u975e\u7a7a\u6570\u7ec4 <code>A</code>\uff0c\u8003\u8651\u4e0b\u9762\u7684\u56fe\uff1a</p>\n\n<ul>\n\t<li>\u6709&nbsp;<code>A.length</code>&nbsp;\u4e2a\u8282\u70b9\uff0c\u6309\u4ece&nbsp;<code>A[0]</code>&nbsp;\u5230&nbsp;<code>A[A.length - 1]</code>&nbsp;\u6807\u8bb0\uff1b</li>\n\t<li>\u53ea\u6709\u5f53 <code>A[i]</code> \u548c <code>A[j]</code> \u5171\u7528\u4e00\u4e2a\u5927\u4e8e 1 \u7684\u516c\u56e0\u6570\u65f6\uff0c<code>A[i]</code>&nbsp;\u548c <code>A[j]</code> \u4e4b\u95f4\u624d\u6709\u4e00\u6761\u8fb9\u3002</li>\n</ul>\n\n<p>\u8fd4\u56de\u56fe\u4e2d\u6700\u5927\u8fde\u901a\u7ec4\u4ef6\u7684\u5927\u5c0f\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[4,6,15,35]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-uploads/uploads/2018/12/01/ex1.png\" style=\"height: 37px; width: 255px;\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/01/ex1.png\" style=\"height: 50px; width: 257px;\">\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[20,50,9,63]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/01/ex2.png\" style=\"height: 50px; width: 293px;\">\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,3,6,7,4,12,21,39]\n<strong>\u8f93\u51fa\uff1a</strong>8\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/01/ex3.png\" style=\"height: 180px; width: 346px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 100000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "952",
        "link": "largest-component-size-by-common-factor",
        "title": "Largest Component Size by Common Factor",
        "is_locked": "Normal",
        "titleZh": "\u6309\u516c\u56e0\u6570\u8ba1\u7b97\u6700\u5927\u7ec4\u4ef6\u5927\u5c0f",
        "frequency": "21.8%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>In an alien language, surprisingly they also use english lowercase letters, but possibly&nbsp;in a different <code>order</code>. The&nbsp;<code>order</code> of the alphabet&nbsp;is some permutation&nbsp;of lowercase letters.</p>\r\n\r\n<p>Given a sequence of <code>words</code>&nbsp;written in the alien language,&nbsp;and the <code>order</code> of the alphabet,&nbsp;return <code>true</code> if and only if the given <code>words</code>&nbsp;are sorted lexicographicaly in this alien language.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>words = <span id=\"example-input-1-1\">[&quot;hello&quot;,&quot;leetcode&quot;]</span>, order = <span id=\"example-input-1-2\">&quot;hlabcdefgijkmnopqrstuvwxyz&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">As &#39;h&#39; comes before &#39;l&#39; in this language, then the sequence is sorted.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>words = <span id=\"example-input-2-1\">[&quot;word&quot;,&quot;world&quot;,&quot;row&quot;]</span>, order = <span id=\"example-input-2-2\">&quot;worldabcefghijkmnpqstuvxyz&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">As &#39;d&#39; comes after &#39;l&#39; in this language, then words[0] &gt; words[1], hence the sequence is unsorted.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>words = <span id=\"example-input-3-1\">[&quot;apple&quot;,&quot;app&quot;]</span>, order = <span id=\"example-input-3-2\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">false\r\n</span><strong>Explanation: </strong>The first three characters &quot;app&quot; match, and the second string is shorter (in size.) According to lexicographical rules &quot;apple&quot; &gt; &quot;app&quot;, because &#39;l&#39; &gt; &#39;&empty;&#39;, where &#39;&empty;&#39; is defined as the blank character which is less than any other character (<a href=\"https://en.wikipedia.org/wiki/Lexicographical_order\" target=\"_blank\">More info</a>).\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\r\n\t<li><code>order.length == 26</code></li>\r\n\t<li>All characters in <code>words[i]</code> and <code>order</code> are english lowercase letters.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u67d0\u79cd\u5916\u661f\u8bed\u4e5f\u4f7f\u7528\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\uff0c\u4f46\u53ef\u80fd\u987a\u5e8f <code>order</code> \u4e0d\u540c\u3002\u5b57\u6bcd\u8868\u7684\u987a\u5e8f\uff08<code>order</code>\uff09\u662f\u4e00\u4e9b\u5c0f\u5199\u5b57\u6bcd\u7684\u6392\u5217\u3002</p>\n\n<p>\u7ed9\u5b9a\u4e00\u7ec4\u7528\u5916\u661f\u8bed\u4e66\u5199\u7684\u5355\u8bcd <code>words</code>\uff0c\u4ee5\u53ca\u5176\u5b57\u6bcd\u8868\u7684\u987a\u5e8f <code>order</code>\uff0c\u53ea\u6709\u5f53\u7ed9\u5b9a\u7684\u5355\u8bcd\u5728\u8fd9\u79cd\u5916\u661f\u8bed\u4e2d\u6309\u5b57\u5178\u5e8f\u6392\u5217\u65f6\uff0c\u8fd4\u56de <code>true</code>\uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>words = [&quot;hello&quot;,&quot;leetcode&quot;], order = &quot;hlabcdefgijkmnopqrstuvwxyz&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u5728\u8be5\u8bed\u8a00\u7684\u5b57\u6bcd\u8868\u4e2d\uff0c&#39;h&#39; \u4f4d\u4e8e &#39;l&#39; \u4e4b\u524d\uff0c\u6240\u4ee5\u5355\u8bcd\u5e8f\u5217\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>words = [&quot;word&quot;,&quot;world&quot;,&quot;row&quot;], order = &quot;worldabcefghijkmnpqstuvxyz&quot;\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u5728\u8be5\u8bed\u8a00\u7684\u5b57\u6bcd\u8868\u4e2d\uff0c&#39;d&#39; \u4f4d\u4e8e &#39;l&#39; \u4e4b\u540e\uff0c\u90a3\u4e48 words[0] &gt; words[1]\uff0c\u56e0\u6b64\u5355\u8bcd\u5e8f\u5217\u4e0d\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\u3002</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>words = [&quot;apple&quot;,&quot;app&quot;], order = &quot;abcdefghijklmnopqrstuvwxyz&quot;\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u5f53\u524d\u4e09\u4e2a\u5b57\u7b26 &quot;app&quot; \u5339\u914d\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u76f8\u5bf9\u77ed\u4e00\u4e9b\uff0c\u7136\u540e\u6839\u636e\u8bcd\u5178\u7f16\u7e82\u89c4\u5219 &quot;apple&quot; &gt; &quot;app&quot;\uff0c\u56e0\u4e3a &#39;l&#39; &gt; &#39;&empty;&#39;\uff0c\u5176\u4e2d &#39;&empty;&#39; \u662f\u7a7a\u767d\u5b57\u7b26\uff0c\u5b9a\u4e49\u4e3a\u6bd4\u4efb\u4f55\u5176\u4ed6\u5b57\u7b26\u90fd\u5c0f\uff08<a href=\"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E5%BA%8F\" target=\"_blank\">\u66f4\u591a\u4fe1\u606f</a>\uff09\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>order.length == 26</code></li>\n\t<li>\u5728&nbsp;<code>words[i]</code>&nbsp;\u548c&nbsp;<code>order</code>&nbsp;\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u662f\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "leetId": "953",
        "link": "verifying-an-alien-dictionary",
        "title": "Verifying an Alien Dictionary",
        "is_locked": "Normal",
        "titleZh": "\u9a8c\u8bc1\u5916\u661f\u8bed\u8bcd\u5178",
        "frequency": "53.2%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given an array of integers <code>A</code>&nbsp;with even length, return <code>true</code> if and only if it is possible to reorder it such that <code>A[2 * i + 1] = 2 * A[2 * i]</code> for every <code>0 &lt;=&nbsp;i &lt; len(A) / 2</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<ol>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,1,3,6]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[2,1,2,6]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[4,-2,2,-4]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true</span>\r\n<strong>Explanation: </strong><span id=\"example-output-3\">We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[1,2,4,16,8,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">false</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt;= 30000</code></li>\r\n\t<li><code>A.length</code> is even</li>\r\n\t<li><code>-100000 &lt;= A[i] &lt;= 100000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u53ea\u6709\u5bf9&nbsp;<code>A</code>&nbsp;\u8fdb\u884c\u91cd\u7ec4\u540e\u53ef\u4ee5\u6ee1\u8db3 &ldquo;\u5bf9\u4e8e\u6bcf\u4e2a <code>0 &lt;=&nbsp;i &lt; len(A) / 2</code>\uff0c\u90fd\u6709 <code>A[2 * i + 1] = 2 * A[2 * i]</code>&rdquo;&nbsp;\u65f6\uff0c\u8fd4\u56de <code>true</code>\uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,1,3,6]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1,2,6]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[4,-2,2,-4]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u7528 [-2,-4] \u548c [2,4] \u8fd9\u4e24\u7ec4\u7ec4\u6210 [-2,-4,2,4] \u6216\u662f [2,4,-2,-4]</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,4,16,8,4]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 30000</code></li>\n\t<li><code>A.length</code>&nbsp;\u4e3a\u5076\u6570</li>\n\t<li><code>-100000 &lt;= A[i] &lt;= 100000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "leetId": "954",
        "link": "array-of-doubled-pairs",
        "title": "Array of Doubled Pairs",
        "is_locked": "Normal",
        "titleZh": "\u4e8c\u500d\u6570\u5bf9\u6570\u7ec4",
        "frequency": "22.8%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>We are given an array&nbsp;<code>A</code> of <code>N</code> lowercase letter strings, all of the same length.</p>\r\n\r\n<p>Now, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.</p>\r\n\r\n<p>For example, if we have an array <code>A = [&quot;abcdef&quot;,&quot;uvwxyz&quot;]</code> and deletion indices <code>{0, 2, 3}</code>, then the final array after deletions is <code>[&quot;bef&quot;,&quot;vyz&quot;]</code>.</p>\r\n\r\n<p>Suppose we chose a set of deletion indices <code>D</code> such that after deletions, the final array has its elements in <strong>lexicographic</strong> order (<code>A[0] &lt;= A[1] &lt;= A[2] ... &lt;= A[A.length - 1]</code>).</p>\r\n\r\n<p>Return the minimum possible value of <code>D.length</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<ol>\r\n</ol>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;ca&quot;,&quot;bb&quot;,&quot;ac&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>\r\nAfter deleting the first column, A = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].\r\nNow A is in lexicographic order (ie. A[0] &lt;= A[1] &lt;= A[2]).\r\nWe require at least 1 deletion since initially A was not in lexicographic order, so the answer is 1.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span>[&quot;xc&quot;,&quot;yb&quot;,&quot;za&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">0</span>\r\n<strong>Explanation: </strong>\r\nA is already in lexicographic order, so we don&#39;t need to delete anything.\r\nNote that the rows of A are not necessarily in lexicographic order:\r\nie. it is NOT necessarily true that (A[0][0] &lt;= A[0][1] &lt;= ...)\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[&quot;zyx&quot;,&quot;wvu&quot;,&quot;tsr&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation: </strong>\r\nWe have to delete every column.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u7531&nbsp;<code>N</code>&nbsp;\u4e2a\u5c0f\u5199\u5b57\u6bcd\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u76f8\u7b49\u3002</p>\n\n<p>\u9009\u53d6\u4e00\u4e2a\u5220\u9664\u7d22\u5f15\u5e8f\u5217\uff0c\u5bf9\u4e8e&nbsp;<code>A</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u5220\u9664\u5bf9\u5e94\u6bcf\u4e2a\u7d22\u5f15\u5904\u7684\u5b57\u7b26\u3002</p>\n\n<p>\u6bd4\u5982\uff0c\u6709&nbsp;<code>A = [&quot;abcdef&quot;, &quot;uvwxyz&quot;]</code>\uff0c\u5220\u9664\u7d22\u5f15\u5e8f\u5217&nbsp;<code>{0, 2, 3}</code>\uff0c\u5220\u9664\u540e&nbsp;<code>A</code>&nbsp;\u4e3a<code>[&quot;bef&quot;, &quot;vyz&quot;]</code>\u3002</p>\n\n<p>\u5047\u8bbe\uff0c\u6211\u4eec\u9009\u62e9\u4e86\u4e00\u7ec4\u5220\u9664\u7d22\u5f15&nbsp;<code>D</code>\uff0c\u90a3\u4e48\u5728\u6267\u884c\u5220\u9664\u64cd\u4f5c\u4e4b\u540e\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u6570\u7ec4\u7684\u5143\u7d20\u662f\u6309 <strong>\u5b57\u5178\u5e8f</strong>\uff08<code>A[0] &lt;= A[1] &lt;= A[2] ... &lt;= A[A.length - 1]</code>\uff09\u6392\u5217\u7684\uff0c\u7136\u540e\u8bf7\u4f60\u8fd4\u56de&nbsp;<code>D.length</code>&nbsp;\u7684\u6700\u5c0f\u53ef\u80fd\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;ca&quot;,&quot;bb&quot;,&quot;ac&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a </strong>\n\u5220\u9664\u7b2c\u4e00\u5217\u540e\uff0cA = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\u3002\n\u73b0\u5728 A \u4e2d\u5143\u7d20\u662f\u6309\u5b57\u5178\u6392\u5217\u7684 (\u5373\uff0cA[0] &lt;= A[1] &lt;= A[2])\u3002\n\u6211\u4eec\u81f3\u5c11\u9700\u8981\u8fdb\u884c 1 \u6b21\u5220\u9664\uff0c\u56e0\u4e3a\u6700\u521d A \u4e0d\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff0c\u6240\u4ee5\u7b54\u6848\u662f 1\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;xc&quot;,&quot;yb&quot;,&quot;za&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\nA \u7684\u5217\u5df2\u7ecf\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u5220\u9664\u4efb\u4f55\u4e1c\u897f\u3002\n\u6ce8\u610f A \u7684\u884c\u4e0d\u9700\u8981\u6309\u5b57\u5178\u5e8f\u6392\u5217\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0cA[0][0] &lt;= A[0][1] &lt;= ... \u4e0d\u4e00\u5b9a\u6210\u7acb\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;zyx&quot;,&quot;wvu&quot;,&quot;tsr&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6211\u4eec\u5fc5\u987b\u5220\u6389\u6bcf\u4e00\u5217\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "leetId": "955",
        "link": "delete-columns-to-make-sorted-ii",
        "title": "Delete Columns to Make Sorted II",
        "is_locked": "Normal",
        "titleZh": "\u5220\u5217\u9020\u5e8f II",
        "frequency": "23.9%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>You are installing a billboard and want it to have the largest height.&nbsp; The billboard will have two steel supports, one on each side.&nbsp; Each steel support must be an equal height.</p>\r\n\r\n<p>You have a collection of <code>rods</code> which can be welded together.&nbsp; For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.</p>\r\n\r\n<p>Return the largest possible height of your billboard installation.&nbsp; If you cannot support the billboard, return 0.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3,6]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">6</span>\r\n<strong>Explanation:</strong> We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,2,3,4,5,6]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">10</span>\r\n<strong>Explanation:</strong> We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.\r\n</pre>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0</span>\r\n<strong>Explanation: </strong>The billboard cannot be supported, so we return 0.\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= rods.length &lt;= 20</code></li>\r\n\t<li><code>1 &lt;= rods[i] &lt;= 1000</code></li>\r\n\t<li><code>The sum of rods is at most 5000.</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u4f60\u6b63\u5728\u5b89\u88c5\u4e00\u4e2a\u5e7f\u544a\u724c\uff0c\u5e76\u5e0c\u671b\u5b83\u9ad8\u5ea6\u6700\u5927\u3002\u8fd9\u5757\u5e7f\u544a\u724c\u5c06\u6709\u4e24\u4e2a\u94a2\u5236\u652f\u67b6\uff0c\u4e24\u8fb9\u5404\u4e00\u4e2a\u3002\u6bcf\u4e2a\u94a2\u652f\u67b6\u7684\u9ad8\u5ea6\u5fc5\u987b\u76f8\u7b49\u3002</p>\n\n<p>\u4f60\u6709\u4e00\u5806\u53ef\u4ee5\u710a\u63a5\u5728\u4e00\u8d77\u7684\u94a2\u7b4b <code>rods</code>\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u94a2\u7b4b\u7684\u957f\u5ea6\u4e3a 1\u30012 \u548c 3\uff0c\u5219\u53ef\u4ee5\u5c06\u5b83\u4eec\u710a\u63a5\u5728\u4e00\u8d77\u5f62\u6210\u957f\u5ea6\u4e3a 6 \u7684\u652f\u67b6\u3002</p>\n\n<p>\u8fd4\u56de\u5e7f\u544a\u724c\u7684\u6700\u5927\u53ef\u80fd\u5b89\u88c5\u9ad8\u5ea6\u3002\u5982\u679c\u6ca1\u6cd5\u5b89\u88c5\u5e7f\u544a\u724c\uff0c\u8bf7\u8fd4\u56de 0\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,6]\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u6709\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6 {1,2,3} \u548c {6}\uff0c\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684\u548c sum = 6\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,4,5,6]\n<strong>\u8f93\u51fa\uff1a</strong>10\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u6709\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u5b50\u96c6 {2,3,5} \u548c {4,6}\uff0c\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684\u548c sum = 10\u3002</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u6ca1\u6cd5\u5b89\u88c5\u5e7f\u544a\u724c\uff0c\u6240\u4ee5\u8fd4\u56de 0\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= rods.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= rods[i] &lt;= 1000</code></li>\n\t<li><code>\u94a2\u7b4b\u7684\u957f\u5ea6\u603b\u548c\u6700\u591a\u4e3a 5000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "956",
        "link": "tallest-billboard",
        "title": "Tallest Billboard",
        "is_locked": "Normal",
        "titleZh": "\u6700\u9ad8\u7684\u5e7f\u544a\u724c",
        "frequency": "29.3%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>There are 8 prison cells in a row, and each cell is either occupied or vacant.</p>\r\n\r\n<p>Each day, whether the cell is occupied or vacant changes according to the following rules:</p>\r\n\r\n<ul>\r\n\t<li>If a cell has two adjacent neighbors that are both occupied or both vacant,&nbsp;then the cell becomes occupied.</li>\r\n\t<li>Otherwise, it becomes vacant.</li>\r\n</ul>\r\n\r\n<p>(Note that because the prison is a row, the first and the last cells in the row can&#39;t have two adjacent neighbors.)</p>\r\n\r\n<p>We describe the current state of the prison&nbsp;in the following way:&nbsp;<code>cells[i] == 1</code> if the <code>i</code>-th cell is occupied, else <code>cells[i] == 0</code>.</p>\r\n\r\n<p>Given the initial state of the prison, return the state of the prison after <code>N</code> days (and <code>N</code> such changes described above.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<ol>\r\n</ol>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>cells = <span id=\"example-input-1-1\">[0,1,0,1,1,0,0,1]</span>, N = <span id=\"example-input-1-2\">7</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,0,1,1,0,0,0,0]</span>\r\n<strong>Explanation: \r\n</strong><span id=\"example-output-1\">The following table summarizes the state of the prison on each day:\r\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\r\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\r\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\r\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\r\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\r\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\r\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\r\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]</span>\r\n\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>cells = <span id=\"example-input-2-1\">[1,0,0,1,0,0,1,0]</span>, N = <span id=\"example-input-2-2\">1000000000</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[0,0,1,1,1,1,1,0]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>cells.length == 8</code></li>\r\n\t<li><code>cells[i]</code> is in <code>{0, 1}</code></li>\r\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\r\n</ol>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>8 \u95f4\u7262\u623f\u6392\u6210\u4e00\u6392\uff0c\u6bcf\u95f4\u7262\u623f\u4e0d\u662f\u6709\u4eba\u4f4f\u5c31\u662f\u7a7a\u7740\u3002</p>\n\n<p>\u6bcf\u5929\uff0c\u65e0\u8bba\u7262\u623f\u662f\u88ab\u5360\u7528\u6216\u7a7a\u7f6e\uff0c\u90fd\u4f1a\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\u8fdb\u884c\u66f4\u6539\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c\u4e00\u95f4\u7262\u623f\u7684\u4e24\u4e2a\u76f8\u90bb\u7684\u623f\u95f4\u90fd\u88ab\u5360\u7528\u6216\u90fd\u662f\u7a7a\u7684\uff0c\u90a3\u4e48\u8be5\u7262\u623f\u5c31\u4f1a\u88ab\u5360\u7528\u3002</li>\n\t<li>\u5426\u5219\uff0c\u5b83\u5c31\u4f1a\u88ab\u7a7a\u7f6e\u3002</li>\n</ul>\n\n<p>\uff08\u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u76d1\u72f1\u4e2d\u7684\u7262\u623f\u6392\u6210\u4e00\u884c\uff0c\u6240\u4ee5\u884c\u4e2d\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u623f\u95f4\u65e0\u6cd5\u6709\u4e24\u4e2a\u76f8\u90bb\u7684\u623f\u95f4\u3002\uff09</p>\n\n<p>\u6211\u4eec\u7528\u4ee5\u4e0b\u65b9\u5f0f\u63cf\u8ff0\u76d1\u72f1\u7684\u5f53\u524d\u72b6\u6001\uff1a\u5982\u679c\u7b2c <code>i</code> \u95f4\u7262\u623f\u88ab\u5360\u7528\uff0c\u5219 <code>cell[i]==1</code>\uff0c\u5426\u5219 <code>cell[i]==0</code>\u3002</p>\n\n<p>\u6839\u636e\u76d1\u72f1\u7684\u521d\u59cb\u72b6\u6001\uff0c\u5728 <code>N</code> \u5929\u540e\u8fd4\u56de\u76d1\u72f1\u7684\u72b6\u51b5\uff08\u548c\u4e0a\u8ff0 N \u79cd\u53d8\u5316\uff09\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>cells = [0,1,0,1,1,0,0,1], N = 7\n<strong>\u8f93\u51fa\uff1a</strong>[0,0,1,1,0,0,0,0]\n<strong>\u89e3\u91ca\uff1a\n</strong>\u4e0b\u8868\u6982\u8ff0\u4e86\u76d1\u72f1\u6bcf\u5929\u7684\u72b6\u51b5\uff1a\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]\n\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>cells = [1,0,0,1,0,0,1,0], N = 1000000000\n<strong>\u8f93\u51fa\uff1a</strong>[0,0,1,1,1,1,1,0]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>cells.length == 8</code></li>\n\t<li><code>cells[i]</code>&nbsp;\u7684\u503c\u4e3a <code>0</code> \u6216 <code>1</code>&nbsp;</li>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "leetId": "957",
        "link": "prison-cells-after-n-days",
        "title": "Prison Cells After N Days",
        "is_locked": "Normal",
        "titleZh": "N \u5929\u540e\u7684\u7262\u623f",
        "frequency": "30.7%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a binary tree, determine if it is a <em>complete binary tree</em>.</p>\r\n\r\n<p><u><b>Definition of a complete binary tree from <a href=\"http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees\" target=\"_blank\">Wikipedia</a>:</b></u><br />\r\nIn a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2<sup>h</sup> nodes inclusive at the last level h.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/complete-binary-tree-1.png\" style=\"width: 180px; height: 145px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3,4,5,6]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<span><strong>Explanation: </strong></span>Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/complete-binary-tree-2.png\" style=\"width: 200px; height: 145px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,2,3,4,5,null,7]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n<strong>Explanation: </strong>The node with value 7 isn&#39;t as far left as possible.<span>\r\n</span></pre>\r\n\r\n<div>&nbsp;</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The tree will have between 1 and 100 nodes.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u786e\u5b9a\u5b83\u662f\u5426\u662f\u4e00\u4e2a<em>\u5b8c\u5168\u4e8c\u53c9\u6811</em>\u3002</p>\n\n<p><strong><a href=\"https://baike.baidu.com/item/\u5b8c\u5168\u4e8c\u53c9\u6811/7773232?fr=aladdin\" target=\"_blank\">\u767e\u5ea6\u767e\u79d1</a>\u4e2d\u5bf9\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</strong></p>\n\n<p>\u82e5\u8bbe\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a h\uff0c\u9664\u7b2c h \u5c42\u5916\uff0c\u5176\u5b83\u5404\u5c42 (1\uff5eh-1) \u7684\u7ed3\u70b9\u6570\u90fd\u8fbe\u5230\u6700\u5927\u4e2a\u6570\uff0c\u7b2c h \u5c42\u6240\u6709\u7684\u7ed3\u70b9\u90fd\u8fde\u7eed\u96c6\u4e2d\u5728\u6700\u5de6\u8fb9\uff0c\u8fd9\u5c31\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\uff08\u6ce8\uff1a\u7b2c h \u5c42\u53ef\u80fd\u5305\u542b 1~&nbsp;2<sup>h</sup>&nbsp;\u4e2a\u8282\u70b9\u3002\uff09</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/complete-binary-tree-1.png\" style=\"height: 145px; width: 180px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,4,5,6]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u540e\u4e00\u5c42\u524d\u7684\u6bcf\u4e00\u5c42\u90fd\u662f\u6ee1\u7684\uff08\u5373\uff0c\u7ed3\u70b9\u503c\u4e3a {1} \u548c {2,3} \u7684\u4e24\u5c42\uff09\uff0c\u4e14\u6700\u540e\u4e00\u5c42\u4e2d\u7684\u6240\u6709\u7ed3\u70b9\uff08{4,5,6}\uff09\u90fd\u5c3d\u53ef\u80fd\u5730\u5411\u5de6\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/complete-binary-tree-2.png\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,4,5,null,7]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u503c\u4e3a 7 \u7684\u7ed3\u70b9\u6ca1\u6709\u5c3d\u53ef\u80fd\u9760\u5411\u5de6\u4fa7\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6811\u4e2d\u5c06\u4f1a\u6709 1 \u5230 100 \u4e2a\u7ed3\u70b9\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "leetId": "958",
        "link": "check-completeness-of-a-binary-tree",
        "title": "Check Completeness of a Binary Tree",
        "is_locked": "Normal",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u5b8c\u5168\u6027\u68c0\u9a8c",
        "frequency": "42.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>In a N x N&nbsp;<code>grid</code> composed of 1 x 1 squares, each 1 x 1 square consists of a <code>/</code>, <code>\\</code>, or blank space.&nbsp; These characters divide the square into contiguous regions.</p>\r\n\r\n<p>(Note that backslash characters are escaped, so a <code>\\</code>&nbsp;is represented as <code>&quot;\\\\&quot;</code>.)</p>\r\n\r\n<p>Return the number of regions.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<div>\r\n<ol>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong><span id=\"example-input-1-1\">[\r\n&nbsp; &quot; /&quot;,\r\n&nbsp; &quot;/ &quot;\r\n]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>The 2x2 grid is as follows:\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/1.png\" style=\"width: 82px; height: 82px;\" />\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong><span id=\"example-input-2-1\">[\r\n&nbsp; &quot; /&quot;,\r\n&nbsp; &quot;  &quot;\r\n]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1</span>\r\n<strong>Explanation: </strong>The 2x2 grid is as follows:\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/2.png\" style=\"width: 82px; height: 82px;\" />\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong><span id=\"example-input-3-1\">[\r\n&nbsp; &quot;\\\\/&quot;,\r\n&nbsp; &quot;/\\\\&quot;\r\n]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">4</span>\r\n<strong>Explanation: </strong>(Recall that because \\ characters are escaped, &quot;\\\\/&quot; refers to \\/, and &quot;/\\\\&quot; refers to /\\.)\r\nThe 2x2 grid is as follows:\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/3.png\" style=\"width: 82px; height: 82px;\" />\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong><span id=\"example-input-4-1\">[\r\n&nbsp; &quot;/\\\\&quot;,\r\n&nbsp; &quot;\\\\/&quot;\r\n]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">5</span>\r\n<strong>Explanation: </strong>(Recall that because \\ characters are escaped, &quot;/\\\\&quot; refers to /\\, and &quot;\\\\/&quot; refers to \\/.)\r\nThe 2x2 grid is as follows:\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/4.png\" style=\"width: 82px; height: 82px;\" />\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong><span id=\"example-input-5-1\">[\r\n&nbsp; &quot;//&quot;,\r\n&nbsp; &quot;/ &quot;\r\n]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">3</span>\r\n<strong>Explanation: </strong>The 2x2 grid is as follows:\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/5.png\" style=\"width: 82px; height: 82px;\" />\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= grid.length == grid[0].length &lt;= 30</code></li>\r\n\t<li><code>grid[i][j]</code> is either <code>&#39;/&#39;</code>, <code>&#39;\\&#39;</code>, or <code>&#39; &#39;</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u5728\u7531 1 x 1 \u65b9\u683c\u7ec4\u6210\u7684 N x N \u7f51\u683c&nbsp;<code>grid</code> \u4e2d\uff0c\u6bcf\u4e2a 1 x 1&nbsp;\u65b9\u5757\u7531 <code>/</code>\u3001<code>\\</code> \u6216\u7a7a\u683c\u6784\u6210\u3002\u8fd9\u4e9b\u5b57\u7b26\u4f1a\u5c06\u65b9\u5757\u5212\u5206\u4e3a\u4e00\u4e9b\u5171\u8fb9\u7684\u533a\u57df\u3002</p>\n\n<p>\uff08\u8bf7\u6ce8\u610f\uff0c\u53cd\u659c\u6760\u5b57\u7b26\u662f\u8f6c\u4e49\u7684\uff0c\u56e0\u6b64 <code>\\</code> \u7528 <code>&quot;\\\\&quot;</code>&nbsp;\u8868\u793a\u3002\uff09\u3002</p>\n\n<p>\u8fd4\u56de\u533a\u57df\u7684\u6570\u76ee\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n</strong>[\n&nbsp; &quot; /&quot;,\n&nbsp; &quot;/ &quot;\n]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>2x2 \u7f51\u683c\u5982\u4e0b\uff1a\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/1.png\"></pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n</strong>[\n&nbsp; &quot; /&quot;,\n&nbsp; &quot;  &quot;\n]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>2x2 \u7f51\u683c\u5982\u4e0b\uff1a\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/2.png\"></pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n</strong>[\n&nbsp; &quot;\\\\/&quot;,\n&nbsp; &quot;/\\\\&quot;\n]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u56e0\u4e3a \\ \u5b57\u7b26\u662f\u8f6c\u4e49\u7684\uff0c\u6240\u4ee5 &quot;\\\\/&quot; \u8868\u793a \\/\uff0c\u800c &quot;/\\\\&quot; \u8868\u793a /\\\u3002\uff09\n2x2 \u7f51\u683c\u5982\u4e0b\uff1a\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/3.png\"></pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n</strong>[\n&nbsp; &quot;/\\\\&quot;,\n&nbsp; &quot;\\\\/&quot;\n]\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u56e0\u4e3a \\ \u5b57\u7b26\u662f\u8f6c\u4e49\u7684\uff0c\u6240\u4ee5 &quot;/\\\\&quot; \u8868\u793a /\\\uff0c\u800c &quot;\\\\/&quot; \u8868\u793a \\/\u3002\uff09\n2x2 \u7f51\u683c\u5982\u4e0b\uff1a\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/4.png\"></pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a\n</strong>[\n&nbsp; &quot;//&quot;,\n&nbsp; &quot;/ &quot;\n]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>2x2 \u7f51\u683c\u5982\u4e0b\uff1a\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/5.png\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length == grid[0].length &lt;= 30</code></li>\n\t<li><code>grid[i][j]</code> \u662f&nbsp;<code>&#39;/&#39;</code>\u3001<code>&#39;\\&#39;</code>\u3001\u6216&nbsp;<code>&#39; &#39;</code>\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "leetId": "959",
        "link": "regions-cut-by-slashes",
        "title": "Regions Cut By Slashes",
        "is_locked": "Normal",
        "titleZh": "\u7531\u659c\u6760\u5212\u5206\u533a\u57df",
        "frequency": "57.7%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>We are given an array&nbsp;<code>A</code> of <code>N</code> lowercase letter strings, all of the same length.</p>\r\n\r\n<p>Now, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.</p>\r\n\r\n<p>For example, if we have an array <code>A = [&quot;babca&quot;,&quot;bbazb&quot;]</code> and deletion indices <code>{0, 1, 4}</code>, then the final array after deletions is <code>[&quot;bc&quot;,&quot;az&quot;]</code>.</p>\r\n\r\n<p>Suppose we chose a set of deletion indices <code>D</code> such that after deletions, the final array has <strong>every element (row) in&nbsp;lexicographic</strong> order.</p>\r\n\r\n<p>For clarity, <code>A[0]</code> is in lexicographic order (ie. <code>A[0][0] &lt;= A[0][1] &lt;= ... &lt;= A[0][A[0].length - 1]</code>), <code>A[1]</code> is in lexicographic order (ie. <code>A[1][0] &lt;= A[1][1] &lt;= ... &lt;= A[1][A[1].length - 1]</code>), and so on.</p>\r\n\r\n<p>Return the minimum possible value of <code>D.length</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;babca&quot;,&quot;bbazb&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation: </strong>After deleting columns 0, 1, and 4, the final array is A = [&quot;bc&quot;, &quot;az&quot;].\r\nBoth these rows are individually in lexicographic order (ie. A[0][0] &lt;= A[0][1] and A[1][0] &lt;= A[1][1]).\r\nNote that A[0] &gt; A[1] - the array A isn&#39;t necessarily in lexicographic order.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;edcba&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">4</span>\r\n<strong>Explanation: </strong>If we delete less than 4 columns, the only row won&#39;t be lexicographically sorted.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[&quot;ghi&quot;,&quot;def&quot;,&quot;abc&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0</span>\r\n<strong>Explanation: </strong>All rows are already lexicographically sorted.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u7531&nbsp;<code>N</code>&nbsp;\u4e2a\u5c0f\u5199\u5b57\u6bcd\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u76f8\u7b49\u3002</p>\n\n<p>\u9009\u53d6\u4e00\u4e2a\u5220\u9664\u7d22\u5f15\u5e8f\u5217\uff0c\u5bf9\u4e8e&nbsp;<code>A</code>&nbsp;\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\uff0c\u5220\u9664\u5bf9\u5e94\u6bcf\u4e2a\u7d22\u5f15\u5904\u7684\u5b57\u7b26\u3002</p>\n\n<p>\u6bd4\u5982\uff0c\u6709&nbsp;<code>A = [&quot;babca&quot;,&quot;bbazb&quot;]</code>\uff0c\u5220\u9664\u7d22\u5f15\u5e8f\u5217&nbsp;<code>{0, 1, 4}</code>\uff0c\u5220\u9664\u540e&nbsp;<code>A</code>&nbsp;\u4e3a<code>[&quot;bc&quot;,&quot;az&quot;]</code>\u3002</p>\n\n<p>\u5047\u8bbe\uff0c\u6211\u4eec\u9009\u62e9\u4e86\u4e00\u7ec4\u5220\u9664\u7d22\u5f15&nbsp;<code>D</code>\uff0c\u90a3\u4e48\u5728\u6267\u884c\u5220\u9664\u64cd\u4f5c\u4e4b\u540e\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u6570\u7ec4\u7684\u884c\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u6309<strong>\u5b57\u5178\u5e8f</strong>\u6392\u5217\u7684\u3002</p>\n\n<p>\u6e05\u695a\u8d77\u89c1\uff0c<code>A[0]</code>&nbsp;\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff08\u5373\uff0c<code>A[0][0] &lt;= A[0][1] &lt;= ... &lt;= A[0][A[0].length - 1]</code>\uff09\uff0c<code>A[1]</code>&nbsp;\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff08\u5373\uff0c<code>A[1][0] &lt;= A[1][1] &lt;= ... &lt;= A[1][A[1].length - 1]</code>\uff09\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002</p>\n\n<p>\u8bf7\u4f60\u8fd4\u56de&nbsp;<code>D.length</code>&nbsp;\u7684\u6700\u5c0f\u53ef\u80fd\u503c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;babca&quot;,&quot;bbazb&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a\n</strong>\u5220\u9664 0\u30011 \u548c 4 \u8fd9\u4e09\u5217\u540e\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u6570\u7ec4\u662f A = [&quot;bc&quot;, &quot;az&quot;]\u3002\n\u8fd9\u4e24\u884c\u662f\u5206\u522b\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\uff08\u5373\uff0cA[0][0] &lt;= A[0][1] \u4e14 A[1][0] &lt;= A[1][1]\uff09\u3002\n\u6ce8\u610f\uff0cA[0] &gt; A[1] &mdash;&mdash; \u6570\u7ec4 A \u4e0d\u4e00\u5b9a\u662f\u6309\u5b57\u5178\u5e8f\u6392\u5217\u7684\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;edcba&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u5982\u679c\u5220\u9664\u7684\u5217\u5c11\u4e8e 4 \u5217\uff0c\u5219\u5269\u4e0b\u7684\u884c\u90fd\u4e0d\u4f1a\u6309\u5b57\u5178\u5e8f\u6392\u5217\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;ghi&quot;,&quot;def&quot;,&quot;abc&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u6240\u6709\u884c\u90fd\u5df2\u6309\u5b57\u5178\u5e8f\u6392\u5217\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "960",
        "link": "delete-columns-to-make-sorted-iii",
        "title": "Delete Columns to Make Sorted III",
        "is_locked": "Normal",
        "titleZh": "\u5220\u5217\u9020\u5e8f III",
        "frequency": "46.3%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>In a array <code>A</code> of size <code>2N</code>, there are <code>N+1</code> unique elements, and exactly one of these elements is repeated N times.</p>\r\n\r\n<p>Return the element repeated <code>N</code> times.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[2,1,2,5,3,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[5,1,5,2,5,3,5,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">5</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>4 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt; 10000</code></li>\r\n\t<li><code>A.length</code> is even</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u5728\u5927\u5c0f\u4e3a <code>2N</code>&nbsp;\u7684\u6570\u7ec4 <code>A</code>&nbsp;\u4e2d\u6709 <code>N+1</code> \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u5143\u7d20\u91cd\u590d\u4e86 <code>N</code> \u6b21\u3002</p>\n\n<p>\u8fd4\u56de\u91cd\u590d\u4e86 <code>N</code>&nbsp;\u6b21\u7684\u90a3\u4e2a\u5143\u7d20\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,3]\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1,2,5,3,2]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,1,5,2,5,3,5,4]\n<strong>\u8f93\u51fa\uff1a</strong>5\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>4 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt; 10000</code></li>\n\t<li><code>A.length</code>&nbsp;\u4e3a\u5076\u6570</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "leetId": "961",
        "link": "n-repeated-element-in-size-2n-array",
        "title": "N-Repeated Element in Size 2N Array",
        "is_locked": "Normal",
        "titleZh": "\u91cd\u590d N \u6b21\u7684\u5143\u7d20",
        "frequency": "66.8%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of integers, a <em>ramp</em>&nbsp;is a tuple <code>(i, j)</code> for which <code>i &lt; j</code>&nbsp;and&nbsp;<code>A[i] &lt;= A[j]</code>.&nbsp; The width of such a&nbsp;ramp is <code>j - i</code>.</p>\r\n\r\n<p>Find the maximum width of a ramp in <code>A</code>.&nbsp; If one doesn&#39;t exist, return 0.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[6,0,8,2,1,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n<strong>Explanation: </strong>\r\nThe maximum width ramp is achieved at (i, j) = (1, 5): A[1] = 0 and A[5] = 5.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[9,8,1,0,1,9,4,0,4,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">7</span>\r\n<strong>Explanation: </strong>\r\nThe maximum width ramp is achieved at (i, j) = (2, 9): A[2] = 1 and A[9] = 1.\r\n</pre>\r\n</div>\r\n\r\n<div>\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= A.length &lt;= 50000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 50000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c<em>\u5761</em>\u662f\u5143\u7ec4&nbsp;<code>(i, j)</code>\uff0c\u5176\u4e2d&nbsp;&nbsp;<code>i &lt; j</code>&nbsp;\u4e14&nbsp;<code>A[i] &lt;= A[j]</code>\u3002\u8fd9\u6837\u7684\u5761\u7684\u5bbd\u5ea6\u4e3a&nbsp;<code>j - i</code>\u3002</p>\n\n<p>\u627e\u51fa&nbsp;<code>A</code>&nbsp;\u4e2d\u7684\u5761\u7684\u6700\u5927\u5bbd\u5ea6\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de 0 \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[6,0,8,2,1,5]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6700\u5927\u5bbd\u5ea6\u7684\u5761\u4e3a (i, j) = (1, 5): A[1] = 0 \u4e14 A[5] = 5.\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[9,8,1,0,1,9,4,0,4,1]\n<strong>\u8f93\u51fa\uff1a</strong>7\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6700\u5927\u5bbd\u5ea6\u7684\u5761\u4e3a (i, j) = (2, 9): A[2] = 1 \u4e14 A[9] = 1.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 50000</code></li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "962",
        "link": "maximum-width-ramp",
        "title": "Maximum Width Ramp",
        "is_locked": "Normal",
        "titleZh": "\u6700\u5927\u5bbd\u5ea6\u5761",
        "frequency": "32.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a set of points in the xy-plane, determine the minimum area of <strong>any</strong> rectangle formed from these points, with sides <strong>not necessarily parallel</strong> to the x and y axes.</p>\r\n\r\n<p>If there isn&#39;t any rectangle, return 0.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/21/1a.png\" style=\"width: 150px; height: 151px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[1,2],[2,1],[1,0],[0,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2.00000\r\n<strong>Explanation:</strong> </span><span>The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/22/2.png\" style=\"width: 150px; height: 94px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[0,1],[2,1],[1,1],[1,0],[2,0]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1.00000\r\n</span><strong>Explanation:</strong> The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/22/3.png\" style=\"width: 160px; height: 167px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[0,3],[1,2],[3,1],[1,3],[2,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0\r\n</span><span><strong>Explanation:</strong> There is no possible rectangle to form from these points.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/21/4c.png\" style=\"width: 160px; height: 155px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">2.00000\r\n</span><span><strong>Explanation:</strong> The minimum area rectangle occurs at [2,1],[2,3],[3,3],[3,1], with an area of 2.</span>\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= points.length &lt;= 50</code></li>\r\n\t<li><code>0 &lt;=&nbsp;points[i][0] &lt;=&nbsp;40000</code></li>\r\n\t<li><code>0 &lt;=&nbsp;points[i][1] &lt;=&nbsp;40000</code></li>\r\n\t<li>All points are distinct.</li>\r\n\t<li>Answers within <code>10^-5</code> of the actual value will be accepted as correct.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u5728 xy \u5e73\u9762\u4e0a\u7684\u4e00\u7ec4\u70b9\uff0c\u786e\u5b9a\u7531\u8fd9\u4e9b\u70b9\u7ec4\u6210\u7684\u4efb\u4f55\u77e9\u5f62\u7684\u6700\u5c0f\u9762\u79ef\uff0c\u5176\u4e2d\u77e9\u5f62\u7684\u8fb9<strong>\u4e0d\u4e00\u5b9a\u5e73\u884c\u4e8e</strong> x \u8f74\u548c y \u8f74\u3002</p>\n\n<p>\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u77e9\u5f62\uff0c\u5c31\u8fd4\u56de 0\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/22/1a.png\" style=\"height: 151px; width: 150px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,2],[2,1],[1,0],[0,1]]\n<strong>\u8f93\u51fa\uff1a</strong>2.00000\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u5c0f\u9762\u79ef\u7684\u77e9\u5f62\u51fa\u73b0\u5728 [1,2],[2,1],[1,0],[0,1] \u5904\uff0c\u9762\u79ef\u4e3a 2\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/23/2.png\" style=\"height: 94px; width: 150px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,1],[2,1],[1,1],[1,0],[2,0]]\n<strong>\u8f93\u51fa\uff1a</strong>1.00000\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u5c0f\u9762\u79ef\u7684\u77e9\u5f62\u51fa\u73b0\u5728 [1,0],[1,1],[2,1],[2,0] \u5904\uff0c\u9762\u79ef\u4e3a 1\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/23/3.png\" style=\"height: 94px; width: 150px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,3],[1,2],[3,1],[1,3],[2,1]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u6ca1\u6cd5\u4ece\u8fd9\u4e9b\u70b9\u4e2d\u7ec4\u6210\u4efb\u4f55\u77e9\u5f62\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/21/4c.png\" style=\"height: 155px; width: 160px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]\n<strong>\u8f93\u51fa\uff1a</strong>2.00000\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u5c0f\u9762\u79ef\u7684\u77e9\u5f62\u51fa\u73b0\u5728 [2,1],[2,3],[3,3],[3,1] \u5904\uff0c\u9762\u79ef\u4e3a 2\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= points.length &lt;= 50</code></li>\n\t<li><code>0 &lt;=&nbsp;points[i][0] &lt;=&nbsp;40000</code></li>\n\t<li><code>0 &lt;=&nbsp;points[i][1] &lt;=&nbsp;40000</code></li>\n\t<li>\u6240\u6709\u7684\u70b9\u90fd\u662f\u4e0d\u540c\u7684\u3002</li>\n\t<li>\u4e0e\u771f\u5b9e\u503c\u8bef\u5dee\u4e0d\u8d85\u8fc7 <code>10^-5</code>&nbsp;\u7684\u7b54\u6848\u5c06\u89c6\u4e3a\u6b63\u786e\u7ed3\u679c\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Geometry",
                "link": "geometry",
                "tagZh": "\u51e0\u4f55"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "963",
        "link": "minimum-area-rectangle-ii",
        "title": "Minimum Area Rectangle II",
        "is_locked": "Normal",
        "titleZh": "\u6700\u5c0f\u9762\u79ef\u77e9\u5f62 II",
        "frequency": "52.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a single positive integer <code>x</code>, we will write an expression of the form <code>x (op1) x (op2) x (op3) x ...</code>&nbsp;where each operator <code>op1</code>, <code>op2</code>, etc. is either addition, subtraction, multiplication, or division (<code>+</code>, <code>-</code>, <code>*</code>, or <code>/)</code>.&nbsp; For example, with <code>x = 3</code>, we might write <code>3 * 3 / 3 + 3 - 3</code>&nbsp;which is a value of <font face=\"monospace\">3</font>.</p>\r\n\r\n<p>When writing such an expression, we adhere to the following conventions:</p>\r\n\r\n<ol>\r\n\t<li>The division operator (<code>/</code>) returns rational numbers.</li>\r\n\t<li>There are no parentheses placed anywhere.</li>\r\n\t<li>We use the usual order of operations: multiplication and division happens before addition and subtraction.</li>\r\n\t<li>It&#39;s not allowed to use the unary negation&nbsp;operator (<code>-</code>).&nbsp; For example, &quot;<code>x&nbsp;- x</code>&quot;&nbsp;is a valid expression as it only uses subtraction, but &quot;<code>-x +&nbsp;x</code>&quot; is not because it uses negation.</li>\r\n</ol>\r\n\r\n<p>We would like to write an expression with the least number of operators such that the expression equals the given <code>target</code>.&nbsp; Return the least number of operators used.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>x = <span id=\"example-input-1-1\">3</span>, target = <span id=\"example-input-1-2\">19</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">5</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">3 * 3 + 3 * 3 + 3 / 3.  The expression contains 5 operations.</span>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong>x = <span id=\"example-input-2-1\">5</span>, target = <span id=\"example-input-2-2\">501</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">8</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.  The expression contains 8 operations.</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>x = <span id=\"example-input-3-1\">100</span>, target = <span id=\"example-input-3-2\">100000000</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">100 * 100 * 100 * 100.  The expression contains 3 operations.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>2 &lt;= x &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= target &lt;= 2 * 10^8</code></li>\r\n</ul>\r\n\r\n<div>\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 <code>x</code>\uff0c\u6211\u4eec\u5c06\u4f1a\u5199\u51fa\u4e00\u4e2a\u5f62\u5982&nbsp;<code>x (op1) x (op2) x (op3) x ...</code>&nbsp;\u7684\u8868\u8fbe\u5f0f\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8fd0\u7b97\u7b26&nbsp;<code>op1</code>\uff0c<code>op2</code>\uff0c&hellip; \u53ef\u4ee5\u662f\u52a0\u3001\u51cf\u3001\u4e58\u3001\u9664\uff08<code>+</code>\uff0c<code>-</code>\uff0c<code>*</code>\uff0c\u6216\u662f&nbsp;<code>/</code>\uff09\u4e4b\u4e00\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e&nbsp;<code>x = 3</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u8868\u8fbe\u5f0f&nbsp;<code>3 * 3 / 3 + 3 - 3</code>\uff0c\u8be5\u5f0f\u7684\u503c\u4e3a 3 \u3002</p>\n\n<p>\u5728\u5199\u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\u65f6\uff0c\u6211\u4eec\u9700\u8981\u9075\u5b88\u4e0b\u9762\u7684\u60ef\u4f8b\uff1a</p>\n\n<ol>\n\t<li>\u9664\u8fd0\u7b97\u7b26\uff08<code>/</code>\uff09\u8fd4\u56de\u6709\u7406\u6570\u3002</li>\n\t<li>\u4efb\u4f55\u5730\u65b9\u90fd\u6ca1\u6709\u62ec\u53f7\u3002</li>\n\t<li>\u6211\u4eec\u4f7f\u7528\u901a\u5e38\u7684\u64cd\u4f5c\u987a\u5e8f\uff1a\u4e58\u6cd5\u548c\u9664\u6cd5\u53d1\u751f\u5728\u52a0\u6cd5\u548c\u51cf\u6cd5\u4e4b\u524d\u3002</li>\n\t<li>\u4e0d\u5141\u8bb8\u4f7f\u7528\u4e00\u5143\u5426\u5b9a\u8fd0\u7b97\u7b26\uff08<code>-</code>\uff09\u3002\u4f8b\u5982\uff0c&ldquo;<code>x - x</code>&rdquo; \u662f\u4e00\u4e2a\u6709\u6548\u7684\u8868\u8fbe\u5f0f\uff0c\u56e0\u4e3a\u5b83\u53ea\u4f7f\u7528\u51cf\u6cd5\uff0c\u4f46\u662f &ldquo;<code>-x + x</code>&rdquo; \u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528\u4e86\u5426\u5b9a\u8fd0\u7b97\u7b26\u3002&nbsp;</li>\n</ol>\n\n<p>\u6211\u4eec\u5e0c\u671b\u7f16\u5199\u4e00\u4e2a\u80fd\u4f7f\u8868\u8fbe\u5f0f\u7b49\u4e8e\u7ed9\u5b9a\u7684\u76ee\u6807\u503c <code>target</code> \u4e14\u8fd0\u7b97\u7b26\u6700\u5c11\u7684\u8868\u8fbe\u5f0f\u3002\u8fd4\u56de\u6240\u7528\u8fd0\u7b97\u7b26\u7684\u6700\u5c11\u6570\u91cf\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>x = 3, target = 19\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>3 * 3 + 3 * 3 + 3 / 3 \u3002\u8868\u8fbe\u5f0f\u5305\u542b 5 \u4e2a\u8fd0\u7b97\u7b26\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>x = 5, target = 501\n<strong>\u8f93\u51fa\uff1a</strong>8\n<strong>\u89e3\u91ca\uff1a</strong>5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5 \u3002\u8868\u8fbe\u5f0f\u5305\u542b 8 \u4e2a\u8fd0\u7b97\u7b26\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>x = 100, target = 100000000\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>100 * 100 * 100 * 100 \u3002\u8868\u8fbe\u5f0f\u5305\u542b 3 \u4e2a\u8fd0\u7b97\u7b26\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= x &lt;= 100</code></li>\n\t<li><code>1 &lt;= target &lt;= 2 * 10^8</code></li>\n</ul>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "964",
        "link": "least-operators-to-express-number",
        "title": "Least Operators to Express Number",
        "is_locked": "Normal",
        "titleZh": "\u8868\u793a\u6570\u5b57\u7684\u6700\u5c11\u8fd0\u7b97\u7b26",
        "frequency": "30.8%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>A binary tree is <em>univalued</em> if every node in the tree has the same value.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if the given tree is univalued.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/28/unival_bst_1.png\" style=\"width: 265px; height: 172px;\" />\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,1,1,1,1,null,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/28/unival_bst_2.png\" style=\"width: 198px; height: 169px;\" />\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[2,2,2,5,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the given tree will be in the range <code>[1, 100]</code>.</li>\r\n\t<li>Each node&#39;s value will be an integer in the range <code>[0, 99]</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5982\u679c\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9\u90fd\u5177\u6709\u76f8\u540c\u7684\u503c\uff0c\u90a3\u4e48\u8be5\u4e8c\u53c9\u6811\u5c31\u662f<em>\u5355\u503c</em>\u4e8c\u53c9\u6811\u3002</p>\n\n<p>\u53ea\u6709\u7ed9\u5b9a\u7684\u6811\u662f\u5355\u503c\u4e8c\u53c9\u6811\u65f6\uff0c\u624d\u8fd4\u56de&nbsp;<code>true</code>\uff1b\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/screen-shot-2018-12-25-at-50104-pm.png\" style=\"height: 159px; width: 200px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,1,1,1,null,1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/screen-shot-2018-12-25-at-50050-pm.png\" style=\"height: 158px; width: 200px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,2,2,5,2]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6811\u7684\u8282\u70b9\u6570\u8303\u56f4\u662f&nbsp;<code>[1, 100]</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f\u6574\u6570\uff0c\u8303\u56f4\u4e3a&nbsp;<code>[0, 99]</code>&nbsp;\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "leetId": "965",
        "link": "univalued-binary-tree",
        "title": "Univalued Binary Tree",
        "is_locked": "Normal",
        "titleZh": "\u5355\u503c\u4e8c\u53c9\u6811",
        "frequency": "65.6%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given a&nbsp;<code>wordlist</code>, we want to implement a spellchecker that converts a query word into a correct word.</p>\r\n\r\n<p>For a given <code>query</code> word, the spell checker handles two categories of spelling mistakes:</p>\r\n\r\n<ul>\r\n\t<li>Capitalization: If the query matches a word in the wordlist (<strong>case-insensitive</strong>), then the query word is returned with the same case as the case in the wordlist.\r\n\r\n\t<ul>\r\n\t\t<li>Example: <code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;YellOw&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\r\n\t\t<li>Example: <code>wordlist = [&quot;Yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;Yellow&quot;</code></li>\r\n\t\t<li>Example: <code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>Vowel Errors: If after replacing the vowels (&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;) of the query word with any vowel individually, it matches a word in the wordlist (<strong>case-insensitive</strong>), then the query word is returned with the same case as the match in the wordlist.\r\n\t<ul>\r\n\t\t<li>Example: <code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yollow&quot;</code>: <code>correct = &quot;YellOw&quot;</code></li>\r\n\t\t<li>Example: <code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yeellow&quot;</code>: <code>correct = &quot;&quot;</code> (no match)</li>\r\n\t\t<li>Example: <code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yllw&quot;</code>: <code>correct = &quot;&quot;</code> (no match)</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<p>In addition, the spell checker operates under the following precedence rules:</p>\r\n\r\n<ul>\r\n\t<li>When the query exactly matches a word in the wordlist (<strong>case-sensitive</strong>), you should return the same word back.</li>\r\n\t<li>When the query matches a word up to capitlization, you should return the first such match in the wordlist.</li>\r\n\t<li>When the query matches a word up to vowel errors, you should return the first such match in the wordlist.</li>\r\n\t<li>If the query has no matches in the wordlist, you should return the empty string.</li>\r\n</ul>\r\n\r\n<p>Given some <code>queries</code>, return a&nbsp;list of words <code>answer</code>, where <code>answer[i]</code>&nbsp;is&nbsp;the correct word for <code>query = queries[i]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>wordlist = <span id=\"example-input-1-1\">[&quot;KiTe&quot;,&quot;kite&quot;,&quot;hare&quot;,&quot;Hare&quot;]</span>, queries = <span id=\"example-input-1-2\">[&quot;kite&quot;,&quot;Kite&quot;,&quot;KiTe&quot;,&quot;Hare&quot;,&quot;HARE&quot;,&quot;Hear&quot;,&quot;hear&quot;,&quot;keti&quot;,&quot;keet&quot;,&quot;keto&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;kite&quot;,&quot;KiTe&quot;,&quot;KiTe&quot;,&quot;Hare&quot;,&quot;hare&quot;,&quot;&quot;,&quot;&quot;,&quot;KiTe&quot;,&quot;&quot;,&quot;KiTe&quot;]</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= wordlist.length &lt;= 5000</code></li>\r\n\t<li><code>1 &lt;= queries.length &lt;= 5000</code></li>\r\n\t<li><code>1 &lt;= wordlist[i].length &lt;= 7</code></li>\r\n\t<li><code>1 &lt;= queries[i].length &lt;= 7</code></li>\r\n\t<li>All strings in <code>wordlist</code> and <code>queries</code> consist only of <strong>english</strong>&nbsp;letters.</li>\r\n</ul>\r\n",
        "questionDescriptionZh": "<p>\u5728\u7ed9\u5b9a\u5355\u8bcd\u5217\u8868&nbsp;<code>wordlist</code>&nbsp;\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u5b9e\u73b0\u4e00\u4e2a\u62fc\u5199\u68c0\u67e5\u5668\uff0c\u5c06\u67e5\u8be2\u5355\u8bcd\u8f6c\u6362\u4e3a\u6b63\u786e\u7684\u5355\u8bcd\u3002</p>\n\n<p>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u67e5\u8be2\u5355\u8bcd&nbsp;<code>query</code>\uff0c\u62fc\u5199\u68c0\u67e5\u5668\u5c06\u4f1a\u5904\u7406\u4e24\u7c7b\u62fc\u5199\u9519\u8bef\uff1a</p>\n\n<ul>\n\t<li>\u5927\u5c0f\u5199\uff1a\u5982\u679c\u67e5\u8be2\u5339\u914d\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u67d0\u4e2a\u5355\u8bcd\uff08<strong>\u4e0d\u533a\u5206\u5927\u5c0f\u5199</strong>\uff09\uff0c\u5219\u8fd4\u56de\u7684\u6b63\u786e\u5355\u8bcd\u4e0e\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u5927\u5c0f\u5199\u76f8\u540c\u3002\n\n\t<ul>\n\t\t<li>\u4f8b\u5982\uff1a<code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;YellOw&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\n\t\t<li>\u4f8b\u5982\uff1a<code>wordlist = [&quot;Yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;Yellow&quot;</code></li>\n\t\t<li>\u4f8b\u5982\uff1a<code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\n\t</ul>\n\t</li>\n\t<li>\u5143\u97f3\u9519\u8bef\uff1a\u5982\u679c\u5728\u5c06\u67e5\u8be2\u5355\u8bcd\u4e2d\u7684\u5143\u97f3\uff08&lsquo;a&rsquo;\u3001&lsquo;e&rsquo;\u3001&lsquo;i&rsquo;\u3001&lsquo;o&rsquo;\u3001&lsquo;u&rsquo;\uff09\u5206\u522b\u66ff\u6362\u4e3a\u4efb\u4f55\u5143\u97f3\u540e\uff0c\u80fd\u4e0e\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u5355\u8bcd\u5339\u914d\uff08<strong>\u4e0d\u533a\u5206\u5927\u5c0f\u5199</strong>\uff09\uff0c\u5219\u8fd4\u56de\u7684\u6b63\u786e\u5355\u8bcd\u4e0e\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u5339\u914d\u9879\u5927\u5c0f\u5199\u76f8\u540c\u3002\n\t<ul>\n\t\t<li>\u4f8b\u5982\uff1a<code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yollow&quot;</code>: <code>correct = &quot;YellOw&quot;</code></li>\n\t\t<li>\u4f8b\u5982\uff1a<code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yeellow&quot;</code>: <code>correct = &quot;&quot;</code> \uff08\u65e0\u5339\u914d\u9879\uff09</li>\n\t\t<li>\u4f8b\u5982\uff1a<code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yllw&quot;</code>: <code>correct = &quot;&quot;</code> \uff08\u65e0\u5339\u914d\u9879\uff09</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>\u6b64\u5916\uff0c\u62fc\u5199\u68c0\u67e5\u5668\u8fd8\u6309\u7167\u4ee5\u4e0b\u4f18\u5148\u7ea7\u89c4\u5219\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li>\u5f53\u67e5\u8be2\u5b8c\u5168\u5339\u914d\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u67d0\u4e2a\u5355\u8bcd\uff08<strong>\u533a\u5206\u5927\u5c0f\u5199</strong>\uff09\u65f6\uff0c\u5e94\u8fd4\u56de\u76f8\u540c\u7684\u5355\u8bcd\u3002</li>\n\t<li>\u5f53\u67e5\u8be2\u5339\u914d\u5230\u5927\u5c0f\u5199\u95ee\u9898\u7684\u5355\u8bcd\u65f6\uff0c\u60a8\u5e94\u8be5\u8fd4\u56de\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8fd9\u6837\u7684\u5339\u914d\u9879\u3002</li>\n\t<li>\u5f53\u67e5\u8be2\u5339\u914d\u5230\u5143\u97f3\u9519\u8bef\u7684\u5355\u8bcd\u65f6\uff0c\u60a8\u5e94\u8be5\u8fd4\u56de\u5355\u8bcd\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8fd9\u6837\u7684\u5339\u914d\u9879\u3002</li>\n\t<li>\u5982\u679c\u8be5\u67e5\u8be2\u5728\u5355\u8bcd\u5217\u8868\u4e2d\u6ca1\u6709\u5339\u914d\u9879\uff0c\u5219\u5e94\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</li>\n</ul>\n\n<p>\u7ed9\u51fa\u4e00\u4e9b\u67e5\u8be2 <code>queries</code>\uff0c\u8fd4\u56de\u4e00\u4e2a\u5355\u8bcd\u7b54\u6848\u5217\u8868 <code>answer</code>\uff0c\u5176\u4e2d <code>answer[i]</code> \u662f\u7531\u67e5\u8be2 <code>query = queries[i]</code> \u5f97\u5230\u7684\u6b63\u786e\u5355\u8bcd\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>wordlist = [&quot;KiTe&quot;,&quot;kite&quot;,&quot;hare&quot;,&quot;Hare&quot;], queries = [&quot;kite&quot;,&quot;Kite&quot;,&quot;KiTe&quot;,&quot;Hare&quot;,&quot;HARE&quot;,&quot;Hear&quot;,&quot;hear&quot;,&quot;keti&quot;,&quot;keet&quot;,&quot;keto&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;kite&quot;,&quot;KiTe&quot;,&quot;KiTe&quot;,&quot;Hare&quot;,&quot;hare&quot;,&quot;&quot;,&quot;&quot;,&quot;KiTe&quot;,&quot;&quot;,&quot;KiTe&quot;]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= wordlist.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 5000</code></li>\n\t<li><code>1 &lt;= wordlist[i].length &lt;= 7</code></li>\n\t<li><code>1 &lt;= queries[i].length &lt;= 7</code></li>\n\t<li><code>wordlist</code> \u548c&nbsp;<code>queries</code>&nbsp;\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u4e32\u4ec5\u7531<strong>\u82f1\u6587</strong>\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "leetId": "966",
        "link": "vowel-spellchecker",
        "title": "Vowel Spellchecker",
        "is_locked": "Normal",
        "titleZh": "\u5143\u97f3\u62fc\u5199\u68c0\u67e5\u5668",
        "frequency": "36.0%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Return all <strong>non-negative</strong> integers of length <code>N</code> such that the absolute difference between every two consecutive digits is <code>K</code>.</p>\r\n\r\n<p>Note that <strong>every</strong> number in the answer <strong>must not</strong> have leading zeros <strong>except</strong> for the number <code>0</code> itself. For example, <code>01</code> has one leading zero and is invalid, but <code>0</code> is valid.</p>\r\n\r\n<p>You may return the answer in any order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-1-1\">3</span>, K = <span id=\"example-input-1-2\">7</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[181,292,707,818,929]</span>\r\n<strong>Explanation: </strong>Note that 070 is not a valid number, because it has leading zeroes.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-2-1\">2</span>, K = <span id=\"example-input-2-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 9</code></li>\r\n\t<li><code>0 &lt;= K &lt;= 9</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u8fd4\u56de\u6240\u6709\u957f\u5ea6\u4e3a <code>N</code> \u4e14\u6ee1\u8db3\u5176\u6bcf\u4e24\u4e2a\u8fde\u7eed\u4f4d\u4e0a\u7684\u6570\u5b57\u4e4b\u95f4\u7684\u5dee\u7684\u7edd\u5bf9\u503c\u4e3a <code>K</code>&nbsp;\u7684<strong>\u975e\u8d1f\u6574\u6570</strong>\u3002</p>\n\n<p>\u8bf7\u6ce8\u610f\uff0c<strong>\u9664\u4e86</strong>\u6570\u5b57 <code>0</code> \u672c\u8eab\u4e4b\u5916\uff0c\u7b54\u6848\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u90fd<strong>\u4e0d\u80fd</strong>\u6709\u524d\u5bfc\u96f6\u3002\u4f8b\u5982\uff0c<code>01</code>&nbsp;\u56e0\u4e3a\u6709\u4e00\u4e2a\u524d\u5bfc\u96f6\uff0c\u6240\u4ee5\u662f\u65e0\u6548\u7684\uff1b\u4f46 <code>0</code>&nbsp;\u662f\u6709\u6548\u7684\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 3, K = 7\n<strong>\u8f93\u51fa\uff1a</strong>[181,292,707,818,929]\n<strong>\u89e3\u91ca\uff1a</strong>\u6ce8\u610f\uff0c070 \u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u6570\u5b57\uff0c\u56e0\u4e3a\u5b83\u6709\u524d\u5bfc\u96f6\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 2, K = 1\n<strong>\u8f93\u51fa\uff1a</strong>[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 9</code></li>\n\t<li><code>0 &lt;= K &lt;= 9</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "967",
        "link": "numbers-with-same-consecutive-differences",
        "title": "Numbers With Same Consecutive Differences",
        "is_locked": "Normal",
        "titleZh": "\u8fde\u7eed\u5dee\u76f8\u540c\u7684\u6570\u5b57",
        "frequency": "31.5%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a binary tree, we install cameras on the nodes of the tree.&nbsp;</p>\r\n\r\n<p>Each camera at&nbsp;a node can monitor <strong>its parent, itself, and its immediate children</strong>.</p>\r\n\r\n<p>Calculate the minimum number of cameras needed to monitor all nodes of the tree.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_01.png\" style=\"width: 138px; height: 163px;\" />\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[0,0,null,0,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>One camera is enough to monitor all nodes if placed as shown.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_02.png\" style=\"width: 139px; height: 312px;\" />\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[0,0,null,0,null,0,null,null,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2\r\n<strong>Explanation:</strong> At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the given tree will be in the range&nbsp;<code>[1, 1000]</code>.</li>\r\n\t<li><strong>Every</strong> node has value 0.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u6211\u4eec\u5728\u6811\u7684\u8282\u70b9\u4e0a\u5b89\u88c5\u6444\u50cf\u5934\u3002</p>\n\n<p>\u8282\u70b9\u4e0a\u7684\u6bcf\u4e2a\u6444\u5f71\u5934\u90fd\u53ef\u4ee5\u76d1\u89c6<strong>\u5176\u7236\u5bf9\u8c61\u3001\u81ea\u8eab\u53ca\u5176\u76f4\u63a5\u5b50\u5bf9\u8c61\u3002</strong></p>\n\n<p>\u8ba1\u7b97\u76d1\u63a7\u6811\u7684\u6240\u6709\u8282\u70b9\u6240\u9700\u7684\u6700\u5c0f\u6444\u50cf\u5934\u6570\u91cf\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_01.png\" style=\"height: 163px; width: 138px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,0,null,0,0]\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u5982\u56fe\u6240\u793a\uff0c\u4e00\u53f0\u6444\u50cf\u5934\u8db3\u4ee5\u76d1\u63a7\u6240\u6709\u8282\u70b9\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_02.png\" style=\"height: 312px; width: 139px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,0,null,0,null,0,null,null,0]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u9700\u8981\u81f3\u5c11\u4e24\u4e2a\u6444\u50cf\u5934\u6765\u76d1\u89c6\u6811\u7684\u6240\u6709\u8282\u70b9\u3002 \u4e0a\u56fe\u663e\u793a\u4e86\u6444\u50cf\u5934\u653e\u7f6e\u7684\u6709\u6548\u4f4d\u7f6e\u4e4b\u4e00\u3002\n</pre>\n\n<p><br>\n<strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6811\u7684\u8282\u70b9\u6570\u7684\u8303\u56f4\u662f&nbsp;<code>[1, 1000]</code>\u3002</li>\n\t<li>\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f 0\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "968",
        "link": "binary-tree-cameras",
        "title": "Binary Tree Cameras",
        "is_locked": "Normal",
        "titleZh": "\u76d1\u63a7\u4e8c\u53c9\u6811",
        "frequency": "32.1%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code>, we can perform a&nbsp;<em>pancake flip</em>:&nbsp;We choose some positive integer&nbsp;<code><strong>k</strong> &lt;= A.length</code>, then reverse the order of the first <strong>k</strong> elements of <code>A</code>.&nbsp; We want to perform zero or more pancake flips (doing them one after another in succession) to sort the array <code>A</code>.</p>\r\n\r\n<p>Return the k-values corresponding to a sequence of pancake flips that sort <code>A</code>.&nbsp; Any&nbsp;valid answer that sorts the array within <code>10 * A.length</code> flips will be judged as correct.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,2,4,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[4,2,4,3]</span>\r\n<strong>Explanation: </strong>\r\nWe perform 4 pancake flips, with k values 4, 2, 4, and 3.\r\nStarting state: A = [3, 2, 4, 1]\r\nAfter 1st flip (k=4): A = [1, 4, 2, 3]\r\nAfter 2nd flip (k=2): A = [4, 1, 2, 3]\r\nAfter 3rd flip (k=4): A = [3, 2, 1, 4]\r\nAfter 4th flip (k=3): A = [1, 2, 3, 4], which is sorted. \r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[]</span>\r\n<strong>Explanation: </strong>The input is already sorted, so there is no need to flip anything.\r\nNote that other answers, such as [3, 3], would also be accepted.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\r\n\t<li><code>A[i]</code> is a permutation of <code>[1, 2, ..., A.length]</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c<em>\u714e\u997c\u7ffb\u8f6c</em>\uff1a\u6211\u4eec\u9009\u62e9\u4e00\u4e9b\u6b63\u6574\u6570&nbsp;<code><strong>k</strong>&nbsp;&lt;= A.length</code>\uff0c\u7136\u540e\u53cd\u8f6c <code>A</code> \u7684\u524d <strong>k</strong>&nbsp;\u4e2a\u5143\u7d20\u7684\u987a\u5e8f\u3002\u6211\u4eec\u8981\u6267\u884c\u96f6\u6b21\u6216\u591a\u6b21\u714e\u997c\u7ffb\u8f6c\uff08\u6309\u987a\u5e8f\u4e00\u6b21\u63a5\u4e00\u6b21\u5730\u8fdb\u884c\uff09\u4ee5\u5b8c\u6210\u5bf9\u6570\u7ec4 <code>A</code> \u7684\u6392\u5e8f\u3002</p>\n\n<p>\u8fd4\u56de\u80fd\u4f7f&nbsp;<code>A</code> \u6392\u5e8f\u7684\u714e\u997c\u7ffb\u8f6c\u64cd\u4f5c\u6240\u5bf9\u5e94\u7684 k \u503c\u5e8f\u5217\u3002\u4efb\u4f55\u5c06\u6570\u7ec4\u6392\u5e8f\u4e14\u7ffb\u8f6c\u6b21\u6570\u5728&nbsp;<code>10 * A.length</code> \u8303\u56f4\u5185\u7684\u6709\u6548\u7b54\u6848\u90fd\u5c06\u88ab\u5224\u65ad\u4e3a\u6b63\u786e\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,2,4,1]\n<strong>\u8f93\u51fa\uff1a</strong>[4,2,4,3]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6211\u4eec\u6267\u884c 4 \u6b21\u714e\u997c\u7ffb\u8f6c\uff0ck \u503c\u5206\u522b\u4e3a 4\uff0c2\uff0c4\uff0c\u548c 3\u3002\n\u521d\u59cb\u72b6\u6001 A = [3, 2, 4, 1]\n\u7b2c\u4e00\u6b21\u7ffb\u8f6c\u540e (k=4): A = [1, 4, 2, 3]\n\u7b2c\u4e8c\u6b21\u7ffb\u8f6c\u540e (k=2): A = [4, 1, 2, 3]\n\u7b2c\u4e09\u6b21\u7ffb\u8f6c\u540e (k=4): A = [3, 2, 1, 4]\n\u7b2c\u56db\u6b21\u7ffb\u8f6c\u540e (k=3): A = [1, 2, 3, 4]\uff0c\u6b64\u65f6\u5df2\u5b8c\u6210\u6392\u5e8f\u3002 \n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>[]\n<strong>\u89e3\u91ca\uff1a\n</strong>\u8f93\u5165\u5df2\u7ecf\u6392\u5e8f\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u7ffb\u8f6c\u4efb\u4f55\u5185\u5bb9\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5176\u4ed6\u53ef\u80fd\u7684\u7b54\u6848\uff0c\u5982[3\uff0c3]\uff0c\u4e5f\u5c06\u88ab\u63a5\u53d7\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>A[i]</code> \u662f&nbsp;<code>[1, 2, ..., A.length]</code>&nbsp;\u7684\u6392\u5217</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "969",
        "link": "pancake-sorting",
        "title": "Pancake Sorting",
        "is_locked": "Normal",
        "titleZh": "\u714e\u997c\u6392\u5e8f",
        "frequency": "58.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given two positive integers <code>x</code> and <code>y</code>, an integer is <em>powerful</em>&nbsp;if it is equal to <code>x^i + y^j</code>&nbsp;for&nbsp;some integers <code>i &gt;= 0</code> and <code>j &gt;= 0</code>.</p>\r\n\r\n<p>Return a list of all <em>powerful</em> integers that have value less than or equal to <code>bound</code>.</p>\r\n\r\n<p>You may return the answer in any order.&nbsp; In your answer, each value should occur at most once.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>x = <span id=\"example-input-1-1\">2</span>, y = <span id=\"example-input-1-2\">3</span>, bound = <span id=\"example-input-1-3\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,3,4,5,7,9,10]</span>\r\n<strong>Explanation: </strong>\r\n2 = 2^0 + 3^0\r\n3 = 2^1 + 3^0\r\n4 = 2^0 + 3^1\r\n5 = 2^1 + 3^1\r\n7 = 2^2 + 3^1\r\n9 = 2^3 + 3^0\r\n10 = 2^0 + 3^2\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>x = <span id=\"example-input-2-1\">3</span>, y = <span id=\"example-input-2-2\">5</span>, bound = <span id=\"example-input-2-3\">15</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[2,4,6,8,10,14]</span>\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= x &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= y&nbsp;&lt;= 100</code></li>\r\n\t<li><code>0 &lt;= bound&nbsp;&lt;= 10^6</code></li>\r\n</ul>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6b63\u6574\u6570 <code>x</code> \u548c <code>y</code>\uff0c\u5982\u679c\u67d0\u4e00\u6574\u6570\u7b49\u4e8e <code>x^i + y^j</code>\uff0c\u5176\u4e2d\u6574\u6570&nbsp;<code>i &gt;= 0</code> \u4e14&nbsp;<code>j &gt;= 0</code>\uff0c\u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a\u8be5\u6574\u6570\u662f\u4e00\u4e2a<em>\u5f3a\u6574\u6570</em>\u3002</p>\n\n<p>\u8fd4\u56de\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e&nbsp;<code>bound</code>&nbsp;\u7684\u6240\u6709<em>\u5f3a\u6574\u6570</em>\u7ec4\u6210\u7684\u5217\u8868\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002\u5728\u4f60\u7684\u56de\u7b54\u4e2d\uff0c\u6bcf\u4e2a\u503c\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>x = 2, y = 3, bound = 10\n<strong>\u8f93\u51fa\uff1a</strong>[2,3,4,5,7,9,10]\n<strong>\u89e3\u91ca\uff1a </strong>\n2 = 2^0 + 3^0\n3 = 2^1 + 3^0\n4 = 2^0 + 3^1\n5 = 2^1 + 3^1\n7 = 2^2 + 3^1\n9 = 2^3 + 3^0\n10 = 2^0 + 3^2\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>x = 3, y = 5, bound = 15\n<strong>\u8f93\u51fa\uff1a</strong>[2,4,6,8,10,14]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= x &lt;= 100</code></li>\n\t<li><code>1 &lt;= y&nbsp;&lt;= 100</code></li>\n\t<li><code>0 &lt;= bound&nbsp;&lt;= 10^6</code></li>\n</ul>\n",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "970",
        "link": "powerful-integers",
        "title": "Powerful Integers",
        "is_locked": "Normal",
        "titleZh": "\u5f3a\u6574\u6570",
        "frequency": "36.5%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given a binary tree with <code>N</code> nodes, each node has a different value from&nbsp;<code>{1, ..., N}</code>.</p>\r\n\r\n<p>A node in this binary tree can be <em>flipped</em>&nbsp;by swapping the left child and the right child of that node.</p>\r\n\r\n<p>Consider the sequence of&nbsp;<code>N</code> values reported by a preorder traversal starting from the root.&nbsp; Call such a sequence of <code>N</code> values the&nbsp;<em>voyage</em>&nbsp;of the tree.</p>\r\n\r\n<p>(Recall that a <em>preorder traversal</em>&nbsp;of a node means we report the current node&#39;s value, then preorder-traverse the left child, then preorder-traverse the right child.)</p>\r\n\r\n<p>Our goal is to flip the <strong>least number</strong> of nodes in the tree so that the voyage of the tree matches the <code>voyage</code> we are given.</p>\r\n\r\n<p>If we can do so, then return a&nbsp;list&nbsp;of the values of all nodes flipped.&nbsp; You may return the answer in any order.</p>\r\n\r\n<p>If we cannot do so, then return the list <code>[-1]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/02/1219-01.png\" style=\"width: 88px; height: 120px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-1-1\">[1,2]</span>, voyage = <span id=\"example-input-1-2\">[2,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[-1]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/02/1219-02.png\" style=\"width: 127px; height: 120px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-2-1\">[1,2,3]</span>, voyage = <span id=\"example-input-2-2\">[1,3,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[1]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/02/1219-02.png\" style=\"width: 127px; height: 120px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-3-1\">[1,2,3]</span>, voyage = <span id=\"example-input-3-2\">[1,2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 100</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6709 <code>N</code> \u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u4e0d\u540c\u4e8e\u5176\u4ed6\u8282\u70b9\u4e14\u5904\u4e8e <code>{1, ..., N}</code> \u4e2d\u7684\u503c\u3002</p>\n\n<p>\u901a\u8fc7\u4ea4\u6362\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\u548c\u53f3\u5b50\u8282\u70b9\uff0c\u53ef\u4ee5\u7ffb\u8f6c\u8be5\u4e8c\u53c9\u6811\u4e2d\u7684\u8282\u70b9\u3002</p>\n\n<p>\u8003\u8651\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u7684\u5148\u5e8f\u904d\u5386\u62a5\u544a\u7684 <code>N</code> \u503c\u5e8f\u5217\u3002\u5c06\u8fd9\u4e00 <code>N</code> \u503c\u5e8f\u5217\u79f0\u4e3a\u6811\u7684\u884c\u7a0b\u3002</p>\n\n<p>\uff08\u56de\u60f3\u4e00\u4e0b\uff0c\u8282\u70b9\u7684\u5148\u5e8f\u904d\u5386\u610f\u5473\u7740\u6211\u4eec\u62a5\u544a\u5f53\u524d\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u5148\u5e8f\u904d\u5386\u5de6\u5b50\u8282\u70b9\uff0c\u518d\u5148\u5e8f\u904d\u5386\u53f3\u5b50\u8282\u70b9\u3002\uff09</p>\n\n<p>\u6211\u4eec\u7684\u76ee\u6807\u662f\u7ffb\u8f6c<strong>\u6700\u5c11\u7684</strong>\u6811\u4e2d\u8282\u70b9\uff0c\u4ee5\u4fbf\u6811\u7684\u884c\u7a0b\u4e0e\u7ed9\u5b9a\u7684\u884c\u7a0b&nbsp;<code>voyage</code>&nbsp;\u76f8\u5339\u914d\u3002&nbsp;</p>\n\n<p>\u5982\u679c\u53ef\u4ee5\uff0c\u5219\u8fd4\u56de\u7ffb\u8f6c\u7684\u6240\u6709\u8282\u70b9\u7684\u503c\u7684\u5217\u8868\u3002\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p>\n\n<p>\u5982\u679c\u4e0d\u80fd\uff0c\u5219\u8fd4\u56de\u5217\u8868 <code>[-1]</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/05/1219-01.png\" style=\"height: 120px; width: 88px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [1,2], voyage = [2,1]\n<strong>\u8f93\u51fa\uff1a</strong>[-1]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/05/1219-02.png\" style=\"height: 120px; width: 127px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [1,2,3], voyage = [1,3,2]\n<strong>\u8f93\u51fa\uff1a</strong>[1]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/05/1219-02.png\" style=\"height: 120px; width: 127px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [1,2,3], voyage = [1,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>[]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 100</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "leetId": "971",
        "link": "flip-binary-tree-to-match-preorder-traversal",
        "title": "Flip Binary Tree To Match Preorder Traversal",
        "is_locked": "Normal",
        "titleZh": "\u7ffb\u8f6c\u4e8c\u53c9\u6811\u4ee5\u5339\u914d\u5148\u5e8f\u904d\u5386",
        "frequency": "38.4%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given two strings <code>S</code> and <code>T</code>, each of which represents a non-negative rational number, return <strong>True</strong> if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.</p>\r\n\r\n<p>In general a rational number can be represented using up to&nbsp;three parts: an&nbsp;<em>integer part</em>, a&nbsp;<em>non-repeating part,</em> and a&nbsp;<em>repeating part</em>. The number will be represented&nbsp;in one of the following three ways:</p>\r\n\r\n<ul>\r\n\t<li><code>&lt;IntegerPart&gt;</code> (e.g. 0, 12, 123)</li>\r\n\t<li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;</code> &nbsp;(e.g. 0.5, 1., 2.12, 2.0001)</li>\r\n\t<li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;&lt;(&gt;&lt;RepeatingPart&gt;&lt;)&gt;</code> (e.g. 0.1(6), 0.9(9), 0.00(1212))</li>\r\n</ul>\r\n\r\n<p>The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets.&nbsp; For example:</p>\r\n\r\n<p>1 / 6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)</p>\r\n\r\n<p>Both 0.1(6) or 0.1666(6) or 0.166(66) are correct representations of 1 / 6.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-1-1\">&quot;0.(52)&quot;</span>, T = <span id=\"example-input-1-2\">&quot;0.5(25)&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation:\r\n</strong>Because &quot;0.(52)&quot; represents 0.52525252..., and &quot;0.5(25)&quot; represents 0.52525252525..... , the strings represent the same number.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-2-1\">&quot;0.1666(6)&quot;</span>, T = <span id=\"example-input-2-2\">&quot;0.166(66)&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-3-1\">&quot;0.9(9)&quot;</span>, T = <span id=\"example-input-3-2\">&quot;1.&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true</span>\r\n<strong>Explanation: </strong>\r\n&quot;0.9(9)&quot; represents 0.999999999... repeated forever, which equals 1.  [<a href=\"https://en.wikipedia.org/wiki/0.999...\" target=\"_blank\">See this link for an explanation.</a>]\r\n&quot;1.&quot; represents the number 1, which is formed correctly: (IntegerPart) = &quot;1&quot; and (NonRepeatingPart) = &quot;&quot;.</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>Each part consists only of digits.</li>\r\n\t<li>The <code>&lt;IntegerPart&gt;</code>&nbsp;will&nbsp;not begin with 2 or more zeros.&nbsp; (There is no other restriction on the digits of each part.)</li>\r\n\t<li><code>1 &lt;= &lt;IntegerPart&gt;.length &lt;= 4 </code></li>\r\n\t<li><code>0 &lt;= &lt;NonRepeatingPart&gt;.length &lt;= 4 </code></li>\r\n\t<li><code>1 &lt;= &lt;RepeatingPart&gt;.length &lt;= 4</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 <code>S</code> \u548c <code>T</code>\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4ee3\u8868\u4e00\u4e2a\u975e\u8d1f\u6709\u7406\u6570\uff0c\u53ea\u6709\u5f53\u5b83\u4eec\u8868\u793a\u76f8\u540c\u7684\u6570\u5b57\u65f6\u624d\u8fd4\u56de <strong>true</strong>\uff1b\u5426\u5219\uff0c\u8fd4\u56de <strong>false</strong>\u3002\u5b57\u7b26\u4e32\u4e2d\u53ef\u4ee5\u4f7f\u7528\u62ec\u53f7\u6765\u8868\u793a\u6709\u7406\u6570\u7684\u91cd\u590d\u90e8\u5206\u3002</p>\n\n<p>\u901a\u5e38\uff0c\u6709\u7406\u6570\u6700\u591a\u53ef\u4ee5\u7528\u4e09\u4e2a\u90e8\u5206\u6765\u8868\u793a\uff1a<em>\u6574\u6570\u90e8\u5206</em>&nbsp;<code>&lt;IntegerPart&gt;</code>\u3001<em>\u5c0f\u6570\u975e\u91cd\u590d\u90e8\u5206</em>&nbsp;<code>&lt;NonRepeatingPart&gt;</code>&nbsp;\u548c<em>\u5c0f\u6570\u91cd\u590d\u90e8\u5206</em>&nbsp;<code>&lt;(&gt;&lt;RepeatingPart&gt;&lt;)&gt;</code>\u3002\u6570\u5b57\u53ef\u4ee5\u7528\u4ee5\u4e0b\u4e09\u79cd\u65b9\u6cd5\u4e4b\u4e00\u6765\u8868\u793a\uff1a</p>\n\n<ul>\n\t<li><code>&lt;IntegerPart&gt;</code>\uff08\u4f8b\uff1a0\uff0c12\uff0c123\uff09</li>\n\t<li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;</code> \uff08\u4f8b\uff1a0.5\uff0c2.12\uff0c2.0001\uff09</li>\n\t<li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;&lt;(&gt;&lt;RepeatingPart&gt;&lt;)&gt;</code>\uff08\u4f8b\uff1a0.1(6)\uff0c0.9(9)\uff0c0.00(1212)\uff09</li>\n</ul>\n\n<p>\u5341\u8fdb\u5236\u5c55\u5f00\u7684\u91cd\u590d\u90e8\u5206\u901a\u5e38\u5728\u4e00\u5bf9\u5706\u62ec\u53f7\u5185\u8868\u793a\u3002\u4f8b\u5982\uff1a</p>\n\n<p>1 / 6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)</p>\n\n<p>0.1(6) \u6216&nbsp;0.1666(6) \u6216&nbsp;0.166(66) \u90fd\u662f&nbsp;1 / 6 \u7684\u6b63\u786e\u8868\u793a\u5f62\u5f0f\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;0.(52)&quot;, T = &quot;0.5(25)&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u56e0\u4e3a &quot;0.(52)&quot; \u4ee3\u8868 0.52525252...\uff0c\u800c &quot;0.5(25)&quot; \u4ee3\u8868 0.52525252525.....\uff0c\u5219\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u76f8\u540c\u7684\u6570\u5b57\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;0.1666(6)&quot;, T = &quot;0.166(66)&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;0.9(9)&quot;, T = &quot;1.&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a\n</strong>&quot;0.9(9)&quot; \u4ee3\u8868 0.999999999... \u6c38\u8fdc\u91cd\u590d\uff0c\u7b49\u4e8e 1 \u3002[<a href=\"https://baike.baidu.com/item/0.999\u2026/5615429?fr=aladdin\" target=\"_blank\">\u6709\u5173\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605\u6b64\u94fe\u63a5</a>]\n&quot;1.&quot; \u8868\u793a\u6570\u5b57 1\uff0c\u5176\u683c\u5f0f\u6b63\u786e\uff1a(IntegerPart) = &quot;1&quot; \u4e14 (NonRepeatingPart) = &quot;&quot; \u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6bcf\u4e2a\u90e8\u5206\u4ec5\u7531\u6570\u5b57\u7ec4\u6210\u3002</li>\n\t<li>\u6574\u6570\u90e8\u5206&nbsp;<code>&lt;IntegerPart&gt;</code>&nbsp;\u4e0d\u4f1a\u4ee5 2 \u4e2a\u6216\u66f4\u591a\u7684\u96f6\u5f00\u5934\u3002\uff08\u5bf9\u6bcf\u4e2a\u90e8\u5206\u7684\u6570\u5b57\u6ca1\u6709\u5176\u4ed6\u9650\u5236\uff09\u3002</li>\n\t<li><code>1 &lt;= &lt;IntegerPart&gt;.length &lt;= 4 </code></li>\n\t<li><code>0 &lt;= &lt;NonRepeatingPart&gt;.length &lt;= 4 </code></li>\n\t<li><code>1 &lt;= &lt;RepeatingPart&gt;.length &lt;= 4 </code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "972",
        "link": "equal-rational-numbers",
        "title": "Equal Rational Numbers",
        "is_locked": "Normal",
        "titleZh": "\u76f8\u7b49\u7684\u6709\u7406\u6570",
        "frequency": "39.3%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>We have a list of <code>points</code>&nbsp;on the plane.&nbsp; Find the <code>K</code> closest points to the origin <code>(0, 0)</code>.</p>\r\n\r\n<p>(Here, the distance between two points on a plane is the Euclidean distance.)</p>\r\n\r\n<p>You may return the answer in any order.&nbsp; The&nbsp;answer is guaranteed to be unique (except for the order that it is in.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>points = <span id=\"example-input-1-1\">[[1,3],[-2,2]]</span>, K = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[-2,2]]</span>\r\n<strong>Explanation: </strong>\r\nThe distance between (1, 3) and the origin is sqrt(10).\r\nThe distance between (-2, 2) and the origin is sqrt(8).\r\nSince sqrt(8) &lt; sqrt(10), (-2, 2) is closer to the origin.\r\nWe only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>points = <span id=\"example-input-2-1\">[[3,3],[5,-1],[-2,4]]</span>, K = <span id=\"example-input-2-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[[3,3],[-2,4]]</span>\r\n(The answer [[-2,4],[3,3]] would also be accepted.)\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= K &lt;= points.length &lt;= 10000</code></li>\r\n\t<li><code>-10000 &lt; points[i][0] &lt; 10000</code></li>\r\n\t<li><code>-10000 &lt; points[i][1] &lt; 10000</code></li>\r\n</ol>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u6211\u4eec\u6709\u4e00\u4e2a\u7531\u5e73\u9762\u4e0a\u7684\u70b9\u7ec4\u6210\u7684\u5217\u8868 <code>points</code>\u3002\u9700\u8981\u4ece\u4e2d\u627e\u51fa <code>K</code> \u4e2a\u8ddd\u79bb\u539f\u70b9 <code>(0, 0)</code> \u6700\u8fd1\u7684\u70b9\u3002</p>\n\n<p>\uff08\u8fd9\u91cc\uff0c\u5e73\u9762\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u662f\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u3002\uff09</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002\u9664\u4e86\u70b9\u5750\u6807\u7684\u987a\u5e8f\u4e4b\u5916\uff0c\u7b54\u6848\u786e\u4fdd\u662f\u552f\u4e00\u7684\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>points = [[1,3],[-2,2]], K = 1\n<strong>\u8f93\u51fa\uff1a</strong>[[-2,2]]\n<strong>\u89e3\u91ca\uff1a </strong>\n(1, 3) \u548c\u539f\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a sqrt(10)\uff0c\n(-2, 2) \u548c\u539f\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a sqrt(8)\uff0c\n\u7531\u4e8e sqrt(8) &lt; sqrt(10)\uff0c(-2, 2) \u79bb\u539f\u70b9\u66f4\u8fd1\u3002\n\u6211\u4eec\u53ea\u9700\u8981\u8ddd\u79bb\u539f\u70b9\u6700\u8fd1\u7684 K = 1 \u4e2a\u70b9\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f [[-2,2]]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>points = [[3,3],[5,-1],[-2,4]], K = 2\n<strong>\u8f93\u51fa\uff1a</strong>[[3,3],[-2,4]]\n\uff08\u7b54\u6848 [[-2,4],[3,3]] \u4e5f\u4f1a\u88ab\u63a5\u53d7\u3002\uff09\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= K &lt;= points.length &lt;= 10000</code></li>\n\t<li><code>-10000 &lt; points[i][0] &lt; 10000</code></li>\n\t<li><code>-10000 &lt; points[i][1] &lt; 10000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Heap",
                "link": "heap",
                "tagZh": "\u5806"
            },
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Divide and Conquer",
                "link": "divide-and-conquer",
                "tagZh": "\u5206\u6cbb\u7b97\u6cd5"
            }
        ],
        "leetId": "973",
        "link": "k-closest-points-to-origin",
        "title": "K Closest Points to Origin",
        "is_locked": "Normal",
        "titleZh": "\u6700\u63a5\u8fd1\u539f\u70b9\u7684 K \u4e2a\u70b9",
        "frequency": "61.0%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by <code>K</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[4,5,0,-2,-3,1]</span>, K = <span id=\"example-input-1-2\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">7</span>\r\n<strong>Explanation: </strong>There are 7 subarrays with a sum divisible by K = 5:\r\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\r\n\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\r\n\t<li><code>2 &lt;= K &lt;= 10000</code></li>\r\n</ol>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u8fd4\u56de\u5176\u4e2d\u5143\u7d20\u4e4b\u548c\u53ef\u88ab <code>K</code>&nbsp;\u6574\u9664\u7684\uff08\u8fde\u7eed\u3001\u975e\u7a7a\uff09\u5b50\u6570\u7ec4\u7684\u6570\u76ee\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [4,5,0,-2,-3,1], K = 5\n<strong>\u8f93\u51fa\uff1a</strong>7\n<strong>\u89e3\u91ca\uff1a\n</strong>\u6709 7 \u4e2a\u5b50\u6570\u7ec4\u6ee1\u8db3\u5176\u5143\u7d20\u4e4b\u548c\u53ef\u88ab K = 5 \u6574\u9664\uff1a\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\n\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\n\t<li><code>2 &lt;= K &lt;= 10000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "leetId": "974",
        "link": "subarray-sums-divisible-by-k",
        "title": "Subarray Sums Divisible by K",
        "is_locked": "Normal",
        "titleZh": "\u548c\u53ef\u88ab K \u6574\u9664\u7684\u5b50\u6570\u7ec4",
        "frequency": "30.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>You are given an integer array <code>A</code>.&nbsp; From&nbsp;some starting index, you can make a series of jumps.&nbsp; The (1st, 3rd, 5th, ...)&nbsp;jumps in the series are called <em>odd numbered jumps</em>, and the (2nd, 4th, 6th, ...) jumps in the series are called <em>even numbered jumps</em>.</p>\r\n\r\n<p>You may from index <code>i</code>&nbsp;jump forward to index <code><font face=\"monospace\">j</font></code>&nbsp;(with <code>i&nbsp;&lt; j</code>) in the following way:</p>\r\n\r\n<ul>\r\n\t<li>During odd numbered jumps (ie. jumps 1, 3, 5, ...), you jump to the index <font face=\"monospace\">j</font>&nbsp;such that <code>A[i] &lt;= A[j]</code> and <code>A[j]</code> is the smallest possible value.&nbsp; If there are multiple such indexes <code><font face=\"monospace\">j</font></code>, you can only jump to the <strong>smallest</strong> such index <code><font face=\"monospace\">j</font></code>.</li>\r\n\t<li>During even numbered jumps (ie. jumps 2, 4, 6, ...), you jump to the index <font face=\"monospace\">j</font>&nbsp;such that <code>A[i] &gt;= A[j]</code> and <code>A[j]</code> is the largest&nbsp;possible value.&nbsp; If there are multiple such indexes <code><font face=\"monospace\">j</font></code>, you can only jump to the <strong>smallest</strong> such index <code><font face=\"monospace\">j</font></code>.</li>\r\n\t<li>(It may be the case that for some index <code><font face=\"monospace\">i</font>,</code> there are no legal jumps.)</li>\r\n</ul>\r\n\r\n<p>A starting index is <em>good</em> if, starting from that index, you can reach the end of the array (index <code>A.length - 1</code>) by jumping some number of times (possibly 0 or more than once.)</p>\r\n\r\n<p>Return the number of good starting indexes.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[10,13,12,14,15]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>\r\nFrom starting index i = 0, we can jump to i = 2 (since A[2] is the smallest among A[1], A[2], A[3], A[4] that is greater or equal to A[0]), then we can&#39;t jump any more.\r\nFrom starting index i = 1 and i = 2, we can jump to i = 3, then we can&#39;t jump any more.\r\nFrom starting index i = 3, we can jump to i = 4, so we&#39;ve reached the end.\r\nFrom starting index i = 4, we&#39;ve reached the end already.\r\nIn total, there are 2 different starting indexes (i = 3, i = 4) where we can reach the end with some number of jumps.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[2,3,1,1,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation: </strong>\r\nFrom starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\r\n\r\nDuring our 1st jump (odd numbered), we first jump to i = 1 because A[1] is the smallest value in (A[1], A[2], A[3], A[4]) that is greater than or equal to A[0].\r\n\r\nDuring our 2nd jump (even numbered), we jump from i = 1 to i = 2 because A[2] is the largest value in (A[2], A[3], A[4]) that is less than or equal to A[1].  A[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3.\r\n\r\nDuring our 3rd jump (odd numbered), we jump from i = 2 to i = 3 because A[3] is the smallest value in (A[3], A[4]) that is greater than or equal to A[2].\r\n\r\nWe can&#39;t jump from i = 3 to i = 4, so the starting index i = 0 is not good.\r\n\r\nIn a similar manner, we can deduce that:\r\nFrom starting index i = 1, we jump to i = 4, so we reach the end.\r\nFrom starting index i = 2, we jump to i = 3, and then we can&#39;t jump anymore.\r\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\r\nFrom starting index i = 4, we are already at the end.\r\nIn total, there are 3 different starting indexes (i = 1, i = 3, i = 4) where we can reach the end with some number of jumps.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[5,1,3,4,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation: </strong>\r\nWe can reach the end from starting indexes 1, 2, and 4.\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt; 100000</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u4f60\u53ef\u4ee5\u4ece\u67d0\u4e00\u8d77\u59cb\u7d22\u5f15\u51fa\u53d1\uff0c\u8df3\u8dc3\u4e00\u5b9a\u6b21\u6570\u3002\u5728\u4f60\u8df3\u8dc3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7b2c 1\u30013\u30015... \u6b21\u8df3\u8dc3\u79f0\u4e3a\u5947\u6570\u8df3\u8dc3\uff0c\u800c\u7b2c 2\u30014\u30016... \u6b21\u8df3\u8dc3\u79f0\u4e3a\u5076\u6570\u8df3\u8dc3\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4ee5\u4e0b\u65b9\u5f0f\u4ece\u7d22\u5f15 <code>i</code>&nbsp;\u5411\u540e\u8df3\u8f6c\u5230\u7d22\u5f15 <code>j</code>\uff08\u5176\u4e2d <code>i &lt; j</code>\uff09\uff1a</p>\n\n<ul>\n\t<li>\u5728\u8fdb\u884c\u5947\u6570\u8df3\u8dc3\u65f6\uff08\u5982\uff0c\u7b2c&nbsp;1\uff0c3\uff0c5... \u6b21\u8df3\u8dc3\uff09\uff0c\u4f60\u5c06\u4f1a\u8df3\u5230\u7d22\u5f15 <code>j</code>\uff0c\u4f7f\u5f97 <code>A[i] &lt;=&nbsp;A[j]</code>\uff0c<code>A[j]</code> \u662f\u53ef\u80fd\u7684\u6700\u5c0f\u503c\u3002\u5982\u679c\u5b58\u5728\u591a\u4e2a\u8fd9\u6837\u7684\u7d22\u5f15 <code>j</code>\uff0c\u4f60\u53ea\u80fd\u8df3\u5230\u6ee1\u8db3\u8981\u6c42\u7684<strong>\u6700\u5c0f</strong>\u7d22\u5f15 <code>j</code> \u4e0a\u3002</li>\n\t<li>\u5728\u8fdb\u884c\u5076\u6570\u8df3\u8dc3\u65f6\uff08\u5982\uff0c\u7b2c&nbsp;2\uff0c4\uff0c6... \u6b21\u8df3\u8dc3\uff09\uff0c\u4f60\u5c06\u4f1a\u8df3\u5230\u7d22\u5f15&nbsp;<code>j</code>\uff0c\u4f7f\u5f97 <code>A[i] =&gt; A[j]</code>\uff0c<code>A[j]</code> \u662f\u53ef\u80fd\u7684\u6700\u5927\u503c\u3002\u5982\u679c\u5b58\u5728\u591a\u4e2a\u8fd9\u6837\u7684\u7d22\u5f15 <code>j</code>\uff0c\u4f60\u53ea\u80fd\u8df3\u5230\u6ee1\u8db3\u8981\u6c42\u7684<strong>\u6700\u5c0f</strong>\u7d22\u5f15 <code>j</code>&nbsp;\u4e0a\u3002</li>\n\t<li>\uff08\u5bf9\u4e8e\u67d0\u4e9b\u7d22\u5f15 <code>i</code>\uff0c\u53ef\u80fd\u65e0\u6cd5\u8fdb\u884c\u5408\u4e4e\u8981\u6c42\u7684\u8df3\u8dc3\u3002\uff09</li>\n</ul>\n\n<p>\u5982\u679c\u4ece\u67d0\u4e00\u7d22\u5f15\u5f00\u59cb\u8df3\u8dc3\u4e00\u5b9a\u6b21\u6570\uff08\u53ef\u80fd\u662f 0 \u6b21\u6216\u591a\u6b21\uff09\uff0c\u5c31\u53ef\u4ee5\u5230\u8fbe\u6570\u7ec4\u7684\u672b\u5c3e\uff08\u7d22\u5f15 <code>A.length - 1</code>\uff09\uff0c\u90a3\u4e48\u8be5\u7d22\u5f15\u5c31\u4f1a\u88ab\u8ba4\u4e3a\u662f\u597d\u7684\u8d77\u59cb\u7d22\u5f15\u3002</p>\n\n<p>\u8fd4\u56de\u597d\u7684\u8d77\u59cb\u7d22\u5f15\u7684\u6570\u91cf\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[10,13,12,14,15]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a </strong>\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 0 \u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u8df3\u5230 i = 2\uff0c\uff08\u56e0\u4e3a A[2] \u662f A[1]\uff0cA[2]\uff0cA[3]\uff0cA[4] \u4e2d\u5927\u4e8e\u6216\u7b49\u4e8e A[0] \u7684\u6700\u5c0f\u503c\uff09\uff0c\u7136\u540e\u6211\u4eec\u5c31\u65e0\u6cd5\u7ee7\u7eed\u8df3\u4e0b\u53bb\u4e86\u3002\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 1 \u548c i = 2 \u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u8df3\u5230 i = 3\uff0c\u7136\u540e\u6211\u4eec\u5c31\u65e0\u6cd5\u7ee7\u7eed\u8df3\u4e0b\u53bb\u4e86\u3002\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 3 \u51fa\u53d1\uff0c\u6211\u4eec\u53ef\u4ee5\u8df3\u5230 i = 4\uff0c\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 4 \u51fa\u53d1\uff0c\u6211\u4eec\u5df2\u7ecf\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n\u603b\u4e4b\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece 2 \u4e2a\u4e0d\u540c\u7684\u8d77\u59cb\u7d22\u5f15\uff08i = 3, i = 4\uff09\u51fa\u53d1\uff0c\u901a\u8fc7\u4e00\u5b9a\u6570\u91cf\u7684\u8df3\u8dc3\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,3,1,1,4]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4ece\u8d77\u59cb\u7d22\u5f15 i=0 \u51fa\u53d1\uff0c\u6211\u4eec\u4f9d\u6b21\u53ef\u4ee5\u8df3\u5230 i = 1\uff0ci = 2\uff0ci = 3\uff1a\n\n\u5728\u6211\u4eec\u7684\u7b2c\u4e00\u6b21\u8df3\u8dc3\uff08\u5947\u6570\uff09\u4e2d\uff0c\u6211\u4eec\u5148\u8df3\u5230 i = 1\uff0c\u56e0\u4e3a A[1] \u662f\uff08A[1]\uff0cA[2]\uff0cA[3]\uff0cA[4]\uff09\u4e2d\u5927\u4e8e\u6216\u7b49\u4e8e A[0] \u7684\u6700\u5c0f\u503c\u3002\n\n\u5728\u6211\u4eec\u7684\u7b2c\u4e8c\u6b21\u8df3\u8dc3\uff08\u5076\u6570\uff09\u4e2d\uff0c\u6211\u4eec\u4ece i = 1 \u8df3\u5230 i = 2\uff0c\u56e0\u4e3a A[2] \u662f\uff08A[2]\uff0cA[3]\uff0cA[4]\uff09\u4e2d\u5c0f\u4e8e\u6216\u7b49\u4e8e A[1] \u7684\u6700\u5927\u503c\u3002A[3] \u4e5f\u662f\u6700\u5927\u7684\u503c\uff0c\u4f46 2 \u662f\u4e00\u4e2a\u8f83\u5c0f\u7684\u7d22\u5f15\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u8df3\u5230 i = 2\uff0c\u800c\u4e0d\u80fd\u8df3\u5230 i = 3\u3002\n\n\u5728\u6211\u4eec\u7684\u7b2c\u4e09\u6b21\u8df3\u8dc3\uff08\u5947\u6570\uff09\u4e2d\uff0c\u6211\u4eec\u4ece i = 2 \u8df3\u5230 i = 3\uff0c\u56e0\u4e3a A[3] \u662f\uff08A[3]\uff0cA[4]\uff09\u4e2d\u5927\u4e8e\u6216\u7b49\u4e8e A[2] \u7684\u6700\u5c0f\u503c\u3002\n\n\u6211\u4eec\u4e0d\u80fd\u4ece i = 3 \u8df3\u5230 i = 4\uff0c\u6240\u4ee5\u8d77\u59cb\u7d22\u5f15 i = 0 \u4e0d\u662f\u597d\u7684\u8d77\u59cb\u7d22\u5f15\u3002\n\n\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u65ad\uff1a\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 1 \u51fa\u53d1\uff0c \u6211\u4eec\u8df3\u5230 i = 4\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 2 \u51fa\u53d1\uff0c \u6211\u4eec\u8df3\u5230 i = 3\uff0c\u7136\u540e\u6211\u4eec\u5c31\u4e0d\u80fd\u518d\u8df3\u4e86\u3002\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 3 \u51fa\u53d1\uff0c \u6211\u4eec\u8df3\u5230 i = 4\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n\u4ece\u8d77\u59cb\u7d22\u5f15 i = 4 \u51fa\u53d1\uff0c\u6211\u4eec\u5df2\u7ecf\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n\u603b\u4e4b\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece 3 \u4e2a\u4e0d\u540c\u7684\u8d77\u59cb\u7d22\u5f15\uff08i = 1, i = 3, i = 4\uff09\u51fa\u53d1\uff0c\u901a\u8fc7\u4e00\u5b9a\u6570\u91cf\u7684\u8df3\u8dc3\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[5,1,3,4,2]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a </strong>\n\u6211\u4eec\u53ef\u4ee5\u4ece\u8d77\u59cb\u7d22\u5f15 1\uff0c2\uff0c4 \u51fa\u53d1\u5230\u8fbe\u6570\u7ec4\u672b\u5c3e\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= A[i] &lt; 100000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Binary Search Tree",
                "link": "binary-search-tree",
                "tagZh": "\u4e8c\u53c9\u641c\u7d22\u6811"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "975",
        "link": "odd-even-jump",
        "title": "Odd Even Jump",
        "is_locked": "Normal",
        "titleZh": "\u5947\u5076\u8df3",
        "frequency": "43.3%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of positive lengths, return the largest perimeter of a triangle with <strong>non-zero area</strong>, formed from 3 of these lengths.</p>\r\n\r\n<p>If it is impossible to form any&nbsp;triangle of non-zero area, return <code>0</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[2,1,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">5</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,2,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">0</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[3,2,3,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">10</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[3,6,2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">8</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>3 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 10^6</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u7531\u4e00\u4e9b\u6b63\u6570\uff08\u4ee3\u8868\u957f\u5ea6\uff09\u7ec4\u6210\u7684\u6570\u7ec4 <code>A</code>\uff0c\u8fd4\u56de\u7531\u5176\u4e2d\u4e09\u4e2a\u957f\u5ea6\u7ec4\u6210\u7684\u3001<strong>\u9762\u79ef\u4e0d\u4e3a\u96f6</strong>\u7684\u4e09\u89d2\u5f62\u7684\u6700\u5927\u5468\u957f\u3002</p>\n\n<p>\u5982\u679c\u4e0d\u80fd\u5f62\u6210\u4efb\u4f55\u9762\u79ef\u4e0d\u4e3a\u96f6\u7684\u4e09\u89d2\u5f62\uff0c\u8fd4\u56de&nbsp;<code>0</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1,2]\n<strong>\u8f93\u51fa\uff1a</strong>5\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,1]\n<strong>\u8f93\u51fa\uff1a</strong>0\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,2,3,4]\n<strong>\u8f93\u51fa\uff1a</strong>10\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,6,2,3]\n<strong>\u8f93\u51fa\uff1a</strong>8\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 10^6</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Sort",
                "link": "sort",
                "tagZh": "\u6392\u5e8f"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "976",
        "link": "largest-perimeter-triangle",
        "title": "Largest Perimeter Triangle",
        "is_locked": "Normal",
        "titleZh": "\u4e09\u89d2\u5f62\u7684\u6700\u5927\u5468\u957f",
        "frequency": "55.8%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given an array of integers <code>A</code>&nbsp;sorted in non-decreasing order,&nbsp;return an array of the squares of each number,&nbsp;also in sorted non-decreasing order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[-4,-1,0,3,10]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,1,9,16,100]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[-7,-3,2,3,11]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[4,9,9,49,121]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code><span>1 &lt;= A.length &lt;= 10000</span></code></li>\r\n\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\r\n\t<li><code>A</code>&nbsp;is sorted in non-decreasing order.</li>\r\n</ol>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6309\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u8fd4\u56de\u6bcf\u4e2a\u6570\u5b57\u7684\u5e73\u65b9\u7ec4\u6210\u7684\u65b0\u6570\u7ec4\uff0c\u8981\u6c42\u4e5f\u6309\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5e8f\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[-4,-1,0,3,10]\n<strong>\u8f93\u51fa\uff1a</strong>[0,1,9,16,100]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[-7,-3,2,3,11]\n<strong>\u8f93\u51fa\uff1a</strong>[4,9,9,49,121]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\n\t<li><code>A</code>&nbsp;\u5df2\u6309\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5e8f\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "leetId": "977",
        "link": "squares-of-a-sorted-array",
        "title": "Squares of a Sorted Array",
        "is_locked": "Normal",
        "titleZh": "\u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9",
        "frequency": "71.0%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>A subarray <code>A[i], A[i+1], ..., A[j]</code>&nbsp;of <code>A</code> is said to be <em>turbulent</em> if and only if:</p>\r\n\r\n<ul>\r\n\t<li>For <code>i &lt;= k &lt; j</code>, <code>A[k] &gt; A[k+1]</code> when <code>k</code> is odd, and <code>A[k] &lt; A[k+1]</code> when <code>k</code> is even;</li>\r\n\t<li><strong>OR</strong>, for <code>i &lt;= k &lt; j</code>, <code>A[k] &gt; A[k+1]</code> when <code>k</code> is even, and <code>A[k] &lt; A[k+1]</code> when <code>k</code> is odd.</li>\r\n</ul>\r\n\r\n<p>That is, the subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.</p>\r\n\r\n<p>Return the <strong>length</strong> of a&nbsp;maximum size turbulent subarray of A.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[9,4,2,10,7,8,8,1,9]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">5</span>\r\n<strong>Explanation: </strong>(A[1] &gt; A[2] &lt; A[3] &gt; A[4] &lt; A[5])\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[4,8,12,16]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[100]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">1</span>\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 40000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u5f53 <code>A</code>&nbsp;\u7684\u5b50\u6570\u7ec4&nbsp;<code>A[i], A[i+1], ..., A[j]</code>&nbsp;\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u65f6\uff0c\u6211\u4eec\u79f0\u5176\u4e3a<em>\u6e4d\u6d41\u5b50\u6570\u7ec4</em>\uff1a</p>\n\n<ul>\n\t<li>\u82e5&nbsp;<code>i &lt;= k &lt; j</code>\uff0c\u5f53 <code>k</code>&nbsp;\u4e3a\u5947\u6570\u65f6\uff0c&nbsp;<code>A[k] &gt; A[k+1]</code>\uff0c\u4e14\u5f53 <code>k</code> \u4e3a\u5076\u6570\u65f6\uff0c<code>A[k] &lt; A[k+1]</code>\uff1b</li>\n\t<li><strong>\u6216 </strong>\u82e5&nbsp;<code>i &lt;= k &lt; j</code>\uff0c\u5f53 <code>k</code> \u4e3a\u5076\u6570\u65f6\uff0c<code>A[k] &gt; A[k+1]</code>&nbsp;\uff0c\u4e14\u5f53 <code>k</code>&nbsp;\u4e3a\u5947\u6570\u65f6\uff0c&nbsp;<code>A[k] &lt; A[k+1]</code>\u3002</li>\n</ul>\n\n<p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6bd4\u8f83\u7b26\u53f7\u5728\u5b50\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u76f8\u90bb\u5143\u7d20\u5bf9\u4e4b\u95f4\u7ffb\u8f6c\uff0c\u5219\u8be5\u5b50\u6570\u7ec4\u662f\u6e4d\u6d41\u5b50\u6570\u7ec4\u3002</p>\n\n<p>\u8fd4\u56de <code>A</code> \u7684\u6700\u5927\u6e4d\u6d41\u5b50\u6570\u7ec4\u7684<strong>\u957f\u5ea6</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[9,4,2,10,7,8,8,1,9]\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>(A[1] &gt; A[2] &lt; A[3] &gt; A[4] &lt; A[5])\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[4,8,12,16]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[100]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 40000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            },
            {
                "tag": "Sliding Window",
                "link": "sliding-window",
                "tagZh": null
            }
        ],
        "leetId": "978",
        "link": "longest-turbulent-subarray",
        "title": "Longest Turbulent Subarray",
        "is_locked": "Normal",
        "titleZh": "\u6700\u957f\u6e4d\u6d41\u5b50\u6570\u7ec4",
        "frequency": "36.4%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given the <code>root</code> of a binary tree with <code>N</code> nodes, each <code>node</code>&nbsp;in the tree has <code>node.val</code> coins, and there are <code>N</code> coins total.</p>\r\n\r\n<p>In one move, we may choose two adjacent nodes and move one coin from one node to another.&nbsp; (The move may be from parent to child, or from child to parent.)</p>\r\n\r\n<p>Return the number of moves required to make every node have exactly one coin.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/18/tree1.png\" style=\"width: 150px; height: 142px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,0,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>From the root of the tree, we move one coin to its left child, and one coin to its right child.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/18/tree2.png\" style=\"width: 150px; height: 142px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[0,3,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation: </strong>From the left child of the root, we move two coins to the root [taking two moves].  Then, we move one coin from the root of the tree to the right child.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/18/tree3.png\" style=\"width: 150px; height: 142px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,0,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/18/tree4.png\" style=\"width: 155px; height: 156px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[1,0,0,null,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">4</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>1&lt;= N &lt;= 100</code></li>\r\n\t<li><code>0 &lt;= node.val &lt;= N</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6709 <code>N</code> \u4e2a\u7ed3\u70b9\u7684\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9 <code>root</code>\uff0c\u6811\u4e2d\u7684\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u90fd\u5bf9\u5e94\u6709 <code>node.val</code> \u679a\u786c\u5e01\uff0c\u5e76\u4e14\u603b\u5171\u6709 <code>N</code> \u679a\u786c\u5e01\u3002</p>\n\n<p>\u5728\u4e00\u6b21\u79fb\u52a8\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4e24\u4e2a\u76f8\u90bb\u7684\u7ed3\u70b9\uff0c\u7136\u540e\u5c06\u4e00\u679a\u786c\u5e01\u4ece\u5176\u4e2d\u4e00\u4e2a\u7ed3\u70b9\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u7ed3\u70b9\u3002(\u79fb\u52a8\u53ef\u4ee5\u662f\u4ece\u7236\u7ed3\u70b9\u5230\u5b50\u7ed3\u70b9\uff0c\u6216\u8005\u4ece\u5b50\u7ed3\u70b9\u79fb\u52a8\u5230\u7236\u7ed3\u70b9\u3002)\u3002</p>\n\n<p>\u8fd4\u56de\u4f7f\u6bcf\u4e2a\u7ed3\u70b9\u4e0a\u53ea\u6709\u4e00\u679a\u786c\u5e01\u6240\u9700\u7684\u79fb\u52a8\u6b21\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/tree1.png\" style=\"height: 142px; width: 150px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,0,0]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u4e00\u679a\u786c\u5e01\u79fb\u5230\u5b83\u7684\u5de6\u5b50\u7ed3\u70b9\u4e0a\uff0c\u4e00\u679a\u786c\u5e01\u79fb\u5230\u5b83\u7684\u53f3\u5b50\u7ed3\u70b9\u4e0a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/tree2.png\" style=\"height: 142px; width: 150px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,3,0]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u4ece\u6839\u7ed3\u70b9\u7684\u5de6\u5b50\u7ed3\u70b9\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u4e24\u679a\u786c\u5e01\u79fb\u5230\u6839\u7ed3\u70b9\u4e0a [\u79fb\u52a8\u4e24\u6b21]\u3002\u7136\u540e\uff0c\u6211\u4eec\u628a\u4e00\u679a\u786c\u5e01\u4ece\u6839\u7ed3\u70b9\u79fb\u5230\u53f3\u5b50\u7ed3\u70b9\u4e0a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/tree3.png\" style=\"height: 142px; width: 150px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,0,2]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/01/19/tree4.png\" style=\"height: 156px; width: 155px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,0,0,null,3]\n<strong>\u8f93\u51fa\uff1a</strong>4\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1&lt;= N &lt;= 100</code></li>\n\t<li><code>0 &lt;= node.val &lt;= N</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "leetId": "979",
        "link": "distribute-coins-in-binary-tree",
        "title": "Distribute Coins in Binary Tree",
        "is_locked": "Normal",
        "titleZh": "\u5728\u4e8c\u53c9\u6811\u4e2d\u5206\u914d\u786c\u5e01",
        "frequency": "63.4%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>On a 2-dimensional&nbsp;<code>grid</code>, there are 4 types of squares:</p>\r\n\r\n<ul>\r\n\t<li><code>1</code> represents the starting square.&nbsp; There is exactly one starting square.</li>\r\n\t<li><code>2</code> represents the ending square.&nbsp; There is exactly one ending square.</li>\r\n\t<li><code>0</code> represents empty squares we can walk over.</li>\r\n\t<li><code>-1</code> represents obstacles that we cannot walk over.</li>\r\n</ul>\r\n\r\n<p>Return the number of 4-directional walks&nbsp;from the starting square to the ending square, that <strong>walk over every non-obstacle square&nbsp;exactly once</strong>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>We have the following two paths: \r\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\r\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[1,0,0,0],[0,0,0,0],[0,0,0,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">4</span>\r\n<strong>Explanation: </strong>We have the following four paths: \r\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\r\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\r\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\r\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[0,1],[2,0]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0</span>\r\n<strong>Explanation: </strong>\r\nThere is no path that walks over every empty square exactly once.\r\nNote that the starting and ending square can be anywhere in the grid.\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= grid.length * grid[0].length &lt;= 20</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u5728\u4e8c\u7ef4\u7f51\u683c <code>grid</code> \u4e0a\uff0c\u6709 4 \u79cd\u7c7b\u578b\u7684\u65b9\u683c\uff1a</p>\n\n<ul>\n\t<li><code>1</code> \u8868\u793a\u8d77\u59cb\u65b9\u683c\u3002\u4e14\u53ea\u6709\u4e00\u4e2a\u8d77\u59cb\u65b9\u683c\u3002</li>\n\t<li><code>2</code> \u8868\u793a\u7ed3\u675f\u65b9\u683c\uff0c\u4e14\u53ea\u6709\u4e00\u4e2a\u7ed3\u675f\u65b9\u683c\u3002</li>\n\t<li><code>0</code> \u8868\u793a\u6211\u4eec\u53ef\u4ee5\u8d70\u8fc7\u7684\u7a7a\u65b9\u683c\u3002</li>\n\t<li><code>-1</code> \u8868\u793a\u6211\u4eec\u65e0\u6cd5\u8de8\u8d8a\u7684\u969c\u788d\u3002</li>\n</ul>\n\n<p>\u8fd4\u56de\u5728\u56db\u4e2a\u65b9\u5411\uff08\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\uff09\u4e0a\u884c\u8d70\u65f6\uff0c\u4ece\u8d77\u59cb\u65b9\u683c\u5230\u7ed3\u675f\u65b9\u683c\u7684\u4e0d\u540c\u8def\u5f84\u7684\u6570\u76ee\uff0c<strong>\u6bcf\u4e00\u4e2a\u65e0\u969c\u788d\u65b9\u683c\u90fd\u8981\u901a\u8fc7\u4e00\u6b21</strong>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u6709\u4ee5\u4e0b\u4e24\u6761\u8def\u5f84\uff1a\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[1,0,0,0],[0,0,0,0],[0,0,0,2]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u6709\u4ee5\u4e0b\u56db\u6761\u8def\u5f84\uff1a \n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,1],[2,0]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6ca1\u6709\u4e00\u6761\u8def\u80fd\u5b8c\u5168\u7a7f\u8fc7\u6bcf\u4e00\u4e2a\u7a7a\u7684\u65b9\u683c\u4e00\u6b21\u3002\n\u8bf7\u6ce8\u610f\uff0c\u8d77\u59cb\u548c\u7ed3\u675f\u65b9\u683c\u53ef\u4ee5\u4f4d\u4e8e\u7f51\u683c\u4e2d\u7684\u4efb\u610f\u4f4d\u7f6e\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length * grid[0].length &lt;= 20</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "leetId": "980",
        "link": "unique-paths-iii",
        "title": "Unique Paths III",
        "is_locked": "Normal",
        "titleZh": "\u4e0d\u540c\u8def\u5f84 III",
        "frequency": "68.5%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>Create a timebased key-value store class&nbsp;<code>TimeMap</code>, that supports two operations.</p>\r\n\r\n<p>1. <code>set(string key, string value, int timestamp)</code></p>\r\n\r\n<ul>\r\n\t<li>Stores the <code>key</code> and <code>value</code>, along with the given <code>timestamp</code>.</li>\r\n</ul>\r\n\r\n<p>2. <code>get(string key, int timestamp)</code></p>\r\n\r\n<ul>\r\n\t<li>Returns a value such that <code>set(key, value, timestamp_prev)</code> was called previously, with <code>timestamp_prev &lt;= timestamp</code>.</li>\r\n\t<li>If there are multiple such values, it returns the one with the largest <code>timestamp_prev</code>.</li>\r\n\t<li>If there are no values, it returns the empty string (<code>&quot;&quot;</code>).</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-1-1\">[&quot;TimeMap&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;]</span>, inputs = <span id=\"example-input-1-2\">[[],[&quot;foo&quot;,&quot;bar&quot;,1],[&quot;foo&quot;,1],[&quot;foo&quot;,3],[&quot;foo&quot;,&quot;bar2&quot;,4],[&quot;foo&quot;,4],[&quot;foo&quot;,5]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[null,null,&quot;bar&quot;,&quot;bar&quot;,null,&quot;bar2&quot;,&quot;bar2&quot;]</span>\r\n<strong>Explanation: </strong><span id=\"example-output-1\">&nbsp; \r\nTimeMap kv; &nbsp; \r\nkv.set(&quot;foo&quot;, &quot;bar&quot;, 1); // store the key &quot;foo&quot; and value &quot;bar&quot; along with timestamp = 1 &nbsp; \r\nkv.get(&quot;foo&quot;, 1);  // output &quot;bar&quot; &nbsp; \r\nkv.get(&quot;foo&quot;, 3); // output &quot;bar&quot; since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie &quot;bar&quot; &nbsp; \r\nkv.set(&quot;foo&quot;, &quot;bar2&quot;, 4); &nbsp; \r\nkv.get(&quot;foo&quot;, 4); // output &quot;bar2&quot; &nbsp; \r\nkv.get(&quot;foo&quot;, 5); //output &quot;bar2&quot; &nbsp; \r\n</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>inputs = <span id=\"example-input-2-1\">[&quot;TimeMap&quot;,&quot;set&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;]</span>, inputs = <span id=\"example-input-2-2\">[[],[&quot;love&quot;,&quot;high&quot;,10],[&quot;love&quot;,&quot;low&quot;,20],[&quot;love&quot;,5],[&quot;love&quot;,10],[&quot;love&quot;,15],[&quot;love&quot;,20],[&quot;love&quot;,25]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[null,null,null,&quot;&quot;,&quot;high&quot;,&quot;high&quot;,&quot;low&quot;,&quot;low&quot;]</span>\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>All key/value strings are lowercase.</li>\r\n\t<li>All key/value strings have&nbsp;length in the range&nbsp;<code>[1, 100]</code></li>\r\n\t<li>The <code>timestamps</code> for all <code>TimeMap.set</code> operations are strictly increasing.</li>\r\n\t<li><code>1 &lt;= timestamp &lt;= 10^7</code></li>\r\n\t<li><code>TimeMap.set</code> and <code>TimeMap.get</code>&nbsp;functions will be called a total of <code>120000</code> times (combined) per test case.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e\u65f6\u95f4\u7684\u952e\u503c\u5b58\u50a8\u7c7b&nbsp;<code>TimeMap</code>\uff0c\u5b83\u652f\u6301\u4e0b\u9762\u4e24\u4e2a\u64cd\u4f5c\uff1a</p>\n\n<p>1. <code>set(string key, string value, int timestamp)</code></p>\n\n<ul>\n\t<li>\u5b58\u50a8\u952e&nbsp;<code>key</code>\u3001\u503c&nbsp;<code>value</code>\uff0c\u4ee5\u53ca\u7ed9\u5b9a\u7684\u65f6\u95f4\u6233&nbsp;<code>timestamp</code>\u3002</li>\n</ul>\n\n<p>2. <code>get(string key, int timestamp)</code></p>\n\n<ul>\n\t<li>\u8fd4\u56de\u5148\u524d\u8c03\u7528&nbsp;<code>set(key, value, timestamp_prev)</code>&nbsp;\u6240\u5b58\u50a8\u7684\u503c\uff0c\u5176\u4e2d&nbsp;<code>timestamp_prev &lt;= timestamp</code>\u3002</li>\n\t<li>\u5982\u679c\u6709\u591a\u4e2a\u8fd9\u6837\u7684\u503c\uff0c\u5219\u8fd4\u56de\u5bf9\u5e94\u6700\u5927\u7684&nbsp;&nbsp;<code>timestamp_prev</code>&nbsp;\u7684\u90a3\u4e2a\u503c\u3002</li>\n\t<li>\u5982\u679c\u6ca1\u6709\u503c\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\uff08<code>&quot;&quot;</code>\uff09\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>inputs = [&quot;TimeMap&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;], inputs = [[],[&quot;foo&quot;,&quot;bar&quot;,1],[&quot;foo&quot;,1],[&quot;foo&quot;,3],[&quot;foo&quot;,&quot;bar2&quot;,4],[&quot;foo&quot;,4],[&quot;foo&quot;,5]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,null,&quot;bar&quot;,&quot;bar&quot;,null,&quot;bar2&quot;,&quot;bar2&quot;]\n<strong>\u89e3\u91ca\uff1a</strong>&nbsp; \nTimeMap kv; &nbsp; \nkv.set(&quot;foo&quot;, &quot;bar&quot;, 1); // \u5b58\u50a8\u952e &quot;foo&quot; \u548c\u503c &quot;bar&quot; \u4ee5\u53ca\u65f6\u95f4\u6233 timestamp = 1 &nbsp; \nkv.get(&quot;foo&quot;, 1);  // \u8f93\u51fa &quot;bar&quot; &nbsp; \nkv.get(&quot;foo&quot;, 3); // \u8f93\u51fa &quot;bar&quot; \u56e0\u4e3a\u5728\u65f6\u95f4\u6233 3 \u548c\u65f6\u95f4\u6233 2 \u5904\u6ca1\u6709\u5bf9\u5e94 &quot;foo&quot; \u7684\u503c\uff0c\u6240\u4ee5\u552f\u4e00\u7684\u503c\u4f4d\u4e8e\u65f6\u95f4\u6233 1 \u5904\uff08\u5373 &quot;bar&quot;\uff09 &nbsp; \nkv.set(&quot;foo&quot;, &quot;bar2&quot;, 4); &nbsp; \nkv.get(&quot;foo&quot;, 4); // \u8f93\u51fa &quot;bar2&quot; &nbsp; \nkv.get(&quot;foo&quot;, 5); // \u8f93\u51fa &quot;bar2&quot; &nbsp; \n\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>inputs = [&quot;TimeMap&quot;,&quot;set&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;], inputs = [[],[&quot;love&quot;,&quot;high&quot;,10],[&quot;love&quot;,&quot;low&quot;,20],[&quot;love&quot;,5],[&quot;love&quot;,10],[&quot;love&quot;,15],[&quot;love&quot;,20],[&quot;love&quot;,25]]\n<strong>\u8f93\u51fa\uff1a</strong>[null,null,null,&quot;&quot;,&quot;high&quot;,&quot;high&quot;,&quot;low&quot;,&quot;low&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6240\u6709\u7684\u952e/\u503c\u5b57\u7b26\u4e32\u90fd\u662f\u5c0f\u5199\u7684\u3002</li>\n\t<li>\u6240\u6709\u7684\u952e/\u503c\u5b57\u7b26\u4e32\u957f\u5ea6\u90fd\u5728&nbsp;<code>[1, 100]</code>&nbsp;\u8303\u56f4\u5185\u3002</li>\n\t<li>\u6240\u6709&nbsp;<code>TimeMap.set</code>&nbsp;\u64cd\u4f5c\u4e2d\u7684\u65f6\u95f4\u6233&nbsp;<code>timestamps</code> \u90fd\u662f\u4e25\u683c\u9012\u589e\u7684\u3002</li>\n\t<li><code>1 &lt;= timestamp &lt;= 10^7</code></li>\n\t<li><code>TimeMap.set</code> \u548c&nbsp;<code>TimeMap.get</code>&nbsp;\u51fd\u6570\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u5c06\uff08\u7ec4\u5408\uff09\u8c03\u7528\u603b\u8ba1&nbsp;<code>120000</code> \u6b21\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "leetId": "981",
        "link": "time-based-key-value-store",
        "title": "Time Based Key-Value Store",
        "is_locked": "Normal",
        "titleZh": "\u57fa\u4e8e\u65f6\u95f4\u7684\u952e\u503c\u5b58\u50a8",
        "frequency": "34.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given an array of integers <code>A</code>, find the number of&nbsp;triples of indices (i, j, k)&nbsp;such that:</p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= i &lt; A.length</code></li>\r\n\t<li><code>0 &lt;= j &lt; A.length</code></li>\r\n\t<li><code>0 &lt;= k &lt; A.length</code></li>\r\n\t<li><code>A[i]&nbsp;&amp; A[j]&nbsp;&amp; A[k] == 0</code>, where <code>&amp;</code>&nbsp;represents the bitwise-AND operator.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[2,1,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">12</span>\r\n<strong>Explanation: </strong>We could choose the following i, j, k triples:\r\n(i=0, j=0, k=1) : 2 &amp; 2 &amp; 1\r\n(i=0, j=1, k=0) : 2 &amp; 1 &amp; 2\r\n(i=0, j=1, k=1) : 2 &amp; 1 &amp; 1\r\n(i=0, j=1, k=2) : 2 &amp; 1 &amp; 3\r\n(i=0, j=2, k=1) : 2 &amp; 3 &amp; 1\r\n(i=1, j=0, k=0) : 1 &amp; 2 &amp; 2\r\n(i=1, j=0, k=1) : 1 &amp; 2 &amp; 1\r\n(i=1, j=0, k=2) : 1 &amp; 2 &amp; 3\r\n(i=1, j=1, k=0) : 1 &amp; 1 &amp; 2\r\n(i=1, j=2, k=0) : 1 &amp; 3 &amp; 2\r\n(i=2, j=0, k=1) : 3 &amp; 2 &amp; 1\r\n(i=2, j=1, k=0) : 3 &amp; 1 &amp; 2\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code><font face=\"monospace\">1 &lt;= A.length &lt;= 1000</font></code></li>\r\n\t<li><code>0 &lt;= A[i] &lt; 2^16</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u627e\u51fa\u7d22\u5f15\u4e3a (i, j, k) \u7684\u4e09\u5143\u7ec4\uff0c\u4f7f\u5f97\uff1a</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; A.length</code></li>\n\t<li><code>0 &lt;= j &lt; A.length</code></li>\n\t<li><code>0 &lt;= k &lt; A.length</code></li>\n\t<li><code>A[i]&nbsp;&amp; A[j]&nbsp;&amp; A[k] == 0</code>\uff0c\u5176\u4e2d&nbsp;<code>&amp;</code>&nbsp;\u8868\u793a\u6309\u4f4d\u4e0e\uff08AND\uff09\u64cd\u4f5c\u7b26\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1,3]\n<strong>\u8f93\u51fa\uff1a</strong>12\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u9009\u51fa\u5982\u4e0b i, j, k \u4e09\u5143\u7ec4\uff1a\n(i=0, j=0, k=1) : 2 &amp; 2 &amp; 1\n(i=0, j=1, k=0) : 2 &amp; 1 &amp; 2\n(i=0, j=1, k=1) : 2 &amp; 1 &amp; 1\n(i=0, j=1, k=2) : 2 &amp; 1 &amp; 3\n(i=0, j=2, k=1) : 2 &amp; 3 &amp; 1\n(i=1, j=0, k=0) : 1 &amp; 2 &amp; 2\n(i=1, j=0, k=1) : 1 &amp; 2 &amp; 1\n(i=1, j=0, k=2) : 1 &amp; 2 &amp; 3\n(i=1, j=1, k=0) : 1 &amp; 1 &amp; 2\n(i=1, j=2, k=0) : 1 &amp; 3 &amp; 2\n(i=2, j=0, k=1) : 3 &amp; 2 &amp; 1\n(i=2, j=1, k=0) : 3 &amp; 1 &amp; 2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= A[i] &lt; 2^16</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "982",
        "link": "triples-with-bitwise-and-equal-to-zero",
        "title": "Triples with Bitwise AND Equal To Zero",
        "is_locked": "Normal",
        "titleZh": "\u6309\u4f4d\u4e0e\u4e3a\u96f6\u7684\u4e09\u5143\u7ec4",
        "frequency": "40.3%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>In a country popular for train travel, you&nbsp;have planned some train travelling one year in advance.&nbsp; The days of the year that you will travel is given as an array <code>days</code>.&nbsp; Each day is an integer from <code>1</code> to <code>365</code>.</p>\r\n\r\n<p>Train tickets are sold in 3 different ways:</p>\r\n\r\n<ul>\r\n\t<li>a 1-day pass is sold for <code>costs[0]</code> dollars;</li>\r\n\t<li>a 7-day pass is sold for <code>costs[1]</code> dollars;</li>\r\n\t<li>a 30-day pass is sold for <code>costs[2]</code> dollars.</li>\r\n</ul>\r\n\r\n<p>The passes allow that many days of consecutive travel.&nbsp; For example, if we get a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and 8.</p>\r\n\r\n<p>Return the minimum number of dollars you need to travel every day in the given list of <code>days</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>days = <span id=\"example-input-1-1\">[1,4,6,7,8,20]</span>, costs = <span id=\"example-input-1-2\">[2,7,15]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">11</span>\r\n<strong>Explanation: </strong>\r\nFor example, here is one way to buy passes that lets you travel your travel plan:\r\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\r\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\r\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\r\nIn total you spent $11 and covered all the days of your travel.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>days = <span id=\"example-input-2-1\">[1,2,3,4,5,6,7,8,9,10,30,31]</span>, costs = <span id=\"example-input-2-2\">[2,7,15]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">17</span>\r\n<strong>Explanation: </strong>\r\nFor example, here is one way to buy passes that lets you travel your travel plan:\r\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\r\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\r\nIn total you spent $17 and covered all the days of your travel.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= days.length &lt;= 365</code></li>\r\n\t<li><code>1 &lt;= days[i] &lt;= 365</code></li>\r\n\t<li><code>days</code> is in strictly increasing order.</li>\r\n\t<li><code>costs.length == 3</code></li>\r\n\t<li><code>1 &lt;= costs[i] &lt;= 1000</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e00\u4e2a\u706b\u8f66\u65c5\u884c\u5f88\u53d7\u6b22\u8fce\u7684\u56fd\u5ea6\uff0c\u4f60\u63d0\u524d\u4e00\u5e74\u8ba1\u5212\u4e86\u4e00\u4e9b\u706b\u8f66\u65c5\u884c\u3002\u5728\u63a5\u4e0b\u6765\u7684\u4e00\u5e74\u91cc\uff0c\u4f60\u8981\u65c5\u884c\u7684\u65e5\u5b50\u5c06\u4ee5\u4e00\u4e2a\u540d\u4e3a&nbsp;<code>days</code>&nbsp;\u7684\u6570\u7ec4\u7ed9\u51fa\u3002\u6bcf\u4e00\u9879\u662f\u4e00\u4e2a\u4ece&nbsp;<code>1</code>&nbsp;\u5230&nbsp;<code>365</code>&nbsp;\u7684\u6574\u6570\u3002</p>\n\n<p>\u706b\u8f66\u7968\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u9500\u552e\u65b9\u5f0f\uff1a</p>\n\n<ul>\n\t<li>\u4e00\u5f20\u4e3a\u671f\u4e00\u5929\u7684\u901a\u884c\u8bc1\u552e\u4ef7\u4e3a&nbsp;<code>costs[0]</code> \u7f8e\u5143\uff1b</li>\n\t<li>\u4e00\u5f20\u4e3a\u671f\u4e03\u5929\u7684\u901a\u884c\u8bc1\u552e\u4ef7\u4e3a&nbsp;<code>costs[1]</code> \u7f8e\u5143\uff1b</li>\n\t<li>\u4e00\u5f20\u4e3a\u671f\u4e09\u5341\u5929\u7684\u901a\u884c\u8bc1\u552e\u4ef7\u4e3a&nbsp;<code>costs[2]</code> \u7f8e\u5143\u3002</li>\n</ul>\n\n<p>\u901a\u884c\u8bc1\u5141\u8bb8\u6570\u5929\u65e0\u9650\u5236\u7684\u65c5\u884c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u5728\u7b2c 2 \u5929\u83b7\u5f97\u4e00\u5f20\u4e3a\u671f 7 \u5929\u7684\u901a\u884c\u8bc1\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fde\u7740\u65c5\u884c 7 \u5929\uff1a\u7b2c 2 \u5929\u3001\u7b2c 3 \u5929\u3001\u7b2c 4 \u5929\u3001\u7b2c 5 \u5929\u3001\u7b2c 6 \u5929\u3001\u7b2c 7 \u5929\u548c\u7b2c 8 \u5929\u3002</p>\n\n<p>\u8fd4\u56de\u4f60\u60f3\u8981\u5b8c\u6210\u5728\u7ed9\u5b9a\u7684\u5217\u8868&nbsp;<code>days</code>&nbsp;\u4e2d\u5217\u51fa\u7684\u6bcf\u4e00\u5929\u7684\u65c5\u884c\u6240\u9700\u8981\u7684\u6700\u4f4e\u6d88\u8d39\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>days = [1,4,6,7,8,20], costs = [2,7,15]\n<strong>\u8f93\u51fa\uff1a</strong>11\n<strong>\u89e3\u91ca\uff1a </strong>\n\u4f8b\u5982\uff0c\u8fd9\u91cc\u6709\u4e00\u79cd\u8d2d\u4e70\u901a\u884c\u8bc1\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u4f60\u5b8c\u6210\u4f60\u7684\u65c5\u884c\u8ba1\u5212\uff1a\n\u5728\u7b2c 1 \u5929\uff0c\u4f60\u82b1\u4e86 costs[0] = $2 \u4e70\u4e86\u4e00\u5f20\u4e3a\u671f 1 \u5929\u7684\u901a\u884c\u8bc1\uff0c\u5b83\u5c06\u5728\u7b2c 1 \u5929\u751f\u6548\u3002\n\u5728\u7b2c 3 \u5929\uff0c\u4f60\u82b1\u4e86 costs[1] = $7 \u4e70\u4e86\u4e00\u5f20\u4e3a\u671f 7 \u5929\u7684\u901a\u884c\u8bc1\uff0c\u5b83\u5c06\u5728\u7b2c 3, 4, ..., 9 \u5929\u751f\u6548\u3002\n\u5728\u7b2c 20 \u5929\uff0c\u4f60\u82b1\u4e86 costs[0] = $2 \u4e70\u4e86\u4e00\u5f20\u4e3a\u671f 1 \u5929\u7684\u901a\u884c\u8bc1\uff0c\u5b83\u5c06\u5728\u7b2c 20 \u5929\u751f\u6548\u3002\n\u4f60\u603b\u5171\u82b1\u4e86 $11\uff0c\u5e76\u5b8c\u6210\u4e86\u4f60\u8ba1\u5212\u7684\u6bcf\u4e00\u5929\u65c5\u884c\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\n<strong>\u8f93\u51fa\uff1a</strong>17\n<strong>\u89e3\u91ca\uff1a\n</strong>\u4f8b\u5982\uff0c\u8fd9\u91cc\u6709\u4e00\u79cd\u8d2d\u4e70\u901a\u884c\u8bc1\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u4f60\u5b8c\u6210\u4f60\u7684\u65c5\u884c\u8ba1\u5212\uff1a \n\u5728\u7b2c 1 \u5929\uff0c\u4f60\u82b1\u4e86 costs[2] = $15 \u4e70\u4e86\u4e00\u5f20\u4e3a\u671f 30 \u5929\u7684\u901a\u884c\u8bc1\uff0c\u5b83\u5c06\u5728\u7b2c 1, 2, ..., 30 \u5929\u751f\u6548\u3002\n\u5728\u7b2c 31 \u5929\uff0c\u4f60\u82b1\u4e86 costs[0] = $2 \u4e70\u4e86\u4e00\u5f20\u4e3a\u671f 1 \u5929\u7684\u901a\u884c\u8bc1\uff0c\u5b83\u5c06\u5728\u7b2c 31 \u5929\u751f\u6548\u3002 \n\u4f60\u603b\u5171\u82b1\u4e86 $17\uff0c\u5e76\u5b8c\u6210\u4e86\u4f60\u8ba1\u5212\u7684\u6bcf\u4e00\u5929\u65c5\u884c\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= days.length &lt;= 365</code></li>\n\t<li><code>1 &lt;= days[i] &lt;= 365</code></li>\n\t<li><code>days</code>&nbsp;\u6309\u987a\u5e8f\u4e25\u683c\u9012\u589e</li>\n\t<li><code>costs.length == 3</code></li>\n\t<li><code>1 &lt;= costs[i] &lt;= 1000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "983",
        "link": "minimum-cost-for-tickets",
        "title": "Minimum Cost For Tickets",
        "is_locked": "Normal",
        "titleZh": "\u6700\u4f4e\u7968\u4ef7",
        "frequency": "48.0%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given two integers <code>A</code> and <code>B</code>, return <strong>any</strong> string <code>S</code> such that:</p>\r\n\r\n<ul>\r\n\t<li><code>S</code> has length <code>A + B</code> and contains exactly <code>A</code> <code>&#39;a&#39;</code> letters, and exactly <code>B</code> <code>&#39;b&#39;</code> letters;</li>\r\n\t<li>The substring&nbsp;<code>&#39;aaa&#39;</code>&nbsp;does not occur in <code>S</code>;</li>\r\n\t<li>The substring <code>&#39;bbb&#39;</code> does not occur in <code>S</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">1</span>, B = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;abb&quot;\r\n</span><strong>Explanation:</strong> &quot;abb&quot;, &quot;bab&quot; and &quot;bba&quot; are all correct answers.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">4</span>, B = <span id=\"example-input-2-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;aabaa&quot;</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A &lt;= 100</code></li>\r\n\t<li><code>0 &lt;= B &lt;= 100</code></li>\r\n\t<li>It is guaranteed such an <code>S</code> exists for the given <code>A</code> and <code>B</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570&nbsp;<code>A</code>&nbsp;\u548c&nbsp;<code>B</code>\uff0c\u8fd4\u56de<strong>\u4efb\u610f</strong>\u5b57\u7b26\u4e32 <code>S</code>\uff0c\u8981\u6c42\u6ee1\u8db3\uff1a</p>\n\n<ul>\n\t<li><code>S</code> \u7684\u957f\u5ea6\u4e3a&nbsp;<code>A + B</code>\uff0c\u4e14\u6b63\u597d\u5305\u542b&nbsp;<code>A</code>&nbsp;\u4e2a <code>&#39;a&#39;</code>&nbsp;\u5b57\u6bcd\u4e0e&nbsp;<code>B</code>&nbsp;\u4e2a <code>&#39;b&#39;</code>&nbsp;\u5b57\u6bcd\uff1b</li>\n\t<li>\u5b50\u4e32&nbsp;<code>&#39;aaa&#39;</code>&nbsp;\u6ca1\u6709\u51fa\u73b0\u5728&nbsp;<code>S</code>&nbsp;\u4e2d\uff1b</li>\n\t<li>\u5b50\u4e32&nbsp;<code>&#39;bbb&#39;</code> \u6ca1\u6709\u51fa\u73b0\u5728&nbsp;<code>S</code>&nbsp;\u4e2d\u3002</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = 1, B = 2\n<strong>\u8f93\u51fa\uff1a</strong>&quot;abb&quot;\n<strong>\u89e3\u91ca\uff1a</strong>&quot;abb&quot;, &quot;bab&quot; \u548c &quot;bba&quot; \u90fd\u662f\u6b63\u786e\u7b54\u6848\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = 4, B = 1\n<strong>\u8f93\u51fa\uff1a</strong>&quot;aabaa&quot;</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A &lt;= 100</code></li>\n\t<li><code>0 &lt;= B &lt;= 100</code></li>\n\t<li>\u5bf9\u4e8e\u7ed9\u5b9a\u7684 <code>A</code> \u548c <code>B</code>\uff0c\u4fdd\u8bc1\u5b58\u5728\u6ee1\u8db3\u8981\u6c42\u7684 <code>S</code>\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "leetId": "984",
        "link": "string-without-aaa-or-bbb",
        "title": "String Without AAA or BBB",
        "is_locked": "Normal",
        "titleZh": "\u4e0d\u542b AAA \u6216 BBB \u7684\u5b57\u7b26\u4e32",
        "frequency": "30.5%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>We have an array <code>A</code> of integers, and an array <code>queries</code>&nbsp;of queries.</p>\r\n\r\n<p>For the <code>i</code>-th&nbsp;query <code>val =&nbsp;queries[i][0], index&nbsp;= queries[i][1]</code>, we add <font face=\"monospace\">val</font>&nbsp;to <code>A[index]</code>.&nbsp; Then, the answer to the <code>i</code>-th query is the sum of the even values of <code>A</code>.</p>\r\n\r\n<p><em>(Here, the given <code>index = queries[i][1]</code> is a 0-based index, and each query permanently modifies the array <code>A</code>.)</em></p>\r\n\r\n<p>Return the answer to all queries.&nbsp; Your <code>answer</code> array should have&nbsp;<code>answer[i]</code>&nbsp;as&nbsp;the answer to the <code>i</code>-th query.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,2,3,4]</span>, queries = <span id=\"example-input-1-2\">[[1,0],[-3,1],[-4,0],[2,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[8,6,2,4]</span>\r\n<strong>Explanation: </strong>\r\nAt the beginning, the array is [1,2,3,4].\r\nAfter adding 1 to A[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\r\nAfter adding -3 to A[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\r\nAfter adding -4 to A[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\r\nAfter adding 2 to A[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= queries.length &lt;= 10000</code></li>\r\n\t<li><code>-10000 &lt;= queries[i][0] &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= queries[i][1] &lt; A.length</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>&nbsp;\u548c\u4e00\u4e2a\u67e5\u8be2\u6570\u7ec4&nbsp;<code>queries</code>\u3002</p>\n\n<p>\u5bf9\u4e8e\u7b2c&nbsp;<code>i</code>&nbsp;\u6b21\u67e5\u8be2\uff0c\u6709&nbsp;<code>val =&nbsp;queries[i][0], index&nbsp;= queries[i][1]</code>\uff0c\u6211\u4eec\u4f1a\u628a&nbsp;<code>val</code>&nbsp;\u52a0\u5230&nbsp;<code>A[index]</code>&nbsp;\u4e0a\u3002\u7136\u540e\uff0c\u7b2c&nbsp;<code>i</code>&nbsp;\u6b21\u67e5\u8be2\u7684\u7b54\u6848\u662f <code>A</code> \u4e2d\u5076\u6570\u503c\u7684\u548c\u3002</p>\n\n<p><em>\uff08\u6b64\u5904\u7ed9\u5b9a\u7684&nbsp;<code>index = queries[i][1]</code>&nbsp;\u662f\u4ece 0 \u5f00\u59cb\u7684\u7d22\u5f15\uff0c\u6bcf\u6b21\u67e5\u8be2\u90fd\u4f1a\u6c38\u4e45\u4fee\u6539\u6570\u7ec4&nbsp;<code>A</code>\u3002\uff09</em></p>\n\n<p>\u8fd4\u56de\u6240\u6709\u67e5\u8be2\u7684\u7b54\u6848\u3002\u4f60\u7684\u7b54\u6848\u5e94\u5f53\u4ee5\u6570\u7ec4&nbsp;<code>answer</code>&nbsp;\u7ed9\u51fa\uff0c<code>answer[i]</code>&nbsp;\u4e3a\u7b2c&nbsp;<code>i</code>&nbsp;\u6b21\u67e5\u8be2\u7684\u7b54\u6848\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\n<strong>\u8f93\u51fa\uff1a</strong>[8,6,2,4]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5f00\u59cb\u65f6\uff0c\u6570\u7ec4\u4e3a [1,2,3,4]\u3002\n\u5c06 1 \u52a0\u5230 A[0] \u4e0a\u4e4b\u540e\uff0c\u6570\u7ec4\u4e3a [2,2,3,4]\uff0c\u5076\u6570\u503c\u4e4b\u548c\u4e3a 2 + 2 + 4 = 8\u3002\n\u5c06 -3 \u52a0\u5230 A[1] \u4e0a\u4e4b\u540e\uff0c\u6570\u7ec4\u4e3a [2,-1,3,4]\uff0c\u5076\u6570\u503c\u4e4b\u548c\u4e3a 2 + 4 = 6\u3002\n\u5c06 -4 \u52a0\u5230 A[0] \u4e0a\u4e4b\u540e\uff0c\u6570\u7ec4\u4e3a [-2,-1,3,4]\uff0c\u5076\u6570\u503c\u4e4b\u548c\u4e3a -2 + 4 = 2\u3002\n\u5c06 2 \u52a0\u5230 A[3] \u4e0a\u4e4b\u540e\uff0c\u6570\u7ec4\u4e3a [-2,-1,3,6]\uff0c\u5076\u6570\u503c\u4e4b\u548c\u4e3a -2 + 6 = 4\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10000</code></li>\n\t<li><code>-10000 &lt;= queries[i][0] &lt;= 10000</code></li>\n\t<li><code>0 &lt;= queries[i][1] &lt; A.length</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "985",
        "link": "sum-of-even-numbers-after-queries",
        "title": "Sum of Even Numbers After Queries",
        "is_locked": "Normal",
        "titleZh": "\u67e5\u8be2\u540e\u7684\u5076\u6570\u548c",
        "frequency": "59.9%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given two lists&nbsp;of <strong>closed</strong> intervals, each list of intervals is pairwise disjoint and in sorted order.</p>\r\n\r\n<p>Return the intersection of these two interval lists.</p>\r\n\r\n<p><em>(Formally, a closed interval <code>[a, b]</code> (with <code>a &lt;= b</code>) denotes&nbsp;the set of real numbers <code>x</code> with <code>a &lt;= x &lt;= b</code>.&nbsp; The&nbsp;intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.&nbsp; For example, the intersection of [1, 3] and [2, 4] is [2, 3].)</em></p>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/30/interval1.png\" style=\"width: 506px; height: 140px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[[0,2],[5,10],[13,23],[24,25]]</span>, B = <span id=\"example-input-1-2\">[[1,5],[8,12],[15,24],[25,26]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]</span>\r\n<strong>Reminder: </strong>The inputs and the desired output are lists of Interval&nbsp;objects, and not arrays or lists.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= A.length &lt; 1000</code></li>\r\n\t<li><code>0 &lt;= B.length &lt; 1000</code></li>\r\n\t<li><code>0 &lt;= A[i].start, A[i].end, B[i].start, B[i].end &lt; 10^9</code></li>\r\n</ol>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e24\u4e2a\u7531\u4e00\u4e9b<strong>\u95ed\u533a\u95f4</strong>\u7ec4\u6210\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u533a\u95f4\u5217\u8868\u90fd\u662f\u6210\u5bf9\u4e0d\u76f8\u4ea4\u7684\uff0c\u5e76\u4e14\u5df2\u7ecf\u6392\u5e8f\u3002</p>\n\n<p>\u8fd4\u56de\u8fd9\u4e24\u4e2a\u533a\u95f4\u5217\u8868\u7684\u4ea4\u96c6\u3002</p>\n\n<p><em>\uff08\u5f62\u5f0f\u4e0a\uff0c\u95ed\u533a\u95f4&nbsp;<code>[a, b]</code>\uff08\u5176\u4e2d&nbsp;<code>a &lt;= b</code>\uff09\u8868\u793a\u5b9e\u6570&nbsp;<code>x</code>&nbsp;\u7684\u96c6\u5408\uff0c\u800c&nbsp;<code>a &lt;= x &lt;= b</code>\u3002\u4e24\u4e2a\u95ed\u533a\u95f4\u7684\u4ea4\u96c6\u662f\u4e00\u7ec4\u5b9e\u6570\uff0c\u8981\u4e48\u4e3a\u7a7a\u96c6\uff0c\u8981\u4e48\u4e3a\u95ed\u533a\u95f4\u3002\u4f8b\u5982\uff0c[1, 3] \u548c [2, 4] \u7684\u4ea4\u96c6\u4e3a [2, 3]\u3002\uff09</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/interval1.png\" style=\"height: 140px; width: 506px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]\n<strong>\u8f93\u51fa\uff1a</strong>[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n<strong>\u6ce8\u610f\uff1a</strong>\u8f93\u5165\u548c\u6240\u9700\u7684\u8f93\u51fa\u90fd\u662f\u533a\u95f4\u5bf9\u8c61\u7ec4\u6210\u7684\u5217\u8868\uff0c\u800c\u4e0d\u662f\u6570\u7ec4\u6216\u5217\u8868\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt; 1000</code></li>\n\t<li><code>0 &lt;= B.length &lt; 1000</code></li>\n\t<li><code>0 &lt;= A[i].start, A[i].end, B[i].start, B[i].end &lt; 10^9</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            }
        ],
        "leetId": "986",
        "link": "interval-list-intersections",
        "title": "Interval List Intersections",
        "is_locked": "Normal",
        "titleZh": "\u533a\u95f4\u5217\u8868\u7684\u4ea4\u96c6",
        "frequency": "57.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a binary tree, return the <em>vertical order</em> traversal of its nodes&nbsp;values.</p>\r\n\r\n<p>For each node at position <code>(X, Y)</code>, its left and right children respectively&nbsp;will be at positions <code>(X-1, Y-1)</code> and <code>(X+1, Y-1)</code>.</p>\r\n\r\n<p>Running a vertical line from <code>X = -infinity</code> to <code>X = +infinity</code>, whenever the vertical line touches some nodes, we report the values of the nodes in order from top to bottom (decreasing <code>Y</code> coordinates).</p>\r\n\r\n<p>If two nodes have the same position, then the value of the node that is reported first is the value that is smaller.</p>\r\n\r\n<p>Return an list&nbsp;of non-empty reports in order of <code>X</code> coordinate.&nbsp; Every report will have a list of values of nodes.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/31/1236_example_1.PNG\" style=\"width: 201px; height: 186px;\" /></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,9,20,null,null,15,7]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[[9],[3,15],[20],[7]]</span>\r\n<strong>Explanation: </strong>\r\nWithout loss of generality, we can assume the root node is at position (0, 0):\r\nThen, the node with value 9 occurs at position (-1, -1);\r\nThe nodes with values 3 and 15 occur at positions (0, 0) and (0, -2);\r\nThe node with value 20 occurs at position (1, -1);\r\nThe node with value 7 occurs at position (2, -2).\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/31/tree2.png\" style=\"width: 236px; height: 150px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,2,3,4,5,6,7]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[[4],[2],[1,5,6],[3],[7]]</span>\r\n<strong>Explanation: </strong>\r\nThe node with value 5 and the node with value 6 have the same position according to the given scheme.\r\nHowever, in the report &quot;[1,5,6]&quot;, the node value of 5 comes first since 5 is smaller than 6.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The tree will have between <font face=\"monospace\">1</font>&nbsp;and <code>1000</code> nodes.</li>\r\n\t<li>Each node&#39;s value will be between <code>0</code> and <code>1000</code>.</li>\r\n</ol>\r\n</div>\r\n\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e8c\u53c9\u6811\uff0c\u6309<em>\u5782\u5e8f</em>\u904d\u5386\u8fd4\u56de\u5176\u7ed3\u70b9\u503c\u3002</p>\n\n<p>\u5bf9\u4f4d\u4e8e&nbsp;<code>(X, Y)</code>&nbsp;\u7684\u6bcf\u4e2a\u7ed3\u70b9\u800c\u8a00\uff0c\u5176\u5de6\u53f3\u5b50\u7ed3\u70b9\u5206\u522b\u4f4d\u4e8e&nbsp;<code>(X-1, Y-1)</code>&nbsp;\u548c&nbsp;<code>(X+1, Y-1)</code>\u3002</p>\n\n<p>\u628a\u4e00\u6761\u5782\u7ebf\u4ece&nbsp;<code>X = -infinity</code>&nbsp;\u79fb\u52a8\u5230&nbsp;<code>X = +infinity</code>&nbsp;\uff0c\u6bcf\u5f53\u8be5\u5782\u7ebf\u4e0e\u7ed3\u70b9\u63a5\u89e6\u65f6\uff0c\u6211\u4eec\u6309\u4ece\u4e0a\u5230\u4e0b\u7684\u987a\u5e8f\u62a5\u544a\u7ed3\u70b9\u7684\u503c\uff08 <code>Y</code>&nbsp;\u5750\u6807\u9012\u51cf\uff09\u3002</p>\n\n<p>\u5982\u679c\u4e24\u4e2a\u7ed3\u70b9\u4f4d\u7f6e\u76f8\u540c\uff0c\u5219\u9996\u5148\u62a5\u544a\u7684\u7ed3\u70b9\u503c\u8f83\u5c0f\u3002</p>\n\n<p>\u6309&nbsp;<code>X</code>&nbsp;\u5750\u6807\u987a\u5e8f\u8fd4\u56de\u975e\u7a7a\u62a5\u544a\u7684\u5217\u8868\u3002\u6bcf\u4e2a\u62a5\u544a\u90fd\u6709\u4e00\u4e2a\u7ed3\u70b9\u503c\u5217\u8868\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/1236_example_1.PNG\" style=\"height: 186px; width: 201px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,9,20,null,null,15,7]\n<strong>\u8f93\u51fa\uff1a</strong>[[9],[3,15],[20],[7]]\n<strong>\u89e3\u91ca\uff1a </strong>\n\u5728\u4e0d\u4e27\u5931\u5176\u666e\u904d\u6027\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u6839\u7ed3\u70b9\u4f4d\u4e8e (0, 0)\uff1a\n\u7136\u540e\uff0c\u503c\u4e3a 9 \u7684\u7ed3\u70b9\u51fa\u73b0\u5728 (-1, -1)\uff1b\n\u503c\u4e3a 3 \u548c 15 \u7684\u4e24\u4e2a\u7ed3\u70b9\u5206\u522b\u51fa\u73b0\u5728 (0, 0) \u548c (0, -2)\uff1b\n\u503c\u4e3a 20 \u7684\u7ed3\u70b9\u51fa\u73b0\u5728 (1, -1)\uff1b\n\u503c\u4e3a 7 \u7684\u7ed3\u70b9\u51fa\u73b0\u5728 (2, -2)\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/tree2.png\" style=\"height: 150px; width: 236px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,2,3,4,5,6,7]\n<strong>\u8f93\u51fa\uff1a</strong>[[4],[2],[1,5,6],[3],[7]]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6839\u636e\u7ed9\u5b9a\u7684\u65b9\u6848\uff0c\u503c\u4e3a 5 \u548c 6 \u7684\u4e24\u4e2a\u7ed3\u70b9\u51fa\u73b0\u5728\u540c\u4e00\u4f4d\u7f6e\u3002\n\u7136\u800c\uff0c\u5728\u62a5\u544a &quot;[1,5,6]&quot; \u4e2d\uff0c\u7ed3\u70b9\u503c 5 \u6392\u5728\u524d\u9762\uff0c\u56e0\u4e3a 5 \u5c0f\u4e8e 6\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6811\u7684\u7ed3\u70b9\u6570\u4ecb\u4e8e <code>1</code>&nbsp;\u548c&nbsp;<code>1000</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u7ed3\u70b9\u503c\u4ecb\u4e8e&nbsp;<code>0</code>&nbsp;\u548c&nbsp;<code>1000</code>&nbsp;\u4e4b\u95f4\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "leetId": "987",
        "link": "vertical-order-traversal-of-a-binary-tree",
        "title": "Vertical Order Traversal of a Binary Tree",
        "is_locked": "Normal",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u5782\u5e8f\u904d\u5386",
        "frequency": "31.5%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given the <code>root</code> of a binary tree, each node has a value from <code>0</code> to <code>25</code> representing the letters <code>&#39;a&#39;</code> to <code>&#39;z&#39;</code>: a value of <code>0</code> represents <code>&#39;a&#39;</code>, a value of <code>1</code> represents <code>&#39;b&#39;</code>, and so on.</p>\r\n\r\n<p>Find the lexicographically smallest string that starts at a leaf of this tree and ends at the root.</p>\r\n\r\n<p><em>(As a reminder, any shorter prefix of a string is lexicographically smaller: for example, <code>&quot;ab&quot;</code> is lexicographically smaller than <code>&quot;aba&quot;</code>.&nbsp; A leaf of a node is a node that has no children.)</em></p>\r\n\r\n<div>\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n</div>\r\n</div>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/30/tree1.png\" style=\"width: 160px; height: 107px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[0,1,2,3,4,3,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;dba&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/30/tree2.png\" style=\"width: 160px; height: 107px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[25,1,3,1,3,0,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;adz&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/01/tree3.png\" style=\"height: 170px; width: 172px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[2,2,1,null,1,0,null,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">&quot;abc&quot;</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the given tree will be between <code>1</code> and <code>8500</code>.</li>\r\n\t<li>Each node in the tree will have a value between <code>0</code> and <code>25</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u9897\u6839\u7ed3\u70b9\u4e3a&nbsp;<code>root</code>&nbsp;\u7684\u4e8c\u53c9\u6811\uff0c\u4e66\u4e2d\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u6709\u4e00\u4e2a\u4ece&nbsp;<code>0</code> \u5230&nbsp;<code>25</code>&nbsp;\u7684\u503c\uff0c\u5206\u522b\u4ee3\u8868\u5b57\u6bcd&nbsp;<code>&#39;a&#39;</code> \u5230&nbsp;<code>&#39;z&#39;</code>\uff1a\u503c&nbsp;<code>0</code> \u4ee3\u8868&nbsp;<code>&#39;a&#39;</code>\uff0c\u503c&nbsp;<code>1</code>&nbsp;\u4ee3\u8868&nbsp;<code>&#39;b&#39;</code>\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002</p>\n\n<p>\u627e\u51fa\u6309\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u4ece\u8fd9\u68f5\u6811\u7684\u4e00\u4e2a\u53f6\u7ed3\u70b9\u5f00\u59cb\uff0c\u5230\u6839\u7ed3\u70b9\u7ed3\u675f\u3002</p>\n\n<p><em>\uff08\u5c0f\u8d34\u58eb\uff1a\u5b57\u7b26\u4e32\u4e2d\u4efb\u4f55\u8f83\u77ed\u7684\u524d\u7f00\u5728\u5b57\u5178\u5e8f\u4e0a\u90fd\u662f\u8f83\u5c0f\u7684\uff1a\u4f8b\u5982\uff0c\u5728\u5b57\u5178\u5e8f\u4e0a&nbsp;<code>&quot;ab&quot;</code> \u6bd4&nbsp;<code>&quot;aba&quot;</code>&nbsp;\u8981\u5c0f\u3002\u53f6\u7ed3\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u7ed3\u70b9\u7684\u7ed3\u70b9\u3002\uff09</em></p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree1.png\" style=\"height: 107px; width: 160px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,1,2,3,4,3,4]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;dba&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree2.png\" style=\"height: 107px; width: 160px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[25,1,3,1,3,0,2]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;adz&quot;\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree3.png\" style=\"height: 180px; width: 172px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,2,1,null,1,0,null,0]\n<strong>\u8f93\u51fa\uff1a</strong>&quot;abc&quot;\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u7ed9\u5b9a\u6811\u7684\u7ed3\u70b9\u6570\u4ecb\u4e8e&nbsp;<code>1</code> \u548c&nbsp;<code>8500</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li>\u6811\u4e2d\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u6709\u4e00\u4e2a\u4ecb\u4e8e&nbsp;<code>0</code>&nbsp;\u548c&nbsp;<code>25</code>&nbsp;\u4e4b\u95f4\u7684\u503c\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "leetId": "988",
        "link": "smallest-string-starting-from-leaf",
        "title": "Smallest String Starting From Leaf",
        "is_locked": "Normal",
        "titleZh": "\u4ece\u53f6\u7ed3\u70b9\u5f00\u59cb\u7684\u6700\u5c0f\u5b57\u7b26\u4e32",
        "frequency": "38.9%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>For a non-negative integer <code>X</code>, the&nbsp;<em>array-form of <code>X</code></em>&nbsp;is an array of its digits in left to right order.&nbsp; For example, if <code>X = 1231</code>, then the array form is&nbsp;<code>[1,2,3,1]</code>.</p>\r\n\r\n<p>Given the array-form <code>A</code> of a non-negative&nbsp;integer <code>X</code>, return the array-form of the integer <code>X+K</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,2,0,0]</span>, K = 34\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2,3,4]</span>\r\n<strong>Explanation: </strong>1200 + 34 = 1234\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[2,7,4]</span>, K = <span id=\"example-input-2-2\">181</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[4,5,5]</span>\r\n<strong>Explanation: </strong>274 + 181 = 455\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[2,1,5]</span>, K = <span id=\"example-input-3-2\">806</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[1,0,2,1]</span>\r\n<strong>Explanation: </strong>215 + 806 = 1021\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-4-1\">[9,9,9,9,9,9,9,9,9,9]</span>, K = <span id=\"example-input-4-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">[1,0,0,0,0,0,0,0,0,0,0]</span>\r\n<strong>Explanation: </strong>9999999999 + 1 = 10000000000\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note\uff1a</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 9</code></li>\r\n\t<li><code>0 &lt;= K &lt;= 10000</code></li>\r\n\t<li>If <code>A.length &gt; 1</code>, then <code>A[0] != 0</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u5bf9\u4e8e\u975e\u8d1f\u6574\u6570&nbsp;<code>X</code>&nbsp;\u800c\u8a00\uff0c<em><code>X</code></em>&nbsp;\u7684<em>\u6570\u7ec4\u5f62\u5f0f</em>\u662f\u6bcf\u4f4d\u6570\u5b57\u6309\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u5f62\u6210\u7684\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u5982\u679c&nbsp;<code>X = 1231</code>\uff0c\u90a3\u4e48\u5176\u6570\u7ec4\u5f62\u5f0f\u4e3a&nbsp;<code>[1,2,3,1]</code>\u3002</p>\n\n<p>\u7ed9\u5b9a\u975e\u8d1f\u6574\u6570 <code>X</code> \u7684\u6570\u7ec4\u5f62\u5f0f&nbsp;<code>A</code>\uff0c\u8fd4\u56de\u6574\u6570&nbsp;<code>X+K</code>&nbsp;\u7684\u6570\u7ec4\u5f62\u5f0f\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,2,0,0], K = 34\n<strong>\u8f93\u51fa\uff1a</strong>[1,2,3,4]\n<strong>\u89e3\u91ca\uff1a</strong>1200 + 34 = 1234\n</pre>\n\n<p><strong>\u89e3\u91ca 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [2,7,4], K = 181\n<strong>\u8f93\u51fa\uff1a</strong>[4,5,5]\n<strong>\u89e3\u91ca\uff1a</strong>274 + 181 = 455\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [2,1,5], K = 806\n<strong>\u8f93\u51fa\uff1a</strong>[1,0,2,1]\n<strong>\u89e3\u91ca\uff1a</strong>215 + 806 = 1021\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [9,9,9,9,9,9,9,9,9,9], K = 1\n<strong>\u8f93\u51fa\uff1a</strong>[1,0,0,0,0,0,0,0,0,0,0]\n<strong>\u89e3\u91ca\uff1a</strong>9999999999 + 1 = 10000000000\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 9</code></li>\n\t<li><code>0 &lt;= K &lt;= 10000</code></li>\n\t<li>\u5982\u679c&nbsp;<code>A.length &gt; 1</code>\uff0c\u90a3\u4e48&nbsp;<code>A[0] != 0</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "989",
        "link": "add-to-array-form-of-integer",
        "title": "Add to Array-Form of Integer",
        "is_locked": "Normal",
        "titleZh": "\u6570\u7ec4\u5f62\u5f0f\u7684\u6574\u6570\u52a0\u6cd5",
        "frequency": "41.0%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given an array <font face=\"monospace\">equations</font>&nbsp;of strings that represent relationships between variables, each string <code>equations[i]</code>&nbsp;has length <code>4</code> and takes one of two different forms: <code>&quot;a==b&quot;</code> or <code>&quot;a!=b&quot;</code>.&nbsp; Here, <code>a</code> and <code>b</code> are lowercase letters (not necessarily different) that represent one-letter variable names.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if it is possible to assign integers to variable names&nbsp;so as to satisfy all the given equations.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;a==b&quot;,&quot;b!=a&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">false</span>\r\n<strong>Explanation: </strong>If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.  There is no way to assign the variables to satisfy both equations.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;b==a&quot;,&quot;a==b&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n<strong>Explanation: </strong>We could assign a = 1 and b = 1 to satisfy both equations.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[&quot;a==b&quot;,&quot;b==c&quot;,&quot;a==c&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[&quot;a==b&quot;,&quot;b!=c&quot;,&quot;c==a&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">[&quot;c==c&quot;,&quot;b==d&quot;,&quot;x!=z&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">true</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= equations.length &lt;= 500</code></li>\r\n\t<li><code>equations[i].length == 4</code></li>\r\n\t<li><code>equations[i][0]</code> and <code>equations[i][3]</code> are lowercase letters</li>\r\n\t<li><code>equations[i][1]</code> is either <code>&#39;=&#39;</code> or <code>&#39;!&#39;</code></li>\r\n\t<li><code>equations[i][2]</code> is&nbsp;<code>&#39;=&#39;</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u8868\u793a\u53d8\u91cf\u4e4b\u95f4\u5173\u7cfb\u7684\u5b57\u7b26\u4e32\u65b9\u7a0b\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u65b9\u7a0b <code>equations[i]</code> \u7684\u957f\u5ea6\u4e3a <code>4</code>\uff0c\u5e76\u91c7\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u5f62\u5f0f\u4e4b\u4e00\uff1a<code>&quot;a==b&quot;</code> \u6216&nbsp;<code>&quot;a!=b&quot;</code>\u3002\u5728\u8fd9\u91cc\uff0ca \u548c b \u662f\u5c0f\u5199\u5b57\u6bcd\uff08\u4e0d\u4e00\u5b9a\u4e0d\u540c\uff09\uff0c\u8868\u793a\u5355\u5b57\u6bcd\u53d8\u91cf\u540d\u3002</p>\n\n<p>\u53ea\u6709\u5f53\u53ef\u4ee5\u5c06\u6574\u6570\u5206\u914d\u7ed9\u53d8\u91cf\u540d\uff0c\u4ee5\u4fbf\u6ee1\u8db3\u6240\u6709\u7ed9\u5b9a\u7684\u65b9\u7a0b\u65f6\u624d\u8fd4\u56de&nbsp;<code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;a==b&quot;,&quot;b!=a&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u5982\u679c\u6211\u4eec\u6307\u5b9a\uff0ca = 1 \u4e14 b = 1\uff0c\u90a3\u4e48\u53ef\u4ee5\u6ee1\u8db3\u7b2c\u4e00\u4e2a\u65b9\u7a0b\uff0c\u4f46\u65e0\u6cd5\u6ee1\u8db3\u7b2c\u4e8c\u4e2a\u65b9\u7a0b\u3002\u6ca1\u6709\u529e\u6cd5\u5206\u914d\u53d8\u91cf\u540c\u65f6\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u65b9\u7a0b\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u51fa\uff1a</strong>[&quot;b==a&quot;,&quot;a==b&quot;]\n<strong>\u8f93\u5165\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a a = 1 \u4e14 b = 1 \u4ee5\u6ee1\u8db3\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u65b9\u7a0b\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;a==b&quot;,&quot;b==c&quot;,&quot;a==c&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;a==b&quot;,&quot;b!=c&quot;,&quot;c==a&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;c==c&quot;,&quot;b==d&quot;,&quot;x!=z&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= equations.length &lt;= 500</code></li>\n\t<li><code>equations[i].length == 4</code></li>\n\t<li><code>equations[i][0]</code> \u548c&nbsp;<code>equations[i][3]</code>&nbsp;\u662f\u5c0f\u5199\u5b57\u6bcd</li>\n\t<li><code>equations[i][1]</code> \u8981\u4e48\u662f&nbsp;<code>&#39;=&#39;</code>\uff0c\u8981\u4e48\u662f&nbsp;<code>&#39;!&#39;</code></li>\n\t<li><code>equations[i][2]</code>&nbsp;\u662f&nbsp;<code>&#39;=&#39;</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Union Find",
                "link": "union-find",
                "tagZh": "\u5e76\u67e5\u96c6"
            },
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "leetId": "990",
        "link": "satisfiability-of-equality-equations",
        "title": "Satisfiability of Equality Equations",
        "is_locked": "Normal",
        "titleZh": "\u7b49\u5f0f\u65b9\u7a0b\u7684\u53ef\u6ee1\u8db3\u6027",
        "frequency": "32.9%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>On a broken calculator that has a number showing on its display, we can perform two operations:</p>\r\n\r\n<ul>\r\n\t<li><strong>Double</strong>: Multiply the number on the display by 2, or;</li>\r\n\t<li><strong>Decrement</strong>: Subtract 1 from the number on the display.</li>\r\n</ul>\r\n\r\n<p>Initially, the calculator is displaying the number <code>X</code>.</p>\r\n\r\n<p>Return the minimum number of operations needed to display the number <code>Y</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>X = <span id=\"example-input-1-1\">2</span>, Y = <span id=\"example-input-1-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>Use double operation and then decrement operation {2 -&gt; 4 -&gt; 3}.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>X = <span id=\"example-input-2-1\">5</span>, Y = <span id=\"example-input-2-2\">8</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">2</span>\r\n<strong>Explanation: </strong>Use decrement and then double {5 -&gt; 4 -&gt; 8}.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>X = <span id=\"example-input-3-1\">3</span>, Y = <span id=\"example-input-3-2\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation: </strong> Use double, decrement and double {3 -&gt; 6 -&gt; 5 -&gt; 10}.\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>X = <span id=\"example-input-4-1\">1024</span>, Y = <span id=\"example-input-4-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">1023</span>\r\n<strong>Explanation: </strong>Use decrement operations 1023 times.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= X &lt;= 10^9</code></li>\r\n\t<li><code>1 &lt;= Y &lt;= 10^9</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u5728\u663e\u793a\u7740\u6570\u5b57\u7684\u574f\u8ba1\u7b97\u5668\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li><strong>\u53cc\u500d\uff08Double\uff09\uff1a</strong>\u5c06\u663e\u793a\u5c4f\u4e0a\u7684\u6570\u5b57\u4e58 2\uff1b</li>\n\t<li><strong>\u9012\u51cf\uff08Decrement\uff09\uff1a</strong>\u5c06\u663e\u793a\u5c4f\u4e0a\u7684\u6570\u5b57\u51cf 1 \u3002</li>\n</ul>\n\n<p>\u6700\u521d\uff0c\u8ba1\u7b97\u5668\u663e\u793a\u6570\u5b57&nbsp;<code>X</code>\u3002</p>\n\n<p>\u8fd4\u56de\u663e\u793a\u6570\u5b57&nbsp;<code>Y</code>&nbsp;\u6240\u9700\u7684\u6700\u5c0f\u64cd\u4f5c\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>X = 2, Y = 3\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u5148\u8fdb\u884c\u53cc\u500d\u8fd0\u7b97\uff0c\u7136\u540e\u518d\u8fdb\u884c\u9012\u51cf\u8fd0\u7b97 {2 -&gt; 4 -&gt; 3}.\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>X = 5, Y = 8\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u5148\u9012\u51cf\uff0c\u518d\u53cc\u500d {5 -&gt; 4 -&gt; 8}.\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>X = 3, Y = 10\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u5148\u53cc\u500d\uff0c\u7136\u540e\u9012\u51cf\uff0c\u518d\u53cc\u500d {3 -&gt; 6 -&gt; 5 -&gt; 10}.\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>X = 1024, Y = 1\n<strong>\u8f93\u51fa\uff1a</strong>1023\n<strong>\u89e3\u91ca\uff1a</strong>\u6267\u884c\u9012\u51cf\u8fd0\u7b97 1023 \u6b21\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= X &lt;= 10^9</code></li>\n\t<li><code>1 &lt;= Y &lt;= 10^9</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "991",
        "link": "broken-calculator",
        "title": "Broken Calculator",
        "is_locked": "Normal",
        "titleZh": "\u574f\u4e86\u7684\u8ba1\u7b97\u5668",
        "frequency": "49.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of positive integers, call a (contiguous, not necessarily distinct) subarray of <code>A</code> <em>good</em> if the number of different integers in that subarray is exactly <code>K</code>.</p>\r\n\r\n<p>(For example, <code>[1,2,3,1,2]</code> has <code>3</code> different integers: <code>1</code>, <code>2</code>, and <code>3</code>.)</p>\r\n\r\n<p>Return the number of good subarrays of <code>A</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,2,1,2,3]</span>, K = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">7</span>\r\n<strong>Explanation: </strong>Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[1,2,1,3,4]</span>, K = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation: </strong>Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= A.length</code></li>\r\n\t<li><code>1 &lt;= K &lt;= A.length</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4 <code>A</code>\uff0c\u5982\u679c <code>A</code>&nbsp;\u7684\u67d0\u4e2a\u5b50\u6570\u7ec4\u4e2d\u4e0d\u540c\u6574\u6570\u7684\u4e2a\u6570\u6070\u597d\u4e3a <code>K</code>\uff0c\u5219\u79f0 <code>A</code> \u7684\u8fd9\u4e2a\u8fde\u7eed\u3001\u4e0d\u4e00\u5b9a\u72ec\u7acb\u7684\u5b50\u6570\u7ec4\u4e3a<em>\u597d\u5b50\u6570\u7ec4</em>\u3002</p>\n\n<p>\uff08\u4f8b\u5982\uff0c<code>[1,2,3,1,2]</code> \u4e2d\u6709&nbsp;<code>3</code>&nbsp;\u4e2a\u4e0d\u540c\u7684\u6574\u6570\uff1a<code>1</code>\uff0c<code>2</code>\uff0c\u4ee5\u53ca&nbsp;<code>3</code>\u3002\uff09</p>\n\n<p>\u8fd4\u56de&nbsp;<code>A</code>&nbsp;\u4e2d<em>\u597d\u5b50\u6570\u7ec4</em>\u7684\u6570\u76ee\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u51fa\uff1a</strong>A = [1,2,1,2,3], K = 2\n<strong>\u8f93\u5165\uff1a</strong>7\n<strong>\u89e3\u91ca\uff1a</strong>\u6070\u597d\u7531 2 \u4e2a\u4e0d\u540c\u6574\u6570\u7ec4\u6210\u7684\u5b50\u6570\u7ec4\uff1a[1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,2,1,3,4], K = 3\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u6070\u597d\u7531 3 \u4e2a\u4e0d\u540c\u6574\u6570\u7ec4\u6210\u7684\u5b50\u6570\u7ec4\uff1a[1,2,1,3], [2,1,3], [1,3,4].\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= A.length</code></li>\n\t<li><code>1 &lt;= K &lt;= A.length</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            },
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "Sliding Window",
                "link": "sliding-window",
                "tagZh": null
            }
        ],
        "leetId": "992",
        "link": "subarrays-with-k-different-integers",
        "title": "Subarrays with K Different Integers",
        "is_locked": "Normal",
        "titleZh": "K \u4e2a\u4e0d\u540c\u6574\u6570\u7684\u5b50\u6570\u7ec4",
        "frequency": "26.1%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>In a binary tree, the root node is at depth <code>0</code>, and children of each depth <code>k</code> node are at depth <code>k+1</code>.</p>\r\n\r\n<p>Two nodes of a binary tree are <em>cousins</em> if they have the same depth, but have <strong>different parents</strong>.</p>\r\n\r\n<p>We are given the <code>root</code> of a binary tree with unique values, and the values <code>x</code>&nbsp;and <code>y</code>&nbsp;of two different nodes in the tree.</p>\r\n\r\n<p>Return&nbsp;<code>true</code>&nbsp;if and only if the nodes corresponding to the values <code>x</code> and <code>y</code> are cousins.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:<br />\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/12/q1248-01.png\" style=\"width: 180px; height: 160px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-1-1\">[1,2,3,4]</span>, x = <span id=\"example-input-1-2\">4</span>, y = <span id=\"example-input-1-3\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:<br />\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/12/q1248-02.png\" style=\"width: 201px; height: 160px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-2-1\">[1,2,3,null,4,null,5]</span>, x = <span id=\"example-input-2-2\">5</span>, y = <span id=\"example-input-2-3\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/13/q1248-03.png\" style=\"width: 156px; height: 160px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-3-1\">[1,2,3,null,4]</span>, x = 2, y = 3\r\n<strong>Output: </strong><span id=\"example-output-3\">false</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the tree will be between <code>2</code> and <code>100</code>.</li>\r\n\t<li>Each node has a unique integer value from <code>1</code> to <code>100</code>.</li>\r\n</ol>\r\n\r\n<div>\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u5728\u4e8c\u53c9\u6811\u4e2d\uff0c\u6839\u8282\u70b9\u4f4d\u4e8e\u6df1\u5ea6 <code>0</code> \u5904\uff0c\u6bcf\u4e2a\u6df1\u5ea6\u4e3a <code>k</code> \u7684\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4f4d\u4e8e\u6df1\u5ea6 <code>k+1</code> \u5904\u3002</p>\n\n<p>\u5982\u679c\u4e8c\u53c9\u6811\u7684\u4e24\u4e2a\u8282\u70b9\u6df1\u5ea6\u76f8\u540c\uff0c\u4f46<strong>\u7236\u8282\u70b9\u4e0d\u540c</strong>\uff0c\u5219\u5b83\u4eec\u662f\u4e00\u5bf9<em>\u5802\u5144\u5f1f\u8282\u70b9</em>\u3002</p>\n\n<p>\u6211\u4eec\u7ed9\u51fa\u4e86\u5177\u6709\u552f\u4e00\u503c\u7684\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code>\uff0c\u4ee5\u53ca\u6811\u4e2d\u4e24\u4e2a\u4e0d\u540c\u8282\u70b9\u7684\u503c <code>x</code> \u548c <code>y</code>\u3002</p>\n\n<p>\u53ea\u6709\u4e0e\u503c <code>x</code> \u548c <code>y</code> \u5bf9\u5e94\u7684\u8282\u70b9\u662f\u5802\u5144\u5f1f\u8282\u70b9\u65f6\uff0c\u624d\u8fd4\u56de <code>true</code>\u3002\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a<br>\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-01.png\" style=\"height: 160px; width: 180px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [1,2,3,4], x = 4, y = 3\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a<br>\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-02.png\" style=\"height: 160px; width: 201px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [1,2,3,null,4,null,5], x = 5, y = 4\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-03.png\" style=\"height: 160px; width: 156px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [1,2,3,null,4], x = 2, y = 3\n<strong>\u8f93\u51fa\uff1a</strong>false</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u4ecb\u4e8e&nbsp;<code>2</code> \u5230&nbsp;<code>100</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3001\u8303\u56f4\u4e3a&nbsp;<code>1</code> \u5230&nbsp;<code>100</code>&nbsp;\u7684\u6574\u6570\u3002</li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "leetId": "993",
        "link": "cousins-in-binary-tree",
        "title": "Cousins in Binary Tree",
        "is_locked": "Normal",
        "titleZh": "\u4e8c\u53c9\u6811\u7684\u5802\u5144\u5f1f\u8282\u70b9",
        "frequency": "45.6%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>In a given grid, each cell can have one of three&nbsp;values:</p>\r\n\r\n<ul>\r\n\t<li>the value <code>0</code> representing an empty cell;</li>\r\n\t<li>the value <code>1</code> representing a fresh orange;</li>\r\n\t<li>the value <code>2</code> representing a rotten orange.</li>\r\n</ul>\r\n\r\n<p>Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.</p>\r\n\r\n<p>Return the minimum number of minutes that must elapse until no cell has a fresh orange.&nbsp; If this is impossible, return <code>-1</code> instead.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/16/oranges.png\" style=\"width: 712px; height: 150px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[2,1,1],[1,1,0],[0,1,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[2,1,1],[0,1,1],[1,0,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">-1</span>\r\n<strong>Explanation: </strong> The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[0,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">0</span>\r\n<strong>Explanation: </strong> Since there are already no fresh oranges at minute 0, the answer is just 0.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= grid.length &lt;= 10</code></li>\r\n\t<li><code>1 &lt;= grid[0].length &lt;= 10</code></li>\r\n\t<li><code>grid[i][j]</code> is only <code>0</code>, <code>1</code>, or <code>2</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u5728\u7ed9\u5b9a\u7684\u7f51\u683c\u4e2d\uff0c\u6bcf\u4e2a\u5355\u5143\u683c\u53ef\u4ee5\u6709\u4ee5\u4e0b\u4e09\u4e2a\u503c\u4e4b\u4e00\uff1a</p>\n\n<ul>\n\t<li>\u503c&nbsp;<code>0</code>&nbsp;\u4ee3\u8868\u7a7a\u5355\u5143\u683c\uff1b</li>\n\t<li>\u503c&nbsp;<code>1</code>&nbsp;\u4ee3\u8868\u65b0\u9c9c\u6a58\u5b50\uff1b</li>\n\t<li>\u503c&nbsp;<code>2</code>&nbsp;\u4ee3\u8868\u8150\u70c2\u7684\u6a58\u5b50\u3002</li>\n</ul>\n\n<p>\u6bcf\u5206\u949f\uff0c\u4efb\u4f55\u4e0e\u8150\u70c2\u7684\u6a58\u5b50\uff08\u5728 4 \u4e2a\u6b63\u65b9\u5411\u4e0a\uff09\u76f8\u90bb\u7684\u65b0\u9c9c\u6a58\u5b50\u90fd\u4f1a\u8150\u70c2\u3002</p>\n\n<p>\u8fd4\u56de\u76f4\u5230\u5355\u5143\u683c\u4e2d\u6ca1\u6709\u65b0\u9c9c\u6a58\u5b50\u4e3a\u6b62\u6240\u5fc5\u987b\u7ecf\u8fc7\u7684\u6700\u5c0f\u5206\u949f\u6570\u3002\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u8fd4\u56de&nbsp;<code>-1</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/oranges.png\" style=\"height: 150px; width: 712px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[2,1,1],[1,1,0],[0,1,1]]\n<strong>\u8f93\u51fa\uff1a</strong>4\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[2,1,1],[0,1,1],[1,0,1]]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\u5de6\u4e0b\u89d2\u7684\u6a58\u5b50\uff08\u7b2c 2 \u884c\uff0c \u7b2c 0 \u5217\uff09\u6c38\u8fdc\u4e0d\u4f1a\u8150\u70c2\uff0c\u56e0\u4e3a\u8150\u70c2\u53ea\u4f1a\u53d1\u751f\u5728 4 \u4e2a\u6b63\u5411\u4e0a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,2]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\u56e0\u4e3a 0 \u5206\u949f\u65f6\u5df2\u7ecf\u6ca1\u6709\u65b0\u9c9c\u6a58\u5b50\u4e86\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f 0 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= grid.length &lt;= 10</code></li>\n\t<li><code>1 &lt;= grid[0].length &lt;= 10</code></li>\n\t<li><code>grid[i][j]</code> \u4ec5\u4e3a&nbsp;<code>0</code>\u3001<code>1</code>&nbsp;\u6216&nbsp;<code>2</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Breadth-first Search",
                "link": "breadth-first-search",
                "tagZh": "\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "leetId": "994",
        "link": "rotting-oranges",
        "title": "Rotting Oranges",
        "is_locked": "Normal",
        "titleZh": "\u8150\u70c2\u7684\u6a58\u5b50",
        "frequency": "45.0%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>In an array <code>A</code> containing only 0s and 1s, a <i><code>K</code>-bit flip&nbsp;</i>consists of choosing a (contiguous) subarray of length <code>K</code> and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.</p>\r\n\r\n<p>Return the minimum number of <code>K</code>-bit flips required so that there is no 0 in the array.&nbsp; If it is not possible, return <code>-1</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[0,1,0]</span>, K = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>Flip A[0], then flip A[2].\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[1,1,0]</span>, K = <span id=\"example-input-2-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">-1</span>\r\n<strong>Explanation:</strong>&nbsp;No matter how we flip subarrays of size 2, we can&#39;t make the array become [1,1,1].\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[0,0,0,1,0,1,1,0]</span>, K = <span id=\"example-input-3-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation:</strong>\r\nFlip A[0],A[1],A[2]:&nbsp;A becomes [1,1,1,1,0,1,1,0]\r\nFlip A[4],A[5],A[6]:&nbsp;A becomes [1,1,1,1,1,0,0,0]\r\nFlip A[5],A[6],A[7]:&nbsp;A becomes [1,1,1,1,1,1,1,1]\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;=&nbsp;30000</code></li>\r\n\t<li><code>1 &lt;= K &lt;= A.length</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u5728\u4ec5\u5305\u542b <code>0</code> \u548c <code>1</code> \u7684\u6570\u7ec4 <code>A</code> \u4e2d\uff0c\u4e00\u6b21 <em><code>K</code> \u4f4d\u7ffb\u8f6c</em>\u5305\u62ec\u9009\u62e9\u4e00\u4e2a\u957f\u5ea6\u4e3a <code>K</code> \u7684\uff08\u8fde\u7eed\uff09\u5b50\u6570\u7ec4\uff0c\u540c\u65f6\u5c06\u5b50\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a <code>0</code> \u66f4\u6539\u4e3a <code>1</code>\uff0c\u800c\u6bcf\u4e2a <code>1</code> \u66f4\u6539\u4e3a <code>0</code>\u3002</p>\n\n<p>\u8fd4\u56de\u6240\u9700\u7684 <code>K</code> \u4f4d\u7ffb\u8f6c\u7684\u6b21\u6570\uff0c\u4ee5\u4fbf\u6570\u7ec4\u6ca1\u6709\u503c\u4e3a <code>0</code> \u7684\u5143\u7d20\u3002\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u8fd4\u56de <code>-1</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [0,1,0], K = 1\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\u5148\u7ffb\u8f6c A[0]\uff0c\u7136\u540e\u7ffb\u8f6c A[2]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,1,0], K = 2\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\u65e0\u8bba\u6211\u4eec\u600e\u6837\u7ffb\u8f6c\u5927\u5c0f\u4e3a 2 \u7684\u5b50\u6570\u7ec4\uff0c\u6211\u4eec\u90fd\u4e0d\u80fd\u4f7f\u6570\u7ec4\u53d8\u4e3a [1,1,1]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [0,0,0,1,0,1,1,0], K = 3\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u7ffb\u8f6c A[0],A[1],A[2]:&nbsp;A\u53d8\u6210 [1,1,1,1,0,1,1,0]\n\u7ffb\u8f6c A[4],A[5],A[6]:&nbsp;A\u53d8\u6210 [1,1,1,1,1,0,0,0]\n\u7ffb\u8f6c A[5],A[6],A[7]:&nbsp;A\u53d8\u6210 [1,1,1,1,1,1,1,1]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;=&nbsp;30000</code></li>\n\t<li><code>1 &lt;= K &lt;= A.length</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Sliding Window",
                "link": "sliding-window",
                "tagZh": null
            }
        ],
        "leetId": "995",
        "link": "minimum-number-of-k-consecutive-bit-flips",
        "title": "Minimum Number of K Consecutive Bit Flips",
        "is_locked": "Normal",
        "titleZh": "K \u8fde\u7eed\u4f4d\u7684\u6700\u5c0f\u7ffb\u8f6c\u6b21\u6570",
        "frequency": "39.0%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of non-negative integers, the array is <em>squareful</em> if for every pair of adjacent elements, their sum is a perfect square.</p>\r\n\r\n<p>Return the number of permutations of A that are squareful.&nbsp; Two permutations <code>A1</code> and <code>A2</code> differ if and only if there is some index <code>i</code> such that <code>A1[i] != A2[i]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,17,8]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>\r\n[1,8,17] and [17,8,1] are the valid permutations.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[2,2,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 12</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 1e9</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u5982\u679c\u8be5\u6570\u7ec4\u6bcf\u5bf9\u76f8\u90bb\u5143\u7d20\u4e4b\u548c\u662f\u4e00\u4e2a\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u5219\u79f0\u8fd9\u4e00\u6570\u7ec4\u4e3a<em>\u6b63\u65b9\u5f62</em>\u6570\u7ec4\u3002</p>\n\n<p>\u8fd4\u56de A \u7684\u6b63\u65b9\u5f62\u6392\u5217\u7684\u6570\u76ee\u3002\u4e24\u4e2a\u6392\u5217 <code>A1</code> \u548c <code>A2</code> \u4e0d\u540c\u7684\u5145\u8981\u6761\u4ef6\u662f\u5b58\u5728\u67d0\u4e2a\u7d22\u5f15 <code>i</code>\uff0c\u4f7f\u5f97 A1[i] != A2[i]\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,17,8]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\n[1,8,17] \u548c [17,8,1] \u90fd\u662f\u6709\u6548\u7684\u6392\u5217\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,2,2]\n<strong>\u8f93\u51fa\uff1a</strong>1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 12</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 1e9</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            },
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Backtracking",
                "link": "backtracking",
                "tagZh": "\u56de\u6eaf\u7b97\u6cd5"
            }
        ],
        "leetId": "996",
        "link": "number-of-squareful-arrays",
        "title": "Number of Squareful Arrays",
        "is_locked": "Normal",
        "titleZh": "\u6b63\u65b9\u5f62\u6570\u7ec4\u7684\u6570\u76ee",
        "frequency": "35.0%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>In a town, there are <code>N</code> people labelled from&nbsp;<code>1</code> to <code>N</code>.&nbsp; There is a rumor that one of these people is secretly the town judge.</p>\r\n\r\n<p>If the&nbsp;town judge exists, then:</p>\r\n\r\n<ol>\r\n\t<li>The town judge trusts nobody.</li>\r\n\t<li>Everybody (except for the town judge) trusts the town judge.</li>\r\n\t<li>There is exactly one person that satisfies properties 1 and 2.</li>\r\n</ol>\r\n\r\n<p>You are given <code>trust</code>, an array of pairs <code>trust[i] = [a, b]</code> representing that the person labelled <code>a</code> trusts the person labelled <code>b</code>.</p>\r\n\r\n<p>If the town judge exists and can be identified, return the label of the town judge.&nbsp; Otherwise, return <code>-1</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-1-1\">2</span>, trust = <span id=\"example-input-1-2\">[[1,2]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-2-1\">3</span>, trust = <span id=\"example-input-2-2\">[[1,3],[2,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-3-1\">3</span>, trust = <span id=\"example-input-3-2\">[[1,3],[2,3],[3,1]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">-1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-4-1\">3</span>, trust = <span id=\"example-input-4-2\">[[1,2],[2,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">-1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-5-1\">4</span>, trust = <span id=\"example-input-5-2\">[[1,3],[1,4],[2,3],[2,4],[4,3]]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">3</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 1000</code></li>\r\n\t<li><code>trust.length &lt;= 10000</code></li>\r\n\t<li><code>trust[i]</code> are all different</li>\r\n\t<li><code>trust[i][0] != trust[i][1]</code></li>\r\n\t<li><code>1 &lt;= trust[i][0], trust[i][1] &lt;= N</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e00\u4e2a\u5c0f\u9547\u91cc\uff0c\u6309\u4ece <code>1</code> \u5230 <code>N</code> \u6807\u8bb0\u4e86&nbsp;<code>N</code> \u4e2a\u4eba\u3002\u4f20\u8a00\u79f0\uff0c\u8fd9\u4e9b\u4eba\u4e2d\u6709\u4e00\u4e2a\u662f\u5c0f\u9547\u4e0a\u7684\u79d8\u5bc6\u6cd5\u5b98\u3002</p>\n\n<p>\u5982\u679c\u5c0f\u9547\u7684\u6cd5\u5b98\u771f\u7684\u5b58\u5728\uff0c\u90a3\u4e48\uff1a</p>\n\n<ol>\n\t<li>\u5c0f\u9547\u7684\u6cd5\u5b98\u4e0d\u76f8\u4fe1\u4efb\u4f55\u4eba\u3002</li>\n\t<li>\u6bcf\u4e2a\u4eba\uff08\u9664\u4e86\u5c0f\u9547\u6cd5\u5b98\u5916\uff09\u90fd\u4fe1\u4efb\u5c0f\u9547\u7684\u6cd5\u5b98\u3002</li>\n\t<li>\u53ea\u6709\u4e00\u4e2a\u4eba\u540c\u65f6\u6ee1\u8db3\u5c5e\u6027 1 \u548c\u5c5e\u6027 2 \u3002</li>\n</ol>\n\n<p>\u7ed9\u5b9a\u6570\u7ec4&nbsp;<code>trust</code>\uff0c\u8be5\u6570\u7ec4\u7531\u4fe1\u4efb\u5bf9 <code>trust[i] = [a, b]</code>&nbsp;\u7ec4\u6210\uff0c\u8868\u793a\u6807\u8bb0\u4e3a <code>a</code> \u7684\u4eba\u4fe1\u4efb\u6807\u8bb0\u4e3a <code>b</code> \u7684\u4eba\u3002</p>\n\n<p>\u5982\u679c\u5c0f\u9547\u5b58\u5728\u79d8\u5bc6\u6cd5\u5b98\u5e76\u4e14\u53ef\u4ee5\u786e\u5b9a\u4ed6\u7684\u8eab\u4efd\uff0c\u8bf7\u8fd4\u56de\u8be5\u6cd5\u5b98\u7684\u6807\u8bb0\u3002\u5426\u5219\uff0c\u8fd4\u56de <code>-1</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 2, trust = [[1,2]]\n<strong>\u8f93\u51fa\uff1a</strong>2\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 3, trust = [[1,3],[2,3]]\n<strong>\u8f93\u51fa\uff1a</strong>3\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 3, trust = [[1,3],[2,3],[3,1]]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 3, trust = [[1,2],[2,3]]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n</pre>\n\n<p><strong>\u793a\u4f8b 5\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]\n<strong>\u8f93\u51fa\uff1a</strong>3</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 1000</code></li>\n\t<li><code>trust.length &lt;= 10000</code></li>\n\t<li><code>trust[i]</code>&nbsp;\u662f\u5b8c\u5168\u4e0d\u540c\u7684</li>\n\t<li><code>trust[i][0] != trust[i][1]</code></li>\n\t<li><code>1 &lt;= trust[i][0], trust[i][1] &lt;= N</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Graph",
                "link": "graph",
                "tagZh": "\u56fe"
            }
        ],
        "leetId": "997",
        "link": "find-the-town-judge",
        "title": "Find the Town Judge",
        "is_locked": "Normal",
        "titleZh": "\u627e\u5230\u5c0f\u9547\u7684\u6cd5\u5b98",
        "frequency": "43.5%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>We are given the <code>root</code>&nbsp;node of a <em>maximum tree:</em> a tree where every node has a value greater than any other value in its subtree.</p>\r\n\r\n<p>Just as in the <a href=\"https://leetcode.com/problems/maximum-binary-tree/\">previous problem</a>, the given tree&nbsp;was constructed from an list&nbsp;<code>A</code>&nbsp;(<code>root = Construct(A)</code>) recursively with the following&nbsp;<code>Construct(A)</code> routine:</p>\r\n\r\n<ul>\r\n\t<li>If <code>A</code> is empty, return <code>null</code>.</li>\r\n\t<li>Otherwise, let <code>A[i]</code> be the largest element of <code>A</code>.&nbsp; Create a <code>root</code> node with value <code>A[i]</code>.</li>\r\n\t<li>The left child of <code>root</code> will be <code>Construct([A[0], A[1], ..., A[i-1]])</code></li>\r\n\t<li>The right child of <code>root</code>&nbsp;will be <code>Construct([A[i+1], A[i+2], ..., A[A.length - 1]])</code></li>\r\n\t<li>Return <code>root</code>.</li>\r\n</ul>\r\n\r\n<p>Note that we were not given A directly, only a root node <code>root = Construct(A)</code>.</p>\r\n\r\n<p>Suppose <code>B</code> is a copy of <code>A</code> with the value <code>val</code> appended to it.&nbsp; It is guaranteed that <code>B</code> has unique values.</p>\r\n\r\n<p>Return <code>Construct(B)</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-tree-1-1.png\" style=\"width: 159px; height: 160px;\" /><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-tree-1-2.png\" style=\"width: 169px; height: 160px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-1-1\">[4,1,3,null,null,2]</span>, val = <span id=\"example-input-1-2\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[5,4,null,1,3,null,null,2]\r\n<strong>Explanation:</strong> A = </span><span>[1,4,2,3], B = </span><span>[1,4,2,3,5]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:<br />\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-tree-2-1.png\" style=\"width: 180px; height: 160px;\" /><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-tree-2-2.png\" style=\"width: 214px; height: 160px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-2-1\">[5,2,4,null,1]</span>, val = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[5,2,4,null,1,null,3]\r\n</span><span id=\"example-output-1\"><strong>Explanation:</strong> A = </span><span>[2,1,5,4], B = </span><span>[2,1,5,4,3]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:<br />\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-tree-3-1.png\" style=\"width: 180px; height: 160px;\" /><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-tree-3-2.png\" style=\"width: 201px; height: 160px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-3-1\">[5,2,3,null,1]</span>, val = <span id=\"example-input-3-2\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[5,2,4,null,1,3]\r\n</span><span id=\"example-output-1\"><strong>Explanation:</strong> A = </span><span>[2,1,5,3], B = </span><span>[2,1,5,3,4]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= B.length &lt;= 100</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u6700\u5927\u6811\u5b9a\u4e49\uff1a\u4e00\u4e2a\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u90fd\u5927\u4e8e\u5176\u5b50\u6811\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u503c\u3002</p>\n\n<p>\u7ed9\u51fa\u6700\u5927\u6811\u7684\u6839\u8282\u70b9 <code>root</code>\u3002</p>\n\n<p>\u5c31\u50cf<a href=\"https://leetcode-cn.com/problems/maximum-binary-tree/\">\u4e4b\u524d\u7684\u95ee\u9898</a>\u90a3\u6837\uff0c\u7ed9\u5b9a\u7684\u6811\u662f\u4ece\u8868&nbsp;<code>A</code>\uff08<code>root = Construct(A)</code>\uff09\u9012\u5f52\u5730\u4f7f\u7528\u4e0b\u8ff0&nbsp;<code>Construct(A)</code>&nbsp;\u4f8b\u7a0b\u6784\u9020\u7684\uff1a</p>\n\n<ul>\n\t<li>\u5982\u679c&nbsp;<code>A</code>&nbsp;\u4e3a\u7a7a\uff0c\u8fd4\u56de&nbsp;<code>null</code></li>\n\t<li>\u5426\u5219\uff0c\u4ee4&nbsp;<code>A[i]</code>&nbsp;\u4f5c\u4e3a A \u7684\u6700\u5927\u5143\u7d20\u3002\u521b\u5efa\u4e00\u4e2a\u503c\u4e3a&nbsp;<code>A[i]</code>&nbsp;\u7684\u6839\u8282\u70b9 <code>root</code></li>\n\t<li><code>root</code>&nbsp;\u7684\u5de6\u5b50\u6811\u5c06\u88ab\u6784\u5efa\u4e3a&nbsp;<code>Construct([A[0], A[1], ..., A[i-1]])</code></li>\n\t<li><code>root</code>&nbsp;\u7684\u53f3\u5b50\u6811\u5c06\u88ab\u6784\u5efa\u4e3a <code>Construct([A[i+1], A[i+2], ..., A[A.length - 1]])</code></li>\n\t<li>\u8fd4\u56de&nbsp;<code>root</code></li>\n</ul>\n\n<p>\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u6ca1\u6709\u76f4\u63a5\u7ed9\u5b9a&nbsp;A\uff0c\u53ea\u6709\u4e00\u4e2a\u6839\u8282\u70b9&nbsp;<code>root = Construct(A)</code>.</p>\n\n<p>\u5047\u8bbe <code>B</code> \u662f <code>A</code> \u7684\u526f\u672c\uff0c\u5e76\u9644\u52a0\u503c <code>val</code>\u3002\u4fdd\u8bc1 <code>B</code>&nbsp;\u4e2d\u7684\u503c\u662f\u4e0d\u540c\u7684\u3002</p>\n\n<p>\u8fd4\u56de&nbsp;<code>Construct(B)</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-1-1.png\" style=\"height: 160px; width: 159px;\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-1-2.png\" style=\"height: 160px; width: 169px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [4,1,3,null,null,2], val = 5\n<strong>\u8f93\u51fa\uff1a</strong>[5,4,null,1,3,null,null,2]\n<strong>\u89e3\u91ca\uff1a</strong>A = [1,4,2,3], B = [1,4,2,3,5]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a<br>\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-2-1.png\" style=\"height: 160px; width: 180px;\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-2-2.png\" style=\"height: 160px; width: 214px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [5,2,4,null,1], val = 3\n<strong>\u8f93\u51fa\uff1a</strong>[5,2,4,null,1,null,3]\n<strong>\u89e3\u91ca\uff1a</strong>A = [2,1,5,4], B = [2,1,5,4,3]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a<br>\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-3-1.png\" style=\"height: 160px; width: 180px;\"><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-3-2.png\" style=\"height: 160px; width: 201px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>root = [5,2,3,null,1], val = 4\n<strong>\u8f93\u51fa\uff1a</strong>[5,2,4,null,1,3]\n<strong>\u89e3\u91ca\uff1a</strong>A = [2,1,5,3], B = [2,1,5,3,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= B.length &lt;= 100</code></li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "leetId": "998",
        "link": "maximum-binary-tree-ii",
        "title": "Maximum Binary Tree II",
        "is_locked": "Normal",
        "titleZh": "\u6700\u5927\u4e8c\u53c9\u6811 II",
        "frequency": "53.3%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>On an 8 x 8 chessboard, there is one white rook.&nbsp; There also may be empty squares, white bishops, and black pawns.&nbsp; These are given as characters &#39;R&#39;, &#39;.&#39;, &#39;B&#39;, and &#39;p&#39; respectively. Uppercase characters represent white pieces, and lowercase characters represent black pieces.</p>\r\n\r\n<p>The rook moves as in the rules of Chess: it chooses one of four cardinal directions (north, east, west, and south), then moves in that direction until it chooses to stop, reaches the edge of the board, or captures an opposite colored pawn by moving to the same square it occupies.&nbsp; Also, rooks cannot move into the same square as other friendly bishops.</p>\r\n\r\n<p>Return the number of pawns the rook can capture in one move.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/20/1253_example_1_improved.PNG\" style=\"width: 300px; height: 305px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;R&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation: </strong>\r\nIn this example the rook is able to capture all the pawns.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/19/1253_example_2_improved.PNG\" style=\"width: 300px; height: 306px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;B&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;B&quot;,&quot;R&quot;,&quot;B&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;B&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">0</span>\r\n<strong>Explanation: </strong>\r\nBishops are blocking the rook to capture any pawn.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/20/1253_example_3_improved.PNG\" style=\"width: 300px; height: 305px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;R&quot;,&quot;.&quot;,&quot;p&quot;,&quot;B&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation: </strong>\r\nThe rook can capture the pawns at positions b5, d6 and f5.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>board.length == board[i].length == 8</code></li>\r\n\t<li><code>board[i][j]</code> is either <code>&#39;R&#39;</code>, <code>&#39;.&#39;</code>, <code>&#39;B&#39;</code>, or&nbsp;<code>&#39;p&#39;</code></li>\r\n\t<li>There is exactly one cell with <code>board[i][j] == &#39;R&#39;</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e00\u4e2a 8 x 8 \u7684\u68cb\u76d8\u4e0a\uff0c\u6709\u4e00\u4e2a\u767d\u8272\u8f66\uff08rook\uff09\u3002\u4e5f\u53ef\u80fd\u6709\u7a7a\u65b9\u5757\uff0c\u767d\u8272\u7684\u8c61\uff08bishop\uff09\u548c\u9ed1\u8272\u7684\u5352\uff08pawn\uff09\u3002\u5b83\u4eec\u5206\u522b\u4ee5\u5b57\u7b26 &ldquo;R&rdquo;\uff0c&ldquo;.&rdquo;\uff0c&ldquo;B&rdquo; \u548c &ldquo;p&rdquo; \u7ed9\u51fa\u3002\u5927\u5199\u5b57\u7b26\u8868\u793a\u767d\u68cb\uff0c\u5c0f\u5199\u5b57\u7b26\u8868\u793a\u9ed1\u68cb\u3002</p>\n\n<p>\u8f66\u6309\u56fd\u9645\u8c61\u68cb\u4e2d\u7684\u89c4\u5219\u79fb\u52a8\uff1a\u5b83\u9009\u62e9\u56db\u4e2a\u57fa\u672c\u65b9\u5411\u4e2d\u7684\u4e00\u4e2a\uff08\u5317\uff0c\u4e1c\uff0c\u897f\u548c\u5357\uff09\uff0c\u7136\u540e\u671d\u90a3\u4e2a\u65b9\u5411\u79fb\u52a8\uff0c\u76f4\u5230\u5b83\u9009\u62e9\u505c\u6b62\u3001\u5230\u8fbe\u68cb\u76d8\u7684\u8fb9\u7f18\u6216\u79fb\u52a8\u5230\u540c\u4e00\u65b9\u683c\u6765\u6355\u83b7\u8be5\u65b9\u683c\u4e0a\u989c\u8272\u76f8\u53cd\u7684\u5352\u3002\u53e6\u5916\uff0c\u8f66\u4e0d\u80fd\u4e0e\u5176\u4ed6\u53cb\u65b9\uff08\u767d\u8272\uff09\u8c61\u8fdb\u5165\u540c\u4e00\u4e2a\u65b9\u683c\u3002</p>\n\n<p>\u8fd4\u56de\u8f66\u80fd\u591f\u5728\u4e00\u6b21\u79fb\u52a8\u4e2d\u6355\u83b7\u5230\u7684\u5352\u7684\u6570\u91cf\u3002<br>\n&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/1253_example_1_improved.PNG\" style=\"height: 305px; width: 300px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;R&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a\n</strong>\u5728\u672c\u4f8b\u4e2d\uff0c\u8f66\u80fd\u591f\u6355\u83b7\u6240\u6709\u7684\u5352\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/1253_example_2_improved.PNG\" style=\"height: 306px; width: 300px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;B&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;B&quot;,&quot;R&quot;,&quot;B&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;B&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a\n</strong>\u8c61\u963b\u6b62\u4e86\u8f66\u6355\u83b7\u4efb\u4f55\u5352\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/1253_example_3_improved.PNG\" style=\"height: 305px; width: 300px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;p&quot;,&quot;p&quot;,&quot;.&quot;,&quot;R&quot;,&quot;.&quot;,&quot;p&quot;,&quot;B&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a </strong>\n\u8f66\u53ef\u4ee5\u6355\u83b7\u4f4d\u7f6e b5\uff0cd6 \u548c f5 \u7684\u5352\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>board.length == board[i].length == 8</code></li>\n\t<li><code>board[i][j]</code> \u53ef\u4ee5\u662f&nbsp;<code>&#39;R&#39;</code>\uff0c<code>&#39;.&#39;</code>\uff0c<code>&#39;B&#39;</code>&nbsp;\u6216&nbsp;<code>&#39;p&#39;</code></li>\n\t<li>\u53ea\u6709\u4e00\u4e2a\u683c\u5b50\u4e0a\u5b58\u5728&nbsp;<code>board[i][j] == &#39;R&#39;</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "999",
        "link": "available-captures-for-rook",
        "title": "Available Captures for Rook",
        "is_locked": "Normal",
        "titleZh": "\u8f66\u7684\u53ef\u7528\u6355\u83b7\u91cf",
        "frequency": "63.0%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>There are <code>N</code> piles of stones arranged in a row.&nbsp; The <code>i</code>-th pile has <code>stones[i]</code> stones.</p>\r\n\r\n<p>A <em>move</em> consists of merging <strong>exactly&nbsp;<code>K</code>&nbsp;consecutive</strong> piles into one pile, and the cost of this move is equal to the total number of stones in these <code>K</code> piles.</p>\r\n\r\n<p>Find the minimum cost to merge all piles of stones into one pile.&nbsp; If it is impossible, return <code>-1</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>stones = <span id=\"example-input-1-1\">[3,2,4,1]</span>, K = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">20</span>\r\n<strong>Explanation: </strong>\r\nWe start with [3, 2, 4, 1].\r\nWe merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].\r\nWe merge [4, 1] for a cost of 5, and we are left with [5, 5].\r\nWe merge [5, 5] for a cost of 10, and we are left with [10].\r\nThe total cost was 20, and this is the minimum possible.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>stones = <span id=\"example-input-2-1\">[3,2,4,1]</span>, K = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">-1</span>\r\n<strong>Explanation: </strong>After any merge operation, there are 2 piles left, and we can&#39;t merge anymore.  So the task is impossible.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>stones = <span id=\"example-input-3-1\">[3,5,1,2,6]</span>, K = <span id=\"example-input-3-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">25</span>\r\n<strong>Explanation: </strong>\r\nWe start with [3, 5, 1, 2, 6].\r\nWe merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].\r\nWe merge [3, 8, 6] for a cost of 17, and we are left with [17].\r\nThe total cost was 25, and this is the minimum possible.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ul>\r\n\t<li><code><span>1 &lt;= stones.length &lt;= 30</span></code></li>\r\n\t<li><code><span>2 &lt;= K &lt;= 30</span></code></li>\r\n\t<li><code><span>1 &lt;= stones[i] &lt;= 100</span></code></li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u6709 <code>N</code> \u5806\u77f3\u5934\u6392\u6210\u4e00\u6392\uff0c\u7b2c <code>i</code> \u5806\u4e2d\u6709&nbsp;<code>stones[i]</code>&nbsp;\u5757\u77f3\u5934\u3002</p>\n\n<p>\u6bcf\u6b21<em>\u79fb\u52a8\uff08move\uff09</em>\u9700\u8981\u5c06<strong>\u8fde\u7eed\u7684</strong>&nbsp;<code>K</code>&nbsp;\u5806\u77f3\u5934\u5408\u5e76\u4e3a\u4e00\u5806\uff0c\u800c\u8fd9\u4e2a\u79fb\u52a8\u7684\u6210\u672c\u4e3a\u8fd9&nbsp;<code>K</code>&nbsp;\u5806\u77f3\u5934\u7684\u603b\u6570\u3002</p>\n\n<p>\u627e\u51fa\u628a\u6240\u6709\u77f3\u5934\u5408\u5e76\u6210\u4e00\u5806\u7684\u6700\u4f4e\u6210\u672c\u3002\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u8fd4\u56de <code>-1</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>stones = [3,2,4,1], K = 2\n<strong>\u8f93\u51fa\uff1a</strong>20\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4ece [3, 2, 4, 1] \u5f00\u59cb\u3002\n\u5408\u5e76 [3, 2]\uff0c\u6210\u672c\u4e3a 5\uff0c\u5269\u4e0b [5, 4, 1]\u3002\n\u5408\u5e76 [4, 1]\uff0c\u6210\u672c\u4e3a 5\uff0c\u5269\u4e0b [5, 5]\u3002\n\u5408\u5e76 [5, 5]\uff0c\u6210\u672c\u4e3a 10\uff0c\u5269\u4e0b [10]\u3002\n\u603b\u6210\u672c 20\uff0c\u8fd9\u662f\u53ef\u80fd\u7684\u6700\u5c0f\u503c\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>stones = [3,2,4,1], K = 3\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\u4efb\u4f55\u5408\u5e76\u64cd\u4f5c\u540e\uff0c\u90fd\u4f1a\u5269\u4e0b 2 \u5806\uff0c\u6211\u4eec\u65e0\u6cd5\u518d\u8fdb\u884c\u5408\u5e76\u3002\u6240\u4ee5\u8fd9\u9879\u4efb\u52a1\u662f\u4e0d\u53ef\u80fd\u5b8c\u6210\u7684\u3002.\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>stones = [3,5,1,2,6], K = 3\n<strong>\u8f93\u51fa\uff1a</strong>25\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4ece [3, 5, 1, 2, 6] \u5f00\u59cb\u3002\n\u5408\u5e76 [5, 1, 2]\uff0c\u6210\u672c\u4e3a 8\uff0c\u5269\u4e0b [3, 8, 6]\u3002\n\u5408\u5e76 [3, 8, 6]\uff0c\u6210\u672c\u4e3a 17\uff0c\u5269\u4e0b [17]\u3002\n\u603b\u6210\u672c 25\uff0c\u8fd9\u662f\u53ef\u80fd\u7684\u6700\u5c0f\u503c\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= stones.length &lt;= 30</code></li>\n\t<li><code>2 &lt;= K &lt;= 30</code></li>\n\t<li><code>1 &lt;= stones[i] &lt;= 100</code></li>\n</ul>\n",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "1000",
        "link": "minimum-cost-to-merge-stones",
        "title": "Minimum Cost to Merge Stones",
        "is_locked": "Normal",
        "titleZh": "\u5408\u5e76\u77f3\u5934\u7684\u6700\u4f4e\u6210\u672c",
        "frequency": "18.6%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>On a <code>N x N</code> grid of cells, each cell <code>(x, y)</code> with <code>0 &lt;= x &lt; N</code> and <code>0 &lt;= y &lt; N</code> has a lamp.</p>\r\n\r\n<p>Initially, some number of lamps are on.&nbsp; <code>lamps[i]</code> tells us the location of the <code>i</code>-th lamp that is on.&nbsp; Each lamp that is on illuminates every square on its x-axis, y-axis, and both diagonals (similar to a Queen in chess).</p>\r\n\r\n<p>For the i-th query&nbsp;<code>queries[i] = (x, y)</code>, the answer to the query is 1 if the cell (x, y) is illuminated, else 0.</p>\r\n\r\n<p>After each query <code>(x, y)</code> [in the order given by <code>queries</code>], we turn off any&nbsp;lamps that are at cell <code>(x, y)</code>&nbsp;or are adjacent 8-directionally (ie., share a corner or edge with cell <code>(x, y)</code>.)</p>\r\n\r\n<p>Return an array of answers.&nbsp; Each&nbsp;value <code>answer[i]</code> should be equal to the answer of the <code>i</code>-th query <code>queries[i]</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>N = <span id=\"example-input-1-1\">5</span>, lamps = <span id=\"example-input-1-2\">[[0,0],[4,4]]</span>, queries = <span id=\"example-input-1-3\">[[1,1],[1,0]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,0]</span>\r\n<strong>Explanation: </strong>\r\nBefore performing the first query we have both lamps [0,0] and [4,4] on.\r\nThe grid representing which cells are lit looks like this, where [0,0] is the top left corner, and [4,4] is the bottom right corner:\r\n1 1 1 1 1\r\n1 1 0 0 1\r\n1 0 1 0 1\r\n1 0 0 1 1\r\n1 1 1 1 1\r\nThen the query at [1, 1] returns 1 because the cell is lit.  After this query, the lamp at [0, 0] turns off, and the grid now looks like this:\r\n1 0 0 0 1\r\n0 1 0 0 1\r\n0 0 1 0 1\r\n0 0 0 1 1\r\n1 1 1 1 1\r\nBefore performing the second query we have only the lamp [4,4] on.  Now the query at [1,0] returns 0, because the cell is no longer lit.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\r\n\t<li><code>0 &lt;= lamps.length &lt;= 20000</code></li>\r\n\t<li><code>0 &lt;= queries.length &lt;= 20000</code></li>\r\n\t<li><code>lamps[i].length == queries[i].length == 2</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u5728&nbsp;<code>N x N</code>&nbsp;\u7684\u7f51\u683c\u4e0a\uff0c\u6bcf\u4e2a\u5355\u5143\u683c&nbsp;<code>(x, y)</code>&nbsp;\u4e0a\u90fd\u6709\u4e00\u76cf\u706f\uff0c\u5176\u4e2d&nbsp;<code>0 &lt;= x &lt; N</code>&nbsp;\u4e14&nbsp;<code>0 &lt;= y &lt; N</code> \u3002</p>\n\n<p>\u6700\u521d\uff0c\u4e00\u5b9a\u6570\u91cf\u7684\u706f\u662f\u4eae\u7740\u7684\u3002<code>lamps[i]</code>&nbsp;\u544a\u8bc9\u6211\u4eec\u4eae\u7740\u7684\u7b2c <code>i</code> \u76cf\u706f\u7684\u4f4d\u7f6e\u3002\u6bcf\u76cf\u706f\u90fd\u7167\u4eae\u5176\u6240\u5728 x \u8f74\u3001y \u8f74\u548c\u4e24\u6761\u5bf9\u89d2\u7ebf\u4e0a\u7684\u6bcf\u4e2a\u6b63\u65b9\u5f62\uff08\u7c7b\u4f3c\u4e8e\u56fd\u9645\u8c61\u68cb\u4e2d\u7684\u7687\u540e\uff09\u3002</p>\n\n<p>\u5bf9\u4e8e\u7b2c <code>i</code> \u6b21\u67e5\u8be2&nbsp;<code>queries[i] = (x, y)</code>\uff0c\u5982\u679c\u5355\u5143\u683c (x, y) \u662f\u88ab\u7167\u4eae\u7684\uff0c\u5219\u67e5\u8be2\u7ed3\u679c\u4e3a 1\uff0c\u5426\u5219\u4e3a 0 \u3002</p>\n\n<p>\u5728\u6bcf\u4e2a\u67e5\u8be2 <code>(x, y)</code> \u4e4b\u540e [\u6309\u7167\u67e5\u8be2\u7684\u987a\u5e8f]\uff0c\u6211\u4eec\u5173\u95ed\u4f4d\u4e8e\u5355\u5143\u683c (x, y) \u4e0a\u6216\u5176\u76f8\u90bb 8 \u4e2a\u65b9\u5411\u4e0a\uff08\u4e0e\u5355\u5143\u683c (x, y) \u5171\u4eab\u4e00\u4e2a\u89d2\u6216\u8fb9\uff09\u7684\u4efb\u4f55\u706f\u3002</p>\n\n<p>\u8fd4\u56de\u7b54\u6848\u6570\u7ec4 <code>answer</code>\u3002\u6bcf\u4e2a\u503c <code>answer[i]</code> \u5e94\u7b49\u4e8e\u7b2c <code>i</code>&nbsp;\u6b21\u67e5\u8be2&nbsp;<code>queries[i]</code>&nbsp;\u7684\u7ed3\u679c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]\n<strong>\u8f93\u51fa\uff1a</strong>[1,0]\n<strong>\u89e3\u91ca\uff1a </strong>\n\u5728\u6267\u884c\u7b2c\u4e00\u6b21\u67e5\u8be2\u4e4b\u524d\uff0c\u6211\u4eec\u4f4d\u4e8e [0, 0] \u548c [4, 4] \u706f\u662f\u4eae\u7740\u7684\u3002\n\u8868\u793a\u54ea\u4e9b\u5355\u5143\u683c\u4eae\u8d77\u7684\u7f51\u683c\u5982\u4e0b\u6240\u793a\uff0c\u5176\u4e2d [0, 0] \u4f4d\u4e8e\u5de6\u4e0a\u89d2\uff1a\n1 1 1 1 1\n1 1 0 0 1\n1 0 1 0 1\n1 0 0 1 1\n1 1 1 1 1\n\u7136\u540e\uff0c\u7531\u4e8e\u5355\u5143\u683c [1, 1] \u4eae\u7740\uff0c\u7b2c\u4e00\u6b21\u67e5\u8be2\u8fd4\u56de 1\u3002\u5728\u6b64\u67e5\u8be2\u540e\uff0c\u4f4d\u4e8e [0\uff0c0] \u5904\u7684\u706f\u5c06\u5173\u95ed\uff0c\u7f51\u683c\u73b0\u5728\u5982\u4e0b\u6240\u793a\uff1a\n1 0 0 0 1\n0 1 0 0 1\n0 0 1 0 1\n0 0 0 1 1\n1 1 1 1 1\n\u5728\u6267\u884c\u7b2c\u4e8c\u6b21\u67e5\u8be2\u4e4b\u524d\uff0c\u6211\u4eec\u53ea\u6709 [4, 4] \u5904\u7684\u706f\u4eae\u7740\u3002\u73b0\u5728\uff0c[1, 0] \u5904\u7684\u67e5\u8be2\u8fd4\u56de 0\uff0c\u56e0\u4e3a\u8be5\u5355\u5143\u683c\u4e0d\u518d\u4eae\u7740\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n\t<li><code>0 &lt;= lamps.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= queries.length &lt;= 20000</code></li>\n\t<li><code>lamps[i].length == queries[i].length == 2</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "leetId": "1001",
        "link": "grid-illumination",
        "title": "Grid Illumination",
        "is_locked": "Normal",
        "titleZh": "\u7f51\u683c\u7167\u660e",
        "frequency": "25.7%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>Given an array&nbsp;<code>A</code> of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list <strong>(including duplicates)</strong>.&nbsp;&nbsp;For example, if a character occurs 3 times&nbsp;in all strings but not 4 times, you need to include that character three times&nbsp;in the final answer.</p>\r\n\r\n<p>You may return the answer in any order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;bella&quot;,&quot;label&quot;,&quot;roller&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;e&quot;,&quot;l&quot;,&quot;l&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;cool&quot;,&quot;lock&quot;,&quot;cook&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[&quot;c&quot;,&quot;o&quot;]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\r\n\t<li><code>A[i][j]</code> is a lowercase letter</li>\r\n</ol>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4ec5\u6709\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u6570\u7ec4 <code>A</code>\uff0c\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e2d\u90fd\u663e\u793a\u7684\u5168\u90e8\u5b57\u7b26\uff08<strong>\u5305\u62ec\u91cd\u590d\u5b57\u7b26</strong>\uff09\u7ec4\u6210\u7684\u5217\u8868\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u5728\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0 3 \u6b21\uff0c\u4f46\u4e0d\u662f 4 \u6b21\uff0c\u5219\u9700\u8981\u5728\u6700\u7ec8\u7b54\u6848\u4e2d\u5305\u542b\u8be5\u5b57\u7b26 3 \u6b21\u3002</p>\n\n<p>\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;bella&quot;,&quot;label&quot;,&quot;roller&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;e&quot;,&quot;l&quot;,&quot;l&quot;]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[&quot;cool&quot;,&quot;lock&quot;,&quot;cook&quot;]\n<strong>\u8f93\u51fa\uff1a</strong>[&quot;c&quot;,&quot;o&quot;]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 100</code></li>\n\t<li><code>A[i][j]</code> \u662f\u5c0f\u5199\u5b57\u6bcd</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Hash Table",
                "link": "hash-table",
                "tagZh": "\u54c8\u5e0c\u8868"
            }
        ],
        "leetId": "1002",
        "link": "find-common-characters",
        "title": "Find Common Characters",
        "is_locked": "Normal",
        "titleZh": "\u67e5\u627e\u5e38\u7528\u5b57\u7b26",
        "frequency": "62.6%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>We are given that the string <code>&quot;abc&quot;</code> is valid.</p>\r\n\r\n<p>From any valid string <code>V</code>, we may split&nbsp;<code>V</code> into two pieces <code>X</code> and <code>Y</code> such that <code>X + Y</code> (<code>X</code> concatenated with <code>Y</code>) is equal to <code>V</code>.&nbsp; (<code>X</code> or <code>Y</code> may be empty.)&nbsp; Then, <code>X + &quot;abc&quot; + Y</code> is also valid.</p>\r\n\r\n<p>If for example <code>S = &quot;abc&quot;</code>, then examples of valid strings are: <code>&quot;abc&quot;, &quot;aabcbc&quot;, &quot;abcabc&quot;, &quot;abcabcababcc&quot;</code>.&nbsp; Examples of <strong>invalid</strong>&nbsp;strings are: <code>&quot;abccba&quot;</code>, <code>&quot;ab&quot;</code>, <code>&quot;cababc&quot;</code>, <code>&quot;bac&quot;</code>.</p>\r\n\r\n<p>Return <code>true</code> if and only if the given string&nbsp;<code>S</code>&nbsp;is valid.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;aabcbc&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation: </strong>\r\nWe start with the valid string &quot;abc&quot;.\r\nThen we can insert another &quot;abc&quot; between &quot;a&quot; and &quot;bc&quot;, resulting in &quot;a&quot; + &quot;abc&quot; + &quot;bc&quot; which is &quot;aabcbc&quot;.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;abcabcababcc&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n<strong>Explanation: </strong>\r\n&quot;abcabcabc&quot; is valid after consecutive insertings of &quot;abc&quot;.\r\nThen we can insert &quot;abc&quot; before the last letter, resulting in &quot;abcabcab&quot; + &quot;abc&quot; + &quot;c&quot; which is &quot;abcabcababcc&quot;.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;abccba&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">&quot;cababc&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">false</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length &lt;= 20000</code></li>\r\n\t<li><code>S[i]</code> is <code>&#39;a&#39;</code>, <code>&#39;b&#39;</code>, or <code>&#39;c&#39;</code></li>\r\n</ol>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u6709\u6548\u5b57\u7b26\u4e32&nbsp;<code>&quot;abc&quot;</code>\u3002</p>\n\n<p>\u5bf9\u4e8e\u4efb\u4f55\u6709\u6548\u7684\u5b57\u7b26\u4e32 <code>V</code>\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 <code>V</code> \u5206\u6210\u4e24\u4e2a\u90e8\u5206 <code>X</code> \u548c <code>Y</code>\uff0c\u4f7f\u5f97 <code>X + Y</code>\uff08<code>X</code> \u4e0e <code>Y</code> \u8fde\u63a5\uff09\u7b49\u4e8e <code>V</code>\u3002\uff08<code>X</code>&nbsp;\u6216 <code>Y</code> \u53ef\u4ee5\u4e3a\u7a7a\u3002\uff09\u90a3\u4e48\uff0c<code>X + &quot;abc&quot; + Y</code> \u4e5f\u540c\u6837\u662f\u6709\u6548\u7684\u3002</p>\n\n<p>\u4f8b\u5982\uff0c\u5982\u679c <code>S = &quot;abc&quot;</code>\uff0c\u5219\u6709\u6548\u5b57\u7b26\u4e32\u7684\u793a\u4f8b\u662f\uff1a<code>&quot;abc&quot;</code>\uff0c<code>&quot;aabcbc&quot;</code>\uff0c<code>&quot;abcabc&quot;</code>\uff0c<code>&quot;abcabcababcc&quot;</code>\u3002<strong>\u65e0\u6548</strong>\u5b57\u7b26\u4e32\u7684\u793a\u4f8b\u662f\uff1a<code>&quot;abccba&quot;</code>\uff0c<code>&quot;ab&quot;</code>\uff0c<code>&quot;cababc&quot;</code>\uff0c<code>&quot;bac&quot;</code>\u3002</p>\n\n<p>\u5982\u679c\u7ed9\u5b9a\u5b57\u7b26\u4e32 <code>S</code> \u6709\u6548\uff0c\u5219\u8fd4\u56de <code>true</code>\uff1b\u5426\u5219\uff0c\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;aabcbc&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\n\u4ece\u6709\u6548\u5b57\u7b26\u4e32 &quot;abc&quot; \u5f00\u59cb\u3002\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5728 &quot;a&quot; \u548c &quot;bc&quot; \u4e4b\u95f4\u63d2\u5165\u53e6\u4e00\u4e2a &quot;abc&quot;\uff0c\u4ea7\u751f &quot;a&quot; + &quot;abc&quot; + &quot;bc&quot;\uff0c\u5373 &quot;aabcbc&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;abcabcababcc&quot;\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\n&quot;abcabcabc&quot; \u662f\u6709\u6548\u7684\uff0c\u5b83\u53ef\u4ee5\u89c6\u4f5c\u5728\u539f\u4e32\u540e\u8fde\u7eed\u63d2\u5165 &quot;abc&quot;\u3002\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5728\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4e4b\u524d\u63d2\u5165 &quot;abc&quot;\uff0c\u4ea7\u751f &quot;abcabcab&quot; + &quot;abc&quot; + &quot;c&quot;\uff0c\u5373 &quot;abcabcababcc&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;abccba&quot;\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;cababc&quot;\n<strong>\u8f93\u51fa\uff1a</strong>false</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 20000</code></li>\n\t<li><code>S[i]</code> \u4e3a&nbsp;<code>&#39;a&#39;</code>\u3001<code>&#39;b&#39;</code>\u3001\u6216&nbsp;<code>&#39;c&#39;</code></li>\n</ol>\n\n<p>&nbsp;</p>\n",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "leetId": "1003",
        "link": "check-if-word-is-valid-after-substitutions",
        "title": "Check If Word Is Valid After Substitutions",
        "is_locked": "Normal",
        "titleZh": "\u68c0\u67e5\u66ff\u6362\u540e\u7684\u8bcd\u662f\u5426\u6709\u6548",
        "frequency": "50.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code>&nbsp;of 0s and 1s, we may change up to <code>K</code>&nbsp;values from 0 to 1.</p>\r\n\r\n<p>Return the length of the longest (contiguous) subarray that contains only 1s.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[1,1,1,0,0,0,1,1,1,1,0]</span>, K = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">6</span>\r\n<strong>Explanation: </strong>\r\n[1,1,1,0,0,<u><strong>1</strong>,1,1,1,1,<strong>1</strong></u>]\r\nBolded numbers were flipped from 0 to 1.  The longest subarray is underlined.</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1]</span>, K = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">10</span>\r\n<strong>Explanation: </strong>\r\n[0,0,<u>1,1,<b>1</b>,<strong>1</strong>,1,1,1,<strong>1</strong>,1,1</u>,0,0,0,1,1,1,1]\r\nBolded numbers were flipped from 0 to 1.  The longest subarray is underlined.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\r\n\t<li><code>0 &lt;= K &lt;= A.length</code></li>\r\n\t<li><code>A[i]</code> is <code>0</code> or <code>1</code>&nbsp;</li>\r\n</ol>\r\n</div>\r\n</div>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u82e5\u5e72 <code>0</code> \u548c <code>1</code> \u7ec4\u6210\u7684\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u6211\u4eec\u6700\u591a\u53ef\u4ee5\u5c06&nbsp;<code>K</code>&nbsp;\u4e2a\u503c\u4ece 0 \u53d8\u6210 1 \u3002</p>\n\n<p>\u8fd4\u56de\u4ec5\u5305\u542b 1 \u7684\u6700\u957f\uff08\u8fde\u7eed\uff09\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [1,1,1,0,0,0,1,1,1,1,0], K = 2\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a </strong>\n[1,1,1,0,0,<strong>1</strong>,1,1,1,1,<strong>1</strong>]\n\u7c97\u4f53\u6570\u5b57\u4ece 0 \u7ffb\u8f6c\u5230 1\uff0c\u6700\u957f\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 6\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3\n<strong>\u8f93\u51fa\uff1a</strong>10\n<strong>\u89e3\u91ca\uff1a</strong>\n[0,0,1,1,<strong>1</strong>,<strong>1</strong>,1,1,1,<strong>1</strong>,1,1,0,0,0,1,1,1,1]\n\u7c97\u4f53\u6570\u5b57\u4ece 0 \u7ffb\u8f6c\u5230 1\uff0c\u6700\u957f\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u4e3a 10\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\n\t<li><code>0 &lt;= K &lt;= A.length</code></li>\n\t<li><code>A[i]</code> \u4e3a&nbsp;<code>0</code>&nbsp;\u6216&nbsp;<code>1</code>&nbsp;</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Two Pointers",
                "link": "two-pointers",
                "tagZh": "\u53cc\u6307\u9488"
            },
            {
                "tag": "Sliding Window",
                "link": "sliding-window",
                "tagZh": null
            }
        ],
        "leetId": "1004",
        "link": "max-consecutive-ones-iii",
        "title": "Max Consecutive Ones III",
        "is_locked": "Normal",
        "titleZh": "\u6700\u5927\u8fde\u7eed1\u7684\u4e2a\u6570 III",
        "frequency": "38.9%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of integers, we <strong>must</strong>&nbsp;modify the array in the following way: we choose an <code>i</code>&nbsp;and replace&nbsp;<code>A[i]</code> with <code>-A[i]</code>, and we repeat this process <code>K</code> times in total.&nbsp; (We may choose the same index <code>i</code> multiple times.)</p>\r\n\r\n<p>Return the largest possible sum of the array after modifying it in this way.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[4,2,3]</span>, K = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">5\r\n<strong>Explanation: </strong>Choose indices (1,) and A becomes [4,-2,3].</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[3,-1,0,2]</span>, K = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong>6\r\n<span id=\"example-output-1\"><strong>Explanation: </strong>Choose indices (1, 2, 2) and A becomes [3,1,0,2].</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-3-1\">[2,-3,-1,5,-4]</span>, K = <span id=\"example-input-3-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">13\r\n</span><span id=\"example-output-1\"><strong>Explanation: </strong>Choose indices (1, 4) and A becomes [2,3,-1,5,4].</span>\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code>1 &lt;= K &lt;= 10000</code></li>\r\n\t<li><code>-100 &lt;= A[i] &lt;= 100</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 A\uff0c\u6211\u4eec<strong>\u53ea\u80fd</strong>\u7528\u4ee5\u4e0b\u65b9\u6cd5\u4fee\u6539\u8be5\u6570\u7ec4\uff1a\u6211\u4eec\u9009\u62e9\u67d0\u4e2a\u4e2a\u7d22\u5f15 <code>i</code>&nbsp;\u5e76\u5c06 <code>A[i]</code> \u66ff\u6362\u4e3a <code>-A[i]</code>\uff0c\u7136\u540e\u603b\u5171\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b <code>K</code> \u6b21\u3002\uff08\u6211\u4eec\u53ef\u4ee5\u591a\u6b21\u9009\u62e9\u540c\u4e00\u4e2a\u7d22\u5f15 <code>i</code>\u3002\uff09</p>\n\n<p>\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u4fee\u6539\u6570\u7ec4\u540e\uff0c\u8fd4\u56de\u6570\u7ec4\u53ef\u80fd\u7684\u6700\u5927\u548c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [4,2,3], K = 1\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>\u9009\u62e9\u7d22\u5f15 (1,) \uff0c\u7136\u540e A \u53d8\u4e3a [4,-2,3]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [3,-1,0,2], K = 3\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\u9009\u62e9\u7d22\u5f15 (1, 2, 2) \uff0c\u7136\u540e A \u53d8\u4e3a [3,1,0,2]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [2,-3,-1,5,-4], K = 2\n<strong>\u8f93\u51fa\uff1a</strong>13\n<strong>\u89e3\u91ca\uff1a</strong>\u9009\u62e9\u7d22\u5f15 (1, 4) \uff0c\u7136\u540e A \u53d8\u4e3a [2,3,-1,5,4]\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= K &lt;= 10000</code></li>\n\t<li><code>-100 &lt;= A[i] &lt;= 100</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            }
        ],
        "leetId": "1005",
        "link": "maximize-sum-of-array-after-k-negations",
        "title": "Maximize Sum Of Array After K Negations",
        "is_locked": "Normal",
        "titleZh": "K \u6b21\u53d6\u53cd\u540e\u6700\u5927\u5316\u7684\u6570\u7ec4\u548c",
        "frequency": "42.9%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Normally, the factorial of a positive integer <code>n</code>&nbsp;is the product of all positive integers less than or equal to <code>n</code>.&nbsp; For example, <code>factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1</code>.</p>\r\n\r\n<p>We instead make a <em>clumsy factorial:</em>&nbsp;using the integers in decreasing order, we&nbsp;swap out the multiply operations for a fixed rotation of operations:&nbsp;multiply (*), divide (/), add (+) and subtract (-) in this order.</p>\r\n\r\n<p>For example, <code>clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1</code>.&nbsp; However, these operations are still applied using the usual order of operations of arithmetic: we do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.</p>\r\n\r\n<p>Additionally, the division that we use is <em>floor division</em>&nbsp;such that&nbsp;<code>10 * 9 / 8</code>&nbsp;equals&nbsp;<code>11</code>.&nbsp; This guarantees the result is&nbsp;an integer.</p>\r\n\r\n<p><code><font face=\"sans-serif, Arial, Verdana, Trebuchet MS\">Implement the&nbsp;</font>clumsy</code>&nbsp;function&nbsp;as defined above: given an integer <code>N</code>, it returns the clumsy factorial of <code>N</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>4\r\n<strong>Output:</strong>&nbsp;7\r\n<strong>Explanation:</strong> 7 = 4 * 3 / 2 + 1\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">10\r\n</span><strong>Output: </strong><span id=\"example-output-1\">12\r\n</span><strong>Explanation: </strong>12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 10000</code></li>\r\n\t<li><code>-2^31 &lt;= answer &lt;= 2^31 - 1</code>&nbsp; (The answer is guaranteed to fit within a 32-bit integer.)</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u901a\u5e38\uff0c\u6b63\u6574\u6570 <code>n</code> \u7684\u9636\u4e58\u662f\u6240\u6709\u5c0f\u4e8e\u6216\u7b49\u4e8e <code>n</code> \u7684\u6b63\u6574\u6570\u7684\u4e58\u79ef\u3002\u4f8b\u5982\uff0c<code>factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1</code>\u3002</p>\n\n<p>\u76f8\u53cd\uff0c\u6211\u4eec\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u7b28\u9636\u4e58 <code>clumsy</code>\uff1a\u5728\u6574\u6570\u7684\u9012\u51cf\u5e8f\u5217\u4e2d\uff0c\u6211\u4eec\u4ee5\u4e00\u4e2a\u56fa\u5b9a\u987a\u5e8f\u7684\u64cd\u4f5c\u7b26\u5e8f\u5217\u6765\u4f9d\u6b21\u66ff\u6362\u539f\u6709\u7684\u4e58\u6cd5\u64cd\u4f5c\u7b26\uff1a\u4e58\u6cd5(*)\uff0c\u9664\u6cd5(/)\uff0c\u52a0\u6cd5(+)\u548c\u51cf\u6cd5(-)\u3002</p>\n\n<p>\u4f8b\u5982\uff0c<code>clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1</code>\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u8fd0\u7b97\u4ecd\u7136\u4f7f\u7528\u901a\u5e38\u7684\u7b97\u672f\u8fd0\u7b97\u987a\u5e8f\uff1a\u6211\u4eec\u5728\u4efb\u4f55\u52a0\u3001\u51cf\u6b65\u9aa4\u4e4b\u524d\u6267\u884c\u6240\u6709\u7684\u4e58\u6cd5\u548c\u9664\u6cd5\u6b65\u9aa4\uff0c\u5e76\u4e14\u6309\u4ece\u5de6\u5230\u53f3\u5904\u7406\u4e58\u6cd5\u548c\u9664\u6cd5\u6b65\u9aa4\u3002</p>\n\n<p>\u53e6\u5916\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u9664\u6cd5\u662f\u5730\u677f\u9664\u6cd5\uff08<em>floor division</em>\uff09\uff0c\u6240\u4ee5&nbsp;<code>10 * 9 / 8</code>&nbsp;\u7b49\u4e8e&nbsp;<code>11</code>\u3002\u8fd9\u4fdd\u8bc1\u7ed3\u679c\u662f\u4e00\u4e2a\u6574\u6570\u3002</p>\n\n<p>\u5b9e\u73b0\u4e0a\u9762\u5b9a\u4e49\u7684\u7b28\u51fd\u6570\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 <code>N</code>\uff0c\u5b83\u8fd4\u56de <code>N</code> \u7684\u7b28\u9636\u4e58\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>4\n<strong>\u8f93\u51fa\uff1a</strong>7\n<strong>\u89e3\u91ca\uff1a</strong>7 = 4 * 3 / 2 + 1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>10\n<strong>\u8f93\u51fa\uff1a</strong>12\n<strong>\u89e3\u91ca\uff1a</strong>12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 10000</code></li>\n\t<li><code>-2^31 &lt;= answer &lt;= 2^31 - 1</code>&nbsp; \uff08\u7b54\u6848\u4fdd\u8bc1\u7b26\u5408 32 \u4f4d\u6574\u6570\u3002\uff09</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "1006",
        "link": "clumsy-factorial",
        "title": "Clumsy Factorial",
        "is_locked": "Normal",
        "titleZh": "\u7b28\u9636\u4e58",
        "frequency": "45.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>In a row of dominoes, <code>A[i]</code> and <code>B[i]</code> represent the top and bottom halves of the <code>i</code>-th domino.&nbsp; (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)</p>\r\n\r\n<p>We may rotate the <code>i</code>-th domino, so that <code>A[i]</code> and <code>B[i]</code> swap values.</p>\r\n\r\n<p>Return the minimum number of rotations so that all the values in <code>A</code> are the same, or all the values in <code>B</code>&nbsp;are the same.</p>\r\n\r\n<p>If it cannot be done, return <code>-1</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/08/domino.png\" style=\"height: 161px; width: 200px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-1-1\">[2,1,2,4,2,2]</span>, B = <span id=\"example-input-1-2\">[5,2,6,2,3,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>\r\nThe first figure represents the dominoes as given by A and B: before we do any rotations.\r\nIf we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>A = <span id=\"example-input-2-1\">[3,5,1,2,3]</span>, B = <span id=\"example-input-2-2\">[3,6,3,3,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">-1</span>\r\n<strong>Explanation: </strong>\r\nIn this case, it is not possible to rotate the dominoes to make one row of values equal.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A[i], B[i] &lt;= 6</code></li>\r\n\t<li><code>2 &lt;= A.length == B.length &lt;= 20000</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u5728\u4e00\u6392\u591a\u7c73\u8bfa\u9aa8\u724c\u4e2d\uff0c<code>A[i]</code> \u548c <code>B[i]</code>&nbsp;\u5206\u522b\u4ee3\u8868\u7b2c i \u4e2a\u591a\u7c73\u8bfa\u9aa8\u724c\u7684\u4e0a\u534a\u90e8\u5206\u548c\u4e0b\u534a\u90e8\u5206\u3002\uff08\u4e00\u4e2a\u591a\u7c73\u8bfa\u662f\u4e24\u4e2a\u4ece 1 \u5230 6 \u7684\u6570\u5b57\u540c\u5217\u5e73\u94fa\u5f62\u6210\u7684&nbsp;&mdash;&mdash; \u8be5\u5e73\u94fa\u7684\u6bcf\u4e00\u534a\u4e0a\u90fd\u6709\u4e00\u4e2a\u6570\u5b57\u3002\uff09</p>\n\n<p>\u6211\u4eec\u53ef\u4ee5\u65cb\u8f6c\u7b2c&nbsp;<code>i</code>&nbsp;\u5f20\u591a\u7c73\u8bfa\uff0c\u4f7f\u5f97&nbsp;<code>A[i]</code> \u548c&nbsp;<code>B[i]</code>&nbsp;\u7684\u503c\u4ea4\u6362\u3002</p>\n\n<p>\u8fd4\u56de\u80fd\u4f7f <code>A</code> \u4e2d\u6240\u6709\u503c\u6216\u8005 <code>B</code> \u4e2d\u6240\u6709\u503c\u90fd\u76f8\u540c\u7684\u6700\u5c0f\u65cb\u8f6c\u6b21\u6570\u3002</p>\n\n<p>\u5982\u679c\u65e0\u6cd5\u505a\u5230\uff0c\u8fd4\u56de&nbsp;<code>-1</code>.</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/03/08/domino.png\" style=\"height: 161px; width: 200px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [2,1,2,4,2,2], B = [5,2,6,2,3,2]\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\n\u56fe\u4e00\u8868\u793a\uff1a\u5728\u6211\u4eec\u65cb\u8f6c\u4e4b\u524d\uff0c A \u548c B \u7ed9\u51fa\u7684\u591a\u7c73\u8bfa\u724c\u3002\n\u5982\u679c\u6211\u4eec\u65cb\u8f6c\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u56db\u4e2a\u591a\u7c73\u8bfa\u9aa8\u724c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u4e0a\u9762\u4e00\u884c\u4e2d\u7684\u6bcf\u4e2a\u503c\u90fd\u7b49\u4e8e 2\uff0c\u5982\u56fe\u4e8c\u6240\u793a\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>A = [3,5,1,2,3], B = [3,6,3,3,4]\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e0d\u53ef\u80fd\u65cb\u8f6c\u591a\u7c73\u8bfa\u724c\u4f7f\u4e00\u884c\u7684\u503c\u76f8\u7b49\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A[i], B[i] &lt;= 6</code></li>\n\t<li><code>2 &lt;= A.length == B.length &lt;= 20000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Greedy",
                "link": "greedy",
                "tagZh": "\u8d2a\u5fc3\u7b97\u6cd5"
            },
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "1007",
        "link": "minimum-domino-rotations-for-equal-row",
        "title": "Minimum Domino Rotations For Equal Row",
        "is_locked": "Normal",
        "titleZh": "\u884c\u76f8\u7b49\u7684\u6700\u5c11\u591a\u7c73\u8bfa\u65cb\u8f6c",
        "frequency": "35.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Return the root node of a binary <strong>search</strong> tree that matches the given <code>preorder</code> traversal.</p>\r\n\r\n<p><em>(Recall that a binary search tree&nbsp;is a binary tree where for every <font face=\"monospace\">node</font>, any descendant of <code>node.left</code> has a value <code>&lt;</code>&nbsp;<code>node.val</code>, and any descendant of <code>node.right</code> has a value <code>&gt;</code>&nbsp;<code>node.val</code>.&nbsp; Also recall that a preorder traversal&nbsp;displays the value of the&nbsp;<code>node</code> first, then traverses <code>node.left</code>, then traverses <code>node.right</code>.)</em></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[8,5,1,7,10,12]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[8,5,10,1,7,null,12]\r\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/06/1266.png\" style=\"height: 200px; width: 306px;\" /></span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= preorder.length &lt;= 100</code></li>\r\n\t<li>The values of <code>preorder</code> are distinct.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u8fd4\u56de\u4e0e\u7ed9\u5b9a\u5148\u5e8f\u904d\u5386&nbsp;<code>preorder</code> \u76f8\u5339\u914d\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff08binary <strong>search</strong> tree\uff09\u7684\u6839\u7ed3\u70b9\u3002</p>\n\n<p><em>(\u56de\u60f3\u4e00\u4e0b\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u4e8c\u53c9\u6811\u7684\u4e00\u79cd\uff0c\u5176\u6bcf\u4e2a\u8282\u70b9\u90fd\u6ee1\u8db3\u4ee5\u4e0b\u89c4\u5219\uff0c\u5bf9\u4e8e&nbsp;<code>node.left</code>&nbsp;\u7684\u4efb\u4f55\u540e\u4ee3\uff0c\u503c\u603b <code>&lt;</code> <code>node.val</code>\uff0c\u800c <code>node.right</code> \u7684\u4efb\u4f55\u540e\u4ee3\uff0c\u503c\u603b <code>&gt;</code> <code>node.val</code>\u3002\u6b64\u5916\uff0c\u5148\u5e8f\u904d\u5386\u9996\u5148\u663e\u793a\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u904d\u5386 <code>node.left</code>\uff0c\u63a5\u7740\u904d\u5386 <code>node.right</code>\u3002\uff09</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[8,5,1,7,10,12]\n<strong>\u8f93\u51fa\uff1a</strong>[8,5,10,1,7,null,12]\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/03/08/1266.png\" style=\"height: 200px; width: 306px;\">\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= preorder.length &lt;= 100</code></li>\n\t<li>\u5148\u5e8f&nbsp;<code>preorder</code>&nbsp;\u4e2d\u7684\u503c\u662f\u4e0d\u540c\u7684\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "leetId": "1008",
        "link": "construct-binary-search-tree-from-preorder-traversal",
        "title": "Construct Binary Search Tree from Preorder Traversal",
        "is_locked": "Normal",
        "titleZh": "\u5148\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811",
        "frequency": "70.9%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Every non-negative integer <code>N</code>&nbsp;has a binary representation.&nbsp; For example,&nbsp;<code>5</code> can be represented as <code>&quot;101&quot;</code>&nbsp;in binary, <code>11</code> as <code>&quot;1011&quot;</code>&nbsp;in binary, and so on.&nbsp; Note that except for <code>N = 0</code>, there are no leading zeroes in any&nbsp;binary representation.</p>\r\n\r\n<p>The <em>complement</em>&nbsp;of a binary representation&nbsp;is the number in binary you get when changing every <code>1</code> to a <code>0</code> and <code>0</code> to a <code>1</code>.&nbsp; For example, the complement of <code>&quot;101&quot;</code> in binary is <code>&quot;010&quot;</code> in binary.</p>\r\n\r\n<p>For a given number <code>N</code> in base-10, return the complement of it&#39;s binary representation as a&nbsp;base-10 integer.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>5 is &quot;101&quot; in binary, with complement &quot;010&quot; in binary, which is 2 in base-10.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">7</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">0</span>\r\n<span id=\"example-output-1\"><strong>Explanation: </strong>7 is &quot;111&quot; in binary, with complement &quot;000&quot; in binary, which is 0 in base-10.\r\n</span></pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">5</span>\r\n<strong>Explanation: </strong>10 is &quot;1010&quot; in binary, with complement &quot;0101&quot; in binary, which is 5 in base-10.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= N &lt; 10^9</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u6bcf\u4e2a\u975e\u8d1f\u6574\u6570&nbsp;<code>N</code>&nbsp;\u90fd\u6709\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u3002\u4f8b\u5982\uff0c&nbsp;<code>5</code>&nbsp;\u53ef\u4ee5\u88ab\u8868\u793a\u4e3a\u4e8c\u8fdb\u5236&nbsp;<code>&quot;101&quot;</code>\uff0c<code>11</code> \u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236&nbsp;<code>&quot;1011&quot;</code>&nbsp;\u8868\u793a\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6ce8\u610f\uff0c\u9664&nbsp;<code>N = 0</code>&nbsp;\u5916\uff0c\u4efb\u4f55\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u90fd\u4e0d\u542b\u524d\u5bfc\u96f6\u3002</p>\n\n<p>\u4e8c\u8fdb\u5236\u7684\u53cd\u7801\u8868\u793a\u662f\u5c06\u6bcf\u4e2a&nbsp;<code>1</code>&nbsp;\u6539\u4e3a&nbsp;<code>0</code>&nbsp;\u4e14\u6bcf\u4e2a&nbsp;<code>0</code>&nbsp;\u53d8\u4e3a&nbsp;<code>1</code>\u3002\u4f8b\u5982\uff0c\u4e8c\u8fdb\u5236\u6570&nbsp;<code>&quot;101&quot;</code>&nbsp;\u7684\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a&nbsp;<code>&quot;010&quot;</code>\u3002</p>\n\n<p>\u7ed9\u5b9a\u5341\u8fdb\u5236\u6570&nbsp;<code>N</code>\uff0c\u8fd4\u56de\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u53cd\u7801\u6240\u5bf9\u5e94\u7684\u5341\u8fdb\u5236\u6574\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>5\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>5 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a &quot;101&quot;\uff0c\u5176\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a &quot;010&quot;\uff0c\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u4e2d\u7684 2 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>7\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>7 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a &quot;111&quot;\uff0c\u5176\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a &quot;000&quot;\uff0c\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u4e2d\u7684 0 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>10\n<strong>\u8f93\u51fa\uff1a</strong>5\n<strong>\u89e3\u91ca\uff1a</strong>10 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e3a &quot;1010&quot;\uff0c\u5176\u4e8c\u8fdb\u5236\u53cd\u7801\u4e3a &quot;0101&quot;\uff0c\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u4e2d\u7684 5 \u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= N &lt; 10^9</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "1009",
        "link": "complement-of-base-10-integer",
        "title": "Complement of Base 10 Integer",
        "is_locked": "Normal",
        "titleZh": "\u5341\u8fdb\u5236\u6574\u6570\u7684\u53cd\u7801",
        "frequency": "51.8%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>In a list of songs, the <code>i</code>-th&nbsp;song has a duration of&nbsp;<code>time[i]</code> seconds.&nbsp;</p>\r\n\r\n<p>Return the number of pairs of songs for which their total&nbsp;duration in seconds is divisible by <code>60</code>.&nbsp; Formally, we want the number of&nbsp;indices <code>i &lt; j</code> with <code>(time[i] + time[j]) % 60 == 0</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[30,20,150,100,40]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation: </strong>Three pairs have a total duration divisible by 60:\r\n(time[0] = 30, time[2] = 150): total duration 180\r\n(time[1] = 20, time[3] = 100): total duration 120\r\n(time[1] = 20, time[4] = 40): total duration 60\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[60,60,60]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation: </strong>All three pairs have a total duration of 120, which is divisible by 60.\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= time.length &lt;= 60000</code></li>\r\n\t<li><code>1 &lt;= time[i] &lt;= 500</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u5728\u6b4c\u66f2\u5217\u8868\u4e2d\uff0c\u7b2c <code>i</code> \u9996\u6b4c\u66f2\u7684\u6301\u7eed\u65f6\u95f4\u4e3a <code>time[i]</code> \u79d2\u3002</p>\n\n<p>\u8fd4\u56de\u5176\u603b\u6301\u7eed\u65f6\u95f4\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09\u53ef\u88ab <code>60</code> \u6574\u9664\u7684\u6b4c\u66f2\u5bf9\u7684\u6570\u91cf\u3002\u5f62\u5f0f\u4e0a\uff0c\u6211\u4eec\u5e0c\u671b\u7d22\u5f15\u7684\u6570\u5b57&nbsp;&nbsp;<code>i &lt; j</code> \u4e14\u6709&nbsp;<code>(time[i] + time[j]) % 60 == 0</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[30,20,150,100,40]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u8fd9\u4e09\u5bf9\u7684\u603b\u6301\u7eed\u65f6\u95f4\u53ef\u88ab 60 \u6574\u6570\uff1a\n(time[0] = 30, time[2] = 150): \u603b\u6301\u7eed\u65f6\u95f4 180\n(time[1] = 20, time[3] = 100): \u603b\u6301\u7eed\u65f6\u95f4 120\n(time[1] = 20, time[4] = 40): \u603b\u6301\u7eed\u65f6\u95f4 60\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[60,60,60]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u6240\u6709\u4e09\u5bf9\u7684\u603b\u6301\u7eed\u65f6\u95f4\u90fd\u662f 120\uff0c\u53ef\u4ee5\u88ab 60 \u6574\u6570\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= time.length &lt;= 60000</code></li>\n\t<li><code>1 &lt;= time[i] &lt;= 500</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "1010",
        "link": "pairs-of-songs-with-total-durations-divisible-by-60",
        "title": "Pairs of Songs With Total Durations Divisible by 60",
        "is_locked": "Normal",
        "titleZh": "\u603b\u6301\u7eed\u65f6\u95f4\u53ef\u88ab 60 \u6574\u9664\u7684\u6b4c\u66f2",
        "frequency": "39.2%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>A conveyor belt has packages that must be shipped from one port to another within <code>D</code> days.</p>\r\n\r\n<p>The <code>i</code>-th package on the conveyor belt has a weight of <code>weights[i]</code>.&nbsp; Each day, we load the ship with packages on the conveyor belt (in the order given by <code>weights</code>). We may not load more weight than the maximum weight capacity of the ship.</p>\r\n\r\n<p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within <code>D</code> days.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>weights = <span id=\"example-input-1-1\">[1,2,3,4,5,6,7,8,9,10]</span>, D = <span id=\"example-input-1-2\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">15</span>\r\n<strong>Explanation: </strong>\r\nA ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\r\n1st day: 1, 2, 3, 4, 5\r\n2nd day: 6, 7\r\n3rd day: 8\r\n4th day: 9\r\n5th day: 10\r\n\r\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. \r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>weights = <span id=\"example-input-2-1\">[3,2,2,4,1,4]</span>, D = <span id=\"example-input-2-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">6</span>\r\n<strong>Explanation: </strong>\r\nA ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\r\n1st day: 3, 2\r\n2nd day: 2, 4\r\n3rd day: 1, 4\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>weights = <span id=\"example-input-3-1\">[1,2,3,1,1]</span>, D = 4\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation: </strong>\r\n1st day: 1\r\n2nd day: 2\r\n3rd day: 3\r\n4th day: 1, 1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= D &lt;= weights.length &lt;= 50000</code></li>\r\n\t<li><code>1 &lt;= weights[i] &lt;= 500</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u4f20\u9001\u5e26\u4e0a\u7684\u5305\u88f9\u5fc5\u987b\u5728 D \u5929\u5185\u4ece\u4e00\u4e2a\u6e2f\u53e3\u8fd0\u9001\u5230\u53e6\u4e00\u4e2a\u6e2f\u53e3\u3002</p>\n\n<p>\u4f20\u9001\u5e26\u4e0a\u7684\u7b2c <code>i</code>&nbsp;\u4e2a\u5305\u88f9\u7684\u91cd\u91cf\u4e3a&nbsp;<code>weights[i]</code>\u3002\u6bcf\u4e00\u5929\uff0c\u6211\u4eec\u90fd\u4f1a\u6309\u7ed9\u51fa\u91cd\u91cf\u7684\u987a\u5e8f\u5f80\u4f20\u9001\u5e26\u4e0a\u88c5\u8f7d\u5305\u88f9\u3002\u6211\u4eec\u88c5\u8f7d\u7684\u91cd\u91cf\u4e0d\u4f1a\u8d85\u8fc7\u8239\u7684\u6700\u5927\u8fd0\u8f7d\u91cd\u91cf\u3002</p>\n\n<p>\u8fd4\u56de\u80fd\u5728 <code>D</code> \u5929\u5185\u5c06\u4f20\u9001\u5e26\u4e0a\u7684\u6240\u6709\u5305\u88f9\u9001\u8fbe\u7684\u8239\u7684\u6700\u4f4e\u8fd0\u8f7d\u80fd\u529b\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>weights = [1,2,3,4,5,6,7,8,9,10], D = 5\n<strong>\u8f93\u51fa\uff1a</strong>15\n<strong>\u89e3\u91ca\uff1a</strong>\n\u8239\u8236\u6700\u4f4e\u8f7d\u91cd 15 \u5c31\u80fd\u591f\u5728 5 \u5929\u5185\u9001\u8fbe\u6240\u6709\u5305\u88f9\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u7b2c 1 \u5929\uff1a1, 2, 3, 4, 5\n\u7b2c 2 \u5929\uff1a6, 7\n\u7b2c 3 \u5929\uff1a8\n\u7b2c 4 \u5929\uff1a9\n\u7b2c 5 \u5929\uff1a10\n\n\u8bf7\u6ce8\u610f\uff0c\u8d27\u7269\u5fc5\u987b\u6309\u7167\u7ed9\u5b9a\u7684\u987a\u5e8f\u88c5\u8fd0\uff0c\u56e0\u6b64\u4f7f\u7528\u8f7d\u91cd\u80fd\u529b\u4e3a 14 \u7684\u8239\u8236\u5e76\u5c06\u5305\u88c5\u5206\u6210 (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) \u662f\u4e0d\u5141\u8bb8\u7684\u3002 \n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>weights = [3,2,2,4,1,4], D = 3\n<strong>\u8f93\u51fa\uff1a</strong>6\n<strong>\u89e3\u91ca\uff1a</strong>\n\u8239\u8236\u6700\u4f4e\u8f7d\u91cd 6 \u5c31\u80fd\u591f\u5728 3 \u5929\u5185\u9001\u8fbe\u6240\u6709\u5305\u88f9\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u7b2c 1 \u5929\uff1a3, 2\n\u7b2c 2 \u5929\uff1a2, 4\n\u7b2c 3 \u5929\uff1a1, 4\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>weights = [1,2,3,1,1], D = 4\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u7b2c 1 \u5929\uff1a1\n\u7b2c 2 \u5929\uff1a2\n\u7b2c 3 \u5929\uff1a3\n\u7b2c 4 \u5929\uff1a1, 1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= D &lt;= weights.length &lt;= 50000</code></li>\n\t<li><code>1 &lt;= weights[i] &lt;= 500</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            },
            {
                "tag": "Binary Search",
                "link": "binary-search",
                "tagZh": "\u4e8c\u5206\u67e5\u627e"
            }
        ],
        "leetId": "1011",
        "link": "capacity-to-ship-packages-within-d-days",
        "title": "Capacity To Ship Packages Within D Days",
        "is_locked": "Normal",
        "titleZh": "\u5728 D \u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b",
        "frequency": "41.3%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a positive integer <code>N</code>, return the number of positive integers less than or equal to <code>N</code> that have at least 1 repeated digit.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">20</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n<strong>Explanation: </strong>The only positive number (&lt;= 20) with at least 1 repeated digit is 11.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">100</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">10</span>\r\n<strong>Explanation: </strong>The positive numbers (&lt;= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">1000</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">262</span>\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\r\n</ol>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u6b63\u6574\u6570&nbsp;<code>N</code>\uff0c\u8fd4\u56de\u5c0f\u4e8e\u7b49\u4e8e <code>N</code>&nbsp;\u4e14\u5177\u6709\u81f3\u5c11 1 \u4f4d\u91cd\u590d\u6570\u5b57\u7684\u6b63\u6574\u6570\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>20\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u5177\u6709\u81f3\u5c11 1 \u4f4d\u91cd\u590d\u6570\u5b57\u7684\u6b63\u6570\uff08&lt;= 20\uff09\u53ea\u6709 11 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>100\n<strong>\u8f93\u51fa\uff1a</strong>10\n<strong>\u89e3\u91ca\uff1a</strong>\u5177\u6709\u81f3\u5c11 1 \u4f4d\u91cd\u590d\u6570\u5b57\u7684\u6b63\u6570\uff08&lt;= 100\uff09\u6709 11\uff0c22\uff0c33\uff0c44\uff0c55\uff0c66\uff0c77\uff0c88\uff0c99 \u548c 100 \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>1000\n<strong>\u8f93\u51fa\uff1a</strong>262\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "1012",
        "link": "numbers-with-repeated-digits",
        "title": "Numbers With Repeated Digits",
        "is_locked": "Normal",
        "titleZh": "\u81f3\u5c11\u6709 1 \u4f4d\u91cd\u590d\u7684\u6570\u5b57",
        "frequency": "20.7%",
        "difficulty": "Hard"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of integers, return <code>true</code> if and only if we can partition the array into three <strong>non-empty</strong> parts with equal sums.</p>\r\n\r\n<p>Formally, we can partition the array if we can find indexes <code>i+1 &lt; j</code> with <code>(A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[0,2,1,-6,6,-7,9,1,2,0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true\r\n<strong>Explanation: </strong>0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[0,2,1,-6,6,7,9,-1,2,0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[3,3,6,5,-2,2,5,1,-9,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">true\r\n<strong>Explanation: </strong>3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4</span>\r\n</pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>3 &lt;= A.length &lt;= 50000</code></li>\r\n\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u53ea\u6709\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5212\u5206\u4e3a\u4e09\u4e2a\u548c\u76f8\u7b49\u7684\u975e\u7a7a\u90e8\u5206\u65f6\u624d\u8fd4\u56de&nbsp;<code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>\u5f62\u5f0f\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u627e\u51fa\u7d22\u5f15&nbsp;<code>i+1 &lt; j</code>&nbsp;\u4e14\u6ee1\u8db3&nbsp;<code>(A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])</code>&nbsp;\u5c31\u53ef\u4ee5\u5c06\u6570\u7ec4\u4e09\u7b49\u5206\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u51fa\uff1a</strong>[0,2,1,-6,6,-7,9,1,2,0,1]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,2,1,-6,6,7,9,-1,2,0,1]\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,3,6,5,-2,2,5,1,-9,4]\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>3 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "1013",
        "link": "partition-array-into-three-parts-with-equal-sum",
        "title": "Partition Array Into Three Parts With Equal Sum",
        "is_locked": "Normal",
        "titleZh": "\u5c06\u6570\u7ec4\u5206\u6210\u548c\u76f8\u7b49\u7684\u4e09\u4e2a\u90e8\u5206",
        "frequency": "42.2%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of positive integers, <code>A[i]</code> represents the value of the <code>i</code>-th sightseeing spot, and two&nbsp;sightseeing spots <code>i</code> and <code>j</code>&nbsp;have distance <code>j - i</code>&nbsp;between them.</p>\r\n\r\n<p>The <em>score</em>&nbsp;of a pair (<code>i &lt; j</code>) of sightseeing spots is (<code>A[i] + A[j] + i&nbsp;- j)</code> : the sum of the values of the sightseeing spots, <strong>minus</strong> the distance between them.</p>\r\n\r\n<p>Return the maximum score of a pair of sightseeing spots.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[8,1,5,2,6]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">11\r\n<strong>Explanation:</strong> i = 0, j = 2, </span><code>A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11</code>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= A.length &lt;= 50000</code></li>\r\n\t<li><code>1 &lt;= A[i] &lt;= 1000</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u6b63\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c<code>A[i]</code>&nbsp;\u8868\u793a\u7b2c <code>i</code> \u4e2a\u89c2\u5149\u666f\u70b9\u7684\u8bc4\u5206\uff0c\u5e76\u4e14\u4e24\u4e2a\u666f\u70b9&nbsp;<code>i</code> \u548c&nbsp;<code>j</code>&nbsp;\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e3a&nbsp;<code>j - i</code>\u3002</p>\n\n<p>\u4e00\u5bf9\u666f\u70b9\uff08<code>i &lt; j</code>\uff09\u7ec4\u6210\u7684\u89c2\u5149\u7ec4\u5408\u7684\u5f97\u5206\u4e3a\uff08<code>A[i] + A[j] + i&nbsp;- j</code>\uff09\uff1a\u666f\u70b9\u7684\u8bc4\u5206\u4e4b\u548c<strong>\u51cf\u53bb</strong>\u5b83\u4eec\u4e24\u8005\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002</p>\n\n<p>\u8fd4\u56de\u4e00\u5bf9\u89c2\u5149\u666f\u70b9\u80fd\u53d6\u5f97\u7684\u6700\u9ad8\u5206\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[8,1,5,2,6]\n<strong>\u8f93\u51fa\uff1a</strong>11\n<strong>\u89e3\u91ca\uff1a</strong>i = 0, j = 2, <code>A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11</code>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= A.length &lt;= 50000</code></li>\n\t<li><code>1 &lt;= A[i] &lt;= 1000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "1014",
        "link": "best-sightseeing-pair",
        "title": "Best Sightseeing Pair",
        "is_locked": "Normal",
        "titleZh": "\u6700\u4f73\u89c2\u5149\u7ec4\u5408",
        "frequency": "29.6%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a positive integer <code>K</code>, you need find the <strong>smallest</strong>&nbsp;positive integer <code>N</code> such that <code>N</code> is divisible by <code>K</code>, and <code>N</code> only contains the digit <strong>1</strong>.</p>\r\n\r\n<p>Return the&nbsp;length of <code>N</code>.&nbsp; If there is no such <code>N</code>,&nbsp;return -1.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong> The smallest answer is N = 1, which has length 1.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2\r\n<strong>Output:</strong> -1\r\n<strong>Explanation:</strong> There is no such positive integer N divisible by 2.</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> The smallest answer is N = 111, which has length 3.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= K &lt;= 10^5</code></li>\r\n</ul>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u6b63\u6574\u6570&nbsp;<code>K</code>\uff0c\u4f60\u9700\u8981\u627e\u51fa\u53ef\u4ee5\u88ab K \u6574\u9664\u7684\u3001\u4ec5\u5305\u542b\u6570\u5b57 <strong>1</strong> \u7684\u6700\u5c0f\u6b63\u6574\u6570 N\u3002</p>\n\n<p>\u8fd4\u56de&nbsp;<code>N</code>&nbsp;\u7684\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684&nbsp;<code>N</code>\uff0c\u5c31\u8fd4\u56de <code>-1</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>1\n<strong>\u8f93\u51fa\uff1a</strong>1\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u5c0f\u7684\u7b54\u6848\u662f N = 1\uff0c\u5176\u957f\u5ea6\u4e3a 1\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>2\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\u4e0d\u5b58\u5728\u53ef\u88ab 2 \u6574\u9664\u7684\u6b63\u6574\u6570 N \u3002</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>3\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\u6700\u5c0f\u7684\u7b54\u6848\u662f N = 111\uff0c\u5176\u957f\u5ea6\u4e3a 3\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= K &lt;= 10^5</code></li>\n</ul>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "1015",
        "link": "smallest-integer-divisible-by-k",
        "title": "Smallest Integer Divisible by K",
        "is_locked": "Normal",
        "titleZh": "\u53ef\u88ab K \u6574\u9664\u7684\u6700\u5c0f\u6574\u6570",
        "frequency": "20.4%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a binary string <code>S</code> (a string consisting only of &#39;0&#39; and &#39;1&#39;s) and a positive integer <code>N</code>, return true if and only if for every integer X from 1 to N, the binary representation of X is a substring of S.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-1-1\">&quot;0110&quot;</span>, N = <span id=\"example-input-1-2\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>S = <span id=\"example-input-2-1\">&quot;0110&quot;</span>, N = <span id=\"example-input-2-2\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length &lt;= 1000</code></li>\r\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32&nbsp;<code>S</code>\uff08\u4e00\u4e2a\u4ec5\u7531\u82e5\u5e72&nbsp;&#39;0&#39; \u548c &#39;1&#39; \u6784\u6210\u7684\u5b57\u7b26\u4e32\uff09\u548c\u4e00\u4e2a\u6b63\u6574\u6570&nbsp;<code>N</code>\uff0c\u5982\u679c\u5bf9\u4e8e\u4ece <code>1</code> \u5230 <code>N</code> \u7684\u6bcf\u4e2a\u6574\u6570 <code>X</code>\uff0c\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u90fd\u662f&nbsp;<code>S</code> \u7684\u5b50\u4e32\uff0c\u5c31\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;0110&quot;, N = 3\n<strong>\u8f93\u51fa\uff1a</strong>true\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>S = &quot;0110&quot;, N = 4\n<strong>\u8f93\u51fa\uff1a</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "leetId": "1016",
        "link": "binary-string-with-substrings-representing-1-to-n",
        "title": "Binary String With Substrings Representing 1 To N",
        "is_locked": "Normal",
        "titleZh": "\u5b50\u4e32\u80fd\u8868\u793a\u4ece 1 \u5230 N \u6570\u5b57\u7684\u4e8c\u8fdb\u5236\u4e32",
        "frequency": "54.0%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a number <code>N</code>, return a string consisting of <code>&quot;0&quot;</code>s and <code>&quot;1&quot;</code>s&nbsp;that represents its value in base <code><strong>-2</strong></code>&nbsp;(negative two).</p>\r\n\r\n<p>The returned string must have no leading zeroes, unless the string is <code>&quot;0&quot;</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;110&quot;\r\n<strong>Explantion:</strong> (-2) ^ 2 + (-2) ^ 1 = 2</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;111&quot;\r\n</span><span id=\"example-output-1\"><strong>Explantion:</strong> (-2) ^ 2 + (-2) ^ 1 + (-2) ^ 0</span><span> = 3</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">4</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">&quot;100&quot;\r\n</span><span id=\"example-output-1\"><strong>Explantion:</strong> (-2) ^ 2 = 4</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><span><code>0 &lt;= N &lt;= 10^9</code></span></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u6570\u5b57&nbsp;<code>N</code>\uff0c\u8fd4\u56de\u7531\u82e5\u5e72&nbsp;<code>&quot;0&quot;</code>&nbsp;\u548c&nbsp;<code>&quot;1&quot;</code>\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u4e3a <code>N</code>&nbsp;\u7684<strong>\u8d1f\u4e8c\u8fdb\u5236\uff08<code>base -2</code>\uff09</strong>\u8868\u793a\u3002</p>\n\n<p>\u9664\u975e\u5b57\u7b26\u4e32\u5c31\u662f&nbsp;<code>&quot;0&quot;</code>\uff0c\u5426\u5219\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u4e2d\u4e0d\u80fd\u542b\u6709\u524d\u5bfc\u96f6\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>2\n<strong>\u8f93\u51fa\uff1a</strong>&quot;110&quot;\n<strong>\u89e3\u91ca\uff1a</strong>(-2) ^ 2 + (-2) ^ 1 = 2\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>3\n<strong>\u8f93\u51fa\uff1a</strong>&quot;111&quot;\n<strong>\u89e3\u91ca\uff1a</strong>(-2) ^ 2 + (-2) ^ 1 + (-2) ^ 0 = 3\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>4\n<strong>\u8f93\u51fa\uff1a</strong>&quot;100&quot;\n<strong>\u89e3\u91ca\uff1a</strong>(-2) ^ 2 = 4\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= N &lt;= 10^9</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            }
        ],
        "leetId": "1017",
        "link": "convert-to-base-2",
        "title": "Convert to Base -2",
        "is_locked": "Normal",
        "titleZh": "\u8d1f\u4e8c\u8fdb\u5236\u8f6c\u6362",
        "frequency": "43.4%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of <code>0</code>s and <code>1</code>s, consider <code>N_i</code>: the i-th subarray from <code>A[0]</code> to <code>A[i]</code>&nbsp;interpreted&nbsp;as a binary number (from most-significant-bit to least-significant-bit.)</p>\r\n\r\n<p>Return a list of booleans&nbsp;<code>answer</code>, where <code>answer[i]</code> is <code>true</code>&nbsp;if and only if <code>N_i</code>&nbsp;is divisible by 5.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[0,1,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[true,false,false]</span>\r\n<strong>Explanation: </strong>\r\nThe input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.  Only the first number is divisible by 5, so answer[0] is true.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,1,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[false,false,false]</span>\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[0,1,1,1,1,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[true,false,false,false,true,false]</span>\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[1,1,1,0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">[false,false,false,false,false]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\r\n\t<li><code>A[i]</code> is <code>0</code> or <code>1</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u7531\u82e5\u5e72&nbsp;<code>0</code>&nbsp;\u548c&nbsp;<code>1</code>&nbsp;\u7ec4\u6210\u7684\u6570\u7ec4 <code>A</code>\u3002\u6211\u4eec\u5b9a\u4e49&nbsp;<code>N_i</code>\uff1a\u4ece&nbsp;<code>A[0]</code> \u5230&nbsp;<code>A[i]</code>&nbsp;\u7684\u7b2c <code>i</code>&nbsp;\u4e2a\u5b50\u6570\u7ec4\u88ab\u89e3\u91ca\u4e3a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\uff08\u4ece\u6700\u9ad8\u6709\u6548\u4f4d\u5230\u6700\u4f4e\u6709\u6548\u4f4d\uff09\u3002</p>\n\n<p>\u8fd4\u56de\u5e03\u5c14\u503c\u5217\u8868&nbsp;<code>answer</code>\uff0c\u53ea\u6709\u5f53&nbsp;<code>N_i</code>&nbsp;\u53ef\u4ee5\u88ab <code>5</code>&nbsp;\u6574\u9664\u65f6\uff0c\u7b54\u6848&nbsp;<code>answer[i]</code> \u4e3a&nbsp;<code>true</code>\uff0c\u5426\u5219\u4e3a <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,1,1]\n<strong>\u8f93\u51fa\uff1a</strong>[true,false,false]\n<strong>\u89e3\u91ca\uff1a</strong>\n\u8f93\u5165\u6570\u5b57\u4e3a 0, 01, 011\uff1b\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u4e2d\u7684 0, 1, 3 \u3002\u53ea\u6709\u7b2c\u4e00\u4e2a\u6570\u53ef\u4ee5\u88ab 5 \u6574\u9664\uff0c\u56e0\u6b64 answer[0] \u4e3a\u771f\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,1]\n<strong>\u8f93\u51fa\uff1a</strong>[false,false,false]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[0,1,1,1,1,1]\n<strong>\u8f93\u51fa\uff1a</strong>[true,false,false,false,true,false]\n</pre>\n\n<p><strong>\u793a\u4f8b&nbsp;4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,1,1,0,1]\n<strong>\u8f93\u51fa\uff1a</strong>[false,false,false,false,false]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\n\t<li><code>A[i]</code> \u4e3a&nbsp;<code>0</code>&nbsp;\u6216&nbsp;<code>1</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Array",
                "link": "array",
                "tagZh": "\u6570\u7ec4"
            }
        ],
        "leetId": "1018",
        "link": "binary-prefix-divisible-by-5",
        "title": "Binary Prefix Divisible By 5",
        "is_locked": "Normal",
        "titleZh": "\u53ef\u88ab 5 \u6574\u9664\u7684\u4e8c\u8fdb\u5236\u524d\u7f00",
        "frequency": "33.5%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>We are given a linked list with&nbsp;<code>head</code>&nbsp;as the first node.&nbsp; Let&#39;s number the&nbsp;nodes in the list: <code>node_1, node_2, node_3, ...</code> etc.</p>\r\n\r\n<p>Each node may have a <em>next larger</em> <strong>value</strong>: for <code>node_i</code>,&nbsp;<code>next_larger(node_i)</code>&nbsp;is the <code>node_j.val</code> such that <code>j &gt; i</code>, <code>node_j.val &gt; node_i.val</code>, and <code>j</code> is the smallest possible choice.&nbsp; If such a <code>j</code>&nbsp;does not exist, the next larger value is <code>0</code>.</p>\r\n\r\n<p>Return an array of integers&nbsp;<code>answer</code>, where <code>answer[i] = next_larger(node_{i+1})</code>.</p>\r\n\r\n<p>Note that in the example <strong>inputs</strong>&nbsp;(not outputs) below, arrays such as <code>[2,1,5]</code>&nbsp;represent the serialization of a linked list with a head node value of 2, second node value of 1, and third node value of 5.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[2,1,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[5,5,0]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[2,7,4,3,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[7,0,5,5,0]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,7,5,1,9,2,5,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[7,9,9,9,0,5,0,0]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code><span>1 &lt;= node.val&nbsp;&lt;= 10^9</span></code><span>&nbsp;for each node in the linked list.</span></li>\r\n\t<li>The given list has length in the range <code>[0, 10000]</code>.</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e00\u4e2a\u4ee5\u5934\u8282\u70b9&nbsp;<code>head</code>&nbsp;\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u94fe\u8868\u3002\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u5206\u522b\u7f16\u53f7\u4e3a\uff1a<code>node_1, node_2, node_3, ...</code> \u3002</p>\n\n<p>\u6bcf\u4e2a\u8282\u70b9\u90fd\u53ef\u80fd\u6709\u4e0b\u4e00\u4e2a\u66f4\u5927\u503c\uff08<em>next larger</em> <strong>value</strong>\uff09\uff1a\u5bf9\u4e8e&nbsp;<code>node_i</code>\uff0c\u5982\u679c\u5176&nbsp;<code>next_larger(node_i)</code>&nbsp;\u662f&nbsp;<code>node_j.val</code>\uff0c\u90a3\u4e48\u5c31\u6709&nbsp;<code>j &gt; i</code>&nbsp;\u4e14&nbsp;&nbsp;<code>node_j.val &gt; node_i.val</code>\uff0c\u800c&nbsp;<code>j</code>&nbsp;\u662f\u53ef\u80fd\u7684\u9009\u9879\u4e2d\u6700\u5c0f\u7684\u90a3\u4e2a\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684&nbsp;<code>j</code>\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u66f4\u5927\u503c\u4e3a&nbsp;<code>0</code>&nbsp;\u3002</p>\n\n<p>\u8fd4\u56de\u6574\u6570\u7b54\u6848\u6570\u7ec4&nbsp;<code>answer</code>\uff0c\u5176\u4e2d&nbsp;<code>answer[i] = next_larger(node_{i+1})</code>&nbsp;\u3002</p>\n\n<p><strong><em>\u6ce8\u610f\uff1a</em></strong>\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u8bf8\u5982 <code>[2,1,5]</code> \u8fd9\u6837\u7684<strong>\u8f93\u5165</strong>\uff08\u4e0d\u662f\u8f93\u51fa\uff09\u662f\u94fe\u8868\u7684\u5e8f\u5217\u5316\u8868\u793a\uff0c\u5176\u5934\u8282\u70b9\u7684\u503c\u4e3a&nbsp;2\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u503c\u4e3a 1\uff0c\u7b2c\u4e09\u4e2a\u8282\u70b9\u503c\u4e3a&nbsp;5 \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,1,5]\n<strong>\u8f93\u51fa\uff1a</strong>[5,5,0]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[2,7,4,3,5]\n<strong>\u8f93\u51fa\uff1a</strong>[7,0,5,5,0]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,7,5,1,9,2,5,1]\n<strong>\u8f93\u51fa\uff1a</strong>[7,9,9,9,0,5,0,0]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u5bf9\u4e8e\u94fe\u8868\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c<code>1 &lt;= node.val&nbsp;&lt;= 10^9</code></li>\n\t<li>\u7ed9\u5b9a\u5217\u8868\u7684\u957f\u5ea6\u5728 <code>[0, 10000]</code>&nbsp;\u8303\u56f4\u5185</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            },
            {
                "tag": "Linked List",
                "link": "linked-list",
                "tagZh": "\u94fe\u8868"
            }
        ],
        "leetId": "1019",
        "link": "next-greater-node-in-linked-list",
        "title": "Next Greater Node In Linked List",
        "is_locked": "Normal",
        "titleZh": "\u94fe\u8868\u4e2d\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u8282\u70b9",
        "frequency": "36.1%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given a 2D array <code>A</code>, each cell is 0 (representing sea) or 1 (representing land)</p>\r\n\r\n<p>A move consists of walking from one land square 4-directionally to another land square, or off the boundary of the grid.</p>\r\n\r\n<p>Return the number of land squares in the grid for which we <strong>cannot</strong> walk off the boundary of the grid in any number of moves.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation: </strong>\r\nThere are three 1s that are enclosed by 0s, and one 1 that isn&#39;t enclosed because its on the boundary.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">0</span>\r\n<strong>Explanation: </strong>\r\nAll 1s are either on the boundary or can reach the boundary.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 500</code></li>\r\n\t<li><code>1 &lt;= A[i].length &lt;= 500</code></li>\r\n\t<li><code>0 &lt;= A[i][j] &lt;= 1</code></li>\r\n\t<li>All rows have the same size.</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u6bcf\u4e2a\u5355\u5143\u683c\u4e3a 0\uff08\u4ee3\u8868\u6d77\uff09\u6216 1\uff08\u4ee3\u8868\u9646\u5730\uff09\u3002</p>\n\n<p>\u79fb\u52a8\u662f\u6307\u5728\u9646\u5730\u4e0a\u4ece\u4e00\u4e2a\u5730\u65b9\u8d70\u5230\u53e6\u4e00\u4e2a\u5730\u65b9\uff08\u671d\u56db\u4e2a\u65b9\u5411\u4e4b\u4e00\uff09\u6216\u79bb\u5f00\u7f51\u683c\u7684\u8fb9\u754c\u3002</p>\n\n<p>\u8fd4\u56de\u7f51\u683c\u4e2d<strong>\u65e0\u6cd5</strong>\u5728\u4efb\u610f\u6b21\u6570\u7684\u79fb\u52a8\u4e2d\u79bb\u5f00\u7f51\u683c\u8fb9\u754c\u7684\u9646\u5730\u5355\u5143\u683c\u7684\u6570\u91cf\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a </strong>\n\u6709\u4e09\u4e2a 1 \u88ab 0 \u5305\u56f4\u3002\u4e00\u4e2a 1 \u6ca1\u6709\u88ab\u5305\u56f4\uff0c\u56e0\u4e3a\u5b83\u5728\u8fb9\u754c\u4e0a\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\n<strong>\u8f93\u51fa\uff1a</strong>0\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6240\u6709 1 \u90fd\u5728\u8fb9\u754c\u4e0a\u6216\u53ef\u4ee5\u5230\u8fbe\u8fb9\u754c\u3002</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= A.length &lt;= 500</code></li>\n\t<li><code>1 &lt;= A[i].length &lt;= 500</code></li>\n\t<li><code>0 &lt;= A[i][j] &lt;= 1</code></li>\n\t<li>\u6240\u6709\u884c\u7684\u5927\u5c0f\u90fd\u76f8\u540c</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "leetId": "1020",
        "link": "number-of-enclaves",
        "title": "Number of Enclaves",
        "is_locked": "Normal",
        "titleZh": "\u98de\u5730\u7684\u6570\u91cf",
        "frequency": "42.0%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>A valid parentheses string is either empty <code>(&quot;&quot;)</code>, <code>&quot;(&quot; + A + &quot;)&quot;</code>, or <code>A + B</code>, where <code>A</code> and <code>B</code> are valid parentheses strings, and <code>+</code> represents string concatenation.&nbsp; For example, <code>&quot;&quot;</code>, <code>&quot;()&quot;</code>, <code>&quot;(())()&quot;</code>, and <code>&quot;(()(()))&quot;</code> are all valid parentheses strings.</p>\r\n\r\n<p>A valid parentheses string <code>S</code> is <strong>primitive</strong> if it is nonempty, and there does not exist a way to split it into <code>S = A+B</code>, with <code>A</code> and <code>B</code> nonempty valid parentheses strings.</p>\r\n\r\n<p>Given a valid parentheses string <code>S</code>, consider its primitive decomposition: <code>S = P_1 + P_2 + ... + P_k</code>, where <code>P_i</code> are primitive valid parentheses strings.</p>\r\n\r\n<p>Return <code>S</code> after removing the outermost parentheses of every primitive string in the primitive decomposition of <code>S</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;(()())(())&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;()()()&quot;</span>\r\n<strong>Explanation: </strong>\r\nThe input string is &quot;(()())(())&quot;, with primitive decomposition &quot;(()())&quot; + &quot;(())&quot;.\r\nAfter removing outer parentheses of each part, this is &quot;()()&quot; + &quot;()&quot; = &quot;()()()&quot;.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;(()())(())(()(()))&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;()()()()(())&quot;</span>\r\n<strong>Explanation: </strong>\r\nThe input string is &quot;(()())(())(()(()))&quot;, with primitive decomposition &quot;(()())&quot; + &quot;(())&quot; + &quot;(()(()))&quot;.\r\nAfter removing outer parentheses of each part, this is &quot;()()&quot; + &quot;()&quot; + &quot;()(())&quot; = &quot;()()()()(())&quot;.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;()()&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">&quot;&quot;</span>\r\n<strong>Explanation: </strong>\r\nThe input string is &quot;()()&quot;, with primitive decomposition &quot;()&quot; + &quot;()&quot;.\r\nAfter removing outer parentheses of each part, this is &quot;&quot; + &quot;&quot; = &quot;&quot;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>S.length &lt;= 10000</code></li>\r\n\t<li><code>S[i]</code> is <code>&quot;(&quot;</code> or <code>&quot;)&quot;</code></li>\r\n\t<li><code>S</code> is a valid parentheses string</li>\r\n</ol>\r\n\r\n<div>\r\n<div>\r\n<div>&nbsp;</div>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32\u4e3a\u7a7a&nbsp;<code>(&quot;&quot;)</code>\u3001<code>&quot;(&quot; + A + &quot;)&quot;</code>&nbsp;\u6216&nbsp;<code>A + B</code>\uff0c\u5176\u4e2d&nbsp;<code>A</code> \u548c&nbsp;<code>B</code>&nbsp;\u90fd\u662f\u6709\u6548\u7684\u62ec\u53f7\u5b57\u7b26\u4e32\uff0c<code>+</code>&nbsp;\u4ee3\u8868\u5b57\u7b26\u4e32\u7684\u8fde\u63a5\u3002\u4f8b\u5982\uff0c<code>&quot;&quot;</code>\uff0c<code>&quot;()&quot;</code>\uff0c<code>&quot;(())()&quot;</code>&nbsp;\u548c&nbsp;<code>&quot;(()(()))&quot;</code>&nbsp;\u90fd\u662f\u6709\u6548\u7684\u62ec\u53f7\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u5982\u679c\u6709\u6548\u5b57\u7b26\u4e32&nbsp;<code>S</code>&nbsp;\u975e\u7a7a\uff0c\u4e14\u4e0d\u5b58\u5728\u5c06\u5176\u62c6\u5206\u4e3a&nbsp;<code>S = A+B</code>&nbsp;\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u79f0\u5176\u4e3a<strong>\u539f\u8bed\uff08primitive\uff09</strong>\uff0c\u5176\u4e2d&nbsp;<code>A</code> \u548c&nbsp;<code>B</code>&nbsp;\u90fd\u662f\u975e\u7a7a\u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32\u3002</p>\n\n<p>\u7ed9\u51fa\u4e00\u4e2a\u975e\u7a7a\u6709\u6548\u5b57\u7b26\u4e32&nbsp;<code>S</code>\uff0c\u8003\u8651\u5c06\u5176\u8fdb\u884c\u539f\u8bed\u5316\u5206\u89e3\uff0c\u4f7f\u5f97\uff1a<code>S = P_1 + P_2 + ... + P_k</code>\uff0c\u5176\u4e2d&nbsp;<code>P_i</code>&nbsp;\u662f\u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32\u539f\u8bed\u3002</p>\n\n<p>\u5bf9&nbsp;<code>S</code>&nbsp;\u8fdb\u884c\u539f\u8bed\u5316\u5206\u89e3\uff0c\u5220\u9664\u5206\u89e3\u4e2d\u6bcf\u4e2a\u539f\u8bed\u5b57\u7b26\u4e32\u7684\u6700\u5916\u5c42\u62ec\u53f7\uff0c\u8fd4\u56de <code>S</code>&nbsp;\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;(()())(())&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;()()()&quot;\n<strong>\u89e3\u91ca\uff1a\n</strong>\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a &quot;(()())(())&quot;\uff0c\u539f\u8bed\u5316\u5206\u89e3\u5f97\u5230 &quot;(()())&quot; + &quot;(())&quot;\uff0c\n\u5220\u9664\u6bcf\u4e2a\u90e8\u5206\u4e2d\u7684\u6700\u5916\u5c42\u62ec\u53f7\u540e\u5f97\u5230 &quot;()()&quot; + &quot;()&quot; = &quot;()()()&quot;\u3002</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;(()())(())(()(()))&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;()()()()(())&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\n\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a &quot;(()())(())(()(()))&quot;\uff0c\u539f\u8bed\u5316\u5206\u89e3\u5f97\u5230 &quot;(()())&quot; + &quot;(())&quot; + &quot;(()(()))&quot;\uff0c\n\u5220\u9664\u6bcf\u9694\u90e8\u5206\u4e2d\u7684\u6700\u5916\u5c42\u62ec\u53f7\u540e\u5f97\u5230 &quot;()()&quot; + &quot;()&quot; + &quot;()(())&quot; = &quot;()()()()(())&quot;\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;()()&quot;\n<strong>\u8f93\u51fa\uff1a</strong>&quot;&quot;\n<strong>\u89e3\u91ca\uff1a</strong>\n\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a &quot;()()&quot;\uff0c\u539f\u8bed\u5316\u5206\u89e3\u5f97\u5230 &quot;()&quot; + &quot;()&quot;\uff0c\n\u5220\u9664\u6bcf\u4e2a\u90e8\u5206\u4e2d\u7684\u6700\u5916\u5c42\u62ec\u53f7\u540e\u5f97\u5230 &quot;&quot; + &quot;&quot; = &quot;&quot;\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>S.length &lt;= 10000</code></li>\n\t<li><code>S[i]</code> \u4e3a&nbsp;<code>&quot;(&quot;</code> \u6216&nbsp;<code>&quot;)&quot;</code></li>\n\t<li><code>S</code> \u662f\u4e00\u4e2a\u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Stack",
                "link": "stack",
                "tagZh": "\u6808"
            }
        ],
        "leetId": "1021",
        "link": "remove-outermost-parentheses",
        "title": "Remove Outermost Parentheses",
        "is_locked": "Normal",
        "titleZh": "\u5220\u9664\u6700\u5916\u5c42\u7684\u62ec\u53f7",
        "frequency": "72.8%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given a binary tree, each node has value <code>0</code>&nbsp;or <code>1</code>.&nbsp; Each root-to-leaf path represents a binary number starting with the most significant bit.&nbsp; For example, if the path is <code>0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1</code>, then this could represent <code>01101</code> in binary, which is <code>13</code>.</p>\r\n\r\n<p>For all leaves in the tree, consider the numbers represented by the path&nbsp;from the root to that leaf.</p>\r\n\r\n<p>Return the sum of these numbers.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><span id=\"example-output-1\"><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/04/sum-of-root-to-leaf-binary-numbers.png\" style=\"width: 304px; height: 200px;\" /></span></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,0,1,0,1,0,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">22</span>\r\n<strong>Explanation: </strong>(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the tree is between <code>1</code> and <code>1000</code>.</li>\r\n\t<li>node.val is <code>0</code> or <code>1</code>.</li>\r\n\t<li>The answer will not exceed <code>2^31 - 1</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u51fa\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5176\u4e0a\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u90fd\u662f&nbsp;<code>0</code>&nbsp;\u6216&nbsp;<code>1</code>&nbsp;\u3002\u6bcf\u4e00\u6761\u4ece\u6839\u5230\u53f6\u7684\u8def\u5f84\u90fd\u4ee3\u8868\u4e00\u4e2a\u4ece\u6700\u9ad8\u6709\u6548\u4f4d\u5f00\u59cb\u7684\u4e8c\u8fdb\u5236\u6570\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8def\u5f84\u4e3a&nbsp;<code>0 -&gt; 1 -&gt; 1 -&gt; 0 -&gt; 1</code>\uff0c\u90a3\u4e48\u5b83\u8868\u793a\u4e8c\u8fdb\u5236\u6570&nbsp;<code>01101</code>\uff0c\u4e5f\u5c31\u662f&nbsp;<code>13</code>&nbsp;\u3002</p>\n\n<p>\u5bf9\u6811\u4e0a\u7684\u6bcf\u4e00\u7247\u53f6\u5b50\uff0c\u6211\u4eec\u90fd\u8981\u627e\u51fa\u4ece\u6839\u5230\u8be5\u53f6\u5b50\u7684\u8def\u5f84\u6240\u8868\u793a\u7684\u6570\u5b57\u3002</p>\n\n<p>\u4ee5<strong>&nbsp;<code>10^9 + 7</code></strong>&nbsp;\u4e3a<strong>\u6a21</strong>\uff0c\u8fd4\u56de\u8fd9\u4e9b\u6570\u5b57\u4e4b\u548c\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/05/sum-of-root-to-leaf-binary-numbers.png\" style=\"height: 200px; width: 304px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[1,0,1,0,1,0,1]\n<strong>\u8f93\u51fa\uff1a</strong>22\n<strong>\u89e3\u91ca\uff1a</strong>(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6811\u4e2d\u7684\u7ed3\u70b9\u6570\u4ecb\u4e8e <code>1</code> \u548c <code>1000</code> \u4e4b\u95f4\u3002</li>\n\t<li>node.val \u4e3a&nbsp;<code>0</code> \u6216&nbsp;<code>1</code>&nbsp;\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            }
        ],
        "leetId": "1022",
        "link": "sum-of-root-to-leaf-binary-numbers",
        "title": "Sum of Root To Leaf Binary Numbers",
        "is_locked": "Normal",
        "titleZh": "\u4ece\u6839\u5230\u53f6\u7684\u4e8c\u8fdb\u5236\u6570\u4e4b\u548c",
        "frequency": "24.0%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>A query word matches a given <code>pattern</code> if we can insert <strong>lowercase</strong> letters to the pattern word so that it equals the <code>query</code>. (We may insert each character at any position, and may insert 0 characters.)</p>\r\n\r\n<p>Given a list of <code>queries</code>, and a <code>pattern</code>, return an <code>answer</code> list of booleans, where <code>answer[i]</code> is true if and only if <code>queries[i]</code> matches the <code>pattern</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>queries = <span id=\"example-input-1-1\">[&quot;FooBar&quot;,&quot;FooBarTest&quot;,&quot;FootBall&quot;,&quot;FrameBuffer&quot;,&quot;ForceFeedBack&quot;]</span>, pattern = <span id=\"example-input-1-2\">&quot;FB&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[true,false,true,true,false]</span>\r\n<strong>Explanation: </strong>\r\n&quot;FooBar&quot; can be generated like this &quot;F&quot; + &quot;oo&quot; + &quot;B&quot; + &quot;ar&quot;.\r\n&quot;FootBall&quot; can be generated like this &quot;F&quot; + &quot;oot&quot; + &quot;B&quot; + &quot;all&quot;.\r\n&quot;FrameBuffer&quot; can be generated like this &quot;F&quot; + &quot;rame&quot; + &quot;B&quot; + &quot;uffer&quot;.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>queries = <span id=\"example-input-2-1\">[&quot;FooBar&quot;,&quot;FooBarTest&quot;,&quot;FootBall&quot;,&quot;FrameBuffer&quot;,&quot;ForceFeedBack&quot;]</span>, pattern = <span id=\"example-input-2-2\">&quot;FoBa&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[true,false,true,false,false]</span>\r\n<strong>Explanation: </strong>\r\n&quot;FooBar&quot; can be generated like this &quot;Fo&quot; + &quot;o&quot; + &quot;Ba&quot; + &quot;r&quot;.\r\n&quot;FootBall&quot; can be generated like this &quot;Fo&quot; + &quot;ot&quot; + &quot;Ba&quot; + &quot;ll&quot;.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>queries = <span id=\"example-input-3-1\">[&quot;FooBar&quot;,&quot;FooBarTest&quot;,&quot;FootBall&quot;,&quot;FrameBuffer&quot;,&quot;ForceFeedBack&quot;]</span>, pattern = <span id=\"example-input-3-2\">&quot;FoBaT&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[false,true,false,false,false]</span>\r\n<strong>Explanation: </strong>\r\n&quot;FooBarTest&quot; can be generated like this &quot;Fo&quot; + &quot;o&quot; + &quot;Ba&quot; + &quot;r&quot; + &quot;T&quot; + &quot;est&quot;.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= queries.length &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= queries[i].length &lt;= 100</code></li>\r\n\t<li><code>1 &lt;= pattern.length &lt;= 100</code></li>\r\n\t<li>All strings consists only of lower and upper case English letters.</li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5c06<strong>\u5c0f\u5199\u5b57\u6bcd</strong>\u63d2\u5165\u6a21\u5f0f\u4e32&nbsp;<code>pattern</code>&nbsp;\u5f97\u5230\u5f85\u67e5\u8be2\u9879&nbsp;<code>query</code>\uff0c\u90a3\u4e48\u5f85\u67e5\u8be2\u9879\u4e0e\u7ed9\u5b9a\u6a21\u5f0f\u4e32\u5339\u914d\u3002\uff08\u6211\u4eec\u53ef\u4ee5\u5728\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u6bcf\u4e2a\u5b57\u7b26\uff0c\u4e5f\u53ef\u4ee5\u63d2\u5165 0 \u4e2a\u5b57\u7b26\u3002\uff09</p>\n\n<p>\u7ed9\u5b9a\u5f85\u67e5\u8be2\u5217\u8868&nbsp;<code>queries</code>\uff0c\u548c\u6a21\u5f0f\u4e32&nbsp;<code>pattern</code>\uff0c\u8fd4\u56de\u7531\u5e03\u5c14\u503c\u7ec4\u6210\u7684\u7b54\u6848\u5217\u8868&nbsp;<code>answer</code>\u3002\u53ea\u6709\u5728\u5f85\u67e5\u9879&nbsp;<code>queries[i]</code> \u4e0e\u6a21\u5f0f\u4e32&nbsp;<code>pattern</code> \u5339\u914d\u65f6\uff0c&nbsp;<code>answer[i]</code>&nbsp;\u624d\u4e3a <code>true</code>\uff0c\u5426\u5219\u4e3a <code>false</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>queries = [&quot;FooBar&quot;,&quot;FooBarTest&quot;,&quot;FootBall&quot;,&quot;FrameBuffer&quot;,&quot;ForceFeedBack&quot;], pattern = &quot;FB&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[true,false,true,true,false]\n<strong>\u793a\u4f8b\uff1a</strong>\n&quot;FooBar&quot; \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a&quot;F&quot; + &quot;oo&quot; + &quot;B&quot; + &quot;ar&quot;\u3002\n&quot;FootBall&quot; \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a&quot;F&quot; + &quot;oot&quot; + &quot;B&quot; + &quot;all&quot;.\n&quot;FrameBuffer&quot; \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a&quot;F&quot; + &quot;rame&quot; + &quot;B&quot; + &quot;uffer&quot;.</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>queries = [&quot;FooBar&quot;,&quot;FooBarTest&quot;,&quot;FootBall&quot;,&quot;FrameBuffer&quot;,&quot;ForceFeedBack&quot;], pattern = &quot;FoBa&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[true,false,true,false,false]\n<strong>\u89e3\u91ca\uff1a</strong>\n&quot;FooBar&quot; \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a&quot;Fo&quot; + &quot;o&quot; + &quot;Ba&quot; + &quot;r&quot;.\n&quot;FootBall&quot; \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a&quot;Fo&quot; + &quot;ot&quot; + &quot;Ba&quot; + &quot;ll&quot;.\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u51fa\uff1a</strong>queries = [&quot;FooBar&quot;,&quot;FooBarTest&quot;,&quot;FootBall&quot;,&quot;FrameBuffer&quot;,&quot;ForceFeedBack&quot;], pattern = &quot;FoBaT&quot;\n<strong>\u8f93\u5165\uff1a</strong>[false,true,false,false,false]\n<strong>\u89e3\u91ca\uff1a </strong>\n&quot;FooBarTest&quot; \u53ef\u4ee5\u8fd9\u6837\u751f\u6210\uff1a&quot;Fo&quot; + &quot;o&quot; + &quot;Ba&quot; + &quot;r&quot; + &quot;T&quot; + &quot;est&quot;.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= queries.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= queries[i].length &lt;= 100</code></li>\n\t<li><code>1 &lt;= pattern.length &lt;= 100</code></li>\n\t<li>\u6240\u6709\u5b57\u7b26\u4e32\u90fd\u4ec5\u7531\u5927\u5199\u548c\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Trie",
                "link": "trie",
                "tagZh": "\u5b57\u5178\u6811"
            },
            {
                "tag": "String",
                "link": "string",
                "tagZh": "\u5b57\u7b26\u4e32"
            }
        ],
        "leetId": "1023",
        "link": "camelcase-matching",
        "title": "Camelcase Matching",
        "is_locked": "Normal",
        "titleZh": "\u9a7c\u5cf0\u5f0f\u5339\u914d",
        "frequency": "47.7%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>You are given a series of video clips from a sporting event that lasted <code>T</code> seconds.&nbsp;&nbsp;These video clips can be overlapping with each other and have varied lengths.</p>\r\n\r\n<p>Each video clip <code>clips[i]</code>&nbsp;is an interval: it starts at time <code>clips[i][0]</code> and ends at time <code>clips[i][1]</code>.&nbsp; We can cut these clips into segments freely: for example, a clip <code>[0, 7]</code> can be cut into segments&nbsp;<code>[0, 1] +&nbsp;[1, 3] + [3, 7]</code>.</p>\r\n\r\n<p>Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event (<code>[0, T]</code>).&nbsp; If the task is impossible, return <code>-1</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>clips = <span id=\"example-input-1-1\">[[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]]</span>, T = <span id=\"example-input-1-2\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">3</span>\r\n<strong>Explanation: </strong>\r\nWe take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\r\nThen, we can reconstruct the sporting event as follows:\r\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\r\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>clips = <span id=\"example-input-2-1\">[[0,1],[1,2]]</span>, T = <span id=\"example-input-2-2\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">-1</span>\r\n<strong>Explanation: </strong>\r\nWe can&#39;t cover [0,5] with only [0,1] and [0,2].\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>clips = <span id=\"example-input-3-1\">[[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]]</span>, T = <span id=\"example-input-3-2\">9</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">3</span>\r\n<strong>Explanation: </strong>\r\nWe can take clips [0,4], [4,7], and [6,9].\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>clips = <span id=\"example-input-4-1\">[[0,4],[2,8]]</span>, T = <span id=\"example-input-4-2\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">2</span>\r\n<strong>Explanation: </strong>\r\nNotice you can have extra video after the event ends.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= clips.length &lt;= 100</code></li>\r\n\t<li><code>0 &lt;= clips[i][0], clips[i][1] &lt;= 100</code></li>\r\n\t<li><code>0 &lt;= T &lt;= 100</code></li>\r\n</ol>",
        "questionDescriptionZh": "<p>\u4f60\u5c06\u4f1a\u83b7\u5f97\u4e00\u7cfb\u5217\u89c6\u9891\u7247\u6bb5\uff0c\u8fd9\u4e9b\u7247\u6bb5\u6765\u81ea\u4e8e\u4e00\u9879\u6301\u7eed\u65f6\u957f\u4e3a&nbsp;<code>T</code>&nbsp;\u79d2\u7684\u4f53\u80b2\u8d5b\u4e8b\u3002\u8fd9\u4e9b\u7247\u6bb5\u53ef\u80fd\u6709\u6240\u91cd\u53e0\uff0c\u4e5f\u53ef\u80fd\u957f\u5ea6\u4e0d\u4e00\u3002</p>\n\n<p>\u89c6\u9891\u7247\u6bb5&nbsp;<code>clips[i]</code>&nbsp;\u90fd\u7528\u533a\u95f4\u8fdb\u884c\u8868\u793a\uff1a\u5f00\u59cb\u4e8e&nbsp;<code>clips[i][0]</code>&nbsp;\u5e76\u4e8e&nbsp;<code>clips[i][1]</code>&nbsp;\u7ed3\u675f\u3002\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5bf9\u8fd9\u4e9b\u7247\u6bb5\u81ea\u7531\u5730\u518d\u526a\u8f91\uff0c\u4f8b\u5982\u7247\u6bb5&nbsp;<code>[0, 7]</code>&nbsp;\u53ef\u4ee5\u526a\u5207\u6210&nbsp;<code>[0, 1] +&nbsp;[1, 3] + [3, 7]</code>&nbsp;\u4e09\u90e8\u5206\u3002</p>\n\n<p>\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e9b\u7247\u6bb5\u8fdb\u884c\u518d\u526a\u8f91\uff0c\u5e76\u5c06\u526a\u8f91\u540e\u7684\u5185\u5bb9\u62fc\u63a5\u6210\u8986\u76d6\u6574\u4e2a\u8fd0\u52a8\u8fc7\u7a0b\u7684\u7247\u6bb5\uff08<code>[0, T]</code>\uff09\u3002\u8fd4\u56de\u6240\u9700\u7247\u6bb5\u7684\u6700\u5c0f\u6570\u76ee\uff0c\u5982\u679c\u65e0\u6cd5\u5b8c\u6210\u8be5\u4efb\u52a1\uff0c\u5219\u8fd4\u56de&nbsp;<code>-1</code> \u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6211\u4eec\u9009\u4e2d [0,2], [8,10], [1,9] \u8fd9\u4e09\u4e2a\u7247\u6bb5\u3002\n\u7136\u540e\uff0c\u6309\u4e0b\u9762\u7684\u65b9\u6848\u91cd\u5236\u6bd4\u8d5b\u7247\u6bb5\uff1a\n\u5c06 [1,9] \u518d\u526a\u8f91\u4e3a [1,2] + [2,8] + [8,9] \u3002\n\u73b0\u5728\u6211\u4eec\u624b\u4e0a\u6709 [0,2] + [2,8] + [8,10]\uff0c\u800c\u8fd9\u4e9b\u6db5\u76d6\u4e86\u6574\u573a\u6bd4\u8d5b [0, 10]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>clips = [[0,1],[1,2]], T = 5\n<strong>\u8f93\u51fa\uff1a</strong>-1\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6211\u4eec\u65e0\u6cd5\u53ea\u7528 [0,1] \u548c [0,2] \u8986\u76d6 [0,5] \u7684\u6574\u4e2a\u8fc7\u7a0b\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a </strong>\n\u6211\u4eec\u9009\u53d6\u7247\u6bb5 [0,4], [4,7] \u548c [6,9] \u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 4\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>clips = [[0,4],[2,8]], T = 5\n<strong>\u8f93\u51fa\uff1a</strong>2\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6ce8\u610f\uff0c\u4f60\u53ef\u80fd\u5f55\u5236\u8d85\u8fc7\u6bd4\u8d5b\u7ed3\u675f\u65f6\u95f4\u7684\u89c6\u9891\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= clips.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= clips[i][0], clips[i][1] &lt;= 100</code></li>\n\t<li><code>0 &lt;= T &lt;= 100</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "1024",
        "link": "video-stitching",
        "title": "Video Stitching",
        "is_locked": "Normal",
        "titleZh": "\u89c6\u9891\u62fc\u63a5",
        "frequency": "41.9%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Alice and Bob take turns playing a game, with Alice starting first.</p>\r\n\r\n<p>Initially, there is a number <code>N</code>&nbsp;on the chalkboard.&nbsp; On each player&#39;s turn, that player makes a <em>move</em>&nbsp;consisting of:</p>\r\n\r\n<ul>\r\n\t<li>Choosing&nbsp;any <code>x</code> with <code>0 &lt; x &lt; N</code> and <code>N % x == 0</code>.</li>\r\n\t<li>Replacing&nbsp;the number&nbsp;<code>N</code>&nbsp;on the chalkboard with <code>N - x</code>.</li>\r\n</ul>\r\n\r\n<p>Also, if a player cannot make a move, they lose the game.</p>\r\n\r\n<p>Return <code>True</code> if and only if Alice wins the game, assuming both players play optimally.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation:</strong> Alice chooses 1, and Bob has no more moves.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">3</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n<strong>Explanation:</strong> Alice chooses 1, Bob chooses 1, and Alice has no more moves.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= N &lt;= 1000</code></li>\r\n</ol>\r\n</div>\r\n</div>",
        "questionDescriptionZh": "<p>\u7231\u4e3d\u4e1d\u548c\u9c8d\u52c3\u4e00\u8d77\u73a9\u6e38\u620f\uff0c\u4ed6\u4eec\u8f6e\u6d41\u884c\u52a8\u3002\u7231\u4e3d\u4e1d\u5148\u624b\u5f00\u5c40\u3002</p>\n\n<p>\u6700\u521d\uff0c\u9ed1\u677f\u4e0a\u6709\u4e00\u4e2a\u6570\u5b57&nbsp;<code>N</code>&nbsp;\u3002\u5728\u6bcf\u4e2a\u73a9\u5bb6\u7684\u56de\u5408\uff0c\u73a9\u5bb6\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p>\n\n<ul>\n\t<li>\u9009\u51fa\u4efb\u4e00&nbsp;<code>x</code>\uff0c\u6ee1\u8db3&nbsp;<code>0 &lt; x &lt; N</code> \u4e14&nbsp;<code>N % x == 0</code>&nbsp;\u3002</li>\n\t<li>\u7528 <code>N - x</code>&nbsp;\u66ff\u6362\u9ed1\u677f\u4e0a\u7684\u6570\u5b57 <code>N</code> \u3002</li>\n</ul>\n\n<p>\u5982\u679c\u73a9\u5bb6\u65e0\u6cd5\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u5c31\u4f1a\u8f93\u6389\u6e38\u620f\u3002</p>\n\n<p>\u53ea\u6709\u5728\u7231\u4e3d\u4e1d\u5728\u6e38\u620f\u4e2d\u53d6\u5f97\u80dc\u5229\u65f6\u624d\u8fd4\u56de&nbsp;<code>True</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002\u5047\u8bbe\u4e24\u4e2a\u73a9\u5bb6\u90fd\u4ee5\u6700\u4f73\u72b6\u6001\u53c2\u4e0e\u6e38\u620f\u3002</p>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>2\n<strong>\u8f93\u51fa\uff1a</strong>true\n<strong>\u89e3\u91ca\uff1a</strong>\u7231\u4e3d\u4e1d\u9009\u62e9 1\uff0c\u9c8d\u52c3\u65e0\u6cd5\u8fdb\u884c\u64cd\u4f5c\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>3\n<strong>\u8f93\u51fa\uff1a</strong>false\n<strong>\u89e3\u91ca\uff1a</strong>\u7231\u4e3d\u4e1d\u9009\u62e9 1\uff0c\u9c8d\u52c3\u4e5f\u9009\u62e9 1\uff0c\u7136\u540e\u7231\u4e3d\u4e1d\u65e0\u6cd5\u8fdb\u884c\u64cd\u4f5c\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= N &lt;= 1000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Math",
                "link": "math",
                "tagZh": "\u6570\u5b66"
            },
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "1025",
        "link": "divisor-game",
        "title": "Divisor Game",
        "is_locked": "Normal",
        "titleZh": "\u9664\u6570\u535a\u5f08",
        "frequency": "51.2%",
        "difficulty": "Easy"
    },
    {
        "questionDescription": "<p>Given the <code>root</code> of a binary tree, find the maximum value <code>V</code> for which there exists <strong>different</strong> nodes <code>A</code> and <code>B</code> where <code>V = |A.val - B.val|</code>&nbsp;and <code>A</code> is an ancestor of <code>B</code>.</p>\r\n\r\n<p>(A node A is an ancestor of B if either: any child of A is equal to B, or any child of A is an ancestor of B.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"http://i68.tinypic.com/2whqcep.jpg\" style=\"height: 230px; width: 300px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[8,3,10,1,6,null,14,null,null,4,7,13]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">7</span>\r\n<strong>Explanation: </strong>\r\nWe have various ancestor-node differences, some of which are given below :\r\n|8 - 3| = 5\r\n|3 - 7| = 4\r\n|8 - 1| = 7\r\n|10 - 13| = 3\r\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the tree is between <code>2</code> and <code>5000</code>.</li>\r\n\t<li>Each node will have value between <code>0</code> and <code>100000</code>.</li>\r\n</ol>\r\n",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9&nbsp;<code>root</code>\uff0c\u627e\u51fa\u5b58\u5728\u4e8e\u4e0d\u540c\u8282\u70b9&nbsp;<code>A</code> \u548c&nbsp;<code>B</code>&nbsp;\u4e4b\u95f4\u7684\u6700\u5927\u503c <code>V</code>\uff0c\u5176\u4e2d&nbsp;<code>V = |A.val - B.val|</code>\uff0c\u4e14&nbsp;<code>A</code>&nbsp;\u662f&nbsp;<code>B</code>&nbsp;\u7684\u7956\u5148\u3002</p>\n\n<p>\uff08\u5982\u679c A \u7684\u4efb\u4f55\u5b50\u8282\u70b9\u4e4b\u4e00\u4e3a B\uff0c\u6216\u8005 A \u7684\u4efb\u4f55\u5b50\u8282\u70b9\u662f B \u7684\u7956\u5148\uff0c\u90a3\u4e48\u6211\u4eec\u8ba4\u4e3a A \u662f B \u7684\u7956\u5148\uff09</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/12/2whqcep.jpg\" style=\"height: 230px; width: 300px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[8,3,10,1,6,null,14,null,null,4,7,13]\n<strong>\u8f93\u51fa\uff1a</strong>7\n<strong>\u89e3\u91ca\uff1a </strong>\n\u6211\u4eec\u6709\u5927\u91cf\u7684\u8282\u70b9\u4e0e\u5176\u7956\u5148\u7684\u5dee\u503c\uff0c\u5176\u4e2d\u4e00\u4e9b\u5982\u4e0b\uff1a\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\n\u5728\u6240\u6709\u53ef\u80fd\u7684\u5dee\u503c\u4e2d\uff0c\u6700\u5927\u503c 7 \u7531 |8 - 1| = 7 \u5f97\u51fa\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li>\u6811\u4e2d\u7684\u8282\u70b9\u6570\u5728&nbsp;<code>2</code>&nbsp;\u5230&nbsp;<code>5000</code>&nbsp;\u4e4b\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u4ecb\u4e8e&nbsp;<code>0</code>&nbsp;\u5230&nbsp;<code>100000</code>&nbsp;\u4e4b\u95f4\u3002</li>\n</ol>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "leetId": "1026",
        "link": "maximum-difference-between-node-and-ancestor",
        "title": "Maximum Difference Between Node and Ancestor",
        "is_locked": "Normal",
        "titleZh": "\u8282\u70b9\u4e0e\u5176\u7956\u5148\u4e4b\u95f4\u7684\u6700\u5927\u5dee\u503c",
        "frequency": "41.9%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>Given an array <code>A</code> of integers, return the <strong>length</strong> of the longest arithmetic subsequence in <code>A</code>.</p>\r\n\r\n<p>Recall that a <em>subsequence</em> of <code>A</code> is a list <code>A[i_1], A[i_2], ..., A[i_k]</code> with <code>0 &lt;= i_1 &lt; i_2 &lt; ... &lt; i_k &lt;= A.length - 1</code>, and that a sequence <code>B</code>&nbsp;is <em>arithmetic</em> if <code>B[i+1] - B[i]</code> are all the same value (for <code>0 &lt;= i &lt; B.length - 1</code>).</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,6,9,12]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">4</span>\r\n<strong>Explanation: </strong>\r\nThe whole array is an arithmetic sequence with steps of length = 3.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[9,4,7,2,10]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">3</span>\r\n<strong>Explanation: </strong>\r\nThe longest arithmetic subsequence is [4,7,10].\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[20,1,15,3,10,5,8]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">4</span>\r\n<strong>Explanation: </strong>\r\nThe longest arithmetic subsequence is [20,15,10,5].\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>2 &lt;= A.length &lt;= 2000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\r\n</ol>\r\n</div>",
        "questionDescriptionZh": "<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4&nbsp;<code>A</code>\uff0c\u8fd4\u56de <code>A</code>&nbsp;\u4e2d\u6700\u957f\u7b49\u5dee\u5b50\u5e8f\u5217\u7684<strong>\u957f\u5ea6</strong>\u3002</p>\n\n<p>\u56de\u60f3\u4e00\u4e0b\uff0c<code>A</code>&nbsp;\u7684\u5b50\u5e8f\u5217\u662f\u5217\u8868&nbsp;<code>A[i_1], A[i_2], ..., A[i_k]</code> \u5176\u4e2d&nbsp;<code>0 &lt;= i_1 &lt; i_2 &lt; ... &lt; i_k &lt;= A.length - 1</code>\u3002\u5e76\u4e14\u5982\u679c&nbsp;<code>B[i+1] - B[i]</code>(&nbsp;<code>0 &lt;= i &lt; B.length - 1</code>) \u7684\u503c\u90fd\u76f8\u540c\uff0c\u90a3\u4e48\u5e8f\u5217&nbsp;<code>B</code>&nbsp;\u662f\u7b49\u5dee\u7684\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[3,6,9,12]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a </strong>\n\u6574\u4e2a\u6570\u7ec4\u662f\u516c\u5dee\u4e3a 3 \u7684\u7b49\u5dee\u6570\u5217\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[9,4,7,2,10]\n<strong>\u8f93\u51fa\uff1a</strong>3\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6700\u957f\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u662f [4,7,10]\u3002\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>[20,1,15,3,10,5,8]\n<strong>\u8f93\u51fa\uff1a</strong>4\n<strong>\u89e3\u91ca\uff1a</strong>\n\u6700\u957f\u7684\u7b49\u5dee\u5b50\u5e8f\u5217\u662f [20,15,10,5]\u3002\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ol>\n\t<li><code>2 &lt;= A.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\n</ol>\n",
        "tags": [
            {
                "tag": "Dynamic Programming",
                "link": "dynamic-programming",
                "tagZh": "\u52a8\u6001\u89c4\u5212"
            }
        ],
        "leetId": "1027",
        "link": "longest-arithmetic-sequence",
        "title": "Longest Arithmetic Sequence",
        "is_locked": "Normal",
        "titleZh": "\u6700\u957f\u7b49\u5dee\u6570\u5217",
        "frequency": "24.7%",
        "difficulty": "Medium"
    },
    {
        "questionDescription": "<p>We run a&nbsp;preorder&nbsp;depth first search on the <code>root</code> of a binary tree.</p>\r\n\r\n<p>At each node in this traversal, we output <code>D</code> dashes (where <code>D</code> is the <em>depth</em> of this node), then we output the value of this node.&nbsp;&nbsp;<em>(If the depth of a node is <code>D</code>, the depth of its immediate child is <code>D+1</code>.&nbsp; The depth of the root node is <code>0</code>.)</em></p>\r\n\r\n<p>If a node has only one child, that child is guaranteed to be the left child.</p>\r\n\r\n<p>Given the output <code>S</code> of this traversal, recover the tree and return its <code>root</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/08/recover-a-tree-from-preorder-traversal.png\" style=\"width: 320px; height: 200px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;1-2--3--4-5--6--7&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2,5,3,4,6,7]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/11/screen-shot-2019-04-10-at-114101-pm.png\" style=\"width: 256px; height: 250px;\" /></strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;1-2--3---4-5--6---7&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[1,2,5,3,null,6,null,4,null,7]</span></pre>\r\n</div>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<p><span><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/11/screen-shot-2019-04-10-at-114955-pm.png\" style=\"width: 276px; height: 250px;\" /></span></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;1-401--349---90--88&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[1,401,null,349,88,90]</span>\r\n</pre>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of nodes in the original tree is between <code>1</code> and <code>1000</code>.<code>&nbsp;</code></li>\r\n\t<li>Each node will have a value between <code>1</code> and <code>10^9</code>.</li>\r\n</ul>\r\n</div>",
        "questionDescriptionZh": "<p>\u6211\u4eec\u4ece\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code>&nbsp;\u5f00\u59cb\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3002</p>\n\n<p>\u5728\u904d\u5386\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5904\uff0c\u6211\u4eec\u8f93\u51fa&nbsp;<code>D</code>&nbsp;\u6761\u77ed\u5212\u7ebf\uff08\u5176\u4e2d&nbsp;<code>D</code>&nbsp;\u662f\u8be5\u8282\u70b9\u7684\u6df1\u5ea6\uff09\uff0c\u7136\u540e\u8f93\u51fa\u8be5\u8282\u70b9\u7684\u503c\u3002\uff08<em>\u5982\u679c\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a <code>D</code>\uff0c\u5219\u5176\u76f4\u63a5\u5b50\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a <code>D + 1</code>\u3002\u6839\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a <code>0</code>\uff09\u3002</em></p>\n\n<p>\u5982\u679c\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u4fdd\u8bc1\u8be5\u5b50\u8282\u70b9\u4e3a\u5de6\u5b50\u8282\u70b9\u3002</p>\n\n<p>\u7ed9\u51fa\u904d\u5386\u8f93\u51fa&nbsp;<code>S</code>\uff0c\u8fd8\u539f\u6811\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9&nbsp;<code>root</code>\u3002</p>\n\n<p>&nbsp;</p>\n\n<p><strong>\u793a\u4f8b 1\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/12/recover-a-tree-from-preorder-traversal.png\" style=\"height: 200px; width: 320px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;1-2--3--4-5--6--7&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[1,2,5,3,4,6,7]\n</pre>\n\n<p><strong>\u793a\u4f8b 2\uff1a</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/12/screen-shot-2019-04-10-at-114101-pm.png\" style=\"height: 250px; width: 256px;\"></strong></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;1-2--3---4-5--6---7&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[1,2,5,3,null,6,null,4,null,7]\n</pre>\n\n<p><strong>\u793a\u4f8b 3\uff1a</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/04/12/screen-shot-2019-04-10-at-114955-pm.png\" style=\"height: 250px; width: 276px;\"></p>\n\n<pre><strong>\u8f93\u5165\uff1a</strong>&quot;1-401--349---90--88&quot;\n<strong>\u8f93\u51fa\uff1a</strong>[1,401,null,349,88,90]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>\u63d0\u793a\uff1a</strong></p>\n\n<ul>\n\t<li>\u539f\u59cb\u6811\u4e2d\u7684\u8282\u70b9\u6570\u4ecb\u4e8e <code>1</code> \u548c <code>1000</code> \u4e4b\u95f4\u3002</li>\n\t<li>\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u4ecb\u4e8e <code>1</code> \u548c <code>10 ^ 9</code> \u4e4b\u95f4\u3002</li>\n</ul>\n",
        "tags": [
            {
                "tag": "Tree",
                "link": "tree",
                "tagZh": "\u6811"
            },
            {
                "tag": "Depth-first Search",
                "link": "depth-first-search",
                "tagZh": "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"
            }
        ],
        "leetId": "1028",
        "link": "recover-a-tree-from-preorder-traversal",
        "title": "Recover a Tree From Preorder Traversal",
        "is_locked": "Normal",
        "titleZh": "\u4ece\u5148\u5e8f\u904d\u5386\u8fd8\u539f\u4e8c\u53c9\u6811",
        "frequency": "56.0%",
        "difficulty": "Hard"
    }
]